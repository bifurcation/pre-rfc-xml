<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
        <!ENTITY rfc2119 PUBLIC ""
          "reference.RFC.2119.xml">
        <!ENTITY rfc3688 PUBLIC ""
          "reference.RFC.3688.xml">
        <!ENTITY rfc5486 PUBLIC ""
          "reference.RFC.5486.xml">
        <!ENTITY rfc5246 PUBLIC ""
          "reference.RFC.5246.xml">
        <!ENTITY rfc7235 PUBLIC ""
          "reference.RFC.7235.xml">
        <!ENTITY rfc7230 PUBLIC ""
          "reference.RFC.7230.xml">
		<!ENTITY rfc7231 PUBLIC ""
          "reference.RFC.7231.xml">
        <!ENTITY rfc2818 PUBLIC ""
          "reference.RFC.2818.xml">
        <!ENTITY rfc5321 PUBLIC ""
          "reference.RFC.5321.xml">
		<!ENTITY rfc7525 PUBLIC ""
          "reference.RFC.7525.xml">
]>


<rfc category="std" number="7878"  ipr="trust200902" submissionType="IETF" consensus="yes">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>


<front>
        <title abbrev="SPP Protocol over SOAP">Session Peering Provisioning (SPP) Protocol over SOAP</title>
        <author initials='K.C.' surname="Cartwright" fullname='Kenneth Cartwright'>
                <organization>TNS</organization>
                <address>
                        <postal>
                                <street>10740 Parkridge Boulevard</street>
                                <city>Reston</city> <region>VA</region> 
                                <code>20191</code>
                                <country>United States</country>
                        </postal>
                        <email>kcartwright@tnsi.com</email>
                </address>
        </author>
                <author initials='V.B.' surname="Bhatia" fullname='Vikas Bhatia'>
                <organization>TNS</organization>
                <address>
                        <postal>
                                <street>10740 Parkridge Boulevard</street>
                                <city>Reston</city> <region>VA</region> 
                                <code>20191</code>
                                <country>United States</country>
                        </postal>
                        <email>vbhatia@tnsi.com</email>
                </address>
        </author>
  <author initials="J-F.M." surname="Mule" fullname="Jean-Francois Mule">
   <organization>Apple Inc.</organization>
   <address>
    <postal>
     <street>1 Infinite Loop</street>
     <city>Cupertino</city>
     <region>CA</region>
     <code>95014</code>
     <country>United States</country>
    </postal>
    <email>jfmule@apple.com</email>
   </address>
  </author>
  
  <author initials="A.M." surname="Mayrhofer" fullname="Alexander Mayrhofer">
   <organization>nic.at GmbH</organization>
   <address>
    <postal>
     <street>Karlsplatz 1/2/9</street>
     <city>Wien</city>
     <region> </region>
     <code>A-1010</code>
     <country>Austria</country>
    </postal>
    <email>alexander.mayrhofer@nic.at</email>
   </address>
  </author>

  <date year="2016" month="August"/>

    <area>Real-time Applications and Infrastructure Area</area>

    <workgroup>DRINKS</workgroup>

    <keyword>SIP</keyword>
	<keyword>SPPP</keyword>
	<keyword>Peering</keyword>
	<keyword>Provisioning</keyword>
	<keyword>SED</keyword>	
 

    <abstract>
      <t>The Session Peering Provisioning Framework (SPPF) specifies the data 
	  model and the overall structure to provision Session Establishment Data (SED)
	  into Session Data Registries and SIP Service Provider data stores. To 
	  utilize this framework, one needs a substrate protocol. Given that 
	  the Simple Object Access Protocol (SOAP) is currently widely used for 
	  messaging between elements of such provisioning systems, this document 
	  specifies the usage of SOAP (via HTTPS) as the substrate protocol for 
	  SPPF.  The benefits include leveraging prevalent expertise and a 
	  higher probability that existing  provisioning systems will be able 
	  to easily migrate to using an SPPF-based protocol.
	  </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>SPPF, defined in <xref target="RFC7877"/>,
      is best supported by a transport and messaging infrastructure 
	  that is connection oriented, is request-response oriented, is easily secured, 
	  supports propagation through firewalls in a standard fashion, and 
	  is easily integrated into back-office systems.  This is due to the fact that 
	  the client side of SPPF is likely to be integrated with organizations' 
	  operational support systems that facilitate transactional provisioning of user  
	  addresses and their associated SED.  The server  
	  side of SPPF is likely to reside in a separate organization's network, resulting  
	  in the SPPF provisioning transactions traversing the Internet as 
	  they are propagated from the SPPF client to the SPPF server.  Given the 
	  current state of industry practice and technologies, 
	  SOAP and HTTP(S) are well suited for this type of environment. This document 
	  describes the specification for transporting SPPF XML structures, using 
	  SOAP and HTTP(S) as substrates.</t>

      <t>The specification in this document for transporting SPPF XML structures 
	  over SOAP and HTTP(S) is primarily comprised of five subjects:  (1) a 
	  description of any applicable SOAP features, (2) any applicable HTTP 
	  features, (3) security considerations, (4) (perhaps most importantly) the Web Services Description Language (WSDL) definition for the SPP Protocol over 
	  SOAP, and (5) XML Schema Definition (XSD) types that are "substrate" specific.</t>
	</section>
  
    <section anchor="Terminology" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref target="RFC2119"/>.</t>
    </section>

    <section anchor="SOAPFeatures" title="SOAP Features and Protocol Layering">
      <t>The list of SOAP features that are explicitly 
	  used and required for SPPP over SOAP are limited.  
	  Most SOAP features are not necessary for SPPF.  
	  SPPP over SOAP primarily uses SOAP simply as 
	  a standard message-envelope technology.  The SOAP 
	  message envelope is comprised of the SOAP header 
	  and body.  As described in the <xref target="SOAPREF">SOAP specification</xref>, 
	  the SOAP header can contain optional, application-specific, 
	  information about the message.  The SOAP body contains 
	  the SPPF message itself, whose structure is defined by 
	  the combination of one of the WSDL operations defined 
	  in this document and the SPPF XML data structures defined 
	  in this document and the SPPF document.  SPPF does not rely 
	  on any data elements in the SOAP header.

          All relevant data 
	  elements are defined in the SPPF XML Schema described in 
	  <xref target="RFC7877"/> and the 
	  SPPF WSDL types specification described in <xref target='SPPPWSDL'/> of this document.</t>
	  
	  <t>WSDL is a widely standardized and adopted technology for 
	  defining the top-level structures of the messages that 
	  are transported within the body of a SOAP message.  
	  The WSDL definition for the SPPF SOAP messages is defined 
	  later in this document, which imports by reference the 
	  XML data types contained in the SPPF schema.  
	  The IANA registry where the SPPF schema resides is described 
	  in "The IETF XML Registry" <xref target="RFC3688"/>.</t>
	  
	  <t>There are multiple structural styles that WSDL allows.  The 
	  best practice for this type of application is what is sometimes 
	  referred to as the "document/literal wrapped style".  This 
	  style is generally regarded as an optimal approach that 
	  enhances maintainability, comprehension, portability, and, 
	  to a certain extent, performance.  It is characterized by 
	  setting the soapAction binding style as "document", the soapAction 
	  encoding style as "literal", and then defining the SOAP messages 
	  to simply contain a single data element that "wraps" a data 
	  structure containing all the required input or output data 
	  elements. The figure below illustrates this high-level 
	  technical structure as conceptual layers 3 through 6.</t>
 
	 <figure anchor="TechnicalStructureofSPPP" 
	 title="Layering and Technical Structure of SPPP over SOAP Messages">
        <artwork align="left"><![CDATA[
                              +-------------+
                          (1) |  Transport  |Example:
                              |  Protocol   |  TCP, TLS, BEEP, etc.
                              +-------------+
                                     |
                                     V
                              +-------------+
                          (2) |   Message   |Example:
                              |   Envelope  | HTTP, SOAP, None, etc.
                              +-------------+
                                     |
                                     V
                             +--------------+
                        +----|    SOAP      |---+
                        |(3) |  Operation   |   |
               Contains |    +--------------+   | Contains
                        |        Example:       |
                        V      submitAddRqst    V
               +--------------+           +-------------+
               | SOAP Request |           |SOAP Response|
    Example:   |   Message    |  (4)      |   Message   | Example:
    spppAdd    |  (Operation  |           |  (Operation | spppAdd
    RequestMsg |   Input)     |           |   Output)   | ResponseMsg
               +--------------+           +-------------+
                        |                       |
               Contains |                       | Contains
                        |                       |
                        V                       V
               +--------------+          +---------------+
    Example:   |   Wrapped    |  (5)     |    Wrapped    | Example:
    spppAdd    |Request Object|          |Response Object| spppAdd
    Request    +--------------+          +---------------+ Response
                        |                       |
               Contains |                       | Contains
                        |                       |
                        V                       V
               +--------------+          +---------------+
               |    SPPF      |          |     SPPF      |
               |  XML Types   |  (6)     |   XML Types   |
               +--------------+          +---------------+
 
Legend: 
BEEP = Blocks Extensible Exchange Protocol
TLS = Transport Layer Security
       ]]></artwork>
     </figure>
	  
	  <t>The operations supported by SPPP over SOAP are normatively defined later in this 
	  document.  Each SOAP operation defines a request/input message and a 
	  response/output message.  Each such request and response message then 
	  contains a single object that wraps the SPPF XML data types that comprise 
	  the inputs and the outputs, respectively, of the SOAP operation.</t>

	  <t>SOAP faults are not used by the SPPP over SOAP.  All success 
	  and error responses are specified in <xref target="resultcodes"/> of this document.  
	  However, if a SOAP fault were 
	  to occur, perhaps due to failures in the SOAP message handling layer of a SOAP 
	  library, the client application should capture and handle the fault.  Specifics 
	  on how to handle such SOAP faults, if they should occur, will be specific to 
	  the chosen SOAP implementation. </t>

	  <t>Implementations MUST use SOAP 1.2 <xref target="SOAPREF"/> or higher and MUST support SOAP 1.2. 
	  Implementations SHOULD use WSDL 1.1 <xref target="WSDLREF"/> and MUST NOT use earlier versions.
      Use of WSDL versions greater than 1.1 may introduce interoperability problems with implementations that 
      use 1.1.</t>
	  
        <t> SPPF is a request/reply framework that allows a
          client application to submit provisioning data and query
          requests to a server. The SPPF data structures are designed
          to be protocol agnostic. Concerns regarding encryption,
          non-repudiation, and authentication are beyond the scope of
          this document. For more details, please refer to 
          Section 4 ("Transport Substrate Protocol Requirements") of <xref target="RFC7877"/>.</t>

        <t> As illustrated in the previous diagram, SPPF can be viewed as 
          a set of layers that collectively
          define the structure of an SPPF request and response. Layers
          1 and 2 represent the transport, envelope, and authentication 
          technologies. This
          document defines layers 3, 4, 5, and 6 for SPPP over SOAP. </t>
        <t>
          <list style="numbers">
            <t> Layer 1:  The transport protocol layer represents the communication
              mechanism between the client and server. SPPF can be
              layered over any substrate protocol that provides a set
              of basic requirements defined in Section 4 of <xref target="RFC7877"/>. 
			  </t>
            <t> Layer 2:  The message-envelope layer is optional but can
              provide features that are above the transport technology
              layer but below the application messaging layer.
              Technologies such as HTTP and SOAP are examples of
              message-envelope technologies. 
			  </t>
            <t> Layers 3, 4, 5, and 6:  The operation and message layers provide an
              envelope-independent and substrate-independent 
              wrapper for the SPPF data model objects that are being acted on (created,
              modified, and queried). </t>
          </list>
        </t>
  
	</section>

    <section anchor="HTTPFeatures" title="HTTP(S) Features and SPPP over SOAP">
      <t>While SOAP is not tied to HTTP(S), for reasons described in the 
      Introduction, HTTP(S) is a good choice as the substrate protocol for 
      the SPP Protocol SOAP messages.  HTTP 1.1 includes the &quot;persistent connection&quot; 
      feature, which allows multiple HTTP request/response pairs to be transported 
      across a single HTTP connection.  This is an important performance 
      optimization feature, particularly when the connection is an HTTPS 
      connection where the relatively time-consuming TLS handshake has occurred.
      </t> 
	  <t>Implementations compliant with this document MUST use HTTP 1.1 <xref target="RFC7230"/> 
	  or higher. Also, implementations SHOULD use persistent connections. </t>
   </section>

    <section anchor="AuthenticationIntegrityConfidentiality" title="Authentication, Integrity, and Confidentiality">
      
      <t>To accomplish authentication, conforming SPPP over SOAP clients and servers MUST use HTTP Digest Authentication as defined in <xref target="RFC7235"/>.</t>
      <t>To achieve integrity and privacy, conforming SPPP over SOAP clients and servers MUST support TLS as defined in <xref target="RFC5246"/> as the secure transport mechanism.
	  Use of TLS MUST follow the recommendations contained in <xref target="RFC7525"/>
      </t>
    </section>
    
	<section anchor="LanguageIdentification" title="Language Identification">
	  <t>
	  Section 9 of <xref target="RFC7877"/> requires protocols
	  to provide a mechanism to transmit language tags together with human-readable 
	  messages. When conforming SPPP SOAP servers use such tagging, the XML 
      "lang" attribute (<xref target="W3C.REC-xml-20081126"/>, Section 2.12) 
      MUST be used. Clients MAY use the HTTP "Accept-Language" header 
      field (see Section 5.3.5 of <xref target="RFC7231"/>) in order to indicate their 
      language preference.
	  </t>
	</section>
	
    <section anchor="basicdatastructures" title="SPPP SOAP Data Structures">

       <t>SPPP over SOAP uses a set of XML-based data structures for all the supported operations
       and any parameters to which those operations are applied. As also mentioned earlier in this document,  these XML structures
       are envelope independent and substrate independent. Refer to "Protocol Operations" (<xref target='protocol_oper'/>) of 
       this document for a description of all the operations that MUST be supported.</t>
       <t>The following sections describe the definitions of all the XML data structures. </t>

       <section anchor="concreteobjkeys" title="Concrete Object Key Types">
       <t>Certain operations in SPPF require an object key that uniquely identifies the object(s) on which a given operation
       needs to be performed. SPPF defines the XML structure of any such object key in an abstract manner and delegates
       the concrete representation to any conforming substrate protocol. The following subsections define the various types of
       concrete object key types used in various operations in SPPP over SOAP. </t>
         <section anchor="objectkey" title="Generic Object Key">
         <t>
        Most objects in SPPP over SOAP are uniquely identified by the attributes in the generic object key (Refer to "Generic Object Key Type",  
        Section 5.2.1 of <xref target="RFC7877"/>, for details). The concrete XML representation of ObjKeyType is as below:</t>
                  <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
                
   <complexType name="ObjKeyType">
    <complexContent>
     <extension base="sppfb:ObjKeyType">
      <sequence>
       <element name="rant" type="sppfb:OrgIdType"/>
       <element name="name" type="sppfb:ObjNameType"/>
       <element name="type" type="sppfs:ObjKeyTypeEnum"/>
      </sequence>
     </extension>
    </complexContent>
   </complexType>

                 ]]>
              </artwork>
            </figure>
          </t>
                <t> The ObjKeyType has the data elements as described below: 
          <list style="symbols" hangIndent="5">
           <t>rant: The identifier of the Registrant organization that owns the object.</t>

           <t>name: The character string that contains the name of the object.</t>

           <t>type: The enumeration value that represents the type of SPPF object. For example, 
           both a Destination Group and a SED Group can have the same name "TestObj" and be associated with the same Registrant ID. Hence, to uniquely identify
        the object that represents a Destination Group with the name "TestObj", the type "DestGrp" must be specified when using this concrete ObjKeyType structure to identify the Destination Group "TestObj".</t>
          </list>
          </t>
             <t> The object types in SPPP over SOAP MUST
        adhere to the above definition of generic object key and are defined as an enumeration in the XML data structure as follows:</t>
             <figure title="">
      <artwork align="left"><![CDATA[
 <simpleType name="ObjKeyTypeEnum">
   <restriction base="token">
     <enumeration value="SedGrp"/>
     <enumeration value="DestGrp"/>
     <enumeration value="SedRec"/>
     <enumeration value="EgrRte"/>
   </restriction>
 </simpleType>
                        ]]></artwork>
     </figure>
 </section>
       <section anchor="pubidkey" title="Public Identifier Object Key">
         <t>
        Public Identifier type objects can further be of various sub-types like a Telephone Number (TN), 
		Routing Number (RN), TN Prefix, URI, or TN Range and cannot be cleanly identified
        with the attributes in the generic ObjKeyType. The definition of PubIdKeyType is as below:</t>
                  <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
                
   <complexType name="PubIdKeyType">
    <complexContent>
     <extension base="sppfb:PubIdKeyType">
      <sequence>
       <element name="rant" type="sppfb:OrgIdType"/>
       <choice>
        <element name="number" 
        type="sppfb:NumberType"/>
        <element name="range"
         type="sppfb:NumberRangeType"/>
        <element name="uri"
         type="anyURI"/>
       </choice>
      </sequence>
     </extension>
    </complexContent>
   </complexType>

                 ]]>
              </artwork>
            </figure>
          </t>
                <t> The PubIdKeyType has data elements, as described below: 
          <list style="symbols" hangIndent="5">
          <t>rant: The identifier of the Registrant organization that owns the object.</t>
          <t>number: An element of type NumberType (refer to Section 12 of <xref target="RFC7877"/>) that contains the value and type of a
          number.</t>
          <t>range: An element of type NumberRangeType (refer to Section 12 of <xref target="RFC7877"/>) that contains a range of numbers.</t>
          <t>uri: A value that represents a Public Identifier.</t>
          </list>
          Any instance of PubIdKeyType MUST contain exactly one element from the following set of elements: "number", "range", "uri".
          </t>
 </section>
      <section anchor="sedgrpofferkey" title="SED Group Offer Key">
         <t>
        In addition to the  attributes in the generic ObjKeyType, a SED Group Offer object is uniquely identified by the organization ID of the organization
        to whom a SED Group has been offered. The definition of SedGrpOfferKeyType is as below:</t>
                  <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
                
   <complexType name="SedGrpOfferKeyType">
    <complexContent>
     <extension base="sppfb:SedGrpOfferKeyType">
      <sequence>
       <element name="sedGrpKey" type="sppfs:ObjKeyType"/>
       <element name="offeredTo" type="sppfb:OrgIdType"/>
      </sequence>
     </extension>
    </complexContent>
   </complexType>

                 ]]>
              </artwork>
            </figure>
          </t>
                <t> The SedGrpOfferKeyType has the data elements as described below: 
          <list style="symbols" hangIndent="5">
          <t>sedGrpKey: Identifies the SED Group that was offered.</t>

          <t>offeredTo: The organization ID of the organization that was offered the SED Group object identified by the sedGrpKey.</t>
          </list>
          </t>
 </section>
       </section>
    
       
       <section anchor="requestandresponse" title="Operation Request and Response Structures">

         <t> An SPPF client interacts with an SPPF server by sending one or more
         requests to the server and by receiving corresponding responses from
         the server.  The basic set of operations that an SPPF
         client can submit to an SPPF server and the semantics of those operations 
		 are defined in "Framework Operations", Section 7 of <xref target="RFC7877"/>.
		 The following subsections describe the XML data structures that are used for 
		 each of those types of operations for an SPPP over SOAP implementation. </t>
         
<section anchor="addsandmods" title="Add Operation Structure">
<t>In order to add (or modify) an object in the Registry, an authorized entity
   can send the spppAddRequest to the Registry.</t>

         <t>An SPPP over SOAP Add request is wrapped within the
         <![CDATA[<spppAddRequest> ]]> element while an SPPP over SOAP Add response is
         wrapped within an <![CDATA[<spppAddResponse>]]> element.
         The following sub&nbhy;sections describe the <![CDATA[<spppAddRequest> ]]> and <![CDATA[<spppAddResponse>]]> elements. 
         Refer to <xref target="examples"/> for an  example of an Add operation on each type of SPPF object.</t>
   <section anchor="addrqst" title="Add Request">
 
          <t> An SPPP over SOAP Add request definition is contained within the generic
            <![CDATA[<spppAddRequest>]]> element. </t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
                
   <element name="spppAddRequest">
    <complexType>
     <sequence>
      <element name="clientTransId"
       type="sppfb:TransIdType" minOccurs="0"/>
      <element name="minorVer"
       type="sppfb:MinorVerType" minOccurs="0"/>
      <element name="obj" type="sppfb:BasicObjType" 
      maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>
                 ]]>
              </artwork>
            </figure>
          </t>
        
          <t> The data elements within the <![CDATA[<spppAddRequest>]]> 
          element are described as follows: 
          <list style="symbols" hangIndent="5">
            <t> clientTransId: Zero or one client-generated transaction ID
              that, within the context of the SPPF client, identifies this 
              request. This value can be used at the discretion of the SPPF 
              client to track, log, or correlate requests and their responses. The SPPF server MUST echo back this value to the client in the corresponding response to the incoming request.
              The SPPF server will not check this value for uniqueness. </t>

            <t> minorVer: Zero or one minor version identifier, as defined in <xref target="minorver"/>.</t>

            <t> obj: One or more elements of abstract type BasicObjType (defined in <xref target="RFC7877"/>). 
			Each element contains all the attributes of an SPPF object that the client 
			is requesting the SPPF server to add. Refer to  
            Section 3.1 of <xref target="RFC7877"/> for the XML structure of all concrete types, for various SPPF objects,
          that extend from abstract BasicObjType and hence are eligible to be passed into this element. The elements are processed 
              by the SPPF server in the order in which they are included in the request.  
              With respect to the handling of error conditions, conforming SPPP SOAP servers
			  MUST stop processing BasicObjType elements in the request at
              the first error and roll back any BasicObjType elements
              that had already been processed for that add request ("stop and roll back").
			  
            </t>
          </list>
          </t>
        </section>
 <section anchor="addresponse" title="Add Response">
          <t> An SPPP over SOAP add response object is contained within the generic
          <![CDATA[<spppAddResponse>]]> element.  This response structure is used for all
          types of SPPF objects that are provisioned by the SPPF client.</t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
  <element name="spppAddResponse">
    <complexType>
      <sequence>
        <element name="clientTransId" type="sppfb:TransIdType" 
         minOccurs="0"/>
        <element name="serverTransId" type="sppfb:TransIdType"/>
        <element name="overallResult" type="sppfs:ResultCodeType"/>
        <element name="detailResult" type="sppfs:ObjResultCodeType" 
        minOccurs="0" maxOccurs="unbounded"/>
      </sequence>
    </complexType>
  </element>
  
  <complexType name="ResultCodeType">
    <sequence>
       <element name="code" type="int"/>
       <element name="msg" type="string"/>
    </sequence>
  </complexType>
  
   <complexType name="ObjResultCodeType">
    <complexContent>
     <extension base="sppfs:ResultCodeType">
      <sequence>
       <element name="obj" type="sppfb:BasicObjType"/>
      </sequence>
     </extension>
    </complexContent>
   </complexType>
  
                                ]]>
              </artwork>
            </figure>
          </t>
          <t> An <![CDATA[<spppAddResponse>]]> contains the 
          elements necessary for the SPPF client to precisely determine the 
          overall result of the request, and if an error occurs, it provides 
          information about the specific object(s) that
          caused the error. </t>

          <t> The data elements within the SPPP over SOAP Add response are
            described as follows: <list style="symbols" hangIndent="5">
              <t> clientTransId: Zero or one client transaction ID.  This 
              value is simply an echo of the client transaction ID that 
              the SPPF client passed into the SPPF update request. When included 
              in the request, the SPPF server MUST return it in the corresponding
              response message.</t>

              <t> serverTransId: Exactly one server transaction ID that
              identifies this request for tracking purposes. This
              value MUST be unique for a given SPPF server. </t>

              <t> overallResult: Exactly one response code and message pair that 
              explicitly identifies the result of the request. See <xref target="resultcodes"/> for further details. </t>

              <t> detailResult: An optional response code, response message, 
              and BasicObjType (as defined in <xref target="RFC7877"/>)  triplet. This element 
              will be present only if an object-level error has occurred. 
              It indicates the error condition and the exact request object that contributed to the error. The response code will reflect the exact error. 
              See <xref target="resultcodes"/> for further details.</t>
            </list>
          </t>
          
        </section>
       
        </section>

        <section anchor="dels" title="Delete Operation Structure">
         <t>In order to remove an object from the Registry, an authorized entity
   can send the spppDelRequest into the Registry. An SPPP over SOAP Delete request is wrapped within the
         <![CDATA[<spppDelRequest> ]]> element while an SPPP over SOAP Delete response is
         wrapped within the generic <![CDATA[<spppDelResponse>]]> element.
        The following subsections describe the <![CDATA[<spppDelRequest> ]]> and <![CDATA[<spppDelResponse>]]> elements. Refer to <xref target="examples"/> for an  example of the Delete operation on each type of SPPF object.</t>

 <section anchor="delrqst" title="Delete Request">
          <t> An SPPP over SOAP Delete request definition is contained within the generic
            <![CDATA[<spppDelRequest>]]> element. </t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
                
   <element name="spppDelRequest">
    <complexType>
     <sequence>
      <element name="clientTransId" 
      type="sppfb:TransIdType" minOccurs="0"/>
      <element name="minorVer" 
      type="sppfb:MinorVerType" minOccurs="0"/>
     <element name="objKey" type="sppfb:ObjKeyType"
      maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>

                 ]]>
              </artwork>
            </figure>
          </t>
        
          <t> The data elements within the <![CDATA[<spppDelRequest>]]> 
          element are described as follows: 
          <list style="symbols" hangIndent="5">
            <t> clientTransId: Zero or one client-generated transaction ID
              that, within the context of the SPPF client, identifies this 
              request. This value can be used at the discretion of the SPPF 
              client to track, log, or correlate requests and their responses. The SPPF server MUST echo back this value to the client in the corresponding response to the incoming request.
              SPPF server will not check this value for uniqueness. </t>
			<t> minorVer: Zero or one minor version identifier, as defined in <xref target="minorver"/>.</t>  
            <t> objKey: One or more elements of abstract type ObjKeyType (as defined in <xref target="RFC7877"/>). Each element contains attributes that uniquely identify
          the object that the client is requesting the server to delete. Refer to <xref target="concreteobjkeys"/>
          for a description of all concrete object key types, for various SPPF objects, which are eligible to be passed into this element. The elements are processed 
              by the SPPF server in the order in which they are included in the request.  
              With respect to the handling of error conditions, conforming SPPP SOAP servers
			  MUST stop processing ObjKeyType elements in the request at
              the first error and roll back any ObjKeyType elements
              that had already been processed for that Delete request ("stop and roll back").
			  
            </t>
          </list>
          </t>
        </section>
        <section anchor="delresponse" title="Delete Response">
          <t> An SPPP over SOAP delete response object is contained within the generic
          <![CDATA[<sppDeleteResponse>]]> element.  This response structure is used for a Delete request on all 
          types of SPPF objects that are  provisioned by the SPPF client.</t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
<element name="spppDelResponse">
 <complexType>
  <sequence>
   <element name="clientTransId" type="sppfb:TransIdType" 
            minOccurs="0"/>
   <element name="serverTransId" type="sppfb:TransIdType"/>
   <element name="overallResult" type="sppfs:ResultCodeType"/>
   <element name="detailResult" type="sppfs:ObjKeyResultCodeType" 
            minOccurs="0" maxOccurs="unbounded"/>
  </sequence>
 </complexType>
</element>
  
<complexType name="ResultCodeType">
 <sequence>
  <element name="code" type="int"/>
  <element name="msg" type="string"/>
 </sequence>
</complexType>
  
<complexType name="ObjKeyResultCodeType">
 <complexContent>
  <extension base="sppfs:ResultCodeType">
   <sequence>
    <element name="objKey" type="sppfb:ObjKeyType"/>
   </sequence>
  </extension>
 </complexContent>
</complexType>
  
                                ]]>
              </artwork>
            </figure>
          </t>
          <t> An <![CDATA[<spppDelResponse>]]> contains the 
          elements necessary for the SPPF client to precisely determine the 
          overall result of the request, and if an error occurs, it provides 
          information about the specific object key(s) that
          caused the error. </t>

          <t> The data elements within the SPPP over SOAP Delete response are
            described as follows: <list style="symbols" hangIndent="5">
              <t> clientTransId: Zero or one client transaction ID.  This 
              value is simply an echo of the client transaction ID that 
              the SPPF client passed into the SPPF update request. When included 
              in the request, the SPPF server MUST return it in the corresponding
              response message.</t>

              <t> serverTransId: Exactly one server transaction ID that
              identifies this request for tracking purposes. This
              value MUST be unique for a given SPPF server. </t>

              <t> overallResult: Exactly one response code and message pair that 
              explicitly identifies the result of the request. See <xref target="resultcodes"/> for further details. </t>

              <t> detailResult: An optional response code, response message, 
              and ObjKeyType (as defined in <xref target="RFC7877"/>) triplet. This element will be present only if a specific object key level error has occurred. 
              It indicates the error condition and the exact request object key that contributed to the error. The response code will reflect the exact error. 
              See <xref target="resultcodes"/> for further details.</t>
            </list>
          </t>
          
        </section>

        </section>
        
        
         <section anchor="accepts" title="Accept Operation Structure">
         <t>In SPPF, a SED Group Offer can be accepted or rejected by, or on behalf of, the Registrant to 
   whom the SED Group has been offered (refer to Section 3.1 of <xref target="RFC7877"/> for a description
   of the SED Group Offer object). The Accept operation is used to accept such SED Group Offers by, or on
   behalf of, the Registrant. The request structure for an SPPP over SOAP Accept operation is wrapped within the
         <![CDATA[<spppAcceptRequest> ]]> element while an SPPP over SOAP Accept response is
         wrapped within the generic <![CDATA[<spppAcceptResponse>]]> element.
         The following subsections describe the <![CDATA[<spppAcceptRequest> ]]> and <![CDATA[<spppAcceptResponse>]]> elements. Refer to <xref target="examples"/> for an example of the Accept operation on a SED Group Offer.</t>

<section anchor="acceptrqst" title="Accept Request Structure">
          <t> An SPPP over SOAP Accept request definition is contained within the generic
            <![CDATA[<sppAcceptRequest>]]> element. </t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
                
   <element name="spppAcceptRequest">
    <complexType>
     <sequence>
      <element name="clientTransId" 
      type="sppfb:TransIdType" minOccurs="0"/>
      <element name="minorVer" 
      type="sppfb:MinorVerType" minOccurs="0"/>
      <element name="sedGrpOfferKey" 
      type="sppfs:SedGrpOfferKeyType" 
      maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>

                 ]]>
              </artwork>
            </figure>
          </t>
        
          <t> The data elements within the <![CDATA[<spppAcceptRequest>]]> 
          element are described as follows: 
          <list style="symbols" hangIndent="5">
            <t> clientTransId: Zero or one client-generated transaction ID
              that, within the context of the SPPF client, identifies this 
              request. This value can be used at the discretion of the SPPF 
              client to track, log, or correlate requests and their responses. 
              The SPPF server MUST echo back this value to the client in the corresponding response to the incoming request.
              The SPPF server will not check this value for uniqueness. </t>

            <t> minorVer: Zero or one minor version identifier, as defined in <xref target="minorver"/>.</t>

            <t> sedGrpOfferKey: One or more elements of type SedGrpOfferKeyType (as defined in this document). Each element contains attributes that uniquely identify
          a SED Group Offer that the client is requesting the server to accept. The elements are processed 
              by the SPPF server in the order in which they are included in the request.  
			  With respect to the handling of error conditions, conforming SPPP SOAP servers
			  MUST stop processing SedGrpOfferKeyType elements in the request at
              the first error and roll back any SedGrpOfferKeyType elements
              that had already been processed for that Accept request ("stop and roll back").
			  
            </t>
          </list>
          </t>
          </section>
           <section anchor="acceptresponse" title="Accept Response">
          <t> An SPPP over SOAP accept response structure is contained within the generic
          <![CDATA[<sppAcceptResponse>]]> element.  This response structure is used for an Accept request on a SED Group Offer.</t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
<element name="spppAcceptResponse">
 <complexType>
  <sequence>
   <element name="clientTransId" type="sppfb:TransIdType" 
            minOccurs="0"/>
   <element name="serverTransId" type="sppfb:TransIdType"/>
   <element name="overallResult" type="sppfs:ResultCodeType"/>
   <element name="detailResult" 
            type="sppfs:SedGrpOfferKeyResultCodeType" 
            minOccurs="0" maxOccurs="unbounded"/>
  </sequence>
 </complexType>
</element>
  
<complexType name="ResultCodeType">
 <sequence>
  <element name="code" type="int"/>
  <element name="msg" type="string"/>
 </sequence>
</complexType>
  
<complexType name="SedGrpOfferKeyResultCodeType">
 <complexContent>
  <extension base="sppfs:ResultCodeType">
   <sequence>
    <element name="sedGrpOfferKey" type="sppfs:SedGrpOfferKeyType"/>
   </sequence>
  </extension>
 </complexContent>
</complexType>
  
                                ]]>
              </artwork>
            </figure>
          </t>
          <t> An <![CDATA[<spppAcceptResponse>]]> contains the 
          elements necessary for the SPPF client to precisely determine the 
          overall result of the request, and if an error occurs, it provides 
          information about the specific SED Group Offer key(s) that
          caused the error. </t>

          <t> The data elements within the SPPP over SOAP Accept response are
            described as follows: <list style="symbols" hangIndent="5">
              <t> clientTransId: Zero or one client transaction ID.  This 
              value is simply an echo of the client transaction ID that 
              the SPPF client passed into the SPPF update request. When included 
              in the request, the SPPF server MUST return it in the corresponding
              response message.</t>

              <t> serverTransId: Exactly one server transaction ID that
              identifies this request for tracking purposes. This
              value MUST be unique for a given SPPF server. </t>

              <t> overallResult: Exactly one response code and message pair that 
              explicitly identifies the result of the request. See <xref target="resultcodes"/> for further details. </t>

              <t> detailResult: An optional response code, response message, 
              and SedGrpOfferKeyType (as defined in this document) triplet. This element will be present only if any specific SED Group Offer key level error has occurred. 
              It indicates the error condition and the exact request SED Group Offer key that contributed to the error. The response code will reflect the exact error. 
              See <xref target="resultcodes"/> for further details.</t>
            </list>
          </t>
          
        </section>

        </section>
        <section anchor="rejects" title="Reject Operation Structure">
         <t>In SPPF, a SED Group Offer can be accepted or rejected by, or on behalf of, the Registrant to 
   whom the SED Group has been offered  (refer to "Framework Data Model Objects", Section 6 of <xref target="RFC7877"/> for a description
   of the SED Group Offer object). The Reject operation is used to reject such SED Group Offers by, or on
   behalf of, the Registrant. The request structure for an SPPP over SOAP Reject operation is wrapped within the
         <![CDATA[<spppRejectRequest> ]]> element while an SPPP over SOAP Reject response is
         wrapped within the generic <![CDATA[<spppRejecResponse>]]> element.
          The following subsections describe the <![CDATA[<spppRejectRequest> ]]> and <![CDATA[<spppRejecResponse>]]> elements. Refer to <xref target="examples"/> for an example of the Reject operation on a SED Group Offer.</t>
<section anchor="rejectrqst" title="Reject Request">
          <t> An SPPP over SOAP Reject request definition is contained within the generic
            <![CDATA[<spppRejectRequest>]]> element. </t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
                
   <element name="spppRejectRequest">
    <complexType>
     <sequence>
      <element name="clientTransId" 
      type="sppfb:TransIdType" minOccurs="0"/>
      <element name="minorVer" 
      type="sppfb:MinorVerType" minOccurs="0"/>
      <element name="sedGrpOfferKey" 
      type="sppfs:SedGrpOfferKeyType" 
      maxOccurs="unbounded"/>
    </complexType>
   </element>

                 ]]>
              </artwork>
            </figure>
          </t>
        
          <t> The data elements within the <![CDATA[<spppRejectRequest>]]> 
          element are described as follows: 
          <list style="symbols" hangIndent="5">
            <t> clientTransId: Zero or one client-generated transaction ID
              that, within the context of the SPPF client, identifies this 
              request. This value can be used at the discretion of the SPPF 
              client to track, log, or correlate requests and their responses. The SPPF server MUST echo back this value to the client in the corresponding response to the incoming request.
              The SPPF server will not check this value for uniqueness. </t>

            <t> minorVer: Zero or one minor version identifier, as defined in <xref target="minorver"/>.</t>

            <t>sedGrpOfferKey: One or more elements of type SedGrpOfferKeyType (as defined in this document). Each element contains attributes that uniquely identify
          a SED Group Offer that the client is requesting the server to reject. The elements are processed 
              by the SPPF server in the order in which they are included in the request.  
              
			  With respect to the handling of error conditions, conforming SPPF servers
			  MUST stop processing SedGrpOfferKeyType elements in the request at
              the first error and roll back any SedGrpOfferKeyType elements
              that had already been processed for that Reject request ("stop and roll back").
			  
            </t>
          </list>
          </t>
          </section>
                  <section anchor="rejectresponse" title="Reject Response">
          <t> An SPPP over SOAP reject response structure is contained within the generic
          <![CDATA[<sppRejectResponse>]]> element.  This response structure is used for a Reject request on a SED Group Offer.</t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
<element name="spppRejectResponse">
 <complexType>
  <sequence>
   <element name="clientTransId" type="sppfb:TransIdType" 
            minOccurs="0"/>
   <element name="serverTransId" type="sppfb:TransIdType"/>
   <element name="overallResult" type="sppfs:ResultCodeType"/>
   <element name="detailResult" 
            type="sppfs:SedGrpOfferKeyResultCodeType" 
            minOccurs="0" maxOccurs="unbounded"/>
  </sequence>
 </complexType>
</element>
  
<complexType name="ResultCodeType">
 <sequence>
  <element name="code" type="int"/>
  <element name="msg" type="string"/>
 </sequence>
</complexType>
  
<complexType name="SedGrpOfferKeyResultCodeType">
 <complexContent>
  <extension base="sppfs:ResultCodeType">
   <sequence>
    <element name="sedGrpOfferKey" type="sppfs:SedGrpOfferKeyType"/>
   </sequence>
  </extension>
 </complexContent>
</complexType>
  
                                ]]>
              </artwork>
            </figure>
          </t>
          <t> An <![CDATA[<spppRejectResponse>]]> contains the 
          elements necessary for the SPPF client to precisely determine the 
          overall result of the request, and if an error occurs, it provides 
          information about the specific SED Group Offer key(s) that
          caused the error. </t>

          <t> The data elements within the SPPP over SOAP Reject response are
            described as follows: <list style="symbols" hangIndent="5">
              <t> clientTransId: Zero or one client transaction ID.  This 
              value is simply an echo of the client transaction ID that 
              the SPPF client passed into the SPPF update request. When included 
              in the request, the SPPF server MUST return it in the corresponding
              response message.</t>

              <t> serverTransId: Exactly one server transaction ID that
              identifies this request for tracking purposes. This
              value MUST be unique for a given SPPF server. </t>

              <t> overallResult: Exactly one response code and message pair that 
              explicitly identifies the result of the request. See <xref target="resultcodes"/> for further details. </t>

              <t> detailResult: An optional response code, response message, 
              and SedGrpOfferKeyType (as defined in this document) triplet. This element will be present only if any specific SED Group Offer key level error has occurred. 
              It indicates the error condition and the exact request SED Group Offer key that contributed to the error. The response code will reflect the exact error. 
              See <xref target="resultcodes"/> for further details.</t>
            </list>
          </t>
          
        </section>
        </section>
        <section anchor="batchopn" title="Batch Operation Structure">
         <t>An SPPP over SOAP Batch request XML structure allows the SPPF client to send any of 
         the Add, Del, Accept, or Reject operations together in one single request. This gives an SPPF client the 
         flexibility to use one single request structure to perform more than operations (verbs).
         The batch request structure is wrapped within the 
         <![CDATA[<spppBatchRequest> ]]> element while an SPPF Batch response is
         wrapped within the <![CDATA[<spppBatchResponse>]]> element.
          The following subsections describe the <![CDATA[<spppBatchRequest> ]]> and <![CDATA[<spppBatchResponse>]]> elements. Refer to <xref target="examples"/> for an  example of a Batch operation.</t>
        <section anchor="batchreq" title="Batch Request Structure">
          <t> An SPPP over SOAP Batch request definition is contained within the generic
            <![CDATA[<spppBatchRequest>]]> element.</t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
                
    <element name="spppBatchRequest">
    <complexType>
     <sequence>
      <element name="clientTransId" 
      type="sppfb:TransIdType" minOccurs="0"/>
      <element name="minorVer" 
      type="sppfb:MinorVerType" minOccurs="0"/>
       <choice minOccurs="1" maxOccurs="unbounded">
        <element name="addObj" type="sppfb:BasicObjType"/>
        <element name="delObj" type="sppfb:ObjKeyType"/>
        <element name="acceptSedGrpOffer" 
        type="sppfs:SedGrpOfferKeyType"/>
        <element name="rejectSedGrpOffer" 
        type="sppfs:SedGrpOfferKeyType"/>
       </choice>
     </sequence>
    </complexType>
   </element>
                 ]]>
              </artwork>
            </figure>
          </t>
        
          <t> The data elements within the <![CDATA[<sppBatchRequest>]]> 
          element are described as follows: 
          <list style="symbols" hangIndent="5">
            <t> clientTransId: Zero or one client-generated transaction ID
              that, within the context of the SPPF client, identifies this 
              request. This value can be used at the discretion of the SPPF 
              client to track, log, or correlate requests and their responses. The SPPF server MUST echo back this value to the client in the corresponding response to the incoming request.
              The SPPF server will not check this value for uniqueness. </t>
            <t> minorVer: Zero or one minor version identifier, as defined in <xref target="minorver"/>.</t>
             <t>addObj: One or more elements of abstract type BasicObjType where each element identifies an object that needs to be added.</t>
              <t>delObj: One or more elements of abstract type ObjKeyType where each element identifies a key for the object that needs to be deleted .</t>
               <t>acceptSedGrpOffer: One or more elements of type SedGrpOfferKeyType where each element identifies a SED Group Offer that needs to be accepted.</t>
                <t>rejectSedGrpOffer: One or more elements of type SedGrpOfferKeyType where each element identifies a SED Group Offer that needs to be rejected.</t>
          </list>
          </t>
          <t>With respect to the handling of error conditions, conforming SPPP SOAP servers
			 MUST stop processing elements in the request at
             the first error and roll back any elements
             that had already been processed for that Batch request ("stop and roll back").
		  

			  </t>

        </section>
                   <section anchor="batchresponse" title="Batch Response">
          <t> An SPPP over SOAP batch response structure is contained within the generic
          <![CDATA[<sppBatchResponse>]]> element.  This response structure is used for a Batch request that contains many different types of SPPF operations.</t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
  <element name="spppBatchResponse">
    <complexType>
      <sequence>
        <element name="clientTransId" type="sppfb:TransIdType" 
         minOccurs="0"/>
        <element name="serverTransId" type="sppfb:TransIdType"/>
        <element name="overallResult" type="sppfs:ResultCodeType"/>
        <choice minOccurs="0" maxOccurs="unbounded">
           <element name="addResult" 
           type="sppfs:ObjResultCodeType"/>
           <element name="delResult"
           type="sppfs:ObjKeyResultCodeType"/>
           <element name="acceptResult" 
           type="sppfs:SedGrpOfferKeyResultCodeType"/>
           <element name="rejectResult" 
           type="sppfs:SedGrpOfferKeyResultCodeType"/>
         </choice>
      </sequence>
    </complexType>
  </element>
  
                                ]]>
              </artwork>
            </figure>
          </t>
          <t> An <![CDATA[<spppBatchResponse>]]> contains the 
          elements necessary for an SPPF client to precisely determine the 
          overall result of various operations in the request, and if an error occurs, it provides 
          information about the specific objects or keys in the request that
          caused the error. </t>

          <t> The data elements within the SPPP over SOAP Batch response are
            described as follows: <list style="symbols" hangIndent="5">
              <t> clientTransId: Zero or one client transaction ID.  This 
              value is simply an echo of the client transaction ID that 
              the SPPF client passed into the SPPF update request. When included 
              in the request, the SPPF server MUST return it in the corresponding
              response message.</t>

              <t> serverTransId: Exactly one server transaction ID that
              identifies this request for tracking purposes. This
              value MUST be unique for a given SPPF server. </t>

              <t> overallResult: Exactly one response code and message pair that 
              explicitly identifies the result of the request. See <xref target="resultcodes"/> for further details. </t>

             <t>addResult: One or more elements of type ObjResultCodeType where each element identifies the result code, result message, and the specific object to which the result relates.</t>
              <t>delResult: One or more elements of type ObjKeyResultCodeType where each element identifies the result code, result message, and the specific object key to which the result relates.</t>
               <t>acceptResult: One or more elements of type SedGrpOfferKeyResultCodeType where each element identifies the result code, result message, and the specific SED Group Offer key to which the result relates.</t>

                <t>rejectResult: One or more elements of type SedGrpOfferKeyResultCodeType where each element identifies the result code, result message, and the specific SED Group Offer key to which the result relates.</t>
            </list>
          </t>
          
        </section>
        </section>
        
       
        
     <section anchor="gets" title="Get Operation Structure">
          <t> In order to query the details of an object from the Registry, an authorized entity
   can send the spppGetRequest to the Registry with a GetRqstType XML data structure containing one or more
   object keys that uniquely identify the object whose details are being queried.  
         The following subsections describe the <![CDATA[<spppGetRequest>]]> and <![CDATA[<spppGetResponse>]]> elements. Refer to <xref target="examples"/> for an example of the SPPP over SOAP Get operation on each type of SPPF object.</t>
         <section anchor="getreq" title="Get Request">
          <t>
The request structure for an SPPP over SOAP Get operation is contained within the generic
            <![CDATA[<spppGetRequest>]]> element:
			</t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
   <element name="spppGetRequest">
    <complexType>
     <sequence>
      <element name="minorVer" 
      type="sppfb:MinorVerType" minOccurs="0"/>
      <element name="objKey" 
      type="sppfb:ObjKeyType" 
      maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>
                 ]]>
              </artwork>
            </figure>
          </t>
        
          <t> The data elements within the <![CDATA[<spppGetRequest>]]> 
          element are described as follows: 
          <list style="symbols" hangIndent="5">
            <t> minorVer: Zero or one minor version identifier, as defined in <xref target="minorver"/>.</t>

            <t> objKey: One or more elements of abstract type ObjKeyType (as defined in <xref target="RFC7877"/>). Each element contains attributes that uniquely identify
          the object that the client is requesting the server to query. Refer to <xref target="concreteobjkeys"/> of this document 
          for a description of all concrete object key types, for various SPPF objects, which are eligible to be passed into this element. 
            </t>
          </list>
          </t>
</section>
<section anchor="getresponse" title="Get Response">

<t>The SPPP over SOAP Get response is
         wrapped within the generic <![CDATA[<spppGetResponse>]]> element, as described in <xref target="genericqueryresponse"/>.</t>
        </section>
        </section>
       <section anchor="getsedgrpoffers" title="Get SED Group Offers Operation Structure">
          <t> In addition to the ability to query the details of one or more SED Group Offers using a SED Group Offer key in the spppGetRequest, this operation
          also provides an additional, more flexible, structure to query for SED Group Offer objects. This additional structure is contained within the
            <![CDATA[<getSedGrpOffersRequest>]]> element while the response is
         wrapped within the generic <![CDATA[<spppGetResponse>]]> element.
         The following subsections describe the <![CDATA[<getSedGrpOffersRequest>]]> and <![CDATA[<spppGetResponse>]]> elements.</t>
         <section anchor="getsedgrpoffersrqst" title="Get SED Group Offers Request">
         <t>Using the details passed into this structure, the server will
          attempt to find SED Group Offer objects that satisfy all the criteria passed into the
          request. If no criteria are passed in, then the SPPF server will
          return the list of SED Group Offer objects that belong to the 
          Registrant. If there are no matching SED Group Offers found, then an empty result set
          will be returned. </t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
    <element name="getSedGrpOffersRequest">
    <complexType>
     <sequence>
      <element name="minorVer" type="sppfb:MinorVerType" 
      minOccurs="0"/>
     <element name="offeredBy" type="sppfb:OrgIdType" 
     minOccurs="0" maxOccurs="unbounded"/>
     <element name="offeredTo" type="sppfb:OrgIdType" 
     minOccurs="0" maxOccurs="unbounded"/>
     <element name="status" type="sppfb:SedGrpOfferStatusType"
      minOccurs="0"/>
     <element name="sedGrpOfferKey" type="sppfs:SedGrpOfferKeyType" 
     minOccurs="0" maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>
                 ]]>
              </artwork>
            </figure>
          </t>
        
          <t> The data elements within the <![CDATA[<getSedGrpOffersRequest>]]> 
          element are described as follows: 
          <list style="symbols" hangIndent="5">
            <t> minorVer: Zero or one minor version identifier, as defined in <xref target="minorver"/>.</t>
                          <t> offeredBy: Zero or more organization IDs. Only offers
              that are offered to the organization IDs
              in this list should be included in the result set. The
              result set is also subject to other query criteria in
              the request.
            </t>
            <t> offeredTo: Zero or more organization IDs. Only offers
              that are offered by the organization IDs
              in this list should be included in the result set. The
              result set is also subject to other query criteria in
              the request.
            </t>
            <t> status: The status of the offer, offered or accepted.
              Only offers in the specified status should be included
              in the result set. If this element is not present, then
              the status of the offer should not be considered in the
              query. The result set is also subject to other query
              criteria in the request. 
            </t>
            <t> sedGrpOfferKey: Zero or more SED Group Offer keys.
              Only offers having one of these keys should be included
              in the result set. The result set is also subject to
              other query criteria in the request. </t>
          </list>
          </t>
  


          </section>
          <section anchor="getsedgrpoffersresponse" title="Get SED Group Offers Response">
<t>The spppGetResponse 
         element is described in <xref target="genericqueryresponse"/>. </t>
        </section>
        </section>
        <section anchor="genericqueryresponse" title="Generic Query Response">

          <t> An SPPP over SOAP query response object is contained within the generic
          <![CDATA[<spppGetResponse>]]> element. </t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
   <element name="spppGetResponse">
    <complexType>
     <sequence>
      <element name="overallResult" 
      type="sppfs:ResultCodeType"/>
      <element name="resultObj" 
      type="sppfb:BasicObjType" 
      minOccurs="0" maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>
                 ]]>
              </artwork>
            </figure>
          </t>
          <t> An <![CDATA[<spppGetResponse>]]> contains the 
          elements necessary for the SPPF client to precisely determine the 
          overall result of the query and details of any SPPF objects that matched the criteria
          in the request. </t>

          <t> The data elements within the SPPP over SOAP query response are
            described as follows: <list style="symbols" hangIndent="5">
              <t> overallResult: Exactly one response code and message pair that 
              explicitly identifies the result of the request. See <xref target="resultcodes"/> for further details. </t>

              <t> resultObj: The set of zero or more objects that matched the 
              query criteria.  If no objects matched the query criteria, then the 
              result object(s) MUST be empty and the overallResult value MUST indicate 
              success (if no matches are found for the query criteria, the 
              response is considered a success).</t>
            </list>
          </t>
  
       </section>
       
        <section anchor="servermenuopn" title="Get Server Details Operation Structure">
          <t>In order to query certain details of the SPPF server, such as the SPPF server's status and the major/minor version supported by the server, 
          the Server Details operation structure SHOULD be used. This structure is contained within the 
            <![CDATA[<spppServerStatusRequest>]]> element whereas an SPPF server status response is
         wrapped within the <![CDATA[<spppServerStatusResponse>]]> element.
         The following subsections describe the <![CDATA[<spppServerStatusRequest>]]> and <![CDATA[<spppServerStatusResponse>]]> elements.</t>
         
          <section anchor="servermenurqst" title="Get Server Details Request">
		  <t>
		  <!-- AM: New text to introduce the XML -->
		  An SPPP over SOAP server details request structure is represented in the <![CDATA[<spppServerStatusRequest>]]> element as follows:
		  </t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
   <element name="spppServerStatusRequest">
    <complexType>
     <sequence>
      <element name="minorVer" 
      type="sppfb:MinorVerType" minOccurs="0"/>
     </sequence>
    </complexType>
   </element>
                 ]]>
              </artwork>
            </figure>
          </t>
        
          <t> The data elements within the <![CDATA[<spppServerStatusRequest>]]> 
          element are described as follows: 
          <list style="symbols" hangIndent="5">
            <t> minorVer: Zero or one minor version identifier, as defined in <xref target="minorver"/>.</t>
          </list>
          </t>
        </section>
        
      <section anchor="servermenuresp" title="Get Server Details Response">
          <t> An SPPP over SOAP server details response structure is contained within the generic
          <![CDATA[<spppServerStatusResponse>]]> element. </t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
   <element name="spppServerStatusResponse">
    <complexType>
     <sequence>
      <element name="overallResult" type="sppfs:ResultCodeType"/>
      <element name="svcMenu" type="sppfb:SvcMenuType"/>
     </sequence>
    </complexType>
   </element>
                 ]]>
              </artwork>
            </figure>
          </t>
        
          <t> The data elements within the <![CDATA[<spppServerStatusResponse>]]> 
          element are described as follows: 
          <list style="symbols" hangIndent="5">
              <t> overallResult: Exactly one response code and message pair that 
              explicitly identifies the result of the request. See <xref target="resultcodes"/> for further details. </t>

            <t> svcMenu: Exactly one element of type SvcMenuType that, in turn, contains the elements
            to return the server status, the major and minor versions of SPPP over SOAP supported by the SPPF server (refer to Section 12 of <xref target="RFC7877"/> for the definition of SvcMenuType).</t>
          </list>
          </t>
        </section>
        </section>
       </section>

       <section anchor="resultcodes" title="Response Codes and Messages">

      <t> This section contains the listing of response codes
        and their corresponding human-readable text. These response codes
        are in conformance with the response types defined in Section 5.3
        of <xref target="RFC7877"/>.</t>

      <t> The response code numbering scheme generally adheres to the
        theory formalized in Section 4.2.1 of <xref target="RFC5321"/>: 
        <list style="symbols" hangIndent="5">
          <t> The first digit of the response code can only be 1 or 2:
            1 = a positive result, and 2 = a negative result. </t>

          <t> The second digit of the response code indicates the
            category: 0 = Protocol Syntax, 1 = Implementation Specific
            Business Rule, 2 = Security, and 3 = Server System. </t>

          <t> The third and fourth digits of the response code
            indicate the individual message event within the category
            defined by the first two digits. </t>
        </list>
      </t>
      
      <t> The response codes are also categorized as to whether they are 
      overall response codes that may only be returned in the overallResult
      data element in SPPF responses or object-level response codes that 
      may only be returned in the detailResult element of the SPPF
      responses.</t>

      <texttable anchor="Table1"
        title="Response Code Numbering Scheme and Messages">

        <ttcol align="left" width="10%">Result Code</ttcol>
        <ttcol align="left" width="30%">Result Message</ttcol>
        <ttcol align="left" width="60%">Overall or Object Level</ttcol>

        <c> 1000 </c>
        <c> Request succeeded</c>
        <c> Overall Response Code</c>

        <c> 2000 </c>
        <c> Request syntax invalid</c>
        <c> Overall Response Code</c>

        <c> 2001 </c>
        <c> Request too large MaxSupported:[Maximum requests supported]</c>
        <c> Overall Response Code</c>

        <c> 2002 </c>
        <c> Version not supported</c>
        <c> Overall Response Code</c>

        <c> 2100 </c>
        <c> Command invalid</c>
        <c> Overall Response Code</c>
        
        <c> 2300 </c>
        <c> System temporarily unavailable</c>
        <c> Overall Response Code</c>

        <c> 2301 </c>
        <c> Unexpected internal system or server error</c>
        <c> Overall Response Code</c>

        <c> 2101 </c>
        <c> Attribute value invalid AttrName:[AttributeName] AttrVal:[AttributeValue]</c>
        <c> Object-Level Response Code</c>

        <c> 2102 </c>
        <c> Object does not exist AttrName:[AttributeName] AttrVal:[AttributeValue]</c>
        <c> Object-Level Response Code</c>

        <c> 2103 </c>
        <c> Object status or ownership does not allow for operation AttrName:[AttributeName] 
        AttrVal:[AttributeValue]</c>
        <c> Object-Level Response Code</c>

        </texttable>
    <t> The response message for response code 2001 is "parameterized" with the 
        following parameter: "[Maximum requests supported]". When the request is too large, this
        parameter MUST be used to indicate the maximum number of requests supported by
        the server in a single protocol operation. </t>
        <t>Response code 2000 SHOULD be used when the XML Schema validation of requests fails.</t>
        <t> Each of the object-level response messages are "parameterized" with the 
        following parameters: "AttributeName" and "AttributeValue". </t>
        <t>For example,  if an SPPF client sends a request to delete a Destination Group with a name "TestDG", and it
        does not already exist, then the error message returned should be: "Attribute value invalid. AttrName:dgName AttrVal:TestDG".</t>


        <t> The use of these parameters MUST adhere to the rules defined in Section 5.3 of <xref target="RFC7877"/>.
        </t>

      </section>
	  <section anchor="minorver" title="Minor Version Identifier">
	  <t>The minor version identifier element is defined as follows:
	 
	  <list style="symbols" hangIndent="5">
            <t> minorVer: Zero or one minor version identifier, indicating the minor  
              version of the SPPP over SOAP API that the client is attempting to use. This is
              used in conjunction with the major version identifier in
              the XML Namespace to identify the version of SPPP over SOAP that the client 
              is using.  If the element is not present, the server assumes that 
              the client is using the latest minor version of SPPP over SOAP supported by the SPPF
              server for the given major version. The versions of SPPP over SOAP supported by a 
              given SPPF server can be retrieved by the client using this same spppServerStatusRequest without passing in the minorVer element.</t>
          </list>
		</t>
	  </section>         
  	</section>




<section anchor="protocol_oper" title="Protocol Operations">
 <t>Refer to Section 7 of <xref target="RFC7877"/> for a description of all SPPF operations and any necessary semantics that MUST be adhered to
 in order to conform with SPPF.</t>
  </section>

    <section anchor="SPPPWSDL" title="SPPP over SOAP WSDL Definition">
      <t>The SPPP over SOAP WSDL and data types are defined below.  The WSDL design approach is commonly referred to as "Generic WSDL".  
      It is generic in the sense that there is not a specific WSDL operation defined for each object type that is supported by the SPPF protocol.  
      There is a single WSDL structure for each type of SPPF operation.  Each such WSDL structure contains exactly one input structure and one output structure that wraps any data elements
      that are part of the incoming request and the outgoing response, respectively. The spppSOAPBinding in the WSDL defines the binding style as "document" and the encoding as "literal". 
       It is this combination of "wrapped" input and output data structures, "document" binding style, and "literal" encoding that characterize the Document Literal Wrapped style of WSDL specifications.</t>

	<t>
		Notes: The following WSDL has been formatted (e.g., tabs, spaces) to meet IETF requirements. 
		Deployments MUST replace "REPLACE_WITH_ACTUAL_URL" in the WSDL below with the URI of the SPPF server 
		instance.
	</t>

      <t>
	  	 <figure anchor="WSDL" title="WSDL">
        <artwork align="left"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 
xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:sppfb="urn:ietf:params:xml:ns:sppf:base:1" 
xmlns:sppfs="urn:ietf:params:xml:ns:sppf:soap:1" 
targetNamespace="urn:ietf:params:xml:ns:sppf:soap:1">
 <wsdl:types>
  <xsd:schema xmlns="http://www.w3.org/2001/XMLSchema" 
  xmlns:sppfs="urn:ietf:params:xml:ns:sppf:soap:1" 
  targetNamespace="urn:ietf:params:xml:ns:sppf:soap:1">
   <annotation>
    <documentation>
     ---- Import base schema ----
    </documentation>
   </annotation>
   <import namespace="urn:ietf:params:xml:ns:sppf:base:1" 
   schemaLocation="sppfbase.xsd"/>
   <annotation>
    <documentation>
     ---- Key type(s) extended 
     from base schema. ----
    </documentation>
   </annotation>
   <complexType name="ObjKeyType">
    <complexContent>
     <extension base="sppfb:ObjKeyType">
      <sequence>
       <element name="rant" type="sppfb:OrgIdType"/>
       <element name="name" type="sppfb:ObjNameType"/>
       <element name="type" type="sppfs:ObjKeyTypeEnum"/>
      </sequence>
     </extension>
    </complexContent>
   </complexType>
 <simpleType name="ObjKeyTypeEnum">
   <restriction base="token">
     <enumeration value="SedGrp"/>
     <enumeration value="DestGrp"/>
     <enumeration value="SedRec"/>
     <enumeration value="EgrRte"/>
   </restriction>
 </simpleType>
 
   <complexType name="SedGrpOfferKeyType">
    <complexContent>
     <extension base="sppfb:SedGrpOfferKeyType">
      <sequence>
       <element name="sedGrpKey" 
       type="sppfs:ObjKeyType"/>
       <element name="offeredTo" 
       type="sppfb:OrgIdType"/>
      </sequence>
     </extension>
    </complexContent>
   </complexType>
   
   <complexType name="PubIdKeyType">
    <complexContent>
     <extension base="sppfb:PubIdKeyType">
      <sequence>
       <element name="rant" type="sppfb:OrgIdType"/>
       <choice>
        <element name="number" 
        type="sppfb:NumberType"/>
        <element name="range" 
        type="sppfb:NumberRangeType"/>
       </choice>
      </sequence>
     </extension>
    </complexContent>
   </complexType>

   <annotation>
    <documentation>
     ---- Generic Request and 
     Response Definitions ----
    </documentation>
   </annotation>
   <element name="spppAddRequest">
    <complexType>
     <sequence>
      <element name="clientTransId" 
      type="sppfb:TransIdType" minOccurs="0"/>
      <element name="minorVer" 
      type="sppfb:MinorVerType" minOccurs="0"/>
      <element name="obj" type="sppfb:BasicObjType" 
      maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>
   <element name="spppDelRequest">
    <complexType>
     <sequence>
      <element name="clientTransId"
      type="sppfb:TransIdType" minOccurs="0"/>
      <element name="minorVer" 
      type="sppfb:MinorVerType" minOccurs="0"/>
      <element name="objKey" 
      type="sppfb:ObjKeyType" maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>
   <element name="spppAcceptRequest">
    <complexType>
     <sequence>
      <element name="clientTransId" 
      type="sppfb:TransIdType" minOccurs="0"/>
      <element name="minorVer" 
      type="sppfb:MinorVerType" minOccurs="0"/>
      <element name="sedGrpOfferKey" 
      type="sppfs:SedGrpOfferKeyType" 
      maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>
   <element name="spppRejectRequest">
    <complexType>
     <sequence>
      <element name="clientTransId" 
      type="sppfb:TransIdType" minOccurs="0"/>
      <element name="minorVer" 
      type="sppfb:MinorVerType" minOccurs="0"/>
      <element name="sedGrpOfferKey" 
      type="sppfs:SedGrpOfferKeyType" 
      maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>
   <element name="spppGetRequest">
    <complexType>
     <sequence>
      <element name="minorVer" 
      type="sppfb:MinorVerType" minOccurs="0"/>
      <element name="objKey" 
      type="sppfb:ObjKeyType" 
      maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>
   <element name="spppBatchRequest">
    <complexType>
     <sequence>
      <element name="clientTransId" 
      type="sppfb:TransIdType" minOccurs="0"/>
      <element name="minorVer" 
      type="sppfb:MinorVerType" minOccurs="0"/>
       <choice minOccurs="1" maxOccurs="unbounded">
        <element name="addObj" type="sppfb:BasicObjType"/>
        <element name="delObj" type="sppfb:ObjKeyType"/>
        <element name="acceptSedGrpOffer" 
        type="sppfs:SedGrpOfferKeyType"/>
        <element name="rejectSedGrpOffer" 
        type="sppfs:SedGrpOfferKeyType"/>
       </choice>
     </sequence>
    </complexType>
   </element>
   <element name="spppServerStatusRequest">
    <complexType>
     <sequence>
      <element name="minorVer" 
      type="sppfb:MinorVerType" minOccurs="0"/>
     </sequence>
    </complexType>
   </element>
   <element name="getSedGrpOffersRequest">
    <complexType>
     <sequence>
      <element name="minorVer"
      type="sppfb:MinorVerType" minOccurs="0"/>
     <element name="offeredBy" 
     type="sppfb:OrgIdType" minOccurs="0" 
     maxOccurs="unbounded"/>
     <element name="offeredTo" type="sppfb:OrgIdType" 
     minOccurs="0" maxOccurs="unbounded"/>
     <element name="status" 
     type="sppfb:SedGrpOfferStatusType" minOccurs="0"/>
     <element name="sedGrpOfferKey" 
     type="sppfs:SedGrpOfferKeyType" 
     minOccurs="0" maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>
   <element name="spppAddResponse">
    <complexType>
     <sequence>
      <element name="clientTransId" 
      type="sppfb:TransIdType" minOccurs="0"/>
      <element name="serverTransId" 
      type="sppfb:TransIdType"/>
      <element name="overallResult" 
      type="sppfs:ResultCodeType"/>
      <element name="detailResult" 
      type="sppfs:ObjResultCodeType" 
      minOccurs="0" maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>
   <element name="spppDelResponse">
    <complexType>
     <sequence>
      <element name="clientTransId" 
      type="sppfb:TransIdType" minOccurs="0"/>
      <element name="serverTransId" 
      type="sppfb:TransIdType"/>
      <element name="overallResult" 
      type="sppfs:ResultCodeType"/>
      <element name="detailResult" 
      type="sppfs:ObjKeyResultCodeType" 
      minOccurs="0" maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>
   <element name="spppAcceptResponse">
    <complexType>
     <sequence>
      <element name="clientTransId" 
      type="sppfb:TransIdType" minOccurs="0"/>
      <element name="serverTransId" 
      type="sppfb:TransIdType"/>
      <element name="overallResult" 
      type="sppfs:ResultCodeType"/>
      <element name="detailResult" 
      type="sppfs:SedGrpOfferKeyResultCodeType" 
      minOccurs="0" maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>
   <element name="spppRejectResponse">
    <complexType>
     <sequence>
      <element name="clientTransId" 
      type="sppfb:TransIdType" minOccurs="0"/>
      <element name="serverTransId" 
      type="sppfb:TransIdType"/>
      <element name="overallResult" 
      type="sppfs:ResultCodeType"/>
      <element name="detailResult" 
      type="sppfs:SedGrpOfferKeyResultCodeType" 
      minOccurs="0" maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>
    <element name="spppBatchResponse">
    <complexType>
     <sequence>
      <element name="clientTransId" 
      type="sppfb:TransIdType" minOccurs="0"/>
      <element name="serverTransId" 
      type="sppfb:TransIdType"/>
      <element name="overallResult" 
      type="sppfs:ResultCodeType"/>
       <choice minOccurs="0" maxOccurs="unbounded">
        <element name="addResult" 
                 type="sppfs:ObjResultCodeType"/>
        <element name="delResult" 
                 type="sppfs:ObjKeyResultCodeType"/>
        <element name="acceptResult" 
                 type="sppfs:SedGrpOfferKeyResultCodeType"/>
        <element name="rejectResult" 
               type="sppfs:SedGrpOfferKeyResultCodeType"/>
       </choice>
     </sequence>
    </complexType>
   </element>
   <element name="spppGetResponse">
    <complexType>
     <sequence>
      <element name="overallResult" 
      type="sppfs:ResultCodeType"/>
      <element name="resultObj" 
      type="sppfb:BasicObjType" 
      minOccurs="0" maxOccurs="unbounded"/>
     </sequence>
    </complexType>
   </element>
   <element name="spppServerStatusResponse">
    <complexType>
     <sequence>
      <element name="overallResult" 
      type="sppfs:ResultCodeType"/>
      <element name="svcMenu" 
      type="sppfb:SvcMenuType"/>
     </sequence>
    </complexType>
   </element>
   <annotation>
    <documentation>
     ---- Operation Result Type 
     Definitions ----
    </documentation>
   </annotation>
   <complexType name="ResultCodeType">
    <sequence>
     <element name="code" type="sppfs:ResultCodeValType"/>
     <element name="msg" type="sppfs:MsgType"/>
    </sequence>
   </complexType>

   <simpleType name="ResultCodeValType">
     <restriction base="unsignedShort">
       <enumeration value="1000"/>
       <enumeration value="2000"/>
       <enumeration value="2001"/>
       <enumeration value="2002"/>
       <enumeration value="2100"/>
       <enumeration value="2101"/>
       <enumeration value="2102"/>
       <enumeration value="2103"/>
       <enumeration value="2300"/>
       <enumeration value="2301"/>
     </restriction>
   </simpleType>
   
   <simpleType name="MsgType">
     <restriction base="token">
      <minLength value="3"/>
      <maxLength value="255"/>
     </restriction>
    </simpleType>
    
   <complexType name="ObjResultCodeType">
    <complexContent>
     <extension base="sppfs:ResultCodeType">
      <sequence>
       <element name="obj" type="sppfb:BasicObjType"/>
      </sequence>
     </extension>
    </complexContent>
   </complexType>
   <complexType name="ObjKeyResultCodeType">
    <complexContent>
     <extension base="sppfs:ResultCodeType">
      <sequence>
       <element name="objKey" type="sppfb:ObjKeyType"/>
      </sequence>
     </extension>
    </complexContent>
   </complexType>
      <complexType name="SedGrpOfferKeyResultCodeType">
    <complexContent>
     <extension base="sppfs:ResultCodeType">
      <sequence>
       <element name="sedGrpOfferKey" 
       type="sppfs:SedGrpOfferKeyType"/>
      </sequence>
     </extension>
    </complexContent>
    </complexType>
  </xsd:schema>
 </wsdl:types>
 <wsdl:message name="spppAddRequestMsg">
  <wsdl:part name="rqst" element="sppfs:spppAddRequest"/>
 </wsdl:message>
 <wsdl:message name="spppDelRequestMsg">
  <wsdl:part name="rqst" element="sppfs:spppDelRequest"/>
 </wsdl:message>
 <wsdl:message name="spppAcceptRequestMsg">
  <wsdl:part name="rqst" element="sppfs:spppAcceptRequest"/>
 </wsdl:message>
 <wsdl:message name="spppRejectRequestMsg">
  <wsdl:part name="rqst" element="sppfs:spppRejectRequest"/>
 </wsdl:message>
 <wsdl:message name="spppBatchRequestMsg">
  <wsdl:part name="rqst" element="sppfs:spppBatchRequest"/>
 </wsdl:message>
 <wsdl:message name="spppGetRequestMsg">
  <wsdl:part name="rqst" element="sppfs:spppGetRequest"/>
 </wsdl:message>
 <wsdl:message name="spppGetSedGrpOffersRequestMsg">
  <wsdl:part name="rqst" element="sppfs:getSedGrpOffersRequest"/>
 </wsdl:message>
 <wsdl:message name="spppAddResponseMsg">
  <wsdl:part name="rspns" element="sppfs:spppAddResponse"/>
 </wsdl:message>
  <wsdl:message name="spppDelResponseMsg">
  <wsdl:part name="rspns" element="sppfs:spppDelResponse"/>
 </wsdl:message>
  <wsdl:message name="spppAcceptResponseMsg">
  <wsdl:part name="rspns" element="sppfs:spppAcceptResponse"/>
 </wsdl:message>
  <wsdl:message name="spppRejectResponseMsg">
  <wsdl:part name="rspns" element="sppfs:spppRejectResponse"/>
 </wsdl:message>
  <wsdl:message name="spppBatchResponseMsg">
  <wsdl:part name="rspns" element="sppfs:spppBatchResponse"/>
 </wsdl:message>
 <wsdl:message name="spppGetResponseMsg">
  <wsdl:part name="rspns" element="sppfs:spppGetResponse"/>
 </wsdl:message>
 <wsdl:message name="spppServerStatusRequestMsg">
  <wsdl:part name="rqst" element="sppfs:spppServerStatusRequest"/>
 </wsdl:message>
 <wsdl:message name="spppServerStatusResponseMsg">
  <wsdl:part name="rspns" element="sppfs:spppServerStatusResponse"/>
 </wsdl:message>
 <wsdl:portType name="spppPortType">
  <wsdl:operation name="submitAddRqst">
   <wsdl:input message="sppfs:spppAddRequestMsg"/>
   <wsdl:output message="sppfs:spppAddResponseMsg"/>
  </wsdl:operation>
  <wsdl:operation name="submitDelRqst">
   <wsdl:input message="sppfs:spppDelRequestMsg"/>
   <wsdl:output message="sppfs:spppDelResponseMsg"/>
  </wsdl:operation>
  <wsdl:operation name="submitAcceptRqst">
   <wsdl:input message="sppfs:spppAcceptRequestMsg"/>
   <wsdl:output message="sppfs:spppAcceptResponseMsg"/>
  </wsdl:operation>
  <wsdl:operation name="submitRejectRqst">
   <wsdl:input message="sppfs:spppRejectRequestMsg"/>
   <wsdl:output message="sppfs:spppRejectResponseMsg"/>
  </wsdl:operation>
  <wsdl:operation name="submitBatchRqst">
   <wsdl:input message="sppfs:spppBatchRequestMsg"/>
   <wsdl:output message="sppfs:spppBatchResponseMsg"/>
  </wsdl:operation>
  <wsdl:operation name="submitGetRqst">
   <wsdl:input message="sppfs:spppGetRequestMsg"/>
   <wsdl:output message="sppfs:spppGetResponseMsg"/>
  </wsdl:operation>
  <wsdl:operation name="submitGetSedGrpOffersRqst">
   <wsdl:input message="sppfs:spppGetSedGrpOffersRequestMsg"/>
   <wsdl:output message="sppfs:spppGetResponseMsg"/>
  </wsdl:operation>
  <wsdl:operation name="submitServerStatusRqst">
   <wsdl:input message="sppfs:spppServerStatusRequestMsg"/>
   <wsdl:output message="sppfs:spppServerStatusResponseMsg"/>
  </wsdl:operation>
 </wsdl:portType>
 <wsdl:binding name="spppSoapBinding" type="sppfs:spppPortType">
  <soap:binding style="document" 
  transport="http://schemas.xmlsoap.org/soap/http"/>
  <wsdl:operation name="submitAddRqst">
   <soap:operation soapAction="submitAddRqst" style="document"/>
   <wsdl:input>
    <soap:body use="literal"/>
   </wsdl:input>
   <wsdl:output>
    <soap:body use="literal"/>
   </wsdl:output>
  </wsdl:operation>
  <wsdl:operation name="submitDelRqst">
   <soap:operation soapAction="submitDelRqst" style="document"/>
   <wsdl:input>
    <soap:body use="literal"/>
   </wsdl:input>
   <wsdl:output>
    <soap:body use="literal"/>
   </wsdl:output>
  </wsdl:operation>
  <wsdl:operation name="submitAcceptRqst">
   <soap:operation soapAction="submitAcceptRqst" style="document"/>
   <wsdl:input>
    <soap:body use="literal"/>
   </wsdl:input>
   <wsdl:output>
    <soap:body use="literal"/>
   </wsdl:output>
  </wsdl:operation>
  <wsdl:operation name="submitRejectRqst">
   <soap:operation soapAction="submitRejectRqst" style="document"/>
   <wsdl:input>
    <soap:body use="literal"/>
   </wsdl:input>
   <wsdl:output>
    <soap:body use="literal"/>
   </wsdl:output>
  </wsdl:operation>
  <wsdl:operation name="submitBatchRqst">
   <soap:operation soapAction="submitBatchRqst" style="document"/>
   <wsdl:input>
    <soap:body use="literal"/>
   </wsdl:input>
   <wsdl:output>
    <soap:body use="literal"/>
   </wsdl:output>
  </wsdl:operation>
  <wsdl:operation name="submitGetRqst">
   <soap:operation soapAction="submitGetRqst" style="document"/>
   <wsdl:input>
    <soap:body use="literal"/>
   </wsdl:input>
   <wsdl:output>
    <soap:body use="literal"/>
   </wsdl:output>
  </wsdl:operation>
  <wsdl:operation name="submitGetSedGrpOffersRqst">
   <soap:operation soapAction="submitGetSedGrpOffersRqst" 
   style="document"/>
   <wsdl:input>
    <soap:body use="literal"/>
   </wsdl:input>
   <wsdl:output>
    <soap:body use="literal"/>
   </wsdl:output>
  </wsdl:operation>
  <wsdl:operation name="submitServerStatusRqst">
   <soap:operation soapAction="submitServerStatusRqst" 
   style="document"/>
   <wsdl:input>
    <soap:body use="literal"/>
   </wsdl:input>
   <wsdl:output>
    <soap:body use="literal"/>
   </wsdl:output>
  </wsdl:operation>
 </wsdl:binding>
 <wsdl:service name="spppService">
  <wsdl:port name="spppPort" binding="sppfs:spppSoapBinding">
   <soap:address location="REPLACE_WITH_ACTUAL_URL"/>
  </wsdl:port>
 </wsdl:service>
</wsdl:definitions>
       ]]></artwork>
     </figure></t>
    </section>


    <section anchor="examples" title="SPPP over SOAP Examples">
      <t>This section shows an XML message exchange between two SIP Service 
      Providers (SSPs) and a Registry. The 
      messages in this section are valid XML instances that conform to the 
      SPPP over SOAP schema version within this document. This section 
      also relies on the XML data structures defined in the SPPF specification <xref target="RFC7877"/>, 
      which should also be referenced to understand XML object types embedded in these example messages.</t>

      <t>In this sample use-case scenario, SSP1 and SSP2 provision 
      resource data in the Registry and use SPPF constructs to selectively 
      share the SED Groups. In the figure below, SSP2 has two ingress 
      Signaling Path Border Element (SBE) instances that are associated with the Public Identities with which
      SSP2 has the retail relationship. Also, the two SBE instances 
      for SSP1 are used to show how to use SPPF to associate 
      route preferences for the destination Ingress Routes and exercise 
      greater control on outbound traffic to the peer's ingress SBEs.</t>

      <t>

        <figure title="Example Use-Case Infrastructure">
          <artwork align="left">
            <![CDATA[
   ---------------+                      +------------------
                  |                      |            
              +------+               +------+
              | sbe1 |               | sbe2 |
              +------+               +------+
    SSP1          |                      |           SSP2
              +------+               +------+
              | sbe3 |               | sbe4 |
              +------+               +------+
   iana-en:111    |                      |     iana-en:222
   ---------------+                      +------------------
           |                                     |
           |                                     |
           | SPPF   +------------------+   SPPF  |
           +------->|     Registry     |<--------+
                    +------------------+
                        ]]>
            </artwork>
          </figure>
        </t>

      <section anchor="add_destgrp" title="Add Destination Group">
        <t>SSP2 adds a Destination Group to the Registry for later use. The 
        SSP2 SPPF client sets a unique transaction identifier "txn_1479" for 
        tracking purposes. The name of the Destination Group is set to DEST_GRP_SSP2_1.</t>
        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1" 
xmlns:urn1="urn:ietf:params:xml:ns:sppf:base:1" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppAddRequest>
   <!--Optional:-->
   <clientTransId>txn_1479</clientTransId>
    <!--1 or more repetitions:-->
   <obj xsi:type="urn1:DestGrpType">
    <urn1:rant>iana-en:222</urn1:rant>
    <urn1:rar>iana-en:223</urn1:rar>
    <urn1:dgName>DEST_GRP_SSP2_1</urn1:dgName>
   </obj>
  </urn:spppAddRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry processes the request and returns a favorable 
        response confirming successful creation of the named 
        Destination Group. In addition to returning a unique server transaction 
        identifier, the Registry returns the matching client transaction 
        identifier from the request message back to the SPPF client.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppAddResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <clientTransId>txn_1479</clientTransId>
   <serverTransId>tx_12345</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppAddResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_sedrecs" title="Add SED Records">

        <t>SSP2 adds SED Records in the form of Ingress Routes to the Registry.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1" 
xmlns:urn1="urn:ietf:params:xml:ns:sppf:base:1" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppAddRequest>
   <!--Optional:-->
   <clientTransId>txn_1479</clientTransId>
   <!--1 or more repetitions:-->
   <obj xsi:type="urn1:NAPTRType">
    <urn1:rant>iana-en:222</urn1:rant>
    <urn1:rar>iana-en:223</urn1:rar>
    <urn1:sedName>SED_SSP2_SBE2</urn1:sedName>
    <urn1:isInSvc>true</urn1:isInSvc>
    <urn1:order>10</urn1:order>
    <urn1:flags>u</urn1:flags>
    <urn1:svcs>E2U+sip</urn1:svcs>
    <urn1:regx>
     <urn1:ere>^(.*)$</urn1:ere>
     <urn1:repl>sip:\1@sbe2.ssp2.example.com</urn1:repl>
    </urn1:regx>
   </obj>
  </urn:spppAddRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry returns a success response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppAddResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <clientTransId>txn_1479</clientTransId>
   <serverTransId>tx_12345</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppAddResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_sedrecs_uritype" title="Add SED Records -- URIType">

        <t>SSP2 adds another SED Record to the Registry and makes use of URIType.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1" 
xmlns:urn1="urn:ietf:params:xml:ns:sppf:base:1" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppAddRequest>
   <clientTransId>txn_1479</clientTransId>
    <!--1 or more repetitions:-->
   <obj xsi:type="urn1:URIType">
    <urn1:rant>iana-en:222</urn1:rant>
    <urn1:rar>iana-en:223</urn1:rar>
    <urn1:sedName>SED_SSP2_SBE4</urn1:sedName>
    <urn1:isInSvc>true</urn1:isInSvc>
    <urn1:ere>^(.*)$</urn1:ere>
    <urn1:uri>sip:\1;npdi@sbe4.ssp2.example.com</urn1:uri>
   </obj>
  </urn:spppAddRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry returns a success response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppAddResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <clientTransId>txn_1479</clientTransId>
   <serverTransId>tx_12345</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppAddResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_sedgrp" title="Add SED Group">
        <t>SSP2 creates the grouping of SED Records (e.g., Ingress Routes) and chooses a higher precedence for SED_SSP2_SBE2 by setting a lower number for the &quot;priority&quot; attribute, a protocol agnostic precedence indicator.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1" 
 xmlns:urn1="urn:ietf:params:xml:ns:sppf:base:1" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppAddRequest>
   <clientTransId>txn_1479</clientTransId>
    <!--1 or more repetitions:-->
   <obj xsi:type="urn1:SedGrpType">
    <urn1:rant>iana-en:222</urn1:rant>
    <urn1:rar>iana-en:223</urn1:rar>
    <urn1:sedGrpName>SED_GRP_SSP2_1</urn1:sedGrpName>
    <urn1:sedRecRef>
     <urn1:sedKey xsi:type="urn:ObjKeyType">
      <rant>iana-en:222</rant>
      <name>SED_SSP2_SBE2</name>
      <type>SedRec</type>
     </urn1:sedKey>
     <urn1:priority>100</urn1:priority>
    </urn1:sedRecRef>
    <urn1:dgName>DEST_GRP_SSP2_1</urn1:dgName>
    <urn1:isInSvc>true</urn1:isInSvc>
    <urn1:priority>10</urn1:priority>
   </obj>
  </urn:spppAddRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>To confirm successful processing of this request, the Registry returns a well-known result code "1000" to the SSP2 client.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppAddResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <clientTransId>txn_1479</clientTransId>
   <serverTransId>tx_12345</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppAddResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_pi_corclaim" title="Add Public Identifier -- Successful COR Claim">
        
        <t>SSP2 activates a TN Public Identifier by associating it with a valid Destination Group. Further, SSP2 puts forth a claim that it is the carrier-of-record (COR) for the TN.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<soapenv:Envelope 
xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1" 
xmlns:urn1="urn:ietf:params:xml:ns:sppf:base:1" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppAddRequest>
   <clientTransId>txn_1479</clientTransId>
    <!--1 or more repetitions:-->
   <obj xsi:type="urn1:TNType">
    <urn1:rant>iana-en:222</urn1:rant>
    <urn1:rar>iana-en:223</urn1:rar>
    <urn1:dgName>DEST_GRP_SSP2_1</urn1:dgName>
    <urn1:tn>+12025556666</urn1:tn>
    <urn1:corInfo>
     <urn1:corClaim>true</urn1:corClaim>
    </urn1:corInfo>
   </obj>
  </urn:spppAddRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Assuming that the Registry has access to TN authority data and it performs the required checks to verify that SSP2 is in fact the SP of record for the given TN, the request is processed successfully. In the response message, the Registry sets the value of &lt;cor&gt; to &quot;true&quot; in order to confirm the SSP2 claim as the carrier&nbhy;of&nbhy;record, and the &lt;corDate&gt; reflects the time when the carrier&nbhy;of&nbhy;record claim is processed.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <S:Body>
  <ns3:spppAddResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <clientTransId>txn_1479</clientTransId>
   <serverTransId>tx_12345</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
   <detailResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
    <obj xsi:type="ns2:TNType">
     <ns2:rant>iana-en:222</ns2:rant>
     <ns2:rar>iana-en:223</ns2:rar>
     <ns2:cDate>2010-05-30T09:30:10Z</ns2:cDate>
     <ns2:dgName>DEST_GRP_SSP2_1</ns2:dgName>
     <ns2:tn>+12025556666</ns2:tn>
     <ns2:corInfo>
      <ns2:corClaim>true</ns2:corClaim>
      <ns2:cor>true</ns2:cor>
      <ns2:corDate>2010-05-30T09:30:11Z</ns2:corDate>
     </ns2:corInfo>
    </obj>
   </detailResult>
  </ns3:spppAddResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_lrn" title="Add LRN">

        <t>If another entity that SSP2 shares SED (e.g., routes) with has access to Number Portability data, it may choose to perform route lookups by RN. Therefore, SSP2 associates an RN to a Destination Group in order to facilitate Ingress Route discovery.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1" 
 xmlns:urn1="urn:ietf:params:xml:ns:sppf:base:1" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppAddRequest>
   <clientTransId>txn_1479</clientTransId>
    <!--1 or more repetitions:-->
   <obj xsi:type="urn1:RNType">
    <urn1:rant>iana-en:222</urn1:rant>
    <urn1:rar>iana-en:223</urn1:rar>
    <urn1:dgName>DEST_GRP_SSP2_1</urn1:dgName>
    <urn1:rn>2025550000</urn1:rn>
   </obj>
  </urn:spppAddRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry completes the request successfully and returns a favorable response to the SPPF client.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppAddResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <clientTransId>txn_1479</clientTransId>
   <serverTransId>tx_12345</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppAddResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_tn_range" title="Add TN Range">
      
        <t>Next, SSP2 activates a block of ten thousand TNs and associates it to a Destination Group.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1" 
 xmlns:urn1="urn:ietf:params:xml:ns:sppf:base:1" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppAddRequest>
   <clientTransId>txn_1479</clientTransId>
    <!--1 or more repetitions:-->
   <obj xsi:type="urn1:TNRType">
    <urn1:rant>iana-en:222</urn1:rant>
    <urn1:rar>iana-en:223</urn1:rar>
    <urn1:dgName>DEST_GRP_SSP2_1</urn1:dgName>
    <urn1:range>
     <urn1:startTn>+12026660000</urn1:startTn>
     <urn1:endTn>+12026669999</urn1:endTn>
    </urn1:range>
   </obj>
  </urn:spppAddRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppAddResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <clientTransId>txn_1479</clientTransId>
   <serverTransId>tx_12345</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppAddResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_tn_prefix" title="Add TN Prefix">
      
        <t>Next, SSP2 activates a block of ten thousand TNs by using the TNPType structure and identifying a TN prefix.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1" 
 xmlns:urn1="urn:ietf:params:xml:ns:sppf:base:1" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppAddRequest>
   <clientTransId>txn_1479</clientTransId>
    <!--1 or more repetitions:-->
   <obj xsi:type="urn1:TNPType">
    <urn1:rant>iana-en:222</urn1:rant>
    <urn1:rar>iana-en:223</urn1:rar>
    <urn1:dgName>DEST_GRP_SSP2_1</urn1:dgName>
    <urn1:tnPrefix>+1202777</urn1:tnPrefix>
   </obj>
  </urn:spppAddRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppAddResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <clientTransId>txn_1479</clientTransId>
   <serverTransId>tx_12345</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppAddResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_sed_grp_offer" title="Enable Peering -- SED Group Offer">

        <t>In order for SSP1 to complete session establishment for a destination TN where the target subscriber has a retail relationship with SSP2, it first requires an asynchronous bidirectional handshake to show mutual consent. To start the process, SSP2 initiates the peering handshake by offering SSP1 access to its SED Group.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1" 
 xmlns:urn1="urn:ietf:params:xml:ns:sppf:base:1" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppAddRequest>
   <clientTransId>txn_1479</clientTransId>
    <!--1 or more repetitions:-->
   <obj xsi:type="urn1:SedGrpOfferType">
    <urn1:rant>iana-en:222</urn1:rant>
    <urn1:rar>iana-en:223</urn1:rar>
    <urn1:sedGrpOfferKey xsi:type="urn:SedGrpOfferKeyType">
     <sedGrpKey xsi:type="urn:ObjKeyType">
      <rant>iana-en:222</rant>
      <name>SED_GRP_SSP2_1</name>
      <type>SedGrp</type>
     </sedGrpKey>
     <offeredTo>iana-en:111</offeredTo>
    </urn1:sedGrpOfferKey>
    <urn1:status>offered</urn1:status>
    <urn1:offerDateTime>
      2006-05-04T18:13:51.0Z
    </urn1:offerDateTime>
   </obj>
  </urn:spppAddRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry completes the request successfully and confirms that the SSP1 will now have the opportunity to weigh in on the offer and either accept or reject it. The Registry may employ out-of-band notification mechanisms for quicker updates to SSP1 so they can act faster, though this topic is beyond the scope of this document.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppAddResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <clientTransId>txn_1479</clientTransId>
   <serverTransId>tx_12345</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppAddResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_sed_grp_offer_accept" title="Enable Peering -- SED Group Offer Accept">
        
        <t>SSP1 responds to the offer from SSP2 and agrees to have visibility to SSP2 SED (e.g., Ingress Routes).</t>
        
        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppAcceptRequest>
   <!--Optional:-->
   <clientTransId>txn_1479</clientTransId>
    <!--1 or more repetitions:-->
   <sedGrpOfferKey>
    <sedGrpKey>
     <rant>iana-en:222</rant>
     <name>SED_GRP_SSP2_1</name>
     <type>SedGrp</type>
    </sedGrpKey>
    <offeredTo>iana-en:111</offeredTo>
   </sedGrpOfferKey>
  </urn:spppAcceptRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry confirms that the request has been processed successfully. From this point forward, if SSP1 looks up a Public Identifier through the query resolution server, 
		where the Public Identifier is part of the Destination Group by way of "SED_GRP_SSP2_1" SED association, SSP2 ingress SBE information will be shared with SSP1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppAcceptResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <clientTransId>txn_1479</clientTransId>
   <serverTransId>tx_12350</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppAcceptResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_egress_rte" title="Add Egress Route">
        
        <t>SSP1 wants to prioritize all outbound traffic to the Ingress Route associated with the "SED_GRP_SSP2_1" SED Group record, through "sbe1.ssp1.example.com".</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1" 
 xmlns:urn1="urn:ietf:params:xml:ns:sppf:base:1" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppAddRequest>
   <clientTransId>txn_1479</clientTransId>
    <!--1 or more repetitions:-->
   <obj xsi:type="urn1:EgrRteType">
    <urn1:rant>iana-en:222</urn1:rant>
    <urn1:rar>iana-en:223</urn1:rar>
    <urn1:egrRteName>EGR_RTE_01</urn1:egrRteName>
    <urn1:pref>50</urn1:pref>
    <urn1:regxRewriteRule>
     <urn1:ere>^(.*@)(.*)$</urn1:ere>
     <urn1:repl>\1\2?route=sbe1.ssp1.example.com</urn1:repl>
    </urn1:regxRewriteRule>
    <urn1:ingrSedGrp xsi:type="urn:ObjKeyType">
     <rant>iana-en:222</rant>
     <name>SED_GRP_SSP2_1</name>
     <type>SedGrp</type>
    </urn1:ingrSedGrp>
   </obj>
  </urn:spppAddRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Since peering has already been established, the request to add the Egress Route has been successfully completed.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppAddResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <clientTransId>txn_1479</clientTransId>
   <serverTransId>tx_12345</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppAddResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>
<section anchor="sed_grp_offer_reject" title="Remove Peering -- SED Group Offer Reject">
        
        <t>Earlier, SSP1 had accepted having visibility to SSP2 SED. SSP1 now decides to no longer maintain this visibility; hence, it rejects the SED Group Offer.</t>
        
        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppRejectRequest>
   <!--Optional:-->
   <clientTransId>txn_1479</clientTransId>
    <!--1 or more repetitions:-->
   <sedGrpOfferKey>
    <sedGrpKey>
     <rant>iana-en:222</rant>
     <name>SED_GRP_SSP2_1</name>
     <type>SedGrp</type>
    </sedGrpKey>
    <offeredTo>iana-en:111</offeredTo>
   </sedGrpOfferKey>
  </urn:spppRejectRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry confirms that the request has been processed successfully. From this point forward, if SSP1 looks up a Public Identifier through the query resolution server, 
		where the Public Identifier is part of the Destination Group by way of "SED_GRP_SSP2_1" SED association, SSP2 ingress SBE information will not be shared with SSP1; hence, an
		SSP2 ingress SBE will not be returned in the query response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppRejectResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <clientTransId>txn_1479</clientTransId>
   <serverTransId>tx_12350</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppRejectResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>
      <section anchor="get_dest_grp" title="Get Destination Group">
        
        <t>SSP2 uses the spppGetRequest operation to tally the last provisioned record for Destination Group DEST_GRP_SSP2_1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppGetRequest>
   <!--1 or more repetitions:-->
   <objKey xsi:type="urn:ObjKeyType">
    <rant>iana-en:222</rant>
    <name>DEST_GRP_SSP2_1</name>
    <type>DestGrp</type>
   </objKey>
  </urn:spppGetRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <S:Body>
  <ns3:spppGetResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <overallResult>
    <code>1000</code>
    <msg>success</msg>
   </overallResult>
   <resultObj xsi:type="ns2:DestGrpType">
    <ns2:rant>iana-en:222</ns2:rant>
    <ns2:rar>iana-en:223</ns2:rar>
    <ns2:cDate>2012-10-22T09:30:10Z</ns2:cDate>
    <ns2:dgName>DEST_GRP_SSP2_1</ns2:dgName>
   </resultObj>
  </ns3:spppGetResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="get_pub_id" title="Get Public Identifier">
        
        <t>SSP2 obtains the last provisioned record associated with a given TN.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1"
 xmlns:urn1="urn:ietf:params:xml:ns:sppf:base:1"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppGetRequest>
   <!--1 or more repetitions:-->
   <objKey xsi:type="urn:PubIdKeyType">
    <rant>iana-en:222</rant>
    <number>
     <urn1:value>+12025556666</urn1:value>
     <urn1:type>TN</urn1:type>
    </number>
   </objKey>
  </urn:spppGetRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <S:Body>
  <ns3:spppGetResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <overallResult>
    <code>1000</code>
    <msg>success</msg>
   </overallResult>
   <resultObj xsi:type="ns2:TNType">
    <ns2:rant>iana-en:222</ns2:rant>
    <ns2:rar>iana-en:223</ns2:rar>
    <ns2:cDate>2012-10-22T09:30:10Z</ns2:cDate>
    <ns2:dgName>DEST_GRP_SSP2_1</ns2:dgName>
    <ns2:tn>+12025556666</ns2:tn>
    <ns2:corInfo>
     <ns2:corClaim>true</ns2:corClaim>
     <ns2:cor>true</ns2:cor>
     <ns2:corDate>2010-05-30T09:30:10Z</ns2:corDate>
    </ns2:corInfo>
   </resultObj>
  </ns3:spppGetResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="get_sed_grp_request" title="Get SED Group Request">

        <t>SSP2 obtains the last provisioned record for the SED Group SED_GRP_SSP2_1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppGetRequest>
   <!--1 or more repetitions:-->
   <objKey xsi:type="urn:ObjKeyType">
    <rant>iana-en:222</rant>
    <name>SED_GRP_SSP2_1</name>
    <type>SedGrp</type>
   </objKey>
  </urn:spppGetRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry completes the request successfully and returns a favorable response.</t>
        
        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <S:Body>
  <ns3:spppGetResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <overallResult>
    <code>1000</code>
    <msg>success</msg>
   </overallResult>
   <resultObj xsi:type="ns2:SedGrpType">
    <ns2:rant>iana-en:222</ns2:rant>
    <ns2:rar>iana-en:223</ns2:rar>
    <ns2:cDate>2012-10-22T09:30:10Z</ns2:cDate>
    <ns2:sedGrpName>SED_GRP_SSP2_1</ns2:sedGrpName>
    <ns2:sedRecRef>
     <ns2:sedKey xsi:type="ns3:ObjKeyType">
      <rant>iana-en:222</rant>
      <name>SED_SSP2_SBE2</name>
      <type>SedRec</type>
     </ns2:sedKey>
     <ns2:priority>100</ns2:priority>
    </ns2:sedRecRef>
    <ns2:sedRecRef>
     <ns2:sedKey xsi:type="ns3:ObjKeyType">
      <rant>iana-en:222</rant>
      <name>SED_SSP2_SBE4</name>
      <type>SedRec</type>
     </ns2:sedKey>
     <ns2:priority>101</ns2:priority>
    </ns2:sedRecRef>
    <ns2:dgName>DEST_GRP_SSP2_1</ns2:dgName>
    <ns2:isInSvc>true</ns2:isInSvc>
    <ns2:priority>10</ns2:priority>
   </resultObj>
  </ns3:spppGetResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="get_sed_grp_offers_rqst" title="Get SED Group Offers Request">

        <t>SSP2 fetches the last provisioned SED Group Offer to the &lt;peeringOrg&gt; SSP1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:getSedGrpOffersRequest>
   <offeredTo>iana-en:111</offeredTo>
  </urn:getSedGrpOffersRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry processes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <S:Body>
  <ns3:spppGetResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <overallResult>
    <code>1000</code>
    <msg>success</msg>
   </overallResult>
   <resultObj xsi:type="ns2:SedGrpOfferType">
    <ns2:rant>iana-en:222</ns2:rant>
    <ns2:rar>iana-en:223</ns2:rar>
    <ns2:cDate>2012-10-22T09:30:10Z</ns2:cDate>
    <ns2:sedGrpOfferKey 
     xsi:type="ns3:SedGrpOfferKeyType">
     <sedGrpKey>
      <rant>iana-en:222</rant>
      <name>SED_GRP_SSP2_1</name>
      <type>SedGrp</type>
     </sedGrpKey>
     <offeredTo>iana-en:111</offeredTo>
    </ns2:sedGrpOfferKey>
    <ns2:status>offered</ns2:status>
    <ns2:offerDateTime>
     2006-05-04T18:13:51.0Z
    </ns2:offerDateTime>
   </resultObj>
  </ns3:spppGetResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="get_egress_rte" title="Get Egress Route">

        <t>SSP1 wants to verify the last provisioned record for the Egress Route called EGR_RTE_01.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppGetRequest>
   <!--1 or more repetitions:-->
   <objKey xsi:type="urn:ObjKeyType">
    <rant>iana-en:111</rant>
    <name>EGR_RTE_01</name>
    <type>EgrRte</type>
   </objKey>
  </urn:spppGetRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <S:Body>
  <ns3:spppGetResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <overallResult>
    <code>1000</code>
    <msg>success</msg>
   </overallResult>
   <resultObj xsi:type="ns2:EgrRteType">
    <ns2:rant>iana-en:222</ns2:rant>
    <ns2:rar>iana-en:223</ns2:rar>
    <ns2:cDate>2012-10-22T09:30:10Z</ns2:cDate>
    <ns2:egrRteName>EGR_RTE_01</ns2:egrRteName>
    <ns2:pref>50</ns2:pref>
    <ns2:regxRewriteRule>
     <ns2:ere>^(.*)$</ns2:ere>
     <ns2:repl>sip:\1@sbe1.ssp1.example.com</ns2:repl>
    </ns2:regxRewriteRule>
    <ns2:ingrSedGrp xsi:type="ns3:ObjKeyType">
     <rant>iana-en:222</rant>
     <name>SED_GRP_SSP2_1</name>
     <type>SedRec</type>
    </ns2:ingrSedGrp>
   </resultObj>
  </ns3:spppGetResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="del_dest_grp" title="Delete Destination Group">

        <t>SSP2 initiates a request to delete the Destination Group DEST_GRP_SSP2_1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppDelRequest>
    <!--1 or more repetitions:-->
   <objKey xsi:type="urn:ObjKeyType">
    <rant>iana-en:222</rant>
    <name>DEST_GRP_SSP2_1</name>
    <type>DestGrp</type>
   </objKey>
  </urn:spppDelRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppDelResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <serverTransId>tx_12354</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppDelResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="del_pub_id" title="Delete Public Identifier">

        <t>SSP2 chooses to deactivate the TN and remove it from the Registry.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1"
 xmlns:urn1="urn:ietf:params:xml:ns:sppf:base:1"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppDelRequest>
   <!--1 or more repetitions:-->
   <objKey xsi:type="urn:PubIdKeyType">
    <rant>iana-en:222</rant>
    <number>
     <urn1:value>+12025556666</urn1:value>
     <urn1:type>TN</urn1:type>
    </number>
   </objKey>
  </urn:spppDelRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppDelResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <serverTransId>tx_12354</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppDelResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="del_sed_grp_rqst" title="Delete SED Group Request">

        <t>SSP2 removes the SED Group called SED_GRP_SSP2_1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppDelRequest>
    <!--1 or more repetitions:-->
   <objKey xsi:type="urn:ObjKeyType">
    <rant>iana-en:222</rant>
    <name>SED_GRP_SSP2_1</name>
    <type>SedGrp</type>
   </objKey>
  </urn:spppDelRequest>
 </soapenv:Body>
</soapenv:Envelope>

              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppDelResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <serverTransId>tx_12354</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppDelResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="del_sed_grp_offers_rqst" title="Delete SED Group Offers Request">

        <t>SSP2 no longer wants to share SED Group SED_GRP_SSP2_1 with SSP1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppDelRequest>
    <!--1 or more repetitions:-->
   <objKey xsi:type="urn:SedGrpOfferKeyType">
    <sedGrpKey>
     <rant>iana-en:222</rant>
     <name>SED_GRP_SSP2_1</name>
     <type>SedGrp</type>
    </sedGrpKey>
    <offeredTo>iana-en:111</offeredTo>
   </objKey>
  </urn:spppDelRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry completes the request successfully and returns a favorable response. Restoring this resource sharing will require a new SED Group Offer from SSP2 to SSP1 followed by a successful SED Group Accept request from SSP1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppDelResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <serverTransId>tx_12354</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppDelResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        </section>

        <section anchor="del_egress_rte" title="Delete Egress Route">
          
          <t>SSP1 decides to remove the Egress Route with the label EGR_RTE_01.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/> 
 <soapenv:Body>
  <urn:spppDelRequest>
   <!--1 or more repetitions:-->
   <objKey xsi:type="urn:ObjKeyType">
    <rant>iana-en:111</rant>
    <name>EGR_RTE_01</name>
    <type>EgrRte</type>
   </objKey>
  </urn:spppDelRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppDelResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <serverTransId>tx_12354</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppDelResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

        <section anchor="batch_req" title="Batch Request">
          
          <t>Following is an example of how some of the operations mentioned in previous sections
		  MAY be performed by an SPPF client as a batch in one single SPPP over SOAP request.</t>

			<t>In the sample request below, SSP1 wants to accept a SED Group Offer from SSP3, add
			a Destination Group, add a Naming Authority Pointer (NAPTR) SED Record, add a SED Group, add a SED Group Offer,
			delete a previously provisioned TN type Public Identifier, delete a previously provisioned SED Group, and reject a SED Group Offer from SSP4.</t>
        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope 
 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
 xmlns:urn="urn:ietf:params:xml:ns:sppf:soap:1" 
 xmlns:urn1="urn:ietf:params:xml:ns:sppf:base:1"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <soapenv:Header/>
 <soapenv:Body>
  <urn:spppBatchRequest>
   <clientTransId>txn_1467</clientTransId>
   <minorVer>1</minorVer>
         
   <acceptSedGrpOffer>
    <sedGrpKey>
     <rant>iana-en:225</rant>
     <name>SED_SSP3_SBE1_Offered</name>
     <type>SedGrp</type>
    </sedGrpKey>
    <offeredTo>iana-en:222</offeredTo>
   </acceptSedGrpOffer>

   <addObj xsi:type="urn1:DestGrpType">
    <urn1:rant>iana-en:222</urn1:rant>
    <urn1:rar>iana-en:223</urn1:rar>
    <urn1:dgName>DEST_GRP_SSP2_1</urn1:dgName>
   </addObj>

   <addObj xsi:type="urn1:NAPTRType">
    <urn1:rant>iana-en:222</urn1:rant>
    <urn1:rar>iana-en:223</urn1:rar>
    <urn1:sedName>SED_SSP2_SBE2</urn1:sedName>
    <urn1:order>10</urn1:order>
    <urn1:flags>u</urn1:flags>
    <urn1:svcs>E2U+sip</urn1:svcs>
    <urn1:regx>
     <urn1:ere>^(.*)$</urn1:ere>
     <urn1:repl>sip:\1@sbe2.ssp2.example.com</urn1:repl>
    </urn1:regx>
   </addObj>

   <addObj xsi:type="urn1:SedGrpType">
    <urn1:rant>iana-en:222</urn1:rant>
    <urn1:rar>iana-en:223</urn1:rar>
    <urn1:sedGrpName>SED_GRP_SSP2_1</urn1:sedGrpName>
    <urn1:sedRecRef>
     <urn1:sedKey xsi:type="urn:ObjKeyType">
      <rant>iana-en:222</rant>
      <name>SED_SSP2_SBE2</name>
      <type>SedRec</type>
     </urn1:sedKey>
    <urn1:priority>100</urn1:priority>
    </urn1:sedRecRef>
     <urn1:dgName>DEST_GRP_SSP2_1</urn1:dgName>
     <urn1:isInSvc>true</urn1:isInSvc>
     <urn1:priority>10</urn1:priority>
   </addObj>

   <addObj xsi:type="urn1:SedGrpOfferType">
    <urn1:rant>iana-en:222</urn1:rant>
    <urn1:rar>iana-en:223</urn1:rar>
    <urn1:sedGrpOfferKey xsi:type="urn:SedGrpOfferKeyType">
     <sedGrpKey xsi:type="urn:ObjKeyType">
      <rant>iana-en:222</rant>
      <name>SED_GRP_SSP2_1</name>
      <type>SedGrp</type>
     </sedGrpKey>
     <offeredTo>iana-en:111</offeredTo>
    </urn1:sedGrpOfferKey>
    <urn1:status>offered</urn1:status>
    <urn1:offerDateTime>
     2006-05-04T18:13:51.0Z
    </urn1:offerDateTime>
   </addObj>

   <delObj xsi:type="urn:PubIdKeyType">
    <rant>iana-en:222</rant>
    <number>
     <urn1:value>+12025556666</urn1:value>
     <urn1:type>TN</urn1:type>
    </number>
   </delObj>

   <delObj xsi:type="urn:ObjKeyType">
    <rant>iana-en:222</rant>
    <name>SED_GRP_SSP2_Previous</name>
    <type>SedGrp</type>
   </delObj>

   <rejectSedGrpOffer>
    <sedGrpKey>
     <rant>iana-en:226</rant>
     <name>SED_SSP4_SBE1_Offered</name>
     <type>SedGrp</type>
    </sedGrpKey>
    <offeredTo>iana-en:222</offeredTo>
   </rejectSedGrpOffer>

  </urn:spppBatchRequest>
 </soapenv:Body>
</soapenv:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope 
 xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
 <S:Body>
  <ns3:spppBatchResponse 
   xmlns:ns2="urn:ietf:params:xml:ns:sppf:base:1" 
   xmlns:ns3="urn:ietf:params:xml:ns:sppf:soap:1">
   <serverTransId>tx_12354</serverTransId>
   <overallResult>
    <code>1000</code>
    <msg>Request Succeeded.</msg>
   </overallResult>
  </ns3:spppBatchResponse>
 </S:Body>
</S:Envelope>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

    </section>

    <section anchor="SecurityConsiderations" title="Security Considerations">
	  <t>The base security considerations of SPPP outlined in Section 9 of <xref target="RFC7877"/> 
      also apply to SPPP over SOAP implementations. Additionally, the following must be considered:</t>	  
	  
      <t>SPPP over SOAP is used to query and update session peering data and addresses, so
   the ability to access this protocol should be limited to users and
   systems that are authorized to query and update this data.  Because this 
   data is sent in both directions, it may not be sufficient for just the client 
   or user to be authenticated with the server.  The identity of the server 
   should also be authenticated by the client, which is often accomplished using 
   the TLS certificate exchange and validation described in <xref target="RFC2818"/>.  
  </t>


      <section anchor="Vulnerabilities" title="Vulnerabilities">

   <t><xref target="AuthenticationIntegrityConfidentiality"/> describes the use of HTTP and TLS as the underlying substrate protocols for SPPP over SOAP. These underlying protocols may have various vulnerabilities, and these may
   be inherited by SPPP over SOAP.  SPPP over SOAP itself may have vulnerabilities 
   because an authorization model is not explicitly specified in this document.
   </t>
   <t>
   During a TLS handshake, TLS servers can optionally request a certificate from a TLS client; 
   that option is not a requirement for this protocol.  This presents a denial-of-service risk in which unauthenticated clients can consume server CPU resources by creating TLS sessions. 
   The risk is increased if the server supports client-initiated renegotiation. This risk can be mitigated by disabling client-initiated renegotiation on the server and by ensuring that other 
   means (such as firewall access control lists) are used to restrict unauthenticated client access to servers.
   </t>
   <t>In conjunction with the above, it is important that SPPP over SOAP implementations implement an authorization 
   model that considers the source of each query or update request and 
   determines whether it is reasonable to authorize that source to perform that
   specific query or update. </t>
   
      </section>



    </section>
 
    <section anchor="IANAConsiderations" title="IANA Considerations">
      <t>This document uses URNs to describe XML Namespaces and XML Schemas.
      According to <xref target="RFC3688"/>, IANA has performed the 
	  following URN assignment:
    </t>
	<t>
   <list style="empty">
     <t>URN: urn:ietf:params:xml:ns:sppf:soap:1</t>
	 <t>Registrant Contact: IESG</t>
	 <t>XML: See Section 9 of [RFC7878]</t>
   </list>
   </t>
    </section>

  </middle>

  <back>
    <references title="Normative References">
                &rfc2119;
                &rfc3688;
                &rfc5246;
    	        &rfc7525;
                &rfc7230;
	        &rfc7231;
                &rfc7235;

                <reference anchor="RFC7877" target="http://www.rfc-editor.org/info/rfc7877">
                        <front>
                          <title>Session Peering Provisioning Framework (SPPF)</title>
    					  <author initials="K." surname="Cartwright"/>
    					  <author initials="V." surname="Bhatia"/>
						  <author initials="S." surname="Ali"/>
						  <author initials="D." surname="Schwartz"/>
                       <date month="May" year="2016" />
                        </front>
                        <seriesInfo name="RFC" value="7877"/>
                        <seriesInfo name="DOI" value="10.17487/RFC7877"/>
                </reference>

                <reference anchor="SOAPREF" target="http://www.w3.org/TR/soap12-part1/">
                        <front>
                          <title>SOAP Version 1.2 Part 1: Messaging Framework (Second Edition)</title>
    					   <author initials="M." surname="Gudgin"/>
    					   <author initials="M." surname="Hadley"/>
    					   <author initials="J." surname="Moreau"/>
    					   <author initials="H." surname="Nielsen"/>
                           <date month="April" year="2007" />
                        </front>
                        <seriesInfo name="W3C Recommendation" value="REC-SOAP12-part1-20070427"/>
                </reference>

    </references>
    
    <references title="Informative References"> 
                &rfc2818; 
                &rfc5321; 
                <reference anchor="WSDLREF" target="http://www.w3.org/TR/2001/NOTE-wsdl-20010315">
                        <front>
                          <title>Web Services Description Language (WSDL) 1.1</title>
    					   <author initials="E." surname="Christensen"/>
    					   <author initials="F." surname="Curbera"/>
    					   <author initials="G." surname="Meredith"/>
    					   <author initials="S." surname="Weerawarana"/>
                           <date month="March" year="2001" />
                        </front>
                        <seriesInfo name="W3C Note" value="NOTE-wsdl-20010315"/>
                </reference>


				<reference anchor='W3C.REC-xml-20081126' target='http://www.w3.org/TR/2008/REC-xml-20081126'>
					<front>
						<title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>
						<author initials='C.' surname='Sperberg-McQueen' fullname='C. M. Sperberg-McQueen'>
							<organization />
						</author>
						<author initials='F.' surname='Yergeau' fullname='Francois Yergeau'>
							<organization />
						</author>
						<author initials='T.' surname='Bray' fullname='Tim Bray'>
							<organization />
						</author>
						<author initials='E.' surname='Maler' fullname='Eve Maler'>
							<organization />
						</author>
						<author initials='J.' surname='Paoli' fullname='Jean Paoli'>
							<organization />
						</author>
						<date month='November' year='2008' />
					</front>
					<seriesInfo name='W3C Recommendation' value='REC-xml-20081126' />
				</reference>

    </references>

 <section anchor="Acknowledgements" title="Acknowledgements" numbered="no">
    <t>
		This document is a result of various discussions held with the IETF DRINKS working group,
		specifically the protocol design team, 
		with contributions from the following individuals, in alphabetical order: 
		Syed Ali, Vikas Bhatia, Kenneth Cartwright, Sumanth Channabasappa, Lisa Dusseault, Deborah A. Guyton, Scott Hollenbeck, 
                Otmar Lendl, Manjul Maharishi, Mickael Marrache, Alexander Mayrhofer, Samuel Melloul, Jean-Francois Mule, Peter Saint-Andre, 
                David Schwartz, and Richard Shockey.
		
		</t>




    </section>

  </back>
  
</rfc>
