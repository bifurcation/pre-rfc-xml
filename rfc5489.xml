<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2104 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2104.xml">
<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"> 
<!ENTITY rfc4279 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4279.xml">
<!ENTITY rfc4492 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4492.xml">
<!ENTITY rfc4785 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4785.xml">
<!ENTITY rfc5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc rfcedstyle="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="info" number="5489" >
<front>
     <title abbrev="ECDHE_PSK Cipher Suites for TLS">ECDHE_PSK Cipher Suites for Transport Layer Security (TLS)</title>
           <author initials="M." surname="Badra"
                   fullname="Mohamad Badra">
               <organization>CNRS/LIMOS Laboratory</organization>
               <address>
                   <postal>
                       <street>Campus de cezeaux, Bat. ISIMA</street>
                       <city>Aubiere</city> 
                       <code>63170</code>
		       <state></state>
                       <country>France</country>
                   </postal>

                   <email>badra@isima.fr</email>
               </address>
           </author>

           <author initials="I." surname="Hajjeh"
                   fullname="Ibrahim Hajjeh">
               <organization>INEOVATION</organization>
               <address>
                   <postal>
                       <street></street>
                       <city></city> 
                       <code></code>
		       <state></state>
                       <country>France</country>
                   </postal>

                   <email>ibrahim.hajjeh@ineovation.fr</email>
               </address>
           </author>

           <date month="March" year="2009" />

<keyword>pre-shared key</keyword>
<keyword>Diffie-Hellman</keyword>
<keyword>Key Exchange</keyword>
<keyword>Elliptic Curve Cryptography</keyword>

<note title="">
 <t>
  This document may contain material from IETF Documents or IETF
  Contributions published or made publicly available before November 10,
  2008. The person(s) controlling the copyright in some of this material
  may not have granted the IETF Trust the right to allow modifications
  of such material outside the IETF Standards Process.  Without
  obtaining an adequate license from the person(s) controlling the
  copyright in such materials, this document may not be modified outside
  the IETF Standards Process, and derivative works of it may not be
  created outside the IETF Standards Process, except to format it for
  publication as an RFC or to translate it into languages other than
  English.
 </t>
</note>

        <abstract>
               <t>This document extends RFC 4279, RFC 4492, and RFC
               4785 and specifies a set of cipher suites that use a
               pre-shared key (PSK) to authenticate an Elliptic Curve
               Diffie-Hellman exchange with Ephemeral keys (ECDHE).  
               These cipher suites provide Perfect Forward Secrecy 
               (PFS).</t>

           </abstract>
       </front>
<middle>
<section title="Introduction" anchor="intro">
    <t>RFC 4279 specifies cipher suites for supporting TLS using
    pre-shared symmetric keys that (a) use only symmetric key
    operations for authentication, (b) use a Diffie-Hellman exchange
    authenticated with a pre-shared key (PSK), or (c) combine public key
    authentication of the server with pre-shared key authentication of
    the client. </t>

    <t>RFC 4785 specifies authentication-only cipher suites (with no
    encryption).  These cipher suites are useful when authentication
    and integrity protection is desired, but confidentiality is not
    needed or not permitted.</t>

    <t>RFC 4492 defines a set of Elliptic Curve Cryptography (ECC)-based 
    cipher suites for TLS and describes the use of ECC certificates for 
    client authentication.  In particular, it specifies the use of Elliptic Curve
    Diffie-Hellman (ECDH) key agreement in a TLS handshake and the use
    of the Elliptic Curve Digital Signature Algorithm (ECDSA) as a new
    authentication mechanism. </t>

    <t>This document specifies a set of cipher suites that use a PSK
    to authenticate an ECDH exchange.  These cipher suites provide
    Perfect Forward Secrecy.  Some of these cipher suites provide
    authentication only. </t>

    <t> The reader is expected to become familiar with RFC 4279, RFC
    4492, and RFC 4785 prior to studying this document.</t>


<section title="Applicability Statement ">
    <t>The cipher suites defined in this document can be negotiated,
    whatever the negotiated TLS version is.</t>

    <t>The applicability statement in <xref target="RFC4279"/> applies to this document
   as well.</t>
</section>

<section title="Conventions Used in This Document">
    <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL"
    in this document are to be interpreted as described
    in <xref target="RFC2119"></xref>.</t>

</section>
</section>

<section title="ECDHE_PSK Key Exchange Algorithm">
    <t>The cipher suites described in this document make use of the
    elliptic curve (EC)
    parameter negotiation mechanism defined in RFC 4492.  When the
    cipher suites defined in this document are used, the
    'ec_diffie_hellman_psk' case inside the ServerKeyExchange and
    ClientKeyExchange structure MUST be used instead of the 'psk' case
    defined in <xref target="RFC4279"/> (i.e., the ServerKeyExchange
    and ClientKeyExchange messages include the EC Diffie-Hellman
    parameters in the form specified in Sections 5.4 and 5.7 of 
    <xref target="RFC4492"/>).  The PSK identity and identity hint 
    fields have the
    same meaning and encoding as specified in <xref target="RFC4279"/>
    (note that the ServerKeyExchange message is always sent, even if
    no PSK identity hint is provided). </t>

    <t>The format of the ServerKeyExchange and ClientKeyExchange messages is shown below. 
      <figure>
        <artwork><![CDATA[	
   struct {
       select (KeyExchangeAlgorithm) {
           /* other cases for rsa, diffie_hellman, etc. */
           case ec_diffie_hellman_psk:  /* NEW */
               opaque psk_identity_hint<0..2^16-1>;  
               ServerECDHParams params;
       };
   } ServerKeyExchange;

   struct {
       select (KeyExchangeAlgorithm) {
           /* other cases for rsa, diffie_hellman, etc. */
           case ec_diffie_hellman_psk:   /* NEW */
               opaque psk_identity<0..2^16-1>;
               ClientECDiffieHellmanPublic public;
       } exchange_keys;
   } ClientKeyExchange;
      ]]></artwork>
   </figure>

</t>
<t>The premaster secret is formed as follows.  First, perform the ECDH
  computation as described in Section 5.10 of
  <xref target="RFC4492"/>.  Let Z be the octet string produced by
  this computation.  Next, concatenate a uint16 containing the length
  of Z (in octets), Z itself, a uint16 containing the length of the
  PSK (in octets), and the PSK itself.</t>

<t> This corresponds to the general structure for the premaster
  secrets (see Note 1 in Section 2 of <xref target="RFC4279"/>), with
  "other_secret" containing Z. 

<figure>
     <artwork><![CDATA[	
   struct {
       opaque other_secret<0..2^16-1>;  
       opaque psk<0..2^16-1>;  
   }; 
]]></artwork>
</figure>
</t>
</section>

<?rfc needLines="8"?>

<section title="ECDHE_PSK-Based Cipher Suites">
<section title="ECDHE_PSK Cipher Suites Using the SHA-1 Hash">
<artwork>
   CipherSuite TLS_ECDHE_PSK_WITH_RC4_128_SHA          = {0xC0,0x33}; 
   CipherSuite TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA     = {0xC0,0x34}; 
   CipherSuite TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA      = {0xC0,0x35}; 
   CipherSuite TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA      = {0xC0,0x36}; 
</artwork>
<t>The above four cipher suites match the cipher suites defined in
  <xref target="RFC4279"/>, except that they use an Elliptic Curve 
   Diffie-Hellman exchange <xref target="RFC4492"/> authenticated with 
   a PSK, and:</t>

<t>
<list style="symbols">
<t>The Message Authentication Code (MAC) is the Hashed Message
  Authentication Code (HMAC) <xref target="RFC2104"/> with SHA-1 as the hash
  function.</t>

<t>When negotiated in a version of TLS prior to 1.2, the Pseudo-Random 
   Function (PRF) from that version is used; otherwise, the PRF is the TLS PRF
  <xref target="RFC5246"/> with SHA-256 as the hash function.</t>

</list>
</t>
</section>
<section title="ECDHE_PSK Cipher Suites Using SHA-2 Hashes">
<artwork>
   CipherSuite TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256   = {0xC0,0x37}; 
   CipherSuite TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384   = {0xC0,0x38}; 
</artwork>
<t>The above two cipher suites are the same as the corresponding
  Advanced Encryption Standard (AES) cipher suites in Section 3.1 
  above, except for the hash and PRF algorithms, which SHALL be as follows:</t>

<t>
<list style="symbols">
<t>For the cipher suite TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256: 
<list style="symbols">
<t>The MAC is HMAC <xref target="RFC2104"/> with SHA-256 as the hash
  function.</t>

<t>When negotiated in a version of TLS prior to 1.2, the PRF from that
  version is used; otherwise, the PRF is the TLS PRF
  <xref target="RFC5246"/> with SHA-256 as the hash function.</t>

</list>
</t>
<t>For the cipher suite TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384:	
<list style="symbols">

<t>The MAC is HMAC <xref target="RFC2104"/> with SHA-384 as the hash
  function.</t>

<t>When negotiated in a version of TLS prior to 1.2, the PRF from that version 
   is used; otherwise the PRF is the TLS PRF <xref target="RFC5246"/> with 
   SHA-384 as the hash function.</t>
</list>
</t>
</list>
</t>
</section>
</section>

<section title="ECDHE_PSK-Based Cipher Suites with NULL Encryption">
<section title="ECDHE_PSK Cipher Suite Using the SHA-1 Hash with NULL Encryption">

<t>The following cipher suite matches the cipher suites defined in
  Section 3.1, except that we define a suite with NULL
  encryption. </t>

<artwork>
   CipherSuite TLS_ECDHE_PSK_WITH_NULL_SHA             = {0xC0,0x39};  
</artwork>
</section>
<section title="ECDHE_PSK Cipher Suites Using SHA-2 Hashes with NULL Encryption">

<t>The following two cipher suites are the same as the corresponding
  cipher suites in Section 3.2, but with NULL encryption (instead of
  AES). </t>

<artwork>
   CipherSuite TLS_ECDHE_PSK_WITH_NULL_SHA256          = {0xC0,0x3A}; 
   CipherSuite TLS_ECDHE_PSK_WITH_NULL_SHA384          = {0xC0,0x3B}; 
</artwork>
</section>
</section>
<section title="Security Considerations">

<t>The security considerations described throughout
  <xref target="RFC5246"/>, <xref target="RFC4785"/>,
  <xref target="RFC4492"/>, and <xref target="RFC4279"/> apply here as
  well.  In particular, as the authentication-only cipher suites (with no
  encryption) defined here do not support confidentiality, care should
  be taken not to send sensitive information (such as passwords) over
  connections protected with one of the cipher suites with NULL 
  encryption defined in Section 4 of this document. </t>

<t>Implementers and administrators should monitor the general
   statements on recommended cryptographic algorithms (e.g., SHA-1
   hash function) that are published from time to time by various forums,
   including the IETF, as a base for the portfolio they support and
   the policies for strength of function acceptable for the cipher
   suites they set.</t>


</section>	
<section title="IANA Considerations">
<t>This document defines the following new cipher suites, whose values
  have been assigned from the TLS Cipher Suite registry defined in
  <xref target="RFC5246"/>. 

<artwork>
   CipherSuite TLS_ECDHE_PSK_WITH_RC4_128_SHA          = {0xC0,0x33}; 
   CipherSuite TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA     = {0xC0,0x34}; 
   CipherSuite TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA      = {0xC0,0x35}; 
   CipherSuite TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA      = {0xC0,0x36}; 
   CipherSuite TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256   = {0xC0,0x37}; 
   CipherSuite TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384   = {0xC0,0x38}; 
   CipherSuite TLS_ECDHE_PSK_WITH_NULL_SHA             = {0xC0,0x39};  
   CipherSuite TLS_ECDHE_PSK_WITH_NULL_SHA256          = {0xC0,0x3A}; 
   CipherSuite TLS_ECDHE_PSK_WITH_NULL_SHA384          = {0xC0,0x3B}; 
</artwork>
</t>
</section>
<section title="Acknowledgments">
<t>The author appreciates Alfred Hoenes for his detailed review and 
   effort on resolving issues in discussion.  The author would like to
   acknowledge Bodo Moeller, Simon Josefsson, Uri Blumenthal, Pasi
   Eronen, Paul Hoffman, Joseph Salowey, Mark Tillinghast, and the TLS
   mailing list members for their comments on the document.</t>

</section>
</middle>
<back>
<references title="Normative References">
&rfc2104;
&rfc2119;
&rfc4279;
&rfc4492;
&rfc4785;
&rfc5246;
</references>
</back>
</rfc>
