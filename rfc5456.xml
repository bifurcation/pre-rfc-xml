<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
    <!ENTITY rfc5125 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5125.xml'> 
    <!ENTITY rfc5234 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml'> 
    <!ENTITY rfc4566 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4566.xml'> 
    <!ENTITY rfc1034 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1034.xml'> 
    <!ENTITY rfc1321 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1321.xml'>
    <!ENTITY rfc1851 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1851.xml'>
    <!ENTITY rfc1890 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1890.xml'>
    <!ENTITY rfc2026 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2026.xml'>
    <!ENTITY rfc2119 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
    <!ENTITY rfc4301 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4301.xml'>
    <!ENTITY rfc3447 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml'>
    <!ENTITY rfc2535 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2535.xml'>
    <!ENTITY rfc3435 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3435.xml'>
    <!ENTITY rfc4733 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4733.xml'>
    <!ENTITY rfc4734 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4734.xml'>
    <!ENTITY rfc4646 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4646.xml'>
    <!ENTITY rfc4647 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4647.xml'>
    <!ENTITY rfc3174 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3174.xml'>
    <!ENTITY rfc3525 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3525.xml'>
    <!ENTITY rfc3261 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3261.xml'>
    <!ENTITY rfc3454 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3454.xml'>
    <!ENTITY rfc3491 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3491.xml'>
    <!ENTITY rfc3550 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3550.xml'>
    <!ENTITY rfc3978 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3978.xml'>
    <!ENTITY rfc3979 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3979.xml'>
    <!ENTITY rfc3761 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3761.xml'>
    <!ENTITY rfc3401 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3401.xml'>
    <!ENTITY rfc3402 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3402.xml'>
    <!ENTITY rfc3403 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3403.xml'>
    <!ENTITY rfc3404 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3404.xml'>
    <!ENTITY rfc3629 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml'>
    <!ENTITY rfc3986 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml'>
    <!ENTITY rfc4395 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4395.xml'>
    <!ENTITY rfc4347 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4347.xml'>
]>
<rfc number="5456" category="info" submissionType="independent">
<?xml-stylesheet type='text/xsl' href='./rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc tocdepth="2" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc strict="no" ?>
<?rfc rfcedstyle="yes" ?>
<?rfc subcompact="no" ?>

    <front>
        <title>IAX: Inter-Asterisk eXchange Version 2</title>
<author initials="M.S." surname="Spencer" fullname="Mark A. Spencer">
<organization>Digium, Inc.</organization>
<address>
<postal>
<street>445 Jan Davis Drive NW</street>
<city>Huntsville</city> <region>AL</region> <code>35806</code>
<country>US</country>
</postal>
<phone>+1 256 428 6000</phone>
<email>markster@digium.com</email>
<uri>http://www.digium.com/</uri>
</address>
</author>

<author initials="B." surname="Capouch" fullname="Brian Capouch">
<organization>Saint Joseph's College</organization>
<address>
<postal>
<street>PO Box 909</street>
<city>Rensselaer</city> <region>IN</region> <code>47978</code>
<country>US</country>
</postal>
<phone>+1 219 866 6114</phone>
<email>brianc@saintjoe.edu</email>
</address>
</author>

<author initials="E.T." surname="Guy" fullname="Ed Guy" role="editor"> <organization>Truphone</organization>
<address>
<postal>
<street>12 Williams Rd</street>
<city>Chatham</city> <region>NJ</region> <code>07928</code>
<country>US</country>
</postal>
<phone>+1 973 437 4519</phone>
<email>edguy@emcsw.com</email>
<uri>http://www.truphone.com/</uri>
</address>
</author>

<author initials="F" surname="Miller" fullname="Frank Miller"> <organization> Cornfed Systems, LLC</organization>
<address>
<postal>
<street>3476 Dayton Street</street>
<city>Denver</city> <region>CO</region> <code>80238</code>
<country>US</country>
</postal>
<phone>+1 410 404-8790</phone>
<email>mail@frankwmiller.net</email>
<uri>http://www.sipuseragent.net</uri>
</address>
</author>
 
<author initials="K.S." surname="Shumard" fullname="Kenneth C. Shumard">
<organization></organization>
<address>
<postal>
<street>3818 N Lakegrove Way</street>
<city>Boise</city> <region>ID</region> <code>83713</code>
<country>US</country>
</postal>
<phone>+1 208 724 7801</phone>
<email>kshumard@gmail.com</email>
</address>
</author>

<date month="January" year="2010" /> 

        <keyword>VoIP</keyword>
        <keyword>Voice over IP</keyword>
        <keyword>IAX</keyword>
        <keyword>Asterisk</keyword>

<abstract>
<t>This document describes IAX, the Inter-Asterisk eXchange protocol,
  an application-layer control and media protocol for creating,
  modifying, and terminating multimedia sessions over Internet
  Protocol (IP) networks. IAX was developed by the open source
  community for the Asterisk Private Branch Exchange (PBX) and is targeted primarily at Voice over Internet Protocol (VoIP) call control, but it can be used with streaming video or any other type of multimedia.</t>

<t>IAX is an "all in one" protocol for handling multimedia in IP networks. It combines both control and media services in the same protocol. In addition, IAX uses a single UDP data stream on a static port greatly simplifying Network Address Translation (NAT) gateway traversal, eliminating the need for other protocols to work around NAT, and simplifying network and firewall management.  IAX employs a compact encoding that decreases bandwidth usage and is well suited for Internet telephony service.  In addition, its open nature permits new payload 
type additions needed to support additional services.</t>
        </abstract>

<note title="IESG Note">
  <t>
      This RFC is not a candidate for any level of Internet Standard.
      The IETF disclaims any knowledge of the fitness of this RFC for
      any purpose and in particular notes that the decision to publish
      is not based on IETF review for such things as security,
      congestion control, or inappropriate interaction with deployed
      protocols.  The RFC Editor has chosen to publish this document
      at its discretion.  Readers of this document should exercise
      caution in evaluating its value for implementation and
      deployment.  See RFC 3932 for more information.
  </t>
</note>

<note title="RFC Editor Note">
  <t>
    The IESG thinks that this work is related to IETF work done in
    SIP, MMUSIC, and AVT WGs, but this does not prevent publishing.
  </t>
</note>

</front>

<middle>
<section title="Introduction">

<t>Numerous protocols have been specified by the Internet community to support control or signaling of multimedia sessions, for instance,
SIP <xref target="RFC3261" />, Media Gateway Control Protocol (MGCP) <xref target="RFC3435" />, 
and MEGACO/H.248 <xref target="RFC3525" /> (which has been obsoleted
  and made historic by <xref target="RFC5125" />).
In general, these protocols are designed to offer full support for many types of media transmission. This flexible approach adds some overhead to the protocol headers, but allows for the protocol use well beyond the current application. Typically, these protocols reference, but do not specify, the media transmission protocol used to carry the actual stream.  SIP commonly uses Session Description Protocol (SDP) <xref target="RFC4566" /> to specify
Real-Time Transport Protocol (RTP) <xref target="RFC3550" /> streams. 
This method allows for great flexibility, but again leads to more overhead. Furthermore, multimedia solutions that use different, perhaps dynamic, network addresses for signaling and media transmission frequently suffer from Network Address Translation (NAT) traversal and security challenges.</t>

<t>IAX is the Inter-Asterisk eXchange protocol, which facilitates VoIP connections between servers, and between servers and clients that also use the IAX protocol. IAX was created through an open source methodology rather than through a traditional, standards-based methodology. 
It is an open protocol originally used by Asterisk, a dual-licensed open source and commercial PBX server from Digium. 
Independent IAX implementations may be open, proprietary, or licensed in anyway the author seems fit without 
royalty to the protocol creators.</t>

<section title="Basic Properties">
<t>IAX is a robust and full-featured, yet, simple protocol. It is general enough that it can handle most common types of media streams. However, the protocol is highly optimized for VoIP calls where low-overhead and low-bandwidth consumption are priorities. This pragmatic aspect makes IAX more efficient for VoIP than protocols that consider possibilities far beyond current needs and specify many more details than are strictly necessary to describe or transport a point-to-point call. Furthermore, because IAX is designed to be lightweight and VoIP-friendly, it consumes less bandwidth than more general approaches. 
IAX is a binary protocol, designed to reduce overhead, especially in regards to voice streams. Bandwidth efficiency, in some places, is 
sacrificed in exchange for bandwidth efficiency for individual voice calls.
For example, when transmitting a voice stream compressed to 8 kbit/s
with a 20 ms packetization, each data packet consists of 20 bytes.  IAX adds 20% overhead, 4 bytes, on the majority of voice packets while RTP adds 60% overhead with 12 additional bytes per voice packet.  
</t>


<t>
In addition to efficiency, IAX's single static UDP port approach makes IAX traffic easy for network managers to 
shape, prioritize, and pass through firewalls. IAX's basic structure is that it multiplexes signaling and multiple media streams over a single UDP stream between two computers. 
IAX also uses the same UDP port for both its signaling and media messages, and because all communications regarding a call are done over a 
the same point-to-point path, NAT traversal is much simpler for IAX than for other commonly deployed protocols.
</t>

</section>
<section title="Drawbacks">
<t>While IAX is very effective, addressing many of today's communications needs, it does have a 
few limitations. For instance, IAX uses a point-to-point codec negotiation mechanism that 
limits extensibility because every IAX node in a call path must support every used 
codec to some degree.  In addition,  the codec definition is controlled by an 
internally defined 32-bit mask, so the codecs must be defined in the protocol, 
and the maximum number of simultaneous codecs is, therefore, limited.</t>

<t>One of IAX's design strengths also presents a potential problem. The use of a single, well-known,
port makes the protocol an easier target for denial-of-service attacks.  Real-time systems like 
VoIP are particularly sensitive to these attacks.
</t>

<t>The protocol is typically deployed with all signaling and media going to a 
centralized server. While this combined path approach provides a great deal of control,  
it limits the overall system scalability.  IAX now provides the ability to split 
the media from the signaling stream, which overcomes this limitation of earlier IAX versions.</t>

<t>  Most IAX drawbacks are due to implementation issues rather than protocol issues. 
Threading presents a series of problems. Many implementations have a limited number of 
threads available to process IAX traffic and can become overwhelmed by high use or 
denial-of-service attacks.  Newer implementations have additional controls to minimize
the impact of these challenges.
</t>
</section>
</section>


<section title="IAX Terminology">
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119" />.</t>
<t>Additionally, this document uses the following terminology:

<list style='hanging'>

<t hangText="Peer:"> A host or device that implements the IAX protocol.</t>

<t hangText="Call:">A call is a relationship between two or more parties (i.e., resources such as devices, user agents, or programs) that exists for some time for the purpose of exchanging real-time media.  In the context of this document, a call is an end-to-end relationship where at least the one leg of call path is implemented using the IAX protocol.</t>


<t hangText="Calling Party:"> A device or program that initiates a call. </t>

<t hangText="Called Party:"> A device or program to which a call is directed. </t>


<t hangText="Context:"> A context is a named partition of a Dialplan.</t>


<t hangText="Dialplan:"> A Dialplan is a set of rules for associating provided names and numbers with a particular called party. </t>

<t hangText="Frame:">The atomic communication unit between two IAX peers. All IAX messages are carried within frames.</t>

<t hangText="Information Element (IE):">
A discrete data unit appended to an IAX frame that specifies user- or call-specific data.</t>

<t hangText="Registrant:"> A registrant is a peer that makes REGISTER requests
in order to advertise the address of a resource, i.e., a device or program to which a call may be directed.</t>

<t hangText="Registrar:"> A registrar is a peer that processes REGISTER requests  and places the information it receives in those requests into the location service. <xref target="RFC3261"/>.</t>

</list></t>

        </section>

        <section title="Overview of IAX Protocol">
<t>IAX is a peer-to-peer, VoIP-oriented protocol. IAX includes both control and  media functions.  It can register locations, create, modify, terminate multimedia sessions, and carry the actual media streams specified by the sessions it manages. The protocol is designed and optimized for describing and transporting multimedia calls using Internet Protocol. 
This document describes Version 2 of IAX;  Version 1, although somewhat similar in design, utilized a different port and was not widely deployed.</t>
                <t>The basic design approach for IAX multiplexes signaling and multiple media streams over a single UDP association between two hosts. This is accomplished by using the same "well-known" UDP port, 4569, for all types of IAX traffic. IAX's unified signaling and media paths achieve NAT transparency, which is an advantage of IAX over alternative media transport protocols such as SIP <xref target="RFC3261" />.</t>
                <t>IAX is coded as a binary protocol. One major benefit of using a binary protocol is bandwidth efficiency because the quality of voice calls is frequently related to the amount of bandwidth consumed. This is one way the protocol is specifically optimized to make efficient use of bandwidth for individual voice calls. The bandwidth efficiency for other stream types is sacrificed for the sake of individual voice calls. Other benefits of a binary protocol are robustness against buffer-overrun attacks, and compact implementation capability, which reduces interoperability issues related to parsing.</t>
                <t>The atomic communication unit in IAX is the "Frame". There are multiple classes of Frames, each of which is described below. In general, "Full Frames" carry signaling/control data, while "Mini Frames" carry media stream data. Full Frames enclose optional 'Information Elements' (IEs). IEs describe various types of user- or call-specific data.  "Meta Frames" are used for call trunking or video stream transmission.</t>
                <t>An IAX-based call may consist of  many call legs, or segments. Each call leg may be implemented using different protocols, e.g., SIP to IAX to ISDN (Integrated Services Digital Network).  IAX is responsible for setting up one or more legs of a complete call path, not necessarily the end-to-end call.</t>
<t>IAX is an optimized peer-to-peer protocol. If two adjacent call legs utilize the IAX protocol and if the intermediate peer determines that it does not need to remain in the call path, it can supervise a calling path change such that it removes itself from the path. This supervision is complete, a call path is not changed until all peers in the optimized call path confirm they can properly communicate. </t>
                <t>IAX supports security features by allowing multiple
                methods of user authentication and authorization, as
                well as allowing multiple security methods for peer registration. IAX also specifies a generic framework for native encryption.</t>
        </section>

<section title="Naming Conventions">
<t>
<list style='hanging'>

<t hangText="Call Identifier:"> 
A call leg is marked with two unique integers, one assigned by each peer involved in creating the call leg. 
</t>

<t hangText="Number:"> 
The Calling and Called Numbers are a set of digits and letters identifying a call originator and the desired terminating resource.  The term 'Number' is historic and has been expanded to include letters. 
A peer is responsible for defining its own dialplan. A peer MAY define its dialplan according to
ITU-T Recommendation E.164 <xref target="E164"/>. However, this is not required.
</t>

<t hangText="Username:"> 
A username is a string used for identification purposes.
</t>

</list>
</t>
</section>
<section title="IAX Uniform Resource Identifiers" anchor='sec.uri'>

<section title="IAX URI Scheme Registration">
<t>This section registers IAX according to the guidelines in <xref target="RFC4395" />.

<list style='hanging'>
<t hangText="URI scheme name:"></t>
<t>iax.</t>
<t hangText="Status:"> </t><t>Permanent.</t>
<t hangText="URI scheme syntax:"> </t><t>


The "iax:" scheme follows the guidelines in <xref target="RFC3986"/>.
</t>
<t>
<list style='hanging'>
<t hangText="The general form is as follows:"></t><t>
iax:[username@]host[:port][/number[?context]]
                        <vspace blankLines="1" />
where these tokens have the following meanings:
<list style='hanging'>
<t hangText="iax:"> The literal 'iax:'.</t>
<t hangText="username:">A string used for identification purposes.
         </t>
<t hangText="host:">The domain of the resource.  The host part contains either a fully-qualified domain name or numeric IPv4 or IPv6 address.  An IPv6 address must be enclosed within
     brackets (i.e., '[2001:db8::1]') as defined in <xref target="RFC3986" />.  Using the fully-qualified domain name form is RECOMMENDED whenever possible.</t>
<t hangText="port:">The numeric UDP port number.</t>
<t hangText="number:">The name or number identifying the resource on that host.</t>
<t hangText="context:">The name of the host partition in which the service is identified or processed.</t>
</list></t>
<t hangText="Examples">
                        <vspace blankLines="0" />
   iax:example.com/alice
                        <vspace blankLines="0" />
   iax:example.com:4569/alice
                        <vspace blankLines="0" />
   iax:example.com:4570/alice?friends
                        <vspace blankLines="0" />
   iax:192.0.2.4:4569/alice?friends
                        <vspace blankLines="0" />
   iax:[2001:db8::1]:4569/alice?friends
                        <vspace blankLines="0" />
   iax:example.com/12022561414
                        <vspace blankLines="0" />
   iax:johnQ@example.com/12022561414

</t>
<t hangText="ABNF">

<vspace blankLines="0"/>

   Formal syntax is defined using ABNF
   <xref target="RFC5234"/>. Certain values are included by reference
   from <xref target="RFC3986" />:

<figure><artwork type="ABNF"><![CDATA[
         iax-uri     = "iax:" [ userinfo "@" ] host [ ":" port ] 
                       [ "/" number [ "?" context ] ]

         userinfo    = <as specified in RFC 3986>

         host        = <as specified in RFC 3986>

         port        = <as specified in RFC 3986>

         number      = *(unreserved / sub-delims / pct-encoded )

         context     = *(unreserved / sub-delims / pct-encoded )

         unreserved  = <as specified in RFC 3986>

         sub-delims  = <as specified in RFC 3986>

         pct-encoded = <as specified in RFC 3986>
]]></artwork></figure>
</t>
</list>
</t>

<t hangText="URI Scheme Semantics:"> </t><t>An IAX URI identifies a communications resource capable of
communicating using the IAX Version 2 protocol defined in this document.  
Within this document, we refer to IAX Version 2 protocol URI as IAX. An  IAX URI contains enough information to initiate an IAX-based call with that resource.
</t>
<t>
IAX URIs are associated with server resources to which calls may be routed. For instance, an IAX URI
may represent an appearance on a phone, a voice-mail box on a messaging service, an interactive program,
a Public Switched Telephone Network (PSTN) address or gateway, or any group of the above.
</t><t>
The IAX URI scheme translates into a location that may be used by the IAX protocol to establish a new call
using the URI scheme components described in the previous section.  This new call function is the only defined 
operation.

</t>

<t hangText="Encoding considerations:">  
        <vspace blankLines="1" />
IAX URI scheme encoding conforms to the encoding rules established
   for URIs in <xref target="RFC3986" />.
</t>
<t hangText="Applications/protocols that use this URI scheme name:"> </t><t>
The scheme is used by ENUM Dynamic Delegation Discovery System (DDDS) 
services to specify resources that support the IAX protocol.
The IAX protocol provides application-layer control and media protocol for
creating, modifying, and terminating multimedia sessions over
Internet Protocol (IP) networks.
</t>
<t hangText="Interoperability considerations:"></t><t>None.</t>
<t hangText="Security considerations:"> </t><t>The IAX URI Scheme does not introduce 
any new security concerns except that it provides a uniform syntax 
for describing IAX resources and that, when published, these addresses are subject to 
various denial-of-service attacks. </t>
<t hangText="Contact:"> </t><t>Ed Guy, edguy@emcsw.com, +1.973.437.4519.</t>
<t hangText="Author/Change controller"></t><t> Not Applicable. </t>
<t hangText="References:"></t><t>RFC &rfc.number; (this document)</t>
</list>
</t>


</section>

<section title="URI Comparison">
<t>

   Some operations in this specification require determining whether two IAX URIs are equivalent. IAX URIs are compared for equality according to the following rules:
                        <vspace blankLines="1" />
All components of the URI MUST be identical except:
   <list>
   <t>The port, if omitted, is considered to be the same as the default, 4569.</t>
   <t>All URI components, except the username field, are case insensitive, and MUST be normalized 
to lower case as per Section 6.2.2.1 of <xref target="RFC3986" /> before comparison.</t>
</list>
   The URIs within each of the following sets are equivalent:
                        <vspace blankLines="1" />
                        <vspace blankLines="0" />   iax:atlanta.com/alice
                        <vspace blankLines="0" />   iax:AtLaNtA.com/ALicE
                        <vspace blankLines="0" />   iax:atlanta.com:4569/alice
                        <vspace blankLines="1" />
                        <vspace blankLines="0" />   iax:alice@atlanta.com/alice
                        <vspace blankLines="0" />   iax:alice@AtLaNtA.com:4569/ALicE
                        <vspace blankLines="1" />
   The URIs within the following set are not equivalent:
                        <vspace blankLines="1" />
                        <vspace blankLines="0" /> iax:ALICE@atlanta.com/alice
                        <vspace blankLines="0" /> iax:alice@atlanta.com/alice
</t>

   <t>NOTE: A host in domain form and in IP address form are NOT considered identical even if the host name resolves to an address record that matches the given IP address.</t>
</section>


</section>

<section title="Peer Behavior and Related Messages">
<t> Messages are divided into two categories: reliable and  non-guaranteed. The reliable messages are referred to as "Full Frames". In addition to a message type indicator and facilities to ensure reliability, see <xref target='sec.transport' />, they include the full call identifier.  It consists of each of peer's identifiers for the call. Additional attributes, "Information Elements" or "IEs", may be associated with the Full Frame messages.</t>
<t>
The non-guaranteed messages are referred to as "Mini-Frames" and "Meta Frames" and these more compact messages only have the originating peer's call identifier and MUST NOT have any "Information Elements". 
</t>
<t>
Peer behavior is presented in several partitions divided by the following functional areas:
<list>
<t>Registration (OPTIONAL) </t>
<t>Call Link Management</t>
<t>Call Path Optimization (OPTIONAL)</t>
<t>Mid-Call Behavior</t>
<t>Call Tear Down</t>
<t>Network Monitoring</t>
<t>Digit Dialing (OPTIONAL) </t>
<t>Miscellaneous</t>
<t>Media Messages</t>
</list>
Each of these behavior topics and the messages involved are described in the sections that follow. </t>
<section title="Registration (OPTIONAL)" anchor="sec.registration">
<section title="Overview"><t>
In order for one IAX peer to be reachable by another IAX peer, the
calling peer needs the network address of the receiving peer. 
This address may be manually provisioned, determined through a shared directory, e.g. an ENUM-like service, 
<xref  target="RFC3761" /> or  configured using the IAX protocol. 
IAX provides a facility for one peer to register its address and
credentials with another so that callers can reach the registrant.  The IAX registration facility is optional.
If implemented, the IAX registration protocol MAY be done in parts, e.g., an analog telephone adapter MAY only implement the registrant portion of the protocol. 
</t>
<t>IAX allows user authentication via multiple methods. MD5 Message-Digest authentication <xref  target="RFC1321" /> uses an MD5 sum arrangement, but still requires that both ends have plaintext access to the secret. (See <xref  target="ie.md5_result" />.) Rivest, Shamir, and Adleman's (RSA) algorithm <xref  target="RFC3447" /> allows unidirectional secret knowledge through public/private key pairs. IAX Private keys SHOULD always be Triple Data Encryption
Standard (3DES) encrypted <xref  target="RFC1851" />. (See <xref  target="ie.rsa_result" />.)</t>
                        <figure anchor="fig.regstate" title="Registrant State Diagram">
<artwork><![CDATA[

                      ________________
                     |                |
                     |  Unregistered  |<--------------------------\
                     |________________|                           | 
                             |                                    |      
               /Init         |                                    |  
               ------------  |                                    | 
               snd REGREQ    |    +--------+                      |      
                             |    |        | rec REGAUTH          |                                    
                      _______V____V___     | -----------          |                                    
                     |                |    | snd REGREQ           |                                   
                     |   Reg Sent     +----+                      |                        
                     |________________+----------+                |                   
                             |    ^              | rec REGAUTH    |                        
                rec REGACK   |    |              | /No Credentials|                    
               ------------  |    | REG timeout  | -------------- |                  
                snd ack      |    | -------      | snd ack        |               
                             |    | REGREQ     __V___             |                  
                      _______V____|___        |      |            |                   
                     |                |       |  No  |            |                   
                     |   Registered   |       | Auth |            |
                     |________________|       |______|            |
                             |                   ^                |               
                             |                   | rec REGAUTH    |
                             | release           | /No Credentials|
                             | -------           | -------------- |
               +-------+     | snd REGREL        | snd ack        |
  rec REGAUTH  |       |     |                   |                |               
  -----------  |      _V_____V________           |                |                  
  snd REGREL   |     |                |----------+                |                   
               +-----+   Releasing    |---------------------------+                   
                     |________________|      rec ACK
                                             -------
                                                x
                                                        
                  __________
 rec  REGREJ     |          |
 ----------   *->| Rejected |
 snd   ack       |__________|
                               


                                ]]></artwork></figure>


<t>
Registration, illustrated in <xref target="fig.regstate"/>, is
performed by a registrant that sends a username and a registration
'refresh' period to the registrar. This is accomplished with a REGREQ
message. If authentication is required, the registrar responds with
the REGAUTH message that indicates the types of authentication supported by the registrar. In response,  the registrant resends a REGREQ with one of the supported authentications. If the registrant cannot authenticate, no further action is necessary. If accepted, the registrar sends a REGACK message, which MUST indicate the 'apparent address' and SHOULD indicate the 'refresh'/expire time. If no 'refresh' is sent, a default registration expiration of 60 seconds MUST be assumed by both peers. At any time during this exchange, the registrar may send a REGREJ message to indicate a failure.  
</t>
<t>A registration has a specified time period associated with it for which it is valid. This time period begins when the registrar sends a REGACK message. A registrant may extend that time period by repeating the registration process.
A registrant MAY also force an expiration in the registrar by sending the REGREL message. This message may be challenged with  REGAUTH or, if sufficient credentials were included, it will be accepted with  REGACK.  In response to a REGAUTH,  a REGREL message SHOULD be resent using the specified credentials. 
</t>
<t> See Sections <xref target="iax.cfd.registration"
                       format="counter"/>  and
  <xref target="iax.cfd.registrationrel" format="counter"/> for example call flows.
</t>


</section><section title="REGREQ Registration Request Message">


<t>The REGREQ occurs independently of any media-carrying call. A REGREQ MUST include the 'username' IE and SHOULD include the 'refresh' IE. A REGREQ is used both for an initial registration request as well as for a reply to a REGAUTH. As a reply to a REGAUTH message, it MUST include credentials such as a response to a REGAUTH's challenge.</t>

<t>Upon receipt of a REGREQ message that has credentials, a registrar MUST determine their validity. If valid, it MUST respond with a REGACK message indicating the time period for which this registration is valid. If the provided credentials are not valid or the registrar cannot validate the credentials, the registrar MUST respond with a REGREJ message. If credentials are not provided, the registrar MUST respond with a REGAUTH message that indicates the available authentication methods.  
</t>
<t>Registrants MUST implement this message and registrars MUST be able to process it.
</t>

<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies IEs for this message:</preamble>

<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Username</c><c><xref target="ie.username"/></c><c>Required</c><c></c>
<c>MD5 Result</c><c><xref target="ie.md5_result"/></c><c>Conditional</c><c>per REGAUTH</c>
<c>RSA Result</c><c><xref target="ie.rsa_result"/></c><c>Conditional</c><c>per REGAUTH</c>
<c>Refresh</c><c><xref target="ie.refresh"/></c><c>Optional</c><c></c>

</texttable>
<?rfc compact="yes"?>

</section>
<section title="REGAUTH Registration Authentication Response Message">
<t>A REGAUTH is a response to a REGREQ or REGREL. It is sent when a registrar requires authentication to permit registration. A REGAUTH message MUST include the 'authentication methods' and 'username' IEs, and the 'MD5 challenge' or 'RSA challenge' IE if the authentication methods include MD5 or RSA.</t>

<t>
Upon receipt of a REGAUTH message, the registrant MUST resend the REGREQ or REGREL message with one of the requested credentials, if it has the specified credentials.  
</t><t>Registrars  MUST implement this message and registrants MUST be able to process it.
</t>

<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies IEs for this message:</preamble>

<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>

<c>Username</c><c><xref target="ie.username"/></c><c>Required </c><c></c>
<c>Auth Methods</c><c><xref target="ie.authmethods"/></c><c>Required</c><c></c>
<c>Challenge</c><c><xref target="ie.challenge"/></c><c>Conditional</c><c>If RSA or MD5</c>
</texttable>
<?rfc compact="yes"?>
</section>

<section title="REGACK Registration Acknowledgment Message">
<t>A REGACK is sent in response to a REGREQ. A REGACK typically includes the 'refresh' IE specifying the number of seconds before the registration will expire. If the 'refresh' IE is not included with a REGACK, a default registration expiration of 60 seconds MUST be assumed. A REGACK MAY also include the 'username' and 'apparent address' IEs to indicate how the peer identifies the registrant. IEs related to caller identification or the time the registration occurred MAY be sent as well.</t>
<t>Receipt of a REGACK message requires an ACK in response.</t>
<t>Registrars MUST be able to send this message and registrants MUST be able to process it.
</t>
<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies IEs for this message:</preamble>

<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Username</c><c><xref target="ie.username"/></c><c>Required</c><c></c>
<c>Date Time</c><c><xref target="ie.datetime"/></c><c>Required </c><c></c>
<c>Apparent Address</c><c><xref target="ie.apparentaddr"/></c><c>Required </c><c></c>
<c>Message Count</c><c><xref target="ie.msgcount"/></c><c>Optional</c><c></c>
<c>Calling Number</c><c><xref target="ie.callingnum"/></c><c>Optional</c><c></c>
<c>Calling Name</c><c><xref target="ie.callingname"/></c><c>Optional</c><c></c>
<c>Refresh</c><c><xref target="ie.refresh"/></c><c>Optional</c><c></c>
</texttable>
<?rfc compact="yes"?>
</section>
<section title="REGREJ Registration Rejection Message">
<t>A REGREJ indicates that a registration request has been rejected. This rejection can occur for several reasons. A REGREJ MUST include the 'causecode' and 'cause' IEs to specify why registration was rejected.</t>

<t>Upon receipt of a REGREJ message, the registrant MUST consider registration process unsuccessful and no further interaction is required.  A peer MAY reinitiate the process at later time accounting for potential configuration changes on the registrar or registrant.
</t><t>Both registrants and registrars MUST be capable of sending and processing this message.
</t>
<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies IEs for this message:</preamble>

<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Cause</c><c><xref target="ie.cause"/></c><c>Required</c><c></c>
<c>Cause Code</c><c><xref target="ie.causecode"/></c><c>Required</c><c></c>
</texttable>
<?rfc compact="yes"?>

</section>
<section title="REGREL Registration Release Request Message">
<t>A REGREL is used by a registrant for a forced release of a prior registration. It MUST include the 'username' IE to identify the registrant to be released, and MAY include the 'causecode' and 'cause' IEs to specify why registration is being released. </t> 
<t>Upon receipt of this message, a peer MUST authenticate the sender using the provided credentials or send a REGAUTH message requesting them.  If authenticated, it MUST immediately purge its registration of the specified registrant or send a REGREJ message if the registration is not found.</t>
<t>Registrants SHOULD be capable of sending this message and registrars MUST be able to process it.</t>

<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies IEs for this message:</preamble>

<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Username</c><c><xref target="ie.username"/></c><c>Required</c><c></c>
<c>MD5 Result</c><c><xref target="ie.md5_result"/></c><c>Conditional</c><c>MD5 or RSA Result is required</c>
<c>RSA Result</c><c><xref target="ie.rsa_result"/></c><c>Conditional</c><c></c>
<c>Cause</c><c><xref target="ie.cause"/></c><c>Optional</c><c></c>
<c>Cause Code</c><c><xref target="ie.causecode"/></c><c>Optional</c><c></c>

</texttable>
<?rfc compact="yes"?>


</section>
</section>

<section title="Call Leg Management">
                        <figure anchor="fig.callstate_o" title="Call Origination State Diagram">
<artwork><![CDATA[

                                       +--------+  HANGUP/ack
                                       |        |
                          _____________|__      |  
                         |                |     | 
              +--------->|    Initial     |<----+ 
              |          |________________|<---------------------+                    
              |                  |                               ^
              |       start call |                               |                          
              |       ---------- |                               |          
              |       send NEW   |  +-------+                    |              
              |                  |  |       |  rec AUTHREQ       |                        
              |             _____V__V__     |  -----------       |                   
              |            |           |    |  snd AUTHREP       |                   
              +------------|  Waiting  |----+                    |                                 
      rec REJECT           |___________|------------------------>+
      ----------                  |                              |                         
        ack                       |              rec HANGUP      |                                     
                                  |              ---------       |                         
                                  |              snd ack         |                         
                                  |                              |                         
                    rec ACCEPT    |                              |                        
                    ----------    |   +------+                   |       
                    snd ack       |   |      | PROCEEDING / ack  |                        
                         _________V___V      | RINGING / ack     |                     
                        |              |     |                   |       
                        |     Linked   |-----+                   |       
                        |______________|------------------------>+                     
                                 |               rec HANGUP      |                                     
                    rec ANSWER   |               ----------      |                          
                    -----------  |               snd ack         |                         
                    snd ack      |                               |                        
                                 |                               |                       
                                 |               rec HANGUP      |        
                          _______V________       ---------       |       
                         |                |      snd ack         |                               
                         |      UP        |--------------------->+
                         |________________|--------------------->+
                                                 finish
                                                 ------
                                                 snd HANGUP
                                               
]]></artwork>
                        </figure>
                        <figure anchor="fig.callstate_t" title="Call Termination State Diagram">
<artwork><![CDATA[
                                              


                              +--------+ rec HANGUP/ack
                              |        |
                 _____________V__      | rec NEW(no Auth)/snd AUTHREQ
                |                |     | 
                |    Initial     |-----+ rec NEW(not Auth)/snd REJECT
                |                |       
                |________________|<--------------------+                                       
                        |                              |       
          rec NEW       |                              |
     (valid credentials)|                              |
          ----------    |   +------+                   |       
          snd ACCEPT    |   |      | snd PROCEEDING    |                        
               _________V___V      | snd RINGING       |                     
              |              |     |                   |       
              |     Linked   |-----+                   |       
              |              |       
              |______________|------------------------>+                     
                       |               rec HANGUP      |                                     
           /answered   |               ----------      |                          
          -----------  |               snd ack         |                         
          snd ANSWER   |                               |                        
                       |               rec HANGUP      |        
                _______V________       ---------       |       
               |                |       snd ack        |                               
               |      UP        |--------------------->+
               |________________|--------------------->+
                                       finish
                                       ------
                                       snd HANGUP
                                               
                                ]]></artwork>
                        </figure>

<section title="Overview"><t>
The IAX protocol can be used to set up 'links' or 'call legs' between two peers for the purposes of placing a call. 
The process, illustrated in <xref target="fig.callstate_o" /> and <xref target="fig.callstate_t" />, starts when a peer sends a NEW message indicating the destination 'number' (or name) of a Called Party on the remote peer. The remote peer can respond with either a credentials challenge (AUTHREQ), a REJECT message, or an ACCEPT message.   The AUTHREQ message indicates the permitted authentication schemes and SHOULD result in the sending of an AUTHREP message with the requested credentials. The REJECT message indicates the call cannot be established at this time. ACCEPT indicates that the call leg between these two peers is established and that higher-level call signaling (<xref target="sec.callctl"/>) MAY proceed.
 
After sending or receiving the ACCEPT message, the call leg is in the 'Linked' state and is used to pass call control messages until the call is completed. Further detail on messages used for this process can be found in <xref target="sec.callctl" />.
</t>
<t>Call legs are labeled with a pair of identifiers. Each end of the call leg assigns the source or destination identifier during the call leg creation process.
</t>
</section>

<section title="NEW Request Message" anchor='sec.new'>
<t>A NEW message is sent to initiate a call. It is the first call-specific message sent to initiate an actual media exchange between two peers. 'NEW' messages are unique compared to other Call Supervision messages in that they do not require a destination call identifier in their header. This absence is because the remote peer's source call identifier is not created until after receipt of this frame. Before sending a NEW message, the local IAX peer MUST assign a source call identifier that is not currently being used for another call. A time-stamp MUST also be assigned for the call, beginning at zero and incrementing by one each millisecond. Sequence numbers for a NEW message, described in the transport section, (<xref target="sec.transport"/>)
 are both set to 0.</t>


<t>A NEW message MUST include the 'version' IE, and it MUST be the first IE; the order of other IEs is unspecified. A NEW SHOULD generally include IEs to indicate routing on  the remote peer, e.g., via the 'called number' IE or to indicate a peer partition or ruleset, the 'called context' IE. Caller identification and CODEC negotiation IEs MAY also be included.</t>

<t>
Upon receipt of a NEW message, the receiving peer examines the destination and MUST perform one of the following actions: 
<list>
<t>Send a REJECT response,</t>
<t>Challenge the caller with an AUTHREQ response, </t>
<t>Accept the call using an ACCEPT message, or</t>
<t>Abort the connection using a HANGUP message, although the REJECT message is preferred at this point in call.</t>
</list>
If the call is accepted,  the peer MUST progress the call and 
further respond with one of PROCEEDING, RINGING, BUSY, or ANSWER depending on the status of the called party on the peer.  See <xref target="sec.callctl"/> for further details.
</t>
<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies IEs for the NEW message:</preamble>

<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Version</c><c><xref target="ie.version"/></c><c>Required</c><c></c>
<c>Called Number</c><c><xref target="ie.callednumber"/></c><c>Required</c><c></c>
<c>Auto Answer</c><c><xref target="ie.autoanswer"/></c><c>Optional</c><c></c>
<c>Codecs Prefs</c><c><xref target="ie.codecs"/></c><c>Required</c><c></c>
<c>Calling Presentation</c><c><xref target="ie.callingpres"/></c><c>Required</c><c></c>
<c>Calling Number</c><c><xref target="ie.callingnum"/></c><c>Optional</c><c></c>
<c>Calling TON</c><c><xref target="ie.callington"/></c><c>Required </c><c></c>
<c>Calling TNS</c><c><xref target="ie.callingtns"/></c><c>Required </c><c></c>
<c>Calling Name</c><c><xref target="ie.callingname"/></c><c>Optional</c><c></c>
<c>ANI</c><c><xref target="ie.ani"/></c><c>Optional</c><c></c>
<c>Language</c><c><xref target="ie.language"/></c><c>Optional</c><c></c>
<c>DNID</c><c><xref target="ie.dnid"/></c><c>Optional</c><c></c>
<c>Called Context</c><c><xref target="ie.calledctx"/></c><c>Conditional</c><c>'Default' assumed if IE excluded</c>
<c>Username</c><c><xref target="ie.username"/></c><c>Optional</c><c></c>
<c>RSA Result</c><c><xref target="ie.rsa_result"/></c><c>Conditional </c><c>If challenged with RSA</c>
<c>MD5 Result</c><c><xref target="ie.md5_result"/></c><c>Conditional </c><c>If challenged with MD5</c>
<c>Format</c><c><xref target="ie.format"/></c><c>Required </c><c></c>
<c>Capability</c><c><xref target="ie.capability"/></c><c>Conditional</c><c></c>
<c>ADSICPE</c><c><xref target="ie.adsicpe"/></c><c>Optional </c><c></c>
<c>Date Time</c><c><xref target="ie.datetime"/></c><c>Optional</c><c>Suggested</c>
<c>Encryption</c><c><xref target="ie.encrypt"/></c><c>Optional</c><c></c>
<c>OSP Token</c><c><xref target="ie.osp"/></c><c>Optional</c><c></c>

</texttable>
<?rfc compact="yes"?>


</section>


<section title="ACCEPT Response Message" anchor='sec.accept'>
<t>An ACCEPT response is issued when a NEW message is received, and
  authentication has taken place (if required). It acknowledges
  receipt of a NEW message and indicates that the call leg has been
  set up on the terminating side, including assigning a CODEC. An ACCEPT message MUST include the 'format' IE to indicate its desired CODEC to the originating peer. The CODEC format MUST be one of the formats sent in the associated NEW command. 
</t><t>
Upon receipt of an ACCEPT, an ACK MUST be sent and the CODEC for the call MAY be configured using the 'format' IE from the received ACCEPT. The call then waits for an ANSWER, HANGUP, or other call control signal. (See <xref target="sec.callctl"/>.) If a subsequent ACCEPT message is received for a call that has already started, or has not sent a NEW message, the message MUST be ignored. 
</t>

<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies IEs for this message:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Format</c><c><xref target="ie.format"/></c><c>Required </c><c></c>
</texttable>
<?rfc compact="yes"?>
</section>

<section title="REJECT Response Message" anchor='sec.reject'>
<t>A REJECT response is sent to indicate that a NEW, AUTHREP, DIAL, or ACCEPT request has been denied. It MAY be due to an authentication failure, an invalid username, or if a peer cannot provide a valid password or response to an issued challenge. It MAY also be used to notify a peer of a call setup failure, e.g., when IAX peers cannot negotiate a CODEC to use.  Upon receipt of a REJECT message, the call leg is destroyed and no further action is required. (Note: REJECT messages require an explicit ACK.)</t>

<t>REJECT messages MAY include the 'causecode' and 'cause' IEs to indicate the rejection reason.</t>

<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies IEs for this message:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Cause</c><c><xref target="ie.cause"/></c><c>Optional</c><c></c>
<c>Cause Code</c><c><xref target="ie.causecode"/></c><c>Optional</c><c></c>
</texttable>
<?rfc compact="yes"?>
</section>

<section title="HANGUP Request Message" anchor='sec.hangup'>
<t>A HANGUP message is sent by either peer and indicates a call tear-down. It MAY include the 'causecode' and 'cause' IEs to indicate the reason for terminating the call. Upon receipt of a HANGUP message, an IAX peer MUST immediately respond with an ACK, and then destroy the call leg at its end. After a HANGUP message has been received for a call leg, any messages received that reference that call leg (i.e., have the same source/destination call identifiers) MUST be answered with an INVAL message. This indicates that the received message is invalid because the call no longer exists.</t>
<t>After sending a HANGUP message, the sender MUST destroy the call and respond to subsequent messages regarding this call with an INVAL message.</t>
<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies IEs for this message:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Cause</c>         <c><xref target="ie.cause"/></c>          <c>Optional</c><c></c>
<c>Cause Code</c><c><xref target="ie.causecode"/></c><c>Optional</c><c></c>
</texttable>
<?rfc compact="yes"?>
</section>
<section title="AUTHREP Authentication Reply Message">
<t>An AUTHREP MUST include the appropriate challenge response or password IE, and is only sent in response to an AUTHREQ. An AUTHREP requires a response of either an ACCEPT or a REJECT.</t>
<t>Typical reasons for rejecting an AUTHREP include  'destination does not exist' and 'suitable bearer not found'.
</t>
<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies IEs for this message:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>RSA Result</c><c><xref target="ie.rsa_result"/></c><c>Conditional </c><c>If RSA</c>
<c>MD5 Result</c><c><xref target="ie.md5_result"/></c><c>Conditional </c><c>If MD5</c>
</texttable>
<?rfc compact="yes"?>
</section>

<section title="AUTHREQ Authentication Request Message">
<t>The AUTHREQ message is sent in response to a NEW message if authentication is required for the call to be accepted. It MUST include the 'authentication methods' and 'username' IEs, and the 'challenge' IE if MD5 or RSA authentication is specified.</t>
<t> Upon receiving an AUTHREQ message, the receiver MUST respond with an AUTHREP or HANGUP message. 
</t>
<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies IEs for this message:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Username</c><c><xref target="ie.username"/></c><c>Required</c><c></c>
<c>Auth Methods</c><c><xref target="ie.authmethods"/></c><c>Required</c><c></c>
<c>Challenge</c><c><xref target="ie.challenge"/></c><c>Required</c><c></c>
</texttable>
<?rfc compact="yes"?>
</section>
</section>


<section title="Call Control" anchor="sec.callctl">
<section title="Overview"><t>
IAX's call control messages provide end-to-end signaling functions common to other telephony control protocols.  The messages include RINGING, ANSWER, BUSY, and PROCEEDING.
These messages MUST only be sent after an IAX call leg has been ACCEPTed. 
</t><t> 
In response to an exchange starting with a NEW message, typically, the first call control message is RINGING; however, a PROCEEDING message MAY precede it or the call MAY proceed directly to the ANSWER message. If the call is answered, an ANSWER message will be sent. Other possibilities include a "BUSY" indication, or if the called party's service cannot be reached, the call will be torn down using the link-level HANGUP and an appropriate cause code. 
</t><t> 
If the link was started with a DIAL message, the sequence is an optional PROCEEDING, then optional RINGING, then ANSWER or BUSY. Of course, a link level HANGUP MAY occur at any time. 
</t><t> 
Various private extensions to IAX Control messages have been deployed
for passing application-specific data over the IAX control link.  One such extension is an application that controls ham radio transceivers.  An IAX peer that receives a control message that is not understood MUST respond with the UNSUPPORT message.
</t><t> 
The mandatory IAX control messages are explained below.
</t></section>
<section title="PROCEEDING Response Message">
<t>The PROCEEDING message SHOULD be sent to a calling party when their call request is being processed by a further network element but has not yet reached the called party. 
</t><t> 
Upon receipt of a PROCEEDING message, the peer SHOULD perform
protocol-specific actions to indicate this fact to the calling party,
e.g., tones, an ISUP (ISDN User Part) Proceeding message, etc. If the prior call leg is utilizing the IAX protocol, a PROCEEDING message MUST be sent to that peer.  The processing of this message at an originating or transcoding peer is not specified; however, if possible, the status may be displayed to the calling party.
</t><t> The PROCEEDING message does not require any IEs.
</t></section>
<section title="RINGING Response Message"><t>
This message is sent from a terminating party to indicate that the called party's service has processed the call  request and is being alerted to the call.  An IAX RINGING message MUST be sent to an IAX-based calling party when the peer determines that the called party is being alerted, e.g., when their phone is ringing. 
</t><t> 
Upon receipt of an IAX RINGING message, the peer MUST pass this indication to the calling party, unless the calling party has already received such indication.  For an initiating peer, this is typically done by starting the ring-back tone; however, many implementations start ring-back before ringing in order to meet user expectations. If the calling party is using the IAX protocol, a RINGING message MUST be passed to this caller.
</t><t> The RINGING message does not require any IEs.
</t></section>
<section title="ANSWER Response Message"><t>
This message is sent from the called party to indicate that the party has accepted the call request and is communicating with the calling party. Upon receipt of this message, any ring-back or other progress tones MUST be terminated and the communications channel MUST be opened. 
</t><t> The ANSWER message does not require any IEs.
</t></section>
</section>
<section title="Mid-Call Link Operations">
<section title="FLASH Request Message">
<t>The FLASH message is sent to indicate a mid-call feature.  Its interpretation is system dependent and if it is not expected, it SHOULD be ignored.  Typically, this message is only sent from analog telephone adapters when a brief circuit interruption is made during an answered call. 
</t><t> The FLASH message does not require any IEs.
</t></section>
<section title="HOLD Request Message"> 
<t>The HOLD message is sent to cause the remote system to stop transmitting audio on this channel, and optionally replace the audio with music or other sounds. If the remote system cannot perform this request, it SHOULD be ignored. 
</t><t>The HOLD message SHOULD only be sent in IAX calls that are started using the DIAL message.
</t><t> The HOLD message does not require any IEs.
</t></section>
<section title="UNHOLD Request Message"> 
<t>The UNHOLD message is sent to cause the remote system to resume transmitting audio on this channel. If the remote system cannot perform this request, it SHOULD be ignored. 
</t><t>The UNHOLD message SHOULD only be sent in IAX calls after the HOLD message.
</t><t> The UNHOLD message does not require any IEs.
</t></section>
<section title="QUELCH Request Message">
<t>The QUELCH message is sent to cause the remote peer to squelch or stop transmitting audio on this channel. 
It MAY replace the audio sent to the further party with music or other sounds. If the remote system cannot perform this request, it SHOULD be ignored. 
</t><t>The QUELCH message MUST only be sent in IAX calls after an ACCEPT is sent or received; it SHOULD only be used on calls that are started using the NEW message.
</t><t> The QUELCH message does not require any IEs.
</t></section>
<section title="UNQUELCH Request Message">
<t>The UNQUELCH message is sent to cause the remote system to resume transmitting audio on this channel. If it previously replaced the audio with music or other sounds, it MUST discontinue it immediately. If the remote system cannot perform this request, it SHOULD be ignored. 
</t><t>The UNQUELCH message SHOULD only be sent in IAX calls after the QUELCH message. 
</t><t> The UNQUELCH message does not require any IEs.
</t></section>
<section title="TRANSFER Request Message" anchor='sec.transfer'><t>
The TRANSFER message causes the receiving peer to restart the call using another specified number. The receiving peer MUST be on the calling side of this call leg and the new call behavior is unspecified.  After processing this message,  a HANGUP message SHOULD be sent and the call leg torn down.
</t><t>
When sending a TRANSFER message, the new number to which the call is being transferred MUST be included in the CALLED_NUMBER IE and a CALLED_CONTEXT IE MAY be included.  The call leg MUST NOT be used for anything else and MAY be torn down. 
</t>
<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies IEs for this message:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Called Number</c><c><xref target="ie.callednumber"/></c><c>Required</c><c></c>
<c>Called Context</c><c><xref target="ie.calledctx"/></c><c>Optional</c><c>Use this IE if context is other than default.</c>
</texttable>
<?rfc compact="yes"?>

</section>
</section>
<section title="Call Path Optimization"><t>
If a peer is handling a call between two other IAX peers and the peer no longer has any need to monitor the progress, content, or duration of the call, it MAY remove itself from the call by directing the other two peers to communicate directly.  This call path optimization, or "supervised transfer", is done in a manner that ensures the call will not be lost in the process;  the initiating peer does not give up control of the process until it has confirmed the other two peers are communicating.  Note: the parties involved in the call are not aware of this operation; it is purely a network operation.
</t>

<figure anchor="fig.txstate" title="Call Path Optimization State Diagram">
<artwork><![CDATA[

                                                                                                                
                              ________________     
     rec  TXREJ              |                |     rec TXREL                             
     ----------   *--------->|      None      |<-----------------+                        
     snd  TXREJ              |________________|        ack       ^                     
     to other                  |           |                     |                    
                               |           V                     |                    
                               |                                 |                    
                               |           *   (From All)        |                                
                /Init Transfer |           | rec TXREQ           |                             
                 ------------  |           | ---------           |                
                   snd TXREQ   |           | snd TXCNT           |                             
                   to both     |           |                     |                    
                              _v___________v__                   |        
                             |                |                  |         
                             |     Begin      |----------------->+         
                             |________________|                  |         
                               |           |                     |                    
                     rec TXACC |           | rec TXREADY         |                  
                     --------- |           | ---------           |                
                   snd TXREADY |           |     x               |            
                               |           |                     |                    
                              _v___________v__                   |        
                             |                |----------------->+         
                   ----------|     Ready      |----------        |                   
                  |          |________________|          |       |                    
                  |                   |                  |       |                    
  /Both Legs Ready|   /Both Legs Ready|       rec TXMEDIA|       |                    
and not media-only|    and media-only |                  |       |                    
    ------------  |    ------------   |       -----------|       |                    
    snd TXREL     |     snd TXMEDIA   |            x     |       |                    
                  |                   |                  |       |                    
              ____V____          _____V___            ___V_____  |                         
             |         |        |         |          |         | |                          
             | Release |        |  Media  |          | Media   | |                          
             |_________|        |_________|          |  Pass   | |     
                                      |              |_________| |
                                      |                  |       | 
                                      V                  V       | 
 rec  TXCNT                           +------------------------->+
 ----------  (In any state)
 snd  TXACC



]]></artwork>
</figure>
<t>
When a peer initiates this procedure, both call legs MUST be in the UP state, i.e., they MUST have sent or received the ACCEPT message for that call leg. To start, it sends a TXREQ message with the addresses and information from the other remote peers to each its neighbors. If capable of performing this procedure, they begin transmitting all channel information to both the initiating peer and the new remote peer.  They also send a TXCNT message indicating packet counts for the call leg to the new remote peer. Each TXCNT message is acknowledged with a TXACC message.  The peers respond by sending a TXREADY message to the initiator indicating that they have confirmed the new communications path.  When all remote peers have sent the initiator a TXREADY message, the transfer is successful and the initiator responds with a TXREL and has finished its involvement with the call. If during the transfer process, the two remote peers cannot communicate,  they send a TXREJ message to the initiator. An example is shown in <xref target="exam.xfer"/>.
</t><t>
These messages are described in the sections that follow:</t>
<section title="TXREQ Transfer Request Message"><t>
The TXREQ message is sent by a peer to initiate the transfer process.  When sent, it MUST be sent to both adjacent peers involved in the call. 
</t>
<?rfc compact="no" ?>
<texttable>
<preamble>It MUST include the following Information Elements:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Apparent Address</c><c><xref target="ie.apparentaddr"/></c><c>Required</c><c></c>
<c>Call Number</c><c><xref target="ie.callno"/></c><c>Required</c><c></c>
<c>Transfer ID</c><c><xref target="ie.transferid"/></c><c>Required</c><c></c>
</texttable>
<?rfc compact="yes"?>
<t>
The Apparent Address is the IP address data structure address for the other remote peer.
The Call Number IE is the callid used by the other remote peer and the Transfer ID is a unique number assigned by the initiator.
</t><t>
Upon receipt of a TXREQ message for a valid call from the corresponding remote peer, a peer MUST respond by attempting to communicate with the newly specified remote peer.  This task is accomplished 
by sending a TXCNT message directly to the peer at the address specified in the Apparent Address parameter.

</t></section>

<section title="TXCNT Transfer Connectivity Response Message"><t>
The TXCNT message is used to verify connectivity with a potential replacement peer for a call. It MUST include the TRANSFERID IE.  Upon receipt on a message of this type, and if the peer has previously  received a TXREQ for this call leg, the peer MUST respond with a TXACC message.
</t><t>If the TXCNT message is not successfully transmitted or if a TXACC message is not received in response to it, the transfer process MUST be aborted by sending a TXREJ message to the initiating host.
</t>
<?rfc compact="no" ?>
<texttable>
<preamble>It MUST include the following Information Element:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Transfer ID</c><c><xref target="ie.transferid"/></c><c>Required</c><c>A unique number assigned by the initiator.</c>
</texttable>
<?rfc compact="yes"?>
</section>

<section title="TXACC Response Message"><t>
Like the TXCNT message, the TXACC message is used to verify connectivity with a potential replacement peer. It MUST include the TRANSFERID IE.  Upon receipt on a message of this type if the peer is attempting to transfer this call leg, the peer stops sending call-related media to the initiating peer and sends a TXREADY message to it. 
</t>
<?rfc compact="no" ?>
<texttable>
<preamble>It MUST include the following Information Element:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Transfer ID</c><c><xref target="ie.transferid"/></c><c>Required</c><c>A unique number assigned by the initiator.</c>
</texttable>
<?rfc compact="yes"?>
</section>
<section title="TXREADY Transfer Ready Response Message" anchor='sec.txready'><t>
The TXREADY message indicates that the sending peer has verified connectivity with the peer which it was instructed to transfer the call.  It MUST include the TRANSFERID IE. When TXREADY messages are received from both remote peers, it MUST discontinue media transport and send a TXREL message to each peer. 
</t>
<?rfc compact="no" ?>
<texttable>
<preamble>It MUST include the following Information Element:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Transfer ID</c><c><xref target="ie.transferid"/></c><c>Required</c><c>A unique number assigned by the initiator.</c>
</texttable>
<?rfc compact="yes"?>
</section>
<section title="TXREL Transfer Release Response Message"><t>
The TXREL message indicates that the transfer process has successfully
completed. After sending and upon receipt of this message, no further
interaction (other than an ACK, of course) is needed between the peers
on this call leg.  The TXREL is also used to revert a split-media call (one where the media and signaling follow different paths) to a call where the media and signaling follow the same path.
</t>
<?rfc compact="no" ?>
<texttable>
<preamble>It MUST include the following Information Element:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Call Number</c><c><xref target="ie.callno"/></c><c>Required</c><c></c>
</texttable>
<?rfc compact="yes"?>

</section>
<section title="TXMEDIA Transfer Media Message"><t>
The TXREL message indicates that the MEDIA transfer process has successfully completed. After sending and upon processing of this message, Full Frames MUST continue to follow 
the original signaling path and media frames MUST follow the newly negotiated path.  
This split-path process continues until the call ends with a HANGUP or peer receives a TXREL message for the call leg. A peer MAY force the paths to rejoin by sending a TXREL message.

</t>
<?rfc compact="no" ?>
<texttable>
<preamble>It MUST include the following Information Element:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Call Number</c><c><xref target="ie.callno"/></c><c>Required</c><c></c>
</texttable>
<?rfc compact="yes"?>

</section>
<section title="TXREJ Transfer Rejection Response Message"><t>
The TXREJ MAY be sent at anytime during the transfer process to indicate that the transfer cannot proceed. Upon receiving a TXREJ message, if the receiver is the initiating peer, it MUST form a TXREJ message and send it to the other remote peer.  
</t><t>The TXREJ message does not require any IEs.
</t></section></section>

<section title="Call Tear Down"><t>
The messages used to finish a call vary depending on the particular process the call is in at the time.  The terminal messages for a call are:
<list>
<t>HANGUP. See <xref target='sec.hangup'/>.</t>
<t>REJECT. See <xref target='sec.reject'/>.</t>
<t>TRANSFER. See <xref target='sec.transfer'/>.</t>
<t>TXREADY. See <xref target='sec.txready'/>.</t>
</list>
These messages are discussed in their respective sections. Also, if the reliable transport procedures determine that messaging cannot be maintained,  the call leg MUST be torn down without any other indications over the errant IAX call leg.
</t></section>


<section title="Network Monitoring"><t>
The IAX protocol has various tools to determine the network load.  It uses the POKE message to monitor reachability of remote peer and the LAGRQ message to measure the quality of a current call leg including the jitter buffer delay. </t>
<section title="POKE Request Message">
<t>A POKE message is sent to test connectivity of a remote IAX peer. It is similar to a PING message, except that it MUST be sent when there is no existing call to the remote endpoint. It MAY also be used to "qualify" a user to a remote peer, so that the remote peer can maintain awareness of the state of the user. A POKE MUST have 0 as its destination call number.</t>
<t>Upon receiving a POKE message,  the peer MUST respond with a PONG message.</t>
<t>This message does not require any IEs.</t>
</section>
<section title="PING Request Message">
<t>A PING message is sent to test connectivity of the remote IAX endpoint on an existing call. Transmission of a PING MAY occur when a peer-defined number of seconds have passed without receiving an incoming media frame on a call, or by default every 20 seconds. Receipt of a PING requires an acknowledging PONG be sent.</t>
<t>This message does not require any IEs.</t>
                </section>
<section title="PONG Response Message">
<t>A PONG message is a response to a PING or a POKE. It acknowledges the connection.  The receiver uses the time-stamp of the received PING or POKE and its times to determine the Round Trip Time of the connection. Several receiver report IEs MAY be included with a PONG, including received jitter, received frames, delay, and dropped frames. Receipt of a PONG requires an ACK.</t>
<t>This message does not require any IEs.</t>
                </section>
<section title="LAGRQ Lag Request Message">
<t>A LAGRQ is a lag request. It is sent to determine the lag between two IAX endpoints, including the amount of time used to process a frame through a jitter buffer (if any). It requires a clock-based time-stamp, and MUST be answered with a LAGRP, which MUST echo the LAGRQ's time-stamp. The lag between the two peers can be computed on the peer sending the LAGRQ by comparing the time-stamp of the LAGRQ and the time the LAGRP was received.</t>
<t>This message does not require any IEs.</t>
</section>
<section title="LAGRP Lag Response Message">
<t>A LAGRP is a lag reply, sent in response to a LAGRQ message. It MUST send the same time-stamp it received in the LAGRQ after passing the received frame through any jitter buffer the peer has configured.</t>
<t>This message does not require any IEs.</t>
</section>
</section>

<section title="Digit Dialing"><t>
Digit Dialing support is an optional portion of the IAX protocol designed to support devices that do not maintain their own dial plans, for instance, analog telephone adapters, or ATAs. The dialing portion of the IAX protocol MAY be implemented for the client/phone-side, server-side or not all. The exchanges work as a series of Dialing Plan requests (DPREQs) each followed by a response (DPREP) indicating if additional digits SHOULD be collected before sending the call. The sections that follow describe these messages and the rules associated with them. 
</t>
<section title="DPREQ Dial Plan Request Message">
<t>A DPREQ is a request for the server to analyze the passed called number and determine if there is a valid dialing pattern on the remote peer. It MUST include the 'called number' IE to specify what extension is being queried. This command is used in the case where a local peer does not handle its own dialplan/extension switching. The local peer can inquire (as a user dials) how the remote peer perceives the 'called number'. If a DPREP is received indicating that the number is valid, a DIAL MAY be sent.</t>

<t>This message MAY be sent by the client and MUST be implemented on servers which provide IAX dialing support. 
</t>
<?rfc compact="no" ?>
<texttable>
<preamble>It MUST include the following Information Element:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Call Number</c><c><xref target="ie.callno"/></c><c>Required</c><c></c>
</texttable>
<?rfc compact="yes"?>
</section>
<section title="DPREP Dial Plan Response Message">
<t>A DPREP is a reply to a DPREQ, containing the status of the dialplan entry requested in the 'called number' IE of the DPREQ. It MUST include the 'called number', 'dpstatus', and 'refresh' IEs. The called number is the same one received in the 'called number' IE of the DPREQ. The 'dpstatus' IE contains the status of the dialplan entry referenced by the received called number.  The status indicates whether the called number exists, can exist, needs more digits, or is invalid.  More information can be found in <xref target="iax.ies" /> under the DPSTATUS information element. The 'refresh' IE specifies the number of minutes the 'dpstatus' is valid. If the 'refresh' IE is not present, a default 10 minutes period is assumed.</t>

<t>The sending of this message MUST be implemented by servers which support IAX dialing. Clients which  support IAX dialing MUST be capable of receiving such messages.
</t>
<?rfc compact="no" ?>
<texttable>
<preamble>It MUST include the following Information Elements:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Call Number</c><c><xref target="ie.callno"/></c><c>Required</c><c></c>
<c>Dial Plan Status</c><c><xref target="ie.callno"/></c><c>Required</c><c>Indicates if number exists, is a partial match, etc.</c>
<c>Dial Plan Refresh</c><c><xref target="ie.callno"/></c><c>Optional</c><c>Inclusion is strongly suggested.  The default is 10 minutes.</c>
</texttable>
<?rfc compact="yes"?>

</section>
<section title="DIAL Request Message">
<t>The DIAL message is used with IAX peers that do not maintain their own dialplan/extension routing. Once an extension is validated by one or more DPREQ/DPREP exchanges, the number MAY be dialed in a DIAL message, using the 'called number' IE to specify the extension it is attempting to reach. The remote peer then handles the remaining aspects of call setup, including ringing the extension and notifying the local peer when it has been answered following the same requirements as the NEW command (<xref target='sec.new'/>).</t>
<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies the IEs used by this message:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>Called Number</c><c><xref target="ie.callednumber"/></c><c>Required</c><c></c>
<c>Called Context</c><c><xref target="ie.calledctx"/></c><c>Optional</c><c>Use this IE if context is other than default.</c>
</texttable>
<?rfc compact="yes"?>
</section>

</section>

<section title="Miscellaneous">
<section title="ACK: Acknowledgement Message">
<t>An ACK acknowledges the receipt of an IAX message. An ACK is sent
  upon receipt of a Full Frame that does not have any other protocol-defined response. An ACK MUST have both a source call number and destination call number. 
It MUST also not change the sequence number counters, and MUST return the same time-stamp it received. This time-stamp allows the originating peer to determine to which message the ACK is responding. Receipt of an ACK requires no action.</t>

<t>An ACK MAY also be sent as an initial acknowledgment of an IAX message that requires some other protocol-defined message acknowledgment, as long as the required message is also sent within some peer-defined amount of time. This allows the acknowledging peer to delay transmission of the proper IAX message, which may add security against brute-force password attacks during authentication exchanges.</t>

<t>When the following messages are received, an ACK MUST be sent in return: NEW, HANGUP, REJECT, ACCEPT, PONG, AUTHREP, REGREL, REGACK, REGREJ, TXREL.  ACKs SHOULD not be expected by any peer and their purpose is purely to force the transport layer to be up to date. </t>
<t>The ACK message does not requires any IEs.</t>
</section>
<section title="INVAL: Invalid Response Message">
<t>An INVAL is sent as a response to a received message that is not
  valid. This occurs when an IAX peer sends a message on a call after
  the remote peer has hung up its end. Upon receipt of an INVAL, a peer MUST destroy its side of a call.</t>
<t>The INVAL message does not requires any IEs.</t>
</section>
<section title="VNAK: Voice Negative Acknowledgement Message">
<t>A VNAK is sent when a message is received out of order, particularly when a Mini Frame is received before the first full voice frame on a call. It is a request for retransmission of dropped messages. A message is considered out of sequence if the received iseqno is different than the expected iseqno. On receipt of a VNAK, a peer MUST retransmit all frames with a higher sequence number than the VNAK message's iseqno.</t>
<t>The VNAK message does not requires any IEs.</t>
</section>
<section title="MWI: Message Waiting Indicator Request Message">
<t>An MWI message is used to indicate to a remote peer that it has one or more messages waiting. It MAY include the 'msgcount' IE to specify how many messages are waiting.</t>
<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies IEs used by this message:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>MSGCOUNT</c><c><xref target='ie.msgcount'/></c><c>Optional</c><c>Suggested</c>
</texttable>
<?rfc compact="yes"?>
</section>
<section title="UNSUPPORT Unsupported Response Message">
<t>An UNSUPPORT message is sent in response to a message that is not supported by an IAX peer. This occurs when an IAX command with an unrecognized or unsupported subclass is received. No action is required upon receipt of this message, though the peer SHOULD be aware that the message referred to in the optionally included 'IAX unknown' IE is not supported by the remote peer.</t>
<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies IEs used by this message:</preamble>
<ttcol>IE</ttcol><ttcol>Section</ttcol><ttcol>Status</ttcol><ttcol>Comments</ttcol>
<c>UNKNOWN</c><c><xref target='ie.unknown'/></c><c>Optional</c><c>Suggested</c>
</texttable>
<?rfc compact="yes"?>
</section>
</section>
<section title="Media Messages"><t>
The IAX protocol supports many types of media and these are transported through the same UDP port as other IAX messages. Voice and video are unique in that they utilize two different encodings, each with different support procedures. 
Abbreviated 'Mini Frames' are normally used for audio and video; however, each time the time-stamp is a multiple of 32,768 (0x8000 hex), a standard or 'Full Frame' MUST be sent.  This approach facilitates efficiency and reliability by sending compressed packets, without guaranteed delivery, most of the time while periodically forcing reliable exchanges with the peer. If communication fails, call tear-down procedures are invoked.
</t><t> Upon receiving any media message, except the abbreviated audio and video Mini Frames, an ACK message MUST be sent. 
The content SHOULD be passed to an associated application, device, or call leg.  The data MAY be buffered before it is presented to the user.
</t>
<section title="DTMF Media Message">
<t>The message carries a single digit of DTMF (Dual Tone Multi-Frequency). Useful background information about DTMF can be found in <xref target="RFC4733" /> and <xref target="RFC4734" />, but, note that IAX does not use the RTP protocol.</t>
</section>
<section title="Voice Media Message">
<t>The message carries voice data and indicates the CODEC used. </t>
</section>
<section title="Video Media Message">
<t>The frame carries video data and indicates the video format of the data.</t>
</section>
<section title="Text Media Message">
<t>The frame carries a text message in UTF-8 <xref target="RFC3629" /> format.</t>
</section>
<section title="Image Media Message">
<t>This message carries a single image. The image MUST fit in one message in this version of the protocol. </t>
</section>
<section title="HTML Media Message">
<t>The HTML message class carries HTML and related data as well as status about the display of that HTML page. The subclass parameter indicates the HTML content type.  
It MAY be a URL, the start, middle, or end of a data block.
HTML data MUST be in the format described in <xref target="html401" />.

</t><t>
If a peer receives an HTML message for a channel that does not support HTML, it MUST respond with an HTML message that has the HTML NOT SUPPORTED indication. 
</t><t>
When a device that supports HTML completes loading the page,  it SHOULD send a LOAD COMPLETE message 
</t>
</section>
<section title="Comfort Noise  Media Message">
<t>This message indicates that comfort noise SHOULD be played. It has a parameter that indicates the level.  The noise is to be locally generated.</t>

</section></section>
</section>


<section title="Message Transport" anchor='sec.transport'>
<t>IAX is sent over UDP and uses an application-level protocol to provide reliable transport where needed. </t>
<t>
With respect to transport, there are two message formats: reliable or 'Full Frames' and unacknowledged  'Mini' or 'Meta' frames.  All messages except certain voice and video messages are reliable.  Reliable messages are transported by a scheme that maintains message counts and time-stamps for both peers involved in the call. The counts are per call. Each peer maintains a timer for all reliable messages and MUST periodically retransmit those messages until they acknowledge or the retry limit is exceeded. 
</t><t>
When starting a call, the outgoing and incoming message sequence numbers MUST both be set to zero. Each reliable message that is sent increments the message count by one except the ACK, INVAL, TXCNT, TXACC, and VNAK messages, which do not change the message count. The message includes the outgoing message count and the highest numbered incoming message that has been received.  
In addition, it contains a time-stamp that represents the number of milliseconds since the call started. Or, in the case of certain network timing messages, it contains a copy of the time-stamp sent to it.   Time-stamps MAY be approximate, but, MUST be in order. 

</t><t>
When any message is received, the time-stamps MUST be checked to make sure that they are in order. If a message is received out of order,  it MUST be ignored and a VNAK message sent to resynchronize the peers.  If the message is a reliable message, the incoming message counter MUST be used to acknowledge all the messages up to that sequence number that have been sent. 
</t><t>If no acknowledgment is received after a locally configured number of retries (default 4), the call leg SHOULD be considered unusable and the call MUST be torn down without any further interaction on this call leg. 
</t>

<section title="Trunking" anchor="sec.trunking">
<t>IAX allows multiple media exchanges between the same two peers to be multiplexed into a single trunk call coalescing media payload into a combined packet. This decreases bandwidth usage as there are fewer total packets being transmitted. Trunking MAY occur in one or both directions of an IAX exchange. A trunk consists of a trunk header and one or more trunked IAX calls. The trunk message contains a time-stamp specifying the time of transmission of the trunk frame. The audio data from the trunked calls are encapsulated in the trunk frame following the header. Each trunked call consists of two octets specifying the call's source number, two octets specifying the length in octets of the media data, and the media data itself. IAX permits transmitting the time-stamps of each encapsulated Mini Frame as well, so that accurate timing information can be used for jitter buffers, etc. A flag in the meta command header specifies whether the encapsulated Mini Frames retain their original time-stamps. If they do not retain them, they MUST assume the time-stamp in the trunk header upon being received by the trunk peer.</t>
</section>



<section title="Timers"><t>
There are various timers in the IAX protocol. There are other application-level timers, such as the call timer and ring timer, that are beyond the scope of this document. This section describes the IAX timers and specifies their default values and behaviors. 
</t>
<section title="Retransmission Timer"><t>
The message retransmission procedures are described in <xref target="sec.transport"/>.  On each call, there is a timer for how long to wait for an acknowledgment of a message.  
This timer starts at twice the measured Round-Trip Time from the last PING/PONG command. If a retransmission is needed, it is exponentially increased until it meets a boundary value.  The maximum retry time period boundary is 10 seconds. 
</t></section>
<section title="Registration Period Timer"><t>
Registrations are valid for a specified time period. It is the client's responsibility to renew this registration before the time period expires.  The registrations SHOULD be renewed at random intervals to prevent network congestion.
A registrar MUST monitor this time period and invalidate the registration if the client/registrant has not renewed their registration before the timer elapses.
</t></section>
</section>

<section title="NAT Considerations"><t>

IAX is very well suited to operating behind NAT due to its single port approach.  This approach eliminates any start of call media stream delays while the NAT gateway establishes a bidirectional  port association. 

Deploying a single IAX server behind a NAT gateway requires little effort.  If the server acts as a registrar, the IAX UDP port on the NAT gateway must be forwarded to the server.   If the server acts as a registrant, the default, 60 second,  REGREQ refresh timer should be sufficient to maintain a port association in the NAT gateway; however, a static port mapping is preferred. 
</t><t>
If multiple servers are to be deployed behind a single NAT gateway, most NAT gateways require each IAX server to use different UDP ports.   Of course, there may be NAT implementations that recognize 
when multiple devices utilize the same private port and manage it appropriately.

</t></section>
<section title="Encryption" anchor="sec.encrypt"><t>
IAX supports call encryption using the symmetric key, Rijndael
<xref target="AES" /> block cipher (also called AES -- Advanced Encryption Standard).  Rijndael is a 128-bit block cipher utilizing a shared secret. 
IAX encrypts on a call-by-call basis starting with a plaintext NEW message indicating, in addition to the other message parameters,  that the call should be encrypted. This indication is given by sending the ENCRYPTION IE (<xref target="ie.encrypt" />)  in the NEW request message.    If the called host supports encryption, it will respond with a plaintext AUTHREQ message that also includes the  ENCRYPTION IE.  All subsequent messages in the call MUST be encrypted.    If the called host does not support encryption,  the AUTHREQ sent in response to the NEW must not include the ENCRYPTION IE and the calling host MUST either HANGUP the request or continue with the unencrypted call. 
</t><t>
The key to use in encrypting the messages is computed by taking the 
CHALLENGE IE <xref target="ie.challenge" />  from the AUTHREQ and concatenating any one of the shared passwords then computing the 128-bit MD5 digest of this combination.  To decrypt,  if there is more than one password for the peer, each must be tried until the message is successfully decoded.  The key remains constant for the duration of the call.  Only the data portion of the messages are encoded. 
</t></section>

</section>
<section title="Message Encoding">
<section title="Frame Structure">
<t>This section contains the specification for each type of frame that IAX defines.</t>
<section title="Full Frames">
<t>Full Frames can send signaling or media data. Generally, Full Frames are used to control initiation, setup, and termination of an IAX call, but they can also be used to carry stream data (though this is generally not optimal).</t>
<t>Full Frames are sent reliably, so all Full Frames require an immediate acknowledgment upon receipt. This acknowledgment can be explicit via an 'ACK' message (see <xref target="iax.iaxframes" />) or implicit based upon receipt of an appropriate response to the Full Frame issued.</t>
<t>The standard Full Frame header length is 12 octets.</t>
<t>Field descriptions:</t>
<t>'F' bit<list style="empty">
<t>This bit specifies whether or not the frame is a Full Frame. If the 'F' bit is set to 1, the frame is a Full Frame. If it is set to 0, it is not a Full Frame.</t>
</list></t>

<t>Source call number<list style="empty">

<t>This 15-bit value specifies the call number the transmitting client uses to identify this call. The source call number for an active call MUST NOT be in use by another call on the same client. Call numbers MAY be reused once a call is no longer active, i.e., either when there is positive acknowledgment that the call has been destroyed or when all possible timeouts for the call have expired.</t>
</list></t>

                        <t>'R' bit<list style="empty">
                        <t>This bit specifies whether or not the frame is being retransmitted. If the 'R' bit is set to 0, the frame is being transmitted for the first time. If it is set to 1, the frame is being retransmitted. IAX does not specify a retransmit timeout; this is left to the implementor.</t>
                        </list></t>

                        <t>Destination call number<list style="empty">
                        <t>This 15-bit value specifies the call number the transmitting client uses to reference the call at the remote peer. This number is the same as the remote peer's source call number. The destination call number uniquely identifies a call on the remote peer. The source call number uniquely identifies the call on the local peer.</t>
                        </list></t>

                        <t>Time-stamp<list style="empty">
                        <t>The time-stamp field contains a 32-bit time-stamp maintained by an IAX peer for a given call. The time-stamp is an incrementally increasing representation of the number of milliseconds since the first transmission of the call.</t>

                        </list></t>

                        <t>OSeqno<list style="empty">
                        <t>The 8-bit OSeqno field is the outbound stream sequence number. Upon initialization of a call, its value is 0. It increases incrementally as Full Frames are sent. When the counter overflows, it silently resets to 0.</t>
                        </list></t>

                        <t>ISeqno<list style="empty">
                        <t>The 8-bit ISeqno field is the inbound stream sequence number. Upon initialization of a call, its value is 0. It increases incrementally as Full Frames are received. At any time, the ISeqno of a call represents the next expected inbound stream sequence number. When the counter overflows, it silently resets to 0.</t>
                        </list></t>

                        <t>Frametype<list style="empty">
                        <t>The Frametype field identifies the type of message carried by the frame. See <xref target="iax.frametypes" /> for more information.</t>
                        </list></t>

                        <t>'C' bit<list style="empty">
                        <t>This bit determines how the remaining 7 bits of the Subclass field are coded. If the 'C' bit is set to 1, the Subclass value is interpreted as a power of 2. If it is not set, the Subclass value is interpreted as a simple 7-bit unsigned integer.</t>
                        </list></t>
                        <figure anchor="fig.fullframefmt" title="Full Frame Binary Format">
<artwork><![CDATA[

                     1                   2                   3  
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|F|     Source Call Number      |R|   Destination Call Number   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            time-stamp                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    OSeqno     |    ISeqno     |   Frame Type  |C|  Subclass   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
:                             Data                              :
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
                </section>

<section title="Mini Frames">
<t>Mini Frames are so named because their header is a minimal 4 octets. Mini Frames carry no control or signaling data; their sole purpose is to carry a media stream on an already-established IAX call. They are sent unreliably. This decision was made because VoIP calls typically can miss several frames without significant degradation in call quality while the incurred overhead in ensuring reliability increases bandwidth requirements and decreases throughput. Further, because voice calls are typically sent in real time, lost frames are too old to be reintegrated into the audio stream by the time they can be retransmitted.</t>

<t>Field descriptions:</t>

                        <t>'F' bit<list style="empty">
                        <t>Mini Frames MUST have the 'F' bit set to 0 to specify that they are not Full Frames.</t>
                        </list></t>

                        <t>Source call number<list style="empty">
                        <t>The source call number is the number that is used by the transmitting peer to identify the current call.</t>
                        </list></t>

                        <t>time-stamp<list style="empty">
                        <t>Mini frames carry a 16-bit time-stamp, which is the lower 16 bits of the transmitting peer's full 32-bit time-stamp for the call. The time-stamp allows synchronization of incoming frames so that they MAY be processed in chronological order instead of the (possibly different) order in which they are received. The 16-bit time-stamp wraps after 65.536 seconds, at which point a full frame SHOULD be sent to notify the remote peer that its time-stamp has been reset. A call MUST continue to send mini frames starting with time-stamp 0 even if acknowledgment of the resynchronization is not received.</t>
                        </list></t>

                        <t>The F bit, source call number, and 16-bit time-stamp comprise the entire 4-octet header for a full frame. Following this header is the actual stream data, of arbitrary length, up to the maximum supported by the network.</t>
                        <t>Mini frames are implicitly defined to be of type 'voice frame' (frametype 2; see <xref target="iax.frametypes" />). The subclass is implicitly defined by the most recent full voice frame of a call (i.e. the subclass for a voice frame specifies the CODEC used with the stream). The first voice frame of a call SHOULD be sent using the CODEC agreed upon in the initial CODEC negotiation. On-the-fly CODEC negotiation is permitted by sending a full voice frame specifying the new CODEC to use in the subclass field.</t>

<figure title="Mini Frame Binary Format" anchor='fig.minifrfmt'>
<artwork><![CDATA[

                     1                   2                   3  
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|F|     Source call number      |            time-stamp         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
:                             Data                              :
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
                </section>

<section title="Meta Frames">
                        <t>Meta frames serve one of two purposes. Meta video frames allow the transmission of video streams with an optimized header. They are similar in purpose to mini voice frames. Meta trunk frames are used for trunking multiple IAX media streams between two peers into one header, to further minimize bandwidth consumption.</t>
<section title="Meta Video Frames">
<t>Field descriptions:</t>

<t>'F' bit<list style="empty">
<t>Meta video frames MUST have the 'F' bit set to 0 to indicate that they are not full frames.</t>
</list></t>

                                <t>Meta Indicator<list style="empty">
                                <t>The meta indicator is a 15-bit field of all zeroes, used to indicate that the frame is a Meta Frame. Meta Frames are identifiable because the first 16 bits will always be zero in any Meta Frame, whereas Full or Mini Frames will have either the 'F' bit set or some (nonzero) value for the source call number (or both).</t>
                                </list></t>
                                
                                <t>'V' bit<list style="empty">
                                <t>The 'V' bit in a meta video frame is set to 1 to specify that the frame is a meta video frame.</t>
                                </list></t>
                                
                                <t>Source call number<list style="empty">
                                <t>The call number that is used by the transmitting peer to identify this video call.</t>
                                </list></t>
                                
                                <t>time-stamp<list style="empty">
                                <t>Meta video frames carry a 16-bit time-stamp, which is the lower 16 bits of the transmitting peer's full 32-bit time-stamp for the call. When this time-stamp wraps, a Full Frame SHOULD be sent to notify the remote peer that the time-stamp has been reset to 0.</t>
                                </list></t>
                                
                                <t>Following the time-stamp is the actual video stream data. Meta video frames are implicitly defined to be of type 'video frame' (frametype 3; see <xref target="iax.frametypes" />). The video CODEC used is implicitly defined by the subclass of the most recent full video frame of a call.</t>

                                <figure title='Meta Video Frame Binary Format' anchor='fig.metafrfmt'>
                                        <artwork><![CDATA[

                     1                   2                   3  
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|F|         Meta Indicator      |V|      Source Call Number     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|?|          time-stamp         |                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
|                                         Data                  |
:                                                               :
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                                        ]]></artwork>
                                </figure>
                        </section>

<section title="Meta Trunk Frames">
<t>IAX natively supports two methods of trunking multiple media streams between two peers into a single association. The first method sends a standard meta header, along with a single 32-bit time-stamp describing the transmission time of the trunk frame. Following the time-stamp are one or more media frames consisting of the call number and the length in octets of the stream data included in the frame.</t>

<t>The second method of trunking is very similar to the first. It sends a standard meta header, including the 32-bit time-stamp describing the time of transmission of the trunk frame. But the media frames included in the trunk are actually complete Mini Frames, including the 16-bit time-stamp for each call. The first method uses slightly less bandwidth (2 fewer octets per call in the trunk), while the second method maintains the individual time-stamps for each call so that jitter buffering can use the actual time-stamps associated with a call instead of the (less accurate) time-stamp representing the entire trunk. Either method is permissible for trunking.</t>

<t>Field descriptions:</t>

                                <t>'F' bit<list style="empty">
                                <t>Meta trunk frames MUST have the 'F' bit set to 0 to indicate that they are not Full Frames.</t>
                                </list></t>

                                <t>Meta Indicator<list style="empty">
                                <t>The meta indicator is a 15-bit field of all zeroes, used to indicate that the frame is a Meta Frame. Meta Frames are identifiable because the first 16 bits will always be zero in any Meta Frame, whereas Full or Mini Frames will have either the 'F' bit set or some (nonzero) value for the source call number (or both).</t>
                                </list></t>

                                <t>'V' bit<list style="empty">
                                <t>The 'V' bit in a meta trunk frame is set to 0 to specify that the frame is not a meta video frame.</t>
                                </list></t>

                                <t>Meta Command<list style="empty">
                                <t>This 7-bit field identifies whether
                                or not the Meta Frame is a trunk. A value of '1' indicates that the frame is a meta trunk frame. All other values are reserved for future use.  See the IANA Registry for additional IAX Meta Command Assignments. </t>
                                </list></t>

                                <t>Command Data<list style="empty">
                                <t>This 8-bit field specifies flags for options that apply to a trunked call. The least significant bit of the field is the 'trunk time-stamps' flag. A value of 0 indicates that the calls in the trunk do not include their individual time-stamps. A value of 1 indicates that the calls do each include their own time-stamp. All other bits are reserved for future use.</t>
                                </list></t>

                                <t>time-stamp<list style="empty">
                                <t>Meta trunk frames carry a 32-bit time-stamp, which represents the actual time of transmission of the trunk frame. This is distinct from the time-stamps of the calls included in the trunk.</t>
                                </list></t>

                                <t>Following the 32-bit time-stamp is one or more trunked calls. If the 'trunk time-stamps' flag is set to 0, each entry consists of 2 octets specifying the source call number of the call, 2 octets specifying the length in octets of the media data, and then the media data. If the 'trunk time-stamps' flag is set to 1, each entry consists of 2 octets specifying the length in octets of the media data, and then a Mini Frame (2 octets specifying source call number, 2 octets specifying 16-bit time-stamp, and the media data). The following two diagrams help illustrate this structure.</t>

                                <figure title="Meta Trunk Frame Binary Format (trunk time-stamps 0)" anchor="fig.metatfrfmt">
                                        <artwork><![CDATA[

                     1                   2                   3  
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|F|         Meta Indicator      |V|Meta Command | Cmd Data (0)  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            time-stamp                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|R|      Source Call Number     |     Data Length (in octets)   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
:                             Data                              :
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                .
                                .
                                .
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|R|      Source Call Number     |     Data Length (in octets)   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
:                             Data                              :
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                        ]]></artwork>
                                </figure>

                                <figure title="Meta Trunk Frame Binary Format (trunk time-stamps 1)" anchor='fig.fig.metafrfmt1'>
                                        <artwork><![CDATA[

                     1                   2                   3  
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|F|         Meta Indicator      |V|Meta Command | Cmd Data (1)  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            time-stamp                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Data Length (in octets)   |R|     Source Call Number      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           time-stamp          |                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
|                                       Data                    |
:                                                               :
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                .
                                .
                                .
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Data Length (in octets)   |R|     Source Call Number      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           time-stamp          |                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
|                                       Data                    |
:                                                               :
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                        ]]></artwork>
                                </figure>
                        </section>
                </section>


<section title="Encrypted Frames" anchor="iax.frameenc">
<t>All of the above frames may be encrypted.  
The header call numbers are passed through in the clear,
first 4 bytes for a Full Frame or 2 bytes for a Mini Frame.
The remainder of the frame is padded with between 16 and 32 bytes
of random data, then encrypted with AES each block being
XOR'd with the previous block. The padding is added at the front 
of the data.
 </t>
<t> <xref target='fig.encframebefore'/> shows a padded Full Frame
  before encryption, and
<xref target='fig.encframefmt'/> shows the frame after encryption.
Other frame types follow the same procedure, except the cleartext portion is shorter, 
as described above. </t>

                        <figure anchor="fig.encframebefore" title="Full Frame before encryption">
<artwork><![CDATA[


                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|F|     Source Call Number      |R|   Destination Call Number   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         12 Random bytes                       |
|                                                               |
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|               28  Random bits                         |padding|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
: between 0 and 15 (as indicated by the padding field above)    :
:                         Random bytes                          :
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
:                    Remainder of Actual Frame                  :
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                                ]]></artwork>


                        </figure>
<t> Since AES requires a 16 byte block size, some padding is essential.  This padding
has been placed at the beginning of the payload because it makes it
more difficult to take advantage of the predictability of the IAX frame header.
For example, the first encrypted Frame an IAX client sends within an incoming
IAX call is entirely predictable: It is always an ACK - where even the
time-stamp is guessable as it is the time the AUTHREP packet was sent. 
</t>


                        <figure anchor="fig.encframefmt" title="Frame after encryption">
<artwork><![CDATA[

                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|F|     Source Call Number      |R|   Destination Call Number   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         Encrypted data                        |
|                Multiple of 16 bytes                           |
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                                ]]></artwork>
                        </figure>

<t>
The same encryption rules apply to the Mini Frames, except that the initial unencrypted
portion is only 2 bytes.
</t>

                </section>


                </section>

<section title="Frame Types" anchor="iax.frametypes">
                <t>The IAX protocol specifies 10 types of possible
                frames for the "frametype" field of a Full Frame. They
                are described in the following subsections.</t>
                        <section title="DTMF Frame">
                                <t>The frame carries a single digit of
                                DTMF (Dual Tone Multi-Frequency). More
                                information about DTMF can be found in
                                RFC 4733 <xref target="RFC4733" /> and <xref target="RFC4734" />.</t>
                                <t>For DTMF frames, the subclass is the actual DTMF digit carried by the frame.</t>
                        </section>
                        <section title="Voice Frame">
                                <t>The frame carries voice data.</t>
                                <t>The subclass specifies the audio format of the data. Predefined voice formats can be found in <xref target="iax.mediaformats" />.</t>
                        </section>
                        <section title="Video Frame">
                                <t>The frame carries video data.</t>
                                <t>The subclass specifies the video format of the data. Predefined video formats can be found in <xref target="iax.mediaformats" />.</t>
                        </section>
                        <section title="Control Frame">
                                <t>The frame carries session control data, i.e., it refers to control of a device connected to an IAX endpoint.</t>
                                <t>The subclass is a value from <xref target="iax.controlframes" /> describing the device control signal.</t>
                        </section>
                        <section title="Null Frame">
<t>Frames with the Null value MUST NOT be transmitted.</t>
                        </section>
                        <section title="IAX Frame">
                                <t>The frame carries control data that provides IAX protocol-specific endpoint management. This frametype is used to manage IAX protocol interactions that are generally independent of the type of endpoints.</t>
                                <t>The subclass is a value from <xref target="iax.iaxframes" /> describing an IAX event.</t>
                        </section>
                        <section title="Text Frame">
                                <t>The frame carries a non-control text message in UTF-8 <xref target="RFC3629" /> format.</t>
                                <t>All text frames have a subclass of 0.</t>
                        </section>
                        <section title="Image Frame">
                                <t>The frame carries a single image.</t>
                                <t>The subclass describes the format of the image from <xref target="iax.mediaformats" />.</t>
                        </section>
                        <section title="HTML Frame">
                                <t>The frame carries HTML data.</t>
                                <t>The subclass is a value from the HTML Subclasses table in <xref target="iax.htmlsubclasses" />.</t>

                        </section>
<section title="Comfort Noise Frame">
                                <t>The frame carries comfort noise.</t>
                                <t>The subclass is the level of comfort noise in -dBov.</t>
                                
                                <?rfc compact="no" ?>
<texttable>
                                <preamble>The following table specifies valid Frame Type Values:</preamble>
                                <ttcol>TYPE</ttcol><ttcol>Description</ttcol><ttcol>Subclass Description</ttcol><ttcol>Data Description</ttcol>
                                <c>0x01</c>     <c>DTMF</c>     <c>0-9, A-D, *, #</c>   <c>Undefined</c>
                                <c>0x02</c>     <c>Voice </c>   <c>Audio Compression Format </c>        <c>Data</c>
                                <c>0x03</c>     <c>Video </c>   <c>Video Compression Format </c>        <c>Data</c>
                                <c>0x04</c>     <c>Control </c> <c>See Control Frame Types </c> <c>Varies with subclass </c>
                                <c>0x05</c>     <c>Null </c>    <c>Undefined </c>       <c>Undefined</c>
                                <c>0x06</c>     <c>IAX Control </c><c>See IAX Protocol Messages  </c>   <c>Information Elements </c>
                                <c>0x07</c>     <c>Text </c>    <c>Always 0 </c>        <c>Raw Text</c>
                                <c>0x08</c>     <c>Image </c>     <c>Image Compression Format</c>       <c>Raw image</c>
                                <c>0x09</c>     <c>HTML </c>      <c>See HTML Frame Types </c>  <c>Message Specific</c>
                                <c>0x0A</c>     <c>Comfort Noise</c><c>Level in -dBov of comfort noise </c> <c>None </c>
                                </texttable>
<?rfc compact="yes"?>
                                <t>Refer to the IANA Registry for additional IAX Frame Type values. </t>

                                
                                
                        </section>
</section>

        <section title="Control Frames Subclasses" anchor="iax.controlframes">
<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies valid Control Frame Subclasses:</preamble>

<ttcol width='18%'>VALUE</ttcol><ttcol>Name</ttcol><ttcol>Description</ttcol>
<c>  0x01  </c><c> Hangup    </c><c>   The call has been hungup at the remote end    </c>
<c>  0x02  </c><c> Reserved </c><c>   Reserved for future use</c>                         
<c>  0x03  </c><c> Ringing  </c><c>   Remote end is ringing (ring-back)</c>                
<c>  0x04  </c><c> Answer </c><c>   Remote end has answered</c>                         
<c>  0x05  </c><c> Busy     </c><c>   Remote end is busy</c>                              
<c>  0x06  </c><c> Reserved </c><c>   Reserved for future use</c>                         
<c>  0x07  </c><c> Reserved </c><c>   Reserved for future use</c>                         
<c>  0x08  </c><c> Congestion </c><c>   The call is congested</c>                          
<c>  0x09  </c><c> Flash Hook </c><c>   Flash hook</c>                                      
<c>  0x0a  </c><c> Reserved   </c><c>   Reserved for future use</c>                         
<c>  0x0b  </c><c> Option     </c><c>   Device-specific options are being transmitted  </c>
<c>  0x0c  </c><c> Key Radio   </c><c>   Key Radio</c>                                       
<c>  0x0d  </c><c> Unkey Radio </c><c>   Unkey Radio</c>                                     
<c>  0x0e  </c><c> Call Progress   </c><c>   Call is in progress</c>                             
<c>  0x0f  </c><c> Call Proceeding </c><c>   Call is proceeding</c>                              
<c>  0x10  </c><c> Hold            </c><c>   Call is placed on hold</c>                          
<c>  0x11  </c><c>   Unhold        </c><c>   Call is taken off hold</c>                          
</texttable>
<?rfc compact="yes"?>
<t>Refer to the IANA Registry for additional IAX Control Frame Subclass values. </t>
</section>

<section title="IAX Frames" anchor="iax.iaxframes">
<t>Frames of type 'IAX' are used to provide management of IAX endpoints. They handle IAX signaling (e.g., call setup, maintenance, and  tear-down). They MAY also handle direct transmission of media data, but this is not optimal for VoIP calls. They do not carry session-specific control (e.g., device state), as this is the purpose of Control Frames. The IAX commands are listed and described below.</t>

<?rfc compact="no" ?>
<texttable>
<preamble>The following table specifies all valid IAX Frame values:</preamble>
<ttcol>Hex</ttcol ><ttcol >  Name       </ttcol><ttcol>Description</ttcol>

<c>0x01  </c><c>NEW        </c><c>   Initiate a new call </c>
<c>0x02  </c><c>PING       </c><c>   Ping request </c>
<c>0x03  </c><c>PONG       </c><c>   Ping or poke reply </c>
<c>0x04  </c><c>ACK        </c><c>   Explicit acknowledgment </c>
<c>0x05  </c><c>HANGUP     </c><c>   Initiate call tear-down </c>
<c>0x06  </c><c>REJECT     </c><c>   Reject a call </c>
<c>0x07  </c><c>ACCEPT     </c><c>   Accept a call </c>
<c>0x08  </c><c>AUTHREQ    </c><c>   Authentication request </c>
<c>0x09  </c><c>AUTHREP    </c><c>   Authentication reply </c>
<c>0x0a  </c><c>INVAL      </c><c>   Invalid message </c>
<c>0x0b  </c><c>LAGRQ      </c><c>   Lag request </c>
<c>0x0c  </c><c>LAGRP      </c><c>   Lag reply </c>
<c>0x0d  </c><c>REGREQ     </c><c>   Registration request </c>
<c>0x0e  </c><c>REGAUTH    </c><c>   Registration authentication </c>
<c>0x0f  </c><c>REGACK     </c><c>   Registration acknowledgement </c>
<c>0x10  </c><c>REGREJ     </c><c>   Registration reject </c>
<c>0x11  </c><c>REGREL     </c><c>   Registration release </c>
<c>0x12  </c><c>VNAK       </c><c>   Video/Voice retransmit request </c>
<c>0x13  </c><c>DPREQ      </c><c>   Dialplan request </c>
<c>0x14  </c><c>DPREP      </c><c>   Dialplan reply </c>
<c>0x15  </c><c>DIAL       </c><c>   Dial </c>
<c>0x16  </c><c>TXREQ      </c><c>   Transfer request </c>
<c>0x17  </c><c>TXCNT      </c><c>   Transfer connect </c>
<c>0x18  </c><c>TXACC      </c><c>   Transfer accept </c>
<c>0x19  </c><c>TXREADY    </c><c>   Transfer ready </c>
<c>0x1a  </c><c>TXREL      </c><c>   Transfer release </c>
<c>0x1b  </c><c>TXREJ      </c><c>   Transfer reject </c>
<c>0x1c  </c><c>QUELCH     </c><c>Halt audio/video [media] transmission    </c>
<c>0x1d  </c><c>UNQUELCH   </c><c>   Resume audio/video [media] transmission   </c>
<c>0x1e  </c><c>POKE       </c><c>   Poke request </c>
<c>0x1f  </c><c>Reserved   </c><c>   Reserved for future use                   </c>
<c>0x20  </c><c>MWI        </c><c>   Message waiting indication </c>
<c>0x21  </c><c>UNSUPPORT  </c><c>   Unsupported message </c>
<c>0x22  </c><c>TRANSFER   </c><c>   Remote transfer request</c>
<c>0x23  </c><c>Reserved   </c><c>   Reserved for future use</c>
<c>0x24  </c><c>Reserved   </c><c>   Reserved for future use</c>             
<c>0x25  </c><c>Reserved   </c><c>   Reserved for future use</c>
</texttable>
<?rfc compact="yes"?>

<t>Refer to the IANA Registry for additional IAX Frame values. </t>

</section>
<section title="HTML Command Subclasses" anchor="iax.htmlsubclasses">

<?rfc compact="no" ?>
<texttable>
                        <preamble>IAX HTML Command Subclasses:</preamble>
<ttcol> NUMBER  </ttcol><ttcol> DESCRIPTION                  </ttcol>
<c>    0x01    </c><c>  Sending a URL                </c>
<c>    0x02    </c><c>  Data frame                   </c>
<c>    0x04    </c><c>  Beginning frame              </c>
<c>    0x08    </c><c>  End frame                    </c>
<c>    0x10   </c><c>  Load is complete             </c>
<c>    0x11   </c><c>  Peer does not support HTML   </c>
<c>    0x12   </c><c>  Link URL                     </c>
<c>    0x13   </c><c>  Unlink URL                   </c>
<c>    0x14   </c><c>  Reject Link URL              </c>
</texttable>
<?rfc compact="yes"?>
<t>Refer to the IANA Registry for additional IAX HTML Command Subclass values. </t>
        </section>

<section title="Information Elements" anchor="iax.ies">
<t>IAX messages sent as Full Frames MAY carry information elements to specify user- or call-specific data. Information elements are appended to a frame header in its data field. Zero, one, or multiple information elements MAY be included with any IAX message.</t>
<t>Information elements are coded as follows:
<list style="empty">
<t>The first octet of any information element consists of the "IE" field. The IE field is an identification number that defines the particular information element. 
<xref target='tab.iedefs'/>
lists the defined information elements and each information element is defined below the table.</t>
<t>The second octet of any information element is the "data length" field. It specifies the length in octets of the information element's data field.</t>

<t>The remaining octet(s) of an information element contain the actual data being transmitted. The representation of the data is dependent on the particular information element as identified by its "IE" field. Some information elements carry binary data, some carry UTF-8 <xref target="RFC3629" /> data, and some have no data field at all. Elements that 
carry UTF-8 MUST prepare strings as per  <xref target="RFC3454" /> and  <xref target="RFC3491" />, so that illegal characters, case folding, and other characters properties are handled and compared properly. 
The data representation for each information element is described below.</t>
</list>
</t>

<figure>
<preamble>The following table specifies the Information Element Binary Format:</preamble>
<artwork><![CDATA[

                     1           
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      IE       |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
:             DATA              :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


]]></artwork>
</figure>

                <t>The following is a table of the information elements IAX defines, and a brief description of each information element's purpose. More information about each IE may be found below the table.</t>
                <texttable anchor='tab.iedefs' title='Information Element Definitions'>
<ttcol>HEX</ttcol>
<ttcol>NAME</ttcol>
<ttcol>DESCRIPTION</ttcol>
<c>  HEX   </c><c>  NAME             </c><c>   DESCRIPTION                                  </c>
<c>  0x01  </c><c>  CALLED NUMBER    </c><c>   Number/extension being called                </c>
<c>  0x02  </c><c>  CALLING NUMBER   </c><c>   Calling number                               </c>
<c>  0x03  </c><c>  CALLING ANI      </c><c>   Calling number ANI for billing               </c>
<c>  0x04  </c><c>  CALLING NAME     </c><c>   Name of caller                               </c>
<c>  0x05  </c><c>  CALLED CONTEXT   </c><c>   Context for number                           </c>
<c>  0x06  </c><c>  USERNAME         </c><c>   Username (peer or user) for authentication   </c>
<c>  0x07  </c><c>  PASSWORD         </c><c>   Password for authentication                  </c>
<c>  0x08  </c><c>  CAPABILITY       </c><c>   Actual CODEC capability                      </c>
<c>  0x09  </c><c>  FORMAT           </c><c>   Desired CODEC format                         </c>
<c>  0x0a  </c><c>  LANGUAGE         </c><c>   Desired language                             </c>
<c>  0x0b  </c><c>  VERSION          </c><c>   Protocol version                             </c>
<c>  0x0c  </c><c>  ADSICPE          </c><c>   CPE ADSI capability                          </c>
<c>  0x0d  </c><c>  DNID             </c><c>   Originally dialed DNID                       </c>
<c>  0x0e  </c><c>  AUTHMETHODS      </c><c>   Authentication method(s)                     </c>
<c>  0x0f  </c><c>  CHALLENGE        </c><c>   Challenge data for MD5/RSA                   </c>
<c>  0x10  </c><c>  MD5 RESULT       </c><c>   MD5 challenge result                         </c>
<c>  0x11  </c><c>  RSA RESULT       </c><c>   RSA challenge result                         </c>
<c>  0x12  </c><c>  APPARENT ADDR    </c><c>   Apparent address of peer                     </c>
<c>  0x13  </c><c>  REFRESH          </c><c>   When to refresh registration                 </c>
<c>  0x14  </c><c>  DPSTATUS         </c><c>   Dialplan status                              </c>
<c>  0x15  </c><c>  CALLNO           </c><c>   Call number of peer                          </c>
<c>  0x16  </c><c>  CAUSE            </c><c>   Cause                                        </c>
<c>  0x17  </c><c>  IAX UNKNOWN      </c><c>   Unknown IAX command                          </c>
<c>  0x18  </c><c>  MSGCOUNT         </c><c>   How many messages waiting                    </c>
<c>  0x19  </c><c>  AUTOANSWER       </c><c>   Request auto-answering                       </c>
<c>  0x1a  </c><c>  MUSICONHOLD      </c><c>   Request musiconhold with QUELCH              </c>
<c>  0x1b  </c><c>  TRANSFERID       </c><c>   Transfer Request Identifier                  </c>
<c>  0x1c  </c><c>  RDNIS            </c><c>   Referring DNIS                               </c>
<c>  0x1d  </c><c>  Reserved         </c><c>   Reserved for future use</c>
<c>  0x1e  </c><c>  Reserved         </c><c>   Reserved for future use</c>
<c>  0x1f  </c><c>  DATETIME         </c><c>   Date/Time                                    </c>
<c>  0x20  </c><c>  Reserved         </c><c>   Reserved for future use                      </c>
<c>  0x21  </c><c>  Reserved         </c><c>   Reserved for future use                      </c>
<c>  0x22  </c><c>  Reserved         </c><c>   Reserved for future use                      </c>
<c>  0x23  </c><c>  Reserved         </c><c>   Reserved for future use                      </c>
<c>  0x24  </c><c>  Reserved         </c><c>   Reserved for future use                      </c>
<c>  0x25  </c><c>  Reserved         </c><c>   Reserved for future use                      </c>
<c>  0x26  </c><c>  CALLINGPRES      </c><c>   Calling presentation                         </c>
<c>  0x27  </c><c>  CALLINGTON       </c><c>   Calling type of number                       </c>
<c>  0x28  </c><c>  CALLINGTNS       </c><c>   Calling transit network select               </c>
<c>  0x29  </c><c>  SAMPLINGRATE     </c><c>   Supported sampling rates                     </c>
<c>  0x2a  </c><c>  CAUSECODE        </c><c>   Hangup cause                                 </c>
<c>  0x2b  </c><c>  ENCRYPTION       </c><c>   Encryption format                            </c>
<c>  0x2c  </c><c>  ENCKEY           </c><c>   Reserved for future Use                   </c>
<c>  0x2d  </c><c>  CODEC PREFS      </c><c>   CODEC Negotiation                            </c>
<c>  0x2e  </c><c>  RR JITTER        </c><c>   Received jitter, as in RFC 3550               </c>
<c>  0x2f  </c><c>  RR LOSS          </c><c>   Received loss, as in RFC 3550                 </c>
<c>  0x30  </c><c>  RR PKTS          </c><c>   Received frames                              </c>
<c>  0x31  </c><c>  RR DELAY         </c><c>   Max playout delay for received frames in ms  </c>
<c>  0x32  </c><c>  RR DROPPED       </c><c>   Dropped frames (presumably by jitter buffer)  </c>
<c>  0x33  </c><c>  RR OOO           </c><c>   Frames received Out of Order                 </c>
<c>  0x34  </c><c>  OSPTOKEN         </c><c>   OSP Token Block                              </c>
</texttable>
<?rfc compact="yes"?>

<t>Refer to the IANA Registry for additional IAX Information Element values. </t>

<section title='CALLED NUMBER' anchor='ie.callednumber'>
<t>
  The purpose of the CALLED NUMBER information element is to indicate the number or extension being called. It carries UTF-8-encoded data. The CALLED NUMBER information element MUST use UTF-8 encoding and not numeric data because destinations are not limited to E.164 numbers (<xref  target="E164" />), national numbers, or even digits. It is possible for a number or extension to include non-numeric characters. 
The CALLED NUMBER IE MAY contain a SIP URI, <xref  target="RFC3261" />  or a URI in any other format.  
The ability to serve a CALLED NUMBER is server dependent.</t>
<t>The CALLED NUMBER information element is generally sent with IAX NEW, DPREQ, DPREP, DIAL, and TRANSFER messages.</t>
<figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x01     |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
:  UTF-8-encoded CALLED NUMBER  :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='CALLING NUMBER' anchor='ie.callingnum'>
<t> The purpose of the CALLING NUMBER information element is to indicate the number or extension of the calling entity to the remote peer. It carries UTF-8-encoded data.</t>
<t>The CALLING NUMBER information element is usually sent with IAX NEW messages.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x02     |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
: UTF-8-encoded CALLING NUMBER  :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
</figure>
</section>
<section title='CALLING ANI' anchor='ie.ani'>
                                <t>The purpose of the CALLING ANI information element is to indicate the calling number ANI (Automatic Number Identification) for billing. It carries UTF-8-encoded data.</t>
                                <t>The CALLING ANI information element MAY be sent with an IAX NEW message, but it is not required.</t>
                        <figure>
                                <artwork><![CDATA[
                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x03     |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
:   UTF-8-encoded CALLING ANI   :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='CALLING NAME' anchor='ie.callingname'>
                                <t>The purpose of the CALLING NAME information element is to indicate the calling name of the transmitting peer. It carries UTF-8-encoded data.</t>
                                <t>The CALLING NAME information element is usually sent with IAX NEW messages.</t>
                        <figure>
                                <artwork><![CDATA[
                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x04     |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
:   UTF-8-encoded CALLING NAME  :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='CALLED CONTEXT' anchor='ie.calledctx'>
                                <t>The purpose of the CALLED CONTEXT information element is to indicate the context (or partition) of the remote peer's dialplan that the CALLED NUMBER is interpreted. It carries UTF-8-encoded data.</t>
                                <t>The CALLED CONTEXT information element MAY be sent with IAX NEW or TRANSFER messages, though it is not required.</t>
                        <figure>
                                <artwork><![CDATA[
                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x05     |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
: UTF-8-encoded CALLED CONTEXT  :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='USERNAME' anchor='ie.username'>
<t>The purpose of the USERNAME information element is to specify the identity of the user participating in an IAX message exchange. It carries UTF-8-encoded data.</t>
<t>The USERNAME information element MAY be sent with IAX NEW, AUTHREQ, REGREQ, REGAUTH, or REGACK messages, or any time a peer needs to identify a user.</t>
<figure>
<artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x06     |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
:     UTF-8-encoded USERNAME    :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='CAPABILITY' anchor='ie.capability'>
                                <t>The purpose of the CAPABILITY information element is to indicate the media CODEC capabilities of an IAX peer. Its data is represented in a 4-octet bitmask according to <xref target="iax.mediaformats" />. Multiple CODECs MAY be specified by logically OR'ing them into the CAPABILITY information element.</t>
                                <t>The CAPABILITY information element is sent with IAX NEW messages if appropriate for the CODEC negotiation method the peer is using.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x08     |      0x04     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| CAPABILITY according to Media |
| Format Subclass Values Table  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='FORMAT' anchor='ie.format'>
                                <t>The purpose of the FORMAT information element is to indicate a single preferred media CODEC. When sent with a NEW message, the indicated CODEC is the desired CODEC an IAX peer wishes to use for a call. When sent with an ACCEPT message, it indicates the actual CODEC that has been selected for the call. Its data is represented in a 4-octet bitmask according to <xref target="iax.mediaformats" />. Only one CODEC MUST be specified in the FORMAT information element.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x09     |      0x04     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   FORMAT according to Media   |
| Format Subclass Values Table  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='LANGUAGE' anchor='ie.language'>
                                <t>The purpose of the LANGUAGE information element is to indicate the language in which the transmitting peer would like the remote peer to send signaling information. It carries UTF-8-encoded data and tags should be selected per  <xref  target="RFC4646" /> and  <xref  target="RFC4647" />.</t>
                                <t>The LANGUAGE information element MAY be sent with an IAX NEW message.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x0a     |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
:     UTF-8-encoded LANGUAGE    :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='VERSION' anchor='ie.version'>
                                <t>The purpose of the VERSION information element is to indicate the protocol version the peer is using. Peers at each end of a call MUST use the same protocol version. Currently, the only supported version is 2. The data field of the VERSION information element is 2 octets long.</t>
                                <t>The VERSION information element MUST be sent with an IAX NEW message.</t>
                                <t>When sent, the VERSION information element MUST be the first IE in the message.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x0b     |      0x02     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            0x0002             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='ADSICPE' anchor='ie.adsicpe'>
                                <t>The purpose of the ADSICPE
                                information element is to indicate the
                                CPE (Customer Premises Equipment) ADSI
                                (Analog Display Services Interface)
                                capability. 
				  The data field of the
                                ADSICPE information element is 2
                                octets long.</t>
                                <t>The ADSICPE information element MAY be sent with an IAX NEW message.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x0c     |      0x02     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       ADSICPE Capability      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='DNID' anchor='ie.dnid'>
                                <t>The purpose of the DNID information element is to indicate the Dialed Number ID, which may differ from the 'called number'. It carries UTF-8-encoded data.</t>
                                <t>The DNID information element MAY be sent with an IAX NEW message.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x0d     |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
:    UTF-8-encoded DNID Data    :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='AUTHMETHODS' anchor='ie.authmethods'>
                                <t>The purpose of the AUTHMETHODS information element is to indicate the authentication methods a peer accepts. It is sent as a bitmask two octets long. The table below lists the valid authentication methods.</t>
                                <t>The AUTHMETHODS information element MUST be sent with IAX AUTHREQ and REGAUTH messages.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x0e     |      0x02     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Valid Authentication Methods |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>

                        <?rfc compact="no" ?>
<texttable>
                                <preamble>The following table lists valid values for authentication:</preamble>
<ttcol> METHOD     </ttcol><ttcol> DESCRIPTION     </ttcol>
<c> 0x0001     </c><c> Reserved (was Plaintext)      </c>
<c> 0x0002     </c><c> MD5             </c>
<c> 0x0004     </c><c> RSA             </c>
                        </texttable>
<?rfc compact="yes"?>

<t>Refer to the IANA Registry for additional IAX Authentication Method values. </t>


</section>
<section title='CHALLENGE' anchor="ie.challenge">
<t>The purpose of the CHALLENGE information element is to offer the MD5 or RSA challenge to be used for authentication. It carries the actual UTF-8-encoded challenge data.</t>
<t>The CHALLENGE information element MUST be sent with IAX AUTHREQ and REGAUTH messages.</t>
<figure>

<artwork><![CDATA[ 

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x0f     |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
:  UTF-8-encoded Challenge Data :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='MD5 RESULT' anchor='ie.md5_result'>
                                <t>The purpose of the MD5 RESULT information element is to offer an MD5 response to an authentication CHALLENGE. It carries the UTF-8-encoded challenge result.  The MD5 Result value is computed by taking the MD5 <xref  target="RFC1321" /> digest of the challenge string and the password string.</t>
                                <t>The MD5 RESULT information element MAY be sent with IAX AUTHREP and REGREQ messages if an AUTHREQ or REGAUTH and appropriate CHALLENGE has been received. This information element MUST NOT be sent except in response to a CHALLENGE.</t>                           
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     0x10      |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
:    UTF-8-encoded MD5 Result   :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>

</section>
<section title='RSA RESULT' anchor='ie.rsa_result'>
                                <t>The purpose of the RSA RESULT information element is to offer an RSA response to an authentication CHALLENGE. It carries the UTF-8-encoded challenge result.  The result is computed as follows:  first,  compute the SHA1 digest <xref target="RFC3174"/> of the challenge string and second, RSA sign the SHA1 digest using the private RSA key as specified in PKCS #1 v2.0 <xref target="PKCS"/>.  The RSA keys are stored locally. </t>
                                <t>Upon receiving an RSA RESULT information element, its value must be verified with the sender's public key
                                        to match the SHA1 digest <xref target="RFC3174"/> of the challenge string.</t>
                                <t>The RSA RESULT information element MAY be sent with IAX AUTHREP and REGREQ messages if an AUTHREQ or REGAUTH and appropriate CHALLENGE have been received. This information element MUST NOT be sent except in response to a CHALLENGE.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x11     |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
:    UTF-8-encoded RSA Result   :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='APPARENT ADDR' anchor='ie.apparentaddr'>
                                <t>The purpose of the APPARENT ADDR information element is to indicate the perceived network connection information used to reach a peer, which may differ from the actual address when the peer is behind NAT. The APPARENT ADDR IE is populated using the source address values of the UDP and IP headers in the IAX message to which this response is generated. The data field of the APPARENT ADDR information element is the same as the POSIX sockaddr struct for the address family in use (i.e., sockaddr_in for IPv4, sockaddr_in6 for IPv6). The data length depends on the type of address being represented.</t>
                                <t>The APPARENT ADDR information
                                element MUST be sent with IAX TXREQ
                                and REGACK messages. When used with a
                                TXREQ message, the APPARENT ADDR MUST
                                specify the address of the peer to
                                which the local peer is trying to transfer its end of the connection. When used with a REGACK message, the APPARENT ADDR MUST specify the address it uses to reach the peer (which may be different than the address the peer perceives itself as in the case of NAT or multi-homed peer machines).</t>
                        <t>
The data field of the APPARENT ADDR information element is the same as the Linux struct sockaddr_in: two octets for the address family, two octets for the port number, four octets for the IPv4 address, and 8 octets of padding consisting of all bits set to 0. Thus, the total length of the APPARENT ADDR information element is 18 octets.</t>

                        <figure>
                                <preamble>The following diagram demonstrates the generic APPARENT ADDR format:</preamble>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x12     |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|        sockaddr struct        |
:   for address family in use   :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>


                        <figure>
                                <preamble>The following diagram demonstrates the APPARENT ADDR format for an IPv4 address:</preamble>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x12     |      0x10     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            0x0200             | <- Address family (INET)
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            0x11d9             | <- Portno (default 4569)
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      32-bit IP address        |
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
|      8 octets of all 0s       |
|   (padding in sockaddr_in)    |
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>

<figure>
<preamble>The following diagram demonstrates the APPARENT ADDR format for an IPv6 address:</preamble>
<artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x12     |      0x1C     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            0x0A00             | <- Address family (INET6)
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            0x11d9             | <- Portno (default 4569)
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           32 bits             | <- Flow information
|                               | 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      128-bit IP address       | <- Ip6 Address 
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           32 bits             | <- Scope ID
|                               | 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


]]></artwork>
</figure>



</section>
<section title='REFRESH' anchor='ie.refresh'>
<t>The purpose of the REFRESH information element is to indicate the number of seconds before an event expires. Its data field is 2 octets long.</t>
<t>The REFRESH information element is used with IAX REGREQ, REGACK, and DPREP messages. When sent with a REGREQ, it is a request that the peer maintaining the registration set the timeout to REFRESH seconds. When sent with a DPREP or REGACK, it is informational and tells a remote peer when the local peer will no longer consider the event valid. The REFRESH sent with a DPREP tells a peer how long it SHOULD store the received dialplan response.</t>
<t>If the REFRESH information element is not received with a DPREP, the expiration of the cache data is assumed to be 10 minutes. If the REFRESH information element is not received with a REGACK, registration expiration is assumed to occur after 60 seconds.</t>

                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x13     |      0x02     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  2 octets specifying refresh  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='DPSTATUS' anchor='ie.dpstatus'>
                                <t>The purpose of the DPSTATUS
                                information element is to indicate the
                                status of a CALLED NUMBER in a remote
                                dialplan. Its data field is a 2-octet bitmask specifying flags from the table below. Exactly one of the low 3 bits MUST be set, and zero, 1, or 2 of the high 2 bits MAY be set.</t>
                                <t>The DPSTATUS information element MUST be sent with IAX DPREP messages, as it is the payload of the dialplan response.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x14     |      0x02     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|M|R|                     |N|C|E|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>

                        <?rfc compact="no" ?>
<texttable>
                                <preamble>The following table lists the dialplan status flags:</preamble>
                                <ttcol> FLAG     </ttcol><ttcol> DESCRIPTION     </ttcol>
                        <c>  0x0001   </c><c>  Exists                       </c>
                        <c>  0x0002   </c><c>  Can exist                    </c>
                        <c>  0x0004   </c><c>  Non-existent                 </c>
                        <c>  0x4000   </c><c>  Retain dialtone (ignorepat)  </c>
                        <c>  0x8000   </c><c>  More digits may match number </c>
                                                </texttable>
<?rfc compact="yes"?>


<t>Refer to the IANA Registry for additional IAX dialplan status values. </t>   

</section>
<section title='CALLNO' anchor='ie.callno'>

<t>The purpose of the CALLNO information element is to indicate the call number a remote peer needs to use as a destination call number to identify a call being transferred. The peer managing a transfer sends the CALLNO for one transfer endpoint to the other transfer endpoint so that it knows what call number to specify for the transfer. The data field is 2 octets long and specifies a call number in the same manner as a source call number or destination call number is specified in a frame header.</t>
                                <t>The CALLNO information element MUST be sent with IAX TXREQ, TXREADY, and TXREL messages. Transferring cannot succeed if the CALLNO IE is not included with the appropriate transfer messages.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     0x15      |      0x02     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Callno of transfer recipient |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='CAUSE' anchor='ie.cause'>
<t>The purpose of the CAUSE information element is to indicate the reason an event occurred. It carries a description of the CAUSE of the event as UTF-8-encoded data. Notification of the event itself is handled at the message level.</t>
                                <t>The CAUSE information element SHOULD be sent with IAX HANGUP, REJECT, REGREJ, and TXREJ messages.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x16     |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
:  UTF-8-encoded CAUSE of event :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='IAX UNKNOWN' anchor='ie.unknown'>
<t>The purpose of the IAX UNKNOWN information element is to indicate that a received IAX command was unknown or unrecognized. The 1-octet data field contains the subclass of the received frame that was unrecognized.</t>
                                <t>The IAX UNKNOWN information element MUST be sent with IAX UNSUPPORT messages.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x17     |      0x01     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Rec'd Subclass|
+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='MSGCOUNT' anchor='ie.msgcount'>
<t>The purpose of the MSGCOUNT information element is to indicate how many voicemail messages are waiting in a registered user's mailbox. The data field is 2 octets long. If it is set to all 1s, there is at least one message present. Any other value specifies the number of old messages in the high 8 bits and the number of new messages in the low 8 bits.</t>
                                <t>The IAX MSGCOUNT information element MAY be sent with IAX REGACK messages.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x18     |      0x02     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Old messages |  New messages |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='AUTOANSWER' anchor='ie.autoanswer'>
                                <t>The purpose of the AUTOANSWER
                                information element is to request that
                                a call be auto-answered upon receipt
                                of a NEW message that includes the AUTOANSWER information element. Note that this is a request and may or may not be granted by the remote peer. There is no data field with this information element, as its presence alone indicates all necessary information.</t>
                                <t>The AUTOANSWER information element MAY be sent with IAX NEW messages.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x19     |      0x00     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='MUSICONHOLD' anchor='ie.musiconhold'>
<t>The purpose of the MUSICONHOLD information element is to request that music-on-hold be played while a call is in the QUELCH state. The optional data field specifies a music-on-hold class to be used, as UTF-8-encoded data. In the absence of a data field, no music-on-hold class is specified and the IE SHOULD be treated as a generic request for music-on-hold.</t>
                                <t>The MUSICONHOLD information element MAY be sent with IAX QUELCH messages.</t>
                                <t>If no MUSICONHOLD information element is received, music-on-hold is not requested.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x1a     |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
:  Optional Music On Hold Class :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='TRANSFERID' anchor='ie.transferid'>
                                <t>The purpose of the TRANSFERID information element is to identify a transfer across all three peers participating in a transfer event. It carries a number, four octets long, that SHOULD be unique for the duration of the transfer process.</t>
                                <t>The TRANSFERID information element SHOULD be sent with IAX TXREQ and TXCNT messages to aid the peers involved in a transfer in identifying the proper calls. It is not required as long as the transferring peers can positively identify the calls participating in the transfer without the TRANSFERID.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x1b     |      0x04     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       4-octet transfer        |
|           identifier          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='RDNIS' anchor='ie.rdnis'>

<t>The purpose of the RDNIS (Redirected Dialed Number Identification Service) information element is to indicate the referring DNIS. It carries UTF-8-encoded data.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x1c     |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
:      UTF-8-encoded RDNIS      :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='DATETIME' anchor='ie.datetime'>
<t>The DATETIME information element indicates the time a message is sent. This differs from the header time-stamp because that time-stamp begins at 0 for each call, while the DATETIME is a call-independent value representing the actual real-world time. The data field of a DATETIME information element is four octets long and stores the time as follows: 
                                the 5 least significant bits are seconds, the next 6 least significant bits are minutes, the next least significant 5 bits are hours, the next least significant 5 bits are the day of the month, the next least significant 4 bits are the month, and the most significant 7 bits are the year. The year is offset from 2000, and the month is a 1-based index (i.e., January == 1, February == 2, etc.). The timezone of the clock MUST be UTC to avoid confusion between the peers.</t>
                                <t>The DATETIME information element SHOULD be sent with IAX NEW and REGACK messages. However, it is strictly informational.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x1f     |      0x04     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     year    | month |   day   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  hours  |  minutes  | seconds |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='CALLINGPRES' anchor='ie.callingpres'>
                                <t>The purpose of the CALLINGPRES information element is to indicate the calling presentation of a caller. The data field is 1 octet long and contains a value from the table below.</t>
                                <t>The CALLINGPRES information element MUST be sent with IAX NEW messages.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x26     |      0x01     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Calling Pres. |
+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>

                        <?rfc compact="no" ?>
<texttable>
                                <preamble>The following table lists valid calling presentation values:</preamble>

<ttcol>  FLAG </ttcol><ttcol>  PRESENTATION                         </ttcol>
<c>  0x00 </c><c>  Allowed user/number not screened     </c>
<c>  0x01 </c><c>  Allowed user/number passed screen    </c>
<c>  0x02 </c><c>  Allowed user/number failed screen    </c>
<c>  0x03 </c><c>  Allowed network number               </c>
<c>  0x20 </c><c>  Prohibited user/number not screened  </c>
<c>  0x21 </c><c>  Prohibited user/number passed screen </c>
<c>  0x22 </c><c>  Prohibited user/number failed screen </c>
<c>  0x23 </c><c>  Prohibited network number            </c>
<c>  0x43 </c><c>  Number not available                 </c>
                        </texttable>
<?rfc compact="yes"?>
                        
<t>Refer to the IANA Registry for additional IAX Calling Presentation values. </t>
                        
</section>
<section title='CALLINGTON' anchor='ie.callington'>
                                <t>The purpose of the CALLINGTON information element is to indicate the calling type of number of a caller, according to ITU-T Recommendation Q.931 specifications. The data field is 1 octet long and contains data from the table below.</t>
                                <t>The CALLINGTON information element MUST be sent with IAX NEW messages.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x27     |      0x01     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Calling TON  |
+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>

                        <?rfc compact="no" ?>
<texttable>
                                <preamble>The following table lists valid calling type of number values from ITU-T Recommendation Q.931:</preamble>
<ttcol>  VALUE  </ttcol><ttcol> DESCRIPTION                 </ttcol>
<c>  0x00   </c><c> Unknown                     </c>
<c>  0x10   </c><c> International Number        </c>
<c>  0x20   </c><c> National Number             </c>
<c>  0x30   </c><c> Network Specific Number     </c>
<c>  0x40   </c><c> Subscriber Number           </c>
<c>  0x60   </c><c> Abbreviated Number          </c>
<c>  0x70   </c><c> Reserved for extension      </c>
                        </texttable>
<?rfc compact="yes"?>
                        <t>Refer to the IANA Registry for any additional IAX Calling Type of Number values. </t>

</section>

<section title='CALLINGTNS' anchor='ie.callingtns'>
<t>The CALLINGTNS information element indicates the calling transit network selected for a call. Values are chosen according to ITU-T Recommendation Q.931 specifications. The data field is two octets long. The first octet stores the network identification plan in the least significant 
four bits according to the first table below, and the type of network in the next three least significant 
bits according to the second table below. The second octet stores the actual network identification in UTF-8-encoded data.</t>
<t>The CALLINGTNS information element MUST be sent with IAX NEW messages.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x28     |      0x02     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| | TON | Plan  | UTF-8 Net ID  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                                <postamble>The following tables list the valid values for the data field of the 'calling tns' IE.</postamble>
                        </figure>

                        <?rfc compact="no" ?>
<texttable>
                                <preamble>Q.931 Network Identification Plan Values:</preamble>
<ttcol>  BITS   </ttcol><ttcol> DESCRIPTION                       </ttcol>
<c>  0000   </c><c> Unknown                           </c>
<c>  0001   </c><c> Caller Identification Code        </c>
<c>  0011   </c><c> Data Network Identification Code  </c>
                        </texttable>
<?rfc compact="yes"?>

                        <t>Refer to the IAX Transit Network Identification IANA Registry for any additional values. </t>
                        

                        <?rfc compact="no" ?>
<texttable>
                                <preamble>Q.931 Type of Network Values:</preamble>
<ttcol>  BITS   </ttcol><ttcol> DESCRIPTION                           </ttcol>
<c>   000   </c><c> User Specified                        </c>
<c>   010   </c><c> National Network Identification       </c>
<c>   011   </c><c> International Network Identification  </c>
                        </texttable>
<?rfc compact="yes"?>

                        <t>Refer to the IAX Type of Network IANA Registry for any additional values. </t>

</section>
<section title='SAMPLINGRATE' anchor='ie.samplerate'>
                                <t>The purpose of the SAMPLINGRATE information element is to specify to a remote IAX peer the sampling rate in hertz of the audio data being the peer will use when sending data. Its data field is 2 octets long.</t>
                                <t>If the SAMPLINGRATE information element is not specified, a default sampling rate of 8 kHz may be assumed.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x29     |      0x02     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Sampling Rate in Hertz    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='CAUSECODE' anchor='ie.causecode'>
                                <t>The purpose of the CAUSECODE information element is to indicate the reason a call was REJECTed or HANGUPed. It derives from ITU-T Recommendation Q.931. The data field is one octet long and contains an entry from the table below.</t>
                                <t>The CAUSECODE information element SHOULD be sent with IAX HANGUP, REJECT, REGREJ, and TXREJ messages.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x2a     |      0x01     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Cause Code  |
+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
<?rfc compact="no" ?>
<texttable>
<ttcol>NUMBER</ttcol><ttcol>CAUSE</ttcol>
<c>    1    </c><c>  Unassigned/unallocated number                                        </c>
<c>    2    </c><c>  No route to specified transit network                                </c>
<c>    3    </c><c>  No route to destination                                              </c>
<c>    6    </c><c>  Channel unacceptable                                                 </c>
<c>    7    </c><c>  Call awarded and delivered                                           </c>
<c>   16    </c><c>  Normal call clearing                                                 </c>
<c>   17    </c><c>  User busy                                                            </c>
<c>   18    </c><c>  No user response                                                     </c>
<c>   19    </c><c>  No answer                                                            </c>
<c>   21    </c><c>  Call rejected                                                        </c>
<c>   22    </c><c>  Number changed                                                       </c>
<c>   27    </c><c>  Destination out of order                                             </c>
<c>   28    </c><c>  Invalid number format/incomplete number                              </c>
<c>   29    </c><c>  Facility rejected                                                    </c>
<c>   30    </c><c>  Response to status enquiry                                           </c>
<c>   31    </c><c>  Normal, unspecified                                                  </c>
<c>   34    </c><c>  No circuit/channel available                                         </c>
<c>   38    </c><c>  Network out of order                                                 </c>
<c>   41    </c><c>  Temporary failure                                                    </c>
<c>   42    </c><c>  Switch congestion                                                    </c>
<c>   43    </c><c>  Access information discarded                                         </c>
<c>   44    </c><c>  Requested channel not available                                      </c>
<c>   45    </c><c>  Preempted                                                            (causes.h only)</c>
<c>   47    </c><c>  Resource unavailable, unspecified                                    (Q.931 only)</c>
<c>   50    </c><c>  Facility not subscribed                                              (causes.h only)</c>
<c>   52    </c><c>  Outgoing call barred                                                 (causes.h only)</c>
<c>   54    </c><c>  Incoming call barred                                                 (causes.h only)</c>
<c>   57    </c><c>  Bearer capability not authorized                                     </c>
<c>   58    </c><c>  Bearer capability not available                                      </c>
<c>   63    </c><c>  Service or option not available                                      (Q.931 only)</c>
<c>   65    </c><c>  Bearer capability not implemented                                    </c>
<c>   66    </c><c>  Channel type not implemented                                         </c>
<c>   69    </c><c>  Facility not implemented                                             </c>
<c>   70    </c><c>  Only restricted digital information bearer capability is available   (Q.931 only)</c>
<c>   79    </c><c>  Service or option not available                                      (Q.931 only)</c>
<c>   81    </c><c>  Invalid call reference                                               </c>
<c>   82    </c><c>  Identified channel does not exist                                    (Q.931 only)</c>
<c>   83    </c><c>  A suspended call exists, but this call identity does not             (Q.931 only)</c>
<c>   84    </c><c>  Call identity in use                                                 (Q.931 only)</c>
<c>   85    </c><c>  No call suspended                                                    (Q.931 only)</c>
<c>   86    </c><c>  Call has been cleared                                                (Q.931 only)</c>
<c>   88    </c><c>  Incompatible destination                                             </c>
<c>   91    </c><c>  Invalid transit network selection                                    (Q.931 only)</c>
<c>   95    </c><c>  Invalid message, unspecified                                         </c>
<c>   96    </c><c>  Mandatory information element missing                                (Q.931 only)</c>
<c>   97    </c><c>  Message type nonexistent/not implemented                             </c>
<c>   98    </c><c>  Message not compatible with call state                               </c>
<c>   99    </c><c>  Information element nonexistent                                      </c>
<c>  100    </c><c>  Invalid information element contents                                 </c>
<c>  101    </c><c>  Message not compatible with call state                               </c>
<c>  102    </c><c>  Recovery on timer expiration                                         </c>
<c>  103    </c><c>  Mandatory information element length error                           (causes.h only)</c>
<c>  111    </c><c>  Protocol error, unspecified                                          </c>
<c>  127    </c><c>  Internetworking, unspecified                                         </c>
</texttable>
<?rfc compact="yes"?>

<t>Refer to the IAX Cause Codes IANA Registry for any additional values. </t>

</section>
<section title='ENCRYPTION' anchor="ie.encrypt">
<t>The purpose of the ENCRYPTION information element is to indicate what encryption methods are accepted for an IAX peer. The data field is a 2-octet bitmask specifying which encryption methods from the table below are accepted.</t>
<t>The ENCRYPTION information element MAY be sent with IAX NEW and AUTHREQ messages.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x2b     |      0x01     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      Encryption Methods       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
                        <?rfc compact="no" ?>
<texttable>
<preamble>The following table lists valid native encryption methods:</preamble>
<ttcol> METHOD      </ttcol><ttcol> DESCRIPTION     </ttcol>
<c> 0x0001      </c><c>   AES-128      </c> 
                        </texttable>
<?rfc compact="yes"?>

                        <t>Refer to the IAX Encryption Methods IANA Registry for any additional values. </t>


</section>
<section title='CODEC PREFS' anchor='ie.codecs'>
<t>The purpose of the CODEC PREFS information element is to indicate the CODEC preferences of the calling peer. The data field consists of a list of CODECs in the peer's order of preference as UTF-8-encoded data.</t>
                                <t>The CODEC PREFS information element MAY be sent with IAX NEW messages.</t>
                                <t>If the CODEC PREFS information element is absent, CODEC negotiation takes place via the CAPABILITY and FORMAT information elements.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x2d     |  Data Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |
:       CODEC Prefs Data        :
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='RR JITTER' anchor='ie.rrjitter'>
                                <t>The purpose of the Receiver Report (RR) JITTER information element is to indicate the received jitter on a call, per <xref target="RFC3550" />. The data field is 4 octets long and carries the current measured jitter.</t>
                                <t>The RR JITTER information element MAY be sent with IAX PONG messages.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x2e     |      0x04     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Received Jitter       |
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>

</section>
<section title='RR LOSS' anchor='ie.rrloss'>
                                <t>The purpose of the RR LOSS information element is to indicate the number of lost frames on a call, per <xref target="RFC3550" />. The data field is 4 octets long and carries the percentage of frames lost in the first octet, and the count of lost frames in the next 3 octets.</t>
                                <t>The RR LOSS information element MAY be sent with IAX PONG messages.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x2f     |      0x04     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Loss Percent |               |
+-+-+-+-+-+-+-+-+  Loss Count   |
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='RR PKTS' anchor='ie.rrpkts'>
                                <t>The purpose of the RR PKTS information element is to indicate the total number of frames received on a call, per <xref target="RFC3550" />. The data field is 4 octets long and carries the count of frames received.</t>
                                <t>The RR PKTS information element MAY be sent with IAX PONG messages.</t>
                        <figure>
<artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x30     |      0x04     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Frames Received Count      |
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='RR DELAY' anchor='ie.rrdelay'>
                                <t>The purpose of the RR DELAY information element is to indicate the maximum playout delay for a call, per <xref target="RFC3550" />. The data field is 2 octets long and specifies the number of milliseconds a frame may be delayed before it MUST be discarded.</t>
                                <t>The RR DELAY information element MAY be sent with IAX PONG messages.</t>
                        <figure>
<artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x31     |      0x02     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Maximum Playout Delay      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='RR DROPPED' anchor='ie.rrdropped'>
                                <t>The purpose of the RR DROPPED information element is to indicate the total number of dropped frames for a call, per <xref target="RFC3550" />. The data field is 4 octets long and carries the number of frames dropped.</t>
                                <t>The RR DROPPED information element MAY be sent with IAX PONG messages.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x32     |      0x04     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      Total Frames Dropped     |
|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                ]]></artwork>
                        </figure>
</section>
<section title='RR OOO' anchor='ie.rrooo'>
                                <t>The purpose of the RR OOO information element is to indicate the number of frames received out of order for a call, per <xref target="RFC3550" />. The data field is 4 octets long and carries the number of frames received out of order.</t>
                                <t>The RR OOO information element MAY be sent with IAX PONG messages.</t>
                        <figure>
                                <artwork><![CDATA[

                     1
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      0x33     |      0x04     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Frames Received       |
|          Out of Order         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                                ]]></artwork>
                        </figure>
        </section>
        
<section title='OSPTOKEN' anchor='ie.osp'>
        
<t>        The purpose of the OSPTOKEN information element is to carry European Telecommunications Standards Institute (ETSI) Technical Specification 101 321 <xref target="OSP" /> (also referred to as the Open Settlement Protocol or OSP) tokens.  The OSP tokens will be used to provide authorization, authentication and account support for IAX by using the OSP protocol.  The first octet of the data field is the OSP token block index starting from 0. </t>

<t>        The OSPTOKEN information element MAY only be sent with IAX NEW messages. If the token is not supported by the receiver, it is ignored.</t>

<figure>
        <artwork><![CDATA[

                                1
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |      0x34     |  Data Length  |
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |  Block Index  |               |
           +-+-+-+-+-+-+-+-+               +
           |        OSP Token Block        |
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                                ]]></artwork>
                        </figure>
                </section>
        </section>

        <section title="Media Formats" anchor="iax.mediaformats">

                <?rfc compact="no" ?>
<texttable>
                        <preamble>Media Format Values</preamble>
<ttcol>  SUBCLASS  </ttcol><ttcol> DESCRIPTION      </ttcol><ttcol> LENGTH CALCULATION               </ttcol>
<c> 0x00000001 </c><c> G.723.1          </c><c> 4-, 20-, and 24-byte frames of 240 samples </c>
<c> 0x00000002 </c><c> GSM Full Rate    </c><c> 33-byte chunks of 160 samples or 65-byte chunks of 320 samples</c>
<c> 0x00000004 </c><c> G.711 mu-law     </c><c> 1 byte per sample                </c>
<c> 0x00000008 </c><c> G.711 a-law      </c><c> 1 byte per sample                </c>
<c> 0x00000010 </c><c> G.726            </c><c>                                  </c>
<c> 0x00000020 </c><c> IMA ADPCM        </c><c> 1 byte per 2 samples             </c>
<c> 0x00000040 </c><c> 16-bit linear little-endian   </c><c> 2 bytes per sample               </c>
<c> 0x00000080 </c><c> LPC10            </c><c> Variable size frame of 172 samples       </c>
<c> 0x00000100 </c><c> G.729            </c><c> 20-byte chunks of 172 samples   </c>
<c> 0x00000200 </c><c> Speex            </c><c> Variable                         </c>
<c> 0x00000400 </c><c> ILBC             </c><c> 50 bytes per 240 samples         </c>
<c> 0x00000800 </c><c> G.726 AAL2       </c><c>          </c>
<c> 0x00001000 </c><c> G.722            </c><c> 16 kHz ADPCM  </c>
<c> 0x00002000 </c><c> AMR              </c><c> Variable                         </c>
<c> 0x00010000 </c><c> JPEG             </c><c>                                  </c>
<c> 0x00020000 </c><c> PNG              </c><c>                                  </c>
<c> 0x00040000 </c><c> H.261            </c><c>                                  </c>
<c> 0x00080000 </c><c> H.263            </c><c>                                  </c>
<c> 0x00100000 </c><c> H.263p           </c><c>                                  </c>
<c> 0x00200000 </c><c> H.264            </c><c>                                  </c>
                </texttable>
<?rfc compact="yes"?>

                <t>Refer to the IANA Registry for any additional IAX Media Format values. </t>
                
                
</section>
</section>
<section title="Example Message Flows">
                <t>This section includes call flow diagrams for some of the various types of IAX calls that can be made. In each diagram, the '=' character represents a Full Frame and the '-' character represents a Mini Frame. Notes applicable to a generic call may be presented alongside each diagram.</t>

                <section title="Ping/Pong" anchor="iax.cfd.pingpong">
                        <figure>
                                <preamble>PING->PONG</preamble>
                                <artwork><![CDATA[

        Peer A                                Peer B
         ________________________________________
        |                                        |
   T    |                                        |
   i    |  ===PING============================>  |
   m    |                                        |
   e    |  <============================PONG===  |Has same time-stamp 
        |                                        | as received PING.
   |    |  ===ACK=============================>  |Has same time-stamp
   |    |                                        | as received PONG
  \ /   |________________________________________| and original PING.

                                ]]></artwork>
                        </figure>
                </section>

                <section title="Lagrq/Lagrp" anchor="iax.cfd.lagrqlagrp">
                        <figure>
                                <preamble>LAGRQ->LAGRP</preamble>
                                <artwork><![CDATA[

        Peer A                                Peer B
         ________________________________________
        |                                        |
   T    |                                        |
   i    |  ===LAGRQ===========================>  |
   m    |                                        |
   e    |  <===========================LAGRP===  |Same time-stamp as
        |                                        | received LAGRQ.
   |    |  ===ACK=============================>  |Same time-stamp as 
   |    |                                        | received LAGRP and
  \ /   |________________________________________| original LAGRQ.

                                ]]></artwork>
                        </figure>
                </section>

                <section title="Registration" anchor="iax.cfd.registration">
                        <figure>
                                <preamble>Registration of an IAX Peer</preamble>
                                <artwork><![CDATA[

      Registrant  A                     Registrar B
         ________________________________________
        |                                        |
   T    |  ===REGREQ==========================>  |
   i    |                                        |
   m    |  <=========================REGAUTH===  |
   e    |                                        |
        |  ===REGREQ==========================>  |
   |    |                                        |
   |    |  <==========================REGACK===  |
 \ | /  |                                        |
  \|/   |  ===ACK=============================>  |
        |                                        |
        |________________________________________|

                                ]]></artwork>
                        </figure>
                </section>
                <section title="Registration Release" anchor="iax.cfd.registrationrel">
                        <figure>
                                <preamble>Registration Release</preamble>
                                <artwork><![CDATA[

      Registrant A                        Registrar B
         ________________________________________
        |                                        |
   T    |  ===REGREL==========================>  |
   i    |                                        |
   m    |  <=========================REGAUTH===  |
   e    |                                        |
        |  ===REGREL==========================>  |
   |    |                                        |
   |    |  <==========================REGACK===  |
 \ | /  |                                        |
  \|/   |  ===ACK=============================>  |
        |                                        |
        |________________________________________|

                                ]]></artwork>
                        </figure>
                </section>

<section title='Call Path Optimization' anchor="exam.xfer">
<figure>
<preamble>IAX Transfer</preamble>
<artwork><![CDATA[

        Peer L         Peer C                Peer R 
         ________________________________________
        |                 |                      |
   T    |                 |                      |
        | <== TXREQ =====[*]== TXREQ =========>  |C requests transfer
   i    |                 |                      |
        | ========================== TXCNT  ==>  |L sends to R
   m    |                 |                      |
        | <========================= TXACC  ==== |R replies
   e    |                 |                      |R sends Media
        |                 |                      | to L
   |    |                 |                      |
   |    | = TXREADY ====> |                      |L tells C 'ready'
   |    |                 |                      | C stops media to L
   |    |                 |                      |
   |    | <== TXCNT ===========================  |L sends to R
   |    |                 |                      |
   |    | === TXACC ===========================> |R replies
  \ /   |                 |                      |
        |                 | <== TXREADY ======   |R tells C 'ready'
        |                 |                      | C stops media to R
        |                 |                      |
        | <== TXREL =====[*]== TXREL =========>  |C Releases
        |                                        |
        |________________________________________|

]]></artwork>
</figure>
</section>

<section title="IAX Media Call" anchor="iax.cfd.mediacall">
                <figure>
<preamble>Complete end-to-end IAX media exchange</preamble>
                        <artwork><![CDATA[

        Peer A                            Peer B
         ________________________________________ 
        |                                        |
        |  ====NEW============================>  |
   T    |  <=========================AUTHREQ===  |If authentication 
        |                                        |   specified.
   i    |  ====AUTHREP========================>  |
   m    |  <==========================ACCEPT===  |
   e    |  ====ACK============================>  |
        |                                        |
   |    |  <=============Voice (Full Frame)===   |
   |    |  ====ACK===========================>   |
   |    |                                        |
   |    |  <---------Voice Mini Frame (ring)--   |
   |    |  <---------Voice Mini Frame (ring)--   |
   |    |                                        |
 \ | /  |  <=========================RINGING===  |
  \|/   |  ====ACK============================>  |
        |                                        |
        |  <---------Voice Mini Frame (ring)--   |
        |  <---------Voice Mini Frame (ring)--   |
        |                                        |
        |  <==========================ANSWER===  |
        |  ====ACK============================>  |
        |                                        |
        |  ====Voice (Full Frame)=============>  |
        |  <=============================ACK===  |
        |                                        |
        |                                        |
        |  <-----------Voice Mini Frames------>  |  exchange occurs
        |  <---               .            --->  |
        |  <---               .            --->  |
        |  <---               .            --->  |
        |  <-----------Voice Mini Frames------>  |
        |                                        |
        |                                        |
        |  ====Voice (Full Frame)=============>  |  (note 1) 
        |  <===ACK=============================  |  (note 2)
        |                                        |  (every 65536 ms)
        |  <=============Voice (Full Frame)====  |  (note 3) 
        |  ====ACK============================>  |
        |                                        |
        |                                        |
        |  <-----------Voice Mini Frames------>  |
        |  <---               .            --->  |
        |  <---               .            --->  |
        |  <---               .            --->  |
        |  <-----------Voice Mini Frames------>  |
        |                                        |
        |                                        |
        |  ====HANGUP=========================>  |  Either can hangup
        |  <=============================ACK===  |
        |________________________________________|


Note 1: Mini Frames carry the low 16 bits of the peer's 
        32-bit time-stamp.
Note 2: Full frames resync the 32-bit time-stamp when the 16-bit 
        time-stamp overflows.
Note 3: Each side has its own 32-bit time-stamp so each side needs 
        to sync at 16-bit overflow.

                                ]]></artwork>
                        </figure>

                </section>

                <section title="IAX Media Call via an IAX Device" anchor="iax.cfd.iaxdevice">
                        <figure>
                                <preamble>An IAX peer is not required
                                to maintain a complete dialplan. In
                                the event that a user wishes to dial
                                from an IAX peer that does not switch its own calls, the following call flow diagram may represent the transaction:</preamble>
                                <artwork><![CDATA[

        Peer A (IAX Device)                 Peer B (Dialplan Server)
         ________________________________________ 
        |                                        |
        |  ====NEW============================>  |
   T    |  <=========================AUTHREQ===  |  If auth specified
   i    |  ====AUTHREP========================>  |
   m    |  <==========================ACCEPT===  |
   e    |  ====ACK============================>  |
        |                                        |
        |  ====DPREQ==========================>  |  (Note 1)
   |    |  <===========================DPREP===  |
   |    |                                        |
   |    |  ====DIAL===========================>  |
   |    |  <========================PROGRESS===  |
   |    |  ====ACK============================>  |
 \ | /  |  <==========================ANSWER===  |
  \|/   |  ====ACK============================>  |
        |                                        |
        |  ====Voice (Full Frame)=============>  |
        |  <=============================ACK===  |
        |  <=============Voice (Full Frame)====  |
        |  ====ACK============================>  |
        |                                        |
        |                                        |
        |  <-----------Voice Mini Frames------>  |  Media exchange 
        |  <---               .            --->  |
        |  <---               .            --->  |
        |  <---               .            --->  |
        |  <-----------Voice Mini Frames------>  |
        |                                        |
        |                                        |
        |  ====Voice (Full Frame)=============>  |  (note 2)
        |  <===ACK=============================  |  (note 3) 
        |                                        |  (every 65536 ms)
        |  <=============Voice (Full Frame)====  |  (Note 4)
        |  ====ACK============================>  |
        |                                        |
        |                                        |
        |  <-----------Voice Mini Frames------>  |
        |  <---               .            --->  |
        |  <---               .            --->  |
        |  <---               .            --->  |
        |  <-----------Voice Mini Frames------>  |
        |                                        |
        |                                        |
        |  ====HANGUP=========================>  |  Either can hangup
        |  <=============================ACK===  |
        |________________________________________|

Note 1: There will be multiple DPREQ/DPREPs per call unless 
        dialed number is 1 digit long.
Note 2: Mini Frames carry the low 16 bits of the peer's 
        32-bit time-stamp.
Note 3: Full Frames resync the 32-bit time-stamp when the 16 bit 
        time-stamp overflows.
Note 4: Each side has its own 32-bit time-stamp so each side needs 
        to sync at 16-bit overflow.
                                ]]></artwork>
                        </figure>

                </section>
        </section>

<section title="Security Considerations" anchor="Security"> 

<t>
IAX is a binary protocol for setting up point-to-point call legs that
include both media and signaling.  As such, it is simpler to secure than
other more general purpose VoIP protocols; however, security remains a
difficult task and various aspects of the protocol must be examined to
identify risks.
</t>

<t>
IAX registration is an area that requires careful attention.  Previous
protocol versions supported cleartext passwords; this feature has been eliminated.
The MD5 and RSA alternatives offer much higher security.  Although not
specified by the IAX protocol, some implementations limit the number
of registrants per account to one.  A subsequent registrant with
the same credentials would overwrite the prior and receive the calls
destined for that user.  Theft of service is trivial once a malicious
caller has the ability to authenticate.  In addition, since distinct 
cause codes are returned to erroneous registration attempts, an attacker 
can distinguish between existent and nonexistent users in a registration 
system, thus resulting in a possible directory harvest attack.
</t>

<t>
The IAX protocol protects against message replay by using a challenge
response method. The IAX registrar or server challenges each call or
registration with an arbitrary MD5 or RSA challenge.  The response and
subsequent authorization relies upon knowledge of a shared secret.  Since
the server typically chooses a challenges using a random-number-based
technique, the challenge set is large, making replay highly unlikely.
</t>

<t>
Although operation in the following manner is not recommended, the IAX
protocol does permit servers to forego the challenge process described
above. This open approach is inherently insecure and does nothing to
prevent unauthorized usage.
</t>

<t>
Call Encryption in IAX starts by utilizing static keys.   Once
negotiated, the key may be changed for the remainder of the call. Once
the initial key is compromised, all subsequent calls are subject
to interception.  A more secure implementation would update the key
frequently and as early as practical during each call.
</t>

<t>
The IAX protocol is also susceptible to eavesdropping.  Call Detail,
i.e., who is calling whom, is sent in unencrypted binary whether or
not the
call is to be encrypted.  Without encryption, call content, i.e.,
audio and video, may be easily intercepted.  However, this content is
protected if the call is encrypted.
</t>

<t>
Man-in-the-middle attacks are a threat to IAX if encryption is not
used. This form of attack permits message insertion, deletion,  and
modification such that a call may be redirected or the audio or video
replaced in either or both directions for the complete or any portion
of a call.  If encryption is used, the call is protected end to end.
Note: an initial NEW message in an encrypted call is unencrypted and
could be changed; however, this is limited to a denial-of-service
(DoS) attack
because subsequent messages containing the same address information are
redelivered in an encrypted form.
</t>

<t>
DoS attacks can take at least two forms in IAX.  One is
simply overloading the peers with bogus requests.  A carefully implemented
IAX peer would identify this situation and raise an alarm or take other
protective action.
</t>

<t>
Another form of DoS against an existing call is an
engineered attack against an existing call.  Injecting media, causing
excess processing by inserting out-of-order packets, and sending commands
such as hangup or transfer.  These attacks require close monitoring
of the binary channel to be successful as the message sequence numbers
would need to be synchronized with the protocol exchange.
</t>

<t>
Of course, providing lower-layer security with Datagram Transport
   Layer Security (DTLS) <xref target="RFC4347"/>, or IPsec <xref target="RFC4301"/>, would
address many of these potential issues.  
</t>

<t> Unicode <xref target="RFC3629" /> and stringprep <xref target="RFC3454" /> security considerations also
   apply.</t>

</section>
<section title="IANA Considerations"> <t>
        
        In order to facilitate the orderly extension of the IAX
protocol, several IANA registries have been created.  These registry
requests are found in <xref target="RFC5457" />.

In addition, the "iax" URI scheme has been registered;
see <xref target='sec.uri'/>.  Also, IAX has been assigned a
	well-known UDP port number (4569).

</t> </section>
<section title="Implementation Notes"> <t>
The original IAX implementation was in Asterisk, the open-source PBX, but <xref target="wikipedia" /> lists thirteen other publicly available implementations at the time of this writing. Some of these implementations used draft versions of this specification. Many others were developed using the Asterisk source code as the only specification.  While this approach is definitive, it is very difficult to determine the protocol's higher-level logic and optimize it for the particular programming language or application environment.  
Interoperability of these implementations cannot be guaranteed. 
</t>
<t>
Aside from the trials and tribulations of reverse engineering the source code to create a new implementation, the key lessons learned involve the use of threads, support of international character sets, security, and improved controls to limit interference during DoS attacks.   
</t><t>
The current Asterisk implementation has a limited number of IAX worker threads and, as a result, its  scalability is limited, but it can run on low end machines where threads may not be freely available.  Improving the threading model will undoubtedly improve performance. 
</t><t>
Internationalization and localization are issues that were not originally addressed by most implementations.  It was always on the IAX developers' road map, but never a priority. While creating this document,  we formalized support for UTF-8 encoding to better support internationalization and localization.
</t><t>
With regards to security, many IAX implementations permit cleartext authentication.  This method is not secure and should not be used. 
</t><t>
Recently, some issues have been raised regarding server robustness when under a DoS attack.    IAX servers that support unauthenticated requests can receive the equivalent of a SYN attack.  To mitigate the impact of these attacks,  various controls to limit the number of unauthenticated calls and the number of calls per user may be added to the implementation. Other approaches, such as 
transferring the call to another, more protected port or using IP rate limiting when excessive failures are detected, are also suggested. 
</t><t>
Lastly, given the open nature of the protocol and implementations,
it is very easy to extend. This situation makes Postel's Robustness Principle, "Be conservative in what you do, be liberal in what you accept from others", essential to any successful IAX implementation.
</t>

</section>
<section title="Acknowledgments"> <t>
This work was supported by Internet Foundation Austria.

The authors would like to thank 
Birgit Arkesteijn, Marc Blanchet, Mohamed Boucadair, Steve Kann, Olle Johansson, Alexander Mayrhofer, 
Tim Panton, and Peter Saint-Andre for their extensive review and technical input. We would also like to 
thank Jim Dalton, Christopher DeMarco, Frank Ellermann, Daniel Medeiros, Dimitri E. Prado, Leif Madson, and 
Tilghman Lesher for their support and suggestions.


</t> </section>

   </middle>

    <back>
        <references title="Normative References">
&rfc1321;
&rfc1851;
&rfc2119;
&rfc3261;
&rfc4646; 
&rfc4647; 
&rfc3447;
&rfc3454; 
&rfc3491; 
&rfc3550; 
&rfc3629; 
&rfc3986;
&rfc4347; 
&rfc5234;

<reference anchor="E164">
        <front>
        <title abbrev="E.164">The International Public Telecommunication Number Plan</title>

        <author> <organization>ITU-T</organization></author>
        <date year="1997" month="May"/>
        </front>
        <seriesInfo name="" value="Recommendation E.164"/>
</reference>

<reference anchor="AES">
        <front>
        <title abbrev="FIPS-197">FIPS-197, Announcing the Advanced Encryption Standard</title>

        <author> <organization>U.S. Department of Commerce/N.I.S.T.</organization></author>
        <date year="2001" month="November"/>
        </front>
</reference>

<reference anchor="OSP">
        <front>
        <title abbrev="OSP">
                        Telecommunications and Internet Protocol 
                        Harmonization Over Networks (TIPHON) Release 4; 
                        Open Settlement Protocol (OSP) for 
                        Inter-Domain pricing, authorization 
                        and usage exchange</title> 
<author> <organization>European Telecommunications Standards Institute</organization></author>
        <date year="2003" month="November"/>
        </front>
</reference>

<!-- W3C.REC-html401-19991224 -->

<reference anchor='html401'
           target='http://www.w3.org/TR/1999/REC-html401-19991224'>
<front>
<title>HTML 4.01 Specification</title>

<author initials='I.' surname='Jacobs' fullname='Ian Jacobs'>
    <organization />
</author>

<author initials='D.' surname='Raggett' fullname='David Raggett'>
    <organization />
</author>

<author initials='A.' surname='Hors' fullname='Arnaud Le Hors'>
    <organization />
</author>

<date month='December' day='24' year='1999' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-html401-19991224' />
<format type='HTML' target='http://www.w3.org/TR/1999/REC-html401-19991224' />
</reference>



        </references>

        <references title="Informative References">
&rfc4566; 
&rfc4301; 
&rfc3174; 
&rfc3435; 
&rfc3525; 
&rfc3761;
&rfc4733; 
&rfc4734; 
&rfc4395; 
&rfc5125;

<reference anchor="wikipedia" target="http://en.wikipedia.org/wiki/IAX">
        <front>
        <title>Inter-Asterisk eXchange</title>
        <author><organization>Wikipedia</organization></author>
        </front>
</reference>

<reference anchor="PKCS">
        <front>
        <title abbrev="PKCS">PKCS #1 v2.0: RSA Cryptography Standard</title>
        <author><organization>RSA Laboratories</organization></author>
        <date year="1998" month="October"/>
        </front>
</reference>

<reference anchor="RFC5457">
        <front>
        <title abbrev="IAX IANA">IANA Considerations for IAX: Inter-Asterisk eXchange Version 2</title>
        <author initials="E." surname="Guy" fullname="Ed
        Guy"><organization /></author>
        <date month="January" year="2010" />
        </front>
        <seriesInfo name="RFC" value="5457"/>
</reference>
        </references>
    </back>
</rfc>
				   
