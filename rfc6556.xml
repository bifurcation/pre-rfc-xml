<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- Some of the more generally applicable PIs that most I-Ds might want to use -->
<!-- Try to enforce the ID-nits conventions and DTD validity -->
<?rfc strict="yes" ?>
<!-- Items used when reviewing the document -->
<?rfc comments="no" ?>
<!-- Controls display of <cref> elements -->
<?rfc inline="no" ?>
<!-- When no, put comments at end in comments section, otherwise, put inline -->
<?rfc editing="no" ?>
<!-- When yes, insert editing marks: editing marks consist of a string such as <29> printed in the blank line at the beginning of each paragraph of text. -->
<!-- Create Table of Contents (ToC) and set some options for it.  Note the ToC may be omitted for very short documents,but idnits insists on a ToC if the document has more than 15 pages. -->
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<!-- If "yes" eliminates blank lines before main section entries. -->
<?rfc tocdepth="3"?>
<!-- Sets the number of levels of sections/subsections... in ToC -->
<!-- Choose the options for the references.  Some like symbolic tags in the references (and citations) and others prefer numbers. The RFC Editor always uses symbolic tags.  The tags used are the anchor attributes of the references. -->
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<!-- If "yes", causes the references to be sorted in order of tags.  This doesn't have any effect unless symrefs is "yes" also. -->
<!-- These two save paper: Just setting compact to "yes" makes savings by not starting each main section on a new page but does not omit the blank lines between list items.  If subcompact is also "yes" the blank lines between list items are also omitted. -->
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<!-- end of list of popular I-D processing instructions -->
<!-- end of list of processing instructions -->
<?rfc rfcedstyle="yes" ?>

<rfc number="6556" category="info"
     ipr="trust200902" submissionType="IETF" consensus="yes">
  <front>
    <title>Testing Eyeball Happiness</title>

    <author fullname="Fred Baker" initials="F.J." surname="Baker">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street></street>

          <city>Santa Barbara</city>

          <code>93117</code>

          <region>California</region>

          <country>USA</country>
        </postal>

        <email>fred@cisco.com</email>
      </address>
    </author>

    <date month="March" year="2012" />

    <area>Operations and Management</area>

    <workgroup>Benchmarking Methodology</workgroup>

<!-- [rfced] Please insert any keywords (beyond those that appear in
the title) for use on http://www.rfc-editor.org/rfcsearch.html. -->

<keyword>example</keyword>

    <abstract>
      <t>The amount of time it takes to establish a session using common
      transport APIs in dual-stack networks and networks with filtering such
      as proposed in BCP 38 is a barrier to IPv6 deployment. This note
      describes a test that can be used to determine whether an application
      can reliably establish sessions quickly in a complex environment such as
      dual-stack (IPv4+IPv6) deployment or IPv6 deployment with multiple
      prefixes and upstream ingress filtering. This test is not a test of a
      specific algorithm, but of the external behavior of the system as a
      black box. Any algorithm that has the intended external behavior will be
      accepted by it.</t>
    </abstract>

  </front>

  <middle>

    <section title="Introduction">
      <t>The <xref target="RFC6555">Happy
      Eyeballs</xref> specification notes an issue in deployed multi-prefix
      IPv6-only and dual-stack networks, and proposes a correction. <xref
      target="RFC5461"></xref> similarly looks at TCP's response to so-called
      "soft errors" (ICMP host and network unreachable messages), pointing out
      an issue and a set of possible solutions.</t>

      <t>In a dual-stack network (i.e., one that contains both <xref
      target="RFC0791">IPv4</xref> and <xref target="RFC2460">IPv6</xref>
      prefixes and routes), or in an IPv6-only network that uses multiple
      prefixes allocated by upstream providers that implement <xref
      target="RFC2827">BCP 38 ingress filtering</xref>, the fact that two
      hosts that need to communicate have addresses using the same
      architecture does not imply that the network has usable routes
      connecting them, or that those addresses are useful to the applications
      in question. In addition, the process of establishing a session using
      the <xref target="RFC3493">sockets API</xref> is generally described in
      terms of obtaining a list of possible addresses for a peer (which will
      normally include both IPv4 and IPv6 addresses) using getaddrinfo() and
      trying them in sequence until one succeeds or all have failed. This
      naive algorithm, if implemented as described, has the side effect of
      making the worst-case delay in establishing a session far longer than
      human patience normally allows.</t>

      <t>This has the effect of discouraging users from enabling IPv6 in their
      equipment or content providers from offering AAAA records for their
      services.</t>

      <t>This note describes a test to determine how quickly an application
      can reliably open sessions in a complex environment, such as dual-stack
      (IPv4+IPv6) deployment or IPv6 deployment with multiple prefixes and
      upstream ingress filtering. This is not a test of a specific algorithm,
      but a measurement of the external behavior of the application and its
      host system as a black box. The "happy eyeballs" question is this: how
      long does it take an application to open a session with a server or
      peer, under best-case and worst-case conditions?</t>

      <t>The methods defined here make the assumption that the initial
      communication setup of many applications can be summarized by the
      measuring the DNS query/response and transport-layer handshaking,
      because no application-layer communication takes place without these
      steps.</t>

      <t>The methods and metrics defined in this note are ideally suited for
      laboratory operation, as this affords the greatest degree of control to
      modify configurations quickly and produce consistent results.</t>

      <t>However, if the device under test is operated as a single user with
      limited query and stream generation, then there's no concern about
      overloading production network devices with a single "set of eyeballs".
      Therefore, these procedures and metrics MAY be applicable to a production
      network application, as long as the injected traffic represents a single
      user's typical traffic load, and the testers adhere to the precautions
      of the relevant network with respect to re-configuration of devices in
      production.</t>

    <section title="Requirements">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref>.</t>
    </section>

    </section>

    <section anchor="test" title="Measuring Eyeball Happiness">
      <t>This measurement determines the amount of time it takes an
      application to establish a session with a peer in the presence of at
      least one IPv4 and multiple IPv6 prefixes and a variety of network
      behaviors. ISPs are reporting that a host (Mac OS X, Windows, Linux,
      FreeBSD, etc.) that has more than one address (an IPv4 and an IPv6
      address, two global IPv6 addresses, etc.) may serially try addresses,
      allowing each TCP setup to expire, taking several seconds for each
      attempt. There have been reports of lengthy session setup times -- in
      various application and OS combinations, anywhere from multi-second to
      half an hour -- as a result. The amount of time necessary to establish
      communication between two entities should be approximately the same
      regardless of the type of address chosen or the viability of routing in
      the specific network; users will expect this time to be consistent with
      their current experience (else, happiness is at risk).</t>

      <section anchor="testbed" title="Happy Eyeballs Test-Bed Configuration">
        <t>The configuration of equipment and applications is as shown in
        <xref target="test1"></xref>.</t>

<!-- [rfced] Throughout this document, should 'db8' be changed to 'db8'
in order to follow the guidance from RFC 5952 regarding use of 
lowercase in IPv6 addresses? (This includes figures.)

For example:
            +--------+ |                      |198.51.100.0/24
            |Protocol| |192.0.2.0/24          |2001:db8:0:2::/64
            |Analyzer+-+2001:db8:1:0::/64     |2001:db8:1:4::/64
            +--------+ |2001:db8:0:1::/64     |2001:db8:2:4::/64
                       |                      |
               +-----+ |                      | +-----+
               |Alice+-+                      +-+ Bob |
               +-----+ | +-------+  +-------+ | +-----+
                       +-+Router1|  |Router2+-+
               +-----+ | +-----+-+  +-+-----+ |
               | DNS +-+       |      |       |
               +-----+ |      -+------+-      |
                       |    203.0.113.0/24    |
                       |    2001:db8:0:3::/64 |

                    Figure 1: Generic Test Environment
-->

        <figure anchor="test1" title="Generic Test Environment">
          <artwork align="center"><![CDATA[
+--------+ |                      |198.51.100.0/24
|Protocol| |192.0.2.0/24          |2001:db8:0:2::/64
|Analyzer+-+2001:db8:1:0::/64     |2001:db8:1:4::/64
+--------+ |2001:db8:0:1::/64     |2001:db8:2:4::/64
           |                      |
   +-----+ |                      | +-----+
   |Alice+-+                      +-+ Bob |
   +-----+ | +-------+  +-------+ | +-----+
           +-+Router1|  |Router2+-+
   +-----+ | +-----+-+  +-+-----+ |
   | DNS +-+       |      |       |
   +-----+ |      -+------+-      |
           |    203.0.113.0/24    |
           |    2001:db8:0:3::/64 |
]]></artwork>
        </figure>

        <t>Alice is the unit being measured, the computer running the process
        that will establish a session with Bob for the application in
        question. DNS is represented in the diagram as a separate system, as
        is the protocol analyzer that will watch Alice's traffic. This is not
        absolutely necessary; if one computer can run tcpdump and a DNS server
        process -- and for that matter, can subsume the routers -- that is
        acceptable. The units are separated in the test for purposes of
        clarity.</t>

        <t>On each test run, configuration is performed in Router 1 to permit
        only one route to work. There are various ways this can be
        accomplished, including but not limited to installing:<list
            style="symbols">
            <t>a filter that drops datagrams to Bob resulting in an ICMP
            "administratively prohibited",</t>

            <t>a filter that silently drops datagrams to Bob,</t>

            <t>a null route or removing the route to one of Bob's prefixes,
            resulting in an ICMP "destination unreachable", and</t>

            <t>a middleware program that responds with a TCP RST.</t>

            <t>Path MTU issues</t>
          </list></t>

        <t>The <xref target="RFC1191">Path MTU Discovery</xref> <xref
        target="RFC1981"></xref> matter requires some explanation. With IPv6,
        and with IPv4, when "Do Not Fragment" is set, a router with a message
        too large for an interface discards it and replies with an ICMPv4
        "Destination Unreachable: Datagram Too Big" or ICMPv6 "Packet Too
        Big". If this packet is lost, the source doesn't know what size to
        fragment to and has no indication that fragmentation is required. A
        configuration for this scenario would set the MTU on 203.0.113.0/24 or
        2001:db8:0:3::/64 to the smallest allowed by the address family (576
        or 1280) and disable generation of the indicated ICMP message. Note
        that <xref target="RFC4821"></xref> is intended to address these
        issues.</t>

        <t>The tester should try different methods to determine whether
        variances in this configuration make a difference in the test. For
        example, one might find that the application under test responds
        differently to a TCP RST than to a silent packet loss. Each of these
        scenarios should be tested; if doing so is too difficult, the most
        important is the case of silent packet loss, as it is the worst case.</t>
      </section>

      <section anchor="procedure" title="Happy Eyeballs Test Procedure">
        <t>Consider a network as described in <xref target="testbed"></xref>.
        Alice and Bob each have a set of one or more IPv4 and two or more IPv6
        addresses. Bob's are in DNS, where Alice can find them; Alice's and
        others' may be there as well, but they are not relevant to the test. Routers
        1 and 2 are configured to route the relevant prefixes. Different
        measurement trials revise an access list or null route in Router 1
        that would prevent traffic Alice-&gt;Bob using each of Bob's
        addresses. If Bob has a total of N addresses, we run the measurement
        at least N times, permitting exactly one of the addresses to enjoy end-to-end communication each time. If the DNS service randomizes the
        order of the addresses, this may not result in a test requiring
        establishment of a connection to all of the addresses; in this case,
        the test will have to be run repeatedly until in at least one instance
        a TCP SYN or its equivalent is seen for each relevant address. The
        tester either should flush the resolver cache between iterations, to
        force repeated DNS resolution, or should wait for at least the DNS RR
        TTL on each resource record. In the latter case, the tester should
        also observe DNS re-resolving; if not, the application is not
        correctly using DNS.</t>

        <t>This specification assumes common LAN technology with no competing
        traffic and nominal propagation delays, so that they are not a factor
        in the measurement.</t>

        <t>The objective is to measure the amount of time required to
        establish a session. This includes the time from Alice's initial DNS
        request through one or more attempts to establish a session to the
        session being established, as seen in the LAN trace. The simplest way
        to measure this will be to put a traffic analyzer on Alice's point of
        attachment and capture the messages exchanged by Alice.</t>

        <figure anchor="tcpflow" title="Message Flow Using TCP">
          <artwork align="center"><![CDATA[
 DNS Server                   Alice                    Bob
     |                          |                       |
 1.  |<--www.example.com A------|                       |
 2.  |<--www.example.com AAAA---|                       |
 3.  |---198.51.100.1---------->|                       |
 4.  |---2001:db8:0:2::1------->|                       |
 5.  |                          |                       |
 6.  |                          |--TCP SYN, IPv6--->X   |<***********
 7.  |                          |--TCP SYN, IPv6--->X   |     |
 8.  |                          |--TCP SYN, IPv6--->X   | TCP 3wHS
 9.  |                          |                       |   Time
10.  |                          |--TCP SYN, IPv4------->|(any family)
11.  |                          |<-TCP SYN+ACK, IPv4----|     |
12.  |                          |--TCP ACK, IPv4------->|<***********
]]></artwork>
        </figure>

        <t>In a TCP-based application (<xref target="tcpflow"></xref>), that
        would be from the DNS request (line 1) through the first completion
        of a TCP three-way handshake (line 12), which is abbreviated "3wHS" above.</t>

        <figure anchor="udpflow" title="Message Flow Using UDP">
          <artwork align="center"><![CDATA[
DNS Server                   Alice                    Bob
     |                          |                       |
 1.  |<--www.example.com A------|                       |
 2.  |<--www.example.com AAAA---|                       |
 3.  |---198.51.100.1---------->|                       |
 4.  |---2001:db8:0:2::1------->|                       |
 5.  |                          |                       |
 6.  |                          |--UDP Request, IPv6-->X|<---------
 7.  |                          |--UDP Request, IPv6-->X|  first
 8.  |                          |--UDP Request, IPv6-->X|  request/
 9.  |                          |                       |  response
10.  |                          |--UDP Request, IPv4--->|  success
11.  |                          |<-UDP Response, IPv4---|<---------
]]></artwork>
        </figure>

        <t>In a UDP-based application (<xref target="udpflow"></xref>), that
        would be from the DNS request (line 1) through one or more UDP
        Requests (lines 6-10) until a UDP Response is seen (line 11).</t>

        <t>When using other transports, the methodology will have to be
        specified in context; it should measure the same event.</t>
      </section>

      <section anchor="metrics" title="Metrics for Happy Eyeballs">
        <t>The measurements taken are the duration of the interval from the
        initial DNS request until the session is seen to have been
        established, as described in <xref target="procedure"></xref>. We are
        interested in the shortest and longest durations (which will most
        likely be those that send one SYN and succeed and those that send a
        SYN to each possible address before succeeding in one of the
        attempts), and the pattern of attempts sent to different addresses.
        The pattern may be simply to send an attempt every &lt;time
        interval&gt;, or it may be more complex; as a result, this is in part
        descriptive.</t>

        <t>ALL measurement events on the sending and receiving of messages
        SHALL be observed at Alice's attachment point and timestamps
        SHOULD be applied upon reception of the last bit of the IP information
        field. Use of an alternate timing reference SHALL be noted.</t>

        <section anchor="session-metric"
                 title="Metric: Session Setup Interval">
          <t><list style="hanging">
              <t hangText="Name:">Session Setup Interval</t>

              <t hangText="Description:">The session setup interval MUST be
              the time beginning with the first DNS query sent (observed at
              Alice's attachment) and ending with successful transport
              connection establishment (as indicated in line 12 of <xref
              target="tcpflow"></xref> and line 11 of <xref
              target="udpflow"></xref>). This interval is defined as the
              session setup interval.</t>

              <t>This test will be run several times, once for each possible
              combination of destination address (configured on Bob) and
              failure mode (configured on Router 1).</t>

              <t hangText="Methodology:">In the LAN analyzer trace, note the
              times of the initial DNS request and the confirmation that the
              session is open as described in <xref
              target="procedure"></xref>. If the session is not successfully
              opened, possibly due to Alice aborting the attempt, the Session
              Setup Interval is considered to be infinite.</t>

              <t hangText="Units:">Session setup time is measured in
              milliseconds.</t>

              <t hangText="Measurement Point(s):">The measurement point is at
              Alice's LAN interface, both sending and receiving, observed
              using a program such as tcpdump running on Alice or an external
              analyzer.</t>

              <t hangText="Timing:">The measurement program or external
              analyzer MUST run for a duration sufficient to capture the
              entire message flow as described in <xref
              target="procedure"></xref>. Measurement precision MUST be
              sufficient to maintain no more than 0.1 ms error over a
              60-second interval. 1 part per million (ppm) precision would suffice.</t>
            </list></t>
        </section>

        <section anchor="Max-metric"
                 title="Metric: Maximum Session Setup Interval">
          <t><list style="hanging">
              <t hangText="Name:">Maximum Session Setup Interval</t>

              <t hangText="Description:">The maximum session setup interval is
              the longest period of time observed for the establishment of a
              session as described in <xref
              target="session-metric"></xref>.</t>

              <t hangText="Methodology:">See Session Setup Interval.</t>

              <t hangText="Units:">Session setup time is measured in
              milliseconds.</t>

              <t hangText="Measurement Point(s):">See Session Setup
              Interval.</t>

              <t hangText="Timing:">The measurement program or external
              analyzer MUST run for a duration sufficient to capture the
              entire message flow as described in <xref
              target="procedure"></xref>. Measurement precision MUST be
              sufficient to maintain no more than 0.1 ms error over a 60-second interval. 1 ppm precision would suffice.</t>
            </list></t>
        </section>

        <section anchor="Min-metric"
                 title="Metric: Minimum Session Setup Interval">
          <t><list style="hanging">
              <t hangText="Name:">Minimum Session Setup Interval</t>

              <t hangText="Description:">The minimum session setup interval is
              the shortest period of time observed for the establishment of a
              session.</t>

              <t hangText="Methodology:">See Session Setup Interval.</t>

              <t hangText="Units:">Session setup time is measured in
              milliseconds.</t>

              <t hangText="Measurement Point(s):">See Session Setup
              Interval.</t>

              <t hangText="Timing:">The measurement program or external
              analyzer MUST run for a duration sufficient to capture the
              entire message flow as described in <xref
              target="procedure"></xref>. Measurement precision MUST be
              sufficient to maintain no more than 0.1 ms error over a 60-second interval. 1 ppm precision would suffice.</t>
            </list></t>
        </section>

        <section anchor="Variation-metric"
                 title="Descriptive Metric: Attempt Pattern">
          <t><list style="hanging">
              <t hangText="Name:">Attempt pattern</t>

              <t hangText="Description: ">The Attempt Pattern is a description
              of the observed pattern of attempts to establish the session. In
              simple cases, it may be something like "Initial TCP SYNs to a
              new address were observed every &lt;so many&gt; milliseconds";
              in more complex cases, it might be something like "Initial TCP
              SYNs in IPv6 were observed every &lt;so many&gt; milliseconds,
              and other TCP SYNs using IPv4 were observed every &lt;so
              many&gt; milliseconds, but the two sequences were independent."
              It may also comment on retransmission patterns if observed.</t>

              <t hangText="Methodology:">The traffic trace is analyzed to
              determine the pattern of initiation.</t>

              <t hangText="Units:">milliseconds.</t>

              <t hangText="Measurement Point(s):">The measurement point is at
              Alice's LAN interface, observed using a program such as tcpdump
              running on Alice or an external analyzer.</t>

              <t hangText="Timing:">The measurement program or external
              analyzer MUST run for a duration sufficient to capture the
              entire message flow as described in <xref
              target="procedure"></xref>. Measurement precision MUST be
              sufficient to maintain no more than 0.1 ms error over a 60-second interval. 1 ppm precision would suffice.</t>
            </list></t>
        </section>
      </section>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>This note doesn't address security-related issues.</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>This note was discussed with Dan Wing, Andrew Yourtchenko, and
      Fernando Gont. In the Benchmark Methodology Working Group, Al Morton,
      David Newman, Sarah Banks, and Tore Anderson made comments.</t>
    </section>

  </middle>

  <back>
    <!-- references split to informative and normative -->

    <references title="Normative References">
      <?rfc include="reference.RFC.2119" ?>



<reference anchor='RFC6555'>
<front>
<title>Happy Eyeballs: Success with Dual-Stack Hosts</title>

<author initials='D' surname='Wing' fullname='Dan Wing'>
    <organization />
</author>

<author initials='A' surname='Yourtchenko' fullname='Andrew Yourtchenko'>
    <organization />
</author>

<date month='February' year='2012' />

</front>

<seriesInfo name='RFC' value='6555'/>
</reference>

    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.0791" ?>

      <?rfc include="reference.RFC.2460" ?>

      <?rfc include="reference.RFC.1191" ?>

      <?rfc include="reference.RFC.1981" ?>

      <?rfc include="reference.RFC.2827" ?>

      <?rfc include="reference.RFC.3493" ?>

      <?rfc include="reference.RFC.4821" ?>

      <?rfc include="reference.RFC.5461" ?>
    </references>
  </back>
</rfc>
