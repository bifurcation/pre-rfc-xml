<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="no"?>
<?rfc tocdepth="2"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc category="std" number="8263" ipr="trust200902" submissionType="IETF"
     consensus="yes">

  <front>
    <title abbrev="GROUPKEY-PUSH ACK">Group Domain of Interpretation (GDOI) GROUPKEY-PUSH Acknowledgement&nbsp;Message</title>

    <author fullname="Brian Weis" initials="B.W." surname="Weis">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>170 W. Tasman Drive</street>
          <city>San Jose</city>
          <code>95134-1706</code>
          <region>California</region>
          <country>United States of America</country>
        </postal>
        <phone>+1-408-526-4796</phone>
        <email>bew@cisco.com</email>
      </address>
    </author>

    <author fullname="Umesh Mangla" initials="U.M." surname="Mangla">
      <organization>Juniper Networks Inc.</organization>
      <address>
        <postal>
          <street>1133 Innovation Way</street>
          <city>Sunnyvale</city>
          <region>California</region>
          <code>94089</code>
          <country>United States of America</country>
        </postal>
        <phone>+1-408-936-1022</phone>
        <email>umangla@juniper.net</email>
      </address>
    </author>

    <author fullname="Thomas Karl" initials="T.K." surname="Karl">
      <organization>Deutsche Telekom</organization>
      <address>
        <postal>
          <street>Landgrabenweg 151</street>
          <city>Bonn</city>
          <region></region>
          <code>53227</code>
          <country>Germany</country>
        </postal>
        <phone>+49-228-18138122</phone>
        <email>thomas.karl@telekom.de</email>
      </address>
    </author>

    <author fullname="Nilesh Maheshwari" initials="N.M." surname="Maheshwari">
      <organization></organization>
      <address>
        <email>nileshm@gmail.com</email>
      </address>
    </author>

    <date month="November" year="2017"/>

<keyword>multicast security</keyword>

    <abstract>
      <t>The Group Domain of Interpretation (GDOI) includes the ability of a
      Group Controller/Key Server (GCKS) to provide a set of current Group
      Member (GM) devices with additional security associations (e.g., to
      rekey expiring security associations). This memo adds the ability of a
      GCKS to request that the GM devices return an acknowledgement of receipt
      of its rekey message and specifies the acknowledgement method.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="INTRO" title="Introduction">
      <t>The Group Domain of Interpretation (GDOI) <xref
      target="RFC6407"></xref> is a group key management method by which a
      Group Controller/Key Server (GCKS) distributes security associations
      (i.e., cryptographic policy and keying material) to a set of Group
      Member (GM) devices. The GDOI meets the requirements set forth in
      <xref target="RFC4046"></xref> ("Multicast Security (MSEC) Group Key
      Management Architecture"), including a Registration Protocol and a
      Rekey Protocol. The GDOI describes the Rekey Protocol as a
      GROUPKEY&nbhy;PUSH message.</t>

      <t>A GDOI GCKS uses a GROUPKEY-PUSH message (Section&nbsp;4 of <xref
      target="RFC6407"></xref>) to alert GMs to updates in policy
      for the group, including new policy and keying material, replacement
      policy and keying material, and indications of deleted policy and keying
      material. Usually, the GCKS does not require a notification that the
      GM actually received the policy. However, in some cases it is
      beneficial for a GCKS to be told by each receiving GM that it received
      the rekey message and, by implication, has reacted to the policy
      contained within. For example, a GCKS policy can use the
      acknowledgements to determine which GMs are receiving the current group
      policy and which GMs are no longer participating in the group.</t>

      <t>This memo introduces a method by which a GM returns an
      Acknowledgement Message to the GCKS. Initially, a GCKS requests that
      a GM acknowledge GROUPKEY&nbhy;PUSH messages as part of a distributed
      group policy. Then, as shown in <xref target="Overview"></xref>, when
      the GCKS delivers a GROUPKEY&nbhy;PUSH message, each GM that honors
      the GCKS request returns a GROUPKEY&nbhy;PUSH Acknowledgement Message.
      The rest of this memo describes this method in detail.</t>

      <t><figure anchor="Overview" title="GROUPKEY-PUSH Rekey Event">
          <artwork align="center"><![CDATA[ GCKS                          GM1       GM2
  |                             |         |
  |                 +---------->|         |
  |   GROUPKEY-PUSH |           |         |
  |-----------------+           |         |
  |                 |           |         |
  |                 +-------------------->|
  |                             |         |
  |<----------------------------|         |
  |      GROUPKEY-PUSH ACK      |         |
  |                             |         |
  |<--------------------------------------|
  |      GROUPKEY-PUSH ACK      |         |
]]></artwork>
        </figure> Implementation of the GROUPKEY-PUSH Acknowledgement Message
      is OPTIONAL.</t>

      <section title="Requirements Notation">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
      "SHALL&nbsp;NOT", "SHOULD", "SHOULD&nbsp;NOT", "RECOMMENDED",
      "NOT&nbsp;RECOMMENDED", "MAY", and "OPTIONAL" in this document
      are to be interpreted as described in BCP&nbsp;14
      <xref format="default" pageno="false" target="RFC2119"/>
      <xref format="default" pageno="false" target="RFC8174"/> when,
      and only when, they appear in all capitals, as shown here.</t>
      </section>

      <section title="Acronyms and Abbreviations">
        <t>The following acronyms and abbreviations are used throughout this
        document. <list counter="" hangIndent="6" style="hanging">
            <t hangText="ACK">Acknowledgement Message</t>

            <t hangText="D">Delete</t>

            <t hangText="GCKS">Group Controller/Key Server</t>

            <t hangText="GDOI">Group Domain of Interpretation</t>

            <t hangText="GM">Group Member</t>

            <t hangText="HDR">Header</t>

            <t hangText="HMAC">Hashed Message Authentication Code</t>

            <t hangText="IV">Initialization Vector</t>

            <t hangText="KD">Key Download</t>

            <t hangText="KDF">Key Derivation Function</t>

            <t hangText="KEK">Key Encryption Key</t>

            <t hangText="LKH">Logical Key Hierarchy</t>

            <t hangText="MSEC">Multicast Security</t>

            <t hangText="PRF">Pseudorandom Function</t>

            <t hangText="SA">Security Association</t>

            <t hangText="SEQ">Sequence Number</t>

            <t hangText="SIG">Signature</t>

            <t hangText="SPI">Security Parameter Index</t>
          </list></t>
      </section>
    </section>

    <section anchor="ACK_REQUEST" title="Acknowledgement Message Request">
      <t>When a GM is ready to join a group, it contacts the GCKS with a
      GROUPKEY-PULL Registration Protocol. When the GCKS has authenticated and
      verified that the GM is an authorized member of the group, it downloads
      several sets of policy in a Security Association (SA) payload. If the
      group includes the use of a GROUPKEY-PUSH Rekey Protocol, the SA payload
      includes an SA Key Encryption Key (KEK) payload (Section&nbsp;5.3 of
      <xref target="RFC6407"></xref>). When necessary, the GROUPKEY&nbhy;PUSH
      Rekey Protocol also contains an SA payload that includes the SA KEK
      policy. The SA KEK policy indicates how the GM will be receiving and
      handling the GROUPKEY-PUSH Rekey Protocol.</t>

      <t>When the GCKS policy includes the use of the GROUPKEY-PUSH
      Acknowledgement Message, the GCKS reports this policy to the GM within
      the SA KEK policy. The GCKS includes a new KEK attribute with the name
      KEK_ACK_REQUESTED (9), which indicates that the GM is
      requested to return a GROUPKEY-PUSH Acknowledgement Message.</t>

      <t>As part of the SA KEK policy, the GCKS specifies information on the
      keying material that is used to protect the GROUPKEY-PUSH Rekey
      Protocol (e.g., the presence of a KEK management algorithm). Parts of
      this information are used by a GM to derive the ack_key (defined in
      <xref target="hash-payload"></xref>), which protects the GROUPKEY-PUSH
      Acknowledgement Message. There are different types of Rekey
      Acknowledgement Messages; they share an identical message format but
      differ in the keying material used.</t>

      <t>The following values of the KEK_ACK_REQUESTED attribute are defined
      in this memo.</t>

      <section title="REKEY_ACK_KEK_SHA256 Type">
        <t>This type of Rekey ACK is used when the KEK Download Type
        (Section&nbsp;5.6.2 of <xref target="RFC6407"></xref>) is part of the
        group policy. The prf (defined in <xref target="hash-payload">
        </xref>) is PRF-HMAC-SHA-256 <xref target="RFC4868"></xref>. The
        base_key (also defined in <xref target="hash-payload"></xref>) is the
        KEK_ALGORITHM_KEY used to decrypt the GROUPKEY-PUSH message. Note that
        for some algorithms the KEK_ALGORITHM_KEY will include an explicit
        Initialization Vector (IV) before the actual key
        (Section&nbsp;5.6.2.1 of <xref target="RFC6407"></xref>), but it is
        not used in the definition of the base_key.</t>
      </section>

      <section title="REKEY_ACK_LKH_SHA256 Type">
        <t>This type of Rekey ACK can be used when the
        KEK_MANAGEMENT_ALGORITHM KEK attribute with a value representing
        the Logical Key Hierarchy (LKH) is part of the group policy
        (Section&nbsp;5.3.1.1 of <xref target="RFC6407"></xref>). The prf is
        PRF-HMAC-SHA-256. The base_key is the Key Data field value taken from
        the first LKH Key structure in an LKH_DOWNLOAD_ARRAY attribute
        (see Section&nbsp;5.6.3.1 of <xref target="RFC6407"></xref>). This is
        a secret symmetric key that the GCKS shares with the GM.
        Note that for some algorithms the LKH Key structure will include an
        explicit IV before the actual key (Section&nbsp;5.6.3.1 of <xref
        target="RFC6407"></xref>), but it is not used in the definition of the
        base_key.</t>
      </section>

      <section title="REKEY_ACK_KEK_SHA512 Type">
        <t>This type of Rekey ACK is identical to the REKEY_ACK_KEK_SHA256
        Type, except that the prf is PRF-HMAC-SHA-512 (defined in <xref
        target="RFC4868"></xref>).</t>
      </section>

      <section title="REKEY_ACK_LKH_SHA512 Type">
        <t>This type of Rekey ACK is identical to the REKEY_ACK_LKH_SHA256
        Type, except that the prf is PRF-HMAC-SHA-512 (defined in <xref
        target="RFC4868"></xref>).</t>
      </section>
    </section>

    <section anchor="ack-message"
             title="GROUPKEY-PUSH Acknowledgement Message">
      <t>The GROUPKEY-PUSH message defined in <xref target="RFC6407"></xref>
      is reproduced in <xref target="groupkey-push"></xref>. The SA and Key
      Download (KD) payloads contain the actual policy and keying material
      being distributed to the GM. The Sequence Number (SEQ) payload contains
      a sequence number that is used by the GM for replay protection. This
      sequence number defines a unique rekey message delivered to that GM. One
      or more Delete (D) payloads optionally specify the deletion of the
      existing group policy. The Signature (SIG) payload includes a signature
      of a hash of the entire GROUPKEY-PUSH message (excepting the SIG payload
      octets) before it has been encrypted.</t>

      <t><figure anchor="groupkey-push" title="GROUPKEY-PUSH Message (from RFC 6407)">
          <preamble></preamble>

          <artwork align="left"><![CDATA[      GM                  GCKS
      --                  ----
                          <---- HDR*, SEQ, [D,] SA, KD, SIG

      * Protected by the Rekey SA KEK; encryption occurs after HDR]]></artwork>
        </figure>

      When the GM has received a KEK_ACK_REQUESTED attribute in an
      SA KEK and it chooses to respond, it returns the value of the Sequence
      Number taken from the GROUPKEY-PUSH message to the GCKS along with its
      identity. This tuple alerts the GCKS that the GM has received the
      GROUPKEY-PUSH message and implemented the policy contained therein. The
      GROUPKEY-PUSH Acknowledgement Message is shown in <xref
      target="kek-ack"></xref>.</t>

      <t><figure anchor="kek-ack"
          title="GROUPKEY-PUSH Acknowledgement Message">
          <preamble></preamble>

          <artwork align="center"><![CDATA[     GM                              GCKS
     --                              ----
        HDR, HASH, SEQ, ID   ---->]]></artwork>

          <postamble></postamble>
        </figure></t>

      <t>The IP header for the GROUPKEY-PUSH Acknowledgement Message is
      constructed as if it were a reply to the GROUPKEY-PUSH message. That is,
      the source address of the GROUPKEY-PUSH message becomes the destination
      address of the GROUPKEY-PUSH Acknowledgement Message, and the GM
      includes its own IP address as the source address of the GROUPKEY-PUSH
      Acknowledgement Message. The source port in the GROUPKEY-PUSH message
      UDP header becomes the destination port of the GROUPKEY-PUSH
      Acknowledgement Message UDP header, and the destination port of the
      GROUPKEY-PUSH message UDP header becomes the source port of the
      GROUPKEY-PUSH Acknowledgement Message UDP header.</t>

      <t>The following sections describe the payloads in the GROUPKEY-PUSH
      Acknowledgement Message.</t>

      <section title="HDR">
        <t>The message begins with a header as defined for the GDOI
        GROUPKEY&nbhy;PUSH message in Section&nbsp;4.2 of <xref
        target="RFC6407"></xref>. The fields in the HDR MUST be initialized
        as follows. The cookies of a GROUPKEY-PUSH message act as a Security
        Parameter Index (SPI) and are copied to the Acknowledgement Message.
        "Next Payload" identifies a "Hash (HASH)" payload (value 8) <xref
        target="ISAKMP-NP"></xref>. Major Version is 1 and Minor Version is 0.
        The Exchange Type has value 35 for the GDOI GROUPKEY-PUSH
        Acknowledgement Message. Flags are set to 0. Message ID MUST be set to
        0. Length is according to Section&nbsp;4.2 of <xref
        target="RFC6407"></xref>.</t>
      </section>

      <section anchor="hash-payload" title="HASH">
        <t>The HASH payload is the same one used in the GDOI GROUPKEY-PULL
        exchange defined in Section&nbsp;3.2 of <xref
        target="RFC6407"></xref>. The hash data in the HASH payload is created
        as follows:</t>

        <t><figure>
            <preamble></preamble>

            <artwork align="left"><![CDATA[     HASH = prf(ack_key, SEQ | ID)
]]></artwork>

            <postamble></postamble>
          </figure>where:</t>

        <t><list style="symbols">
            <t>"prf" is specific to the KEK_ACK_REQUESTED value and is
            described as part of that description.</t>

            <t>"|" indicates concatenation.</t>

            <t>"SEQ" and "ID" represent the bytes comprising the
            Sequence Number and Identification payloads.</t>
          </list></t>

        <t>The ack_key is computed from a Key Derivation Function (KDF) that
        conforms to KDF in feedback mode as defined in NIST SP800-108 <xref
        target="SP800-108"></xref>, where the length of the derived keying
        material is the same as the output of the prf, there is no IV,
        and the optional counter is not used. Note: When the derived
        ack_key is smaller than the prf block size (i.e., 512&nbsp;bits
        for PRF&nbhy;HMAC&nbhy;SHA&nbhy;256), it is zero&nbhy;filled to the
        right, as specified in
        Section&nbsp;2.1.2 of <xref target="RFC4868"></xref>.</t>

        <t><figure>
            <preamble></preamble>

            <artwork align="left"><![CDATA[     ack_key = prf(base_key, "GROUPKEY-PUSH ACK" | SPI | L)
]]></artwork>

            <postamble></postamble>
          </figure>where:</t>

        <t><list style="symbols">
            <t>"prf" is specific to the KEK_ACK_REQUESTED value and is
            described as part of that description.</t>

            <t>"base_key" is specific to the KEK_ACK_REQUESTED value and is
            described as part of that description. If the base_key is smaller
            than the prf block size (i.e., 512 bits for PRF-HMAC-SHA-256),
            then it is zero&nbhy;filled to the right, as specified in
            Section&nbsp;2.1.2 of <xref target="RFC4868"></xref>.</t>

            <t>"|" indicates concatenation.</t>

            <t>"GROUPKEY-PUSH ACK" is a label encoded as a null-terminated
            ASCII string.</t>

            <t>"SPI" (per <xref target="RFC6407"/>) is the Initiator Cookie
            followed by the Responder Cookie taken from the
            GROUPKEY-PUSH message HDR, which describes the context of
            the key usage.</t>

            <t>"L" is a length field matching the number of bits in the
            ack_key. L&nbsp;MUST match the length of the base_key (i.e.,
            512&nbsp;bits for PRF&nbhy;HMAC-SHA-256). The value L is
            represented as two&nbsp;octets in network byte order (that is,
            most significant byte first).</t>
          </list></t>
      </section>

      <section title="SEQ">
        <t>The Sequence Number payload is defined in Section&nbsp;5.7 of
        <xref target="RFC6407"></xref>. The value in the GROUPKEY-PUSH
        SEQ payload is copied to the GROUPKEY&nbhy;PUSH ACK SEQ payload.</t>
      </section>

      <section title="ID">
        <t>The Identification payload is used as defined in Section&nbsp;5.1 of
        <xref target="RFC6407"></xref>. The ID payload contains an ID Type of
        ID_IPV4_ADDR, ID_IPV6_ADDR, or ID_OID as defined in
        <xref target="RFC8052"></xref> for GDOI exchanges. The
        Protocol ID and Port fields MUST be set to 0. The address provided in
        the ID payload represents the IP address of the GM and MUST match the
        source IP address used for the most recent GROUPKEY&nbhy;PULL
        exchange.</t>
      </section>
    </section>

    <section title="Group Member Operations">
      <t>When a GM receives an SA KEK payload (in a GROUPKEY-PULL exchange or
      GROUPKEY-PUSH message) including a KEK_ACK_REQUESTED attribute, it
      records in its group state some indication that it is expected to return
      a GROUPKEY-PUSH ACK. A GM recognizing the attribute MUST honor
      the KEK_ACK_REQUESTED attribute by returning Acknowledgements, because it
      can be expected that the GCKS is likely to take some policy-specific
      action regarding unresponsive GMs, including ceasing to deliver
      GROUPKEY-PUSH messages to it.</t>

      <t>If a GM cannot respond with the requested type of Acknowledgement, it
      continues with protocol exchange and participates in the group. In any
      case, if a GM stops receiving GROUPKEY-PUSH messages from a GCKS,
      it will re&nbhy;register before existing SAs expire, so omitting the
      sending of Acknowledgements should not be critical.</t>

      <t>When a GM receives a GROUPKEY-PUSH message that contains a
      KEK_ACK_REQUESTED attribute in the SA KEK payload, it processes the
      message according to RFC 6407. When it concludes successful processing
      of the message, it formulates the GROUPKEY-PUSH ACKs as
      described in <xref target="ack-message"></xref> and delivers the message
      to the GCKS from which the GROUPKEY-PUSH message was received. A
      GROUPKEY&nbhy;PUSH ACK is sent even if the GROUPKEY-PUSH message
      contains a Delete payload for the KEK used to protect the
      GROUPKEY&nbhy;PUSH message.</t>
    </section>

    <section anchor="gcks" title="GCKS Operations">
      <t>When a GCKS policy includes requesting a GROUPKEY-PUSH ACK
      from GMs, it includes the KEK_ACK_REQUESTED attribute in the
      SA KEK payload. It does this each time the SA KEK is delivered, in both
      GROUPKEY-PULL exchanges and GROUPKEY-PUSH messages. The value of the
      KEK_ACK_REQUESTED attribute will depend upon the type of SA KEK
      policy, as described in <xref target="ACK_REQUEST"></xref>.</t>

      <t>When a GCKS receives a GROUPKEY-PUSH ACK (identified by an
      Exchange Type of GROUPKEY-PUSH-ACK), it first verifies that the group
      policy includes receiving GROUPKEY-PUSH ACKs. If not, the
      message is discarded. GCKS implementations SHOULD keep a record (e.g., a
      hash value) of recently received GROUPKEY-PUSH Acknowledgement Messages
      and reject duplicate messages prior to performing cryptographic
      operations. This enables an early discard of the replayed messages.</t>

      <t>If the message is expected, the GCKS validates the format of the
      message and verifies that the HASH has been properly constructed as
      described in <xref target="hash-payload"></xref>. If validation fails,
      the message is discarded. The GCKS extracts the sequence number and
      identity of the GM from the SEQ and ID payloads, respectively, and
      records the fact that the GM received the GROUPKEY-PUSH message
      represented by its sequence number.</t>
    </section>

    <section title="Management Considerations">
      <t>The GCKS manages group policy as well as determining which
      GM devices are presently "live" members of the group (i.e.,
      members either sending or receiving messages). Group policy includes
      a strategy to ensure that rekey messages with current group policy
      reach all live GMs. This is discussed briefly in Section&nbsp;5.3
      of <xref target="RFC4046"></xref>. The GROUPKEY&nbhy;PUSH
      Acknowledgement Message specified in this memo provides the GCKS with an
      additional method to assess if a GM is live and has received the current
      group policy. But it is possible for a rekey message or
      GROUPKEY&nbhy;PUSH Acknowledgement Message to be discarded in the
      network, resulting in a live GM appearing to be unresponsive. Also, a GM
      might not be able to respond with a GROUPKEY&nbhy;PUSH ACK, so the
      GCKS should use caution in using a lack of an Acknowledgement Message as
      the only factor in determining whether a GM is live. In particular, a
      GCKS SHOULD&nbsp;NOT consider a GM to have left the group until it has
      received at least one ACK from the GM.</t>

      <t>Some management considerations for determining how a GM handles
      Acknowledgement Messages are as follows:</t>

      <t><list style="symbols">
          <t>A GM MUST respond with Acknowledgement Messages when requested,
          as a GCKS can subsequently determine when a GM unexpectedly becomes
          unresponsive.</t>

          <t>A GM receiving a GROUPKEY-PUSH message as a multicast message
          MAY introduce jitter to the timing of its Acknowledgement Message to
          help the GCKS better manage replies from GMs. A GM
          MUST&nbsp;NOT delay sending an Acknowledgement Message for more than
          5&nbsp;seconds. a GCKS SHOULD&nbsp;NOT declare an
          Acknowledgement Message as missing until it has waited at least
          10&nbsp;seconds. Implementations SHOULD make these timers
          configurable.</t>
        </list></t>

      <t>Some management considerations for determining how the GCKS handles
      Acknowledgement Messages are as follows:</t>

      <t><list style="symbols">
          <t>Non-receipt of an Acknowledgement Message is an indication that
          a GM is unable to respond. A GCKS SHOULD wait at least several
          seconds before determining non&nbhy;receipt, as GMs could add
          jitter to the response time before sending an
          Acknowledgement Message.</t>

          <t>If the GCKS is aware that GMs are expected to respond, then
          non&nbhy;receipt of an Acknowledgement Message SHOULD trigger a
          logging event. The GCKS MAY be configured with such additional
          policy actions as transmitting the GROUPKEY-PUSH message several
          times in a short period of time (as suggested in
          <xref target="RFC4046"></xref>), thereby mitigating loss of
          either the GROUPKEY-PUSH message or an
          Acknowledgement Message. Another policy action could be to alert
          GCKS administrators of GMs that do not return several consecutive
          Acknowledgement Messages or even removing unresponsive GMs from
          the group. However, a GCKS with a policy of removing GMs from the
          group needs to be aware that a GM that has not responded will not
          receive a newer group policy until it initiates contact with the
          GCKS again.</t>

          <t>When a GROUPKEY-PUSH message includes a Delete payload for the
          KEK used to protect the GROUPKEY-PUSH message, the GCKS
          SHOULD&nbsp;NOT itself delete the KEK until it has given GMs
          the opportunity to acknowledge receipt of the GROUPKEY&nbhy;PUSH
          message. This could be several seconds, as GMs could add jitter to
          the response time before sending an Acknowledgement Message.</t>

          <t>A GCKS SHOULD log failure events, such as receiving
          Acknowledgement Messages for a group in which the GCKS has not
          requested Acknowledgements, receiving malformed Acknowledgements,
          and Acknowledgements that fail validation.</t>
        </list></t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>There are three areas of security considerations to consider: the
      protection of the GROUPKEY-PUSH ACK, whether the GM should
      transmit a GROUPKEY-PUSH ACK, and whether a GCKS should accept a
      GROUPKEY-PUSH ACK. These are addressed in the following subsections.</t>

      <t>The construction of the HASH defined in this memo uses
      PRF&nbhy;HMAC&nbhy;SHA&nbhy;256 or PRF-HMAC-SHA-512. The strengths of 
      PRF&nbhy;HMAC&nbhy;SHA&nbhy;256 and PRF-HMAC-SHA-512 were
      unquestioned at the time this memo was developed. When a HASH
      construction using a different prf becomes necessary, a new
      KEK_ACK_REQUESTED value will be defined in a new specification.</t>

      <section title="Protection of the GROUPKEY-PUSH ACK">
        <t>The GROUPKEY-PUSH ACK is an Internet Security
        Association and Key Management Protocol (ISAKMP) message
        as discussed in <xref target="RFC2408"></xref>.
        (Note: RFC&nbsp;2408 has been obsoleted by RFC&nbsp;7296,
        but only RFC&nbsp;2408 applies in this context.) Message
        authentication and protection against man&nbhy;in&nbhy;the&nbhy;middle
        attacks are provided by the inclusion of a HASH payload that includes
        the output of an HMAC computation over the bytes of the message.</t>

        <t>Because the KEK is a group secret, when the value of
        REKEY_ACK_KEK is specified, impersonation of a victim GM by another
        authorized GM is possible. However, security considerations regarding
        such an impersonation are limited to a false claim that a victim GM
        has received a GROUPKEY-PUSH when the victim GM has in fact not
        received it (e.g., because an active attacker has discarded the
        GROUPKEY&nbhy;PUSH). If a GCKS policy includes sending retransmissions
        of the GROUPKEY-PUSH message to that victim GM, then the victim GM
        might not receive replacement SAs. However, this does not introduce any
        additional threats over a use case where the GROUPKEY-PUSH ACK is not
        deployed and GROUPKEY-PUSH messages are withheld from a victim GM by
        an active attacker. These threats can be mitigated by using a value of
        REKEY_ACK_LKH, due to the use of a secret pairwise key shared between
        the GCKS and an individual GM.</t>

        <t>Confidentiality is not provided for the GROUPKEY-PUSH ACK.
        The contents of the message, including the hash value, the
        sequence number from the GROUPKEY-PUSH message to which it is
        acknowledging receipt, and the identity of the GM, can be observed
        by a passive attacker. Observation of a hash value or set of hash
        values will not compromise the hash key. The identity of the GM is also
        available to the passive attacker as the source IP address of the
        packet. Note that the sequence number in the GROUPKEY&nbhy;PUSH
        ACK does reveal the sequence number (previously not
        available to the attacker) that was included in the
        GROUPKEY&nbhy;PUSH message. However, the attacker is assumed to not be
        in possession of the key used to encrypt the message and thus cannot
        create a spoofed GROUPKEY-PUSH message. Therefore, the attacker
        does&nbsp;not derive any direct value from learning the
        sequence number.</t>
      </section>

      <section title="Transmitting a GROUPKEY-PUSH ACK">
        <t>A GM transmits an ACK only when the policy of the most recently
        received SA KEK includes a request by the GCKS for ACKs, and the
        ACK is only returned after processing the GROUPKEY-PUSH message
        according to Section&nbsp;4.4 of <xref target="RFC6407"></xref>. In
        other words, the form of the GROUPKEY-PUSH message will have been
        validated, replay protection completed, and the digital signature
        verified as being genuine. Therefore, the threat of a GM responding
        to a spoofed or resent GROUPKEY-PUSH message, and the possibility of
        the GM being used to propagate a Distributed Denial of Service (DDoS)
        attack on a GCKS, are mitigated. For more information, see the
        security considerations for a GROUPKEY-PUSH message as described in
        Section&nbsp;7.3 of <xref target="RFC6407"></xref>.</t>
      </section>

      <section title="Receiving a GROUPKEY-PUSH ACK">
        <t>A GCKS receiving ACKs will follow the validation steps
        described in <xref target="gcks"></xref> before interpreting the
        contents of the message. The GCKS will then be sure to operate only on
        messages that have been sent by an authorized GM.</t>

        <t>A GCKS SHOULD be prepared to receive GROUPKEY-PUSH ACKs
        from each GM to which it was sent. That is, it needs to ensure that
        it has sufficient resources (e.g., receive queue size) so that it does
        not unnecessarily drop ACKs. A GCKS should be aware that a
        large number of replayed or invalid GROUPKEY-PUSH messages could be
        addressed to it. However, this is no worse a threat than if it
        received a large number of other types of replayed or invalid GDOI or
        other messages containing a HASH payload.</t>

        <t>How a GCKS processes the sequence number and identity included
        in an ACK is a matter of local policy and is outside the
        scope of this memo.</t>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>The following additions have been made to the "Group Domain of
      Interpretation (GDOI) Payloads" <xref target="GDOI-REG"></xref>
      registry.</t>

      <t>A new attribute has been added to the "SA KEK Payload Values - KEK
      Attributes" registry. The ID Class name is KEK_ACK_REQUESTED with a
      value of 9 and is a Basic attribute.</t>

      <t>A new registry defining values for KEK_ACK_REQUESTED,
      "SA KEK Payload Values - KEK_ACK_REQUESTED", has been added; the
      initial registrations are shown in the following table.  
      The terms "Reserved",
      "Unassigned", and "Private Use" are to be applied as defined in <xref
      target="RFC8126"></xref>. The registration procedure is Specification
      Required.</t>

      <t><figure>
          <preamble></preamble>

          <artwork align="center"><![CDATA[ Value            Type
-------           --------------------
   0              Reserved  
   1              REKEY_ACK_KEK_SHA256
   2              REKEY_ACK_LKH_SHA256
   3              REKEY_ACK_KEK_SHA512
   4              REKEY_ACK_LKH_SHA512
  5-128           Unassigned
129-255           Private Use]]></artwork>

          <postamble></postamble>
        </figure></t>

      <t>A new registry describing ISAKMP Exchange Types for the GDOI,
      "GDOI DOI Exchange Types", has been added under the "Group Domain
      of Interpretation (GDOI) Payloads" registry
      <xref target="GDOI-REG"></xref>. This new registry defines DOI Specific
      Use values <xref target="ISAKMP-EXCH"></xref>, which are Exchange Type
      values used with the ISAKMP GDOI DOI. The registration procedure is
      Specification Required. The terms "Known Unregistered Use" and
      "Unassigned" are to be applied as defined in
      <xref target="RFC8126"></xref>.</t>

      <figure>
        <preamble></preamble>

        <artwork align="center"><![CDATA[Value                      Phase        Reference
----------------------     ------       ---------
GROUPKEY-PULL                32         RFC 6407
GROUPKEY-PUSH                33         RFC 6407
Known Unregistered Use       34
GROUPKEY-PUSH-ACK            35         RFC 8263
Unassigned                 36-239]]></artwork>

        <postamble></postamble>
      </figure>

    </section>

  </middle>

  <back>
   <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include='reference.RFC.8126'?>
      <?rfc include='reference.RFC.6407'?>
      <?rfc include='reference.RFC.4868'?>
      <?rfc include='reference.RFC.8052'?>
      <?rfc include='reference.RFC.8174'?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.RFC.4046'?>
      <?rfc include='reference.RFC.2408'?>

      <reference anchor="GDOI-REG"
      target="https://www.iana.org/assignments/gdoi-payloads/">
        <front>
          <title>Group Domain of Interpretation (GDOI) Payload Type
          Values</title>
          <author>
            <organization>Internet Assigned Numbers Authority</organization>
          </author>
          <date month="September" year="2017" />
        </front>
        <seriesInfo name="IANA" value="Registry" />
      </reference>

      <reference anchor="ISAKMP-NP"
      target="https://www.iana.org/assignments/ipsec-registry/">
        <front>
          <title>Internet Key Exchange (IKE) Attributes Next Protocol
          Types</title>
          <author>
            <organization>Internet Assigned Numbers Authority</organization>
          </author>
          <date month="May" year="2013" />
        </front>
        <seriesInfo name="IANA" value="Registry" />
      </reference>

      <reference anchor="ISAKMP-EXCH"
      target="https://www.iana.org/assignments/ipsec-registry/">
        <front>
          <title>Internet Key Exchange (IKE) Attributes Exchange Type
          Values</title>
          <author>
            <organization>Internet Assigned Numbers Authority</organization>
          </author>
          <date month="May" year="2013" />
        </front>
        <seriesInfo name="IANA" value="Registry" />
      </reference>

      <reference anchor="SP800-108" target="http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-108.pdf">
        <front>
          <title>Recommendation for Key Derivation Using Pseudorandom
          Functions (Revised)</title>
          <author fullname="Lily Chen" initials="L." surname="Chen">
            <organization>National Institute of Standards and
            Technology</organization>
          </author>
          <date month="October" year="2009" />
        </front>
        <seriesInfo name="National Institute of Science and Technology,"
         value="NIST Special Publication 800&nbhy;108"/>
        <seriesInfo name="DOI" value="10.6028/NIST.SP.800-108"/>
      </reference>
    </references>

    <section anchor="Acknowledgements" title="Acknowledgements" numbered="no">
      <t>Mike Hamada, Adrian Farrel, and Yaron Sheffer provided many useful
      technical and editorial comments and suggestions for improvement.</t>
    </section>

  </back>

</rfc>
