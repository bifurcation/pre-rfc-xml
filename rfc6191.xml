<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc rfcedstyle="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<!-- end of list of processing instructions -->

<rfc
   number="6191" seriesNo="159"
   category="bcp"
   ipr="pre5378Trust200902"
   submissionType="IETF"
   consensus="yes"
>

<front>
    <title abbrev="Reducing TIME-WAIT State with Timestamps">Reducing the TIME-WAIT State Using TCP Timestamps</title>

<author
        fullname="Fernando Gont"
        initials="F.G."
        surname="Gont">

        <organization abbrev="UK CPNI">UK Centre for the Protection of National Infrastructure</organization>
        <address>
            <email>fernando@gont.com.ar</email>
		<uri>http://www.cpni.gov.uk</uri>

        </address>
</author>

<date month="March" year="2011"/> 

    <area>Transport</area>
    <workgroup>TCP Maintenance and Minor Extensions (tcpm)</workgroup>

<abstract>
<t>
This document describes an algorithm for processing incoming SYN
segments that allows higher connection-establishment rates between any
two TCP endpoints when a TCP Timestamps option is present in the
incoming SYN segment. This document only modifies processing of SYN
segments received for connections in the TIME-WAIT state; processing
in all other states is unchanged.</t>
</abstract>

</front>

<middle>

<section title="Introduction" anchor="intro">
<t>The Timestamps option, specified in RFC 1323 <xref target="RFC1323"/>, allows a TCP to include a timestamp value in its segments that can be used to perform two functions: Round-Trip Time Measurement (RTTM) and Protection Against Wrapped Sequences (PAWS). 
</t>
<t>For the purpose of PAWS, the timestamps sent on a connection are required to be monotonically increasing. While there is no requirement that timestamps are monotonically increasing across TCP connections, the generation of timestamps such that they are monotonically increasing across connections between the same two endpoints allows the use of timestamps for improving the handling of SYN segments that are received while the corresponding four-tuple is in the TIME-WAIT state. That is, the Timestamps option could be used to perform heuristics to determine whether to allow the creation of a new incarnation of a connection that is in the TIME-WAIT state.</t>

<t>This use of TCP timestamps is simply an extrapolation of the use of Initial Sequence Numbers (ISNs) for the same purpose, as allowed by RFC 1122 <xref target="RFC1122"/>, and it has been incorporated in a number of TCP implementations, such as that included in the Linux kernel <xref target="Linux"/>.
</t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
   NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   RFC 2119 <xref target="RFC2119"/>.</t>

</section>


<section title="Improved Processing of Incoming Connection Requests" anchor="processing">

<t>In a number of scenarios, a socket pair may need to be reused while the corresponding four-tuple is still in the TIME-WAIT state in a remote TCP peer. For example, a client accessing some service on a host may try to create a new incarnation of a previous connection, while the corresponding four-tuple is still in the TIME-WAIT state at the remote TCP peer (the server). This may happen if the ephemeral port numbers are being reused too quickly, either because of a bad policy of selection of ephemeral ports, or simply because of a high connection rate to the corresponding service. In such scenarios, the establishment of new connections that reuse a four-tuple that is in the TIME-WAIT state would fail. This problem is discussed in detail in <xref target="INFOCOM-99"/>.</t>

<t>In order to avoid this problem, Section 4.2.2.13 of RFC 1122
  <xref target="RFC1122"/> states that when a connection request is
  received with a four-tuple that is in the TIME-WAIT state, the
  connection request may be accepted if the sequence number of the
  incoming SYN segment is greater than the last sequence number seen
  on the previous incarnation of the connection (for that direction of
  the data transfer). The goal of this requirement is to prevent the overlap of the sequence
number spaces of the old and new incarnations of the connection so that segments from the old incarnation are not accepted as valid by the new incarnation.
</t>


<t>The same policy may be extrapolated to TCP timestamps. That is, when a connection request is received with a four-tuple that is in the TIME-WAIT state, the connection request could be accepted if the timestamp of the incoming SYN segment is greater than the last timestamp seen on the previous incarnation of the connection (for that direction of the data transfer).</t>


<t>The following paragraphs summarize the processing of SYN segments received for connections in the TIME-WAIT state. The processing of SYN segments received for connections in all other states is unchanged. Both the ISN (Initial Sequence Number) and the Timestamps option (if present) of the incoming SYN segment are included in the heuristics performed for allowing a high connection-establishment rate. </t>

<t>Processing of SYN segments received for connections in the TIME-WAIT state SHOULD occur as follows:</t>

<t>
<list style="symbols">

<t>If the previous incarnation of the connection used Timestamps, then:
<list style="symbols">

<t>If TCP Timestamps would be enabled for the new incarnation of the connection, and the timestamp contained in the incoming SYN segment is greater than the last timestamp seen on the previous incarnation of the connection (for that direction of the data transfer), honor the connection request (creating a connection in the SYN-RECEIVED state).</t>
<t>If TCP Timestamps would be enabled for the new incarnation of the connection, the timestamp contained in the incoming SYN segment is equal to the last timestamp seen on the previous incarnation of the connection (for that direction of the data transfer), and the Sequence Number of the incoming SYN segment is greater than the last sequence number seen on the previous incarnation of the connection (for that direction of the data transfer),  honor the connection request (creating a connection in the SYN-RECEIVED state).</t>
<t>If TCP Timestamps would not be enabled for the new incarnation of the connection, but the Sequence Number of the incoming SYN segment is greater than the last sequence number seen on the previous incarnation of the connection (for the same direction of the data transfer), honor the connection request (creating a connection in the SYN-RECEIVED state).</t>
<t>Otherwise, silently drop the incoming SYN segment, thus leaving the previous incarnation of the connection in the TIME-WAIT state.</t>
</list>
</t>


<t>If the previous incarnation of the connection did not use Timestamps, then:
<list style="symbols">
<t>If TCP Timestamps would be enabled for the new incarnation of the connection, honor the incoming connection request (creating a connection in the SYN-RECEIVED state).</t>
<t>If TCP Timestamps would not be enabled for the new incarnation of the connection, but the Sequence Number of the incoming SYN segment is greater than the last sequence number seen on the previous incarnation of the connection (for the same direction of the data transfer), honor the incoming connection request (creating a connection in the SYN-RECEIVED state).</t>
<t>Otherwise, silently drop the incoming SYN segment, thus leaving the previous incarnation of the connection in the TIME-WAIT state.</t>
</list>
</t>

</list>
</t>

<t>
<list style="hanging">
<t hangText="Note:">
<vspace blankLines="1" />In the above explanation, the phrase "TCP Timestamps would be enabled for the new incarnation for the connection" means that the incoming SYN segment contains a TCP Timestamps option (i.e., the client has enabled TCP Timestamps), and that the
SYN/ACK segment that would be sent in response to it would also contain a
Timestamps option (i.e., the server has enabled TCP Timestamps). In such a scenario,
TCP Timestamps would be enabled for the new incarnation of the connection.</t>

<t>
The "last sequence number seen on the previous incarnation of the connection (for
the same direction of the data transfer)" refers to the last sequence number used by
the previous incarnation of the connection (for the same direction of the data
transfer), and not to the last value seen in the Sequence Number field of the
corresponding segments. That is, it refers to the sequence number corresponding to
the FIN flag of the previous incarnation of the connection, for that direction of the
data transfer.
</t>

</list>
</t>


<t>Many implementations do not include the TCP Timestamps option when performing the above heuristics, thus imposing stricter constraints on the generation of Initial Sequence Numbers, the average data transfer rate of the connections, and the amount of data transferred with them. RFC 793 <xref target="RFC0793"/> states that the ISN generator should be incremented roughly once every four microseconds (i.e., roughly 250,000 times per second). As a result, any connection that transfers more than 250,000 bytes of data at more than 250 kilobytes/second could lead to scenarios in which the last sequence number seen on a connection that moves into the TIME-WAIT state is still greater than the sequence number of an incoming SYN segment that aims at creating a new incarnation of the same connection. In those scenarios, the ISN heuristics would fail, and therefore the connection request would usually time out. By including the TCP Timestamps option in the heuristics described above, all these constraints are greatly relaxed.</t>

<t>It is clear that the use of TCP timestamps for the heuristics described above benefit from timestamps that are monotonically increasing across connections between the same two TCP endpoints.</t>

<t>
<list style="hanging">
<t hangText="Note:">
<vspace blankLines="0" />The upcoming revision of RFC 1323,
<xref target="1323bis"/>, recommends the selection of
timestamps such that they are monotonically increasing across connections. An example of such a timestamp generation scheme can be found in <xref target="TS-Generation"/>.</t>
</list>
</t>
</section>

<section title="Interaction with Various Timestamp Generation Algorithms" anchor="interaction">
<t>The algorithm proposed in <xref target="processing"/> clearly
  benefits from timestamps that are monotonically increasing across
  connections to the same endpoint.   In particular, generation of timestamps such that they are
  monotonically increasing is important for TCP instances that perform the active open, as those are the timestamps
  that will be used for the proposed algorithm.</t>

<!-- [rfced] Is "TCPs", which is used several times, clear to the reader?  
   Does it refer to transmission control protocols in general, or instances
   of TCP? 
   
  [fgont] It referrs to "instances of TCP".
-->

<t>While monotonically increasing timestamps ensure that the proposed
  algorithm will be able to reduce the TIME-WAIT state of a previous
  incarnation of a connection, implementation of the algorithm (by
  itself) does not imply a requirement on the timestamp generation algorithm of other TCP implementations.</t>

<t>
In the worst-case scenario, an incoming SYN corresponding to a new incarnation of a connection in the TIME-WAIT contains a timestamp that is smaller than the last timestamp seen on the previous incarnation of the connection, the heuristics fail, and the result is no worse than the current state of affairs. That is, the SYN segment is ignored (as specified in <xref target="RFC1337"/>), and thus the connection request times out, or is accepted after future retransmissions of the SYN.
</t>

<t>Some stacks may implement timestamp generation algorithms that do
  not lead to monotonically increasing timestamps across connections
  with the same remote endpoint. An example of such algorithms is the
  one described in <xref target="RFC4987"/> and
  <xref target="Opperman"/>, which allows the implementation of extended TCP SYN cookies.</t>
<t>
<list style="hanging">
<t hangText="Note:">
<vspace blankLines="0" />It should be noted that the "extended TCP SYN cookies" could coexist with an algorithm for generating timestamps such that they are monotonically increasing. Monotonically increasing timestamps could be generated for TCP instances that perform the active open, while timestamps for TCP instances that perform the passive open could be generated according to <xref target="Opperman"/>.</t>
</list>
</t>
<t>Some stacks (notably OpenBSD) implement timestamp randomization
  algorithms which do not result in  monotonically increasing ISNs
  across connections. As noted in <xref target="Silbersack"/>, such
  randomization schemes may prevent the mechanism proposed in this
  document from recycling connections that are in the TIME-WAIT
  state. However, as noted earlier in this section in the worst-case scenario, the heuristics fail, and the result is no worse than the current state of affairs.</t>

</section>

<section title="Interaction with Various ISN Generation Algorithms" anchor="interaction-isn">
<t><xref target="RFC0793"/> suggests that the ISNs of TCP connections be generated from a global timer, such that they are monotonically increasing across connections. However, this ISN-generation scheme leads to predictable ISNs, which have well-known security implications <xref target="CPNI-TCP"/>. <xref target="RFC1948"/> proposes an alternative ISN-generation scheme that results in monotonically increasing ISNs across connections that are not easily predictable by an off-path attacker.</t>
<t>Some stacks (notably OpenBSD) implement ISN randomization algorithms which do not result in  monotonically increasing ISNs across connections. As noted in <xref target="Silbersack"/>, such ISN randomization schemes break BSD's improved handling of SYN segments received for connections that are in the TIME-WAIT state.</t>
<t>An implementation of the mechanism proposed in this document would enable recycling of the TIME-WAIT state even in the presence of ISNs that are not monotonically increasing across connections, except when the timestamp contained in the incoming SYN is equal to the last timestamp seen on the connection in the TIME-WAIT state (for that direction of the data transfer).
</t>
</section>

<section title="Security Considerations" anchor="securityconsiderations">
<t>
<xref target="TCP-Security"/> contains a detailed discussion of the security implications of TCP Timestamps and of different timestamp generation algorithms.</t>


</section>

<section title="Acknowledgements" anchor="acknowledgements">
<t>This document is based on part of the contents of the technical report "Security Assessment of the Transmission Control Protocol (TCP)" <xref target="CPNI-TCP"/> written by Fernando Gont on behalf of the United Kingdom's Centre for the Protection of National Infrastructure (UK CPNI).</t>

<t>The author of this document would like to thank (in alphabetical order) Mark Allman, Francis Dupont, Wesley Eddy, Lars Eggert, John Heffner, Alfred Hoenes, Christian Huitema, Eric Rescorla, Joe Touch, and Alexander Zimmermann for providing valuable feedback on an earlier version of this document.</t>
<t>Additionally, the author would like to thank David Borman for a fruitful discussion on TCP Timestamps at IETF 73.</t>

<t>Finally, the author would like to thank the United Kingdom's Centre for the Protection of National Infrastructure (UK CPNI) for their continued support.</t>

<t>
   Fernando Gont's attendance to IETF meetings was supported by ISOC's
   "Fellowship to the IETF" program.
</t>
</section>

</middle>
<back>
<references title="Normative References">
	<?rfc include="reference.RFC.0793" ?>
	<?rfc include="reference.RFC.1122" ?>
	<?rfc include="reference.RFC.1323" ?>
	<?rfc include="reference.RFC.2119" ?>
</references>
<references title="Informative References">
	<?rfc include="reference.RFC.1337" ?>
	<?rfc include="reference.RFC.4987" ?>
	<?rfc include="reference.RFC.1948" ?>

<reference anchor='1323bis'>
<front>
<title>TCP Extensions for High Performance</title>

<author initials='D' surname='Borman' fullname='David Borman'>
    <organization />
</author>

<author initials='R' surname='Braden' fullname='Robert Braden'>
    <organization />
</author>

<author initials='V' surname='Jacobson' fullname='Van  Jacobson'>
    <organization />
</author>

<date month='March' day='4' year='2009' />

<abstract><t>This memo presents a set of TCP extensions to improve performance over large bandwidth*delay product paths and to provide reliable operation over very high-speed paths.  It defines TCP options for scaled windows and timestamps, which are designed to provide compatible interworking with TCP's that do not implement the extensions.  The timestamps are used for two distinct mechanisms: RTTM (Round Trip Time Measurement) and PAWS (Protection Against Wrapped Sequences).  Selective acknowledgments are not included in this memo.  This memo updates and obsoletes RFC 1323.</t></abstract>

</front>
<seriesInfo name='Work in' value='Progress'/>

</reference>

<reference anchor='TS-Generation'>
<front>
<title>On the generation of TCP timestamps</title>

<author initials='F' surname='Gont' fullname='Fernando Gont'>
    <organization />
</author>

<author initials='A' surname='Oppermann' fullname='Andre Oppermann'>
    <organization />
</author>

<date month='June' day='22' year='2010' />

<abstract><t>This document discusses the generation of TCP timestamps.  In particular, it discusses a number of algorithms for producing monotonically-increasing timestamps such that timestamps can be used to reduce the TIME-WAIT state, and an algorithm for generating timestamps that allows for extended SYN-cookies.</t></abstract>

</front>
<seriesInfo name='Work in' value='Progress'/>

</reference>


<reference anchor='TCP-Security'>
<front>
<title>Security Assessment of the Transmission Control Protocol (TCP)</title>

<author initials='F' surname='Gont' fullname='Fernando Gont'>
    <organization />
</author>

<date month='January' day='20' year='2011' />

<abstract><t>This document contains a security assessment of the specifications of the Transmission Control Protocol (TCP), and of a number of mechanisms and policies in use by popular TCP implementations. Additionally, it contains best current practices for hardening a TCP implementation.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress'/>

</reference>

	<reference anchor="CPNI-TCP" target="http://www.cpni.gov.uk/Docs/tn-03-09-security-assessment-TCP.pdf">
		<front>
			<title>Security Assessment of the Transmission Control Protocol (TCP)</title>
			<author>
				<organization>CPNI</organization>
			</author>
			<date year="2009"/>
		</front>
	</reference>

	<reference anchor="Linux" target="http://www.kernel.org">
		<front>
			<title>The Linux Kernel Archives</title>
			<author>
				<organization>Linux Kernel Organization</organization>
			</author>
			<date year=""/>
		</front>
	</reference>

	<reference anchor="Opperman" target="http://www.ietf.org/mail-archive/web/tcpm/current/msg02251.html">
		<front>
			<title>FYI: Extended TCP syncookies in FreeBSD-current</title>
			<author initials="A.P." surname="Oppermann" fullname= "Andre Oppermann">
				<organization></organization>
			</author>
			<date month="September" year="2006"/>
		</front>
		<seriesInfo name="post to the tcpm mailing" value="list"/>
	</reference>


	<reference anchor="Silbersack">
		<front>
			<title>Improving TCP/IP security through randomization without sacrificing interoperability</title>
			<author initials="M.J." surname="Silbersack" fullname="Michael James Silbersack">
				<organization>The FreeBSD Project</organization>
			</author>
		</front>
		<seriesInfo name="EuroBSDCon" value="2005"/>
	</reference>
	


	<reference anchor="INFOCOM-99">
		<front>
			<title>The TIME-WAIT state in TCP and Its Effect on Busy Servers</title>
			<author initials="T." surname="Faber" fullname="Ted Faber"></author>
			<author initials="J." surname="Touch" fullname="Joe Touch">	</author>
			<author initials="W." surname="Yue" fullname="W. Yue">	</author>
		</front>
		<seriesInfo name="Proc. IEEE Infocom, 1999, pp." value="1573-1583"/>
	</reference>
</references>


<section title="Behavior of the Proposed Mechanism in Specific Scenarios" anchor="corner-cases">
<section title="Connection Request after System Reboot">
<t>This section clarifies how this algorithm would operate in case a computer reboots, keeps the same IP address, loses memory of the previous timestamps, and then tries to reestablish a previous connection.</t>

<!-- [rfced] Is there a way to rephrase "loses memory of the previous 
timestamps" so that it's more clear?

Original:
 looses memory of the previous timestamps

Should be:
 loses memory of the previous timestamps

But perhaps more clear as:
 no longer has record of the previous timestamps
 
[fgont] I don't know whether this proposed text has the same meaning as the original text. -- FWIW, I have kept the original text, in this case.
-->

<t>Firstly, as specified in <xref target="RFC0793"/>, hosts must not establish new connections for a period of 2*MSL (Maximum Segment Lifetime) after they boot (this is the "quiet time" concept). As a result, in terms of specifications, this scenario should never occur.</t>

<t>If a host does not comply with the "quiet time concept", a connection request might be sent to a remote host while there is a previous incarnation of the same connection in the TIME-WAIT state at the remote host. In such a scenario, as a result of having lost memory of previous timestamps, the resulting timestamps might not be monotonically increasing, and hence the proposed algorithm might be unable to recycle the previous incarnation of the connection that is in the TIME-WAIT state. This case corresponds to the current state of affairs without the algorithm proposed in this document.</t>

</section>
</section>

</back>
</rfc>
