<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='./rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC4034 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml">
<!ENTITY RFC5155 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5155.xml">
<!ENTITY RFC5702 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5702.xml">
<!ENTITY RFC5933 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5933.xml">
<!ENTITY RFC8174 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC6605 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6605.xml">
<!ENTITY RFC6781 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6781.xml">
<!ENTITY RFC6944 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6944.xml">
<!ENTITY RFC6979 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6979.xml">
<!ENTITY RFC6986 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6986.xml">
<!ENTITY RFC7091 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7091.xml">
<!ENTITY RFC7344 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7344.xml">
<!ENTITY RFC7583 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7583.xml">
<!ENTITY RFC8032 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8032.xml">
<!ENTITY RFC8078 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8078.xml">
<!ENTITY RFC8080 PUBLIC "" "https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8080.xml">
]>

<?rfc toc="yes"?>
<?rfc strict="yes" ?>
<?rfc linkmailto="yes" ?>
<?rfc symrefs="yes"?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc sortrefs="no" ?>

<rfc ipr="trust200902" category="std" obsoletes="6944" number="8624"
     submissionType="IETF" consensus="yes">

  <front>
    <title abbrev="DNSSEC Cryptographic Algorithms">Algorithm Implementation Requirements and Usage Guidance for DNSSEC</title>
    <author fullname="Paul Wouters" initials="P." surname="Wouters">
      <organization>Red Hat</organization>
      <address>
	<postal>
	  <street/>
	  <country>Canada</country>
	</postal>
        <email>pwouters@redhat.com</email>
      </address>
    </author>
    <author fullname="Ondrej Sury" initials="O." surname="Sury">
      <organization>Internet Systems Consortium</organization>
      <address>
	<postal>
	  <street/>
	  <country>Czech Republic</country>
	</postal>
        <email>ondrej@isc.org</email>
      </address>
    </author>
    <date month="June" year="2019"/>
    <area>Security</area>
    <workgroup>dnsop</workgroup>

<keyword>DNS</keyword>


    <abstract>
      <t>
	The DNSSEC protocol makes use of various cryptographic
	algorithms in order to provide authentication of DNS data and
	proof of nonexistence.  To ensure interoperability between
	DNS resolvers and DNS authoritative servers, it is necessary
	to specify a set of algorithm implementation requirements and
	usage guidelines to ensure that there is at least one algorithm
	that all implementations support.  This document defines the
	current algorithm implementation requirements and usage
	guidance for DNSSEC. This document obsoletes RFC 6944.
      </t>
    </abstract>
  </front>

  <middle>

    <section anchor="introduction" title="Introduction">
      <t>
	The DNSSEC signing algorithms are defined by various RFCs,
	including <xref target="RFC4034"/>, <xref target="RFC5155"/>,
	<xref target="RFC5702"/>, <xref target="RFC5933"/>, <xref
	target="RFC6605"/>, and <xref target="RFC8080"/>.
        DNSSEC is used to provide authentication of data. To ensure
	interoperability, a set of "mandatory-to-implement" DNSKEY
	algorithms are defined.  This document obsoletes
	<xref target="RFC6944"/>.
      </t>

      <section title="Updating Algorithm Implementation Requirements and Usage Guidance">
	<t>
	  The field of cryptography evolves continuously. New, stronger
	  algorithms appear, and existing algorithms are found to be
	  less secure than originally thought. Attacks previously thought
	  to be computationally infeasible become more accessible as the available
	  computational resources increase. Therefore, algorithm
	  implementation requirements and usage guidance need to be
	  updated from time to time to reflect the new reality.  The
	  choices for algorithms must be conservative to minimize the
	  risk of algorithm compromise.
	</t>
      </section>

      <section title="Updating Algorithm Requirement Levels">
	<t>
	  The mandatory-to-implement algorithm of tomorrow should
	  already be available in most implementations of DNSSEC by the
	  time it is made mandatory.  This document attempts to
	  identify and introduce those algorithms for future
	  mandatory-to-implement status.  There is no guarantee that
	  algorithms in use today will become mandatory in the
	  future.  Published algorithms are continuously subjected to
	  cryptographic attack and may become too weak or even be
	  completely broken before this document is updated.
	</t>

	<t>
	  This document only provides recommendations with respect to
	  mandatory-to-implement algorithms or algorithms so weak that
	  they cannot be recommended.  Any
	  algorithm listed in the <xref target="DNSKEY-IANA"/> and
	  <xref target="DS-IANA"/> registries that are not mentioned in this
	  document MAY be implemented.  For clarification and consistency,
	  an algorithm will be specified as MAY in this document only when
	  it has been downgraded from a MUST or a RECOMMENDED to a MAY.
	</t>

	<t>
	  Although this document's primary purpose is to update
	  algorithm recommendations to keep DNSSEC authentication secure
	  over time, it also aims to do so in such a way that DNSSEC
	  implementations remain interoperable.  DNSSEC interoperability
	  is addressed by an incremental introduction or deprecation of
	  algorithms.
	</t>

	<t>
	  <xref target="RFC2119"/> considers the term SHOULD
	  equivalent to RECOMMENDED, and SHOULD NOT equivalent to NOT
	  RECOMMENDED. The authors of this document have chosen to use the
	  terms RECOMMENDED and NOT RECOMMENDED, as this more clearly
	  expresses the intent to implementers.
	</t>
	
	<t>
	  It is expected that deprecation of an algorithm will be
	  performed gradually in a series of updates to this document. 
	  This provides time for various implementations to update their
	  implemented algorithms while remaining interoperable.  Unless
	  there are strong security reasons, an algorithm is expected to be
	  downgraded from MUST to NOT RECOMMENDED or MAY, instead of to MUST NOT.
	  Similarly, an algorithm that has not been mentioned as
	  mandatory-to-implement is expected to be introduced with a
	  RECOMMENDED instead of a MUST.
	</t>

	<t>
	  Since the effect of using an unknown DNSKEY algorithm is
	  that the zone is treated as insecure, it is recommended
	  that algorithms downgraded to NOT RECOMMENDED or lower
	  not be used by authoritative nameservers and DNSSEC
	  signers to create new DNSKEYs.  This will allow for
	  deprecated algorithms to become less and less common over
	  time.  Once an algorithm has reached a sufficiently low
	  level of deployment, it can be marked as MUST NOT so that
	  recursive resolvers can remove support for validating it.
	</t>

	<t>
	  Recursive nameservers are encouraged to retain support for all
	  algorithms not marked as MUST NOT.
	</t>
      </section>

      <section title="Document Audience">
	<t>
	  The recommendations of this document mostly target DNSSEC
	  implementers, as implementations need to meet both high
	  security expectations as well as high interoperability
	  between various vendors and with different versions.
	  Interoperability requires a smooth transition to more secure
	  algorithms.  This perspective may differ from that of
	  a user who wishes to deploy and configure DNSSEC with only the
	  safest algorithm.  On the other hand, the comments and
	  recommendations in this document are also expected to be
	  useful for such users.
	</t>
      </section>

    </section>
    <section anchor="mustshouldmay" title="Conventions Used in This Document">
        <t>
    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
    "MAY", and "OPTIONAL" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
    </section>

    <section anchor="algs" title="Algorithm Selection">

      <section anchor="algs_dnskey" title="DNSKEY Algorithms">

	<t>
	  The following table lists the implementation recommendations for DNSKEY algorithms <xref target="DNSKEY-IANA"/>.
	</t>

	<texttable anchor="tbl_dnskey" suppress-title="true">
          <ttcol align="left">Number</ttcol>
          <ttcol align="left">Mnemonics</ttcol>
          <ttcol align="left">DNSSEC Signing</ttcol>
          <ttcol align="left">DNSSEC Validation</ttcol>

          <c>1</c><c>RSAMD5</c><c>MUST NOT</c><c>MUST NOT</c>
          <c>3</c><c>DSA</c><c>MUST NOT</c><c>MUST NOT</c>
          <c>5</c><c>RSASHA1</c><c>NOT RECOMMENDED</c><c>MUST</c>
          <c>6</c><c>DSA-NSEC3-SHA1</c><c>MUST NOT</c><c>MUST NOT</c>
          <c>7</c><c>RSASHA1-NSEC3-SHA1</c><c>NOT RECOMMENDED</c><c>MUST</c>
          <c>8</c><c>RSASHA256</c><c>MUST</c><c>MUST</c>
          <c>10</c><c>RSASHA512</c><c>NOT RECOMMENDED</c><c>MUST</c>
          <c>12</c><c>ECC-GOST</c><c>MUST NOT</c><c>MAY</c>
          <c>13</c><c>ECDSAP256SHA256</c><c>MUST</c><c>MUST</c>
          <c>14</c><c>ECDSAP384SHA384</c><c>MAY</c><c>RECOMMENDED</c>
	  <c>15</c><c>ED25519</c><c>RECOMMENDED</c><c>RECOMMENDED</c>
	  <c>16</c><c>ED448</c><c>MAY</c><c>RECOMMENDED</c>
	</texttable>

	<t>
	  RSAMD5 is not widely deployed, and there is an industry-wide trend
	  to deprecate MD5 usage.

	</t>

	<t>
	  RSASHA1 and RSASHA1-NSEC3-SHA1 are widely deployed, although
	  the zones deploying it are recommended to switch to
	  ECDSAP256SHA256 as there is an industry-wide trend to move
	  to elliptic curve cryptography.  RSASHA1 does not support
	  NSEC3.  RSASHA1-NSEC3-SHA1 can be used with or without
	  NSEC3.
	</t>

<!-- [rfced] FYI, we added "are" so it reads "and are vulnerable" for 
clarity. Please review that this conveys the intended meaning.

Original:
   DSA and DSA-NSEC3-SHA1 are not widely deployed and vulnerable to
   private key compromise when generating signatures using a weak or
   compromised random number generator.

Edited:
   DSA and DSA-NSEC3-SHA1 are not widely deployed and are vulnerable to
   private key compromise when generating signatures using a weak or
   compromised random number generator.
-->

        <t>
	  DSA and DSA-NSEC3-SHA1 are not widely deployed and
	  are vulnerable to private key compromise when generating
	  signatures using a weak or compromised random number
	  generator.
	</t>

	<t>
	  RSASHA256 is widely used and considered strong. It has been the default
	  algorithm for a number of years and is now slowly being replaced with
	  ECDSAP256SHA256 due to its shorter key and signature size, resulting in
	  smaller DNS packets.
	</t>

        <t>
	  RSASHA512 is NOT RECOMMENDED for DNSSEC signing because it
	  has not seen wide deployment, but there are some deployments; hence, DNSSEC validation MUST implement RSASHA512 to ensure
	  interoperability.  There is no significant difference in
	  cryptographic strength between RSASHA512 and RSASHA256;
	  therefore, use of RSASHA512 is discouraged as it will
	  only make deprecation of older algorithms harder.  People
	  who wish to use a cryptographically stronger algorithm
	  should switch to elliptic curve cryptography algorithms.
	</t>

        <t>
	  ECC-GOST (GOST R 34.10-2001) has been superseded by GOST R
	  34.10-2012 in <xref target="RFC7091"/>.  GOST R 34.10-2012
	  hasn't been standardized for use in DNSSEC.
	</t>

        <t>
	  ECDSAP256SHA256 provides more cryptographic strength
	  with a shorter signature length than either RSASHA256 or
	  RSASHA512.  ECDSAP256SHA256 has been widely deployed; therefore, it is now at MUST level for both validation and
	  signing.  It is RECOMMENDED to use the deterministic digital
	  signature generation procedure of the Elliptic Curve Digital
	  Signature Algorithm (ECDSA), specified in <xref target="RFC6979"/>,
	  when implementing ECDSAP256SHA256 (and ECDSAP384SHA384).
	</t>

	<t>
	  ECDSAP384SHA384 shares the same properties as
	  ECDSAP256SHA256 but offers a modest security advantage over
	  ECDSAP256SHA256 (192 bits of strength versus 128 bits).  For
	  most DNSSEC applications, ECDSAP256SHA256 should be
	  satisfactory and robust for the foreseeable future and is
	  therefore recommended for signing.  While it is unlikely for
	  a DNSSEC use case requiring 192-bit security strength
	  to arise, ECDSA384SHA384 is provided for such applications,
	  and it MAY be used for signing in these cases.
	</t>

	<t>
	  ED25519 and ED448 use the Edwards-curve Digital Security
	  Algorithm (EdDSA).  There are three main advantages of
	  EdDSA: it does not require the use of a unique
	  random number for each signature, there are no padding or
	  truncation issues as with ECDSA, and it is more resilient to
	  side-channel attacks.  Furthermore, EdDSA cryptography is
	  less prone to implementation errors (<xref
	  target="RFC8032"/>, <xref target="RFC8080"/>).  It is
	  expected that ED25519 will become the future RECOMMENDED
	  default algorithm once there's enough support for this
	  algorithm in the deployed DNSSEC validators.
	</t>

      </section>

      <section anchor="algs_dnskey_recommendation" title="DNSKEY Algorithm Recommendation">

	<t>
	  Due to the industry-wide trend towards elliptic curve cryptography,
	  ECDSAP256SHA256 is the RECOMMENDED DNSKEY algorithm for use by new DNSSEC
	  deployments, and users of RSA-based algorithms SHOULD upgrade to
	  ECDSAP256SHA256.
	</t>

      </section>

      <section anchor="algs_ds" title="DS and CDS Algorithms">

	<t>
	  The following table lists the recommendations for Delegation Signer Digest Algorithms
	  <xref target="DS-IANA"/>. These recommendations also apply to the
	  Child Delegation Signer (CDS)
	  RRTYPE as specified in <xref target="RFC7344"/>
	</t>

	<texttable anchor="tbl_ds" suppress-title="true">
          <ttcol align="left">Number</ttcol>
          <ttcol align="left">Mnemonics</ttcol>
          <ttcol align="left">DNSSEC Delegation</ttcol>
          <ttcol align="left">DNSSEC Validation</ttcol>

          <c>0</c><c>NULL (CDS only)</c><c>MUST NOT [*]</c><c>MUST NOT [*]</c>
          <c>1</c><c>SHA-1</c><c>MUST NOT</c><c>MUST</c>
          <c>2</c><c>SHA-256</c><c>MUST</c><c>MUST</c>
          <c>3</c><c>GOST R 34.11-94</c><c>MUST NOT</c><c>MAY</c>
          <c>4</c><c>SHA-384</c><c>MAY</c><c>RECOMMENDED</c>
         <postamble>
          [*] - This is a special type of CDS record signaling removal of
	  DS at the parent in <xref target="RFC8078"/>.
         </postamble>
	</texttable>

	<t>
	  NULL is a special case; see <xref target="RFC8078"/>.
	</t>

	<t>
	  SHA-1 is still widely used for Delegation Signer (DS) records, so validators
	  MUST implement validation, but it MUST NOT be used to
	  generate new DS and CDS records (see "<xref target="operation" format="title"/>" for caveats when upgrading from the SHA-1 to
	  SHA-256 DS algorithm.)
	</t>

        <t>
	  SHA-256 is widely used and considered strong.
	</t>

        <t>
	  GOST R 34.11-94 has been superseded by GOST R 34.11-2012 in
	  <xref target="RFC6986"/>.  GOST R 34.11-2012 has not been
	  standardized for use in DNSSEC.
	</t>

	<t>
	  SHA-384 shares the same properties as SHA-256 but offers a
	  modest security advantage over SHA-256 (384 bits of strength
	  versus 256 bits).  For most applications of DNSSEC, SHA-256
	  should be satisfactory and robust for the foreseeable
	  future and is therefore recommended for DS and CDS records.
	  While it is unlikely for a DNSSEC use case requiring
	  384-bit security strength to arise, SHA-384 is provided for
	  such applications, and it MAY be used for generating DS and
	  CDS records in these cases.
	</t>

      </section>

      <section anchor="algs_ds_recommendation" title="DS and CDS Algorithm Recommendation">

	<t>
   An operational recommendation for new and existing deployments: SHA-256 
   is the RECOMMENDED DS and CDS algorithm.
	</t>

      </section>

    </section>

    <section anchor="security" title="Security Considerations">

      <t>
	The security of cryptographic systems depends on both
	the strength of the cryptographic algorithms chosen and the
	strength of the keys used with those algorithms.  The security
	also depends on the engineering of the protocol used by the
	system to ensure that there are no non-cryptographic ways to
	bypass the security of the overall system.
      </t>

      <t>
	This document concerns itself with the selection of cryptographic
	algorithms for use in DNSSEC, specifically with the selection
	of "mandatory-to-implement" algorithms. The algorithms identified
	in this document as MUST or RECOMMENDED to implement are not known
	to be broken (in the cryptographic sense) at the current time, and
	cryptographic research so far leads us to believe that they are
	likely to remain secure into the foreseeable future.  However, this
	isn't necessarily forever, and it is expected that new revisions of
	this document will be issued from time to time to reflect the current
	best practices in this area.
      </t>


<t>
   Retiring an algorithm too soon would result in a zone (signed with
   a retired algorithm) being downgraded to the equivalent of an unsigned
   zone.  Therefore, algorithm deprecation must be
	done very slowly and only after careful consideration and
	measurement of its use.
      </t>
    </section>

    <section anchor="operation" title="Operational Considerations">
      <t>
	DNSKEY algorithm rollover in a live zone is a complex
	process.  See <xref target="RFC6781"/> and <xref target="RFC7583"/>
	for guidelines on how to perform algorithm rollovers.
      </t>
      <t>
   DS algorithm rollover in a live zone is also a complex process.
   Upgrading an algorithm at the same time as rolling a new Key
   Signing Key (KSK) will lead to DNSSEC validation failures.
   Administrators MUST complete the process of the DS algorithm upgrade
   before starting a rollover process for a new KSK.
      </t>
    </section>


    <section anchor="iana" title="IANA Considerations">
      <t>This document has no IANA actions.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &RFC2119;
      &RFC4034;
      &RFC5155;
      &RFC5702;
      &RFC6605;
      &RFC6979;
      &RFC6986;
      &RFC7344;
      &RFC8032;
      &RFC8078;
      &RFC8080;
      &RFC8174;
    </references>
    <references title="Informative References">
      &RFC5933;
      &RFC6781;
      &RFC6944;
      &RFC7091;
      &RFC7583;
      <reference anchor="DNSKEY-IANA" target="http://www.iana.org/assignments/dns-sec-alg-numbers">
        <front>
          <title>Domain Name System Security (DNSSEC) Algorithm Numbers</title>
          <author>
            <organization>IANA</organization>
          </author>
          <date />
        </front>
      </reference>
      <reference anchor="DS-IANA" target="http://www.iana.org/assignments/ds-rr-types">
        <front>
          <title>Delegation Signer (DS) Resource Record (RR) Type Digest Algorithms</title>
          <author>
            <organization>IANA</organization>
          </author>
          <date />
        </front>
      </reference>
    </references>
<!-- [rfced] 4307bis has been published as RFC 8247, so we have updated
the text below accordingly. Please let us know if this is not accurate.

Original
   This document borrows text from RFC 4307 by Jeffrey I.  Schiller of
   the Massachusetts Institute of Technology (MIT) and the 4307bis
   document by Yoav Nir, Tero Kivinen, Paul Wouters, and Daniel Migault.

Perhaps 
   This document borrows text from RFC 4307 by Jeffrey I. Schiller of
   the Massachusetts Institute of Technology (MIT) and RFC 8247 by Yoav Nir,
   Tero Kivinen, Paul Wouters, and Daniel Migault.
--> 
    <section anchor="ack" title="Acknowledgements" numbered="no">
      <t>
	This document borrows text from RFC 4307 by Jeffrey I.&nbsp;Schiller
	of the Massachusetts Institute of Technology (MIT) and RFC 8247 by Yoav Nir, Tero Kivinen, Paul Wouters, and Daniel Migault.
	Much of the original text has been copied verbatim.
      </t>
      <t>
	We wish to thank Michael Sinatra, Roland van Rijswijk-Deij,
	Olafur Gudmundsson, Paul Hoffman, Evan Hunt, and Peter Yee for their feedback.
      </t>
      <t>
	Kudos to Roy Arends for bringing the DS rollover issue to light.
      </t>
    </section>

  </back>
</rfc>
