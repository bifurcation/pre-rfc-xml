<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc strict='no'?>
<?rfc iprnotified='no'?>
<?rfc rfcedstyle="yes"?>
<rfc category="exp" consensus="yes" ipr="trust200902" number="6706"
     submissionType="IETF">
  <front>
    <title abbrev="AERO">Asymmetric Extended Route Optimization (AERO)</title>

    <author fullname="Fred L. Templin" initials="F." role="editor"
            surname="Templin">
      <organization>Boeing Research &amp; Technology</organization>

      <address>
        <postal>
          <street>P.O. Box 3707 MC 7L-49</street>

          <city>Seattle</city>

          <region>WA</region>

          <code>98124</code>

          <country>USA</country>
        </postal>

        <email>fltemplin@acm.org</email>
      </address>
    </author>

    <date month="August" year="2012" />

 

    <keyword>route, optimize, optimization, redirect, redirection, protocol,
    routing, link, multi-access, IPv6</keyword>

    <abstract>
      <t>Nodes attached to common multi-access link types (e.g.,
      multicast-capable, shared media, non-broadcast multiple access (NBMA),
      etc.) can exchange packets as neighbors on the link, but they may not
      always be provisioned with sufficient routing information for optimal
      neighbor selection. Such nodes should therefore be able to discover a
      trusted intermediate router on the link that provides both forwarding
      services to reach off-link destinations and redirection services to
      inform the node of an on-link neighbor that is closer to the final
      destination. This redirection can provide a useful route optimization,
      since the triangular path from the ingress link neighbor, to the
      intermediate router, and finally to the egress link neighbor may be
      considerably longer than the direct path from ingress to egress.
      However, ordinary redirection may lead to operational issues on certain
      link types and/or in certain deployment scenarios. This document
      therefore introduces an Asymmetric Extended Route Optimization (AERO)
      capability that addresses the issues.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="intro" title="Introduction">
      <t>Nodes attached to common multi-access link types (e.g.,
      multicast-capable, shared media, non-broadcast multiple access (NBMA),
      etc.) can exchange packets as neighbors on the link, but they may not
      always be provisioned with sufficient routing information for optimal
      neighbor selection. Such nodes should therefore be able to discover a
      trusted intermediate router on the link that provides both default
      forwarding services to reach off-link destinations and redirection
      services to inform the node of an on-link neighbor that is closer to the
      final destination.</t>


      <t><figure anchor="redirect-fig"
          title="Traditional Multi-Access Link Redirection">
          <artwork><![CDATA[               +--------------+
               |   Router A   |
               |    (D->C)    |
               +--------------+
                      |
    X--------+--------+--------+------X
             |                 |
  +----------+---+         +---+----------+
  |    Node B    |         |   Router C   |
  | (default->A) |         +-------+------+
  +--------------+                .-.
                               ,-(  _)-.
                            .-(_ IPv6  )-.
                          (__    EUN      )
                             `-(______)-' 
                           +-------+------+
                           |    Node D    |
                           +--------------+
]]></artwork>
        </figure><xref target="redirect-fig" /> shows a traditional
      multi-access link redirection scenario. In this figure, node ('B') is
      provisioned with only a default route with router ('A') as the next hop.
      Router ('A'), in turn, has a more specific route that lists router ('C')
      as the next-hop neighbor on the link for the End User Network (EUN)
      attached to node ('D').</t>

      <t>If node ('B') has a packet to send to node ('D'), node ('B') is
      obliged to send its initial packets via router ('A'). Router ('A') then
      forwards the packet to router ('C') and also returns a redirection
      control message to inform ('B') that ('C') is, in fact, an on-link
      neighbor that is closer to the final destination ('D'). After receiving
      the redirection control message, node ('B') can place a more specific
      route in its forwarding table so that future packets destined to node
      ('D') can be sent directly via router ('C'), as shown in <xref
      target="redirect-fig2" />.</t>


      <t><figure anchor="redirect-fig2"
          title="More Specific Route Following Redirection">
          <artwork><![CDATA[               +--------------+
               |   Router A   |
               |    (D->C)    |
               +--------------+
                      |
    X--------+--------+--------+------X
             |                 |
  +----------+---+         +---+----------+
  |    Node B    |         |   Router C   |
  | (default->A) |         +-------+------+
  |    (D->C)    |                .-.
  +--------------+             ,-(  _)-.
                            .-(_ IPv6  )-.
                          (__    EUN      )
                             `-(______)-' 
                           +-------+------+
                           |    Node D    |
                           +--------------+
]]></artwork>
        </figure> This traditional redirection can provide a useful route optimization,
      since the triangular path from the ingress link neighbor, to the
      intermediate router, and finally to the egress link neighbor may be
      considerably longer than the direct path from ingress to egress.
      However, ordinary redirection may lead to operational issues on certain
      link types and/or in certain deployment scenarios.</t>

      <t>For example, when an ingress link neighbor accepts an ordinary
      redirection control message, it has no way of knowing whether the egress
      link neighbor is ready and willing to accept packets directly without
      forwarding through an intermediate router. Likewise, the egress has no
      way of knowing that the ingress is authorized to forward packets from
      the claimed network-layer source address. (This is especially important
      for very large links, since any node on the link can spoof the
      network-layer source address with low probability of detection even if
      the link-layer source address cannot be spoofed.) Additionally, the
      ingress would have no way of knowing whether the direct path to the
      egress has failed, nor whether the final destination has moved away from
      the egress to some other network attachment point.</t>

      <t>Therefore, a new approach is required that can enable redirection
      signaling from the egress to the ingress link node under the mediation
      of a trusted intermediate router. The mechanism is asymmetric (since
      only the forward direction from the ingress to the egress is optimized)
      and extended (since the redirection extends forward to the egress before
      reaching back to the ingress). This document therefore introduces an
      Asymmetric Extended Route Optimization (AERO) capability that addresses
      the issues.</t>

      <t>While the AERO mechanisms were initially designed for the specific
      purpose of NBMA tunnel virtual interfaces (e.g., see <xref
      target="RFC2529" />, <xref target="RFC5214" />, <xref
      target="RFC5569" />, and <xref target="VET" />), they can also be
      applied to any multiple access link types that support redirection. The
      AERO techniques are discussed herein with reference to IPv6 <xref
      target="RFC2460" /><xref target="RFC4861" /><xref
      target="RFC4862" /><xref target="RFC3315" />; however, they can also be
      applied to any other network-layer protocol (e.g., IPv4 <xref
      target="RFC0791" /><xref target="RFC0792" /><xref target="RFC2131" />,
      etc.) that provides a redirection service (details of operation for
      other network-layer protocols are out of scope).</t>

      <t>This document is an Experimental RFC; therefore, it does not seek to
      define a new standard for the Internet. Experimental status instead of
      Standards Track has been used since the document proposes a new and
      different dynamic routing mechanism. Experimentation will focus on
      candidate multi-access link types that can connect large numbers of
      neighboring nodes where the use of existing dynamic routing protocols
      may be impractical. Examples include NBMA tunnel virtual links, large
      bridged campus LANs, etc.</t>
    </section>

    <section anchor="terminology" title="Terminology">
      <t>The terminology in the normative references applies; the following
      terms are defined within the scope of this document:</t>

      <t>
        <list style="hanging">
          <t hangText="AERO link"><vspace />any link (either physical or
          virtual) over which the AERO mechanisms can be applied. (For
          example, a virtual overlay of tunnels can serve as an AERO
          link.)</t>

          <t hangText="AERO interface"><vspace />a node's attachment to an
          AERO link.</t>

          <t hangText="AERO node"><vspace />a router or host that is connected
          to an AERO link and that participates in the AERO protocol on that
          link.</t>

          <t
          hangText="intermediate AERO router (&quot;intermediate router&quot;)"><vspace />a
          router that configures an advertising router interface on an AERO
          link over which it can provide default forwarding and redirection
          services for other AERO nodes.</t>

          <t hangText="edge AERO router (&quot;edge router&quot;)"><vspace />a
          router that configures a non-advertising router interface on an AERO
          link over which it can connect End User Networks (EUNs) to the AERO
          link.</t>

          <t hangText="AERO host"><vspace />a simple host on an AERO link.</t>

          <t
          hangText="ingress AERO node (&quot;ingress node&quot;)"><vspace />a
          node that injects packets into an AERO link.</t>

          <t hangText="egress AERO node (&quot;egress node&quot;)"><vspace />a
          node that receives packets from an AERO link.</t>
        </list>
      </t>

      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119" />.</t>
    </section>

    <section title="Motivation">
      <t>AERO was designed to operate as an on-demand route optimization
      function for nodes attached to a single multi-access link, i.e., similar
      to the standard IPv6 redirection mechanism based on ICMPv6 messaging
      <xref target="RFC4443" /><xref target="RFC4861" />. However, AERO
      differs in that the target of the redirection first receives a
      pre-authorization notification, after which it returns route
      optimization information to the source of the original packet. This
      scenario calls into question whether a standard dynamic routing protocol
      could be used instead of AERO, but a number of considerations indicate
      that standard routing protocols may be poorly suited for the use cases
      AERO was designed to address.</t>

      <t>First, AERO is designed to work on very large multiple access links
      that may connect a mix of many thousands of routers and hosts.
      Traditional proactive dynamic routing protocols such as OSPF, IS-IS,
      RIP, OLSR (Optimized Link State Routing), and TBRPF (Topology
      Dissemination Based on Reverse-Path Forwarding) may be inefficient in
      such environments due to the control message overhead scaling when large
      numbers of routers are present and/or when link capacity is low.
</t>

      <t>Second, AERO is designed to work on-demand of data packet arrival,
      but it only seeks to discover neighbors on the same link and not distant
      nodes that may be located many link hops away. Reactive dynamic routing
      protocols such as Ad hoc On-Demand Distance Vector (AODV) and Dynamic
      Source Routing (DSR) also operate on-demand; however, they flood
      specialized route discovery messages that reach all nodes on the link
      and may further traverse multiple link hops before a route reply is
      received. This requires a multicast-capable network and does not ensure
      delivery of the original data packet, which may be dropped or delayed
      during route discovery.</t>

      <t>Additionally, AERO is designed to override an existing route to a
      destination if the existing route directs traffic along a sub-optimal
      path via an extraneous router on the shared link. AERO nodes send data
      packets over a preexisting working route, and they may subsequently
      receive notification of a better route based on route optimization
      feedback from a trusted on-link neighbor. This stands in contrast to
      on-demand routing protocols that were designed to operate when no
      preexisting working routes are present and that multicast explicit route
      request messages to receive a route reply rather than simply unicast
      forwarding the data packet via a preexisting route.</t>

      <t>Finally, AERO requires less control message and/or processing
      overhead than standard dynamic routing protocols on links for which the
      number of routes that must be maintained by each router is far smaller
      than the total number of routers on the link, and the routes maintained
      by each router may be changing over time. For example, on a link that
      connects N nodes, it will often be the case that each node will only
      communicate with a small number of link neighbors, and the set of
      neighbors may change dynamically over time. Therefore, the number of
      active neighbor pairs on the link is V*N (where V is a small variable
      number) instead of N**2. This is especially important on very large
      links, e.g., for values of N such as 1,000 or more.</t>
    </section>

    <section title="Example Use Cases">
      <t>AERO was designed to satisfy numerous operational use cases. As a
      first example, a hypothetical major airline has deployed an overlay
      network on top of the global Internet to track the aircraft in its
      fleet. The global Internet therefore acts as the "link" over which the
      overlay network is configured. Each aircraft acts as a mobile router
      that fronts for an internal network that includes various devices
      controlled and monitored by the airline. However, it would be
      impractical for each aircraft to track the changing locations of all
      other aircraft in the fleet due to control message overhead on limited
      capacity communication links.</t>

      <t>In this example, an aircraft ('A') en route to its destination needs
      to report its ETA and communicate passenger itineraries to other en
      route aircraft that will be servicing passenger connections. ('A') knows
      the overlay network addresses of the other aircraft, but does not know
      the current underlay address mappings. ('A') sends its initial messages
      targeted to the other aircraft via an airline central dispatch router
      ('D'), which may be located in a far away location. ('D') forwards the
      messages, but also initiates the AERO redirection procedure to step out
      of the triangular path and allow direct aircraft-to-aircraft
      communications.</t>

      <t>In a second example, Mobile Ad hoc Networks (MANETs) are often
      deployed in environments with a high degree of mobility, attrition, and
      very limited wireless communications link bandwidth. Such environments
      typically also require the use of network-layer security mechanisms that
      view the MANET as a "link" over which encrypted messages are forwarded
      in an overlay network. In such environments, a dynamic routing protocol
      running in the overlay network may serve to add unacceptable additional
      congestion to the already overtaxed wireless links. In that case, the
      AERO route optimization mechanism can eliminate costly extraneous
      routing hops without imparting additional control message overhead.</t>

      <t>In a further example, a large campus LAN that is joined by Layer 2
      (L2) bridges may connect many thousands of routers and hosts that appear
      to share a single common multi-access link. In that case, the AERO
      mechanisms can be applied to satisfy the necessary intra-link route
      optimization functions without employing an adjunct dynamic routing
      protocol that may be inefficient for reasons mentioned above.</t>
    </section>

    <section anchor="req" title="Requirements">
      <t>The route optimization mechanism must satisfy the following
      requirements:</t>

      <t>
        <list hangIndent="8" style="hanging">
          <t
          hangText="Req 1:  Off-load traffic from performance-critical gateways."><vspace />The
          mechanism must offload sustained transit though an intermediate AERO
          router that would otherwise become a traffic concentrator.</t>

          <t hangText="Req 2:  Support route optimization."><vspace />The
          ingress AERO node should be able to send packets directly to the
          egress node without forwarding through an intermediate router for
          route optimization purposes.</t>

          <t hangText="Req 3:  Support scaling."><vspace />For scaling
          purposes, support interworking and control message forwarding
          between multiple intermediate routers (see <xref
          target="scaling" />).</t>

          <t
          hangText="Req 4:  Do not circumvent ingress filtering."><vspace />The
          mechanism must not open an attack vector where network-layer source
          address spoofing is enabled even when link-layer source address
          spoofing is disabled.</t>

          <t
          hangText="Req 5:  Do not expose packets to loss due to filtering."><vspace />The
          ingress AERO node must have a way of knowing that the egress AERO
          node will accept its forwarded packets.</t>

          <t
          hangText="Req 6:  Do not expose packets to loss due to path failure."><vspace />The
          ingress AERO node must have a way of discovering whether the AERO
          egress node has gone unreachable on the route optimized path.</t>

          <t
          hangText="Req 7:  Do not introduce routing loops."><vspace />Intermediate
          routers must not invoke a route optimization that would cause a
          routing loop to form.</t>

          <t hangText="Req 8:  Support mobility."><vspace />The mechanism must
          continue to work even if the final destination node/network moves
          from a first egress node and re-associates with a second egress
          node.</t>

          <t
          hangText="Req 9:  Support link layer address changes."><vspace />The
          mechanism must continue to work even if the Layer 2 addresses of
          ingress and/or egress AERO nodes change.</t>

          <t hangText="Req 10: Support network renumbering."><vspace />The
          mechanism must provide graceful transition when an AERO node's
          attached EUN is renumbered.</t>
        </list>
      </t>
    </section>

    <section title="Asymmetric Extended Route Optimization (AERO)">
      <t>The following sections specify an Asymmetric Extended Route
      Optimization (AERO) capability that fulfills the requirements specified
      in <xref target="req" />.</t>

      <section anchor="routing-proto" title="AERO Link Dynamic Routing">
        <t>In many AERO link use case scenarios (e.g., small enterprise
        networks, small and stable MANETs, etc.), routers can engage in a
        traditional dynamic routing protocol so that routing/forwarding tables
        can be populated and standard forwarding between routers can be used.
        In other scenarios (e.g., large enterprise/ISP networks, cellular
        service provider networks, dynamic MANETs, etc.), this might be
        impractical due to routing protocol control message scaling
        issues.</t>

        <t>When a traditional dynamic routing protocol cannot be used, the
        mechanisms specified in this section can provide a useful on-demand
        route discovery capability. When both traditional dynamic routing
        protocols and the AERO mechanism are active on the same link, routes
        discovered by the dynamic routing protocol should take precedence over
        those discovered by AERO.</t>
      </section>

      <section anchor="no-onlink-prefix" title="AERO Node Behavior">
        <t>The following sections discuss characteristics of nodes attached to
        links over which AERO can be used.</t>

        <section anchor="nodetype" title="AERO Node Types">
          <t>Intermediate AERO routers configure their AERO link interfaces as
          advertising router interfaces (see <xref target="RFC4861" />,
          Section 6.2.2); therefore, they may send Router Advertisement (RA)
          messages that include non-zero Router Lifetimes.</t>

          <t>Edge AERO routers configure their AERO link interfaces as
          non-advertising router interfaces.</t>

          <t>AERO hosts configure their AERO link interfaces as simple host
          interfaces.</t>
        </section>

        <section anchor="host-behave" title="AERO Host Behavior">
          <t>AERO hosts observe the IPv6 host requirements defined in <xref
          target="RFC6434" />, except that AERO hosts also engage in the AERO
          route optimization procedure as specified in <xref
          target="predirect" />.</t>
        </section>

        <section anchor="router-behave" title="Edge AERO Router Behavior">
          <t>Edge AERO routers observe the IPv6 router requirements defined in
          <xref target="RFC6434" /> except that they act as "hosts" on their
          non-advertising AERO link router interfaces in the same fashion as
          for IPv6 Customer Premises Equipment (CPE) routers <xref
          target="RFC6204" />. Edge routers can then acquire managed prefix
          delegations aggregated by an intermediate router through the use of,
          e.g., DHCPv6 Prefix Delegation <xref target="RFC3633" />,
          administrative configuration, etc.</t>

          <t>After the edge router acquires prefixes, it can sub-delegate them
          to nodes and links within its attached EUNs, then it can forward any
          outbound packets coming from its EUNs via the intermediate router.
          The edge router also engages in the AERO route optimization
          procedure as specified in <xref target="predirect" />.</t>
        </section>

        <section anchor="gateway-behave"
                 title="Intermediate AERO Router Behavior">
          <t>Intermediate AERO routers observe the IPv6 router requirements
          defined in <xref target="RFC6434" /> and respond to Router
          Solicitation (RS) messages from AERO hosts and edge routers on their
          advertising AERO link router interfaces by returning an RA message.
          Intermediate routers further configure a DHCP relay/server function
          on their AERO links and/or provide an administrative interface for
          delegation of network-layer addresses and prefixes.</t>

          <t>When the intermediate router completes a stateful network-layer
          address or prefix delegation transaction (e.g., as a DHCPv6
          relay/server, etc.), it establishes forwarding table entries that
          list the link-layer address of the client AERO node as the
          link-layer address of the next hop toward the delegated
          network-layer addresses/prefixes.</t>

          <t>When the intermediate router forwards a packet out the same AERO
          interface on which it arrived, it initiates an AERO route
          optimization procedure as specified in <xref
          target="predirect" />.</t>
        </section>
      </section>

      <section anchor="avoidance-fig"
               title="AERO Reference Operational Scenario">
        <t><xref target="no-onlink-prefix-fig" /> depicts the AERO reference
        operational scenario. The figure shows an intermediate AERO router
        ('A'), two edge AERO routers ('B', 'D'), an AERO host ('F'), and three
        ordinary IPv6 hosts ('C', 'E', 'G'):</t>

        <figure anchor="no-onlink-prefix-fig"
                title="AERO Reference Operational Scenario">
          <artwork><![CDATA[                 .-(::::::::)
              .-(::: IPv6 :::)-.   +-------------+
             (:::: Internet ::::)--|    Host G   |
              `-(::::::::::::)-'   +-------------+
                 `-(::::::)-'       2001:db8:3::1
                      |
               +--------------+        +--------------+
               | Intermediate |        |  AERO Host F |
               | AERO Router A|        | (default->A) |
               | (C->B; E->D) |        +--------------+
               +--------------+          2001:db8:2:1
                    L3(A)                   L3(F)
                    L3(A)                   L2(F)
                      |                       |
    X-----+-----------+-----------+-----------+---X
          |       AERO Link       |
         L2(B)                  L2(D)
         L3(B)                  L3(D)
  +--------------+         +--------------+          .-.
  |  AERO Edge   |         |  AERO Edge   |       ,-(  _)-.
  |   Router B   |         |   Router D   |    .-(_ IPv6  )-.
  | (default->A) |         | (default->A) |--(__    EUN      )
  +--------------+         +--------------+     `-(______)-'
  2001:db8:0::/48           2001:db8:1::/48           |
          |                                     2001:db8:1::1
         .-.                                   +-------------+
      ,-(  _)-.      2001:db8:0::1             |    Host E   |
   .-(_ IPv6  )-.   +-------------+            +-------------+
 (__    EUN      )--|    Host C   |
    `-(______)-'    +-------------+
]]></artwork>
        </figure>

        <t>In <xref target="no-onlink-prefix-fig" />, the intermediate AERO
        router ('A') connects to the AERO link and connects to the IPv6
        Internet, either directly or via other IPv6 routers (not shown).
        Intermediate router ('A') configures an AERO link interface with a
        link-local network-layer address L3(A) and with link-layer address
        L2(A). The intermediate router ('A') next arranges to add L2(A) to a
        published list of valid intermediate routers for the link.</t>

        <t>AERO node ('B') is an AERO edge router that connects to the AERO
        link via an interface with link-local network-layer address L3(B) and
        with link-layer address L2(B). Node ('B') configures a default route
        with next-hop network-layer address L3(A) via the AERO interface, and
        it assigns the network-layer prefix 2001:db8:0::/48 to its attached
        EUN link. IPv6 host ('C') attaches to the EUN, and it configures the
        network-layer address 2001:db8:0::1.</t>

        <t>AERO node ('D') is an AERO edge router that connects to the AERO
        link via an interface with link-local network-layer address L3(D) and
        with link-layer address L2(D). Node ('D') configures a default route
        with next-hop network-layer address L3(A) via the AERO interface, and
        it assigns the network-layer prefix 2001:db8:1::/48 to its attached
        EUN link. IPv6 host ('E') attaches to the EUN, and it configures the
        network-layer address 2001:db8:1::1.</t>

        <t>AERO host ('F') connects to the AERO link via an interface with
        link-local network-layer address L3(F) and with link-layer address
        L2(F). Host ('F') configures a default route with next-hop
        network-layer address L3(A) via the AERO interface, and it assigns the
        network-layer address 2001:db8:2::1 to the AERO interface.</t>

        <t>Finally, IPv6 host ('G') connects to an IPv6 network outside of the
        AERO link domain. Host ('G') configures its IPv6 interface in a manner
        specific to its attached IPv6 link, and it assigns the network-layer
        address 2001:db8:3::1 to its IPv6 link interface.</t>

        <t>In these arrangements, intermediate router ('A') must maintain
        state that associates the delegated network-layer addresses/prefixes
        with the link-local network-layer addresses of the correct edge
        routers and/or hosts on the AERO link. The nodes must, in turn,
        maintain at least a default route that points to intermediate router
        ('A'), and they can discover more-specific routes either via a
        proactive dynamic routing protocol or via the AERO mechanisms
        specified in <xref target="predirect" />.</t>
      </section>

      <section anchor="predirect" title="AERO Specification">
        <t><xref target="avoidance-fig" /> describes the AERO reference
        operational scenario. We now discuss the operation and protocol
        details of AERO with respect to this reference scenario.</t>

        <section anchor="redirect" title="Traditional Redirection Approaches">
          <t>With reference to <xref target="no-onlink-prefix-fig" />, when
          the IPv6 source host ('C') sends a packet to an IPv6 destination
          host ('E'), the packet is first forwarded via the EUN to ingress
          AERO node ('B'). The ingress node ('B') then forwards the packet
          over its AERO interface to intermediate router ('A'), which then
          forwards the packet to egress AERO node ('D'), where the packet is
          finally forwarded to the IPv6 destination host ('E'). When
          intermediate router ('A') forwards the packet back out on its
          advertising AERO interface, it must arrange to redirect ingress node
          ('B') toward egress node ('D') as a better next-hop node on the AERO
          link that is closer to the final destination. However, this
          redirection process should only occur if there is assurance that
          both the ingress and egress nodes are willing participants.</t>

          <t>Consider a first alternative in which intermediate router ('A')
          informs ingress node ('B') only and does not inform egress node
          ('D') (i.e., "traditional redirection"). In that case, the egress
          node has no way of knowing that the ingress is authorized to forward
          packets from their claimed source network-layer addresses, and it
          may simply elect to drop the packets. Also, the ingress node has no
          way of knowing whether the egress is performing some form of source
          address filtering that would reject packets arriving from a node
          other than a trusted default router, nor whether the egress is even
          reachable via a direct path that does not involve the intermediate
          router. Finally, the ingress node has no way of knowing whether the
          final destination has moved away from the egress node.</t>

          <t>Consider a second alternative in which intermediate router ('A')
          informs both ingress node ('B') and egress node ('D') separately,
          via independent redirection control messages (i.e., "augmented
          redirection"). In that case, several conditions can occur that could
          result in communication failures. First, if the ingress receives the
          redirection control message but the egress does not, subsequent
          packets sent by the ingress could be dropped due to filtering since
          the egress would not have neighbor state to verify their source
          network-layer addresses. Second, if the egress receives the
          redirection control message but the ingress does not, subsequent
          packets sent in the reverse direction by the egress would be lost.
          Finally, timing issues surrounding the establishment and garbage
          collection of neighbor state at the ingress and egress nodes could
          yield unpredictable behavior. For example, unless the timing were
          carefully coordinated through some form of synchronization loop,
          there would invariably be instances in which one node has the
          correct neighbor state and the other node does not resulting in
          non-deterministic packet loss.</t>

          <t>Since neither of these alternatives can satisfy the requirements
          listed in <xref target="req" />, a new redirection technique (i.e.,
          "AERO redirection") is needed.</t>
        </section>

        <section title="AERO Concept of Operations">
          <t>AERO redirection is used on links for which the traditional
          redirection approaches described in <xref target="redirect" /> are
          insufficient to satisfy all requirements. We now discuss the concept
          of operations for this new approach.</t>

          <t>Again, with reference to <xref target="no-onlink-prefix-fig" />,
          when source host ('C') sends a packet to destination host ('E'), the
          packet is first forwarded over the source host's attached EUN to
          ingress node ('B'), which then forwards the packet via its AERO
          interface to intermediate router ('A').</t>

          <t>Using AERO redirection, intermediate router ('A') then forwards
          the packet out the same AERO interface toward egress node ('D') and
          also sends an AERO "Predirect" message forward to the egress node as
          specified in <xref target="sending_pre" />. The AERO Predirect
          message includes the identity of ingress node ('B') as well as
          information that egress node ('D') can use to determine the
          longest-match prefixes that cover the source and destination
          network-layer addresses of the packet that triggered the
          predirection event. After egress node ('D') receives the AERO
          Predirect message, it process the message and returns an AERO
          Redirect message to the intermediate router ('A') as specified in
          <xref target="processing" />. (During the process, it also creates
          or updates neighbor state for ingress node ('B'), and retains this
          (src, dst) "prefix pair" as ingress filtering information to accept
          future packets using addresses matched by the prefixes from ingress
          node ('B').)</t>

          <t>When the intermediate router ('A') receives the AERO Redirect
          message, it processes the message and forwards it on to ingress node
          ('B') as specified in <xref target="forwarding" />. The message
          includes the identity of egress node ('D') as well as information
          that ingress node ('B') can use to determine the longest-match
          prefixes that cover the source and destination network-layer
          addresses of the packet that triggered the redirection event. After
          ingress node ('B') receives the AERO Redirect message, it processes
          the message as specified in <xref target="processing_re" />. (During
          the process, it also creates or updates neighbor state for egress
          node ('D'), and retains this prefix pair as forwarding information
          to forward future packets using addresses matched by the prefixes to
          the egress node ('D').)</t>

          <t>Following the above AERO Predirect/Redirect message exchange,
          forwarding of packets with source and destination network-layer
          addresses covered by the longest-match prefix pair is enabled in the
          forward direction from ingress node ('B') to egress node ('D'). The
          mechanisms that enable this exchange are specified in the following
          sections.</t>
        </section>

        <section title="Conceptual Data Structures and Protocol Constants">
          <t>Each AERO node maintains a per-AERO interface conceptual neighbor
          cache that includes an entry for each neighbor it communicates with
          on the AERO link, the same as for any IPv6 interface (see <xref
          target="RFC4861" />).</t>

          <t>Each AERO interface neighbor cache entry further maintains two
          lists of (src, dst) prefix pairs. The AERO node adds a prefix pair
          to the ACCEPT list if it has been informed by a trusted intermediate
          router that it is safe to accept packets from the neighbor using
          network-layer source and destination addresses covered by the prefix
          pair. The AERO node adds a prefix pair to the FORWARD list if it has
          been informed by a trusted intermediate router that it is permitted
          to forward packets to the neighbor using network-layer addresses
          covered by the prefix pair.</t>

          <t>When the node adds a prefix pair to a neighbor cache entry ACCEPT
          list, it also sets an expiration timer for the prefix pair to
          ACCEPT_TIME seconds. When the node adds a prefix pair to a neighbor
          cache entry FORWARD list, it also sets an expiration timer for the
          prefix pair to FORWARD_TIME seconds. The node further maintains a
          keepalive interval KEEPALIVE_TIME used to limit the number of
          keepalive control messages. Finally, the node maintains a constant
          value MAX_RETRY to limit the number of keepalives sent when a
          neighbor has gone unreachable.</t>

          <t>It is RECOMMENDED that FORWARD_TIME be set to the default
          constant value 30 seconds to match the default REACHABLE_TIME value
          specified for IPv6 neighbor discovery <xref target="RFC4861" />.</t>

          <t>It is RECOMMENDED that ACCEPT_TIME be set to the default constant
          value 40 seconds to allow a 10 second window so that the AERO
          redirection procedure can converge before the ACCEPT_TIME timer
          decrements below FORWARD_TIME.</t>

          <t>It is RECOMMENDED that KEEPALIVE_TIME be set to the default
          constant value 5 seconds to providing timely reachability
          verification without causing excessive control message overhead.</t>

          <t>It is RECOMMENDED that MAX_RETRY be set to 3 the same as
          described for IPv6 neighbor discovery address resolution in Section
          7.3.3 of <xref target="RFC4861" />.</t>

          <t>Different values for FORWARD_TIME, ACCEPT_TIME, KEEPALIVE_TIME,
          and MAX_RETRY MAY be administratively set, if necessary, to better
          match the AERO link's performance characteristics; however, if
          different values are chosen, all nodes on the link MUST consistently
          configure the same values. ACCEPT_TIME SHOULD further be set to a
          value that is sufficiently longer than FORWARD time to allow the
          AERO redirection procedure to converge.</t>
        </section>

        <section anchor="verify" title="Data Origin Authentication">
          <t>AERO nodes MUST employ a data origin authentication check for the
          packets they receive on an AERO interface. In particular, the node
          considers the network-layer source address correct for the
          link-layer source address if at least one of the following is
          true:</t>

          <t><list style="symbols">
              <t>the network-layer source address is an on-link address that
              embeds the link-layer source address, or</t>

              <t>the network-layer source address is explicitly linked to the
              link-layer source address through per-neighbor state, or</t>

              <t>the link-layer source address is the address of a trusted
              intermediate AERO router.</t>
            </list>When the AERO node receives a packet on an AERO interface,
          it processes the packet further if it satisfies one of these data
          origin authentication conditions; otherwise, it drops the
          packet.</t>

          <t>Note that on links in which link-layer address spoofing is
          possible, AERO nodes may require additional securing mechanisms. To
          address this, future work will define a strong data origin
          authentication scheme such as the use of digital signatures.</t>
        </section>

        <section anchor="rmsg" title="AERO Redirection Message Format">
          <t>AERO Redirect/Predirect messages use the same format as for
          ICMPv6 Redirect messages depicted in Section 4.5 of <xref
          target="RFC4861" />; however, the messages are encapsulated in a UDP
          header <xref target="RFC0768" /> to distinguish them from ordinary
          ICMPv6 Redirect messages. AERO Redirect messages therefore require a
          new UDP service port number 'AERO_PORT'.</t>

          <t>AERO Redirect/Predirect messages are formatted as shown in <xref
          target="aero-redirect" />:</t>

          <figure anchor="aero-redirect"
                  title="AERO Redirect/Predirect Message Format">
            <artwork><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Type (=0)   |   Code (=0)   |         Checksum (=0)         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|P|                          Reserved                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
+                                                               +
|                                                               |
+                       Target Address                          +
|                                                               |
+                                                               +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
+                                                               +
|                                                               |
+                     Destination Address                       +
|                                                               |
+                                                               +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Options ...
+-+-+-+-+-+-+-+-+-+-+-+-
]]></artwork>
          </figure>

          <t>The AERO Redirect/Predirect message sender sets the 'Type' field
          to 0 (since this is not an actual ICMPv6 message), and it also sets
          the 'Checksum' field to 0 (since the UDP checksum will provide
          protection for the entire packet). The sender further sets the 'P'
          bit to 1 if this is a 'Predirect' message and sets the 'P' bit to 0
          if this is a 'Redirect' message (as described below).</t>

          <t>The sender then encapsulates the AERO Redirect message in IP/UDP
          headers as shown in <xref target="udp-encaps" />:</t>

          <figure anchor="udp-encaps"
                  title="AERO Message UDP Encapsulation Format">
            <artwork><![CDATA[+--------------------+
~     IP header      ~
+--------------------+
~     UDP header     ~
+--------------------+
|                    |
~    AERO Redirect   ~
~       Message      ~
|                    |
+--------------------+
]]></artwork>
          </figure>

          <t>The AERO Redirect/Predirect message sender sets the UDP
          destination port number to 'AERO_PORT' and sets the UDP source port
          number to a (pseudo-)random value. The sender next sets the UDP
          length field to the length of the UDP message, then calculates the
          checksum across the message and writes the value into the UDP
          checksum field. Next, the sender sets the IP TTL/Hop-limit field to
          a small integer value chosen to provide a quick exit from any
          temporal routing loops. It is RECOMMENDED that the sender set IP
          TTL/Hop-limit to the value 8 unless it has better knowledge of the
          AERO link characteristics.</t>
        </section>

        <section anchor="sending_pre" title="Sending Predirects">
          <t>When an intermediate AERO router forwards a packet out the same
          AERO interface that it arrived on, the router sends an AERO
          Predirect message forward toward the egress AERO node instead of
          sending an ICMPv6 Redirect message back to the ingress AERO
          node.</t>

          <t>In the reference operational scenario, when the intermediate
          router ('A') forwards a packet sent by the ingress node ('B') toward
          the egress node ('D'), it also sends an AERO Predirect message
          forward toward the egress, subject to rate limiting (see Section 8.2
          of <xref target="RFC4861" />). The intermediate router ('A')
          prepares the AERO Predirect message as follows:</t>

          <t>
            <list style="symbols">
              <t>the link-layer source address is set to 'L2(A)' (i.e., the
              link-layer address of the intermediate router).</t>

              <t>the link-layer destination address is set to 'L2(D)' (i.e.,
              the link-layer address of the egress node).</t>

              <t>the network-layer source address is set to 'L3(A)' (i.e., the
              link-local network-layer address of the intermediate
              router).</t>

              <t>the network-layer destination address is set to 'L3(D)'
              (i.e., the link-local network-layer address of the egress
              node).</t>

              <t>the UDP destination port is set to 'AERO_PORT'.</t>

              <t>the Target and Destination Addresses are both set to 'L3(B)'
              (i.e., the link-local network-layer address of the ingress
              node).</t>

              <t>on links that require stateful address mapping, the message
              includes a Target Link Layer Address Option (TLLAO) set to
              'L2(B)' (i.e., the link-layer address of the ingress node).</t>

              <t>the message includes a Route Information Option (RIO) <xref
              target="RFC4191" /> that encodes the ingress node's
              network-layer address/prefix delegation that covers the
              network-layer source address of the originating packet.</t>

              <t>the message includes a Redirected Header Option (RHO) that
              contains the originating packet truncated to ensure that at
              least the network-layer header is included but the size of the
              message does not exceed 1280 bytes.</t>

              <t>the 'P' bit is set to P=1.</t>
            </list>
          </t>

          <t>The intermediate router ('A') then sends the message forward to
          the egress node ('D').</t>
        </section>

        <section anchor="processing"
                 title="Processing Predirects and Sending Redirects">
          <t>When the egress node ('D') receives an AERO Predirect message, it
          accepts the message only if it satisfies the data origin
          authentication requirements specified in <xref target="verify" />.
          The egress further accepts the message only if it is willing to
          serve as a redirection target.</t>

          <t>Next, the egress node ('D') validates the message according to
          the ICMPv6 Redirect message validation rules in Section 8.1 of <xref
          target="RFC4861" /> with the exception that the message includes a
          Type value of 0, a Checksum value of 0 and a link-local address in
          the ICMP destination field that differs from the destination address
          of the packet header encapsulated in the RHO.</t>

          <t>In the reference operational scenario, when the egress node ('D')
          receives a valid AERO Predirect message, it either creates or
          updates a neighbor cache entry that stores the Target address of the
          message (i.e., the link-local network-layer address of the ingress
          node ('B')). The egress node ('D') then records the prefix found in
          the RIO along with its own prefix that matches the network-layer
          destination address in the packet header found in the RHO with the
          neighbor cache entry as an acceptable (src, dst) prefix pair. The
          egress node ('D') then adds the prefix pair to the neighbor cache
          entry ACCEPT list, and sets/resets an expiration timer for the
          prefix pair to ACCEPT_TIME seconds. If the timer later expires, the
          egress node ('D') deletes the prefix pair.</t>

          <t>After processing the message, the egress node ('D') prepares an
          AERO Redirect message response as follows:</t>

          <t>
            <list style="symbols">
              <t>the link-layer source address is set to 'L2(D)' (i.e., the
              link-layer address of the egress node).</t>

              <t>the link-layer destination address is set to 'L2(A)' (i.e.,
              the link-layer address of the intermediate router).</t>

              <t>the network-layer source address is set to 'L3(D)' (i.e., the
              link-local network-layer address of the egress node).</t>

              <t>the network-layer destination address is set to 'L3(B)'
              (i.e., the link-local network-layer address of the ingress
              node).</t>

              <t>the UDP destination port is set to 'AERO_PORT'.</t>

              <t>the Target and the Destination Addresses are both set to
              'L3(D)' (i.e., the link-local network-layer address of the
              egress node).</t>

              <t>on links that require stateful address mapping, the message
              includes a Target Link Layer Address Option (TLLAO) set to
              'L2(D)'.</t>

              <t>the message includes an RIO that encodes the egress node's
              network-layer address/prefix delegation that covers the
              network-layer destination address of the originating packet.</t>

              <t>the message includes as much of the RHO copied from the
              corresponding AERO Predirect message as possible such that at
              least the network-layer header is included but the size of the
              message does not exceed 1280 bytes.</t>

              <t>the 'P' bit is set to P=0.</t>
            </list>
          </t>

          <t>After the egress node ('D') prepares the AERO Redirect message,
          it sends the message to the intermediate router ('A').</t>
        </section>

        <section anchor="forwarding" title="Forwarding Redirects">
          <t>When the intermediate router ('A') receives an AERO Redirect
          message, it accepts the message only if it satisfies the data origin
          authentication requirements specified in <xref target="verify" />.
          Next, the intermediate router ('A') validates the message the same
          as described in <xref target="processing" />. Following validation,
          the intermediate router ('A') processes the Redirect, and then
          forwards a corresponding Redirect on to the ingress node ('B') as
          follows.</t>

          <t>In the reference operational scenario, the intermediate router
          ('A') receives the AERO Redirect message from the egress node ('D')
          and prepares to forward a corresponding AERO Redirect message to the
          ingress node ('B'). The intermediate router ('A') then verifies that
          the RIO encodes a network-layer address/prefix that the egress node
          ('D') is authorized to use, and it discards the message if
          verification fails. Otherwise, the intermediate router ('A') changes
          the link-layer source address of the message to 'L2(A)', changes the
          network-layer source address of the message to the link-local
          network-layer address 'L3(A)', and changes the link-layer
          destination address to 'L2(B)' . The intermediate router ('A')
          finally decrements the IP TTL/Hop-limit and forwards the message to
          the ingress node ('B').</t>
        </section>

        <section anchor="processing_re" title="Processing Redirects">
          <t>When the ingress node ('B') receives an AERO Redirect message
          (i.e., one with P=0), it accepts the message only if it satisfies
          the data origin authentication requirements specified in <xref
          target="verify" />. Next, the ingress node ('B') validates the
          message the same as described in <xref target="sending_pre" />.
          Following validation, the ingress node ('B') then processes the
          message as follows.</t>

          <t>In the reference operational scenario, when the ingress node
          ('B') receives the AERO Redirect message, it either creates or
          updates a neighbor cache entry that stores the Target address of the
          message (i.e., the link-local network-layer address of the egress
          node 'L3(D)'). The ingress node ('B') then records the (src, dst)
          prefix pair associated with the triggering packet in the neighbor
          cache entry FORWARD list, i.e., it records its prefix that matches
          the redirected packet's network-layer source address and the prefix
          listed in the RIO as the prefix pair. The ingress node ('B') then
          sets/resets an expiration timer for the prefix pair to FORWARD_TIME
          seconds. If the timer later expires, the ingress node ('B') deletes
          the entry.</t>

          <t>Now, the ingress node ('B') has a neighbor cache FORWARD list
          entry for the prefix pair, and the egress node ('D') has a neighbor
          cache ACCEPT list entry for the prefix pair. Therefore, the ingress
          node ('B') may forward ordinary network-layer data packets with
          network-layer source and destination addresses that match the prefix
          pair directly to the egress node ('D') without forwarding through
          the intermediate router ('A'). Note that the ingress node must have
          a way of informing the network layer of a route that associates the
          destination prefix with this neighbor cache entry. The manner of
          establishing such a route (and deleting it when it is no longer
          necessary) is left to the implementation.</t>

          <t>To enable packet forwarding in the reverse direction, a separate
          AERO redirection operation is required that is the mirror-image of
          the forward operation described above but the link segments
          traversed in the forward and reverse directions may be different,
          i.e., the operations are asymmetric.</t>
        </section>

        <section title="Sending Periodic Predirect Keepalives">
          <t>In order to prevent prefix pairs from expiring while data packets
          are actively flowing, the ingress node ('B') can send AERO Predirect
          messages directly to the egress node ('D') as a "keepalive" to
          solicit AERO Redirect messages. The node should send such keepalive
          messages only when a data packet covered by the prefix pair has been
          sent recently, and should wait for at least KEEPALIVE_TIME seconds
          before sending each successive keepalive message in order to limit
          control message overhead.</t>

          <t>In the reference operational scenario, when the ingress node
          ('B') needs to refresh the FORWARD timer for a specific prefix pair,
          it can send an AERO Predirect message directly to the egress node
          ('D') prepared as follows:</t>

          <t>
            <list style="symbols">
              <t>the link-layer source address is set to 'L2(B)' (i.e., the
              link-layer address of the ingress node).</t>

              <t>the link-layer destination address is set to 'L2(D)' (i.e.,
              the link-layer address of the egress node).</t>

              <t>the network-layer source address is set to 'L3(B)' (i.e., the
              link-local network-layer address of the ingress node).</t>

              <t>the network-layer destination address is set to 'L3(D)'
              (i.e., the link-local network-layer address of the egress
              node).</t>

              <t>the UDP destination port is set to 'AERO_PORT'.</t>

              <t>the Predirect Target and Destination Addresses are both set
              to 'L3(B)' (i.e., the link-local network-layer address of the
              ingress node).</t>

              <t>the message includes an RHO that contains the originating
              packet truncated to ensure that at least the network-layer
              header is included but the size of the message does not exceed
              1280 bytes.</t>

              <t>the 'P' bit is set to P=1.</t>
            </list>
          </t>

          <t>When the egress node ('D') receives the AERO Predirect message,
          it validates the message the same as described in <xref
          target="sending_pre" />. Following validation, the egress node ('D')
          then resets its ACCEPT timer for the prefix pair that matches the
          originating packet's network-layer source and destination addresses
          to ACCEPT_TIME seconds, and it sends an AERO Redirect message
          directly to the ingress node ('B') prepared as follows:</t>

          <t><list style="symbols">
              <t>the link-layer source address is set to 'L2(D)' (i.e., the
              link-layer address of the egress node).</t>

              <t>the link-layer destination address is set to 'L2(B)' (i.e.,
              the link-layer address of the ingress node).</t>

              <t>the network-layer source address is set to 'L3(D)' (i.e., the
              link-local network-layer address of the egress node).</t>

              <t>the network-layer destination address is set to 'L3(B)'
              (i.e., the link-local network-layer address of the ingress
              node).</t>

              <t>the UDP destination port is set to 'AERO_PORT'.</t>

              <t>the Redirect Target and Destination Addresses are both set to
              'L3(D)' (i.e., the link-local network-layer address of the
              egress node).</t>

              <t>the message includes as much of the RHO copied from the
              corresponding AERO Predirect message as possible such that at
              least the network-layer header is included but the size of the
              message does not exceed 1280 bytes.</t>

              <t>the 'P' bit is set to P=0.</t>
            </list>When the ingress node ('B') receives the AERO Redirect
          message, it validates the message the same as described in <xref
          target="sending_pre" />. Following validation, the ingress node
          ('B') then resets its FORWARD timer for the prefix pair that matches
          the originating packet's network-layer source and destination
          addresses to FORWARD_TIME seconds.</t>

          <t>In this process, if the ingress node sends MAX_RETRY AERO
          Predirect messages as keepalives without receiving an AERO Redirect
          message reply, it can either declare the prefix pair unreachable
          immediately or allow the pair to expire after FORWARD_TIME
          seconds.</t>
        </section>

        <section anchor="reachable"
                 title="Neighbor Reachability Considerations">
          <t>When the ingress node ('B') receives an AERO Redirect message
          informing it of a direct path to a new egress node ('D'), there is a
          question in point as to whether the new egress node ('D') can be
          reached directly without forwarding through an intermediate router
          ('A'). On some AERO links, it may be reasonable for the ingress node
          ('B') to (optimistically) assume that reachability is transitive,
          and to immediately begin forwarding data packets to the egress node
          ('D') without testing reachability.</t>

          <t>On AERO links in which an optimistic assumption of transitive
          reachability may be unreasonable, however, the ingress node ('B')
          can defer the redirection until it tests the direct path to the
          egress node ('D'), e.g., by sending an IPv6 Neighbor Solicitation to
          elicit an IPv6 Neighbor Advertisement response. If the ingress node
          ('B') is unable to elicit a response after MAX_RETRY attempts, it
          should consider the direct path to the egress node ('D') to be
          unusable.</t>

          <t>In either case, the ingress node ('B') can process any link
          errors corresponding to the data packets sent directly to the egress
          node ('D') as a hint that the direct path has either failed or has
          become intermittent. Conversely, the ingress node ('B') can further
          process any AERO Redirect messages received as evidence of neighbor
          reachability.</t>
        </section>

        <section anchor="mobility" title="Mobility Considerations">
          <t>Again, with reference to <xref target="no-onlink-prefix-fig" />,
          egress node ('D') can configure both a non-advertising router
          interface on a provider AERO link and advertising router interfaces
          on its connected EUN links. When an EUN node ('E') in one of the
          egress node's connected EUNs moves to a different network point of
          attachment, however, it can release its network-layer address/prefix
          delegations that were registered with egress node ('D' ) and
          re-establish them via a different router.</t>

          <t>When the EUN node ('E') releases its network-layer address/prefix
          delegations, the egress node ('D') marks its forwarding table
          entries corresponding to the network-layer addresses/prefixes as
          "departed" and no longer responds to AERO Predirect messages for the
          departed addresses/prefixes. When egress node ('D') receives packets
          from an ingress node ('B') with network-layer source and destination
          addresses that match a prefix pair on the ACCEPT list, it forwards
          them to the last-known link-layer address of EUN node ('E') as a
          means for avoiding mobility-related packet loss during routing
          changes. Egress node ('D') also returns a NULL AERO Redirect message
          to inform the ingress node ('B') of the departure. The message is
          prepared as follows:</t>

          <t><list style="symbols">
              <t>the link-layer source address is set to 'L2(D)'.</t>

              <t>the link-layer destination address is set to 'L2(B)'.</t>

              <t>the network-layer source address is set to the link-local
              address 'L3(D)'.</t>

              <t>the network-layer destination address is set to the
              link-local address 'L3(B)'.</t>

              <t>the UDP destination port is set to 'AERO_PORT'.</t>

              <t>the Redirect Target and Destination Addresses are both set to
              NULL.</t>

              <t>the message includes an RHO that contains as much of the
              original packet as possible such that at least the network-layer
              header is included but the size of the message does not exceed
              1280 bytes.</t>

              <t>the 'P' bit is set to P=0.</t>
            </list>When ingress node ('B') receives the NULL AERO Redirect
          message, it deletes the prefix pair associated with the packet in
          the RHO from its list of forwarding entries corresponding to egress
          node ('D'). When egress node ('D')s ACCEPT_TIME timer for the prefix
          pair corresponding to the departed prefix expires, it deletes the
          prefix pairs from its list of ingress filtering entries
          corresponding to ingress node ('B').</t>

          <t>Eventually, any such correspondent AERO nodes will receive a NULL
          AERO Redirect message and will cease to use the egress node ('D') as
          a next hop. They will then revert to sending packets destined to the
          EUN node ('E') via a trusted intermediate router and may
          subsequently receive new AERO Redirect messages to discover that the
          EUN node ('E') is now associated with a new AERO edge router.</t>

          <t>Note that any packets forwarded by the egress node ('D') via a
          departed forwarding table entry may be lost if the (mobile) EUN node
          ('E') moves off-link with respect to its previous EUN point of
          attachment. This should not be a problem for large links (e.g.,
          large cellular network deployments, large ISP networks, etc.) in
          which all/most mobility events are intra-link.</t>
        </section>

        <section title="Link-Layer Address Change Considerations">
          <t>When an ingress node needs to change its link-layer address, it
          deletes each FORWARD list entry that was established under the old
          link layer address, changes the link layer address, then allows
          packets to again flow through an intermediate router. Any egress
          node that receives the packets will also receive new AERO Predirect
          messages from the intermediate router. The egress node then deletes
          the ACCEPT entry that included the ingress node&rsquo;s old
          link-layer address and installs a new ACCEPT entry that includes the
          ingress node&rsquo;s new link-layer address. The egress then returns
          a new AERO Redirect message to the ingress node via the intermediate
          router, which the ingress node uses to establish a new FORWARD list
          entry.</t>

          <t>When an egress node needs to change its link-layer address, it
          deletes each entry in the ACCEPT list and SHOULD also send NULL AERO
          Redirect messages to the corresponding ingress node (i.e., the same
          as described for mobility operations in <xref target="mobility" />)
          before changing the link-layer address. Any ingress node that
          receives the NULL AERO Redirect messages will delete any
          corresponding FORWARD list entries and again allow packets to flow
          through an intermediate router. The egress then changes the
          link-layer address, and it sends new AERO Redirect messages in
          response to any AERO Predirect messages it receives from the
          intermediate router while using the new link-layer address.</t>
        </section>

        <section title="Prefix Re-provisioning Considerations">
          <t>When an AERO node configures one or more FORWARD/ACCEPT list
          prefix pair entries, and the prefixes associated with the pair are
          somehow reconfigured or renumbered, the stale FORWARD/ACCEPT list
          information must be deleted.</t>

          <t>When an ingress node ('B') reconfigures its network-layer source
          prefix in such a way that the ACCEPT list entry in the egress node
          ('D') would no longer be valid (e.g., the prefix length of the
          source prefix changes), the ingress node ('B') simply deletes the
          prefix pair form its FORWARD list and allows subsequent packets to
          again flow through an intermediate router ('A').</t>

          <t>When the egress node ('D') reconfigures its network-layer
          destination prefix in such a way that the FORWARD list entry in the
          ingress node ('B') would no longer be valid, the egress node ('D')
          sends a NULL AERO Redirect message to the ingress node ('B') the
          same as described for mobility and link-layer address change
          considerations when it receives either an AERO Predirect message or
          a data packet (subject to rate limiting) from the ingress node
          ('B').</t>
        </section>

        <section anchor="backward" title="Backward Compatibility">
          <t>There are no backward compatibility considerations since AERO
          Redirect/Predirect messages use a new UDP port number that
          distinguishes them from other kinds of control messages. Therefore,
          legacy nodes will simply discard any AERO Redirect/Predirect
          messages they may accidentally receive.</t>

          <t>Note however that AERO redirection requires that all three (the
          ingress, intermediate router, and egress) participate in the
          protocol. Additionally, the intermediate router SHOULD disable
          ordinary ICMPv6 Redirects when AERO redirection is enabled.</t>
        </section>
      </section>
    </section>

    <section anchor="iana" title="IANA Considerations">
      <t>IANA has assigned UDP user port number 8060 for this protocol via the
      expert review process <xref target="RFC5226" />.</t>
    </section>

    <section anchor="secure" title="Security Considerations">
      <t>AERO link security considerations are the same as for standard IPv6
      Neighbor Discovery <xref target="RFC4861" /> except that AERO improves
      on some aspects. In particular, AERO is dependent on a trust basis
      between AERO edge nodes and intermediate routers, where the edge nodes
      must only engage in the AERO mechanism when it is facilitated by a
      trusted intermediate router.</t>

      <t>AERO links must be protected against link-layer address spoofing
      attacks in which an attacker on the link pretends to be a trusted
      neighbor. Links that provide link-layer securing mechanisms (e.g., WiFi
      networks) and links that provide physical security (e.g., enterprise
      network LANs) provide a first line of defense that is often sufficient.
      In other instances, sufficient assurances against link-layer address
      spoofing attacks are possible if the source can digitally sign its
      messages through means outside the scope of this document.</t>
    </section>

    <section anchor="ack" title="Acknowledgements">
      <t>Discussions both on the v6ops list and in private exchanges helped
      shape some of the concepts in this work. Individuals who contributed
      insights include Mikael Abrahamsson, Fred Baker, Stewart Bryant, Brian
      Carpenter, Brian Haberman, Joel Halpern, and Lee Howard. Members of the
      IESG also provided valuable input during their review process that
      greatly improved the document. Special thanks go to Stewart Bryant, Joel
      Halpern, and Brian Haberman for their shepherding guidance.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.0768"?>

      <?rfc include="reference.RFC.2119"?>

      <?rfc include="reference.RFC.2460"?>

      <!--     <?rfc include="reference.RFC.4443"?> -->

      <?rfc include="reference.RFC.4861"?>

      <?rfc include="reference.RFC.4862"?>

      <?rfc include="reference.RFC.4191"?>

      <?rfc include="reference.RFC.5226"?>

      <?rfc include="reference.RFC.6434"?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.0791"?>

      <?rfc include="reference.RFC.0792"?>

      <?rfc include="reference.RFC.3315"?>

      <?rfc include="reference.RFC.3633"?>

      <!--      <?rfc include="reference.I-D.templin-ironbis"?>; AD watching-->

      <reference anchor="IRON">
        <front>
          <title>The Internet Routing Overlay Network (IRON)</title>

          <author fullname="Fred Templin" initials="F" surname="Templin">
            <organization />
          </author>

          <date day="15" month="June" year="2012" />

          <abstract>
            <t>Since the Internet must continue to support escalating growth
            due to increasing demand, it is clear that current routing
            architectures and operational practices must be updated. This
            document proposes an Internet Routing Overlay Network (IRON)
            architecture that supports sustainable growth while requiring no
            changes to end systems and no changes to the existing routing
            system. In addition to routing scaling, IRON further addresses
            other important issues including mobility management, mobile
            networks, multihoming, traffic engineering, NAT traversal and
            security. While business considerations are an important
            determining factor for widespread adoption, they are out of scope
            for this document.</t>
          </abstract>
        </front>

        <seriesInfo name="Work in" value="Progress" />
      </reference>

      <!--      <?rfc include="reference.I-D.templin-intarea-vet"?>; AD watching -->

      <reference anchor="VET">
        <front>
          <title>Virtual Enterprise Traversal (VET)</title>

          <author fullname="Fred Templin" initials="F" surname="Templin">
            <organization />
          </author>

          <date day="15" month="June" year="2012" />

          <abstract>
            <t>Enterprise networks connect hosts and routers over various link
            types, and often also connect to provider networks and/or the
            global Internet. Enterprise network nodes require a means to
            automatically provision addresses/prefixes and support
            internetworking operation in a wide variety of use cases including
            Small Office, Home Office (SOHO) networks, Mobile Ad hoc Networks
            (MANETs), ISP networks, multi-organizational corporate networks
            and the interdomain core of the global Internet itself. This
            document specifies a Virtual Enterprise Traversal (VET)
            abstraction for autoconfiguration and operation of nodes in
            enterprise networks.</t>
          </abstract>
        </front>

        <seriesInfo name="Work in" value="Progress" />

        <format target="http://www.ietf.org/internet-drafts/draft-templin-intarea-vet-34.txt"
                type="TXT" />
      </reference>

      <?rfc include="reference.RFC.2131"?>

      <?rfc include="reference.RFC.2529"?>

      <?rfc include="reference.RFC.5214"?>

      <?rfc include="reference.RFC.4443"?>

      <?rfc include="reference.RFC.5569"?>

      <?rfc include="reference.RFC.6204"?>
    </references>

    <section anchor="scaling" title="Intermediate Router Interworking">
      <t><xref target="no-onlink-prefix-fig" /> depicts a reference AERO
      operational scenario with a single intermediate router on the AERO link.
      In order to support scaling to larger numbers of nodes, the AERO link
      can deploy multiple intermediate routers, e.g., as shown in <xref
      target="chaining-fig" />.</t>

      <t><figure anchor="chaining-fig" title="Multiple Intermediate Routers">
          <artwork><![CDATA[    +--------------+                        +--------------+
    | Intermediate |    +--------------+    | Intermediate |
    |   Router C   |    | Core Router D|    |   Router E   |
    | (default->D) |    | (A->C; G->E) |    | (default->D) |
    |    (A->B)    |    +--------------+    |    (G->F)    |
    +-------+------+                        +------+-------+
            |                                      |
    X---+---+--------------------------------------+---+---X
        |                  AERO Link                   |
  +-----+--------+                            +--------+-----+
  | Edge Router B|                            | Edge Router F|
  | (default->C) |                            | (default->E) |
  +--------------+                            +--------------+
        .-.                                         .-.
     ,-(  _)-.                                   ,-(  _)-.
  .-(_ IPv6  )-.                              .-(_ IPv6  )-.
 (__    EUN      )                           (__    EUN      )
    `-(______)-'                                `-(______)-'
         |                                           |
     +--------+                                  +--------+
     | Host A |                                  | Host G |
     +--------+                                  +--------+
]]></artwork>
        </figure>In this example, the ingress AERO node ('B') (in this case an
      edge router, but could also be a host) associates with intermediate AERO
      router ('C'), while the egress AERO node ('F') (in this case an edge
      router, but could also be a host) associates with intermediate AERO
      router ('E'). Furthermore, intermediate routers ('C') and ('E') do not
      associate with each other directly, but rather have an association with
      a "core" router ('D') (i.e., a router that has full topology information
      concerning its associated intermediate routers). Core router ('D') may
      connect to either the AERO link or to other physical or virtual links
      (not shown) to which intermediate routers ('C') and ('E') also
      connect.</t>

      <t>When host ('A') sends a packet toward destination host ('G'), IPv6
      forwarding directs the packet through the EUN to edge router ('B'),
      which forwards the packet to intermediate router ('C') in absence of
      more-specific forwarding information. Intermediate router ('C') forwards
      the packet, and it also generates an AERO Predirect message that is then
      forwarded through core router ('D') to intermediate router ('E'). When
      intermediate router ('E') receives the message, it forwards the message
      to egress router ('F').</t>

      <t>After processing the AERO Predirect message, egress router ('F')
      sends an AERO Redirect message to intermediate router ('E').
      Intermediate router ('E'), in turn, forwards the message through core
      router ('D') to intermediate router ('C'). When intermediate router
      ('C') receives the message, it forwards the message to ingress edge
      router ('B') informing it that host 'G's EUN can be reached via egress
      router ('F'), thus completing the AERO redirection.</t>

      <t>The interworkings between intermediate and core routers (including
      the conveyance of pseudo Predirects and Redirects) must be carefully
      coordinated in a manner outside the scope of this document. In
      particular, the intermediate and core routers must ensure that any
      routing loops that may be formed are temporal in nature. See <xref
      target="IRON" /> for an architectural discussion of coordination between
      intermediate and core routers.</t>
    </section>
  </back>
</rfc>
