<?xml version='1.0' encoding='US-ASCII' ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" >
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc tocdepth="2" ?>
<?rfc tocindent="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc rfcedstyle="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<!--
<?rfc-ext xml2rfc-ext-include-references-in-index="yes" ?>
<?rfc-ext xml2rfc-ext-justification="always" ?>
<?rfc-ext xml2rfc-ext-sec-no-trailing-dots="yes" ?>
<?rfc-ext merge-sequential-page-numbers="merge" ?>
-->

<!--[rfced] FYI, the text output (for AUTH48 purposes) was created using
  xml2rfc 1.34pre3 as available from http://xml.resource.org/experimental.html. 
-->

<rfc
	category="info"
        number="5598">
	<front>
		<title
			abbrev="Email Architecture">Internet Mail Architecture</title>
		<author
			fullname="Dave Crocker"
			initials="D."
			surname="Crocker">
			<organization>Brandenburg InternetWorking</organization>
			<address>
				<postal>
					<street>675 Spruce Drive</street>
					<city>Sunnyvale</city>
					<region>CA</region>
					<code>94086</code>
					<country>USA</country>
				</postal>
				<phone>+1.408.246.8253</phone>
				<email>dcrocker@bbiw.net</email>
			</address>
		</author>
		<date
			month="July"
			year="2009"></date>
		<area>Applications</area>

		<keyword>email, e-mail, service, mime, rfc2822, rfc 2822, rfc822, rfc
			822, rfc2821, rfc 2821, rfc821, rfc 821, rfc5321, rfc5322, rfc
			5321, rfc 5322, architecture, mta, mua, msa, mda, admd, user,
			originator, recipient, transfer, message transfer, deliver,
			delivery, relay, header, gateway agent, gateway actor, gateway,
			sieve, dsn, mdn, tussle, mhs, Message handling service, message
			transfer agent, message user agent, mail submission agent, mail
			delivery agent, administrative management domain</keyword>

<note title="">
<t>This document may contain material from IETF Documents or IETF
Contributions published or made publicly available before November 10,
2008.  The person(s) controlling the copyright in some of this material
may not have granted the IETF Trust the right to allow modifications
of such material outside the IETF Standards Process.  Without
obtaining an adequate license from the person(s) controlling the
copyright in such materials, this document may not be modified outside
the IETF Standards Process, and derivative works of it may not be
created outside the IETF Standards Process, except to format it for
publication as an RFC or to translate it into languages other than
English.
</t></note>


		<abstract>
			<t>Over its thirty-five-year history, Internet Mail has changed
				significantly in scale and complexity, as it has become a
				global infrastructure service. These changes have been
				evolutionary, rather than revolutionary, reflecting a strong
				desire to preserve both its installed base and its usefulness.
				To collaborate productively on this large and complex system,
				all participants need to work from a common view of it and use
				a common language to describe its components and the
				interactions among them. But the many differences in
				perspective currently make it difficult to know exactly what
				another participant means. To serve as the necessary common
				frame of reference, this document describes the enhanced
				Internet Mail architecture, reflecting
				the current service.</t>
		</abstract>
	</front>

	<middle>

		<section
			title="Introduction">
			<t>Over its thirty-five-year history, Internet Mail has changed
				significantly in scale and complexity, as it has become a
				global infrastructure service. These changes have been
				evolutionary, rather than revolutionary, reflecting a strong
				desire to preserve both its installed base and its usefulness.
				Today, Internet Mail is distinguished by many independent
				operators, many different components for providing service to
				Users, as well as many different components that transfer
				messages.</t>

			<t>The underlying technical standards for Internet Mail comprise a
				rich array of functional capabilities. These specifications
				form the core:

                              <list><t>
			      <list
				 style="symbols">
				<t>Simple Mail Transfer Protocol
				(SMTP)
				(<xref
				target="RFC0821"></xref>, <xref
				target="RFC2821"></xref>, <xref
				target="RFC5321"></xref>) moves a
				message through the Internet.</t>
				
				
				<t>Internet Mail Format (IMF)
			 (<xref
			 target="RFC0733"></xref>, <xref
			 target="RFC0822"></xref>, <xref
			 target="RFC2822"></xref>, <xref
			 target="RFC5322"></xref>) defines a message
			 object.</t>
				
				<t>Multipurpose Internet Mail Extensions
				  (MIME) <xref target="RFC2045"></xref>
				  defines an enhancement to the message object that permits
				  using multimedia attachments.</t>
			    
			  </list></t></list>
			</t>

			<t>Public collaboration on technical, operations, and policy
				activities of email, including those that respond to the
				challenges of email abuse, has brought a much wider range of
				participants into the technical community. To collaborate
				productively on this large and complex system, all
				participants need to work from a common view of it and use a
				common language to describe its components and the
				interactions among them. But the many differences in
				perspective currently make it difficult to know exactly what
				another participant means. <iref
					item="operations"></iref></t>
			<t>It is the need to resolve these differences that motivates this
				document, which describes the realities of the current system.
				Internet Mail is the subject of ongoing technical, operations,
				and policy work, and the discussions often are hindered by
				different models of email-service
				design and different meanings for the same terms. </t>

			<t> To serve as the necessary common frame of reference, this
				document describes the enhanced Internet Mail architecture,
				reflecting the current service. The document focuses on: 
<?rfc needLines="8" ?>
                             <list><t>
			      <list style="symbols">
				<t>Capturing refinements to the email model</t>
				<t>Clarifying functional roles for the architectural components</t>
				<t>Clarifying identity-related issues, across the email service</t>
				<t>Defining terminology for architectural components and their interactions</t>

			  </list></t></list>
			</t>

			<section
				title="History">
		<t> The first standardized architecture for networked email
		specified a simple split between the user world, in the
		form of Message User Agents (MUAs), and the transfer world,
		in the form of the Message Handling Service (MHS), which
		is composed of Message Transfer Agents (MTAs) <xref
		target="RFC1506"></xref>. The MHS accepts a message
                from one User and delivers it to one or more other
		Users, creating a virtual MUA-to-MUA exchange environment. 
                 <iref item="Message User Agent"></iref>
		<iref item="UA"></iref>
		<iref item="MUA"></iref>
		<iref item="User Agent"></iref>
		<iref item="MHS"></iref>
		<iref item="Message Handling Service"></iref>
		<iref item="MTA"></iref>
		<iref item="Message Transfer Agent"></iref></t>
			
	<t> As shown in <xref target="Basic"></xref>, this
	architecture defines two logical
	layers of interoperability. One is directly between Users.
	The other is among the components along the transfer path.
	In addition, there is interoperability between the layers,
	first when a message is posted from the User to the MHS
	and later when it is delivered from the MHS to the User. </t>
	
	<t>The operational service has evolved, although core aspects
	of the service, such as mailbox addressing and message format 
        style, remain remarkably constant. The original
	distinction between the user level and transfer level
	remains, but with elaborations in each. The term "Internet
	Mail" is used to refer to the entire collection of user
	and transfer components and services. 

          <iref item="Internet Mail"></iref>
          <iref	item="Mail"></iref></t>
		
	<t> For Internet Mail, the term "end-to-end" usually refers to
	a single posting and the set of deliveries that result
	from a single transit of the MHS. A common exception is
	group dialogue that is mediated through a Mailing List;
	in this case, two postings occur before intended
	Recipients receive an Author's message, as discussed in <xref
	target="Mediator"></xref>. In fact, some uses of email
	consider the entire email service, including Author and
	Recipient, as a subordinate component. For these services,
	"end-to-end" refers to points outside the email service.
	Examples are voicemail over email <xref	target="RFC3801"></xref>,
	EDI (Electronic Data Interchange) over email
        <xref target="RFC1767"></xref>, and facsimile over email <xref
	target="RFC4142"></xref>. 


        <iref item="end-to-end"></iref>
	<iref item="posting"></iref>
	<iref item="delivery"></iref></t>
	<figure
		align="center"
		anchor="Basic"
		title="Basic Internet Mail Service Model">
		
	<?rfc needLines="28" ?>
	<artwork
	align="center"
	alt="[ User, MHS, User Service Model ]"
	name="Basic Internet Mail Service Model"
	src="email-arch-fig-svcmodel.png"
	type="image/png">
<![CDATA[ 
                               +--------+
            ++================>|  User  |
            ||                 +--------+
            ||                      ^
+--------+  ||          +--------+  .
|  User  +==++=========>|  User  |  .
+---+----+  ||          +--------+  .
    .       ||               ^      .
    .       ||   +--------+  .      .
    .       ++==>|  User  |  .      .
    .            +--------+  .      .
    .                 ^      .      .
    .                 .      .      .
    V                 .      .      .
+---+-----------------+------+------+---+ 
|   .                 .      .      .   |
|   .................>.      .      .   |
|   .                        .      .   |
|   ........................>.      .   |
|   .                               .   |
|   ...............................>.   |
|                                       |
|     Message Handling Service (MHS)    |
+---------------------------------------+

Legend: === lines indicate primary (possibly indirect) 
            transfers or roles
        ... lines indicate supporting transfers or roles]]></artwork>
					<postamble></postamble>
	</figure>
	<t>End-to-end Internet Mail exchange is accomplished by using
	a standardized infrastructure with these components and
	characteristics: <iref	item="end-to-end"></iref>


              <list><t>
	      <list style="symbols">
		<t>An email object</t>
		<t>Global addressing</t>
		<t>An asynchronous sequence of point-to-point transfer mechanisms</t>
		<t>No requirement for prior arrangement	between MTAs
		  or between Authors and Recipients</t>
		<t>No requirement for prior arrangement	between point-to-point transfer services
		  over the open Internet</t>
		<t>No requirement for Author, Originator, or
		  Recipients to be online at the same time</t>

	  </list></t></list>
	</t>

	<t>The end-to-end portion of the service is the email object,
	called a "message". Broadly, the message itself
	distinguishes control information, for handling, from the
	Author's content. 
         <iref item="message"
		primary="true"></iref>
	<iref  item="gateway"></iref>
	<iref	item="end-to-end"></iref></t>

	<t>A precept to the design of mail over the open Internet is
	permitting User-to-User and MTA-to-MTA interoperability
	without prior, direct arrangement between the independent
	administrative authorities responsible for handling a
	message. All participants rely on having the core services
	universally supported and accessible, either directly or
	through Gateways that act as translators between Internet
	Mail and email environments conforming to other standards.
	Given the importance of spontaneity and serendipity in
	interpersonal communications, not requiring such
	prearrangement between participants is a core benefit of
	Internet Mail and remains a core requirement for it.</t>

	<t> Within localized networks at the edge of the public
	Internet, prior administrative arrangement often is
	required and can include access control, routing
	constraints, and configuration of the information query
	service. Although Recipient authentication has usually
	been required for message access since the beginning of
	Internet Mail, in recent years it also has been required
	for message submission. In these cases, a server validates
	the client's identity, whether by explicit security
	protocols or by implicit infrastructure queries to
	identify "local" participants. </t>
			</section>

	<section title="The Role of This Architecture">
	<t>An Internet service is an integration of related
	capabilities among two or more participating nodes. The
	capabilities are accomplished across the Internet by one
	or more protocols. What connects a protocol to a service
	is an architecture. An architecture specifies how the
	protocols implement the service by defining the logical
	components of a service and the relationships among them.
	From that logical view, a service defines what is being
	done, an architecture defines where the pieces are (in
	relation to each other), and a protocol defines how
	particular capabilities are performed.</t>

	<t>As such, an architecture will more formally describe a
	service at a relatively high level. A protocol that
	implements some portion of a service will conform to the
	architecture to a greater or lesser extent, depending on
	the pragmatic tradeoffs they make when trying to implement
	the architecture in the context of real-world constraints.
	Failure to precisely follow an architecture is not a
	failure of the protocol, nor is failure to precisely cast
	a protocol a failure of the architecture. Where a protocol
	varies from the architecture, it will of course be
	appropriate for it to explain the reason for the variance.
	However, such variance is not a mark against a protocol:
	Happily, the IETF prefers running code to architectural
	purity.</t>

	<t>In this particular case, this architecture attempts to
	define the logical components of Internet email and does
	so post hoc, trying to capture the architectural
	principles that the current email protocols embody. To
	different extents, email protocols will conform to this
	architecture more or less well. Insofar as this
	architecture differs from those protocols, the reasons are
	generally well understood and are required for
	interoperation. The differences are not a sign that
	protocols need to be fixed. However, this architecture is
	a best attempt at a logical model of Internet email, and
	insofar as new protocol development varies from this
	architecture, it is necessary for designers to understand
	those differences and explain them carefully. </t>
			</section>

			<section title="Document Conventions">

	<t>References to structured fields of a message use a two-part
	dotted notation. The first part cites the document that
	contains the specification for the field, and the second part is
	the name of the field. Hence &lt;RFC5322.From&gt;
	is the IMF From: header field in an email content header,
	and &lt;RFC5321.MailFrom&gt; is the address in the
	SMTP "Mail From" command.</t>

	<t>When occurring without the IMF (RFC 5322) qualifier, header
	field names are shown with a colon suffix. For example,
	From:.</t>
	
        <t>References to labels for actors, functions or components
	have the first letter capitalized.


          <iref item="actor"></iref></t>
		
 <iref item="Discussion of document"></iref>

			</section>
		</section>

		<section anchor="Actors" title="Responsible Actor Roles">
	<t> Internet Mail is a highly distributed service, with a variety
        of Actors playing different roles. These Actors fall into
        three basic types: 

              <list><t>
	      <list style="symbols">
		<t>User</t>
		<t>Message Handling Service (MHS)</t>
		<t>ADministrative Management Domain (ADMD)</t>

	  </list></t></list>
	</t>
			
<?rfc needLines="4" ?>
	<t>Although related to a technical architecture, the focus on
	Actors concerns participant responsibilities, rather than
	functionality of modules. For that reason, the labels used are
	different from those used in classic diagrams of email architecture.
	</t>

	<section anchor="Users"	title="User Actors">
	<t>Users are the sources and sinks of messages. Users can be
	people, organizations, or processes. They can have an
	exchange that iterates, and they can expand or contract
	the set of Users that participate in a set of exchanges.
	In Internet Mail, there are four types of Users:

               <list><t>
	      <list	style="symbols">
		<t>Authors</t>
		<t>Recipients</t>
		<t>Return Handlers</t>
		<t>Mediators</t>

	  </list></t></list>
	</t>
	
	<t><xref target="userrels"></xref> shows the primary and
	secondary flows of messages among them. As a pragmatic
	heuristic: User Actors can generate, modify, or look at the whole message. </t>

				<figure
					align="center"
					anchor="userrels"
					title="Relationships among User Actors">

					<?rfc needLines="27" ?>
					<artwork
						align="center"
						name="Relationships Among User Actors"
						src="email-arch-fig-userrel.png"
						type="image/png"><![CDATA[ ++==========++
 ||  Author  ||<..................................<..
 ++=++=++=++=++                                     .
    || || ||     ++===========++                    .
    || || ++====>|| Recipient ||                    .
    || ||        ++=====+=====++                    .
    || ||               .                           .
    || ||               ..........................>.+
    || ||                                           .
    || ||               ...................         .
    || ||               .                 .         . 
    || ||               V                 .         .
    || ||         +-----------+    ++=====+=====++  .
    || ++========>| Mediator  +===>|| Recipient ||  .
    ||            +-----+-----+    ++=====+=====++  .
    ||                  .                 .         . 
    ||                  ..................+.......>.+
    ||                                              .
    ||    ..............+..................         .
    ||    .             .                 .         .
    \/    V             V                 '         .
 +-----------+    +-----------+    ++=====+=====++  .
 | Mediator  +===>| Mediator  +===>|| Recipient ||  .
 +-----+-----+    +-----+-----+    ++=====+=====++  .
       .                .                 .         .
       .................+.................+.......>..

Legend: === lines indicate primary (possibly indirect) 
            transfers or roles
        ... lines indicate supporting transfers or roles]]></artwork>
					<postamble></postamble>
				</figure>
	<t>From a User's perspective, all message-transfer activities
	are performed by a monolithic Message Handling Service
	(MHS), even though the actual service can be provided by
	many independent organizations. Users are customers of
	this unified service.</t>

	<t>Whenever any MHS Actor sends information back to an
	Author or Originator in the sequence of handling a
	message, that Actor is a User.</t>

	<section anchor="author" title="Author">
	<t> The Author is responsible for creating the message,
	its contents, and its list of Recipient addresses. The
	MHS transfers the message from the Author and delivers
	it to the Recipients. The MHS has an Originator role (<xref
	target="originator"></xref>) that correlates with the Author
	role. 

<iref	item="Author"></iref><iref item="role"	subitem="Author"></iref>
<iref	item="Actor" subitem="Author"></iref></t>

				</section>
	<section anchor="recipient" title="Recipient">
	<t> The Recipient is a consumer of the delivered message.
	The MHS has a Receiver role (<xref target="receiver"></xref>) that correlates with
	the Recipient role. This is labeled Recv
	in <xref target="mhsrels"></xref>. 

<iref	item="MHS"></iref><iref	item="Recipient"></iref>
<iref	item="role" subitem="Recipient"></iref>
<iref	item="Actor" subitem="Recipient"></iref></t>

	<t> Any Recipient can close the user-communication loop by
	creating and submitting a new message that replies to
	the Author. An example of an automated form of reply
	is the Message Disposition Notification (MDN), which
	informs the Author about the Recipient's handling of the message. (See <xref
	target="Data"></xref>.)

<iref	item="Message Disposition Notification"></iref>
<iref	item="MDN"></iref></t>
				</section>
	
	<section title="Return Handler">
	<t>Also called "Bounce Handler", the Return Handler is a
	special form of Recipient tasked with servicing
	notifications generated by the MHS as it transfers
	or delivers the message. 


        (See <xref target="mhsrels"></xref>.)  These notices can be
        about failures or completions and are sent to an address that
        is specified by the Originator. This Return Handling address
        (also known as a Return Address)
         might have no visible characteristics in
	common with the address of the Author or Originator. </t>
				
	<iref	item="Originator" primary="true"></iref>
	<iref 	item="MHS"></iref>
	<iref 	item="Return Handler" primary="false"></iref>
	<iref	item="bounce handler"></iref>
	<iref	item="Actor" subitem="Return Handler"></iref>
				</section>
				
         <section anchor="Mediator" title="Mediator">
	<t>A Mediator receives, aggregates, reformulates, and
	redistributes messages among Authors and Recipients
	who are the principals in (potentially) protracted
	exchanges. This activity is easily confused with the
	underlying MHS transfer exchanges. However, each
	serves very different purposes and operates in very
	different ways. </t>

	<t>When mail is delivered to the Mediator specified in the
	RFC5321.RcptTo command for the original message, the
	MHS handles it the same way as for any other
	Recipient. In particular, the MHS sees each posting
	and delivery activity between sources and sinks as
	independent; it does not see subsequent re-posting as
	a continuation of a process. Because the Mediator
	originates messages, it can receive replies. Hence,
	when submitting a reformulated message, the Mediator
	is an Author, albeit an Author actually serving as an
	agent of one or more other Authors. So a Mediator
	really is a full-fledged User. Mediators are
	considered extensively in <xref
		target="Mediators"></xref>. <iref
		item="delivery"></iref><iref
		item="posting"></iref><iref
		item="MHS"></iref></t>
		
	<t> A Mediator attempts to preserve the original Author's
	information in the message it reformulates but is
	permitted to make meaningful changes to the message
	content or envelope. The MHS sees a new message, but
	Users receive a message that they interpret as being
	from, or at least initiated by, the Author of the
	original message. The role of a Mediator is not
	limited to merely connecting other participants; the
	Mediator is responsible for the new message.

 <iref	item="MHS"></iref>
<iref	item="envelope"></iref>
<iref	item="role"></iref></t>
	
	<t> A Mediator's role is complex and contingent, for
	example, modifying and adding content or regulating
	which Users are allowed to participate and when. The
        common example of this role is a group Mailing List.
	In a more complex use, a sequence of Mediators could
	perform a sequence of formal steps, such as reviewing,
	modifying, and approving a purchase request. 

<iref item="content"></iref></t>

	<t> A Gateway is a particularly interesting form of
	Mediator. It is a hybrid of User and Relay that
	connects heterogeneous mail services. Its purpose is
	to emulate a Relay. For a detailed discussion, see <xref
	target="mhs-gateway"></xref>. 

<iref item="Gateway"></iref></t>
				</section>
			</section>

			<section anchor="MHS" title="Message Handling Service (MHS) Actors">

	<t>The Message Handling Service (MHS) performs a single
	end-to-end transfer on behalf of the Author to reach the
	Recipient addresses specified in the original
	RFC5321.RcptTo commands. Exchanges that are either
	mediated or iterative and protracted, such as those used
	for collaboration over time, are handled by the User
	Actors, not by the MHS Actors. As a pragmatic heuristic
	MHS Actors generate, modify, or look at only
	transfer data, rather than the entire message. 

<iref	item="MHS"></iref>
<iref	item="RcptTo"></iref>
<iref	item="Message Handling System"></iref>
<iref	item="MHS" subitem="Actors"></iref>
<iref	item="Actors" subitem="MHS"></iref>
<iref	item="end-to-end"></iref></t>
	
	<t><xref target="mhsrels"></xref> shows the relationships among
	transfer participants in Internet Mail. Although it shows
	the Originator (labeled Origin) as distinct from the
	Author, and Receiver (labeled Recv) as distinct from
	Recipient, each pair of roles usually has the same Actor.
	Transfers typically entail one or more Relays. However,
	direct delivery from the Originator to Receiver is
	possible. Intra-organization mail services usually have
	only one Relay. 

<iref	item="Author"></iref>
<iref	item="Originator"></iref>
<iref	item="Receiver"></iref>
<iref	item="Recipient"></iref>
<iref	item="delivery"></iref>
<iref	item="transfer"></iref>
<iref	item="relay"></iref>
</t>
				<figure
					align="center"
					anchor="mhsrels"
					title="Relationships among MHS Actors">
					<preamble></preamble>
					<?rfc needLines="26" ?>
					<artwork
						align="center"
						name="Relationships Among MHS Actors"
						src="email-arch-fig-mhsactor.png"
						type="image/png"><![CDATA[  ++==========++                        ++===========++
  ||  Author  ||                        || Recipient ||
  ++====++====++   +--------+           ++===========++
        ||         | Return |                  /\
        ||         +-+------+                  ||
        \/           .    ^                    ||
    +---------+      .    .                +---++---+
    |         |      .    .                |        |
 /--+---------+----------------------------+--------+----\
 |  |         |      .    .      MHS       |        |    |
 |  | Origin  +<......    .................+  Recv  |    |
 |  |         |           ^                |        |    |
 |  +---++----+           .                +--------+    |
 |      ||                .                    /\        |
 |      ||  ..............+..................  ||        |
 |      \/  .             .                 .  ||        |
 |  +-------+-+        +--+------+        +-+--++---+    |
 |  |  Relay  +=======>|  Relay  +=======>|  Relay  |    |
 |  +---------+        +----++---+        +---------+    |
 |                          ||                           |
 |                          ||                           |
 |                          \/                           |
 |                     +---------+                       |
 |                    | Gateway +-->...                  |
 |                     +---------+                       |
 \-------------------------------------------------------/
 
Legend: === and || lines indicate primary (possibly 
            indirect) transfers or roles
        ... lines indicate supporting transfers or roles]]></artwork>
				</figure>
				<iref
					item="gateway"></iref>

	<section anchor="originator" title="Originator">

	<t>The Originator ensures that a message is valid for
	posting and then submits it to a Relay. A message is
	valid if it conforms to both Internet Mail standards
	and local operational policies. The Originator can
	simply review the message for conformance and reject
	it if it finds errors, or it can create some or all of
	the necessary information. In effect, the Originator
	is responsible for the functions of the Mail
	Submission Agent. 

<iref	item="Originator"></iref>
<iref	item="Actor" subitem="Originator"></iref>
<iref	item="role" subitem="Originator"></iref>
<iref	item="posting"></iref>
<iref	item="MSA"></iref>
<iref	item="Mail Submission Agent"></iref></t>

	<t>The Originator operates with dual allegiance. It serves
	the Author and can be the same entity. But its role in
	assuring validity means that it also represents the
	local operator of the MHS, that is, the local
	ADministrative Management Domain (ADMD). 

<iref	item="MHS"></iref>
<iref	item="ADMD"></iref>
<iref	item="accountability"></iref>
<iref	item="Administrative Management Domain"></iref></t>
	
	<t>The Originator also performs any post-submission,
	Author-related administrative tasks associated with
	message transfer and delivery. Notably, these tasks
	pertain to sending error and delivery notices,
	enforcing local policies, and dealing with messages
	from the Author that prove to be problematic for the
	Internet. The Originator is accountable for the
	message content, even when it is not responsible for
	it. The Author creates the message, but the Originator
	handles any transmission issues with it. 


<iref item="content"></iref>
<iref item="transfer"></iref>
<iref item="delivery"></iref>
<iref item="accountable"></iref>
<iref	item="responsible"></iref></t>
				</section>


	<section anchor="relay" title="Relay">
	<t> The Relay performs MHS-level transfer-service routing
	and store-and-forward by transmitting or
	retransmitting the message to its Recipients. The
	Relay adds trace information <xref target="RFC2505"></xref> but does not modify the
	envelope information or the message content semantics.
	It can modify message content representation, such as
	changing the form of transfer encoding from binary to
	text, but only as required to meet the capabilities of
	the next hop in the MHS. 

<iref item="envelope"></iref>
<iref	item="MHS"></iref>
<iref	item="content"></iref></t>

	<t>A Message Handling System (MHS) network consists of a
	set of Relays. This network is above any underlying
	packet-switching network that might be used and below
	any Gateways or other Mediators.

<iref	item="gateway"></iref></t>
	
       <t> In other words, email scenarios can involve three
	distinct architectural layers, each providing its own
	type of data of store-and-forward service: 

             <list><t>
             <list style="symbols">
	       <t>User Mediators</t>
	       <t>MHS Relays</t>
	       <t>Packet Switches</t>

	 </list></t></list>
       </t>
       
	<t>The bottom layer is the Internet's IP service. The most
	basic email scenarios involve Relays and Switches.</t>

	<t>When a Relay stops attempting to transfer a message, it
	becomes an Author because it sends an error message to
	the Return Address. The potential for looping is
	avoided by omitting a Return Address from this
	message.</t>
				</section>

<?rfc needLines="6"?>
	<section anchor="mhs-gateway" title="Gateway">
					
       <t>A Gateway is a hybrid of User and Relay that connects
	heterogeneous mail services. Its purpose is to emulate
	a Relay and the closer it comes to this, the better. A
	Gateway operates as a User when it needs the ability
	to modify message content. 

<iref  item="content"></iref>
<iref	item="Gateway"></iref>
<iref	item="Actor" subitem="Gateway"></iref></t>


	<t>Differences between mail services can be as small as
	minor syntax variations, but they usually encompass
	significant, semantic distinctions. One difference
	could be email addresses that are hierarchical and
	machine-specific rather than a flat, global namespace.
	Another difference could be support for text-only
	content or multimedia. Hence the Relay function in a
	Gateway presents a significant design challenge if
	the resulting performance is to be seen as nearly
	seamless. The challenge is to ensure User-to-User
	functionality between the services, despite
	differences in their syntax and semantics.</t>

	<t>The basic test of Gateway design is whether an Author
	on one side of a Gateway can send a useful message to
	a Recipient on the other side, without requiring
	changes to any components in the Author's or
	Recipient's mail services other than adding the
	Gateway. To each of these otherwise independent
	services, the Gateway appears to be a native
	participant. But the ultimate test of Gateway design
	is whether the Author and Recipient can sustain a
	dialogue. In particular, can a Recipient's MUA
	automatically formulate a valid Reply that will reach the Author?</t>

<iref	item="MUA"></iref>
	</section>
	
	<section anchor="receiver" title="Receiver">
	<t>The Receiver performs final delivery or sends the
	message to an alternate address. It can also perform
	filtering and other policy enforcement immediately
	before or after delivery.

<iref	item="content"></iref>
<iref	item="transfer"></iref>
<iref	item="delivery"></iref>
<iref	item="accountable"></iref>
<iref	item="responsible"></iref></t>
	
			</section>
			</section>


			<section
				anchor="Administrative"
				title="Administrative Actors">

	<t> Administrative Actors can be associated with different
	organizations, each with its own administrative authority.
	This operational independence, coupled with the need for
	interaction between groups, provides the motivation to
	distinguish among ADministrative Management Domains
	(ADMDs). Each ADMD can have vastly different operating
	policies and trust-based decision-making. One obvious example is
	the distinction between mail that is exchanged within an
	organization and mail that is exchanged between
	independent organizations. The rules for handling both
	types of traffic tend to be quite different. That
	difference requires defining the boundaries of each, and
	this requires the ADMD construct. 

<iref	item="Administrative Actors"></iref>
<iref	item="Actor" subitem="Administrative"></iref>
<iref	item="ADMD"></iref></t>

	<t> Operation of Internet Mail services is carried out by
	different providers (or operators). Each can be an
	independent ADMD. This independence of administrative
	decision-making defines boundaries that distinguish
	different portions of the Internet Mail service. A
	department that operates a local Relay, an IT department
	that operates an enterprise Relay, and an ISP that
	operates a public shared email service can be configured
	into many combinations of administrative and operational
	relationships. Each is a distinct ADMD, potentially having
	a complex arrangement of functional
	components. <xref target="ADMD"></xref> depicts relationships
	among ADMDs. The benefit of the ADMD construct is that it facilitates
	discussion about designs, policies, and operations that
	need to distinguish between internal issues and external ones. 

<iref	item="ADMD"></iref>
<iref	item="operations"></iref></t>

	<t> The architectural impact of the need for boundaries
	between ADMDs is discussed in <xref target="Tussle"></xref>. 
        Most significant is that the entities communicating across ADMD boundaries typically
	have the added burden of enforcing organizational policies
	concerning external communications. At a more mundane
	level, routing mail between ADMDs can be an issue, such as
	needing to route mail between organizational partners over
	specially trusted paths. 

<iref	item="ADMD"></iref></t>

				<t>These are three basic types of ADMDs:</t>
		
		<list	style="hanging" hangIndent="12">
	
        <t hangText="Edge:"> Independent transfer services in networks at the edge of the
	open Internet Mail service. 

<iref	item="Edge Actor"></iref>
<iref	item="Actor" subitem="Edge"></iref></t>

	<t hangText="Consumer: "> Might be a type of Edge service, as is common for
	web-based email access. 

<iref item="Consumer Actor"></iref>
<iref	item="Actor" subitem="Consumer"></iref></t>
			
	<t hangText="Transit:"> Mail Service Providers (MSPs) that offer value-added
	capabilities for Edge ADMDs, such as aggregation and
	filtering. 

<iref	item="Transit Actor"></iref>
<iref	item="Actor" subitem="Transit"></iref></t>

					</list>

	<t>The mail-level transit service is different from
	packet-level switching. End-to-end packet transfers
	usually go through intermediate routers; email exchange
	across the open Internet can be directly between the
	Boundary MTAs of Edge ADMDs. This distinction between
	direct and indirect interaction highlights the differences
	discussed in <xref target="relay"></xref>.

<iref	item="ADMD"></iref>
<iref	item="boundary"></iref>
<iref	item="MTA"></iref>
<iref	item="MTA" subitem="boundary"></iref>
<iref	item="end-to-end"></iref></t>
	
			<figure
					align="center"
					anchor="ADMD"
					title="Administrative Domain (ADMD) Example">

					<?rfc needLines="11" ?>
					<artwork
						align="center"
						name="ADministrative Management Domain      (ADMD)
						Example"
						src="email-arch-fig-admd.png"
						type="image/png"><![CDATA[+--------+     +---------+     +-------+     +-----------+
|  ADMD1 |<===>|  ADMD2  |<===>| ADMD3 |<===>|   ADMD4   |
|  ----- |     |  -----  |     | ----- |     |   -----   |
|        |     |         |     |       |     |           |
| Author |     |         |     |       |     | Recipient |
|   .    |     |         |     |       |     |     ^     |
|   V    |     |         |     |       |     |     .     |
|  Edge..+....>|.Transit.+....>|-Edge..+....>|..Consumer |
|        |     |         |     |       |     |           |
+--------+     +---------+     +-------+     +-----------+

Legend: === lines indicate primary (possibly indirect) 
            transfers or roles
        ... lines indicate supporting transfers or roles]]></artwork>
					<postamble></postamble>
				</figure>
	<t>Edge networks can use proprietary email standards
	internally. However, the distinction between Transit
	network and Edge network transfer services is significant
	because it highlights the need for concern over
	interaction and protection between independent
	administrations. In particular, this distinction calls for
	additional care in assessing the transitions of
	responsibility and the accountability and authorization
	relationships among participants in message transfer.</t>


	<t>The interactions of ADMD components are subject to the
	policies of that domain, which cover concerns such as
	these: 

              <list><t>
	      <list
		 style="symbols">
		<t>Reliability</t>
		<t>Access control</t>
		<t>Accountability</t>
		<t>Content evaluation and modification </t>
          </list></t>
	  </list>
	</t>

	<t> These policies can be implemented in different functional
	components, according to the needs of the ADMD. For
	example, see <xref	target="RFC5068"></xref>. </t>

	<t>Consumer, Edge, and Transit services can be offered by
	providers that operate component services or sets of
	services. Further, it is possible for one ADMD to host
	services for other ADMDs.</t>

<?rfc needLines="6" ?>

	<t>These are common examples of ADMDs: </t>
    
     <list style="hanging">
	<t hangText="Enterprise Service Providers:">
	<vspace blankLines="1" />
	These ADMDs operate the internal data and/or the mail services within an
	organization.</t>
	
	
	<t hangText="Internet Service Providers (ISP):">
	<vspace blankLines="1" />
	These ADMDs operate the underlying data	communication services, which are used by
	one or more Relay and User. ISPs are not responsible for performing email
	functions, but they can provide an environment in which those functions can
	be performed.</t>
	
	<t hangText="Mail Service Providers:">
        <vspace blankLines="1" />
	These ADMDs operate email services, such as for consumers or client companies.</t>
							</list>

	<t>Practical operational concerns demand that providers be
	involved in administration and enforcement issues. This
	involvement can extend to operators of lower-level packet
	services.</t>
			</section>
		</section>


		<section title="Identities">
	<t>The forms of identity used by Internet Mail are: mailbox,
	domain name, message-ID, and ENVID (envelope identifier). Each is globally unique.</t>

		<section title="Mailbox">
	<t>
	<list>
	<t> "A mailbox receives mail. It is a conceptual entity that
	does not necessarily pertain to file storage." <xref	target="RFC5322"></xref>
						</t>
					</list>
				</t>
	<t> A mailbox is specified as an Internet Mail address
	&lt;addr&nbhy;spec&gt;. It has two distinct
	parts, separated by an at&nbhy;sign (@). The right
	side is a globally interpreted domain name associated with
	an ADMD. Domain names are discussed
	in <xref target="DNS"></xref>. Formal Internet Mail addressing
	syntax can support source routes to indicate the path
	through which a message ought to be sent. The use of
	source routes is not common and has been deprecated in 
        <xref target="RFC5321"></xref>. 

<iref	item="addr-spec"></iref>
<iref	item="address" 	subitem="addr-spec"></iref>
<iref	item="mailbox"></iref>
<iref	item="domain name"></iref></t>

	<t>The portion to the left of the at&nbhy;sign contains a
	  string that is globally opaque and is called the
	&lt;local&nbhy;part&gt;. It is interpreted
	only by the entity specified by the address's domain name.
	Except as noted later in this section, all other entities
	treat the &lt;local&nbhy;part&gt; as an
        uninterpreted literal string and preserve all

<?rfc needLines="3" ?>

	 of its
	original details. As such, its public distribution is
	equivalent to sending a Web browser "cookie" that is only
	interpreted upon being returned to its creator. 

<iref	item="local-part" primary="true"></iref>
<iref	item="address"	subitem="local-part"></iref></t>

	<t> Some local&nbhy;part values have been standardized
	for contacting personnel at an organization. These names
	cover common operations and business
	functions <xref target="RFC2142"></xref>.

<iref	item="operations"></iref></t>

	<t>It is common for sites to have local structuring
	conventions for the left-hand side, &lt;local&nbhy;part&gt;, of an
	&lt;addr&nbhy;spec&gt;. This permits sub-addressing, such as
	for distinguishing different discussion groups used by the
	same participant. However, it is worth stressing that these conventions are strictly
	private to the User's organization and are not interpreted
	by any domain except the one listed in the right side of
	the &lt;addr&nbhy;spec&gt;. The exceptions are
	those specialized services that conform to public,
	standardized conventions, as noted below.

<iref	item="left-hand side"></iref></t>

	<t>Basic email addressing defines the &lt;local&nbhy;part&gt; as being globally
	opaque. However, there are some uses of email that add a
	standardized, global schema to the value, such as between
	an Author and a Gateway. The
	&lt;local&nbhy;part&gt; details remain
	invisible to the public email transfer infrastructure, but
	provide addressing and handling instructions for further
	processing by the Gateway. Standardized examples of these
	conventions are the telephone numbering formats for the Voice
	Profile for Internet Mail (VPIM) 
        <xref	target="RFC3801"></xref>, such as:

<iref item="gateway"></iref>
<vspace blankLines="1" />
<list>
<figure align="center">
		<artwork>+16137637582@vpim.example.com,</artwork>
							</figure></list>

and iFax (<xref	target="RFC3192"></xref>, <xref target="RFC4143"></xref> such as:
<vspace blankLines="1" />




 <list><figure align="center">
		<artwork>FAX=+12027653000/T33S=1387@ifax.example.com.</artwork>
							</figure>
	
					</list>
				</t>
			</section>
	
		<section title="Scope of Email Address Use">
	<t> Email addresses are being used far beyond their original
	role in email transfer and delivery. In practical terms,
	an email address string has become the common identifier
	for representing online identity. Hence, it is essential
	to be clear about both the nature and role of an identity
	string in a particular context and the entity responsible
	for setting that string. For example, see Sections <xref format="counter"
	target="identref"></xref>, <xref format="counter" target="mda"></xref>, and <xref
	format="counter" target="Mediators"></xref>. 

<iref	item="delivery"></iref>
<iref	item="role"></iref>
<iref	item="identifier"></iref>
				</t>
			</section>
<?rfc needLines="6" ?>
		<section anchor="DNS" title="Domain Names">
	<t> A domain name is a global reference to an Internet
	resource, such as a host, a service, or a network. A
	domain name usually maps to one or more IP Addresses.
	Conceptually, the name can encompass an organization, a
	collection of machines integrated into a homogeneous
	service, or a single machine. A domain name can be
	administered to refer to an individual User, but this is
	not common practice. The name is structured as a
	hierarchical sequence of labels, separated by dots (.),
	with the top of the hierarchy being on the right end of
	the sequence. There can be many names in the sequence --
	that is, the depth of the hierarchy can be substantial.
	Domain names are defined and operated through the Domain
	Name System (DNS) (<xref target="RFC1034"></xref>, 
        <xref target="RFC1035"></xref>, <xref target="RFC2181"></xref>). </t>

	<t>When not part of a mailbox address, a domain name is used
	in Internet Mail to refer to the ADMD or to the host that
	took action upon the message, such as providing the
	administrative scope for a message identifier or
	performing transfer processing. </t>

			</section>

			<section title="Message Identifier">
	<t>There are two standardized tags for identifying messages:
	Message-ID: and ENVID. A Message-ID: pertains to content,
	and an ENVID pertains to transfer.</t>
		
		<section anchor="msgid" title="Message-ID">
	<t> IMF provides for, at most, a single Message-ID:. The
	Message-ID: for a single message, which is a
	user-level IMF tag, has a variety of uses including
	threading, aiding identification of duplicates, and
	DSN (Delivery Status Notification) tracking. The Originator assigns the Message-ID:.
	The Recipient's ADMD is the intended consumer of the
	Message-ID:, although any Actor along the transfer
	path can use it. 


<iref	item="ADMD"></iref>
<iref	item="IMF"></iref>
<iref	item="actor"></iref></t>

	<t> Message-ID: is globally unique. Its format is
	similar to that of a mailbox, with two distinct parts
	separated by an at&nbhy;sign (@). Typically, the
	right side specifies the ADMD or host that assigns the
	identifier, and the left side contains a string that
	is globally opaque and serves to uniquely identify the
	message within the domain referenced on the right
	side. The duration of uniqueness for the message
	identifier is undefined. 

<iref 	item="mailbox"></iref>
<iref	item="identifier"></iref></t>

	<t> When a message is revised in any way, the decision
	whether to assign a new Message-ID: requires a
	subjective assessment to determine whether the
	editorial content has been changed enough to
	constitute a new message. <xref	target="RFC5322"></xref> states that "a message
	identifier pertains to exactly one version of a	particular
	message; subsequent revisions to the message each receive new
	message identifiers." 



        Yet experience suggests that some flexibility is needed.
	An impossible test is whether the Recipient will
	consider the new message to be equivalent to the old
	one. For most components of Internet Mail, there is no
	way to predict a specific Recipient's preferences on
	this matter. Both creating and failing to create a new
	Message-ID: have their downsides. 

<iref	item="content"></iref></t>

	<t>Here are some guidelines and examples: </t>

	<list	style="symbols">
	
       <t>If a message is changed only in form,	such as character encoding, it is
	still the same message.</t>

	<t>If a message has minor additions to the
	content, such as a Mailing List tag at the beginning of the
	RFC5322.Subject header field, or some Mailing List
	administrative information added to the end of the primary
	body part text,	it is probably the same message.</t>
						
	<t>If a message has viruses deleted from it, it is probably the same message.</t>
							
	<t>If a message has offensive words deleted from it, some Recipients will
	consider it the same message, but some will not.</t>
						
	<t>If a message is translated into a different language, some Recipients
	will consider it the same message, but some will not.</t>
						
	<t>If a message is included in a digest of messages, the digest constitutes a new
	message.</t>
	
	<t>If a message is forwarded by a Recipient, what is forwarded is a new	message.</t>


	<t>If a message is "redirected", such as using IMF "Resent-*" header fields,
	some Recipients will consider it the same message, but some will not.</t>
								</list>
						
						
	<t>The absence of both objective, precise criteria for
	regenerating a Message-ID: and strong protection
	associated with the string means that the presence of
	an ID can permit an assessment that is marginally
	better than a heuristic, but the ID certainly has no
	value on its own for strict formal reference or
	comparison. For that reason, the Message-ID: is not
	intended to be used for any function that has security implications.</t>
				</section>

		<section anchor="envid"	title="ENVID">
	<t> The ENVID (envelope identifier) can be used for
	message-tracking purposes (<xref target="RFC3885"></xref>,
       <xref target="RFC3464"></xref>) concerning a single
	posting/delivery transfer. The ENVID labels a single
	transit of the MHS by a specific message. So, the
	ENVID is used for one message posting until that
	message is delivered. A re-posting of the message,
	such as by a Mediator, does not reuse that ENVID, but
	can use a new one, even though the message might
	legitimately retain its original Message-ID:. 

<iref	item="envelope"></iref>
<iref	item="posting"></iref>
<iref	item="MHS"></iref>
<iref	item="identifier"></iref></t>

	<t>The format of an ENVID is free form. Although its
	creator might choose to impose structure on the
	string, none is imposed by Internet standards. By
	implication, the scope of the string is defined by the
	domain name of the Return Address.

<iref item="domain name"></iref></t>
				</section>
			</section>
		</section>

		<section title="Services and Standards">
	<t> The Internet Mail architecture comprises six basic types of
	functionality, which are arranged to support a
	store-and-forward service. As shown
	in <xref target="Protocols"></xref>, each type can have
	multiple instances, some of which represent specialized roles. This
	section considers the activities and relationships among these
	components, and the Internet Mail standards that apply to
	them. </t>
			
		<list>
		<t>Message</t>
		<t>Message User Agent (MUA)

                     <list>
			<t>Author MUA (aMUA)</t>
			<t>Recipient MUA (rMUA)</t>
		</list></t>
		<t>Message Submission Agent (MSA)
		     <list>
                      <t>Author-focused MSA functions (aMSA)</t>
		      <t>MHS-focused MSA functions (hMSA)</t>
								</list></t>
			
		<t>Message Transfer Agent (MTA)</t>
		<t>Message Delivery Agent (MDA)
                    <list>
			<t>Recipient-focused MDA functions (rMDA)</t>
			<t>MHS-focused MDA functions (hMDA)</t>
								</list>
							</t>
			
		<t>Message Store (MS)
                   <list>
			<t>Author MS (aMS) </t>
			<t>Recipient MS (rMS) </t>
								</list></t>

			</list>



			<t>This figure shows function modules and the standardized
				protocols used between them.
<iref	item="MHS"></iref>
			</t>
	
		<figure		align="center"
				anchor="Protocols"
				title="Protocols and Services">

				<?rfc needLines="45" ?>
				<artwork
					align="center"
					name="Protocols and Services"
					src="email-arch-fig-ptclsvc.png"
					type="image/png"><![CDATA[                 ++========++
                 ||        ||                             +-------+
      ...........++  aMUA  ||<............................+ Disp  |
      .          ||        ||                             +-------+
      .          ++=+==+===++                                 ^
      .  local,imap}|  |{smtp,submission                      .
      .  +-----+    |  |                          +--------+  .
      .  | aMS |<---+  | ........................>| Return |  .
      .  +-----+       | .                        +--------+  .
      .                | .    *****************       ^       .
      .          +-----V-.----*------------+  *       .       .
      .      MSA | +-------+  *   +------+ |  *       .       .
      .          | | aMSA  +-(S)->| hMSA | |  *       .       .
      .          | +-------+  *   +--+---+ |  *       .       .
      V          +------------*------+-----+  *       .       .
//==========\\                *      V {smtp  *       .       .
|| MESSAGE  ||                *   +------+    *  //===+===\\  .
||----------||            MHS *   | MTA  |    *  ||  dsn  ||  .
|| ENVELOPE ||                *   +--+---+    *  \\=======//  .
||  smtp    ||                *      V {smtp  *     ^   ^     .
|| CONTENT  ||                *   +------+    *     .   . //==+==\\
||  imf     ||                *   | MTA  +....*......   . || mdn ||
||  mime    ||                *   +--+---+    *         . \\=====//
\\==========//                * smtp}| {local *         .     ^
      .           MDA         *      | {lmtp  *         .     .
      .      +----------------+------V-----+  *         .     .
      .      | +----------+   *   +------+ |  *         .     .
      .      | |          |   *   |      | +..*..........     .
      .      | |   rMDA   |<-(D)--+ hMDA | |  *               .
      .      | |          |   *   |      | |<.*........       .
      .      | +-+------+-+   *   +------+ |  *       .       .
      .      +------+---------*------------+  *       .       .
      .  smtp,local}|         *****************       .       .
      .             V                                 .       .
      .          +-----+                         //===+===\\  .
      .          | rMS |                         || sieve ||  .
      .          +--+--+                         \\=======//  .
      .             |{imap,pop,local                  ^       .
      .             V                                 .       .
      .       ++==========++                          .       .
      .       ||          ||                          .       .
      .......>||   rMUA   ++...........................       .
              ||          ++...................................
              ++==========++
              
Legend: --- lines indicate primary (possibly indirect) 
            transfers or roles
        === boxes indicate data objects
        ... lines indicate supporting transfers or roles 
	*** lines indicate aggregated service]]></artwork>
				<postamble></postamble>
			</figure>
			<iref
				item="POP"></iref>
			<iref
				item="IMAP"></iref>
			<iref
				item="SMTP"></iref>
			<iref
				item="MIME"></iref>
			<iref
				item="IMF"></iref>
			<iref
				item="LMTP"></iref>
			<iref
				item="MDN"></iref>
			<iref
				item="SIEVE"></iref>
			<iref
				item="MDA"></iref>
			<iref
				item="MUA"></iref>
			<iref
				item="MS"></iref>
			<iref
				item="MSA"></iref>

	<section anchor="Data"
		title="Message Data">
		
	<t> The purpose of the Message Handling System (MHS) is to
	exchange an IMF message object among
	participants <xref	target="RFC5322"></xref>. All of its
	underlying mechanisms serve to deliver that message from its Author
	to its Recipients. A message can be explicitly labeled as
	to its nature <xref	target="RFC3458"></xref>. </t>
				
        <t> A message comprises a transit-handling envelope and the
	message content. The envelope contains information used by
	the MHS. The content is divided into a structured header
	and the body. The header comprises transit-handling trace
	information and structured fields that are part of the
	Author's message content. The body can be unstructured
	lines of text or a tree of multimedia subordinate
	objects, called "body-parts" or, popularly, "attachments".


<xref	target="RFC2045"></xref>, 
<xref	target="RFC2046"></xref>, 
<xref	target="RFC2047"></xref>, 
<xref	target="RFC4288"></xref>, 
<xref	target="RFC4289"></xref>, 
<xref	target="RFC2049"></xref>. 


<iref	item="envelope"></iref>
<iref	item="MHS"></iref>
<iref	item="content"></iref>
<iref	item="body parts" primary="false"></iref>
<iref	item="message"></iref>
<iref	item="header"></iref></t>
	

	<t>In addition, Internet Mail has a few conventions for
	special control data, notably:</t>

        <list style="hanging">

		<t hangText="Delivery Status Notification (DSN):">
          <vspace blankLines="1" />
		 A Delivery Status Notification (DSN) is a
		message that can be generated by the MHS
		(MSA, MTA, or MDA) and sent to the
		RFC5321.MailFrom address. MDA and MTA
		are shown as sources of DSNs in <xref
		target="Protocols"></xref>, and the
		destination is shown as Returns. DSNs
		provide information about message transit,
		such as transfer errors or successful
		delivery <xref	target="RFC3461"></xref>.
<iref	item="MHS"></iref>
<iref	item="delivery"></iref></t>
	
		<t hangText="Message Disposition Notification (MDN):">
                  <vspace blankLines="1" />
		 A Message Disposition Notification (MDN)
		is a message that provides information
		about post-delivery processing, such as
		indicating that the message has been
		displayed <xref	target="RFC3798"></xref> or the form
		of content that can be supported <xref
		target="RFC3297"></xref>. It can be generated by an rMUA and is sent to the
		Disposition-Notification-To addresses. The mailbox for
		this is shown as Disp in <xref	target="Protocols"></xref>. 

<iref	item="content"></iref>
<iref	item="mailbox"></iref></t>
	
<?rfc needLines="6" ?>
		<t hangText="Message Filtering (SIEVE):">
<iref	item="SIEVE"></iref>
	<vspace blankLines="1" />
		Sieve is a scripting language used to specify conditions for differential
		handling of mail, typically at the time of delivery <xref
		target="RFC5228"></xref>. Scripts can be conveyed in a
	variety of ways, such as a MIME part in a message. <xref
	target="Protocols"></xref> shows a Sieve script going from the rMUA to the
	MDA. However, filtering can be done at many different points along the transit
	path, and any one or more of them might be subject to Sieve directives, especially
	within a single ADMD.  <xref target="Protocols"></xref> shows only
	one relationship, for (relative) simplicity. 

<iref	item="delivery"></iref>
<iref	item="ADMD"></iref></t>
							</list>
					
	<section title="Envelope">
	<t> Internet Mail has a fragmented framework for
	transit-related handling information. Information that
	is used directly by the MHS is called the "envelope".
	It directs handling activities by the transfer service
	and is carried in transfer-service commands. That is, 
	the envelope exists in the transfer protocol SMTP <xref
	target="RFC5321"></xref>.

<iref	item="MHS"></iref>
<iref	item="envelope" primary="true"></iref>
					</t>
			
	<t> Trace information, such as RFC5322.Received, is
	recorded in the message header and is not subsequently
	altered <xref	target="RFC5322"></xref>.</t>
				</section>

	<section anchor="Fields" title="Header Fields">
	<t> Header fields are attribute name/value pairs that
	cover an extensible range of email-service parameters,
	structured user content, and user transaction
	meta-information. The core set of header fields is
	defined in <xref target="RFC5322"></xref>. It is common practice to
	extend this set for different applications. Procedures
	for registering header fields are defined in <xref
	target="RFC3864"></xref>. An extensive set of existing header
	field registrations is provided in <xref target="RFC4021"></xref>. </t>

	<t>One danger of placing additional information in header
	fields is that Gateways often alter or delete them.

<iref	item="gateway"></iref></t>

				</section>
	
	<section title="Body">
	<t> The body of a message might be lines of ASCII text or
	a hierarchically structured composition of multimedia
	body part attachments using MIME (<xref
			target="RFC2045"></xref>, <xref
			target="RFC2046"></xref>, <xref
			target="RFC2047"></xref>, <xref
			target="RFC4288"></xref>,
	and <xref target="RFC2049"></xref>).
					</t>

				</section>

	<section anchor="identref" title="Identity References in a
	Message" toc="include">
			
	<t><xref target="layeredid"></xref> lists the core
	identifiers present in a message during transit.

<iref	item="identifier"></iref></t>
	
				<texttable
						align="left"
						anchor="layeredid"
						title="Layered Identities">
						<ttcol>Layer</ttcol>
						<ttcol>Field</ttcol>
						<ttcol>Set By</ttcol>

						<c>Message Body</c>
						<c>MIME Header</c>
						<c>Author</c>

						<c>Message header fields</c>
						<c>From:</c>
						<c>Author</c>

						<c></c>
						<c>Sender:</c>
						<c>Originator</c>

						<c></c>
						<c>Reply-To:</c>
						<c>Author</c>

						<c></c>
						<c>To:, CC:, BCC:</c>
						<c>Author</c>

						<c></c>
						<c>Message-ID:</c>
						<c>Originator</c>

						<c></c>
						<c>Received:</c>
						<c>Originator, Relay, Receiver</c>

						<c></c>
						<c>Return-Path:</c>
						<c>MDA, from MailFrom</c>

						<c></c>
						<c>Resent-*:</c>
						<c>Mediator</c>

						<c></c>
						<c>List-Id:</c>
						<c>Mediator</c>

						<c></c>
						<c>List-*:</c>
						<c>Mediator</c>

						<c>SMTP</c>
						<c>HELO/EHLO</c>
						<c>Latest Relay Client</c>

						<c></c>
						<c>ENVID</c>
						<c>Originator</c>

						<c></c>
						<c>MailFrom</c>
						<c>Originator</c>

						<c></c>
						<c>RcptTo</c>
						<c>Author</c>

						<c></c>
						<c>ORCPT</c>
						<c>Originator</c>

						<c>IP</c>
						<c>Source Address</c>
						<c>Latest Relay Client</c>
			
	<postamble><list style="hanging"> <t hangText="Legend:"><vspace blankLines="0" />
          Layer - The part of the email	architecture that uses the
          identifier.
          <vspace blankLines="1" /> 
         Field - The protocol construct that contains the identifier.
          <vspace blankLines="1" />
	Set By - The Actor role responsible for specifying the
          identifier value (and this can be different from the Actor
          that performs the fill-in function for the protocol construct).</t> </list></postamble>
		</texttable>

	<t>These are the most common address-related fields: 

<iref	item="actor"></iref></t>
	
	<list	style="hanging">
	<t	hangText="RFC5322.From:"> 
         Set by - Author
			<vspace blankLines="1" />
	Names and addresses for Authors of the message content are listed in the
	From: field.</t>
	
<?rfc needLines="7" ?>
	<t	hangText="RFC5322.Reply-To:"> 
	Set by 	- Author
            <vspace blankLines="1" />
		If a Recipient sends a reply message that would otherwise use the
		RFC5322.From field addresses in the original message, the addresses in the
		RFC5322.Reply-To field are used	instead. In other words, this field
		overrides the From: field for responses from Recipients.</t>

		<t	hangText="RFC5322.Sender:"> 
                Set by - Originator
	           <vspace blankLines="1" />				
 		This field specifies the address responsible for submitting the message
		to the transfer service. This field can be omitted if it contains the same
		address as RFC5322.From. However, omitting this field does not mean that
		no Sender is specified; it means that that header field is virtual and that
		the address in the From: field is to be used.
                <vspace blankLines="1" />
          	Specification of the notifications Return Addresses, which are contained
		in RFC5321.MailFrom, is made by the RFC5322.Sender. Typically, the Return
		address is the same as the Sender address. However, some usage scenarios
		require it to be different.</t>
						
		<t hangText="RFC5322.To/.CC:"> 
		Set by - Author
                   <vspace blankLines="1" />
		These fields specify MUA Recipient addresses. However, some or all of the
		addresses in these fields might not be present in the RFC5321.RcptTo
		commands. 
                  <vspace blankLines="1" />				
		The distinction between To and CC is subjective. Generally, a To addressee
		is considered primary and is expected to take action on the message. A CC
		addressee typically receives a copy as a courtesy.</t>
							
		<t	hangText="RFC5322.BCC:"> Set by - Author
                   <vspace blankLines="1" />
                 A copy of the message might be sent to an addressee whose participation is
		not to be disclosed to the RFC5322.To or RFC5322.CC Recipients and, usually,
		not to the other BCC Recipients. The BCC: header field indicates a message
		copy to such a Recipient. Use of this field is discussed in <xref
		target="RFC5322"></xref>. </t>
		
		<t	hangText="RFC5321.HELO/.EHLO:"> Set by - Originator, MSA, MTA
                    <vspace blankLines="1" />
		Any SMTP client -- including Originator, MSA, or MTA -- can specify
		its hosting domain identity for the SMTP HELO or EHLO command operation.</t>
							
		<t	hangText="RFC3461.ENVID:"> Set by - Originator
		<vspace blankLines="1" />		
                The MSA can specify an opaque string, to be included in a DSN, as a means of
		assisting the Return Address Recipient in identifying the message that
		produced a DSN or message tracking.</t>
		
		<t hangText="RFC5321.MailFrom:"> Set by - Originator
                   <vspace blankLines="1" />
		This field is an end-to-end string that	specifies an email address for
		receiving return control information, such as returned messages. The name of
		this field is misleading, because it is not required to specify either the
		Author or the Actor responsible for submitting the message. Rather, the
		Actor responsible for submission specifies the RFC5321.MailFrom
		address. Ultimately, the simple basis for deciding which address needs to be
		in the RFC5321.MailFrom field is to determine which address is to be
		informed about transfer-level problems (and possibly successes).

<iref	item="end-to-end"></iref>
<iref	item="actor"></iref></t>
				
		<t	hangText="RFC5321.RcptTo:"> Set by - Author,
		Final MTA, MDA
                  <vspace blankLines="1" />
		This field specifies the MUA mailbox address of a Recipient. The string
		might not be visible in the message content header. For example, the IMF
		destination address header fields, such as RFC5322.To, might specify a
		Mailing List mailbox, while the RFC5321.RcptTo address specifies a
		member of that list. 

<iref	item="mailbox"></iref></t>
				
		<t hangText="RFC5321.ORCPT: "> Set by - Originator.
                    <vspace blankLines="1" />
		This is an optional parameter to the RCPT command, indicating the original
		address to which the current RCPT TO address corresponds, after a mapping
		was performed during transit. An ORCPT is the only reliable way to correlate
		a DSN from a multi-Recipient message transfer with the intended Recipient.</t>
							
		<t hangText="RFC5321.Received:"> Set by -
		Originator, Relay, Mediator, Dest
                   <vspace blankLines="1" />
		This field contains trace information, including originating host, Relays,
		Mediators, and MSA host domain names and/or IP
		Addresses.

<iref item="domain name"></iref></t>
	
		<t hangText="RFC5321.Return-Path:"> Set by -
		Originator
               <vspace blankLines="1" />
		The MDA records the RFC5321.MailFrom address into the RFC5321.Return-Path
		field.</t>
		
		<t	hangText="RFC2919.List-Id:"> Set by - Mediator, Author
                   <vspace blankLines="1" />
                  This field provides a globally unique Mailing List naming framework that is
		independent of particular hosts <xref 	target="RFC2919"></xref>.
			<vspace blankLines="1" />
                 The identifier is in the form of a domain name; however, the string
		usually is constructed by combining the two parts of an email address. The
		result is rarely a true domain name, listed in the domain name service,
		although it can be.

<iref item="identifier"></iref></t>

		<t	hangText="RFC2369.List-*:"> Set by - 	Mediator, Author
			<vspace blankLines="1" />
		<xref	target="RFC2369"></xref> defines a collection of message header fields
		for use by Mailing Lists. In effect, they supply list-specific parameters
		for common Mailing-List user operations. The identifiers for these
		operations are for the list itself and the
		user-as-subscriber <xref target="RFC2369"></xref>.
		
<iref	item="operations"></iref></t>
					
		<t hangText="RFC0791.SourceAddr:"> 
               Set by - The Client SMTP sending host immediately preceding the current
	       receiving SMTP server
                 <vspace blankLines="1" />
	      <xref	target="RFC0791"></xref> defines the basic unit of data transfer for
		the Internet: the IP datagram. It contains a Source Address field that
		specifies the IP Address for the host (interface) from which the datagram
		was sent. This information is set and provided by the IP layer, which makes
		it independent of mail-level mechanisms. As such, it is often taken
		to be authoritative, although it is possible to provide false addresses. </t>

								</list>
							

				</section>
			</section>

	<section title="User-Level Services">
	<t> Interactions at the user level entail protocol exchanges,
	distinct from those that occur at lower layers of the
	Internet Mail MHS architecture that is, in turn, above the
	Internet Transport layer. Because the motivation for
	email, and much of its use, is for interaction among
	people, the nature and details of these protocol exchanges
	often are determined by the needs of interpersonal and
	group communication. To accommodate the idiosyncratic
	behavior inherent in such communication, only subjective
	guidelines, rather than strict rules, can be offered for
	some aspects of system behavior. Mailing Lists provide
	particularly salient examples. </t>
		
	<section anchor="service-mua" title="Message User Agent (MUA)">
	<t>A Message User Agent (MUA) works on behalf of User
	Actors and User applications. It is their representative
	within the email service. 

<iref	item="actor"></iref></t>

	<t>The Author MUA (aMUA) creates a message and performs
	initial submission into the transfer infrastructure
	via a Mail Submission Agent (MSA). It can also perform
	any creation- and posting-time archiving in its Message
	Store (aMS). An MUA aMS can organize messages in many
	different ways. A common model uses aggregations,
	called "folders"; in IMAP they are called "mailboxes".
	This model allows a folder for messages under
	development (Drafts), a folder for messages waiting to
	be sent (Queued or Unsent), and a folder for messages
	that have been successfully posted for transfer
	(Sent). But none of these folders is required. For
	example, IMAP allows drafts to be stored in any
	folder, so no Drafts folder needs to be present.<iref
	item="mailbox"></iref></t>

	<t>The Recipient MUA (rMUA) works on behalf of the
	Recipient to process received mail. This processing
	includes generating user-level disposition control
	messages, displaying and disposing of the received
	message, and closing or expanding the user-communication loop by initiating replies and
	forwarding new messages.</t>

	<list	style="hanging" hangIndent="8">
		<t	hangText="NOTE:"> Although not shown
		in <xref target="Protocols"></xref>, an MUA
		itself can have a distributed implementation, such as
		a "thin" user-interface module on a constrained
		device such as a smartphone, with most
		of the MUA functionality running remotely on a more capable server. An
		example of such an architecture might use IMAP <xref
		target="RFC3501"></xref> for most of the interactions between an MUA
		client and an MUA server. An approach for such scenarios is defined by <xref
		target="RFC4550"></xref>. 
<iref	item="MUA"></iref></t>	</list>
	
		<t> A Mediator is a special class of MUA. It performs
		message re&nbhy;posting, as discussed in <xref
		target="Users"></xref>. 

<iref	item="posting"></iref>
<iref 	item="MUA"></iref></t>
	
		<t>An MUA can be automated, on behalf of a User who is not
		present at the time the MUA is active. One example is
		a bulk sending service that has a timed-initiation
		feature. These services are not to be confused with a
		Mailing List Mediator, since there is no incoming
		message triggering the activity of the automated service.</t>

	<t> A popular and problematic MUA is an automatic
	responder, such as one that sends out-of-office
	notices. This behavior might be confused with that of
	a Mediator, but this MUA is generating a new message.
	Automatic responders can annoy Users of Mailing Lists
	unless they follow <xref target="RFC3834"></xref>. </t>

	<t>The identity fields are relevant to a typical MUA:</t>

		<list>
			<t>RFC5322.From</t>
			<t>RFC5322.Reply-To</t>
			<t>RFC5322.Sender</t>
			<t>RFC5322.To, RFC5322.CC</t>
			<t>RFC5322.BCC</t>
		</list>

				</section>

	<section title="Message Store (MS)">
	<t> An MUA can employ a long-term Message Store (MS). <xref
	target="Protocols"></xref> depicts an Author's MS (aMS) and a
	Recipient's MS (rMS). An MS can be located on a remote
	server or on the same machine as the MUA. </t>

	<t>An MS acquires messages from an MDA either proactively
	by a local mechanism or even by a standardized
	mechanism such as SMTP(!), or reactively by using POP or IMAP. 
        The MUA accesses the MS either by a local
	mechanism or by using POP or IMAP. Using POP for
	individual message accesses, rather than for bulk
	transfer, is relatively rare and inefficient. 

<iref	item="POP"></iref>
<iref	item="IMAP"></iref></t>
				</section>

			</section>

	<section title="MHS-Level Services">

	<section anchor="msa"	title="Mail Submission Agent (MSA)">
	<t> A Mail Submission Agent (MSA) accepts the message
	submitted by the aMUA and enforces the policies of the
	hosting ADMD and the requirements of Internet
	standards. An MSA represents an unusual functional
	dichotomy. It represents the interests of the Author
	(aMUA) during message posting, to facilitate posting
	success; it also represents the interests of the MHS.
	In the architecture, these responsibilities are
	modeled, as shown in <xref
	target="Protocols"></xref>, by dividing the MSA
	into two sub-components, aMSA and hMSA, respectively.
	Transfer of responsibility for a single message, from
	an Author's environment to the MHS, is called
	"posting". In <xref
		target="Protocols"></xref>, it is marked as the (S)
	transition, within the MSA. 

<iref	item="MUA"></iref>
<iref	item="ADMD"></iref>
<iref	item="posting" 	primary="true"></iref>
<iref 	item="MSA"></iref>
<iref 	item="responsibility"></iref>
<iref 	item="transition"></iref>
<iref 	item="aMSA"></iref>
<iref	item="hMSA"></iref>
<iref 	item="posting"></iref></t>
	
	<t> The hMSA takes transit responsibility for a message
	that conforms to the relevant Internet standards and
	to local site policies. It rejects messages that are
	not in conformance. The MSA performs final message
	preparation for submission and effects the transfer of
	responsibility to the MHS, via the hMSA. The amount of
	preparation depends upon the local implementations.
	Examples of aMSA tasks include adding header fields,



	such as Date: and Message-ID:, and modifying portions
	of the message from local notations to Internet
	standards, such as expanding an address to its formal
	IMF representation. </t>

	<t>Historically, standards-based MUA/MSA message postings
	have used SMTP <xref	target="RFC5321"></xref>. The standard currently
	preferred is SUBMISSION <xref	target="RFC4409"></xref>. Although SUBMISSION
	derives from SMTP, it uses a separate TCP port and imposes
	distinct requirements, such as access authorization. </t>

<?rfc needLines="7" ?>
	<t>These identities are relevant to the MSA:</t>
		<list>
			<t>RFC5321.HELO/.EHLO</t>
			<t>RFC3461.ENVID</t>
			<t>RFC5321.MailFrom</t>
			<t>RFC5321.RcptTo</t>
			<t>RFC5321.Received</t>
			<t>RFC0791.SourceAddr</t>
								</list>
			
				</section>
			

	<section title="Message Transfer Agent (MTA)">
			
	<t> A Message Transfer Agent (MTA) relays mail for one
	application-level "hop". It is like a packet switch or
	IP router in that its job is to make routing
	assessments and to move the message closer to the
	Recipients. Of course, email objects are typically
	much larger than the payload of a packet or datagram,
	and the end-to-end latencies are typically much
	higher. Relaying is performed by a sequence of MTAs
	until the message reaches a destination MDA. Hence, an
	MTA implements both client and server MTA
	functionality; it does not change addresses in the
	envelope or reformulate the editorial content. A
	change in data form, such as to MIME
	Content-Transfer-Encoding, is within the purview of an
	MTA, but removal or replacement of body content is
	not. An MTA also adds trace information <xref	target="RFC2505"></xref>.

<iref	item="envelope"></iref>
<iref	item="content"></iref></t>
	
      <list style="hanging" hangIndent="8">
	<t hangText="NOTE:"> Within a destination ADMD, email-relaying
	modules can make a variety of changes to the message, prior to delivery. In
	such cases, these modules are acting as Gateways, rather than
	MTAs. 

<iref	item="gateway"></iref></t>
								</list>
	
	
	
	<t> Internet Mail uses SMTP (<xref
	target="RFC5321"></xref>, <xref
	target="RFC2821"></xref>, <xref
	target="RFC0821"></xref>) primarily to effect
	point-to-point transfers between peer MTAs. Other
	transfer mechanisms include Batch SMTP <xref
	target="RFC2442"></xref> and On-Demand Mail Relay (ODMR) SMTP <xref
	target="RFC2645"></xref>. As with most network-layer
	mechanisms, the Internet Mail SMTP supports a
	basic level of reliability, by virtue of providing for
        retransmission after a temporary transfer failure.
	Unlike typical packet switches (and Instant Messaging
	services), Internet Mail MTAs are expected to store
	messages in a manner that allows recovery across
	service interruptions, such as host-system shutdown.
	The degree of such robustness and persistence by an
	MTA can vary. The base SMTP specification provides a
	framework for protocol response codes. An extensible
	enhancement to this framework is defined in <xref
	target="RFC5248"></xref>.</t>

	<t> Although quite basic, the dominant routing mechanism
	for Internet Mail is the DNS MX record <xref
	target="RFC1035"></xref>, which specifies an MTA
	through which the queried domain can be reached. This
	mechanism presumes a public, or at least a common,
	backbone that permits any attached MTA to connect to
	any other. </t>

	<t>MTAs can perform any of these well-established roles:</t>

	<list	style="hanging" hangIndent="15">

	<t	hangText="Boundary MTA:"> An MTA that
		is part of an ADMD and interacts with
		MTAs in other ADMDs. This is also
		called a Border MTA. There can be
		different Boundary MTAs, according to
		the direction of mail-flow. 


      <list	style="hanging" hangIndent="15">
	<t	hangText="Outbound MTA:"> An
		MTA that relays messages to
		other ADMDs.</t>
		
	<t	hangText="Inbound MTA:"> An
		MTA that receives inbound SMTP
		messages from MTA Relays in
		other ADMDs, for example, an
		MTA running on the host listed
		as the target of an MX record.</t>
					
				</list></t>

	<t	hangText="Final MTA:"> The MTA that
		transfers a message to the MDA.</t>
								</list>
		
	<t>These identities are relevant to the MTA:</t>
	
	<list>
	<t>RFC5321.HELO/.EHLO</t>
	<t>RFC3461.ENVID</t>
	<t>RFC5321.MailFrom</t>
	<t>RFC5321.RcptTo</t>
	<t>RFC5322.Received:&nbsp;&nbsp;Set by - Relay Server</t>
	<t>RFC0791.SourceAddr</t></list>
						
				</section>
	<section
		anchor="mda"
		title="Mail Delivery Agent (MDA)">
		<t> A transfer of responsibility from the MHS to a
			Recipient's environment (mailbox) is called
			"delivery". In the architecture, as depicted in <xref
				target="Protocols"></xref>, delivery takes place
			within a Mail Delivery Agent (MDA) and is shown as the
			(D) transition from the MHS-oriented MDA component
			(hMDA) to the Recipient-oriented MDA component (rMDA). <iref
				item="mailbox"></iref></t>

<?rfc needLines="4" ?>
		<t>An MDA can provide distinctive, address-based
			functionality, made possible by its detailed
			information about the properties of the destination
			address. This information might also be present
			elsewhere in the Recipient's ADMD, such as at an
			organizational border (Boundary) Relay. However, it is
			required for the MDA, if only because the MDA is
			required to know where to deliver the
			message. </t>

		<t> Like an MSA, an MDA serves two roles, as depicted in <xref
				target="Protocols"></xref>. Formal transfer of
			responsibility, called "delivery", is effected between
			the two components that embody these roles and
				is shown as "(D)" in <xref
				target="Protocols"></xref>. The MHS portion (hMDA)
			primarily functions as a server SMTP engine. A common
			additional role is to redirect the message to an
			alternative address, as specified by the Recipient
			addressee's preferences. The job of the Recipient
			portion of the MDA (rMDA) is to perform any delivery
			actions that the Recipient specifies. </t>
		<t>Transfer into the MDA is accomplished by a normal MTA
			transfer mechanism. Transfer from an MDA to an MS uses
			an access protocol, such as POP or IMAP.<iref
				item="POP"></iref><iref
				item="IMAP"></iref></t>

		<list	style="hanging" hangIndent="8">
			<t hangText="NOTE:"> The term
			"delivery" can refer to the formal,
			MHS function specified here or to the
			first time a message is displayed to a
			Recipient. A simple, practical test
			for whether the MHS-based definition
			applies is whether a DSN can be
			generated. </t>
								</list>
					
					
					
			<t>These identities are relevant to the MDA:</t>

	<list><t><list style="hanging">
		<t
		hangText="RFC5321.Return-Path:"> Set
		by - Author Originator or Mediator
		Originator</t>

		<t>The MDA records the RFC5321.MailFrom
		address into the RFC5321.Return-Path
		field.</t>

		<t
		hangText="RFC5322.Received:"> Set by
		- MDA server</t>

		<t>An MDA can record a Received: header
		field to indicate trace information,
		including source host and receiving
		host domain names and/or IP
		Addresses.</t>
	</list></t></list>
			
		</section>
	</section>


       <section	title="Transition Modes">
	<t> From the origination site to the point of delivery,
		Internet Mail usually follows a "push" model. That is, the
		Actor that holds the message initiates transfer to the
		next venue, typically with SMTP <xref
			target="RFC5321"></xref> or the Local Mail
		Transfer Protocol (LMTP) <xref target="RFC2033"></xref>. 
                With a "pull" model, the
		Actor that holds the message waits for the Actor in the
		next venue to initiate a request for transfer.
		Standardized mechanisms for pull-based MHS transfer
		are

<!--[rfced] Please confirm that there is not an expansion for ETRN. -->

		ETRN <xref
			target="RFC1985"></xref> and ODMR <xref
			target="RFC2645"></xref>. <iref
			item="posting"></iref>
		<iref
			item="author"></iref><iref
			item="delivery"></iref>
		<iref
			item="recipient"></iref><iref
			item="push"></iref><iref
			item="pull"></iref>
		<iref
			item="SMTP"></iref><iref
			item="LMTP"></iref><iref
			item="ODMR"></iref>
		<iref
			item="ETRN"></iref><iref
			item="actor"></iref></t>
	<t> After delivery, the Recipient's MUA (or MS) can gain
		access by having the message pushed to it or by having the
		receiver of access pull the message, such as by using POP <xref
			target="RFC1939"></xref> and IMAP <xref
			target="RFC3501"></xref>. <iref
			item="POP"></iref><iref
			item="IMAP"></iref></t>

			</section>
	<section title="Implementation and Operation">
		<t>A discussion of any interesting system architecture often
			bogs down when architecture and implementation are
			confused. An architecture defines the conceptual functions
			of a service, divided into discrete conceptual modules. An
			implementation of that architecture can combine or
			separate architectural components, as needed for a
			particular operational environment. For example, a
			software system that primarily performs message relaying
			is an MTA, yet it might also include MDA functionality.
			That same MTA system might be able to interface with
			non-Internet email services and thus perform both as an
			MTA and as a Gateway. </t>
		<t> Similarly, implemented modules might be configured to form
			elaborations of the architecture. An interesting example
			is a distributed MS. One portion might be a remote server
			and another might be local to the MUA. As discussed in <xref
				target="RFC1733"></xref>, there are three operational
			relationships among such MSs:</t>

		<list style="hanging">
			<t
				hangText="Online:"> The MS is remote,
				and messages are accessible only when the
				MUA is attached to the MS so that the MUA
				will re-fetch all or part of a message
				from one session to the next. </t>
			<t
				hangText="Offline:"> The MS is local to
				the User, and messages are completely
				moved from any remote store, rather than
				(also) being retained there.</t>
			<t
				hangText="Disconnected:"> An rMS and a
				uMS are kept synchronized, for all or part
				of their contents, while they are
				connected. When they are disconnected,
				mail can arrive at the rMS and the User
				can make changes to the uMS. The two
				stores are re-synchronized when they are
				reconnected.</t>
		</list>

	</section>
		</section>



	<section anchor="Mediators" title="Mediators">
	<t>Basic message transfer from Author to Recipients is
		accomplished by using an asynchronous store-and-forward
		communication infrastructure in a sequence of independent
		transmissions through some number of MTAs. A very different
		task is a sequence of postings and deliveries through
		Mediators. A Mediator forwards a message through a re&nbhy;posting
		process. The Mediator shares some functionality with basic MTA
		relaying, but has greater flexibility in both addressing and
		content than is available to MTAs. </t>

	<t>This is the core set of message information that is commonly
		set by all types of Mediators: </t>

	<list><t><list style="hanging">
		<t
			hangText="RFC5321.HELO/.EHLO:"> Set by -
			Mediator Originator</t>
		<t
			hangText="RFC3461.ENVID:"> Set by - Mediator
			Originator</t>
		<t
			hangText="RFC5321.RcptTo:"> Set by -
			Mediator Author</t>
		<t
			hangText="RFC5321.Received:"> Set by -
			Mediator Dest</t>

		<t>The Mediator can record received information
			to indicate the delivery to the original
			address and submission to the alias address.
			The trace of Received: header fields can
			include everything from original posting,
			through relaying, to final delivery. </t>
				</list></t></list>


	<t>The aspect of a Mediator that distinguishes it from any other
		MUA creating a message is that a Mediator preserves the
		integrity and tone of the original message, including the
		essential aspects of its origination information. The Mediator
		might also add commentary.</t>
	<t>Examples of MUA messages that a Mediator does not create
		include:</t><list><t>

		<list style="hanging">
			<t hangText="New message that forwards an
		existing message:">
             <vspace blankLines="1" />
	Although this action provides a basic template
		for a class of Mediators, its typical
		occurrence is not, itself, an example of a
		Mediator. The new message is viewed as being
		from the Actor that is doing the forwarding,
		rather than from the original Author.<iref
			item="actor"></iref>
            <vspace blanklines="1" />
	A new message encapsulates the original
		message and is seen as from the new
		Originator. This Mediator Originator might add
		commentary and can modify the original message
		content. Because the forwarded message is a
		component of the message sent by the new
		Originator, the new message creates a new
		dialogue. However, the final Recipient still
		sees the contained message as from the
		original Author. </t>

		<t hangText="Reply:">
             <vspace blankLines="1" />
	 When a Recipient responds to the Author of a
		message, the new message is not typically
		viewed as a forwarding of the original. Its
		focus is the new content, although it might
		contain all or part of the material from the
		original message. The earlier material is
		merely contextual and secondary. This includes
		automated replies, such as vacation
		out-of-office notices, as discussed in <xref
			target="service-mua"></xref>. </t>
	

	<t hangText="Annotation:">
        <vspace blankLines="1" />
			The integrity of the original message is
				usually preserved, but one or more comments
				about the message are added in a manner that
				distinguishes commentary from original text.
				The primary purpose of the new message is to
				provide commentary from a new Author, similar
				to a Reply.</t>
		</list></t></list>


	<t>The remainder of this section describes common examples of
		Mediators.</t>

<section
	title="Alias">
	<t>One function of an MDA is to determine the internal
		location of a mailbox in order to perform delivery. An
		Alias is a simple re&nbhy;addressing facility that provides one
		or more new Internet Mail addresses, rather than a single,
		internal one; the message continues through the transfer
		service, for delivery to one or more alternate addresses.
		Although typically implemented as part of an MDA, this
		facility is a Recipient function. It resubmits the
		message, although all handling information except the
		envelope Recipient (rfc5321.RcptTo) address is retained.
		In particular, the Return Address (rfc5321.MailFrom) is
		unchanged. <iref
			item="delivery"></iref>
		<iref
			item="envelope"></iref>
		<iref
			item="mailbox"></iref>
		<iref
			item="MDA"></iref>
		<iref
			item="Recipient"></iref>
		<iref
			item="Mail From"></iref>
		<iref
			item="Return Address"></iref></t>
	<t>What is distinctive about this forwarding mechanism is how
		closely it resembles normal MTA store-and-forward
		relaying. Its only significant difference is that it
		changes the RFC5321.RcptTo value. Because this change is
		so small, aliasing can be viewed as a part of the
		lower-level mail-relaying activity. However, this small
		change has a large semantic impact: The designated
		Recipient has chosen a new Recipient. </t>

	<list
		style="hanging" hangIndent="8">
		<t hangText="NOTE:">When the replacement
		list includes more than one address, the
		alias is increasingly likely to have
		delivery problems. Any problem reports go
		to the original Author, not the
		administrator of the alias entry. This
		makes it more difficult to resolve the
		problem, because the original Author has
		no knowledge of the Alias mechanism.<iref
		item="ADMD"></iref></t>
	</list>

	<t>Including the core set of message information listed at the
		beginning of this section, Alias typically changes: 

<iref	item="posting"></iref><iref
	item="envelope"></iref>	</t>


	<list><t><list	style="hanging">

		<t hangText="RFC5322.To/.CC/.BCC:"> Set by
			- Author
                   <vspace blankLines="1" />
		These fields retain their original
			addresses.</t>

		<t hangText="RFC5321.MailFrom:"> Set by -
			Author
                   <vspace blankLines="1" />
		The benefit of retaining the original
			MailFrom value is to ensure that an Actor
			related to the originating ADMD knows
			there has been a delivery problem. On the
			other hand, the responsibility for
			handling problems, when transiting from
			the original Recipient mailbox to the
			alias mailbox usually lies with that
			original Recipient, because the Alias
			mechanism is strictly under that
			Recipient's control. Retaining the
			original MailFrom address prevents this.

<iref	item="delivery"></iref><iref
	item="mailbox"></iref><iref
	item="actor"></iref></t>
		</list></t></list>


			</section>
	<section title="ReSender">
	<t> Also called the ReDirector, the ReSender's actions differ
		from forwarding because the Mediator "splices" a message's
		addressing information to connect the Author of the
		original message with the Recipient of the new message.
		This connection permits them to have direct exchange,
		using their normal MUA Reply functions, while also
		recording full reference information about the Recipient
		who served as a Mediator. Hence, the new Recipient sees
		the message as being from the original Author, even if the
		Mediator adds commentary. </t>
	<t>Including the core set of message information listed at the
		beginning of this section, these identities are relevant
		to a resent message:</t>

          <list><t><list style="hanging">
	<t hangText="RFC5322.From:"> Set by -
		original Author
	<vspace blankLines="1" />
           Names and addresses for the original Author
		of the message content are retained. The
		free-form (display-name) portion of the
		address might be modified to provide an
		informal reference to the ReSender. </t>

	<t hangText="RFC5322.Reply-To:"> Set by - original Author
	<vspace blankLines="1" />
	If this field is present in the original message, it is
	retained in the resent message.</t>

	<t hangText="RFC5322.Sender:"> Set by - Author's Originator
	or Mediator Originator</t>

	<t hangText="RFC5322.To/.CC/.BCC:"> Set by - original Author
	<vspace blankLines="1" />
	These fields specify the original message Recipients.</t>

	<t hangText="RFC5322.Resent-From: "> Set by - Mediator Author
        <vspace blankLines="1" />
	This address is of the original Recipient who is 
        redirecting the message. Otherwise,
	the same rules apply to the Resent-From: field as to an
        original RFC5322.From field.</t>

	<t  hangText="RFC5322.Resent-Sender:"> Set by - Mediator
	Originator
        <vspace blankLines="1" />
	The address of the Actor responsible for
		resubmitting the message. As with
		RFC5322.Sender, this field can be omitted
		when it contains the same address as
	RFC5322.Resent-From.

<iref item="actor"></iref></t>

	<t hangText="RFC5322.Resent-To/-CC/-BCC:">
	Set by - Mediator Author
       <vspace blankLines="1" />
	The addresses of the new Recipients who are
	now able to reply to the original Author.</t>

	<t hangText="RFC5321.MailFrom:"> Set by - Mediator
	Originator
       <vspace blankLines="1" />
	The Actor responsible for resubmission (RFC5322.Resent-Sender) is also
		responsible for specifying the new MailFrom address.</t>
</list></t></list>

			</section>

<section
	title="Mailing Lists">
	<t>A Mailing List receives messages as an explicit addressee
		and then re-posts them to a list of subscribed members.
		The Mailing List performs a task that can be viewed as an
		elaboration of the ReSender. In addition to sending the
		new message to a potentially large number of new
		Recipients, the Mailing List can modify content, for
		example, by deleting attachments, converting the format,
		and adding list-specific comments. Mailing Lists also
		archive messages posted by Authors. Still the message
		retains characteristics of being from the original
		Author. </t>

	<t>Including the core set of message information listed at the
		beginning of this section, these identities are relevant
		to a Mailing List processor when submitting a message:</t>

	<list><t><list style="hanging">
		<t hangText="RFC2919.List-Id:"> Set by - Mediator Author</t>

		<t hangText="RFC2369.List-*:"> Set by - Mediator Author</t>

		<t hangText="RFC5322.From:"> Set by - original Author
               <vspace blankLines="1" />
		Names and email addresses for the original
			Author of the message content are retained.</t>

		<t hangText="RFC5322.Reply-To:"> Set by - Mediator
		or original Author
                 <vspace blankLines="1" />
		Although problematic, it is common for a
		Mailing List to assign its own addresses
		to the Reply-To: header field of messages
		that it posts. This assignment is intended
		to ensure that replies go to all list
		members, rather than to only the original
		Author. As a User Actor, a Mailing List is
		the Author of the new message and can
		legitimately set the Reply-To: value. As a
		Mediator attempting to represent the
		message on behalf of its original Author,
		creating or modifying a Reply-To: field
		can be viewed as violating that Author's
		intent. When the Reply-To is modified in
		this way, a reply that is meant only for
		the original Author will instead go to the
		entire list. When the Mailing List does
		not set the field, a reply meant for the
		entire list can instead go only to the
		original Author. At best, either choice is
		a matter of group culture for the
		particular list.</t>

	<t hangText="RFC5322.Sender:"> Set by - Author Originator or
	Mediator Originator
        <vspace blankLines="1" />
	This field usually specifies the address of
	the Actor responsible for Mailing List
	operations. Mailing Lists that operate in
	a manner similar to a simple MTA Relay
	preserve as much of the original handling
	information as possible, including the
	original RFC5322.Sender field. (Note that
	this mode of operation causes the Mailing
	List to behave much like an Alias, with a
	possible difference in number of new addressees.)

<iref 	item="operations"></iref><iref
	item="actor"></iref></t>

	<t hangText="RFC5322.To/.CC:"> Set by - original Author
         <vspace blankLines="1" />
	These fields usually contain the original list of Recipient addresses.</t>
							
	<t hangText="RFC5321.MailFrom:"> Set by - Mediator Originator
        <vspace blankLines="1" />
	Because a Mailing List can modify the
	content of a message in any way, it is
	responsible for that content; that is, it
	is an Author. As such, the Return Address
	is specified by the Mailing List. Although
	it is plausible for the Mailing List to
	reuse the Return Address employed by the
	original Originator, notifications sent to
	that address after a message has been
	processed by a Mailing List could be
	problematic.</t>
	</list></t></list>

			</section>


	<section title="Gateways">
	<t>A Gateway performs the basic routing and transfer work of
		message relaying, but it also is permitted to modify
		content, structure, address, or attributes as needed to
		send the message into a messaging environment that
		operates under different standards or potentially
		incompatible policies. When a Gateway connects two
		differing messaging services, its role is easy to identify
		and understand. When it connects environments that follow
		similar technical standards, but significantly different
		administrative policies, it is easy to view a Gateway as
		merely an MTA. </t>

	<t> The critical distinction between an MTA and a Gateway is
		that a Gateway can make substantive changes to a message
		to map between the standards. In virtually all cases, this
		mapping results in some degree of semantic loss. The
		challenge of Gateway design is to minimize this loss.
		Standardized Gateways to Internet Mail are facsimile <xref
			target="RFC4143"></xref>, voicemail <xref
			target="RFC3801"></xref>, and the Multimedia
		Messaging Service (MMS) <xref target="RFC4356"></xref>.</t>

	<t>A Gateway can set any identity field available to an MUA.
		Including the core set of message information listed at
		the beginning of this section, these identities are
		typically relevant to Gateways: </t>

	<list><t><list style="hanging">
		<t hangText="RFC5322.From:"> Set by - original
		Author
         <vspace blankLines="1" />
		Names and addresses for the original Author
			of the message content are retained. As
			for all original addressing information in
			the message, the Gateway can translate
			addresses as required to continue to be
			useful in the target environment. </t>

		<t hangText="RFC5322.Reply-To:"> Set by - original Author
         <vspace blankLines="1" />
		It is best for a Gateway to retain this information,
         if it is present. The ability to perform a successful reply by a
	Recipient is a typical test of Gateway functionality.</t>

		<t hangText="RFC5322.Sender:"> Set by - Author
		Originator or Mediator Originator
        <vspace blankLines="1" />
		This field can retain the original value or
		can be set to a new address.</t>

	<t hangText="RFC5322.To/.CC/.BCC:"> Set by - original
	Recipient
       <vspace blankLines="1" />
	These fields usually retain their original addresses.</t>

	<t hangText="RFC5321.MailFrom:"> Set by - Author Originator
	or Mediator Originator
     <vspace blankLines="1" />
	The Actor responsible for handling the message can specify a new address to
	receive handling notices.

<iref item="actor"></iref></t>
							</list></t></list>
			</section>

	<section title="Boundary Filter">
	<t>To enforce security boundaries, organizations can subject
	messages to analysis for conformance with its safety
	policies. An example is detection of content classed as
	spam or a virus. A filter might alter the content to
	render it safe, such as by removing content deemed
	unacceptable. Typically, these actions add content to the
	message that records the actions. </t>
			</section>
		</section>

		<section
			title="Considerations">

	<section title="Security Considerations">
	<t> This document describes the existing Internet Mail
		architecture. It introduces no new capabilities. The
		security considerations of this deployed architecture are
		documented extensively in the technical specifications
		referenced by this document. These specifications cover
		classic security topics, such as authentication and
		privacy. 
   For example, email-transfer protocols can use standardized
   mechanisms for operation over authenticated and/or encrypted links,
   and message content has similar protection standards available.

                Examples of such mechanisms include SMTP-TLS <xref
			target="RFC3207"></xref>, SMTP-Auth <xref
			target="RFC4954"></xref>, OpenPGP <xref
			target="RFC4880"></xref>, and S/MIME <xref
			target="RFC3851"></xref>. </t>

	<t>The core of the Internet Mail architecture does not impose
		any security requirements or functions on the end-to-end
		or hop-by-hop components. For example, it does not require
		participant authentication and does not attempt to prevent
		data disclosure.</t>

	<t> Particular message attributes might expose specific
		security considerations. For example, the blind carbon
		copy feature of the architecture invites disclosure
		concerns, as discussed in Section 7.2 of <xref
			target="RFC5321"></xref> and Section 5 of <xref
			target="RFC5322"></xref>. Transport of text or
		non-text content in this architecture has security
		considerations that are discussed in <xref
			target="RFC5322"></xref>, <xref
			target="RFC2045"></xref>, <xref
			target="RFC2046"></xref>, and <xref
			target="RFC4288"></xref>; also, security
		considerations are present for some of the media types
		registered with IANA.</t>

	<t> Agents that automatically respond to email raise
		significant security considerations, as discussed in <xref
			target="RFC3834"></xref>. Gateway behaviors affect
		end-to-end security services, as discussed in <xref
			target="RFC2480"></xref>. Security considerations for
		boundary filters are discussed in <xref
			target="RFC5228"></xref>. </t>


	<t> See Section 7.1 of <xref
			target="RFC5321"></xref> for a discussion of the topic
		of origination validation. As mentioned in <xref
			target="identref"></xref>, it is common practice for
		components of this architecture to use the RFC0791.SourceAddr to make policy
		decisions <xref target="RFC2505"></xref>, although the address can be
		"spoofed". It is possible to use it without authorization.
		SMTP and Submission authentication
			(<xref target="RFC4409"></xref>, <xref
			target="RFC4954"></xref>) provide more secure
			alternatives. </t>

	<t> The discussion of trust boundaries, ADMDs, Actors, roles,
		and responsibilities in this document highlights the
		relevance and potential complexity of security factors for
		operation of an Internet Mail service. The core design of
		Internet Mail to encourage open and casual exchange of
		messages has met with scaling challenges, as the
		population of email participants has grown to include
		those with problematic practices. For example, spam, as
		defined in <xref
			target="RFC2505"></xref>, is a by-product of this
		architecture. A number of Standards Track or BCP documents
		on the subject have been issued (see <xref
			target="RFC2505"></xref>, <xref
			target="RFC5068"></xref>, and <xref
				target="RFC5235"></xref>).

<iref item="actor"></iref>
	</t>
	</section>



	<section title="Internationalization">
	<t>The core Internet email standards are based on the use of
		US-ASCII -- that is, SMTP <xref
			target="RFC5321"></xref> and IMF <xref
			target="RFC5322"></xref>, as well as their
		predecessors. They describe the transport and composition
		of messages as composed strictly of US-ASCII
		7-bit encoded characters. The standards have been incrementally enhanced
		to allow for characters outside of this limited set, while
		retaining mechanisms for backwards-compatibility. Specifically:<list
			style="symbols">
			<t>The MIME specifications (<xref
					target="RFC2045"></xref>, <xref
					target="RFC2046"></xref>, <xref
					target="RFC2047"></xref>, <xref
					target="RFC2049"></xref>) allow for the use of
				coded character sets and character-encoding
				schemes ("charsets" in MIME terminology) other
				than US-ASCII. MIME's <xref
					target="RFC2046"></xref> allows the textual
				content of a message to have a label affixed that
				specifies the charset used in that content.
				Equally, MIME's <xref target="RFC2047"></xref> allows the textual
				content of certain header fields in a message to
				be similarly labeled. However, since messages
				might be transported over SMTP implementations
				only capable of transporting 7-bit encoded
				characters, MIME's <xref target="RFC2045"></xref> also provides for
				"content transfer encoding" so that characters of
				other charsets can be re-encoded as an overlay to
				US-ASCII. </t>

			<t>MIME's <xref target="RFC2045"></xref> allows for the
				textual content of a message to be in an 8-bit
				character-encoding scheme. In order to transport
				these without re-encoding them, the SMTP
				specification supports an option <xref
					target="RFC1652"></xref> that permits the
				transport of such textual 

<?rfc needLines="4" ?>
                                content. However, the <xref
					target="RFC1652"></xref> option does not
				address the use of 8-bit content in message header
				fields, and therefore <xref
					target="RFC2047"></xref> encoding is still
				required for those. </t>
			<t>A series of experimental protocols on Email Address
				Internationalization (EAI) have been released that
				extend SMTP and IMF to allow for
				8-bit encoded characters to appear in addresses and other
				information throughout the header fields of
				messages. <xref
					target="RFC5335"></xref> specifies the format
				of such message header fields (which encode the
				characters in UTF-8), and <xref
					target="RFC5336"></xref> specifies an SMTP
				option for the transport of these
				messages. </t>

			<t>MIME's <xref	target="RFC2045"></xref> and <xref
					target="RFC2046"></xref> allow for the
				transport of true multimedia material; such
				material enables internationalization because it
				is not restricted to any particular language or
				locale. </t>
			<t>The formats for Delivery Status Notifications (DSNs
				&mdash; <xref
					target="RFC3462"></xref>, <xref
					target="RFC3463"></xref>, <xref
					target="RFC3464"></xref>) and Message
				Disposition Notifications (MDNs &mdash; <xref
					target="RFC3798"></xref>) include both a
				structured and unstructured representation of the
				notification. In the event that the unstructured
				representation is in the wrong language or is
				otherwise unsuitable for use, this allows an MUA
				to construct its own appropriately localized
				representation of notification for display to the
				User. </t>
			<t>POP and IMAP have no difficulties with handling
				MIME messages, including ones containing 8bit, and
				therefore are not a source of internationalization issues. 

<iref	item="POP"></iref><iref
	item="IMAP"></iref><iref
	item="MIME"></iref><iref
	item="EAI"></iref><iref
	item="IMF"></iref><iref
	item="SMTP"></iref><iref
	item="charset"></iref><iref
	item="7-bit"></iref><iref
	item="encoding"></iref><iref
	item="DSN"></iref><iref
	item="MDN"></iref></t>
		</list></t>

	<t>Hence, the use of UTF-8 is fully established in existing
		Internet Mail. However, support for long-standing encoding
		forms is retained and is still used. </t>

			</section>
		</section>
	</middle>


	<back>

		<references
			title="Normative References">


<?rfc include="reference.RFC.0791" ?>
<?rfc include="reference.RFC.1034" ?>
<?rfc include="reference.RFC.1035" ?>
<?rfc include="reference.RFC.1939" ?>
<?rfc include="reference.RFC.2045" ?>
<?rfc include="reference.RFC.2046" ?>
<?rfc include="reference.RFC.2047" ?>
<?rfc include="reference.RFC.2049" ?>
<?rfc include="reference.RFC.2181" ?>
<?rfc include="reference.RFC.2369" ?>
<?rfc include="reference.RFC.2645" ?>
<?rfc include="reference.RFC.2919" ?>
<?rfc include="reference.RFC.3192" ?>
<?rfc include="reference.RFC.3297" ?>
<?rfc include="reference.RFC.3458" ?>
<?rfc include="reference.RFC.3461" ?>
<?rfc include="reference.RFC.3462" ?>
<?rfc include="reference.RFC.3463" ?>
<?rfc include="reference.RFC.3501" ?>
<?rfc include="reference.RFC.3798" ?>
<?rfc include="reference.RFC.3834" ?>
<?rfc include="reference.RFC.3864" ?>
<?rfc include="reference.RFC.4021" ?>
<?rfc include="reference.RFC.4288" ?>
<?rfc include="reference.RFC.4289" ?>
<?rfc include="reference.RFC.4409" ?>
<?rfc include="reference.RFC.4550" ?>
<?rfc include="reference.RFC.5228" ?>
<?rfc include="reference.RFC.5248" ?>
<?rfc include="reference.RFC.5321" ?>
<?rfc include="reference.RFC.5322" ?>
</references>
<references title="Informative References">

<?rfc include="reference.RFC.0733" ?>
<?rfc include="reference.RFC.0821" ?>
<?rfc include="reference.RFC.0822" ?>
<?rfc include="reference.RFC.1506" ?>
<?rfc include="reference.RFC.1652" ?>
<?rfc include="reference.RFC.1733" ?>
<?rfc include="reference.RFC.1767" ?>
<?rfc include="reference.RFC.1985" ?>
<?rfc include="reference.RFC.2033" ?>
<?rfc include="reference.RFC.2142" ?>
<?rfc include="reference.RFC.2442" ?>
<?rfc include="reference.RFC.2480" ?>
<?rfc include="reference.RFC.2505" ?>
<?rfc include="reference.RFC.2821" ?>
<?rfc include="reference.RFC.2822" ?>
<?rfc include="reference.RFC.3207" ?>
<?rfc include="reference.RFC.3464" ?>
<?rfc include="reference.RFC.5235" ?>
<?rfc include="reference.RFC.3801" ?>
<?rfc include="reference.RFC.3851" ?>
<?rfc include="reference.RFC.3885" ?>
<?rfc include="reference.RFC.4142" ?>
<?rfc include="reference.RFC.4143" ?>
<?rfc include="reference.RFC.4356" ?>
<?rfc include="reference.RFC.4880" ?>
<?rfc include="reference.RFC.4954" ?>
<?rfc include="reference.RFC.5068" ?>
<?rfc include="reference.RFC.5335" ?>
<?rfc include="reference.RFC.5336" ?>


<reference
				anchor="Tussle">
				<front>
					<title>Tussle in Cyberspace: Defining Tomorrow's Internet</title>
					<author
						fullname="David D. Clark"
						initials="D"
						surname="Clark">
						<organization>MIT Lab for Computer Science</organization>
						<address>
                     <email>ddc@lcs.mit.edu</email>
                  </address>
					</author>
					<author
						fullname="John Wroclawski"
						initials="J"
						surname="Wroclawski">
						<organization>MIT Lab for Computer Science</organization>
						<address>
                     <email>jtw@lcs.mit.edu</email>
                  </address>
					</author>
					<author
						fullname="Karen R. Sollins"
						initials="K"
						surname="Sollins">
						<organization></organization>
						<address>
                     <email>sollins@lcs.mit.edu</email>
                  </address>
					</author>
					<author
						fullname="Robert Braden"
						initials="R"
						surname="Braden">
						<organization>USC Information Sciences Institute</organization>
						<address>
                     <email>braden@isi.edu</email>
                  </address>
					</author>
					<date
						year="2002"></date>
					<note
						title="">
						<t></t>
					</note>
				</front>
				<seriesInfo
					name="ACM"
					value="SIGCOMM"></seriesInfo>
			</reference>

		</references>

		<section
			title="Acknowledgments">
			<t>This work began in 2004 and has evolved through numerous rounds
				of community review; it derives from a section in an early
				version of <xref
					target="RFC5068"></xref>. Over its 5 years of development,
				the document has gone through 14 incremental versions, with
				vigorous community review that produced many substantive
				changes. Review was performed in the IETF and other email
				technical venues. Although not a formal activity of the IETF,
				issues with the document's contents were resolved using the
				classic style of IETF community open, group decision-making.
				The document is already cited in other
				work, such as in IMAP and Sieve
				specifications and in academic
				classwork. The step of standardizing is useful to provide a solid and stable
				reference to the Internet's
				now-complex email service. </t>

			<t>Details of the Originator Actor role was greatly clarified
				during discussions in the IETF's Marid working group. <iref
					item="actor"></iref></t>

			<t>Graham Klyne, Pete Resnick, and Steve Atkins provided thoughtful
				insight on the framework and details of the original drafts,
				as did Chris Newman for the final versions, while also serving
				as cognizant Area Director for the document. Tony Hansen
				served as document shepherd through
				the IETF process.</t>

			<t>Later reviews and suggestions were provided by Eric Allman,
				Nathaniel Borenstein, Ed Bradford, Cyrus Daboo, Frank
				Ellermann, Tony Finch, Ned Freed, Eric Hall, Willemien
				Hoogendoorn, Brad Knowles, John Leslie, Bruce Valdis
				Kletnieks, Mark E. Mallett, David MacQuigg, Alexey Melnikov,
				der Mouse, 
                                S. Moonesamy, Daryl Odnert, Rahmat M.
				Samik-Ibrahim, Marshall Rose, Hector Santos, Jochen Topf, Greg
				Vaudreuil, Patrick Cain, Paul Hoffman, Vijay Gurbani, and Hans
				Lachman. </t>

			<t>Diligent early proof-reading was performed by Bruce Lilly.
				Diligent professional technical editing was provided by Susan
				Hunziker.</t>

			<t>The final stages of development for this document were guided
				by a design team comprising Alexey Melnikov, Pete Resnick,
				Carl S. Gutekunst, Jeff Macdonald, Randall Gellens, Tony
				Hansen, and Tony Finch. Pete Resnick developed the final
				version of the section on internationalization.</t>

		</section>
	</back>

</rfc>
