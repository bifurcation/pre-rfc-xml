<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  ]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>
<rfc category="std" ipr="trust200902" number="8529"
     submissionType="IETF" consensus="yes">

<front>
<title abbrev="YANG NIs">YANG Data Model for Network Instances</title>
    <author initials='L.' surname="Berger" fullname='Lou Berger'>
     <organization>LabN Consulting, L.L.C.</organization>
     <address>
       <email>lberger@labn.net</email>
    </address>
    </author>
   <author initials='C.' surname="Hopps" fullname='Christian Hopps'>
    <organization>LabN Consulting, L.L.C.</organization>
     <address>
       <email>chopps@chopps.org</email>
    </address>
    </author>
   <author initials='A.' surname="Lindem" fullname='Acee Lindem'>
    <organization>Cisco Systems</organization>
    <address>
      <postal>
        <street>301 Midenhall Way</street>
        <city>Cary</city> <region>NC</region>
        <country>United States of America</country>
        <code>27513</code>
       </postal>
       <email>acee@cisco.com</email>
    </address>
    </author>
   <author initials='D.' surname="Bogdanovic" fullname='Dean Bogdanovic'>
    <organization>Volta Networks</organization>
     <address>
       <email>ivandean@gmail.com</email>
    </address>
    </author>
   <author initials='X.' surname="Liu" fullname='Xufeng Liu'>
    <organization>Volta Networks</organization>
     <address>
       <email>xufeng.liu.ietf@gmail.com</email>
    </address>
    </author>

  <date month="February" year="2019"/>
<keyword>VRF, VSI, VPN</keyword>


  <abstract>
<t>
  This document defines a network instance module. This module
  can be used to manage the
  virtual resource partitioning that may be present on a
  network device. Examples of
  common industry terms for virtual resource partitioning are VPN
  Routing and Forwarding (VRF) instances and Virtual Switch Instances
  (VSIs).
</t>
<t>
The YANG data model in this document conforms to the Network Management
Datastore Architecture (NMDA) defined in RFC 8342.
</t>

</abstract>
</front>

<middle>
<section anchor="sec-1" title="Introduction">
<t>
   This document defines the second of two new modules that are defined
   to support the configuration and operation of network devices that
   allow for the partitioning of resources from both, or either,
   management and networking perspectives.  Both leverage the
   YANG functionality enabled by YANG Schema Mount <xref
   target="RFC8528"/>.
</t>
<t>
The YANG data model in this document conforms to the Network Management
Datastore Architecture defined in 
<xref target="RFC8342"/>.

</t>
<t>
   The first form of resource partitioning
   provides a logical partitioning of a network device where each
   partition is separately managed as essentially an independent
   network element that is "hosted" by the base network device.
   These hosted network elements are referred to as logical
   network elements, or LNEs, and are supported by the
   logical-network-element module defined in <xref target="RFC8530"/>.
   That module is used to identify LNEs and associate resources from the
   network device with each LNE.  LNEs themselves are represented
   in YANG as independent network devices; each is accessed
   independently.
   Examples of vendor terminology for an LNE include logical
   system or logical router and virtual switch, chassis, or fabric.
</t>
<t>
   The second form, which is defined in this document, provides
   support for what are commonly referred to as VPN Routing and
   Forwarding (VRF) instances as well as Virtual Switch Instances
   (VSI); see <xref target="RFC4026"/> and <xref target="RFC4664"/>.  In this form of resource
   partitioning, multiple control-plane and forwarding/bridging
   instances are provided by and managed through a single (physical or
   logical) network device.  This form of resource partitioning is
   referred to as a Network Instance (NI) and is supported by the
   network instance module defined below.  Configuration and
   operation of each network instance is always via the network
   device and the network instance module.
</t>
<t>
   One notable difference between the LNE model and the NI
   model is that the NI model provides a framework for VRF and VSI
   management.  This document envisions the separate definition of
   models specific to VRF
   and VSI -- i.e., L3 and L2 VPN -- technology.  An example
   of such can be found in the emerging L3VPN model defined in <xref
   target="YANG-L3VPN"/> and the examples discussed below.
</t>

<section title="Terminology" anchor="sec-definitions">
        <t>
    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
    "MAY", and "OPTIONAL" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
  <t>
    Readers are expected to be familiar with terms and concepts of
    YANG <xref target="RFC7950"/> and YANG Schema Mount <xref
    target="RFC8528"/>.
  </t>
  <t>
    This document uses the graphical representation of data models
    defined in <xref target="RFC8340"/>.
  </t>

</section>
</section>
<section anchor="sec-2" title="Overview">
                                  <t>
   In this document, we consider network devices that support protocols
   and functions defined within the IETF -- e.g., routers, firewalls, 
   and hosts.
   Such devices may be physical or virtual, e.g., a
   classic router with custom hardware or one residing within a
   server-based virtual machine implementing a virtual network function
   (VNF). Each device may subdivide their resources into logical
   network elements (LNEs), each of which provides a managed logical
   device.  Examples of vendor terminology for an LNE include logical
   system or logical router and virtual switch, chassis, or fabric. Each
   LNE may also support VRF and VSI functions, which are referred to below as
   network instances (NIs). This breakdown is represented in
   Figure 1.
</t>
<t>
<figure>
<artwork>

           ,''''''''''''''''''''''''''''''''''''''''''''''`.
           |      Network Device (Physical or Virtual)     |
           | .....................   ..................... |
           | :  Logical Network  :   :  Logical Network  : |
           | :      Element      :   :      Element      : |
           | :+-----+-----+-----+:   :+-----+-----+-----+: |
           | :| Net | Net | Net |:   :| Net | Net | Net |: |
           | :|Inst.|Inst.|Inst.|:   :|Inst.|Inst.|Inst.|: |
           | :+-----+-----+-----+:   :+-----+-----+-----+: |
           | :  | |   | |   | |  :   :  | |   | |   | |  : |
           | :..|.|...|.|...|.|..:   :..|.|...|.|...|.|..: |
           |    | |   | |   | |         | |   | |   | |    |
            `'''|'|'''|'|'''|'|'''''''''|'|'''|'|'''|'|'''''
                | |   | |   | |         | |   | |   | |
                   Interfaces              Interfaces

                 Figure 1: Module Element Relationships
</artwork>
</figure>
</t>

<t>
   A model for LNEs is described in <xref target="RFC8530"/>, and
   the model for NIs is covered in <xref target="sec-NI"/> of this document.
</t>
<t>
   The current interface management model <xref target="RFC8343"/>
   is impacted by the definition of LNEs and
   NIs.  This document and <xref target="RFC8530"/>
   define augmentations to the interface module to support LNEs
   and NIs.
</t>
<t>
  The network instance model supports the configuration of VRFs and
  VSIs.  Each instance is supported by information that relates to the
  device -- for example, the route target used when advertising VRF routes
  via the mechanisms defined in <xref target="RFC4364"/>, and
  information that relates to the internal operation of the NI, such as
  for routing protocols <xref target="RFC8349"/> 
  and OSPF <xref  target="YANG-OSPF"/>.  This document defines the
  network instance module that provides a basis for the management of
  both types of information.
</t>
<t>
  NI information that relates to the device, including the assignment of
  interfaces to NIs, is defined as part of this document. The defined
  module also provides a placeholder for the definition of
  NI-technology-specific information both at the device level and for NI
  internal
  operation.  Information related to NI internal operation is supported
  via schema mount <xref target="RFC8528"/> and
  mounting appropriate modules under the mount point.  Well-known mount 
  points are defined for L3VPN, L2VPN, and L2+L3VPN NI types.
</t>
</section>

<section anchor="sec-NI" title="Network Instances">
<t>
   The network instance container is used to represent VRFs and VSIs.  VRFs and VSIs are commonly used to isolate
   routing and switching domains -- for example, to create virtual private
   networks, each with their own active protocols and routing/switching
   policies.  The model supports both core/provider and virtual
   instances.  Core/provider instance information is accessible at the
   top level of the server, while virtual instance information is
   accessible under the root schema mount points.
</t>
<t>
<figure>
<artwork>
module: ietf-network-instance
  +--rw network-instances
     +--rw network-instance* [name]
        +--rw name           string
        +--rw enabled?       boolean
        +--rw description?   string
        +--rw (ni-type)?
        +--rw (root-type)
           +--:(vrf-root)
           |  +--mp vrf-root
           +--:(vsi-root)
           |  +--mp vsi-root
           +--:(vv-root)
              +--mp vv-root
augment /if:interfaces/if:interface:
  +--rw bind-ni-name?   -> /network-instances/network-instance/name
augment /if:interfaces/if:interface/ip:ipv4:
  +--rw bind-ni-name?   -> /network-instances/network-instance/name
augment /if:interfaces/if:interface/ip:ipv6:
  +--rw bind-ni-name?   -> /network-instances/network-instance/name

notifications:
  +---n bind-ni-name-failed
     +--ro name          -> /if:interfaces/interface/name
     +--ro interface
     |  +--ro bind-ni-name?
     |                  -> /if:interfaces/interface/ni:bind-ni-name
     +--ro ipv4
     |  +--ro bind-ni-name?
     |          -> /if:interfaces/interface/ip:ipv4/ni:bind-ni-name
     +--ro ipv6
     |  +--ro bind-ni-name?
     |          -> /if:interfaces/interface/ip:ipv6/ni:bind-ni-name
     +--ro error-info?   string
</artwork>
</figure>
</t>
<t>
   A network instance is identified by a
   "name" string.  This string is used both as
   an index within the network instance module and to associate
   resources with a network instance, as shown above in the
   interface augmentation. The ni-type and root-type choice statements are used to 
   support different types of L2 and L3 VPN technologies.
   The bind-ni-name-failed notification is used in certain failure cases.
</t>

<section anchor="sec-2.nit" title="NI Types and Mount Points">

  <t>
    The network instance module is structured to facilitate the
    definition of information models for specific types of VRFs and VSIs
    using augmentations. For example, the information needed to support
    L2VPN, such as VPLS and EVPN, are likely to be quite different.

    Example models under development that could be restructured to take
    advantage on NIs include models for L3VPNs <xref
    target="YANG-L3VPN"/> and L2VPNs <xref
    target="YANG-L2VPN"/>.
  </t>
  <t>
    Documents defining new YANG data models for the support of specific types
    of network instances should augment the network instance module.
    The basic structure that should be used for such augmentations
    includes a case statement with containers for configuration and
    state data and, when needed, a type-specific mount point.
    Generally, NI types are expected to not need to define type-specific
    mount points but rather reuse one of the well-known mount points, as
    defined in the next section. The following is an example type-specific augmentation:
  </t>
  <t>
    <figure>
      <artwork>
 augment "/ni:network-instances/ni:network-instance/ni:ni-type" {
   case l3vpn {
     container l3vpn {
         ...
     }
     container l3vpn-state {
         ...
     }
   }
 }
      </artwork>
    </figure>
  </t>
  <section anchor="sec-2.nit.stdt" title="Well-Known Mount Points">
    <t>
      YANG Schema Mount <xref target="RFC8528"/>
      identifies mount points by name within a module.  This definition
      allows for the definition of mount points whose schema can be
      shared across NI types. As discussed above, ni&#8209;types largely
      differ in the configuration information needed in the
      core/top-level instance to support the NI, rather than in the
      information
      represented within an NI.  This allows the use of shared mount
      points across certain NI types.
    </t>
    <t>
      The expectation is that there are actually very few different
      schemas that need to be defined to support NIs for an
      implementation. In particular, it is expected that the following
      three forms of NI schema are needed, and each can be defined with
      a well-known mount point that can be reused by future modules
      defining NI types.
    </t>
    <t>
      The three well-known mount points are:
      <list style="hanging">
        <t hangText="vrf-root"><vspace blankLines="0"/>
        vrf-root is intended for use with L3VPN-type NI types.
        </t>
        <t hangText="vsi-root"><vspace blankLines="0"/>
        vsi-root is intended for use with L2VPN-type Ni types.
        </t>
        <t hangText="vv-root"><vspace blankLines="0"/>
        vv-root is intended for use with NI types that simultaneously
        support L2VPN bridging and L3VPN routing capabilities.
        </t>
      </list>
    </t>
    <t>
      Future model definitions should use the above mount points
      whenever possible.  When a well-known mount point isn't
      appropriate, a model may define a type-specific mount point via
      augmentation.
    </t>
    </section>
  <section anchor="sec-2.nit.ex" title="NI Type Example">
    <t>
      The following is an example of an L3VPN VRF using a hypothetical
      augmentation to the network instance schema defined in <xref
      target="YANG-L3VPN"/>. More detailed examples can be
      found in <xref target="sec-examples"/>.
    </t>
    <t>
      <figure>
        <artwork>
module: ietf-network-instance
  +--rw network-instances
     +--rw network-instance* [name]
        +--rw name           string
        +--rw enabled?       boolean
        +--rw description?   string
        +--rw (ni-type)?
        |  +--:(l3vpn)
        |     +--rw l3vpn:l3vpn
        |     |  ... // config data
        |     +--ro l3vpn:l3vpn-state
        |     |  ... // state data
        +--rw (root-type)
           +--:(vrf-root)
              +--mp vrf-root
                 +--rw rt:routing/
                 |  +--rw router-id?                 yang:dotted-quad
                 |  +--rw control-plane-protocols
                 |     +--rw control-plane-protocol* [type name]
                 |     +--rw ospf:ospf
                 |          +--rw area* [area-id]
                 |             +--rw interfaces
                 |                +--rw interface* [name]
                 |                   +--rw name if:interface-ref
                 |                   +--rw cost?   uint16
                 +--ro if:interfaces@
                 |  ...
        </artwork>
      </figure>
    </t>
    <t>
      This shows YANG Routing Management <xref target="RFC8349"/>
      and YANG OSPF <xref target="YANG-OSPF"/> as mounted modules.
      The mounted modules can reference interface information via a
      parent-reference to the containers defined in <xref
      target="RFC8343"/>.
    </t>
  </section>
</section>
<section anchor="sec-2.int" title="NIs and Interfaces">
<t>
   Interfaces are a crucial part of any network device's
   configuration and operational state.  They generally include a
   combination of raw physical interfaces, link-layer interfaces,
   addressing configuration, and logical interfaces that may not
   be tied to any physical interface.  Several system services
   and Layer 2 and Layer 3 protocols may also associate
   configuration or operational state data with different types of
   interfaces (these relationships are not shown for simplicity).
   The interface management model is defined by <xref target="RFC8343"/>.
</t>
<t>
   As shown below, the network instance module augments the existing
   interface management model by adding a name that is used on
   interface or sub-interface types to identify an associated network
   instance.  Similarly, this name is also added for IPv4 and IPv6
   types, as defined in <xref target="RFC8344"/>.
</t>
<t>
   The following is an example of envisioned usage.  The
   interfaces container includes a number of commonly used
   components as examples:
</t>
<t>
<figure>
  <artwork>
module: ietf-interfaces
   +--rw interfaces
   |  +--rw interface* [name]
   |     +--rw name                        string
   |     +--rw ip:ipv4!
   |     |  +--rw ip:enabled?                      boolean
   |     |  +--rw ip:forwarding?                   boolean
   |     |  +--rw ip:mtu?                          uint16
   |     |  +--rw ip:address* [ip]
   |     |  |  +--rw ip:ip               inet:ipv4-address-no-zone
   |     |  |  +--rw (ip:subnet)
   |     |  |     +--:(ip:prefix-length)
   |     |  |     |  +--rw ip:prefix-length?   uint8
   |     |  |     +--:(ip:netmask)
   |     |  |        +--rw ip:netmask?         yang:dotted-quad
   |     |  +--rw ip:neighbor* [ip]
   |     |  |  +--rw ip:ip                  inet:ipv4-address-no-zone
   |     |  |  +--rw ip:link-layer-address yang:phys-address
   |     |  +--rw ni:bind-network-instance-name?   string
   |     +--rw ni:bind-network-instance-name?   string
</artwork>
</figure>
</t>
<t>
   The "ietf-interfaces" module <xref target="RFC8343"/> is
   structured to include all interfaces in a flat list, without
   regard to virtual instances (e.g., VRFs) supported
   on the device.  The
   bind&#8209;network-instance-name leaf provides the association
   between an interface and its associated NI (e.g., VRF
   or VSI).  Note that as currently
   defined, to assign an interface to both an LNE and an NI, the interface
   would first be assigned to the LNE using the mechanisms defined in
   <xref target="RFC8530"/>
   and then, within that LNE's interface module, the LNE's representation
   of that interface would be assigned to an NI.
</t>
</section>


<section anchor="sec-NI.2" title="Network Instance Management">
<t>
   Modules that may be used to
   represent network instance
   information will be available under the "root" mount point specific
   to the ni&#8209;type.  The "shared-schema" method defined in the "ietf-yang-schema-mount" module
   <xref target="RFC8528"/>
   MUST be used to identify
   accessible modules.
   A future version of this document could relax this requirement.
   Mounted modules SHOULD be defined with
   access, via the appropriate schema mount parent-references <xref
   target="RFC8528"/>, to
   device resources such as interfaces. An implementation MAY choose to
   restrict parent-referenced information to information related to a
   specific instance. For example, it might only allow references to interfaces that
   have a "bind-network-instance-name" that is identical to the
   instance's "name".
</t>

<t>
    All modules that represent control-plane and data-plane
    information may be present at the "root" mount point
    and accessible via paths modified per
    <xref target="RFC8528"/>.  The list of available
    modules is expected to be implementation dependent, as is the
    method used by an implementation to support NIs.
</t>

<t>
  For example, the following could be used to define the data
  organization of the example NI shown in <xref target="sec-2.nit.ex"/>:
</t>
<t>
  <figure>
    <artwork>
  "ietf-yang-schema-mount:schema-mounts": {
    "mount-point": [
      {
        "module": "ietf-network-instance",
        "label": "vrf-root",
        "shared-schema": {
          "parent-reference": [
            "/*[namespace-uri() = 'urn:ietf:...:ietf-interfaces']"
          ]
        }
      }
    ]
  }
    </artwork>
  </figure>
</t>
<t>
  Module data identified according to the ietf-yang-schema-mount module
  will be instantiated under the
  mount point identified under "mount&#8209;point".  These modules will be
  able to reference information for nodes belonging to top-level modules
  that are identified under "parent-reference".  Parent-referenced
  information is available to clients via their top-level paths only
  and not under the associated mount point.
</t>
<t>
  To allow a client to understand the previously mentioned instance
  restrictions on parent-referenced information, an implementation MAY
  represent such restrictions in the "parent-reference" leaf-list. For
  example:
  <figure>
    <artwork>
    "namespace": [
      {
        "prefix": "if",
        "uri": "urn:ietf:params:xml:ns:yang:ietf-interfaces"
      },
      {
        "prefix": "ni",
        "uri": "urn:ietf:params:xml:ns:yang:ietf-network-instance"
      }
    ],
    "mount-point": [
      {
        "module": "ietf-network-instance",
        "label": "vrf-root",
        "shared-schema": {
          "parent-reference": [
            "/if:interfaces/if:interface
               [ni:bind-network-instance-name = current()/../ni:name]",
            "/if:interfaces/if:interface/ip:ipv4
               [ni:bind-network-instance-name = current()/../ni:name]",
            "/if:interfaces/if:interface/ip:ipv6
               [ni:bind-network-instance-name = current()/../ni:name]"
          ]
        }
      }
    ],
    </artwork>
  </figure>
</t>
<t>The same such "parent-reference" restrictions for non-NMDA
implementations can be represented based on <xref target="RFC8343"/> 
and <xref target="RFC8344"/> as: 
  <figure>
    <artwork>
    "namespace": [
      {
        "prefix": "if",
        "uri": "urn:ietf:params:xml:ns:yang:ietf-interfaces"
      },
      {
        "prefix": "ni",
        "uri": "urn:ietf:params:xml:ns:yang:ietf-network-instance"
      }
    ],
    "mount-point": [
      {
        "module": "ietf-network-instance",
        "label": "vrf-root",
        "shared-schema": {
          "parent-reference": [
            "/if:interfaces/if:interface
               [ni:bind-network-instance-name = current()/../ni:name]",
            "/if:interfaces-state/if:interface
               [if:name = /if:interfaces/if:interface
                 [ni:bind-ni-name = current()/../ni:name]/if:name]",
            "/if:interfaces/if:interface/ip:ipv4
               [ni:bind-network-instance-name = current()/../ni:name]",
            "/if:interfaces-state/if:interface/ip:ipv4
               [if:name = /if:interfaces/if:interface/ip:ipv4
                 [ni:bind-ni-name = current()/../ni:name]/if:name]",
            "/if:interfaces/if:interface/ip:ipv6
               [ni:bind-network-instance-name = current()/../ni:name]",
            "/if:interfaces-state/if:interface/ip:ipv6
               [if:name = /if:interfaces/if:interface/ip:ipv6
                 [ni:bind-ni-name = current()/../ni:name]/if:name]"
          ]
        }
      }
    ],
    </artwork>
  </figure>
</t>
</section>

<section anchor="sec-NI.3" title="  Network Instance Instantiation">
  <t>
    Network instances may be controlled by clients using existing list
    operations.  When a list entry is created, a new instance is
    instantiated. The models mounted under an NI root are expected to be
    dependent on the server implementation.  When a list entry is
    deleted, an existing network instance is destroyed. For more
    information, see Section 7.8.6 of <xref target="RFC7950"/>.
  </t>
  <t>
    Once instantiated, host network device resources can be
    associated with the new NI.  As previously mentioned, this
    document augments ietf-interfaces with the bind-ni-name leaf
    to support such associations for interfaces.  When a
    bind-ni-name is set to a valid NI name, an implementation
    MUST take whatever steps are internally necessary to assign
    the interface to the NI or provide an error message (defined
    below) with an indication of why the assignment failed.  It is
    possible for the assignment to fail while processing the 
    set operation or after asynchronous processing.  Error 
    notification in the latter case is supported via a notification.
  </t>
</section>
</section>
<section anchor="sec-4" title="Security Considerations">

<!-- Begin DNE text -->
  <t>The YANG modules specified in this document define a schema for data that 
     is designed to be accessed via network
     management protocols such as NETCONF <xref target="RFC6241"/> or
     RESTCONF <xref target="RFC8040"/>. The lowest NETCONF layer is the secure transport
     layer, and the mandatory-to-implement secure transport is Secure Shell (SSH)
     <xref target="RFC6242"/>. The lowest RESTCONF layer is HTTPS, and the
     mandatory-to-implement secure transport is TLS <xref target="RFC8446"/>.</t>

 <t>
The Network Configuration Access Control Model (NACM) <xref target="RFC8341"/> provides
the means to restrict access for particular NETCONF or RESTCONF users to
a preconfigured subset of all available NETCONF or RESTCONF protocol
operations and content. 
</t>
<!-- End DNE text -->
  <t>
    There are two different sets of security considerations to consider
    in the context of this document.  One set is security related to
    information contained within mounted modules.  The security
    considerations for mounted modules are not substantively changed
    based on the information being accessible within the context of an
    NI.  For example, when considering the modules defined in <xref
    target="RFC8349"/>, the security considerations
    identified in that  document are equally applicable, whether those 
    modules are accessed at a server's root or under an NI instance's
    root node.
  </t>
  <t>
    The second area for consideration is information contained in the NI
    module itself.  NI information represents network configuration and
    route distribution policy information. As such, the security of this
    information is important, but it is fundamentally no different than
    any other interface or routing configuration information that has
    already been covered in <xref target="RFC8343"/> 
    and <xref target="RFC8349"/>.
  </t>
  <t>The vulnerable "config true" parameters and subtrees are the
  following:
  <list style="hanging">
    <t hangText="/network-instances/network-instance:">
      This list specifies the network instances and the related control
      plane protocols configured on a device.
    </t>
    <t hangText="/if:interfaces/if:interface/*/bind-network-instance-name:">
      This leaf indicates the NI instance to which an interface is
      assigned.
    </t>
  </list>
  Unauthorized access to any of these lists can adversely affect the
  routing subsystem of both the local device and the network. This
  may lead to network malfunctions, delivery of packets to
  inappropriate destinations, and other problems.
  </t>
</section>

<section anchor="sec-5" title="  IANA Considerations">
  <t>
    This document registers a URI in the "IETF XML Registry" <xref
    target="RFC3688"/>.  
  </t>
  <figure>
    <artwork><![CDATA[
     URI: urn:ietf:params:xml:ns:yang:ietf-network-instance

     Registrant Contact: The IESG.

     XML: N/A, the requested URI is an XML namespace.
     ]]></artwork>
  </figure>
  <t>
    This document registers a YANG module in the "YANG Module Names"
    registry <xref target="RFC6020"/>.
  </t>
  <t>
  <figure>
    <artwork><![CDATA[
  name:        ietf-network-instance
  namespace:   urn:ietf:params:xml:ns:yang:ietf-network-instance
  prefix:      ni
  reference:   RFC 8529
  ]]></artwork>
  </figure>
  </t>
</section>

<section anchor="sec-6.3" title="  Network Instance Model">
<t>
   The structure of the model defined in this document is described
   by the YANG module below.
</t>

<t>
<figure>
<artwork><![CDATA[
<CODE BEGINS> file "ietf-network-instance@2019-01-21.yang"
module ietf-network-instance {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-network-instance";
  prefix ni;

  // import some basic types

  import ietf-interfaces {
    prefix if;
    reference
      "RFC 8343: A YANG Data Model for Interface Management";
  }
  import ietf-ip {
    prefix ip;
    reference
      "RFC 8344: A YANG Data Model for IP Management";
  }
  import ietf-yang-schema-mount {
    prefix yangmnt;
    reference 
      "RFC 8528: YANG Schema Mount";
  }

  organization
    "IETF Routing Area (rtgwg) Working Group";
  contact
    "WG Web:   <http://tools.ietf.org/wg/rtgwg/>
     WG List:  <mailto:rtgwg@ietf.org>

     Author:   Lou Berger
               <mailto:lberger@labn.net>
     Author:   Christian Hopps
               <mailto:chopps@chopps.org>
     Author:   Acee Lindem
               <mailto:acee@cisco.com>
     Author:   Dean Bogdanovic
               <mailto:ivandean@gmail.com>";
  description
    "This module is used to support multiple network instances
     within a single physical or virtual device.  Network
     instances are commonly known as VRFs (VPN Routing and 
     Forwarding) and VSIs (Virtual Switching Instances).
 
     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 
     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 
     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document 
     are to be interpreted as described in BCP 14 (RFC 2119) 
     (RFC 8174) when, and only when, they appear in all capitals, 
      as shown here.

     Copyright (c) 2019 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD
     License set forth in Section 4.c of the IETF Trust's Legal
     Provisions Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 8529; see
     the RFC itself for full legal notices.";

  revision 2019-01-21 {
    description
      "Initial revision.";
    reference 
      "RFC 8529";
  }

  // top-level device definition statements

  container network-instances {
    description
      "Network instances, each of which consists of
       VRFs and/or VSIs.";
    reference
      "RFC 8349: A YANG Data Model for Routing Management";
    list network-instance {
      key "name";
      description
        "List of network instances.";
      leaf name {
        type string;
        mandatory true;
        description
          "device-scoped identifier for the network
           instance.";
      }
      leaf enabled {
        type boolean;
        default "true";
        description
          "Flag indicating whether or not the network
           instance is enabled.";
      }
      leaf description {
        type string;
        description
          "Description of the network instance
           and its intended purpose.";
      }
      choice ni-type {
        description
          "This node serves as an anchor point for different types
           of network instances.  Each 'case' is expected to
           differ in terms of the information needed in the
           parent/core to support the NI and may differ in their
           mounted-schema definition.  When the mounted schema is
           not expected to be the same for a specific type of NI,
           a mount point should be defined.";
      }
      choice root-type {
        mandatory true;
        description
          "Well-known mount points.";
        container vrf-root {
          description
            "Container for mount point.";
          yangmnt:mount-point "vrf-root" {
            description
              "Root for L3VPN-type models.  This will typically
               not be an inline-type mount point.";
          }
        }
        container vsi-root {
          description
            "Container for mount point.";
          yangmnt:mount-point "vsi-root" {
            description
              "Root for L2VPN-type models.  This will typically
               not be an inline-type mount point.";
          }
        }
        container vv-root {
          description
            "Container for mount point.";
          yangmnt:mount-point "vv-root" {
            description
              "Root models that support both L2VPN-type bridging
               and L3VPN-type routing.  This will typically
               not be an inline-type mount point.";
          }
        }
      }
    }
  }

  // augment statements

  augment "/if:interfaces/if:interface" {
    description
      "Add a node for the identification of the network
       instance associated with the information configured
       on a interface.

       Note that a standard error will be returned if the
       identified leafref isn't present.  If an interface cannot
       be assigned for any other reason, the operation SHALL fail
       with an error-tag of 'operation-failed' and an
       error-app-tag of 'ni-assignment-failed'.  A meaningful
       error-info that indicates the source of the assignment
       failure SHOULD also be provided.";
    leaf bind-ni-name {
      type leafref {
        path "/network-instances/network-instance/name";
      }
      description
        "Network instance to which an interface is bound.";
    }
  }
  augment "/if:interfaces/if:interface/ip:ipv4" {
    description
      "Add a node for the identification of the network
       instance associated with the information configured
       on an IPv4 interface.

       Note that a standard error will be returned if the
       identified leafref isn't present.  If an interface cannot
       be assigned for any other reason, the operation SHALL fail
       with an error-tag of 'operation-failed' and an
       error-app-tag of 'ni-assignment-failed'.  A meaningful
       error-info that indicates the source of the assignment
       failure SHOULD also be provided.";
    leaf bind-ni-name {
      type leafref {
        path "/network-instances/network-instance/name";
      }
      description
        "Network instance to which IPv4 interface is bound.";
    }
  }
  augment "/if:interfaces/if:interface/ip:ipv6" {
    description
      "Add a node for the identification of the network
       instance associated with the information configured
       on an IPv6 interface.

       Note that a standard error will be returned if the
       identified leafref isn't present.  If an interface cannot
       be assigned for any other reason, the operation SHALL fail
       with an error-tag of 'operation-failed' and an
       error-app-tag of 'ni-assignment-failed'.  A meaningful
       error-info that indicates the source of the assignment
       failure SHOULD also be provided.";
    leaf bind-ni-name {
      type leafref {
        path "/network-instances/network-instance/name";
      }
      description
        "Network instance to which IPv6 interface is bound.";
    }
  }

  // notification statements

  notification bind-ni-name-failed {
    description
      "Indicates an error in the association of an interface to an
       NI.  Only generated after success is initially returned when
       bind-ni-name is set.

       Note: Some errors may need to be reported for multiple
       associations, e.g., a single error may need to be reported
       for an IPv4 and an IPv6 bind-ni-name.

       At least one container with a bind-ni-name leaf MUST be
       included in this notification.";
    leaf name {
      type leafref {
        path "/if:interfaces/if:interface/if:name";
      }
      mandatory true;
      description
        "Contains the interface name associated with the
         failure.";
    }
    container interface {
      description
        "Generic interface type.";
      leaf bind-ni-name {
        type leafref {
          path "/if:interfaces/if:interface"
             + "/ni:bind-ni-name";
        }
        description
          "Contains the bind-ni-name associated with the
           failure.";
      }
    }
    container ipv4 {
      description
        "IPv4 interface type.";
      leaf bind-ni-name {
        type leafref {
          path "/if:interfaces/if:interface/ip:ipv4/ni:bind-ni-name";
        }
        description
          "Contains the bind-ni-name associated with the
           failure.";
      }
    }
    container ipv6 {
      description
        "IPv6 interface type.";
      leaf bind-ni-name {
        type leafref {
          path "/if:interfaces/if:interface/ip:ipv6"
             + "/ni:bind-ni-name";
        }
        description
          "Contains the bind-ni-name associated with the
           failure.";
      }
    }
    leaf error-info {
      type string;
      description
        "Optionally, indicates the source of the assignment
         failure.";
    }
  }
}

<CODE ENDS>
]]></artwork>
</figure>
</t>
</section>
</middle>

<?rfc needLines="20"?>
<back>
<references title="Normative References">
  <?rfc include="reference.RFC.8446"?>
  <?rfc include="reference.RFC.6241"?>
  <?rfc include="reference.RFC.6242"?>
  <?rfc include="reference.RFC.8341"?>
  <?rfc include="reference.RFC.8040"?>
  <?rfc include="reference.RFC.2119"?>
  <?rfc include="reference.RFC.6020"?>
  <?rfc include="reference.RFC.3688"?>
  <?rfc include="reference.RFC.8174"?>

<reference anchor="RFC8528" target="https://www.rfc-editor.org/info/rfc8528">
<front>
<title>YANG Schema Mount</title>
<author initials='M' surname='Bjorklund' fullname='Martin Bjorklund'>
  <organization/>
</author>
<author initials='L' surname='Lhotka' fullname='Ladislav Lhotka'>
  <organization/>
</author>
<date month='February' year='2019'/>
</front>
<seriesInfo name="RFC" value="8528"/>
<seriesInfo name="DOI" value="10.17487/RFC8528"/>
</reference>

<?rfc include="reference.RFC.8340"?>

<?rfc include="reference.RFC.8342"?>
<?rfc include="reference.RFC.8343"?>
<?rfc include="reference.RFC.8344"?>

</references>

<references title="Informative References">


<!-- draft-ietf-rtgwg-lne-model-10 exists -->
<reference anchor='RFC8530'>
<front>
<title>YANG Model for Logical Network Elements</title>
<author initials='L' surname='Berger' fullname='Lou Berger'>
    <organization />
</author>
<author initials='C' surname='Hopps' fullname='Christian Hopps'>
    <organization />
</author>
<author initials='A' surname='Lindem' fullname='Acee Lindem'>
    <organization />
</author>
<author initials='D' surname='Bogdanovic' fullname='Dean Bogdanovic'>
    <organization />
</author>
<author initials='X' surname='Liu' fullname='Xufeng Liu'>
    <organization />
</author>

<date month='February' year='2019' />

</front>

<seriesInfo name='RFC' value='8530' />
<seriesInfo name="DOI" value="10.17487/RFC8530"/>
</reference>

<!-- draft-ietf-bess-l2vpn-yang-09 exists -->
<reference anchor='YANG-L2VPN'>
<front>
<title>YANG Data Model for MPLS-based L2VPN</title>

<author initials='H' surname='Shah' fullname='Himanshu Shah'>
    <organization />
</author>

<author initials='P' surname='Brissette' fullname='Patrice Brissette'>
    <organization />
</author>

<author initials='I' surname='Chen' fullname='Ing-When Chen'>
    <organization />
</author>

<author initials='I' surname='Hussain' fullname='Iftekhar Hussain'>
    <organization />
</author>

<author initials='B' surname='Wen' fullname='Bin Wen'>
    <organization />
</author>

<author initials='K' surname='Tiruveedhula' fullname='Kishore Tiruveedhula'>
    <organization />
</author>

<date month='October' day='22' year='2018' />

</front>

<seriesInfo name='Work in Progress,' value='draft-ietf-bess-l2vpn-yang-09' />

</reference>


<!-- draft-ietf-bess-l3vpn-yang-04 exists -->

<reference anchor='YANG-L3VPN'>
<front>
<title>Yang Data Model for BGP/MPLS L3 VPNs</title>

<author initials='D' surname='Jain' fullname='Dhanendra Jain'>
    <organization />
</author>

<author initials='K' surname='Patel' fullname='Keyur Patel'>
    <organization />
</author>

<author initials='P' surname='Brissette' fullname='Patrice Brissette'>
    <organization />
</author>

<author initials='Z' surname='Li' fullname='Zhenbin Li'>
    <organization />
</author>

<author initials='S' surname='Zhuang' fullname='Shunwan Zhuang'>
    <organization />
</author>

<author initials='X' surname='Liu' fullname='Xufeng Liu'>
    <organization />
</author>

<author initials='J' surname='Haas' fullname='Jeffrey Haas'>
    <organization />
</author>

<author initials='S' surname='Esale' fullname='Santosh Esale'>
    <organization />
</author>

<author initials='B' surname='Wen' fullname='Bin Wen'>
    <organization />
</author>

<date month='October' day='19' year='2018' />

<abstract><t>This document defines a YANG data model that can be used to configure and manage BGP Layer 3 VPNs.</t></abstract>

</front>

<seriesInfo name='Work in Progress,' value='draft-ietf-bess-l3vpn-yang-04' />
</reference>

<!-- draft-ietf-rtgwg-device-model-02 expired -->
<reference anchor='YANG-NETWORK'>
<front>
<title>Network Device YANG Logical Organization</title>

<author initials='A' surname='Lindem' fullname='Acee Lindem'>
    <organization />
</author>

<author initials='L' surname='Berger' fullname='Lou Berger'>
    <organization />
</author>

<author initials='D' surname='Bogdanovic' fullname='Dean Bogdanovic'>
    <organization />
</author>

<author initials='C' surname='Hopps' fullname='Christian Hopps'>
    <organization />
</author>

<date month='March' day='13' year='2017' />

</front>

<seriesInfo name='Work in Progress,'
	    value='draft-ietf-rtgwg-device-model-02' />

</reference>

<!-- draft-ietf-ospf-yang-21 exists -->
<reference anchor='YANG-OSPF'>
<front>
<title>YANG Data Model for OSPF Protocol</title>

<author initials='D' surname='Yeung' fullname='Derek Yeung'>
    <organization />
</author>

<author initials='Y' surname='Qu' fullname='Yingzhen Qu'>
    <organization />
</author>

<author initials='Z' surname='Zhang' fullname='Zhaohui Zhang'>
    <organization />
</author>

<author initials='I' surname='Chen' fullname='Ing-Wher Chen'>
    <organization />
</author>

<author initials='A' surname='Lindem' fullname='Acee Lindem'>
    <organization />
</author>

<date month='January' year='2019' />

</front>

<seriesInfo name='Work in Progress,' value='draft-ietf-ospf-yang-21' />

</reference>


<?rfc include="reference.RFC.4026"?>
<?rfc include="reference.RFC.4364"?>
<?rfc include="reference.RFC.4664"?>
<?rfc include="reference.RFC.7950"?>
<?rfc include="reference.RFC.8349"?>

</references>

<?rfc needLines="100"?>

<section anchor="sec-examples" title="Example NI Usage">
  <t>
    The following subsections provide example uses of NIs.
  </t>

  <section anchor="sec-ex1cd" title="Configuration Data">
    <t>
      The following shows an example where two customer-specific network
      instances are configured:
    </t>
<t>
<figure>
<artwork><![CDATA[
{
  "ietf-network-instance:network-instances": {
    "network-instance": [
      {
        "name": "vrf-red",
        "vrf-root": {
          "ietf-routing:routing": {
            "router-id": "192.0.2.1",
            "control-plane-protocols": {
              "control-plane-protocol": [
                {
                  "type": "ietf-routing:ospf",
                  "name": "1",
                  "ietf-ospf:ospf": {
                    "af": "ipv4",
                    "areas": {
                      "area": [
                        {
                          "area-id": "203.0.113.1",
                          "interfaces": {
                            "interface": [
                              {
                                "name": "eth1",
                                "cost": 10
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      {
        "name": "vrf-blue",
        "vrf-root": {
          "ietf-routing:routing": {
            "router-id": "192.0.2.2",
            "control-plane-protocols": {
              "control-plane-protocol": [
                {
                  "type": "ietf-routing:ospf",
                  "name": "1",
                  "ietf-ospf:ospf": {
                    "af": "ipv4",
                    "areas": {
                      "area": [
                        {
                          "area-id": "203.0.113.1",
                          "interfaces": {
                            "interface": [
                              {
                                "name": "eth2",
                                "cost": 10
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      }
    ]
  },

  "ietf-interfaces:interfaces": {
    "interface": [
      {
        "name": "eth0",
        "type": "iana-if-type:ethernetCsmacd",
        "ietf-ip:ipv4": {
          "address": [
            {
              "ip": "192.0.2.10",
              "prefix-length": 24
            }
          ]
        },
        "ietf-ip:ipv6": {
          "address": [
            {
              "ip": "2001:db8:0:2::10",
              "prefix-length": 64
            }
          ]
        }
      },
      {
        "name": "eth1",
        "type": "iana-if-type:ethernetCsmacd",
        "ietf-ip:ipv4": {
          "address": [
            {
              "ip": "192.0.2.11",
              "prefix-length": 24
            }
          ]
        },
        "ietf-ip:ipv6": {
          "address": [
            {
              "ip": "2001:db8:0:2::11",
              "prefix-length": 64
            }
          ]
        },
        "ietf-network-instance:bind-network-instance-name": "vrf-red"
      },
      {
        "name": "eth2",
        "type": "iana-if-type:ethernetCsmacd",
        "ietf-ip:ipv4": {
          "address": [
            {
              "ip": "192.0.2.11",
              "prefix-length": 24
            }
          ]
        },
        "ietf-ip:ipv6": {
          "address": [
            {
              "ip": "2001:db8:0:2::11",
              "prefix-length": 64
            }
          ]
        },
        "ietf-network-instance:bind-network-instance-name":
        "vrf-blue"
      }
    ]
  },

  "ietf-system:system": {
    "authentication": {
      "user": [
        {
          "name": "john",
          "password": "$0$password"
        }
      ]
    }
  }
}
]]></artwork>
</figure>
</t>
  </section>
  <section anchor="sec-ex1sd" title="State Data - Non-NMDA Version">
    <t>
      The following shows state data for the configuration example above 
      based on <xref target="RFC8343"/>, <xref target="RFC8344"/>, and
      <xref target="RFC8349"/>. 
    </t>
<t>
<figure>
<artwork><![CDATA[
{
  "ietf-network-instance:network-instances": {
    "network-instance": [
      {
        "name": "vrf-red",
        "vrf-root": {
          "ietf-yang-library:modules-state": {
            "module-set-id": "123e4567-e89b-12d3-a456-426655440000",
            "module": [
              {
                "name": "ietf-yang-library",
                "revision": "2019-01-04",
                "namespace": 
                  "urn:ietf:params:xml:ns:yang:ietf-yang-library",
                "conformance-type": "implement"
              },
              {
                "name": "ietf-ospf",
                "revision": "2019-01-24",
                "namespace": "urn:ietf:params:xml:ns:yang:ietf-ospf",
                "conformance-type": "implement"
              },
              {
                "name": "ietf-routing",
                "revision": "2018-03-13",
                "namespace": "urn:ietf:params:xml:ns:yang:ietf-routing",
                "conformance-type": "implement"
              }
            ]
          },
          "ietf-routing:routing-state": {
            "router-id": "192.0.2.1",
            "control-plane-protocols": {
              "control-plane-protocol": [
                {
                  "type": "ietf-routing:ospf",
                  "name": "1",
                  "ietf-ospf:ospf": {
                    "af": "ipv4",
                    "areas": {
                      "area": [
                        {
                          "area-id": "203.0.113.1",
                          "interfaces": {
                            "interface": [
                              {
                                "name": "eth1",
                                "cost": 10
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      {
        "name": "vrf-blue",
        "vrf-root": {
          "ietf-yang-library:modules-state": {
            "module-set-id": "123e4567-e89b-12d3-a456-426655440000",
            "module": [
              {
                "name": "ietf-yang-library",
                "revision": "2019-01-04",
                "namespace": 
                  "urn:ietf:params:xml:ns:yang:ietf-yang-library",
                "conformance-type": "implement"
              },
              {
                "name": "ietf-ospf",
                "revision": "2019-01-24",
                "namespace": "urn:ietf:params:xml:ns:yang:ietf-ospf",
                "conformance-type": "implement"
              },
              {
                "name": "ietf-routing",
                "revision": "2018-03-13",
                "namespace": "urn:ietf:params:xml:ns:yang:ietf-routing",
                "conformance-type": "implement"
              }
            ]
          },
          "ietf-routing:routing-state": {
            "router-id": "192.0.2.2",
            "control-plane-protocols": {
              "control-plane-protocol": [
                {
                  "type": "ietf-routing:ospf",
                  "name": "1",
                  "ietf-ospf:ospf": {
                    "af": "ipv4",
                    "areas": {
                      "area": [
                        {
                          "area-id": "203.0.113.1",
                          "interfaces": {
                            "interface": [
                              {
                                "name": "eth2",
                                "cost": 10
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      }
    ]
  },

  "ietf-interfaces:interfaces-state": {
    "interface": [
      {
        "name": "eth0",
        "type": "iana-if-type:ethernetCsmacd",
        "oper-status": "up",
        "phys-address": "00:01:02:A1:B1:C0",
        "statistics": {
          "discontinuity-time": "2017-06-26T12:34:56-05:00"
        },
        "ietf-ip:ipv4": {
          "address": [
            {
              "ip": "192.0.2.10",
              "prefix-length": 24
            }
          ]
        },
        "ietf-ip:ipv6": {
          "address": [
            {
              "ip": "2001:db8:0:2::10",
              "prefix-length": 64
            }
          ]
        }
      },
      {
        "name": "eth1",
        "type": "iana-if-type:ethernetCsmacd",
        "oper-status": "up",
        "phys-address": "00:01:02:A1:B1:C1",
        "statistics": {
          "discontinuity-time": "2017-06-26T12:34:56-05:00"
        },
        "ietf-ip:ipv4": {
          "address": [
            {
              "ip": "192.0.2.11",
              "prefix-length": 24
            }
          ]
        },
        "ietf-ip:ipv6": {
          "address": [
            {
              "ip": "2001:db8:0:2::11",
              "prefix-length": 64
            }
          ]
        }
      },
      {
        "name": "eth2",
        "type": "iana-if-type:ethernetCsmacd",
        "oper-status": "up",
        "phys-address": "00:01:02:A1:B1:C2",
        "statistics": {
          "discontinuity-time": "2017-06-26T12:34:56-05:00"
        },
        "ietf-ip:ipv4": {
          "address": [
            {
              "ip": "192.0.2.11",
              "prefix-length": 24
            }
          ]
        },
        "ietf-ip:ipv6": {
          "address": [
            {
              "ip": "2001:db8:0:2::11",
              "prefix-length": 64
            }
          ]
        }
      }
    ]
  },

  "ietf-system:system-state": {
    "platform": {
      "os-name": "NetworkOS"
    }
  },

  "ietf-yang-library:modules-state": {
    "module-set-id": "123e4567-e89b-12d3-a456-426655440000",
    "module": [
      {
        "name": "iana-if-type",
        "revision": "2018-07-03",
        "namespace": "urn:ietf:params:xml:ns:yang:iana-if-type",
        "conformance-type": "import"
      },
      {
        "name": "ietf-inet-types",
        "revision": "2013-07-15",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-inet-types",
        "conformance-type": "import"
      },
      {
        "name": "ietf-interfaces",
        "revision": "2018-02-20",
        "feature": [
          "arbitrary-names",
          "pre-provisioning"
        ],
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-interfaces",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-ip",
        "revision": "2018-01-09",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-ip",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-network-instance",
        "revision": "2018-02-03",
        "feature": [
          "bind-network-instance-name"
        ],
        "namespace":  
          "urn:ietf:params:xml:ns:yang:ietf-network-instance",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-ospf",
        "revision": "2019-01-24",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-ospf",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-routing",
        "revision": "2018-03-13",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-routing",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-system",
        "revision": "2014-08-06",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-system",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-yang-library",
        "revision": "2019-01-04",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-library",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-yang-schema-mount",
        "revision": "2019-01-14",
        "namespace": 
          "urn:ietf:params:xml:ns:yang:ietf-yang-schema-mount",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-yang-types",
        "revision": "2013-07-15",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-types",
        "conformance-type": "import"
      }
    ]
  },

  "ietf-yang-schema-mount:schema-mounts": {
    "mount-point": [
      {
        "module": "ietf-network-instance",
        "label": "vrf-root",
        "shared-schema": {
          "parent-reference": [
            "/*[namespace-uri() = 'urn:ietf:...:ietf-interfaces']"
          ]
        }
      }
    ]
  }
}
]]></artwork>
</figure>
</t>
  </section>
  <section anchor="sec-ex1sd-nmda" title="State Data - NMDA Version">
    <t>The following shows state data for the configuration example above 
    based on <xref target="RFC8343"/>, 
    <xref target="RFC8344"/>, and 
    <xref target="RFC8349"/>.
</t>
<t>
<figure>
<artwork><![CDATA[
{
  "ietf-network-instance:network-instances": {
    "network-instance": [
      {
        "name": "vrf-red",
        "vrf-root": {
          "ietf-yang-library:yang-library": {
            "content-id": "41e2ab5dc325f6d86f743e8da3de323f1a61a801",
            "module-set": [
              {
                "name": "ni-modules",
                "module": [
                  {
                    "name": "ietf-yang-library",
                    "revision": "2019-01-04",
                    "namespace": 
                      "urn:ietf:params:xml:ns:yang:ietf-yang-library"
                  },
                  {
                    "name": "ietf-ospf",
                    "revision": "2019-01-24",
                    "namespace": 
                      "urn:ietf:params:xml:ns:yang:ietf-ospf"
                  },
                  {
                    "name": "ietf-routing",
                    "revision": "2018-03-13",
                    "namespace": 
                      "urn:ietf:params:xml:ns:yang:ietf-routing"
                  }
                ],
                "import-only-module": [
                  {
                    "name": "ietf-inet-types",
                    "revision": "2013-07-15",
                    "namespace": 
                      "urn:ietf:params:xml:ns:yang:ietf-inet-types"
                  },
                  {
                    "name": "ietf-yang-types",
                    "revision": "2013-07-15",
                    "namespace": 
                      "urn:ietf:params:xml:ns:yang:ietf-yang-types"
                  },
                  {
                    "name": "ietf-datastores",
                    "revision": "2018-02-14",
                    "namespace": 
                      "urn:ietf:params:xml:ns:yang:ietf-datastores"
                  }
                ]
              }
            ],
            "schema": [
              {
                "name": "ni-schema",
                "module-set": [ "ni-modules" ]
              }
            ],
            "datastore": [
              {
                "name": "ietf-datastores:running",
                "schema": "ni-schema"
              },
              {
                "name": "ietf-datastores:operational",
                "schema": "ni-schema"
              }
            ]
          },
          "ietf-routing:routing": {
            "router-id": "192.0.2.1",
            "control-plane-protocols": {
              "control-plane-protocol": [
                {
                  "type": "ietf-routing:ospf",
                  "name": "1",
                  "ietf-ospf:ospf": {
                    "af": "ipv4",
                    "areas": {
                      "area": [
                        {
                          "area-id": "203.0.113.1",
                          "interfaces": {
                            "interface": [
                              {
                                "name": "eth1",
                                "cost": 10
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      {
        "name": "vrf-blue",
        "vrf-root": {
          "ietf-yang-library:yang-library": {
            "checksum": "41e2ab5dc325f6d86f743e8da3de323f1a61a801",
            "module-set": [
              {
                "name": "ni-modules",
                "module": [
                  {
                    "name": "ietf-yang-library",
                    "revision": "2019-01-04",
                    "namespace": 
                      "urn:ietf:params:xml:ns:yang:ietf-yang-library",
                    "conformance-type": "implement"
                  },
                  {
                    "name": "ietf-ospf",
                    "revision": "2019-01-24",
                    "namespace": 
                      "urn:ietf:params:xml:ns:yang:ietf-ospf",
                    "conformance-type": "implement"
                  },
                  {
                    "name": "ietf-routing",
                    "revision": "2018-03-13",
                    "namespace": 
                      "urn:ietf:params:xml:ns:yang:ietf-routing",
                    "conformance-type": "implement"
                  }
                ],
                "import-only-module": [
                  {
                    "name": "ietf-inet-types",
                    "revision": "2013-07-15",
                    "namespace": 
                      "urn:ietf:params:xml:ns:yang:ietf-inet-types"
                  },
                  {
                    "name": "ietf-yang-types",
                    "revision": "2013-07-15",
                    "namespace": 
                      "urn:ietf:params:xml:ns:yang:ietf-yang-types"
                  },
                  {
                    "name": "ietf-datastores",
                    "revision": "2018-02-14",
                    "namespace": 
                      "urn:ietf:params:xml:ns:yang:ietf-datastores"
                  }
                ]
              }
            ],
            "schema": [
              {
                "name": "ni-schema",
                "module-set": [ "ni-modules" ]
              }
            ],
            "datastore": [
              {
                "name": "ietf-datastores:running",
                "schema": "ni-schema"
              },
              {
                "name": "ietf-datastores:operational",
                "schema": "ni-schema"
              }
            ]
          },
          "ietf-routing:routing": {
            "router-id": "192.0.2.2",
            "control-plane-protocols": {
              "control-plane-protocol": [
                {
                  "type": "ietf-routing:ospf",
                  "name": "1",
                  "ietf-ospf:ospf": {
                    "af": "ipv4",
                    "areas": {
                      "area": [
                        {
                          "area-id": "203.0.113.1",
                          "interfaces": {
                            "interface": [
                              {
                                "name": "eth2",
                                "cost": 10
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      }
    ]
  },

  "ietf-interfaces:interfaces": {
    "interface": [
      {
        "name": "eth0",
        "type": "iana-if-type:ethernetCsmacd",
        "oper-status": "up",
        "phys-address": "00:01:02:A1:B1:C0",
        "statistics": {
          "discontinuity-time": "2017-06-26T12:34:56-05:00"
        },
        "ietf-ip:ipv4": {
          "address": [
            {
              "ip": "192.0.2.10",
              "prefix-length": 24
            }
          ]
        },
        "ietf-ip:ipv6": {
          "address": [
            {
              "ip": "2001:db8:0:2::10",
              "prefix-length": 64
            }
          ]
        }
      },
      {
        "name": "eth1",
        "type": "iana-if-type:ethernetCsmacd",
        "oper-status": "up",
        "phys-address": "00:01:02:A1:B1:C1",
        "statistics": {
          "discontinuity-time": "2017-06-26T12:34:56-05:00"
        },
        "ietf-ip:ipv4": {
          "address": [
            {
              "ip": "192.0.2.11",
              "prefix-length": 24
            }
          ]
        },
        "ietf-ip:ipv6": {
          "address": [
            {
              "ip": "2001:db8:0:2::11",
              "prefix-length": 64
            }
          ]
        }
      },
      {
        "name": "eth2",
        "type": "iana-if-type:ethernetCsmacd",
        "oper-status": "up",
        "phys-address": "00:01:02:A1:B1:C2",
        "statistics": {
          "discontinuity-time": "2017-06-26T12:34:56-05:00"
        },
        "ietf-ip:ipv4": {
          "address": [
            {
              "ip": "192.0.2.11",
              "prefix-length": 24
            }
          ]
        },
        "ietf-ip:ipv6": {
          "address": [
            {
              "ip": "2001:db8:0:2::11",
              "prefix-length": 64
            }
          ]
        }
      }
    ]
  },

  "ietf-system:system-state": {
    "platform": {
      "os-name": "NetworkOS"
    }
  },

  "ietf-yang-library:yang-library": {
    "content-id": "75a43df9bd56b92aacc156a2958fbe12312fb285",
    "module-set": [
      {
        "name": "host-modules",
        "module": [
          {
            "name": "ietf-interfaces",
            "revision": "2018-02-20",
            "feature": [
              "arbitrary-names",
              "pre-provisioning"
            ],
            "namespace":
              "urn:ietf:params:xml:ns:yang:ietf-interfaces"
          },
          {
            "name": "ietf-ip",
            "revision": "2018-01-09",
            "namespace": "urn:ietf:params:xml:ns:yang:ietf-ip"
          },
          {
            "name": "ietf-network-instance",
            "revision": "2018-02-03",
            "feature": [
              "bind-network-instance-name"
            ],
            "namespace": 
              "urn:ietf:params:xml:ns:yang:ietf-network-instance"
          },
          {
            "name": "ietf-ospf",
            "revision": "2019-01-24",
            "namespace": 
              "urn:ietf:params:xml:ns:yang:ietf-ospf"
          },
          {
            "name": "ietf-routing",
            "revision": "2018-03-13",
            "namespace": 
            "urn:ietf:params:xml:ns:yang:ietf-routing"
          },
          {
            "name": "ietf-system",
            "revision": "2014-08-06",
            "namespace": "urn:ietf:params:xml:ns:yang:ietf-system"
          },
          {
            "name": "ietf-yang-library",
            "revision": "2019-01-04",
            "namespace": 
              "urn:ietf:params:xml:ns:yang:ietf-yang-library"
          },
          {
            "name": "ietf-yang-schema-mount",
            "revision": "2019-01-14",
            "namespace": 
              "urn:ietf:params:xml:ns:yang:ietf-yang-schema-mount"
          }
        ],
        "import-only-module": [
          {
            "name": "iana-if-type",
            "revision": "2018-07-03",
            "namespace": "urn:ietf:params:xml:ns:yang:iana-if-type"
          },
          {
            "name": "ietf-inet-types",
            "revision": "2013-07-15",
            "namespace": 
              "urn:ietf:params:xml:ns:yang:ietf-inet-types"
          },
          {
            "name": "ietf-yang-types",
            "revision": "2013-07-15",
            "namespace": 
              "urn:ietf:params:xml:ns:yang:ietf-yang-types"
          },
          {
            "name": "ietf-datastores",
            "revision": "2018-02-14",
            "namespace": 
              "urn:ietf:params:xml:ns:yang:ietf-datastores"
          }
        ]
      }
    ],
    "schema": [
      {
        "name": "host-schema",
        "module-set": [ "host-modules" ]
      }
    ],
    "datastore": [
      {
        "name": "ietf-datastores:running",
        "schema": "host-schema"
      },
      {
        "name": "ietf-datastores:operational",
        "schema": "host-schema"
      }
    ]
  },

  "ietf-yang-schema-mount:schema-mounts": {
    "mount-point": [
      {
        "module": "ietf-network-instance",
        "label": "vrf-root",
        "shared-schema": {
          "parent-reference": [
            "/*[namespace-uri() = 'urn:ietf:...:ietf-interfaces']"
          ]
        }
      }
    ]
  }
}
]]></artwork>
</figure>
</t>
  </section>
</section>

<section title="Acknowledgments" numbered="no">
   <t>The Routing Area Yang Architecture design team members included Acee
   Lindem, Anees Shaikh, Christian Hopps, Dean Bogdanovic, Lou Berger,
   Qin Wu, Rob Shakir, Stephane Litkowski, and Yan Gang. Martin
   Bjorklund and John Scudder provided useful review
   comments.</t>

<t>
   This document was motivated by, and derived from, "Network Device
   YANG Logical Organization" <xref target="YANG-NETWORK" />.
</t>

<t> 
  Thanks for Area Director and IETF last-call comments from Alia Atlas, Liang Xia, 
  Benoit Claise, and Adam Roach.
</t>

</section>
</back>

</rfc>

<!-- Local Variables: -->
<!-- fill-column:72 -->
<!-- End: -->
