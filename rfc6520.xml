<?xml version="1.0" encoding="US-ASCII" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc rfcedstyle="yes"?>
<?rfc subcompact="no"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc tocdepth='1'?>
<?rfc strict="yes" ?>

<rfc number="6520" category="std" ipr="trust200902" submissionType="IETF" consensus="yes">

<front>
<title abbrev="TLS/DTLS Heartbeat Extension">
       Transport Layer Security (TLS) and
       Datagram Transport Layer Security (DTLS)
       Heartbeat Extension
</title>


<!-- ************** ROBIN SEGGELMANN *************** -->
<author initials="R." surname="Seggelmann" fullname="Robin Seggelmann">
<organization abbrev='Muenster Univ. of Appl. Sciences'>
              Muenster University of Applied Sciences</organization>
<address>
    <postal>
        <street>Stegerwaldstr. 39</street>
        <city>48565 Steinfurt</city>
        <country>DE</country>
    </postal>
    <email>seggelmann@fh-muenster.de</email>
</address>
</author>

<!-- ************** MICHAEL TUEXEN *************** -->
<author initials="M." surname="Tuexen" fullname="Michael Tuexen">
<organization abbrev='Muenster Univ. of Appl. Sciences'>
              Muenster University of Applied Sciences</organization>
<address>
    <postal>
        <street>Stegerwaldstr. 39</street>
        <city>48565 Steinfurt</city>
        <country>DE</country>
    </postal>
    <email>tuexen@fh-muenster.de</email>
</address>
</author>

<!-- ************ MICHAEL WILLIAMS ************ -->
<author initials="M." surname="Williams" fullname="Michael Glenn Williams">
<organization>GWhiz Arts & Sciences</organization>
<address>
    <postal>
        <street>2885 Denise Court</street>
        <city>Newbury Park, CA, 91320</city>
        <country>USA</country>
    </postal>
    <email>michael.glenn.williams@gmail.com</email>
</address>
</author>

<date year="2012" month="February"/>

<!-- [rfced] Please insert any keywords (beyond those that appear in
the title) for use on http://www.rfc-editor.org/rfcsearch.html. -->

<keyword>example</keyword>
<keyword>Internet-Draft</keyword>

<!-- [rfced] 
Previous discussion on this document included the exchange below.  Please
review and let us know if any textual updates are required, or if the text is
correct as it stands.


> I asked the RFC editor (after consulting with Stephen and Joe) to place a
> hold on this draft until we find out some more about the attack Marsh asked
> about:
>
> http://www.ietf.org/mail-archive/web/tls/current/msg08316.html

Hi Sean,

the authors of the paper contacted us end of October and provided a
version of their paper. Robin provided a fix to mitigate the attack to the
OpenSSL maintainers. They will include it in the next revision of OpenSSL. Not
sure when that will be, it is up to the OpenSSL maintainers.

The fix is:
(a) Silently discard messages when decryption fails, don't send an Alert.
(b) Perform the MAC verification also for messages you are discarding.

Please note that (a) was changed in the codebase, but the guys used an older
code base.
Please note that (b) was fixed for TLS some time ago, but not for DTLS in
OpenSSL.

The attack was using heartbeat messages, but the attack is more general.
That is why it is also applies to GNuTLS, which does not yet support heartbeat
messages.

We sent them the patch and they verified that with the above patches the
attack does not work any longer.
-->

<abstract>
<t>This document describes the Heartbeat Extension for the Transport Layer
Security (TLS) and Datagram Transport Layer Security (DTLS) protocols.</t>

<t>The Heartbeat Extension provides a new protocol for TLS/DTLS allowing the
usage of keep-alive functionality without performing a renegotiation and a
basis for path MTU (PMTU) discovery for DTLS.
</t>
</abstract>

</front>

<middle>
<section anchor="intro" title="Introduction">
<section title="Overview">
<t>This document describes the Heartbeat Extension for the Transport Layer
Security (TLS) and Datagram Transport Layer Security (DTLS) protocols, as
defined in <xref target='RFC5246'/> and
<xref target='RFC6347'/> and their adaptations to specific
transport protocols described in
<xref target='RFC3436'/>, <xref target='RFC5238'/>,
and <xref target='RFC6083'/>.</t>

<t>DTLS is designed to secure traffic running on top of unreliable transport
protocols. Usually, such protocols have no session management. The only
mechanism available at the DTLS layer to figure out if a peer is still alive is
a costly renegotiation, particularly when the application uses unidirectional
traffic. Furthermore, DTLS needs to
perform path MTU (PMTU) discovery but has no specific
message type to realize it without affecting the transfer of user messages.
</t>

<t>TLS is based on reliable protocols, but there is not necessarily a feature
available to keep the connection alive without continuous data transfer.</t>

<t>The Heartbeat Extension as described in this document overcomes these
limitations. The user can use the new HeartbeatRequest message, which has to
be answered by the peer with a HeartbeartResponse immediately. To perform
PMTU discovery, HeartbeatRequest messages containing padding can be used as
probe packets, as described in <xref target='RFC4821'/>.</t>
</section>

<section anchor="conventions" title="Conventions">
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in
<xref target='RFC2119'/>.</t>
</section>
</section>

<section title="Heartbeat Hello Extension">

<t>The support of Heartbeats is indicated with Hello Extensions.
A peer cannot only indicate that its implementation supports Heartbeats,
it can also choose whether it is willing to receive HeartbeatRequest messages
and respond with HeartbeatResponse messages or only willing to send HeartbeatRequest
messages.
The former is indicated by using peer_allowed_to_send as the HeartbeatMode;
the latter is indicated by using peer_not_allowed_to_send as the Heartbeat
mode.
This decision can be changed with every renegotiation.
HeartbeatRequest messages MUST NOT be sent to a peer indicating
peer_not_allowed_to_send. 
If an endpoint that has indicated peer_not_allowed_to_send receives
a HeartbeatRequest message, the endpoint SHOULD drop the message silently
and MAY send an unexpected_message Alert message.
</t>

<t>The format of the Heartbeat Hello Extension is defined by:</t>
<figure>
<artwork>
enum {
   peer_allowed_to_send(1),
   peer_not_allowed_to_send(2),
   (255)
} HeartbeatMode;

struct {
   HeartbeatMode mode;
} HeartbeatExtension;
</artwork>
</figure>

<t>Upon reception of an unknown mode, an error Alert message using
illegal_parameter as its AlertDescription MUST be sent in response.</t>
</section>


<section title="Heartbeat Protocol">
<t>The Heartbeat protocol is a new protocol running on top of the Record Layer.
The protocol itself consists of two message types:
HeartbeatRequest and HeartbeatResponse.</t>
<figure>
<artwork>
enum {
   heartbeat_request(1),
   heartbeat_response(2),
   (255)
} HeartbeatMessageType;
</artwork>
</figure>

<t>A HeartbeatRequest message can arrive almost at any time during the
lifetime of a connection.
Whenever a HeartbeatRequest message is received, it SHOULD be answered with a
corresponding HeartbeatResponse message.</t>

<t>However, a HeartbeatRequest message SHOULD NOT be sent during
handshakes. If a handshake is initiated while a HeartbeatRequest is still
in flight, the sending peer MUST stop the DTLS retransmission timer for it.
The receiving peer SHOULD discard the message silently, if it arrives during the
handshake.
In case of DTLS, HeartbeatRequest messages from older epochs SHOULD be
discarded.</t>

<t>There MUST NOT be more than one HeartbeatRequest message
in flight at a time.
A HeartbeatRequest message is considered to be in flight until
the corresponding HeartbeatResponse message is received,
or until the retransmit timer expires.</t>

<t>When using an unreliable transport protocol like the Datagram
Congestion Control Protocol (DCCP) or UDP,
HeartbeatRequest messages MUST be retransmitted using the simple timeout
and retransmission scheme DTLS uses for flights as described in
Section 4.2.4 of <xref target='RFC6347'/>.
In particular, after a number of retransmissions without receiving a
corresponding HeartbeatResponse message having the expected payload, the
DTLS connection SHOULD be terminated.
The threshold used for this SHOULD be the same as for DTLS handshake
messages.
Please note that after the timer supervising a HeartbeatRequest messages
expires, this message is no longer considered in flight. Therefore,
the HeartbeatRequest message is eligible for retransmission.
The retransmission scheme, in combination with the restriction
that only one HeartbeatRequest is allowed to be in flight, ensures
that congestion control is handled appropriately in case of the
transport protocol not providing one, like in the case of DTLS over UDP.</t>

<t>When using a reliable transport protocol like the Stream Control
   Transmission Protocol (SCTP) or TCP,
HeartbeatRequest messages only need to be sent once.
The transport layer will handle retransmissions.
If no corresponding HeartbeatResponse message has been received after some
amount of time, the DTLS/TLS connection MAY be terminated by the application
that initiated the sending of the HeartbeatRequest message.</t>
</section>

<section title="Heartbeat Request and Response Messages">
<t>The Heartbeat protocol messages consist of their type and an arbitrary
payload and padding.</t>

<figure>
<artwork>
struct {
   HeartbeatMessageType type;
   uint16 payload_length;
   opaque payload[HeartbeatMessage.payload_length];
   opaque padding[padding_length];
} HeartbeatMessage;
</artwork>
</figure>

<t>The total length of a HeartbeatMessage MUST NOT exceed
2^14 or max_fragment_length when negotiated as defined in
<xref target='RFC6066'/>.</t>

<t><list style='hanging'>
<t hangText="type:">
The message type, either heartbeat_request or heartbeat_response.</t>
<t hangText="payload_length:">
The length of the payload.</t>
<t hangText="payload:">
The payload consists of arbitrary content.</t>
<t hangText="padding:">
The padding is random content that MUST be ignored by the receiver.
The length of a HeartbeatMessage is TLSPlaintext.length
for TLS and DTLSPlaintext.length for DTLS.
Furthermore, the length of the type field is 1 byte, and
the length of the payload_length is 2.
Therefore, the padding_length is
TLSPlaintext.length - payload_length - 3 for TLS and
DTLSPlaintext.length - payload_length - 3 for DTLS.
The padding_length MUST be at least 16.</t>
</list></t>

<t>The sender of a HeartbeatMessage MUST use a random padding of at
least 16 bytes. The padding of a received HeartbeatMessage message
MUST be ignored.</t>

<t>If the payload_length of a received HeartbeatMessage is too large,
the received HeartbeatMessage MUST be discarded silently.</t>

<t>When a HeartbeatRequest message is received and sending a
HeartbeatResponse is not prohibited as described elsewhere in this
document, the receiver MUST send a corresponding HeartbeatResponse message
carrying an exact copy of the payload of the received HeartbeatRequest.</t>

<t>If a received HeartbeatResponse message does not contain the expected
payload, the message MUST be discarded silently.
If it does contain the expected payload, the retransmission timer MUST be
stopped.</t>

</section>

<section title="Use Cases">

<t>Each endpoint sends HeartbeatRequest messages at a rate and with the padding
required for the particular use case. The endpoint should not expect its
peer to send HeartbeatRequests. The directions are independent.</t>

<section title="Path MTU Discovery">
<t>DTLS performs path MTU discovery as described in Section 4.1.1.1
of <xref target='RFC6347'/>.
A detailed description of how to perform path MTU discovery is given
in <xref target='RFC4821'/>.
The necessary probe packets are the HeartbeatRequest messages.</t>
<t>This method of using HeartbeatRequest messages for DTLS is similar
to the one for the Stream Control Transmission Protocol (SCTP)
using the padding chunk (PAD-chunk) defined in <xref target='RFC4820'/>.</t>
</section>

<section title="Liveliness Check">
<t>Sending HeartbeatRequest messages allows the sender to
make sure that it can reach the peer and the peer is alive.
Even in the case of TLS/TCP, this allows a check at a much
higher rate than the TCP keep-alive feature would allow.</t>
<t>Besides making sure that the peer is still reachable,
sending HeartbeatRequest messages refreshes the NAT state
of all involved NATs.</t>
<t>HeartbeatRequest messages SHOULD only be sent after an idle
period that is at least multiple round-trip times long.
This idle period SHOULD be configurable up to a period of multiple minutes
and down to a period of one second. A default value for the idle period
SHOULD be configurable, but it SHOULD also be tunable on a per-peer basis.</t>
</section>

</section>

<section title="IANA Considerations">

<t>IANA has assigned the heartbeat content type (24) from the
"TLS ContentType Registry" as specified in <xref target='RFC5246'/>.
The reference is to RFC 6520.</t>

<t>IANA has created and now maintains a new registry for Heartbeat Message Types.
The message types are numbers in the range from 0 to 255 (decimal).
IANA has assigned the heartbeat_request (1) and
the heartbeat_response (2) message types.
The values 0 and 255 should be reserved.
This registry uses the Expert Review policy as described in
<xref target='RFC5226'/>.
The reference is to RFC 6520.</t>

<t>IANA has assigned the heartbeat extension type (15) from the
TLS "ExtensionType Values" registry as specified in <xref target='RFC5246'/>.
The reference is to RFC 6520.</t>

<t>IANA has created and now maintains a new registry for Heartbeat Modes.
The modes are numbers in the range from 0 to 255 (decimal).
IANA has assigned the peer_allowed_to_send (1) and
the peer_not_allowed_to_send (2) modes.
The values 0 and 255 should be reserved.
This registry uses the Expert Review policy as described in
<xref target='RFC5226'/>.
The reference is to RFC 6520.</t>
</section>

<section title="Security Considerations">
<t>The security considerations of <xref target='RFC5246'/> and
<xref target='RFC6347'/> apply to this document. This document does not
introduce any new security considerations.
</t>
</section>

<section title="Acknowledgments">
<t>The authors wish to thank
Pasi Eronen,
Adrian Farrel,
Stephen Farrell,
Adam Langley,
Nikos Mavrogiannopoulos,
Tom Petch,
Eric Rescorla,
Peter Saint-Andre, and
Juho Vaehae-Herttua
for their invaluable comments.</t>
</section>

</middle>

<back>
<references title='Normative References'>
<?rfc include="reference.RFC.2119" ?>
<?rfc include="reference.RFC.5226" ?>
<?rfc include="reference.RFC.5246" ?>
<?rfc include="reference.RFC.6066" ?>
<?rfc include="reference.RFC.6347" ?>
</references>
<references title='Informative References'>
<?rfc include="reference.RFC.3436" ?>
<?rfc include="reference.RFC.4820" ?>
<?rfc include="reference.RFC.4821" ?>
<?rfc include="reference.RFC.5238" ?>
<?rfc include="reference.RFC.6083" ?>
</references>
</back>
</rfc>
