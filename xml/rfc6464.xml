<?xml version='1.0' encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
    <!ENTITY hdrext SYSTEM
      'reference.RFC.5285.xml'>
    <!ENTITY red SYSTEM
      'reference.RFC.2198.xml'>
    <!ENTITY rfc2119 SYSTEM
      'reference.RFC.2119.xml'>
    <!ENTITY rtp SYSTEM
      'reference.RFC.3550.xml'>
    <!ENTITY srtp SYSTEM
      'reference.RFC.3711.xml'>
    <!ENTITY ipsec SYSTEM
      'reference.RFC.4301.xml'>
]>

<?rfc toc="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no"?>
<?rfc sortrefs="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc rfcedstyle="yes"?>

<rfc category='std' ipr='trust200902' 
     number='6464' submissionType="IETF" consensus="yes">

    <front>
        <title abbrev='Client-to-Mixer Audio Level Indication'>
        A Real-time Transport Protocol (RTP) Header Extension for
        Client&nbhy;to&nbhy;Mixer Audio Level Indication
        </title>

        <author initials='J.' surname='Lennox'
                fullname='Jonathan Lennox'
                role="editor">
            <organization abbrev='Vidyo'>
               Vidyo, Inc.
            </organization>
            <address>
               <postal>
                   <street>433 Hackensack Avenue</street>
                   <street>Seventh Floor</street>
                   <city>Hackensack</city><region>NJ</region>
                   <code>07601</code>
                   <country>US</country>
               </postal>
               <email>jonathan@vidyo.com</email>
            </address>
        </author>

        <author initials='E.' surname='Ivov'
                fullname='Emil Ivov'>
            <organization abbrev='Jitsi'>
               Jitsi
            </organization>
            <address>
               <postal>
                   <street> </street>
                   <city>Strasbourg</city>
                   <code>67000</code>
                   <country>France</country>
               </postal>
               <email>emcho@jitsi.org</email>
            </address>
        </author>

        <author initials='E.' surname='Marocco'
                fullname='Enrico Marocco'>
            <organization abbrev='Telecom Italia'>
               Telecom Italia
            </organization>
            <address>
               <postal>
                   <street>Via G. Reiss Romoli, 274</street>
                   <city>Turin</city>
                   <code>10148</code>
                   <country>Italy</country>
               </postal>
               <email>enrico.marocco@telecomitalia.it</email>
            </address>
        </author>

        <date month="December" year="2011"/>

        <area>RAI</area>
        <workgroup>AVT</workgroup>

        <abstract>
        <t>This document defines a mechanism by which packets of
        Real-time Transport Protocol (RTP) audio streams can indicate,
        in an RTP header extension, the audio level of the audio
        sample carried in the RTP packet.  In large conferences, this
        can reduce the load on an audio mixer or other middlebox that
        wants to forward only a few of the loudest audio streams,
        without requiring it to decode and measure every stream that
        is received.</t>
        </abstract>

    </front>

<middle>

<section title='Introduction' anchor='introduction'>

<t>In a centralized <xref target='RFC3550'>Real-time Transport Protocol
(RTP)</xref> audio conference, an audio mixer or
  forwarder receives audio streams from many or all of the conference
  participants.  It then selectively forwards some of them to
  other participants in the conference.  In
  large conferences, it is possible that such a server might be
  receiving a large number of streams, of which only a few are intended to be
  forwarded to the other conference participants.</t>

<t>In such a scenario, in order to pick the audio streams to forward,
  a centralized server needs to decode, measure audio levels, and
  possibly perform voice activity detection on audio data from a large
  number of streams.  The need for such processing limits the size or
  number of conferences such a server can support.</t>

<t>As an alternative, this document defines
  an <xref target='RFC5285'>RTP header extension</xref> through which
  senders of audio packets can indicate the audio level of the
  packets' payload, reducing the processing load for a server.
</t>

<t>The header extension in this document is different than, but
  complementary with, the one defined in <xref target='RFC6465' />,
  which defines a mechanism by which audio mixers can indicate to clients the
  levels of the contributing sources that made up the mixed audio.</t>

</section>

<section title='Terminology'>

<t>The key words "MUST", "MUST NOT", "REQUIRED",
"SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
and "OPTIONAL" in this document
are to be interpreted as described in <xref
target='RFC2119'>RFC 2119</xref> and indicate requirement levels for
compliant implementations.</t>

</section>

<section title='Audio Levels' anchor="levels">

<t>The audio level header extension carries the level of the audio 
in the <xref target='RFC3550'>RTP</xref> payload of the packet with which
it is associated. This information 
is carried in an RTP header extension element as defined by
<xref target='RFC5285'>"A General Mechanism for RTP Header Extensions"
</xref>.</t>

<t>The payload of the audio level header extension element can be 
encoded using either the one-byte or two-byte header defined in <xref 
target='RFC5285'/>. Figures <xref target='exthdr' format="counter"/>
and <xref target='exthdr2' format="counter"/>
show sample audio level encodings with each of these header formats.</t>

<figure anchor='exthdr' title="Sample Audio Level Encoding Using the One-Byte Header Format">
<artwork>
<![CDATA[
                 0                   1
                 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                |  ID   | len=0 |V| level       |
                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]>
</artwork>
</figure>

<figure anchor='exthdr2' title="Sample Audio Level Encoding Using the Two-Byte
Header Format">
<artwork>
<![CDATA[
   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |      ID       |     len=1     |V|    level    |    0 (pad)    |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]>
</artwork>
</figure>

<t>Note that, as indicated in <xref target='RFC5285'/>, the length field in 
the one-byte header format takes the value 0 to indicate that 1 byte 
follows. In the two-byte header format, on the other hand, the length
field takes the value of 1.</t>

<t>The magnitude of the audio level itself is packed into the seven 
least significant bits of the single byte of the header extension,
shown in Figures <xref target='exthdr' format="counter"/> and
<xref target='exthdr2' format="counter"/>. The least
significant bit of the audio level magnitude is packed into the least 
significant bit of the byte. The most significant bit of the byte is 
used as a separate flag bit "V", defined below.</t>

<t>The audio level is expressed in -dBov, with values from 0 to 127 
representing 0 to -127 dBov.  dBov is the level, in decibels, relative 
to the overload point of the system, i.e., the highest-intensity 
signal encodable by the payload format. (Note: 
Representation relative to the overload point of a system is 
particularly useful for digital implementations, since one does not 
need to know the relative calibration of the analog circuitry.)  For 
example, in the case of <xref target='ITU.G711'>u-law (audio/pcmu) 
audio</xref>, the 0 dBov reference would be a square wave with values
+/- 8031.  (This translates to 6.18&nbsp;dBm0, relative to u-law's dBm0 
definition in Table 6 of <xref target='ITU.G711'/>.)</t>

<t>The audio level for digital silence -- for a muted audio source,
for example -- MUST be represented as 127 (-127 dBov), regardless of the 
dynamic range of the encoded audio format.</t>

<t> The audio level header extension only carries the level of the 
audio in the RTP payload of the packet with which it is associated,
with no long-term averaging or smoothing applied. For payload formats that
contain extra error-correction bits or loss-concealment information,
the level corresponds only to the data that would result from the
payload's normal decoding process, not what it would produce under
error or packet loss concealment. The level is measured as a 
root mean square of all the samples in the audio encoded by the
packet.</t>

<t>To simplify implementation of the encoding procedures described here, 
Appendix A of <xref target='RFC6465' /> provides a 
sample Java implementation of an audio level calculator that helps 
obtain such values from raw linear Pulse Code Modulation (PCM)
audio samples.</t>

<t>In addition, a flag bit (labeled "V") optionally indicates whether
the encoder believes the audio packet contains voice activity.  If the
V bit is in use, the value 1 indicates that the encoder believes the
audio packet contains voice activity, and the value 0 indicates that
the encoder believes it does not.  (The voice activity detection
algorithm is unspecified and left implementation-specific.)  If the
V bit is not in use, its value is unspecified and MUST be ignored by
receivers.  The use of the V bit is signaled using the extension
attribute "vad", discussed in <xref target='signaling' />.</t>

<t>When this header extension is used with RTP data sent using 
<xref target='RFC2198'>the RTP Payload for Redundant Audio Data</xref>,
the header's data describes the contents of the primary encoding.

<list><t>Note: This audio level is defined in the same manner as is audio 
noise level in the <xref target="RFC3389">RTP Payload Comfort Noise
specification</xref>. In <xref target="RFC3389"/>, the overall 
magnitude of the noise level in comfort noise is encoded into the first
byte of the payload, with spectral information about the noise in 
subsequent bytes. This specification's audio level parameter is defined 
so as to be identical to the comfort noise payload's noise-level byte.
</t></list>
</t>

</section>

<section title='Signaling (Setup) Information' anchor='signaling'>

<t>The URI for declaring this header extension in an extmap attribute is
   "urn:ietf:params:rtp-hdrext:ssrc-audio-level".</t>

<t>It has a single extension attribute, named "vad".  It takes the
   form "vad=on" or "vad=off".  If the header extension element is signaled
   with "vad=on", the V bit described in <xref target='levels' /> is
   in use, and MUST be set by senders.  If the header extension element is
   signaled with "vad=off", the V bit is not in use, and its value
   MUST be ignored by receivers.  If the vad extension attribute is
   not specified, the default is "vad=on".</t>

<t>An example attribute line in the Session Description Protocol (SDP)
for a conference might hence be:</t>
<figure>
  <artwork>
   a=extmap:6 urn:ietf:params:rtp-hdrext:ssrc-audio-level vad=on
  </artwork>
</figure>

<t>The vad extension attribute only controls the semantics of this
   header extension attribute, and does not make any statement about
   whether the sender is using any other voice activity detection
   features, such as discontinuous transmission, comfort noise, or
   silence suppression.</t>

<t>Using the mechanisms of <xref target='RFC5285' />, an endpoint MAY
signal multiple instances of the header extension element, with
different values of the vad attribute, so long as these instances use
different values for the extension identifier.  However, again
following the rules of <xref target='RFC5285' />, the semantics chosen
for a header extension element (including its vad setting) for a
particular extension identifier value MUST NOT be changed within an
RTP session.</t>

</section>

<section title='Considerations on Use' anchor='use'>

<t>Mixers and forwarders generally ought not base audio forwarding
  decisions directly on packet-by-packet audio level information, but
  rather ought to apply some analysis of the audio levels and trends.
  This general rule applies whether audio levels are provided by
  endpoints (as defined in this document), or are calculated at a
  server, as would be done in the absence of this information.  This
  section discusses several issues that mixers and forwarders may
  wish to take into account.  (Note that this section provides design
  guidance only, and is not normative.)</t>

<t>First of all, audio levels generally ought to be measured over longer
  intervals than that of a single audio packet.  In order to avoid
  false-positives for short bursts of sound (such as a cough or a
  dropped microphone), it is often useful to require that a
  participant's audio level be maintained for some period of time
  before considering it to be "real"; i.e., some type of low-pass
  filter ought to be applied to the audio levels.  Note, though, that such
  filtering must be balanced with the need to avoid clipping of
  the beginning of a speaker's speech.</t>

<t>Additionally, different participants may have their audio input set
  differently.  It may be useful to apply some sort of automatic gain
  control to the audio levels.  There are a number of possible
  approaches to achieving this, e.g., by measuring peak audio levels,
  by average audio levels during speech, or by measuring background
  audio levels (average audio levels during non-speech).</t>

</section>

<section title='Security Considerations' anchor='security'>

<t>A malicious endpoint could choose to set the values in this
  header extension falsely, so as to falsely claim that audio or voice
  is or is not present.  It is not clear what could be gained by
  falsely claiming that audio is not present, but an endpoint falsely
  claiming that audio is present, or falsely exaggerating
  its reported levels, could perform a denial-of-service
  attack on an audio conference, so as to send silence to suppress
  other conference members' audio, or could dominate a conference by
  seizing its speaker-selection algorithm. Thus, if a device relies on audio
  level data from untrusted endpoints, it SHOULD periodically audit the
  level information transmitted, taking appropriate corrective action
  against endpoints that appear to be sending incorrect data.  (However,
  as it is valid for an endpoint to choose to measure audio levels prior to
  encoding, some degree of discrepancy could be present.  This would not
  indicate that an endpoint is malicious.)</t>

<t>In the <xref target='RFC3711'>Secure Real-time Transport Protocol
    (SRTP)</xref>, RTP header extensions are authenticated but not
    encrypted.  When this header extension is used, audio levels are
    therefore visible on a packet-by-packet basis to an attacker
    passively observing the audio stream.  As discussed in
    <xref target='SRTP-VBR-AUDIO' />, such an attacker
    might be able to infer information about the conversation,
    possibly with phoneme-level resolution.  In scenarios where this is a
    concern, additional mechanisms MUST be used to protect the
    confidentiality of the header extension.  This mechanism could be
    <xref target='SRTP-ENCR-HDR'>header
    extension encryption</xref>, or a lower-level security and
    authentication mechanism such as <xref target="RFC4301">IPsec</xref>.
    </t>
</section>

<section title='IANA Considerations' anchor='iana'>

<t>This document defines a new extension URI in the RTP Compact Header
  Extensions subregistry of the Real-Time Transport Protocol (RTP)
  Parameters registry, according to the following data:</t>

<t>
<list style='hanging'>
<t hangText='Extension URI:'>urn:ietf:params:rtp-hdrext:ssrc-audio-level</t>
<t hangText='Description:'>Audio Level</t>
<t hangText='Contact:'>jonathan@vidyo.com</t>
<t hangText='Reference:'>RFC &rfc.number;</t>
</list>
</t>

</section>

</middle>

<back>
<?rfc rfcedstyle="no"?>
<references title='Normative References'>

&hdrext; <!-- RFC 5285 -->

&red; <!-- RFC 2198 -->

&rfc2119;

&rtp; <!-- RFC 3550 -->

</references>

<references title='Informative References'>

<?rfc include="reference.RFC.3389"?>
<reference anchor="ITU.G711">
  <front>
  <title>Pulse Code Modulation (PCM) of Voice Frequencies</title>
  <author>
    <organization>
      International Telecommunication Union
    </organization>
  </author>
  <date month="November" year="1988" />
  </front>
  <seriesInfo name="ITU-T" value="Recommendation G.711" />
</reference>

&ipsec; <!-- RFC 4301 -->

<!-- draft-ietf-avtext-mixer-to-client-audio-level  -->
<reference anchor='RFC6465'>
<front>
<title>A Real-Time Transport Protocol (RTP) Header Extension for Mixer-to-Client Audio Level Indication</title>
<author initials='E' surname='Ivov' fullname='Emil Ivov' role="editor">
    <organization />
</author>
<author initials='E' surname='Marocco' fullname='Enrico Marocco' role="editor">
    <organization />
</author>
<author initials='J' surname='Lennox' fullname='Jonathan Lennox'>
    <organization />
</author>
<date month='December' year='2011' />
</front>
<seriesInfo name='RFC' value='6465' />
</reference>

&srtp; <!-- RFC 3711 -->

<!-- draft-ietf-avtcore-srtp-encrypted-header-ext ("I-D Exists") -->
<reference anchor='SRTP-ENCR-HDR'>
<front>
<title>Encryption of Header Extensions in the Secure Real-Time Transport Protocol (SRTP)</title>
<author initials='J' surname='Lennox' fullname='Jonathan Lennox'>
    <organization />
</author>
<date month='October' year='2011' />
</front>
<seriesInfo name='Work in' value='Progress' />
</reference>

<!-- draft-ietf-avtcore-srtp-vbr-audio (IESG Evaluation::AD Followup) -->
<reference anchor='SRTP-VBR-AUDIO'>
<front>
<title>Guidelines for the use of Variable Bit Rate Audio with Secure RTP</title>
<author initials='C' surname='Perkins' fullname='Colin Perkins'>
    <organization />
</author>
<author initials='JM' surname='Valin' fullname='Jean-Marc Valin'>
    <organization />
</author>
<date month='July' year='2011' />
</front>
<seriesInfo name='Work in' value='Progress' />
</reference>

</references>
<?rfc rfcedstyle="yes"?>
</back>

</rfc>
