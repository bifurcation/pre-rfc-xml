<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc consensus="yes" ipr="trust200902" category="std" obsoletes="2911, 3381, 3382" number="8011" submissionType="IETF">
  <front>
    <title abbrev="IPP/1.1: Model and Semantics">Internet Printing Protocol/1.1: Model and Semantics</title>

    <author initials="M." surname="Sweet" fullname="Michael Sweet">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <street>MS 111-HOMC</street>
          <city>Cupertino</city>
          <region>CA</region>
          <code>95014</code>
          <country>United States of America</country>
        </postal>
        <email>msweet@apple.com</email>
      </address>
    </author>

    <author initials="I." surname="McDonald" fullname="Ira McDonald">
      <organization>High North, Inc.</organization>
      <address>
        <postal>
          <street>PO Box 221</street>
          <city>Grand Marais</city>
          <region>MI</region>
          <code>49839</code>
          <country>United States of America</country>
        </postal>
        <phone>+1 906-494-2434</phone>
        <email>blueroofmusic@gmail.com</email>
      </address>
    </author>

    <date month="January" year="2017"/>

    <keyword>IPP</keyword>
    <keyword>Printer</keyword>
    <keyword>PWG</keyword>
    <keyword>Printer Working Group</keyword>

    <abstract>
      <t>The Internet Printing Protocol (IPP) is an application-level protocol
      for distributed printing using Internet tools and technologies. This
      document describes a simplified model consisting of abstract objects,
      attributes, and operations that is independent of encoding and
      transport. The model consists of several objects, including Printers
      and Jobs. Jobs optionally support multiple Documents.</t>

      <t>IPP semantics allow End Users and Operators to query Printer
      capabilities; submit Print Jobs; inquire about the status of Print Jobs
      and Printers; and cancel, hold, and release Print Jobs. IPP semantics
      also allow Operators to pause and resume Jobs and Printers.</t>

      <t>Security, internationalization, and directory issues are also
      addressed by the model and semantics. The IPP message encoding and
      transport are described in "Internet Printing Protocol/1.1:
      Encoding and Transport" (RFC 8010).</t>

      <t>This document obsoletes RFCs 2911, 3381, and 3382.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="Sec.Introduction" title="Introduction">
      <t>The Internet Printing Protocol (IPP) is an application-level protocol
      for distributed printing using Internet tools and technologies. IPP
      version 1.1 (IPP/1.1) focuses primarily on End User functionality with a
      few administrative operations included. IPP versions 2.0, 2.1, and 2.2
      provide many new operations and are defined separately.</t>

      <t>This document is just one of a suite of documents that fully define
      IPP. The full set of IETF IPP documents includes:<list style="empty">

        <t>Design Goals for an Internet Printing Protocol <xref
        target="RFC2567" /></t>

        <t>Rationale for the Structure of the Model and Protocol for
        the Internet Printing Protocol <xref target="RFC2568" /></t>

        <t>Internet Printing Protocol/1.1: Model and Semantics (this
        document)</t>

        <t>Internet Printing Protocol/1.1: Encoding and Transport <xref
        target="RFC8010" /></t>

        <t>Internet Printing Protocol/1.1: Implementor&#039;s Guide <xref
        target="RFC3196" /></t>

        <t>Internet Printing Protocol/1.1: IPP URL Scheme <xref
        target="RFC3510" /></t>

        <t>Internet Printing Protocol (IPP) over HTTPS Transport Binding
        and the 'ipps' URI Scheme <xref
        target="RFC7472" /></t>

        <t>Internet Printing Protocol (IPP): Requirements for Job, Printer,
        and Device Administrative Operations <xref target="RFC3239" /></t>

        <t>Internet Printing Protocol (IPP): Job and Printer Set Operations
        <xref target="RFC3380" /></t>

        <t>Internet Printing Protocol (IPP): Job and Printer Administrative
        Operations <xref target="RFC3998" /></t>

        <t>Internet Printing Protocol (IPP): Requirements for IPP Notifications
        <xref target="RFC3997" /></t>

        <t>Internet Printing Protocol (IPP): Event Notifications and
        Subscriptions <xref target="RFC3995" /></t>

        <t>Internet Printing Protocol (IPP): The 'ippget' Delivery Method for
        Event Notifications <xref target="RFC3996" /></t>

        <t>Mapping between LPD and IPP Protocols <xref target="RFC2569" /></t>
      </list></t>
      <t>Anyone reading these documents for the first time is strongly
      encouraged to read the IPP documents in the above order. Additional IPP
      specifications have been published by the IEEE-ISTO Printer Working
      Group's IPP Workgroup <xref target="PWG-IPP-WG" />. The following
      standards are highly recommended reading:<list style="empty">

       <t>PWG Media Standardized Names 2.0 (MSN2) <xref target="PWG5101.1"/></t>
       <t>IPP Finishings 2.0 (FIN) <xref target="PWG5100.1" /></t>
       <t>Internet Printing Protocol (IPP): "output-bin" attribute
          extension <xref target="PWG5100.2"/></t>
       <t>Internet Printing Protocol (IPP): Production Printing Attributes -
          Set 1 <xref target="PWG5100.3"/> (for "media-col" Job Template
          attribute)</t>
       <t>Standard for The Internet Printing Protocol (IPP):
          Document Object <xref target="PWG5100.5" /></t>
       <t>Standard for The Internet Printing Protocol (IPP):
          Page Overrides <xref target="PWG5100.6" /></t>
       <t>Standard for The Internet Printing Protocol (IPP):
          Job Extensions <xref target="PWG5100.7" /></t>
       <t>Standard for Internet Printing Protocol (IPP):
          "-actual" attributes <xref target="PWG5100.8" /></t>
       <t>Internet Printing Protocol (IPP): Printer State
          Extensions v1.0 <xref target="PWG5100.9" /></t>
       <t>Internet Printing Protocol (IPP): Job and Printer
          Extensions - Set&nbsp;2 (JPS2) <xref target="PWG5100.11" /></t>
       <t>IPP Version 2.0, 2.1, and 2.2 <xref target="PWG5100.12" /></t>
       <t>IPP: Job and Printer Extensions - Set 3 (JPS3) <xref
       target="PWG5100.13" /></t>
       <t>IPP Everywhere <xref target="PWG5100.14" /></t>
       <t>IPP FaxOut Service <xref target="PWG5100.15" /></t>
       <t>IPP Transaction-Based Printing Extensions
          <xref target="PWG5100.16"/></t>
       <t>IPP Scan Service (SCAN) <xref target="PWG5100.17" /></t>
       <t>IPP Shared Infrastructure Extensions (INFRA)
          <xref target="PWG5100.18" /></t>
       <t>IPP Implementor's Guide v2.0 (IG) <xref target="PWG5100.19" /></t>
      </list></t>
      <t>This document is organized as follows:<list style="symbols">
        <t>The rest of <xref target="Sec.Introduction" /> is an introduction
        to the IPP simplified model for distributed printing;</t>

        <t><xref target="Sec.Conventions" /> defines the terminology and
        conventions used within this document;</t>

        <t><xref target="Sec.IPPObjects" /> introduces the object types
        covered in this document with their basic behaviors, attributes, and
        interactions;</t>

        <t><xref target="Sec.IPPOperations" /> defines the core operations for
        IPP/1.1. IPP operations are synchronous -- each operation has both a
        request and a response;</t>

        <t><xref target="Sec.ObjectAttributes" /> defines the core attributes
        (and their syntaxes) that are used in the model;</t>

        <t>Sections <xref target="Sec.Conformance" format="counter" />
        and <xref target="Sec.IANAConsiderations" format="counter" />
        summarize the implementation conformance requirements for objects
        that support the protocol and IANA considerations, respectively;</t>

        <t>Sections <xref target="Sec.InternationalizationConsiderations"
        format="counter" /> and <xref target="Sec.SecurityConsiderations"
        format="counter" /> cover the internationalization and security
        considerations for IPP; and</t>

        <t>The appendices provide a reference for status-code values,
        processing of IPP attributes, and the generic directory schema.</t>

      </list></t>
      <section anchor="Sec.SimplifiedPrintingModel" title="Simplified Printing Model">
        <t>In order to achieve its goal of realizing a workable printing
        protocol for the Internet, the Internet Printing Protocol (IPP) is
        based on a simplified printing model that abstracts the many
        components of real&nbhy;world printing solutions. The Internet is a
        distributed computing environment where requesters of print services
        (Clients, applications, Printer drivers, etc.) cooperate and interact
        with print service providers. This document (sometimes referred to
        here as the &quot;Model and Semantics&quot; document) describes a
        simple, abstract model for IPP even though the underlying
        configurations can be complex &quot;n-tier&quot; client/server
        systems. An important simplifying step in the IPP Model is to expose
        only the key objects and interfaces required for printing. The model
        described in this document does not include features, interfaces, and
        relationships that are beyond the scope of IPP/1.1. IPP/1.1
        incorporates many of the relevant ideas and lessons learned from other
        specification and development efforts <xref target="HTPP" /> <xref
        target="ISO10175" /> <xref target="LDPA" /> <xref target="P1387.4" />
        <xref target="PSIS" /> <xref target="RFC1179" /> <xref target="SWP"/>.
        IPP is heavily influenced by the printing model introduced in the
        Document Printing Application (DPA) <xref target="ISO10175" />
        standard. Although DPA specifies both End User and administrative
        features, IPP/1.1 focuses primarily on End User functionality
        with a few additional OPTIONAL operations for Administrators and
        Operators.</t>

        <t>The IPP Model encapsulates the important components of distributed
        printing into the following IPP object types:</t>

        <t><list style="symbols">
          <t>Printer (<xref target="Sec.PrinterObject" />)</t>
          <t>Job (<xref target="Sec.JobObject" />)</t>
          <t>Document (see <xref target="PWG5100.5" />)</t>
          <t>Subscription (see <xref target="RFC3995" />)</t>
        </list></t>
        <t>Each object type has an associated set of operations (see <xref
        target="Sec.IPPOperations" />) and attributes (see <xref
        target="Sec.ObjectAttributes" />).</t>

        <t>It is important, however, to understand that in real system
        implementations (which lie underneath the abstracted IPP Model), there
        are other components of a print service that are not explicitly
        defined in the IPP Model. The following figure illustrates where IPP
        fits with respect to these other components.</t>

        <figure anchor="Fig.IPPModel" title="IPP Model"><artwork>
                             +----------------+
                             |   Application  |
                   o         + . . . . . . .  |
                  \|/        |    Spooler     |
                  / \        + . . . . . . .  |   +---------+
                End User     | Printer Driver |---|  File   |
      +-----------+ +-----+  +-------+--------+   +----+----+
      |  Browser  | | GUI |          |                 |
      +-----+-----+ +--+--+          |                 |
            |          |             |                 |
            |      +---+-------------+--+              |
N   D   S   |      |      IPP Client    |--------------+
O   I   E   |      +---------+----------+
T   R   C   |                |
I   E   U   |
F   C   R   -------------- Transport -------------------
I   T   I
C   O   T                    |         --+
A   R   Y           +--------+--------+  |
T   Y               |    IPP Server   |  |
I                   +--------+--------+  |
O                            |           |
N                   +-----------------+  | IPP Printer
                    |  Print Service  |  |
                    +-----------------+  |
                             |         --+
                    +-----------------+
                    | Output Device(s)|
                    +-----------------+
</artwork></figure>
        <t>An IPP Printer object ("Printer") encapsulates the functions
        normally associated with physical Output Devices along with the
        spooling, scheduling, and multiple device management functions often
        associated with a print server. Printers are optionally registered as
        entries in a directory where End Users find and select them based on
        some sort of filtered context-based searching mechanism (see <xref
        target="Sec.APPENDIXEGenericDirectorySchema" />). The directory is
        used to store relatively static information about the Printer,
        allowing End Users to search for and find Printers that match their
        search criteria -- for example, name, location, context, Printer
        capabilities, etc. The more dynamic information, such as state,
        currently loaded and ready media, number of Jobs at the Printer,
        errors, warnings, and so forth, is directly associated with the
        Printer itself rather than with the entry in the directory, which
        only references the Printer.</t>

        <t>IPP Clients ("Clients") implement IPP on the Client side and
        give End Users (or programs running on behalf of End Users)
        the ability to query Printers and submit and manage Print Jobs. An IPP
        server is just that part of the Printer object that implements the
        server-side protocol. The rest of the Printer object implements (or
        gateways into) the application semantics of the print service
        itself. Printers can be embedded in an Output Device or can be
        implemented on a host on the network that communicates with an Output
        Device.</t>

        <t>When a Job is submitted to the Printer and the Printer has
        validated the attributes in the submission request, the Printer
        creates a new IPP Job object ("Job"). The End User then interacts with
        this new Job to query its status and monitor the progress of the
        Job. &nbsp;An End User can also cancel their Print Jobs by using the
        Job&#039;s Cancel-Job operation. An End User can also hold, release,
        and restart their Print Jobs using the Job&#039;s OPTIONAL Hold-Job,
        Release-Job, and Restart-Job operations, if implemented.</t>

        <t>A privileged Operator or Administrator of a Printer can cancel,
        hold, release, and restart any user&#039;s Job using the REQUIRED
        Cancel-Job and the OPTIONAL Hold-Job, Release-Job, and Restart-Job
        operations. In addition, a privileged Operator or Administrator of a
        Printer can pause, resume, or purge (Jobs from) a Printer using the
        OPTIONAL Pause-Printer, Resume-Printer, and Purge-Jobs operations, if
        implemented.</t>

        <t>The notification service is defined in "Internet Printing Protocol
        (IPP): Event Notifications and Subscriptions" <xref
        target="RFC3995"/>. By using such a notification service, the
        End User is able to register for and receive Printer-specific and
        Job-specific events asynchronously. Otherwise, an End User can query
        the status of Printers and can follow the progress of Jobs by polling
        using the Get&nbhy;Printer&nbhy;Attributes, Get-Jobs, and
        Get-Job-Attributes operations.</t>

      </section>
    </section>
    <section anchor="Sec.Conventions" title="Conventions Used in This Document">
      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref target="RFC2119"/>.</t>

        <t>The key word "DEPRECATED" in this document refers to an operation,
        attribute, or value that SHOULD NOT be used or supported in new
        implementations.</t>

      </section>
      <section title="Printing Terminology">
        <t>Client: Initiator of outgoing IPP session requests and sender of
        outgoing IPP operation requests (Hypertext Transfer Protocol
        (HTTP/1.1) user agent, as defined in <xref target="RFC7230"/>).</t>

        <t>Document: An object created and managed by a Printer that contains
        description, processing, and status information. A Document object can
        have attached data and is bound to a single Job <xref
        target="PWG5100.5" />.</t>

        <t>'ipp' URI:  An IPP URI as defined in <xref target="RFC3510" />.</t>

        <t>'ipps' URI:  An IPP URI as defined in <xref target="RFC7472" />.</t>

        <t>Job: An object created and managed by a Printer that contains
        description, processing, and status information. The Job also contains
        zero or more Document objects.</t>

        <t>Logical Device: A print server, software service, or gateway that
        processes Jobs and either forwards or stores the processed Job or uses
        one or more Physical Devices to render output.</t>

        <t>Output Device: A single Logical or Physical Device.</t>

        <t>Physical Device: A hardware implementation of an endpoint device,
        e.g., a marking engine, a fax modem, etc.</t>

        <t>Printer: Listener for incoming IPP session requests and receiver of
        incoming IPP operation requests (HTTP/1.1 server, as defined
        in <xref target="RFC7230"/>) that represents one or more
        Physical Devices or a Logical Device.</t>
      </section>

      <section anchor="Sec.ModelTerminology" title="Model Terminology">
        <section anchor="Sec.Administrator" title="Administrator">
          <t>An End User who is also authorized to manage all aspects of an
          Output Device or Printer, including creating the Printer instances
          and controlling the authorization of other End Users and Operators
          <xref target="RFC2567" />.</t>

        </section>
        <section anchor="Sec.Attributes2" title="Attributes">
          <t>An attribute is an item of information that is associated with an
          instance of an IPP object (Printer, Job, etc.). An attribute consists
          of an attribute name and one or more attribute values. Each
          attribute has a specific attribute syntax. All object attributes are
          defined in <xref target="Sec.ObjectAttributes"/>, and all operation
          attributes are defined in <xref target="Sec.IPPOperations" />.</t>

          <t>Job Template attributes are described in <xref
          target="Sec.JobTemplateAttributes" />. The Client optionally
          supplies Job Template attributes in a Job Creation request
          (operation requests that create Job objects). The Printer object has
          associated attributes that define supported and default values for
          the Printer.</t>

          <section anchor="Sec.AttributeGroupName" title="Attribute Group Name">
            <t>Related attributes are grouped into named groups. The name of
            the group is a keyword. The group name can be used in place of
            naming all the attributes in the group explicitly. Attribute
            groups are defined in <xref target="Sec.IPPOperations" />.</t>

          </section>
          <section anchor="Sec.AttributeName" title="Attribute Name">
            <t>Each attribute is uniquely identified in this document by its
            attribute name. An attribute name is a keyword. The keyword
            attribute name is given in the section title in this document
            that describes that attribute. In running text in this document,
            attribute names are indicated inside double quotation marks
            (&quot;) where the quotation marks are not part of the keyword
            itself.</t>

          </section>
          <section anchor="Sec.AttributeSyntax" title="Attribute Syntax">
            <t>Each attribute is defined using an explicit syntax type. In
            this document, each syntax type is defined as a keyword with
            specific meaning. The &quot;Encoding and Transport&quot; document
            <xref target="RFC8010" /> indicates the actual
            &quot;on-the-wire&quot; encoding rules for each syntax
            type. Attribute syntax types are defined in <xref
            target="Sec.AttributeSyntaxes" />.</t>

          </section>
          <section anchor="Sec.AttributeValue" title="Attribute Value">
            <t>Each attribute has one or more values. Attribute values are
            represented in the syntax type specified for that attribute. In
            running text in this document, attribute values are indicated
            inside single quotation marks (&#039;), whether their attribute
            syntax is keyword, integer, text, etc. where the quotation marks
            are not part of the value itself.</t>

          </section>
        </section>
        <section anchor="Sec.EndUser" title="End User">
          <t>An End User is a person or software process that is authorized
          to perform basic printing functions, including finding/locating a
          Printer, creating a local instance of a Printer, viewing Printer
          status, viewing Printer capabilities, submitting a Print Job,
          viewing Print Job status, and altering the attributes of a
          Print Job <xref target="RFC2567"/>.</t>

        </section>
        <section anchor="Sec.impression" title="Impression">
          <t>An Impression is the content imposed upon one side of a
          Media Sheet by a marking engine, independent of the number of
          times that the sheet side passes any marker. An Impression contains
          one or more Input Pages that are imposed (scaled, translated,
          and/or rotated) during processing of the Document data.</t>

        </section>
        <section anchor="Sec.printstreampage" title="Input Page">
          <t>An Input Page is a page according to the definition of
          &quot;pages&quot; in the language used to express the
          Document data.</t>
        </section>
        <section anchor="Sec.jobcreationoperation" title="Job Creation Operation">
          <t>A Job Creation operation is any operation that causes the
          creation of a Job object, e.g., the Create-Job, Print-Job, and
          Print-URI operations defined in this document.</t>

        </section>
        <section anchor="Sec.Keyword" title="Keyword">
          <t>Keywords are used within this document as identifiers of
          semantic entities within the abstract model
          (see <xref target="Sec.keyword" />). Attribute names, some
          attribute values, attribute syntaxes, and attribute group names are
          represented as keywords.</t>

        </section>
        <section anchor="Sec.mediasheet" title="Media Sheet">
          <t>A Media Sheet is a single instance of a medium,
          whether printing on one or both sides of the medium. Media Sheets
          also include sections of roll media.</t>

        </section>
        <section anchor="Sec.Operator" title="Operator">
          <t>An Operator is an End User that also has special rights on
          the Output Device or Printer. The Operator typically monitors
          the status of the Printer and also manages and controls the Jobs at
          the Output Device <xref target="RFC2567" />. The Operator is
          allowed to query and control the Printer, Jobs, and Documents
          based on site policy.</t>

        </section>
        <section anchor="Sec.set" title="Set">
          <t>A Set is a logical boundary between the delivered Media Sheets
          of a printed Job. &nbsp;For example, in the case of a
          ten&nbhy;page single Document with collated pages and a request for
          50 copies, each of the 50 printed copies of the Document constitutes
          a Set. &nbsp;If the pages were uncollated, then 50 copies of each
          of the individual pages within the Document would represent each
          Set. &nbsp;Finishing processes operate on Sets.</t>

        </section>
        <section anchor="Sec.Support" title="Support of Attributes">
          <t>By definition, a Printer supports an attribute only if that
          Printer accepts it in a request or responds with the corresponding
          attribute populated with some value(s) in a response to a query for
          that attribute. A Printer supports an attribute value if the value
          is one of the Printer&#039;s &quot;supported values&quot;
          attributes. The device behind a Printer can exhibit a behavior that
          corresponds to some IPP attribute, but if the Printer, when queried
          for that attribute, doesn&#039;t respond with the attribute, then as
          far as IPP is concerned, that implementation does not support that
          feature. If the Printer&#039;s &quot;xxx-supported&quot; attribute
          is not populated with a particular value (even if that value is a
          legal value for that attribute), then that Printer does not support
          that particular value.</t>

          <t>A conforming implementation supports all REQUIRED
          attributes. However, even for REQUIRED attributes, conformance to
          IPP does not mandate that all implementations support all possible
          values representing all possible Job processing behaviors and
          features. For example, if a given instance of a Printer supports
          only certain Document formats, then that Printer responds with the
          &quot;document&nbhy;format&nbhy;supported&quot; attribute
          populated with a set of values, or possibly only one value,
          taken from the entire set of possible values defined for that
          attribute. This limited set of values represents the
          Printer&#039;s set of supported Document formats. Supporting
          an attribute and some set of values for that attribute enables
          IPP End Users to be aware of and make use of those
          features associated with that attribute and those values. If an
          implementation chooses to not support an attribute or some specific
          value, then IPP End Users would have no ability to make use of that
          feature within the context of IPP itself. However, due to existing
          practice and legacy systems that are not IPP aware, there might be
          some other mechanism outside the scope of IPP to control or request
          the &quot;unsupported&quot; feature (such as embedded instructions
          within the Document data itself).</t>

          <t>For example, consider the following for the
          &quot;finishings-supported&quot; attribute.</t>
          <t><list style="format %d)">
          <t>If a Printer is not physically capable of stapling, the
          &quot;finishings-supported&quot; attribute MUST NOT be populated
          with the value of &#039;staple&#039;.</t>

          <t>A Printer is physically capable of stapling; however, an
          implementation chooses not to support stapling in the IPP
          &quot;finishings&quot; attribute. In this case, &#039;staple&#039;
          MUST NOT be a value in the &quot;finishings-supported&quot; Printer
          Description attribute. Without support for the value
          &#039;staple&#039;, an IPP End User would have no means within the
          protocol itself to request that a Job be stapled. However, an
          existing Document data formatter might be able to request that the
          Document be stapled directly with an embedded instruction within the
          Document data. In this case, the IPP implementation does not
          &quot;support&quot; stapling; however, the End User is still able to
          have some control over the stapling of the completed Job.</t>

          <t>A Printer is physically capable of stapling, and an
          implementation chooses to support stapling in the IPP
          &quot;finishings&quot; attribute. In this case, &#039;staple&#039;
          MUST be a value in the &quot;finishings-supported&quot; Printer
          attribute. Doing so enables End Users to be aware of and make use of
          the stapling feature using IPP attributes.</t>
        </list></t>

          <t>Even though support for Job Template attributes by a Printer is
          OPTIONAL in IPP/1.1, Printers whose associated device(s) is capable
          of realizing any feature or function that corresponds to an IPP
          attribute and some associated value SHOULD support that IPP
          attribute and value.</t>

          <t>The set of values in any of the supported value attributes is set
          (populated) by some administrative process or automatic sensing
          mechanism that is outside the scope of this document. For
          administrative policy and control reasons, an Administrator can
          choose to make only a subset of possible values visible to the End
          User. In this case, the real Output Device behind the IPP Printer
          abstraction can be capable of a certain feature; however, an
          Administrator is specifying that access to that feature not be
          exposed to the End User through IPP. Also, since a Printer can
          represent a logical print device (not just a Physical Device),
          the actual process for supporting a value is undefined and
          left up to the implementation. However, if a Printer supports a
          value, some manual human action might be needed to realize the
          semantic action associated with the value, but no End User action is
          required.</t>

          <t>For example, if one of the values in the
          &quot;finishings-supported&quot; attribute is &#039;staple&#039;,
          the actual process might be an automatic staple action by a
          Physical Device controlled by some command sent to the device. Or,
          the actual process of stapling might be a manual action by an
          Operator at an Operator-attended Printer.</t>

          <t>For another example of how supported attributes function,
          consider an Administrator who desires to control all Print Jobs so
          that no Job sheets are printed in order to conserve paper. To force
          no Job sheets, the Administrator sets the only supported value for
          the &quot;job&nbhy;sheets&nbhy;supported&quot; attribute to
          &#039;none&#039;. In this case, if a Client requests anything except
          &#039;none&#039;, the Job Creation request is rejected or the
          &quot;job-sheets&quot; value is ignored (depending on the value of
          &quot;ipp-attribute-fidelity&quot;). To force the use of Job
          start/end sheets on all Jobs, the Administrator does not include the
          value &#039;none&#039; in the &quot;job-sheets-supported&quot;
          attribute. In this case, if a Client requests &#039;none&#039;, the
          Job Creation request is rejected or the &quot;job-sheets&quot; value
          is ignored (again depending on the value of
          &quot;ipp&nbhy;attribute&nbhy;fidelity&quot;).</t>

          <t>Job Template attributes will typically have corresponding
          "xxx&nbhy;supported" and "xxx-default" Printer Description attributes
          that contain the supported and default values for the attribute. For
          capabilities that are not associated with a Job, the convention is
          to have an "xxx-supported" Printer Description attribute that lists
          the supported values and an "xxx-configured" Printer Description
          attribute that contains the value being used by the Printer. For
          example, the "charset-supported" Printer Description attribute
          (<xref target="Sec.charsetsupported1setOfcharset" />) lists the
          supported character sets for the Printer while the
          "charset-configured" Printer Description attribute (<xref
          target="Sec.charsetconfiguredcharset" />) specifies the character
          set being used by the Printer.</t>

        </section>
        <section anchor="Sec.TerminatingState" title="Terminating State">
          <t>The final state for a Job or other object is called its
          Terminating State. For example, the 'aborted', 'canceled', and
          'completed' Job states are Terminating States.</t>

        </section>
      </section>
      <section title="Abbreviations">
        <t>ABNF: Augmented Backus-Naur Form <xref target="RFC5234" /></t>
        <t>ASCII: American Standard Code for Information Interchange <xref target="RFC20" /></t>
        <t>HTTP: Hypertext Transfer Protocol <xref target="RFC7230" /></t>
        <t>HTTPS: HTTP over TLS <xref target="RFC2818" /></t>
        <t>IANA: Internet Assigned Numbers Authority</t>
        <t>IEEE: Institute of Electrical and Electronics Engineers</t>
        <t>IESG: Internet Engineering Steering Group</t>
        <t>IPP: Internet Printing Protocol (this document, <xref target="RFC8010" />, and <xref target="PWG5100.12" />)</t>
        <t>ISTO: IEEE Industry Standards and Technology Organization</t>
        <t>LPD: Line Printer Daemon Protocol <xref target="RFC1179" /></t>
        <t>PWG: IEEE-ISTO Printer Working Group</t>
        <t>RFC: Request for Comments</t>
        <t>TCP: Transmission Control Protocol <xref target="RFC793" /></t>
        <t>TLS: Transport Layer Security <xref target="RFC5246" /></t>
        <t>URI: Uniform Resource Identifier <xref target="RFC3986" /></t>
        <t>URL: Uniform Resource Locator <xref target="RFC3986" /></t>
        <t>UTF-8: Unicode Transformation Format - 8-bit <xref target="RFC3629" /></t>
      </section>
    </section>
    <section anchor="Sec.IPPObjects" title="IPP Objects">
      <t>This document defines IPP objects of types Printer and Job. &nbsp;Each
      type of object models relevant aspects of a real-world entity such as a
      real Printer or real Print Job. &nbsp;Each object type is defined as a
      set of possible attributes that can be supported by instances of that
      object type. For each object (instance), the actual set of supported
      attributes and values describe a specific implementation. The
      object&#039;s attributes and values describe its state, capabilities,
      realizable features, Job processing functions, and default behaviors and
      characteristics. For example, the Printer object type is defined as a
      set of attributes that each Printer object potentially supports. In the
      same manner, the Job object type is defined as a set of attributes that
      are potentially supported by each Job object.</t>

      <t>Each attribute included in the set of attributes defining an object
      type is labeled as:<list style="symbols">

        <t>&quot;REQUIRED&quot;: each object MUST support the attribute.</t>
        <t>&quot;RECOMMENDED&quot;: each object SHOULD support the attribute.</t>
        <t>&quot;OPTIONAL&quot;: each object MAY support the attribute.</t>
      </list></t>
      <t>Some definitions of attribute values indicate that an object MUST or
      SHOULD support the value; otherwise, support of the value is
      OPTIONAL. However, if an implementation supports an attribute, it MUST
      support at least one of the possible values for that attribute.</t>

      <section anchor="Sec.PrinterObject" title="Printer Object">
        <t>The major component of the IPP Model is the Printer object. A
        Printer object implements the server side of the IPP/1.1
        protocol. Using the protocol, End Users can query the attributes of
        the Printer object and submit Print Jobs to the Printer object. The
        actual implementation components behind the Printer abstraction can
        take on different forms and different configurations. However, the
        model abstraction allows the details of the configuration of real
        components to remain opaque to the End User. <xref
        target="Sec.IPPOperations" /> describes each of the Printer operations
        in detail.</t>

        <t>The capabilities and state of a Printer object are described by its
        attributes. Printer attributes are divided into two groups:<list
        style="symbols">

          <t>&quot;job-template&quot; attributes: These attributes describe
          supported Job processing capabilities and defaults for the Printer
          object (see <xref target="Sec.JobTemplateAttributes" />)</t>

          <t>&quot;printer-description&quot; attributes: These attributes
          describe the Printer's identification, state, location, references
          to other sources of information about the Printer object, etc. (see
          <xref target="Sec.PrinterDescriptionandStatusAttributes" />)</t>

        </list></t>
        <t>Since a Printer object is an abstraction of a generic Document
        Output Device and print service provider, a Printer object could be
        used to represent any real or virtual device with semantics consistent
        with the Printer object, such as a fax device, an imager, or even a CD
        writer.</t>

        <t>Some examples of configurations supporting a Printer object
        include:<list style="numbers">

          <t>An Output Device with no spooling capabilities</t>
          <t>An Output Device with a built-in spooler</t>
          <t>A print server supporting IPP with one or more associated Output
          Devices<list style="format 3%c.">

            <t>The associated Output Devices are or are not capable of
            spooling Jobs</t>

            <t>The associated Output Devices possibly support IPP</t>
          </list></t>
        </list></t>
        <t><xref target="Fig.IPPPrinterObjectArchitecture" /> shows some
        examples of how Printers can be realized on top of various distributed
        printing configurations. The embedded case below represents
        configurations 1 and 2 above. The &quot;hosted Printer&quot; and
        &quot;fan&nbsp;out&quot; items represent configurations 3a and
        3b, respectively.</t>

        <t>In this document, the term &quot;Client&quot; refers to a software
        entity that sends IPP operation requests to an IPP Printer and accepts
        IPP operation responses. A Client MAY be:<list style="numbers">

          <t>contained within software controlled by an End User,
          e.g., activated by the &quot;Print&quot; menu item in an
          application, or</t>

          <t>the print server component that sends IPP requests to either an
          Output Device or another &quot;downstream&quot; print server.</t>

        </list></t>
        <t>The term &quot;IPP Printer&quot; is a network entity that accepts
        IPP operation requests and returns IPP operation responses. As such,
        an IPP Printer object MAY be:<list style="numbers">

          <t>an (embedded) device component that accepts IPP requests and
          controls the device, or</t>

          <t>a component of a print server that accepts IPP requests (where
          the print server controls one or more networked devices using IPP or
          other protocols).</t>

        </list></t>
        <figure anchor="Fig.IPPPrinterObjectArchitecture" title="IPP Printer Object Architecture">
          <artwork>
Legend:

##### indicates a Printer object that is
      either embedded in an Output Device or
      hosted in a server.  The Printer object
      might or might not be capable of queuing/spooling.

any   indicates any network protocol or direct
      connect, including IPP

embedded Printer:
                                          Output Device
                                        +---------------+
 O   +--------+                         |  ###########  |
/|\  | Client |------------IPP------------&gt;# Printer #  |
/ \  +--------+                         |  # Object  #  |
                                        |  ###########  |
                                        +---------------+
hosted Printer:
                                        +---------------+
 O   +--------+        ###########      |               |
/|\  | Client |--IPP--&gt;# Printer #-any-&gt;| Output Device |
/ \  +--------+        # Object  #      |               |
                       ###########      +---------------+
                                         +---------------+
fan out:                                 |               |
                                     +--&gt;| Output Device |
                                 any/    |               |
 O   +--------+      ###########   /     +---------------+
/|\  | Client |-IPP-&gt;# Printer #--*
/ \  +--------+      # Object  #   \     +---------------+
                     ########### any\    |               |
                                     +--&gt;| Output Device |
                                         |               |
                                         +---------------+
          </artwork>
        </figure>
      </section>

      <section anchor="Sec.JobObject" title="Job Object">
        <t>A Job object is used to model a Print Job. &nbsp;A Job object contains
        zero or more Documents. The information required to create a Job
        object is sent in a Job Creation request from the End User via an IPP
        Client to the Printer. The Printer validates the Job Creation request,
        and if the Printer accepts the request, the Printer creates the new
        Job object. <xref target="Sec.IPPOperations" /> describes each of the
        Job operations in detail.</t>

        <t>The characteristics and state of a Job object are described by its
        attributes. Job attributes are grouped into two groups as
        follows:<list style="symbols">

          <t>&quot;job-template&quot; attributes: These attributes can be
          supplied by the Client or End User and include Job processing
          instructions that are intended to override any Printer defaults
          and/or instructions embedded within the Document data (see <xref
          target="Sec.JobTemplateAttributes" />)</t>

          <t>&quot;job-description&quot; attributes: These attributes describe
          the Job's identification, state, size, etc. The Client supplies some
          of these attributes, and the Printer generates others (see <xref
          target="Sec.JobDescriptionandStatusAttributes" />)</t>

        </list></t>
        <t>An implementation MUST support at least one Document per Job
        object. An implementation MAY support multiple Documents per Job
        object. A Document is either:<list style="symbols">

          <t>a stream of Document data in a format supported by the Printer
          (typically a Page Description Language -- PDL), or</t>

          <t>a reference to such a stream of Document data.</t>
        </list></t>
        <t>All Job processing instructions are modeled as Job object
        attributes. These attributes are called &quot;Job Template
        attributes&quot;, and they apply equally to all Documents within a
        Job object.</t>

      </section>
      <section anchor="Sec.ObjectRelationships" title="Object Relationships">
        <t>IPP objects have relationships that are maintained persistently
        along with the persistent storage of the object attributes.</t>

        <t>A Printer object can represent either one or more physical Output
        Devices or a Logical Device that &quot;processes&quot; Jobs but never
        actually uses a physical Output Device to put marks on paper. Examples
        of Logical Devices include a web page publisher or a gateway into an
        online Document archive or repository. A Printer contains zero or more
        Job objects.</t>

        <t>A Job object is contained by exactly one Printer; however, the
        identical Document data associated with a Job could be sent to either
        the same or a different Printer. In this case, a second Job object
        would be created that would be almost identical to the first Job;
        however, it would have new (different) Job object identifiers (see
        <xref target="Sec.ObjectIdentity" />).</t>

        <t>A Job either is empty (before any Documents have been added) or
        contains one or more Documents. If the contained Document is a stream
        of Document data, that stream can be contained in only one
        Document. However, there can be identical copies of the stream in
        other Documents in the same or different Jobs. If the contained
        Document is just a reference to a stream of Document data, other
        Documents (in the same or different Job(s)) contain the same
        reference.</t>

      </section>
      <section anchor="Sec.ObjectIdentity" title="Object Identity">
        <t>All IPP objects (Printers, Jobs, etc.) are identified by a Uniform
        Resource Identifier (URI) <xref target="RFC3986" /> so that they can
        be persistently and unambiguously referenced. Since every URL is a
        specialized form of a URI, even though the more generic term "URI" is
        used throughout the rest of this document, its usage is intended to
        cover the more specific notion of "URL" as well.</t>

        <t>An Administrator configures Printers to either support or not
        support authentication and/or message privacy using Transport Layer
        Security (TLS) <xref target="RFC5246" />; the mechanism for security
        configuration is outside the scope of this document. In some
        situations, both types of connections (both authenticated and
        unauthenticated) can be established using a single communication
        channel that has some sort of negotiation mechanism. In other
        situations, multiple communication channels are used, one for each
        type of security configuration. <xref
        target="Sec.SecurityConsiderations" /> provides a full description of
        all security considerations and configurations.</t>

        <t>If a Printer supports more than one communication channel, some or
        all of those channels might support and/or require different security
        mechanisms. In such cases, an Administrator could expose the
        simultaneous support for these multiple communication channels as
        multiple URIs for a single Printer where each URI represents one of
        the communication channels to the Printer. To support this
        flexibility, the IPP Printer object type defines a multi-valued
        identification attribute called the &quot;printer-uri-supported&quot;
        attribute that MUST contain at least one URI. The
        &quot;printer-uri-supported&quot; attribute has two companion
        attributes, the &quot;uri-security-supported&quot; attribute and the
        &quot;uri-authentication-supported&quot; attribute. Both have the same
        cardinality as &quot;printer-uri-supported&quot;. The purpose of the
        &quot;uri-security-supported&quot; attribute is to indicate the
        security mechanisms (if any) used for each URI listed in
        &quot;printer&nbhy;uri&nbhy;supported&quot;. The purpose of the
        &quot;uri&nbhy;authentication&nbhy;supported&quot; attribute is to
        indicate the authentication mechanisms (if any) used for each
        URI listed in &quot;printer&nbhy;uri&nbhy;supported&quot;. These
        three attributes are fully described in
        Sections&nbsp;<xref target="Sec.printerurisupported1setOfuri"
        format="counter" />, <xref
        target="Sec.uriauthenticationsupported1setOftype2keyword"
        format="counter" />, and <xref
        target="Sec.urisecuritysupported1setOftype2keyword" format="counter"/>.
        </t>

        <t>When a Job is submitted to the Printer via a Job Creation request,
        the Client supplies only a single Printer URI. The Client&nbhy;supplied
        Printer URI MUST be one of the values in the
        &quot;printer-uri-supported&quot; Printer attribute.</t>

        <t>IPP/1.1 does not specify how the Client obtains the
        Client&nbhy;supplied URI, but it is RECOMMENDED that a Printer be
        registered as an entry in a directory service. End Users and
        programs can then interrogate the directory, searching for Printers.
        <xref target="Sec.APPENDIXEGenericDirectorySchema"/> defines a generic
        schema for Printer object entries in the directory service and
        describes how the entry acts as a bridge to the actual IPP
        Printer. The entry in the directory that represents the IPP Printer
        includes the possibly many URIs for that Printer as values in one of
        its attributes.</t>

        <t>When a Client submits a Job Creation request to the Printer, the
        Printer validates the request and creates a new Job object. The
        Printer assigns the new Job a numeric identifier that is stored in
        the "job-id" Job attribute and a URI that is stored in the
        &quot;job-uri&quot; Job attribute. Both the numeric identifier and URI
        can then be used by Clients as the target for subsequent Job
        operations; the numeric identifier is preferred. The Printer generates
        the Job numeric identifier and URI based on its configured security
        policy and the URI used by the Client in the Job Creation request.</t>

        <t>For example, consider a Printer that supports both a communication
        channel secured by the use of TLS (using HTTP over TLS with an
        &quot;https&quot; schemed URI) and another open communication channel
        that is not secured with TLS (using a simple &quot;http&quot; schemed
        URI). If a Client submits a Job using the secure URI, the Printer
        assigns the new Job a secure URI as well. If a Client were to submit a
        Job using the open-channel URI, the Printer might assign the new Job
        an open&nbhy;channel URI. Clients SHOULD use the "printer-uri" and
        "job-id" attributes to target a Job to avoid any ambiguity about the
        security of the communication channel.</t>

        <t>In addition, the Printer also populates the Job&#039;s
        &quot;job-printer-uri&quot; attribute. This is a reference back to the
        Printer that created the Job. &nbsp;If a Client only has access to a
        Job&#039;s &quot;job-uri&quot; identifier, the Client can query the
        Job&#039;s &quot;job-printer-uri&quot; attribute in order to determine
        which Printer created the Job. &nbsp;If the Printer supports more than
        one URI, the Printer picks the one URI supplied by the Client when
        creating the Job to build the value for and to populate the Job&#039;s
        &quot;job-printer-uri&quot; attribute.</t>

        <t>In addition to identifiers, IPP objects have names --
        &quot;printer-name&quot; for Printers and &quot;job-name&quot; for
        Jobs. An object name is not guaranteed to be unique across all
        instances of all objects. A Printer&#039;s name is chosen and set by
        an Administrator through some mechanism outside the scope of this
        document. A Job&#039;s name can be chosen and supplied by the Client
        submitting the Job. &nbsp;If the Client does not supply a Job name, the
        Printer generates a name for the new Job. &nbsp;In all cases, the
        name only has local meaning.</t>

        <t>To summarize:</t>
        <t><list style="symbols">
          <t>Each Printer is identified by one or more URIs. The
          Printer&#039;s &quot;printer-uri-supported&quot; attribute
          contains the URI(s).</t>

          <t>The Printer&#039;s &quot;uri-security-supported&quot; attribute
          identifies the communication channel security protocols that have
          been configured for the various Printer URIs (e.g., &#039;tls&#039;
          or &#039;none&#039;).</t>

          <t>The Printer&#039;s &quot;uri-authentication-supported&quot;
          attribute identifies the authentication mechanisms that have been
          configured for the various Printer URIs (e.g., &#039;digest&#039;,
          &#039;none&#039;, etc.).</t>

          <t>Each Job is identified by a numeric identifier, which is a
          32&nbhy;bit positive integer. The Job&#039;s &quot;job-id&quot;
          attribute contains the Job&nbsp;ID. The Job ID is only unique
          within the context of the Printer that created the Job.</t>

          <t>Each Job is also identified by a URI. The Job&#039;s
          &quot;job-uri&quot; attribute contains the URI, although its use by
          Clients is DEPRECATED.</t>

          <t>Each Job has a &quot;job-printer-uri&quot; attribute, which
          contains the URI of the Printer that was used to create the
          Job. &nbsp;This attribute is used to determine the Printer that
          created a Job when given only the URI for the Job. &nbsp;This
          linkage is necessary to determine the languages, charsets, and
          operations that are supported on that Job (the basis for such
          support comes from the creating Printer).</t>

          <t>Each Printer has a name, which is not necessarily unique. The
          Administrator chooses and sets this name through some mechanism
          outside the scope of this IPP/1.1 document. The Printer's
          &quot;printer-name&quot; attribute contains the name.</t>

          <t>Each Job has a name, which is not necessarily unique. The Client
          optionally supplies this name in the Job Creation request. If the
          Client does not supply this name, the Printer generates a name for
          the Job. &nbsp;The Job&#039;s &quot;job-name&quot; attribute
          contains the name.</t>
        </list></t>
      </section>
    </section>

    <section anchor="Sec.IPPOperations" title="IPP Operations">
      <t>IPP objects (Printers, Jobs, etc.) support operations. An operation
      consists of a request and a response. When a Client communicates with a
      Printer or its Jobs, the Client issues an operation request to the
      Printer URI and object's numeric identifier, if needed. Operation
      requests and responses have parameters that identify the
      operation. Operations also have attributes that affect the runtime
      characteristics of the operation (the intended target, localization
      information, etc.). These operation-specific attributes are called
      &quot;operation attributes&quot; (as compared to object attributes
      such as Printer attributes or Job attributes). Each request carries
      along with it any operation attributes, object attributes, and/or
      Document data required to perform the operation. Each request
      requires a response from the object. Each response indicates success
      or failure of the operation with a status-code as a response parameter.
      The response contains any operation attributes, object attributes,
      and/or status messages generated during the execution of the
      operation request.</t>

      <t>This section describes the semantics of the IPP operations, both
      requests and responses, in terms of the parameters, attributes, and
      other data associated with each operation.</t>

      <t>The Printer operations defined in this document are:
       <list style="empty">
        <t>Print-Job (<xref target="Sec.PrintJobOperation" />)</t>
        <t>Print-URI (<xref target="Sec.PrintURIOperation" />)</t>
        <t>Validate-Job (<xref target="Sec.ValidateJobOperation" />)</t>
        <t>Create-Job (<xref target="Sec.CreateJobOperation" />)</t>
        <t>Get-Printer-Attributes (<xref target="Sec.GetPrinterAttributesOperation" />)</t>
        <t>Get-Jobs (<xref target="Sec.GetJobsOperation" />)</t>
        <t>Pause-Printer (<xref target="Sec.PausePrinterOperation" />)</t>
        <t>Resume-Printer (<xref target="Sec.ResumePrinterOperation" />)</t>
        <t>Purge-Jobs (<xref target="Sec.PurgeJobsOperation" />)</t>
      </list></t>
      <t>The Job operations defined in this document are:
       <list style="empty">
        <t>Send-Document (<xref target="Sec.SendDocumentOperation" />)</t>
        <t>Send-URI (<xref target="Sec.SendURIOperation" />)</t>
        <t>Cancel-Job (<xref target="Sec.CancelJobOperation" />)</t>
        <t>Get-Job-Attributes (<xref target="Sec.GetJobAttributesOperation" />)</t>
        <t>Hold-Job (<xref target="Sec.HoldJobOperation" />)</t>
        <t>Release-Job (<xref target="Sec.ReleaseJobOperation" />)</t>
        <t>Restart-Job (<xref target="Sec.RestartJobOperation" />)</t>
      </list></t>
      <t>The Send-Document and Send-URI Job operations are used to add
      Documents to an existing Job created using the Create-Job operation.</t>

      <section anchor="Sec.CommonSemantics" title="Common Semantics">
        <t>All IPP operations require some common parameters and operation
        attributes. These common elements and their semantic characteristics
        are defined and described in more detail in the following
        sections.</t>

        <section anchor="Sec.RequiredParameters" title="Required Parameters">
          <t>Every operation request contains the following REQUIRED parameters:<list style="symbols">
            <t>a &quot;version-number&quot;,</t>
            <t>an &quot;operation-id&quot;,</t>
            <t>a &quot;request-id&quot;, and</t>
            <t>the attributes that are REQUIRED for that type of request.</t>
          </list></t>
          <t>Every operation response contains the following REQUIRED
          parameters:
           <list style="symbols">
            <t>a &quot;version-number&quot;,</t>
            <t>a &quot;status-code&quot;,</t>
            <t>the &quot;request-id&quot; that was supplied in the
            corresponding request, and</t>
            <t>the attributes that are REQUIRED for that type of response.</t>
          </list></t>
          <t>The Encoding and Transport document <xref target="RFC8010"/>
          defines special rules for the encoding of these parameters. All
          other operation elements are represented using the more generic
          encoding rules for attributes and groups of attributes.</t>
        </section>

        <section anchor="Sec.OperationIDsandRequestIDs" title="Operation IDs and Request IDs">
          <t>Each IPP operation request includes an identifying
          &quot;operation-id&quot; value. Valid values are defined in the
          &quot;operations-supported&quot; Printer attribute section (see
          <xref target="Sec.operationssupported1setOftype2enum" />). The
          Client specifies which operation is being requested by supplying the
          correct &quot;operation-id&quot; value.</t>

          <t>In addition, every invocation of an operation is identified by a
          &quot;request-id&quot; value. For each request, the Client chooses
          the &quot;request-id&quot;, which MUST be an integer (possibly
          unique, depending on Client requirements) in the range from
          1 to 2**31 - 1 (inclusive). This &quot;request-id&quot; allows
          Clients to manage multiple outstanding requests. The
          receiving IPP object (Printer, Job, etc.) copies all 32&nbsp;bits
          of the Client-supplied &quot;request-id&quot; attribute into
          the response so that the Client can match the response with the
          correct outstanding request, even if the &quot;request-id&quot; is
          out of range. If the request is terminated before the complete
          &quot;request-id&quot; is received, the IPP object rejects the
          request and returns a response with a &quot;request-id&quot; of 0.
          </t>

          <t>Note: In some cases, the transport protocol underneath IPP might
          be a connection-oriented protocol that would make it impossible for
          a Client to receive responses in any order other than the order in
          which the corresponding requests were sent. In such cases, the
          &quot;request-id&quot; attribute would not be essential for correct
          protocol operation. However, in other transport mappings the
          operation responses could come back in any order, in which case the
          &quot;request&nbhy;id&quot; is essential.</t>

        </section>
        <section anchor="Sec.Attributes" title="Attributes">
          <t>Operation requests and responses are both composed of groups of
          attributes and/or Document data. The attribute groups are:
           <list style="symbols">

            <t>Operation Attributes: These attributes are passed in the
            operation and affect the IPP object&#039;s behavior while
            processing the operation request, and they can affect other
            attributes or groups of attributes. Some operation attributes
            describe the Document data associated with the Print Job and are
            associated with new Job objects; however, most operation attributes
            do not persist beyond the life of the operation. The description
            of each operation attribute includes conformance statements
            indicating which operation attributes are REQUIRED and which are
            OPTIONAL for an IPP object to support, as well as which
            attributes a Client MUST supply in a request and an IPP object
            MUST supply in a response.</t>

            <t>Job Template Attributes: These attributes affect the processing
            of a Job. &nbsp;A Client MAY supply Job Template attributes in a
            Job Creation request, and the receiving object MUST be prepared to
            receive all supported attributes. The Job object can later be
            queried to find out what Job Template attributes were originally
            requested in the Job Creation request, and such attributes are
            returned in the response as Job object attributes. The Printer
            object can be queried about its Job Template attributes to find
            out what type of Job processing capabilities are supported and/or
            what the default Job processing behaviors are, though such
            attributes are returned in the response as Printer object
            attributes. The &quot;ipp-attribute-fidelity&quot; operation
            attribute affects processing of all Client-supplied Job Template
            attributes -- see <xref target="Sec.PrintJobRequest"/> and
            <xref target="Sec.APPENDIXDProcessingIPPAttributes"/>
            for a full description of &quot;ipp-attribute-fidelity&quot; and
            its relationship to other attributes.</t>

            <t>Job Object Attributes: These attributes are returned in
            response to a query operation directed at a Job object.</t>

            <t>Printer Object Attributes: These attributes are returned in
            response to a query operation directed at a Printer object.</t>

            <t>Unsupported Attributes: In a Job Creation request, the Client
            supplies a set of operation and Job Template attributes. If any of
            these attributes or their values are unsupported by the Printer
            object, the Printer object SHOULD return the set of unsupported
            attributes in the response. Section&nbsp;<xref
            target="Sec.UnsupportedAttributes" format="counter"/>,
            Section&nbsp;<xref target="Sec.PrintJobResponse"
            format="counter"/>, and
            <xref target="Sec.APPENDIXDProcessingIPPAttributes"/>
            give a full description of how Job Template attributes supplied
            by the Client in a Job Creation request are processed by the
            Printer object and how unsupported attributes are returned to
            the Client. Because of extensibility, any IPP object might
            receive a request that contains new or unknown attributes or
            values for which it has no support. In such cases, the
            IPP object processes what it can and returns the unsupported
            attributes in the response. The Unsupported Attributes
            group is defined for all operation responses for returning
            unsupported attributes that the Client supplied in the
            request.</t>

          </list></t>
          <t>Later in this section, each operation is formally defined by
          identifying the allowed and expected groups of attributes for each
          request and response. The model identifies a specific order for each
          group in each request or response, but the attributes within each
          group can be in any order, unless specified otherwise.</t>

          <t>The attributes within a group MUST be unique; if an attribute
          with the same name occurs more than once, the group is malformed.
          Clients MUST NOT submit such malformed requests, and Printers
          MUST NOT return such malformed responses. If such a malformed
          request is submitted to a Printer, the Printer MUST either
          (1) reject the request with the
          &#039;client-error-bad-request&#039; status-code
          (RECOMMENDED -- see <xref
          target="Sec.clienterrorbadrequest0x0400"/>) or (2) process the
          request normally after selecting only one of the attribute
          instances, depending on implementation. Which attribute is selected
          when there are duplicate attributes depends on implementation. The
          IPP Printer MUST NOT use the values from more than one such
          duplicate attribute instance.</t>

          <t>Each attribute definition includes the attribute&#039;s name
          followed by the name of its attribute syntax(es) in
          parentheses. In addition, each &#039;integer&#039; attribute can
          be followed by the allowed range in parentheses, (m:n), for values
          of that attribute. Each &#039;text&#039; or &#039;name&#039;
          attribute can be followed by the maximum size in octets in
          parentheses, (size), for values of that attribute. For more details
          on attribute syntax notation, see the descriptions of these
          attribute syntaxes in <xref target="Sec.AttributeSyntaxes" />.</t>

          <t>Note: Document data included in the operation is not strictly an
          attribute, but it is treated as a special attribute group for
          ordering purposes. The only operations defined in this document that
          support supplying the Document data within an operation request are
          Print-Job and Send-Document. There are no operations defined in this
          document whose responses include Document data.</t>

          <t>Some operations are REQUIRED for IPP objects to support; the
          others are OPTIONAL (see <xref target="Sec.Operations"/>).
          Therefore, before using an OPTIONAL operation, a Client SHOULD
          first use the REQUIRED Get&nbhy;Printer-Attributes operation to
          query the Printer&#039;s &quot;operations&nbhy;supported&quot;
          attribute in order to determine which OPTIONAL operations are
          actually supported. The Client SHOULD NOT use an OPTIONAL
          operation that is not supported. When an IPP object receives a
          request to perform an operation it does not support, it MUST
          return the &#039;server-error-operation-not-supported&#039;
          status-code (see
          <xref target="Sec.servererroroperationnotsupported0x0501" />). An
          IPP object is non-conformant if it does not support a REQUIRED
          operation.</t>

        </section>
        <section anchor="Sec.CharacterSetandNaturalLanguageOperationAttributes" title="Character Set and Natural Language Operation Attributes">
          <t>Some Job and Printer attributes have values that are text strings
          and names intended for human understanding rather than machine
          understanding (see the &#039;text&#039; and &#039;name&#039;
          attribute syntax descriptions in <xref
          target="Sec.AttributeSyntaxes" />). The following sections describe
          two special operation attributes called
          &quot;attributes-charset&quot; and
          &quot;attributes-natural-language&quot; whose values are used when
          interpreting other attributes using the &#039;text&#039; and
          &#039;name&#039; attribute syntaxes. For Job Creation operations,
          the IPP Printer implementation also saves these two attributes with
          the new Job object as Job Status attributes.</t>

          <t>The &quot;attributes-charset&quot; and
          &quot;attributes-natural-language&quot; attributes MUST be the first
          two attributes in every IPP request and response, as part of the
          initial Operation Attributes group of the IPP message. The
          &quot;attributes-charset&quot; attribute MUST be the first attribute
          in the group, and the &quot;attributes-natural-language&quot;
          attribute MUST be the second attribute in the group.</t>

          <t>For the sake of brevity in this document, these operation
          attribute descriptions are not repeated with every operation request
          and response but instead have a reference back to this section.</t>

          <section anchor="Sec.RequestOperationAttributes" title="Request Operation Attributes">
            <t>The Client MUST supply and the Printer object MUST support the
            following REQUIRED operation attributes in every IPP operation
            request:</t>

            <t>&quot;attributes-charset&quot; (charset):</t>
            <t><list style="empty">
            <t>This operation attribute identifies the charset (coded
            character set and encoding method) used by any &#039;text&#039;
            and &#039;name&#039; attributes that the Client is supplying in
            this request. It also identifies the charset that the Printer
            object MUST use (if supported) for all &#039;text&#039; and
            &#039;name&#039; attributes and status messages that the Printer
            object returns in the response to this request. See
            Sections&nbsp;<xref target="Sec.text" format="counter"/>
            and <xref target="Sec.name" format="counter" /> for the
            definitions of the &#039;text&#039; and &#039;name&#039;
            attribute syntaxes.</t>


            <t>All Clients and IPP objects MUST support the &#039;utf-8&#039;
            charset <xref target="RFC3629" /> and MAY support additional
            charsets, provided that they are registered with IANA <xref
            target="RFC2978" /> <xref target="IANA-CS" />. If the Printer
            object does not support the Client&nbhy;supplied charset value,
            the Printer object MUST reject the request, set the
            &quot;attributes&nbhy;charset&quot; to &#039;utf-8&#039; in the
            response, and return the
            &#039;client-error-charset-not-supported&#039; status-code and
            any &#039;text&#039; or &#039;name&#039; attributes using the
            &#039;utf-8&#039; charset. The Printer MAY return any attributes
            in the Unsupported Attributes group (see Sections&nbsp;<xref
            target="Sec.UnsupportedAttributes" format="counter" /> and <xref
            target="Sec.PrintJobResponse" format="counter" />). The Printer
            object MUST indicate the charset(s) supported as the values of the
            &quot;charset-supported&quot; Printer attribute (see <xref
            target="Sec.charsetsupported1setOfcharset" />), so that the Client
            can query to determine which charset(s) is supported.</t>

            <t>Note to Client implementors: Since IPP objects are only
            required to support the &#039;utf-8&#039; charset, in order to
            maximize interoperability with multiple IPP object
            implementations, a Client SHOULD supply &#039;utf-8&#039; in the
            &quot;attributes-charset&quot; operation attribute, even though
            the Client is only passing and able to present a simpler charset,
            such as US-ASCII <xref target="RFC20" /> or ISO-8859-1 <xref
            target="ISO8859-1" />. Then the Client will have to filter out,
            perform charset conversion on, or replace those characters that
            are returned in the response that it cannot present to its user.
            On the other hand, if both the Client and the IPP objects also
            support a charset in common besides 'utf-8', the Client can use
            that charset in order to avoid charset conversion or data loss.</t>

            <t>See the &#039;charset&#039; attribute syntax description in
            <xref target="Sec.charset" /> for the syntax and semantic
            interpretation of the values of this attribute and for example
            values.</t>
          </list></t>

            <t>&quot;attributes-natural-language&quot; (naturalLanguage):</t>
            <t><list style="empty">
            <t>This operation attribute identifies the natural language <xref
            target="RFC5646" /> used by any &#039;text&#039; and
            &#039;name&#039; attributes that the Client is supplying in this
            request. This attribute also identifies the natural language that
            the Printer object SHOULD use for all &#039;text&#039; and
            &#039;name&#039; attributes and status messages that the Printer
            object returns in the response to this request. See the
            &#039;naturalLanguage&#039; attribute syntax description in <xref
            target="Sec.naturalLanguage" /> for the syntax and semantic
            interpretation of the values of this attribute and for example
            values.</t>

            <t>There are no REQUIRED natural languages required for the
            Printer object to support. However, the Printer's
            &quot;generated&nbhy;natural&nbhy;language-supported&quot;
            attribute identifies the natural languages supported by the
            Printer object and any contained Jobs for all text strings
            generated by the IPP object. A Client MAY query this attribute
            to determine which natural language(s) is supported for
            generated messages.</t>

            <t>For any of the attributes for which the Printer object
            generates text, i.e., for the &quot;job-state-message&quot;,
            &quot;printer-state-message&quot;, and status messages (see <xref
            target="Sec.OperationResponseStatusCodesandStatusMessages" />),
            the Printer object MUST be able to generate these text strings in
            any of its supported natural languages. If the Client requests a
            natural language that is not supported, the Printer object MUST
            return these generated messages in the Printer&#039;s configured
            natural language as specified by the Printer&#039;s
            &quot;natural-language-configured&quot; attribute (see <xref
            target="Sec.naturallanguageconfigurednaturalLanguage" />).</t>

            <t>For other &#039;text&#039; and &#039;name&#039; attributes
            supplied by the Client, authentication system, Operator,
            Administrator, or manufacturer (i.e., for
            &quot;job-originating-user-name&quot;, &quot;printer-name&quot;
            (name), &quot;printer-location&quot; (text),
            &quot;printer-info&quot; (text), and
            &quot;printer&nbhy;make-and-model&quot; (text)), the
            Printer object is
            only required to support the configured natural language of the
            Printer identified by the Printer's
            &quot;natural-language-configured&quot; attribute, though support
            of additional natural languages for these attributes is
            permitted.</t>

            <t>For any &#039;text&#039; or &#039;name&#039; attribute in
            the request that is in a different natural language than the value
            supplied in the &quot;attributes-natural-language&quot; operation
            attribute, the Client MUST use the Natural Language Override
            mechanism (see Sections&nbsp;<xref target="Sec.textWithLanguage"
            format="counter" /> and <xref target="Sec.nameWithLanguage"
            format="counter" />) for each such attribute value supplied. The
            Client MAY use the Natural Language Override mechanism
            redundantly, i.e., use it even when the value is in the same
            natural language as the value supplied in the
            &quot;attributes-natural-language&quot; operation attribute of the
            request.</t>

            <t>The IPP object MUST accept any natural language and any Natural
            Language Override, whether the IPP object supports that natural
            language or not (and independent of the value of the
            &quot;ipp&nbhy;attribute&nbhy;fidelity&quot; operation
            attribute). That is, the IPP object accepts all
            Client&nbhy;supplied values no matter what the values are in
            the Printer's &quot;generated-natural-language-supported&quot;
            attribute. That attribute,
            &quot;generated&nbhy;natural&nbhy;language&nbhy;supported&quot;,
            only applies to generated messages, not Client&nbhy;supplied
            messages. The IPP object MUST remember that natural language
            for all Client-supplied attributes, and when returning those
            attributes in response to a query, the IPP object MUST
            indicate that natural language.</t>

            <t>Each value whose attribute syntax type is &#039;text&#039; or
            &#039;name&#039; (see Sections&nbsp;<xref target="Sec.text"
            format="counter"/> and <xref target="Sec.name" format="counter"/>)
            has an Associated Natural&nbsp;Language. This document does not
            specify how this association is stored in a Printer or Job
            object. When such a value is encoded in a request or response, the
            natural language is either implicit or explicit:
            <list style="symbols">
            <t>In the implicit case, the value contains only the text/name
            value, and the language is specified by the
            &quot;attributes&nbhy;natural-language&quot; operation
            attribute in the request or response (see Sections&nbsp;<xref
            target="Sec.textWithoutLanguage" format="counter" /> and <xref
            target="Sec.nameWithoutLanguage" format="counter" />).</t>

            <t>In the explicit case (also known as the Natural Language
            Override case), the value contains both the language and the
            text/name value
            (see Sections&nbsp;<xref target="Sec.textWithLanguage"
            format="counter" /> and <xref target="Sec.nameWithLanguage"
            format="counter" />).</t>
          </list></t>

            <t>For example, the &quot;job-name&quot; attribute MAY be supplied
            by the Client in a Job Creation request. The text value for this
            attribute will be in the natural language identified by the
            &quot;attribute-natural-language&quot; attribute, or if different,
            as identified by the Natural Language Override mechanism. If
            supplied, the IPP object will use the value of the
            &quot;job-name&quot; attribute to populate the Job's
            &quot;job-name&quot; attribute. Whenever any Client queries the
            Job's &quot;job-name&quot; attribute, the IPP object returns the
            attribute as stored and uses the Natural Language Override
            mechanism to specify the natural language, if it is different from
            that reported in the &quot;attributes-natural-language&quot;
            operation attribute of the response. The IPP object MAY use the
            Natural Language Override mechanism redundantly, i.e., use it even
            when the value is in the same natural language  as the value
            supplied in the &quot;attributes-natural-language&quot; operation
            attribute of the response.</t>

            <t>An IPP object MUST NOT reject a request based on a supplied
            natural language in an &quot;attributes-natural-language&quot;
            operation attribute or in any attribute that uses the Natural
            Language Override.</t>

            <t>Note: Supplying &#039;text&#039; or &#039;name&#039;
            attributes with an incompatible combination of natural language
            and charset can cause undesired behavior. For example, suppose
            a Printer supports charsets &#039;utf&nbhy;8&#039;,
            &#039;iso-8859-1&#039;, and &#039;iso-8859-7&#039;.
            Suppose also that it supports natural languages
            &#039;en&#039; (English), &#039;fr&#039; (French), and
            &#039;el&#039; (Greek). Although the Printer supports the charset
            &#039;iso-8859-1&#039; and natural language &#039;el&#039;, it
            probably does not support the combination of Greek text strings
            using the &#039;iso-8859-1&#039; charset. The Printer handles
            this apparent incompatibility differently, depending on the
            context in which it occurs:
            <list style="symbols">
              <t>In a Job Creation request: If the Client supplies a
              &apos;text&apos; or &apos;name&apos; attribute (for example,
              the &quot;job-name&quot; operation attribute) that uses an
              apparently incompatible combination, it is a Client choice
              that does not affect the Printer or its correct operation.
              Therefore, the Printer simply accepts the Client&nbhy;supplied
              value, stores it with the Job, and responds back with the
              same combination whenever the Client (or any Client) queries
              for that attribute.</t>

              <t>In a query-type operation, like Get-Printer-Attributes: If
              the Client requests an apparently incompatible combination, the
              Printer responds (as described in <xref
              target="Sec.ResponseOperationAttributes" />) using the
              Printer&#039;s configured natural language rather than the
              natural language requested by the Client.</t>
            </list></t>

            <t>In either case, the Printer does not reject the request because
            of the apparent incompatibility. The potential incompatible
            combination of charset and natural language can occur either at
            the global operation level or at the Natural Language Override
            attribute-by-attribute level. In addition, since the response
            always includes explicit charset and natural language information,
            there is never any question or ambiguity in how the Client
            interprets the response.</t>
           </list></t>
          </section>

          <section anchor="Sec.ResponseOperationAttributes" title="Response Operation Attributes">
            <t>The Printer MUST supply and the Client MUST support the
            following REQUIRED operation attributes in every IPP/1.1 operation
            response:</t>

            <t>&quot;attributes-charset&quot; (charset):</t>
            <t><list style="empty">
            <t>This operation attribute identifies the charset used by any
            &#039;text&#039; and &#039;name&#039; attributes that the
            Printer object is returning in this response. The value in
            this response MUST be the same value as the
            &quot;attributes-charset&quot; operation attribute supplied
            by the Client in the request. If this is not possible
            (i.e., the charset requested is not supported),
            the request would have been rejected. See
            &quot;attributes-charset&quot; described in <xref
            target="Sec.RequestOperationAttributes" /> above.</t>

            <t>If the Printer object supports more than just the
            &#039;utf-8&#039; charset, the Printer object MUST be able
            to perform code conversion between each of the charsets
            supported on a &quot;highest fidelity possible&quot; basis
            in order to return the &#039;text&#039;
            and &#039;name&#039; attributes in the charset requested by the
            Client. However, some information loss can occur during the
            charset conversion, depending on the charsets involved.
            For example, depending on implementation, the Printer object
            can convert from a UTF-8 &#039;a&#039; to a US-ASCII
            &#039;a&#039; (with no loss of information);
            from an ISO Latin 1 CAPITAL LETTER A WITH ACUTE ACCENT to
            US-ASCII &#039;A&#039; (losing the accent); or from a
            UTF-8 Japanese Kanji character to some ISO Latin 1 error character
            indication such as &#039;?&#039;, a decimal code equivalent,
            or the absence of a character.</t>

            <t>Whether an implementation that supports more than one charset
            stores the data in the charset supplied by the Client or
            performs code conversion to one of the other supported
            charsets depends on implementation. The strategy should try to
            minimize loss of information during code conversion. On each
            response, such an implementation converts from its internal
            charset to that requested.</t>
          </list></t>

            <t>&quot;attributes-natural-language&quot; (naturalLanguage):</t>
            <t><list style="empty">
            <t>This operation attribute identifies the natural language used
            by any &#039;text&#039; and &#039;name&#039; attributes that
            the IPP object is returning in this response. Unlike the
            &quot;attributes-charset&quot; operation attribute, the IPP object
            MAY return the natural language of the Job object or the
            Printer&#039;s configured natural language as identified by the
            Printer's &quot;natural-language-configured&quot; attribute,
            rather than the natural language supplied by the Client. For any
            &#039;text&#039; or &#039;name&#039; attribute or status
            message in the response that is in a different natural language
            than the value returned in the
            &quot;attributes-natural-language&quot; operation attribute,
            the IPP object MUST use the Natural Language Override mechanism
            (see Sections&nbsp;<xref
            target="Sec.textWithLanguage" format="counter" /> and <xref
            target="Sec.nameWithLanguage" format="counter" />) on each
            attribute value returned. The IPP object MAY use the Natural
            Language Override mechanism redundantly, i.e., use it even when
            the value is in the same natural language as the value supplied in
            the &quot;attributes-natural-language&quot; operation attribute of
            the response.</t>
            </list></t>
          </section>
        </section>

        <section anchor="Sec.OperationTargets" title="Operation Targets">
          <t>All IPP operations are directed at IPP objects. For Printer
          operations, the operation is always directed at a Printer object
          using one of its URIs, i.e., one of the values in the Printer's
          &quot;printer-uri-supported&quot; attribute. Even if the Printer
          object supports more than one URI, the Client supplies only one URI
          as the target of the operation. The Client identifies the target
          object by supplying the correct URI in the &quot;printer-uri&quot;
          operation attribute.</t>

          <t>For Job operations, the operation is directed at either:
           <list style="symbols">
            <t>The Printer object that created the Job object using the
            Printer object's URI and the Job's numeric identifier (Job
            ID). Since the Printer object that created the Job object
            generated the Job ID, it MUST be able to correctly associate the
            Client&nbhy;supplied Job ID with the correct Job object. The Client
            supplies the Printer's URI in the &quot;printer-uri&quot;
            operation attribute and the Job ID in the &quot;job-id&quot;
            operation attribute.</t>

            <t>The Job object itself using the Job's URI. In this case, the
            Client identifies the target object by supplying the correct URI
            in the &quot;job-uri&quot; (uri) operation attribute
            (<xref target="Sec.joburiuri"/>).</t>

          </list></t>
          <t>Clients SHOULD send the "printer-uri" and "job-id" operation
          attributes in Job operations.</t>

          <t>If the operation is directed at the Job object directly using the
          Job's URI, the Client MUST NOT include the redundant
          &quot;job-id&quot; operation attribute.</t>

          <t>The operation target attributes are REQUIRED operation attributes
          that are included in every operation request. Like the charset and
          natural language attributes (see <xref
          target="Sec.CharacterSetandNaturalLanguageOperationAttributes" />),
          the operation target attributes are specially ordered operation
          attributes. In all cases, the operation target attributes
          immediately follow the &quot;attributes&nbhy;charset&quot; and
          &quot;attributes-natural-language&quot; attributes within the
          Operation Attributes group; however, the specific ordering rules
          are as follows:
           <list style="symbols">
            <t>In the case where there is only one operation target attribute
            (i.e., either only the &quot;printer-uri&quot; attribute or only
            the &quot;job&nbhy;uri&quot; attribute), that attribute MUST be the
            third attribute in the Operation Attributes group.</t>
            <t>In the case where Job operations use two operation target
            attributes (i.e., the &quot;printer-uri&quot; and
            &quot;job-id&quot; attributes), the &quot;printer-uri&quot;
            attribute MUST be the third attribute and the
            &quot;job&nbhy;id&quot; attribute MUST be the fourth attribute.</t>
          </list></t>

          <t>In all cases, the target URIs contained within the body of IPP
          operation requests and responses MUST be in absolute format rather
          than relative format (a relative URL identifies a resource with the
          scope of the HTTP server, but does not include scheme, host,
          or&nbsp;port).</t>

          <t>The following rules apply to the use of port numbers in URIs that
          identify IPP objects:<list style="numbers">

            <t>If the URI scheme allows the port number to be explicitly
            included in the URI string, and a port number is specified within
            the URI, then that port number MUST be used by the Client to
            contact the IPP object.</t>

            <t>If the URI scheme allows the port number to be explicitly
            included in the URI string, and a port number is not specified
            within the URI, then the default port number implied by that
            URI scheme MUST be used by the Client to contact the
            IPP object.</t>

            <t>If the URI scheme does not allow an explicit port number to be
            specified within the URI, then the default port number implied by
            that URI MUST be used by the Client to contact the IPP object.</t>

          </list></t>
          <t>Note: &quot;Internet Printing Protocol/1.1: IPP URL
          Scheme&quot; <xref target="RFC3510" /> and &quot;Internet
          Printing Protocol (IPP) over HTTPS Transport Binding and the
          &apos;ipps&apos; URI Scheme&quot; <xref target="RFC7472"/>
          define the mapping of IPP onto HTTP and HTTPS, respectively,
          and define and register a default port number.</t>

        </section>
        <section anchor="Sec.OperationResponseStatusCodesandStatusMessages" title="Operation Response Status-Code Values and Status Messages">
          <t>Every operation response includes a REQUIRED
          &quot;status-code&quot; parameter, SHOULD include the
          &quot;status-message&quot; operation attribute, and MAY include the
          &quot;detailed-status-message&quot; operation attribute. The
          Print-URI and Send-URI response MAY also include the
          &quot;document&nbhy;access-error&quot; operation attribute.</t>

          <section anchor="Sec.statuscodetype2enum" title="&quot;status-code&quot; (type2 enum)">
            <t>The REQUIRED &quot;status-code&quot; parameter provides
            information on the processing of a request.</t>

            <t>The status-code is intended for use by automata. A Client
            implementation of IPP SHOULD convert status-code values into any
            localized message that has semantic meaning to the End User.</t>

            <t>The &quot;status-code&quot; value is a numeric value that has
            semantic meaning.   The &quot;status-code&quot; syntax is similar
            to a &quot;type2 enum&quot; (see <xref
            target="Sec.AttributeSyntaxes" /> (&quot;Attribute
            Syntaxes&quot;)), except that values can range only from 0x0000 to
            0x7fff.  <xref
            target="Sec.APPENDIXBStatusCodesandSuggestedStatusCodeMessages" />
            describes and assigns the status-code values, and suggests a
            corresponding status message for each status-code for use by the
            Client when the user&#039;s natural language is English.</t>

            <t>If the Printer performs an operation with no errors and it
            encounters no problems, it MUST return the status-code
            &#039;successful-ok&#039; in the response. See <xref
            target="Sec.APPENDIXBStatusCodesandSuggestedStatusCodeMessages"
            />.</t>

            <t>If the Client supplies unsupported values for the following
            parameters or operation attributes, the Printer object MUST reject
            the operation, MAY return the unsupported attribute value in the
            Unsupported Attributes group, and MUST return the indicated
            status&nbhy;code:</t>

            <texttable style="all" title="Status-Code Values for All Requests" anchor="Table.StatusCodesforAllRequests">
              <ttcol>Parameter/Attribute</ttcol><ttcol>Status-Code</ttcol>
              <c>version-number</c><c>server-error-version-not-supported</c>
              <c>operation-id</c><c>server-error-operation-not-supported</c>
              <c>attributes-charset</c><c>client-error-charset-not-supported</c>
              <c>compression</c><c>client-error-compression-not-supported</c>
              <c>document-format</c><c>client-error-document-format-not-supported</c>
              <c>document-uri</c><c>client-error-uri-scheme-not-supported,
              client-error-document-access-error</c>

            </texttable>
            <t>If the Client supplies unsupported values for other attributes,
            or unsupported attributes, the Printer returns the status-code
            defined in <xref target="Sec.UnsupportedAttributes" />
            (&quot;Unsupported Attributes&quot;).</t>

          </section>
          <section anchor="Sec.statusmessagetext255" title="&quot;status-message&quot; (text(255))">
            <t>The RECOMMENDED &quot;status-message&quot; operation attribute
            provides a short textual description of the status of the
            operation. The &quot;status&nbhy;message&quot; attribute&#039;s
            syntax is &quot;text(255)&quot;, so the maximum length is
            255&nbsp;octets (see <xref target="Sec.text" />). The status
            message is intended for the human End User. If a response does
            include a &quot;status-message&quot; attribute, an IPP Client
            can examine or display the messages in some
            implementation-specific manner. The &quot;status&nbhy;message&quot;
            attribute is especially useful for a later version of a Printer
            to return as supplemental information for the human user,
            to accompany a status-code that an earlier version of a
            Client might not understand.</t>

            <t>If the Printer supports the &quot;status-message&quot;
            operation attribute, it MUST be able to generate this message in
            any of the natural languages identified by the Printer&#039;s
            &quot;generated-natural-language-supported&quot; attribute and
            MUST honor any supported value for the
            &quot;attributes&nbhy;natural-language&quot; operation
            attribute (<xref target="Sec.RequestOperationAttributes" />)
            of the Client request. <xref
            target="Sec.APPENDIXBStatusCodesandSuggestedStatusCodeMessages" />
            suggests the text for the status message returned by the Printer
            for use with the English natural language.</t>

            <t>As described in <xref target="Sec.RequestOperationAttributes"
            />, for any returned &#039;text&#039; attribute, if there is a
            choice for generating this message, the Printer uses the natural
            language indicated by the value of
            &quot;attributes&nbhy;natural&nbhy;language&quot; in the
            Client request, if supported; otherwise, the Printer uses the
            value in the Printer&#039;s own
            &quot;natural&nbhy;language&nbhy;configured&quot; attribute.</t>

            <t>If the Printer supports the &quot;status-message&quot;
            operation attribute, it SHOULD use the REQUIRED &#039;utf-8&#039;
            charset to return a status message for the following error
            status-code values (see <xref
            target="Sec.APPENDIXBStatusCodesandSuggestedStatusCodeMessages"/>):
            &#039;client&nbhy;error&nbhy;bad&nbhy;request&#039;,
            &#039;client-error-charset-not-supported&#039;,
            &#039;server&nbhy;error&nbhy;internal&nbhy;error&#039;,
            &#039;server&nbhy;error&nbhy;operation&nbhy;not&nbhy;supported&#039;, and
            &#039;server&nbhy;error&nbhy;version&nbhy;not&nbhy;supported&#039;. In this case, it
            MUST set the value of the &quot;attributes-charset&quot; operation
            attribute to &#039;utf-8&#039; in the error response.</t>

          </section>
          <section anchor="Sec.detailedstatusmessagetextMAX" title="&quot;detailed-status-message&quot; (text(MAX))">
            <t>The OPTIONAL &quot;detailed-status-message&quot; operation
            attribute provides additional more-detailed technical and
            implementation-specific information about the operation for
            Administrators or other experienced technical people. The
            &quot;detailed-status-message&quot; attribute&#039;s syntax is
            &quot;text(MAX)&quot;, so the maximum length is 1023&nbsp;octets
            (see <xref target="Sec.text" />). If the Printer supports the
            &quot;detailed&nbhy;status-message&quot; operation attribute, the
            Printer SHOULD localize the message, unless such localization would
            obscure the technical meaning of the message. Clients MUST NOT
            attempt to parse the value of this attribute. See the
            &quot;document&nbhy;access&nbhy;error&quot; operation attribute
            (<xref target="Sec.documentaccesserrortextMAX" />) for
            additional errors that a program can process.</t>
          </section>

          <section anchor="Sec.documentaccesserrortextMAX" title="&quot;document-access-error&quot; (text(MAX))">
            <t>This OPTIONAL operation attribute provides additional
            information about any Document access errors encountered by the
            Printer before it returned a response to the Print-URI (<xref
            target="Sec.PrintURIOperation"/>) or
            Send-URI (<xref target="Sec.SendURIOperation"/>) operation.
            For errors in the protocol identified by the URI scheme in the
            &quot;document-uri&quot; operation attribute, such as
            &#039;http:&#039; or &#039;ftp:&#039;, the error code is
            returned in parentheses, followed by the URI. For example:</t>

            <t>(404) http://www.example.com/filename.pdf</t>

            <t>Most Internet protocols use decimal error codes (unlike IPP),
            so the ASCII error code representation is in decimal.</t>

          </section>
        </section>
        <section anchor="Sec.UnsupportedAttributes" title="Unsupported Attributes">
          <t>The Unsupported Attributes group contains attributes that are not
          supported by the operation. This group is primarily for the Job
          Creation operations, but all operations can return this group.</t>

          <t>A Printer MUST include an Unsupported Attributes group in a
          response if the status-code is one of the following:
          &#039;successful&nbhy;ok&nbhy;ignored&nbhy;or&nbhy;substituted&nbhy;attributes&#039;,
          &#039;successful&nbhy;ok&nbhy;conflicting&nbhy;attributes&#039;,
          &#039;client&nbhy;error&nbhy;attributes&nbhy;or&nbhy;values&nbhy;not&nbhy;supported&#039;, or
          &#039;client&nbhy;error&nbhy;conflicting&nbhy;attributes&#039;.</t>

          <t>If the status-code is one of the four specified in the preceding
          paragraph, the Unsupported Attributes group MUST contain all of
          those attributes and only those attributes that are:
           <list style="letters">
            <t>an operation or Job Template attribute supplied in the request,
            and</t>
            <t>unsupported by the Printer. See below for details on the three
            categories of &quot;unsupported&quot; attributes.</t>
          </list></t>

          <t>If the status-code is one of those in
          <xref target="Table.StatusCodesforAllRequests"/> in <xref
          target="Sec.statuscodetype2enum" />, the OPTIONAL Unsupported
          Attributes group contains the unsupported parameter or attribute
          indicated in that table.</t>

          <t>If the Printer is not returning any unsupported attributes in
          the response, the Printer SHOULD omit the Unsupported Attributes
          group rather than sending an empty group. However, a Client MUST
          be able to accept an empty group.</t>

          <t>Unsupported attributes fall into three categories:<list
          style="numbers">

            <t>The Printer does not support the supplied attribute (no matter
            what the attribute syntax or value).</t>

            <t>The Printer does support the attribute, but it does not support
            some or all of the particular attribute syntaxes or values
            supplied by the Client, i.e., the Printer does not have those
            attribute syntaxes or values in its corresponding
            &quot;xxx-supported&quot; attribute.</t>

            <t>The Printer does support the attributes and values supplied,
            but the particular values are in conflict with one another,
            because they violate a constraint, such as not being able to
            staple transparencies.</t>
          </list></t>

          <t>In the case of an unsupported attribute name, the Printer returns
          the Client-supplied attribute with a substituted value of
          &#039;unsupported&#039;. This value&#039;s syntax type is
          &quot;out-of-band&quot;, and its encoding is defined by special
          rules for &quot;out-of-band&quot; values in the
          Encoding and Transport document <xref target="RFC8010" />. Its value
          indicates no support for the attribute itself -- see the beginning of
          <xref target="Sec.AttributeSyntaxes" /> in this document.</t>

          <t>In the case of a supported attribute with one or more unsupported
          attribute syntaxes or values, the Printer simply returns the
          Client&nbhy;supplied attribute with the unsupported attribute
          syntaxes or values as supplied by the Client. This indicates
          support for the attribute but no support for that particular
          attribute syntax or value. If the Client supplies a multi-valued
          attribute with more than one value and the Printer supports the
          attribute but only supports a subset of the Client-supplied
          attribute syntaxes or values, the Printer MUST return only those
          attribute syntaxes or values that are unsupported.</t>

          <t>In the case of two (or more) supported attribute values that are
          in conflict with one another (although each is supported
          independently, the values conflict when requested together within
          the same Job), the Printer MUST return all the values that it
          ignores or substitutes to resolve the conflict but not any of the
          values that it is still using. The choice for exactly how to resolve
          the conflict is implementation dependent. See <xref
          target="Sec.PrintJobResponse" /> and <xref
          target="Sec.APPENDIXDProcessingIPPAttributes" />. See the
          Implementor&#039;s Guides <xref target="RFC3196" /> <xref
          target="PWG5100.19" /> for examples.</t>

        </section>
        <section anchor="Sec.Versions" title="Versions">
          <t>Each operation request and response carries with it a
          &quot;version&nbhy;number&quot; parameter. Each value of the
          &quot;version-number&quot; parameter is in the form
          &quot;X.Y&quot; where X is the major version number and Y is the
          minor version number. By including a version number in the
          Client request, it allows the Client to identify which version
          of IPP it is interested in using, i.e., the version whose
          conformance requirements the Client can depend upon the
          Printer to meet.</t>

          <t>If the IPP object does not support that major version number
          supplied by the Client, i.e., the &quot;major version number&quot;
          portion of the &quot;version-number&quot; parameter does not
          match any of the values of the Printer&#039;s
          &quot;ipp-versions-supported&quot; attribute (see
          <xref target="Sec.ippversionssupported1setOftype2keyword" />), the
          object MUST respond with a status-code of
          &#039;server&nbhy;error&nbhy;version&nbhy;not&nbhy;supported&#039;
          along with the closest version number that is supported (see <xref
          target="Sec.servererrorversionnotsupported0x0503" />). If the major
          version number is supported but the minor version number is not,
          the IPP object SHOULD accept the request and attempt to perform it
          (or reject the request if the operation is not supported);
          otherwise, it rejects the request and returns the
          &#039;server&nbhy;error&nbhy;version&nbhy;not&nbhy;supported&#039;
          status-code. In all cases, the IPP object MUST return the
          &quot;version-number&quot; value that it supports that is closest
          to the version number supplied by the Client in the request.</t>

          <t>There is no version negotiation per se. However, if a Client has
          received a &#039;server-error-version-not-supported&#039;
          status-code from an IPP object, the Client SHOULD try again with a
          different version number. A Client MAY also determine the versions
          supported either from a directory that conforms to <xref
          target="Sec.APPENDIXEGenericDirectorySchema" /> or by querying the
          Printer&#039;s &quot;ipp-versions-supported&quot; attribute (see
          <xref target="Sec.ippversionssupported1setOftype2keyword" />) to
          determine which versions are supported.</t>

          <t>An IPP/1.1 object implementation MUST support version
          &#039;1.1&#039;, i.e., meet the conformance requirements for
          IPP/1.1 as specified in this document and <xref target="RFC8010" />.
          IPP implementations SHOULD accept any request with the major
          version '1' or '2', or reject the request if the operation is not
          supported.</t>

          <t>There is only one notion of &quot;version number&quot; that
          covers both IPP Model and IPP protocol changes. Changes to
          the major version number of the Model and Semantics document
          can indicate structural or syntactic changes that make it
          impossible for older versions of IPP Clients and Printers to
          correctly parse and correctly process the new or changed
          attributes, operations, and responses. If the major version number
          changes, the minor version number is set to zero. As an
          example, adding the REQUIRED &quot;ipp-attribute-fidelity&quot;
          attribute to version &#039;1.1&#039; (if it had not been
          part of version &#039;1.0&#039;) would have required a
          change to the major version number, since an IPP/1.0 Printer
          would not have processed a request with the correct semantics
          that contained the &quot;ipp-attribute-fidelity&quot; attribute
          that it did not know about. Items that might affect the changing
          of the major version number include any changes to the
          Model and Semantics document (this document) or the
          Encoding and Transport document <xref target="RFC8010"/>
          itself, such as:<list style="symbols">

            <t>reordering of ordered attributes or attribute sets</t>
            <t>changes to the syntax of existing attributes</t>
            <t>adding REQUIRED (for an IPP object to support)
            Operation Attributes groups</t>
            <t>adding values to existing REQUIRED operation attributes</t>
            <t>adding REQUIRED operations</t>
          </list></t>

          <t>Changes to the minor version number indicate the addition of new
          features, attributes, and attribute values that might not be
          understood by all IPP objects but that can be ignored if not
          understood. Items that might affect the changing of the minor
          version number include any changes to the model objects and
          attributes but not the encoding and transport rules <xref
          target="RFC8010" /> (except adding attribute syntaxes). Examples
          of such changes are:
           <list style="symbols">
            <t>grouping all extensions not included in a previous version into
            a new version</t>
            <t>adding new attribute values</t>
            <t>adding new object attributes</t>
            <t>adding OPTIONAL (for an IPP object to support) operation
            attributes (i.e., those attributes that an IPP object can ignore
            without confusing Clients)</t>
            <t>adding OPTIONAL (for an IPP object to support)
            Operation Attributes groups (i.e., those attributes that an
            IPP object can ignore without confusing Clients)</t>
            <t>adding new attribute syntaxes</t>
            <t>adding OPTIONAL operations</t>
            <t>changing Job attributes or Printer attributes from OPTIONAL to
            REQUIRED or vice versa</t>
            <t>adding OPTIONAL attribute syntaxes to an existing attribute</t>
          </list></t>

          <t>The encoding <xref target="RFC8010" /> of the
          &quot;version-number&quot; parameter MUST NOT change over any
          version number (either major or minor). This rule guarantees that
          all future versions will be backwards compatible with all previous
          versions (at least for checking the &quot;version-number&quot;
          parameter). In addition, any protocol elements (attributes,
          error codes, tags, etc.) that are not carried forward from one
          version to the next are DEPRECATED so that they can never be
          reused with new semantics.</t>

          <t>Implementations that support a certain version SHOULD support all
          previous Standards Track versions. As each new version is defined
          (through the release of a new IPP specification document), that
          version will specify which previous versions MUST and which versions
          SHOULD be supported in compliant implementations.</t>
        </section>

        <section anchor="Sec.JobCreationOperations" title="Job Creation Operations">
          <t>In order to &quot;submit a Print Job&quot; and create a new Job,
          a Client issues a Job Creation request. A Job Creation request is
          any one of the following three operation requests:
           <list style="symbols">
            <t>The Print-Job Request: A Client that wants to submit a
            Print Job with only a single Document can use the Print-Job
            operation. The operation allows for the Client to &quot;push&quot;
            the Document data to the Printer by including the Document data in
            the request itself. Note that Clients SHOULD instead use the
            Create-Job and Send&nbhy;Document requests, if supported by the
            Printer, since they allow for Job monitoring and control during
            submission of the Document data.</t>

            <t>The Print-URI Request: A Client that wants to submit a
            Print Job with only a single Document (where the Printer
            &quot;pulls&quot; the Document data instead of the Client
            &quot;pushing&quot; the data to the Printer) uses the Print-URI
            operation. In this case, the Client includes in the request only a
            URI reference to the Document data (not the Document data
            itself).</t>

            <t>The Create-Job Request: A Client that wants to submit a
            Print Job with zero or more Documents uses the Create-Job
            operation. This operation is followed by an arbitrary number of
            Send-Document and&wj;/or Send-URI operations, each creating another
            Document for the newly created Job. &nbsp;The Send-Document
            operation includes the Document data in the request (the Client
            &quot;pushes&quot; the Document data to the Printer), and the
            Send-URI operation includes only a URI reference to the Document
            data in the request (the Printer &quot;pulls&quot; the Document
            data from the referenced location). The last Send-Document or
            Send-URI request for a given Job includes a
            &quot;last-document&quot; operation attribute set to
            &#039;true&#039; indicating that this is the last request.</t>

          </list></t>
          <t>Throughout this document, the term &quot;Job Creation
          request&quot; is used to refer to any of these three operation
          requests.</t>

          <t>A Create-Job operation followed by only one Send-Document
          operation is semantically equivalent to a Print-Job operation;
          however, the Client SHOULD use the Create-Job and Send-Document
          operations (when supported) for all Jobs with a single Document
          to allow for reliable Job control and monitoring. Print-Job is a
          REQUIRED operation (all implementations MUST support it), whereas
          Create-Job is a RECOMMENDED operation and hence some
          implementations might not support it.</t>

          <t>Job submission time is the point in time when a Client issues a
          Job Creation request. The initial state of every Job is the
          &#039;pending&#039;, &#039;pending-held&#039;, or
          &#039;processing&#039; state (see <xref
          target="Sec.jobstatetype1enum" />). When the Printer begins
          processing the Print Job, the Job&#039;s state moves to
          &#039;processing&#039;. This is known as Job processing time.</t>

          <t>At Job submission time and at the time a Validate-Job operation
          is received, the Printer MUST do the following:<list
          style="numbers">

            <t>Process the Client&nbhy;supplied attributes and either accept or
            reject the request</t>

            <t>Validate the syntax of and support for the scheme of any
            Client&nbhy;supplied URI</t>

          </list></t>
          <t>At Job submission time, the Printer MUST validate whether the
          supplied attributes, attribute syntaxes, and values are supported by
          matching them with the Printer&#039;s corresponding
          &quot;xxx-supported&quot; attributes. See <xref
          target="Sec.UnsupportedAttributes" /> for details. See the
          Implementor&#039;s Guides <xref target="RFC3196" /> <xref
          target="PWG5100.19" /> for guidance on processing Job Creation
          requests.</t>

          <t>At Job submission time, the Printer MAY perform the validation
          checks reserved for Job processing time, such as:<list
          style="numbers">

            <t>Validating the format of the Document data</t>
            <t>Validating the actual contents of any Client&nbhy;supplied URI
            (resolve the reference and follow the link to the Document
            data)</t>
          </list></t>

          <t>At Job submission time, these additional Job processing time
          validation checks are essentially useless, since they require
          actually parsing and interpreting the Document data, are not
          guaranteed to be 100% accurate, and MUST be done, yet again, at Job
          processing time. Also, in the case of a URI, checking for
          availability at Job submission time does not guarantee availability
          at Job processing time.  In addition, at Job processing time, the
          Printer might discover any of the following conditions that were not
          detectable at Job submission time:<list style="symbols">

            <t>runtime errors in the Document data,</t>
            <t>nested Document data that is in an unsupported format,</t>
            <t>the URI reference is no longer valid (i.e., the server hosting
            the Document might be down), or</t>
            <t>any other Job processing error.</t>
          </list></t>

          <t>At Job submission time, a Printer, especially a non-spooling
          Printer, MAY accept Jobs for which it does not have enough space. In
          such a situation, a Printer MAY stop reading data from a Client for
          an indefinite period of time. A Client MUST be prepared for a write
          operation to block for an indefinite period of time (see <xref
          target="Sec.ClientConformanceRequirements" /> ("Client Conformance
          Requirements")).</t>

          <t>When a Printer has too little space for starting a new Job, it
          MAY reject a new Job Creation request. In this case, a Printer MUST
          return a response (in reply to the rejected request) with a
          status&nbhy;code of &#039;server-error-busy&#039; (see
          <xref target="Sec.servererrorbusy0x0507"/>), and it MAY close the
          connection before receiving all bytes of the operation. A Printer
          SHOULD indicate that it is temporarily unable to accept Jobs by
          setting the &#039;spool-space-full&#039; value in its
          &quot;printer&nbhy;state&nbhy;reasons&quot; attribute and
          removing the value when it can accept another Job (see <xref
          target="Sec.printerstatereasons1setOftype2keyword" />).</t>

          <t>When receiving a &#039;server-error-busy&#039; status-code in an
          operation response, a Client MUST be prepared for the Printer to
          close the connection before the Client has sent all of the data
          (especially for the Print-Job operation). A Client MUST be prepared
          to keep submitting a Job Creation request until the Printer accepts
          the Job Creation request.</t>

          <t>At Job processing time, since the Printer has already responded
          with a successful status-code in the response to the Job Creation
          request, if the Printer detects an error, the Printer is unable to
          inform the End User of the error with an operation status-code. In
          this case, the Printer, depending on the error, can set the
          Job&#039;s &quot;job-state&quot;, &quot;job-state-reasons&quot;,
          and/or &quot;job-state-message&quot; attributes to the appropriate
          value(s) so that later queries can report the correct Job
          status.</t>

          <t>Note: Asynchronous notification of events is defined in
          &quot;Internet Printing Protocol (IPP): Event Notifications
          and Subscriptions&quot; <xref target="RFC3995" />.</t>

        </section>
      </section>
      <section anchor="Sec.PrinterOperations" title="Printer Operations">
        <t>All Printer operations are directed at Printers. A Client MUST
        always supply the &quot;printer-uri&quot; operation attribute in order
        to identify the correct target of the operation.</t>

        <section anchor="Sec.PrintJobOperation" title="Print-Job Operation">
          <t>This REQUIRED operation allows a Client to submit a Print Job
          with only one Document and supply the Document data (rather than
          just a reference to the data). See <xref
          target="Sec.APPENDIXDProcessingIPPAttributes" /> for the suggested
          steps for processing Job Creation requests and their operation and
          Job Template attributes.</t>

          <section anchor="Sec.PrintJobRequest" title="Print-Job Request">
            <t>The following groups of attributes are supplied as part of the
            Print&nbhy;Job request:</t>

            <t>Group 1: Operation Attributes<list style="empty">
              <t>Natural Language and Character Set:<list style="empty">
                <t>The &quot;attributes-charset&quot; and
                &quot;attributes-natural-language&quot; attributes as
                described in <xref target="Sec.RequestOperationAttributes"/>.
                The Printer MUST copy these values to the corresponding
                Job Status attributes described in Sections&nbsp;<xref
                target="Sec.attributescharsetcharset" format="counter" /> and
                <xref target="Sec.attributesnaturallanguagenaturalLanguage"
                      format="counter" />.</t>

              </list></t>
              <t>Target:<list style="empty">
                <t>The &quot;printer-uri&quot; (uri) operation attribute,
                which is the target for this operation as described in <xref
                target="Sec.OperationTargets" />.</t>

              </list></t>
              <t>Requesting User Name:<list style="empty">
                <t>The &quot;requesting-user-name&quot; (name(MAX)) attribute
                SHOULD be supplied by the Client as described in <xref
                target="Sec.URIsforeachauthenticationmechanism" />.</t>

              </list></t>
              <t>&quot;job-name&quot; (name(MAX)):<list style="empty">
                <t>The Client MAY supply and the Printer MUST support this
                attribute. It contains the Client&nbhy;supplied Job name.
                If this attribute is supplied by the Client, its value is
                used for the &quot;job-name&quot; attribute of the newly
                created Job. &nbsp;The Client MAY automatically include any
                information that will help the End User distinguish amongst
                his/her Jobs, such as the name of the application program
                along with information from the Document, such as the
                Document name, Document subject, or source file name. If
                this attribute is not supplied by the Client, the
                Printer generates a name to use in the &quot;job-name&quot;
                attribute of the newly created Job
                (see <xref target="Sec.jobnamenameMAX" />).</t>

              </list></t>
              <t>&quot;ipp-attribute-fidelity&quot; (boolean):<list style="empty">
                <t>The Client MAY supply and the Printer MUST support this
                attribute. The value &#039;true&#039; indicates that total
                fidelity to Client&nbhy;supplied Job Template attributes and
                values is required; otherwise, the Printer MUST reject the
                Print-Job request. The value &#039;false&#039; indicates
                that a reasonable attempt to print the Job is acceptable and
                the Printer MUST accept the Print-Job request. If not supplied,
                the Printer assumes that the value is &#039;false&#039;. All
                Printers MUST support both types of Job processing. See <xref
                target="Sec.APPENDIXDProcessingIPPAttributes" /> for a full
                description of &quot;ipp&nbhy;attribute-fidelity&quot; and its
                relationship to other attributes, especially the
                Printer&#039;s &quot;pdl-override-supported&quot;
                attribute.</t>

              </list></t>
              <t>&quot;document-name&quot; (name(MAX)):<list style="empty">
                <t>The Client MAY supply and the Printer MUST support this
                attribute. It contains the Client&nbhy;supplied Document name.
                The Document name MAY be different than the Job name.
                Typically, the Client software automatically supplies the
                Document name on behalf of the End User by using a file name
                or an application&nbhy;generated name. If this attribute is
                supplied, its value can be used in a manner defined by each
                implementation.  Examples include the following:
                printed along with the Job (Job start sheet, page adornments,
                etc.), used by accounting or resource-tracking management
                tools, or even stored along with the Document as a
                Document-level attribute.</t>

              </list></t>
              <t>&quot;compression&quot; (type2 keyword):<list style="empty">
                <t>The Client MAY supply and the Printer MUST support this
                attribute. The Client&nbhy;supplied &quot;compression&quot;
                operation attribute identifies the compression algorithm used
                on the Document data. The following cases exist:<list
                style="letters">

                  <t>If the Client omits this attribute, the Printer MUST
                  assume that the data is not compressed, i.e., the Printer
                  follows the rules below as if the Client supplied the
                  &quot;compression&quot; attribute with a value of
                  &#039;none&#039;.</t>

                  <t>If the Client supplies this attribute but the value is
                  not supported by the Printer, i.e., the value is not one of
                  the values of the Printer&#039;s
                  &quot;compression-supported&quot; attribute, the Printer
                  MUST reject the request and return the
                  &#039;client&nbhy;error-compression-not-supported&#039;
                  status-code. See <xref target="Sec.UnsupportedAttributes"/>
                  for details on returning unsupported attributes and
                  values.</t>

                  <t>If the Client supplies the attribute and the Printer
                  supports the attribute value, the Printer uses the
                  corresponding decompression algorithm on the Document
                  data.</t>

                  <t>If the decompression algorithm fails before the Printer
                  returns an operation response, the Printer MUST reject the
                  request and return the
                  &#039;client-error-compression-error&#039; status-code.</t>

                  <t>If the decompression algorithm fails after the Printer
                  returns an operation response, the Printer MUST abort the
                  Job and add the &#039;compression-error&#039; value to the
                  Job&#039;s &quot;job-state-reasons&quot; attribute.</t>

                  <t>If the decompression algorithm succeeds, the Document
                  data MUST then have the format specified by the Job&#039;s
                  &quot;document&nbhy;format&quot; attribute, if supplied (see
                  the &quot;document-format&quot; operation attribute
                  definition below).</t>

                </list></t>
              </list></t>
              <t>&quot;document-format&quot; (mimeMediaType):<list style="empty">
                <t>The Client MAY supply and the Printer MUST support this
                attribute. The value identifies the format of the supplied
                Document data. The following cases exist:<list
                style="letters">

                  <t>If the Client does not supply this attribute, the Printer
                  assumes that the Document data is in the format defined by
                  the Printer&#039;s &quot;document-format-default&quot;
                  attribute (i.e., the Printer follows the rules below as if
                  the Client supplied the &quot;document-format&quot;
                  attribute with a value equal to the Printer&#039;s default
                  value).</t>

                  <t>If the Client supplies this attribute but the value is
                  not supported by the Printer, i.e., the value is not one of
                  the values of the Printer&#039;s
                  &quot;document-format-supported&quot; attribute, the Printer
                  MUST reject the request and return the
                  &#039;client-error-document-format-not-supported&#039;
                  status&nbhy;code.</t>

                  <t>If the Client supplies this attribute and its value is
                  &#039;application/octet-stream&#039; (i.e., to be
                  auto&nbhy;sensed; see <xref
                  target="Sec.ApplicationoctetstreamAutoSensingthedocumentformat"
                  />), and the format is not one of the Document formats that
                  the Printer can auto-sense, and this check occurs before the
                  Printer returns an operation response, then the Printer MUST
                  reject the request and return the
                  &#039;client-error-document-format-not-supported&#039;
                  status-code.</t>

                  <t>If the Client supplies this attribute and the value is
                  supported by the Printer, the Printer is capable of
                  interpreting the Document data.</t>

                  <t>If interpretation of the Document data fails before the
                  Printer returns an operation response, the Printer MUST
                  reject the request and return the
                  &#039;client&nbhy;error&nbhy;document&nbhy;format&nbhy;error&#039; status&nbhy;code.</t>

                  <t>If interpretation of the Document data fails after the
                  Printer returns an operation response, the Printer MUST
                  abort the Job and add the &#039;document-format-error&#039;
                  value to the Job&#039;s &quot;job-state-reasons&quot;
                  attribute.</t>

                </list></t>
              </list></t>
              <t>&quot;document-natural-language&quot; (naturalLanguage):<list style="empty">
                <t>The Client MAY supply and the Printer SHOULD support this
                attribute. The value specifies the natural language of the
                Document content for those Document formats that require a
                specification of the natural language in order to properly
                image the Document.</t>

              </list></t>
              <t>&quot;job-k-octets&quot; (integer(0:MAX)):<list style="empty">
                <t>The Client MAY supply and the Printer SHOULD support this
                attribute. The Client&nbhy;supplied &quot;job-k-octets&quot;
                operation attribute identifies the total size of the
                Document(s) in K&nbsp;octets being submitted (see <xref
                target="Sec.jobkoctetsinteger0MAX" /> for the complete
                semantics). If the Client supplies the attribute and the
                Printer supports the attribute, the value of the attribute is
                used to populate the Job&#039;s &quot;job-k-octets&quot; Job
                Description attribute.</t>

                <t>For this attribute and the following two attributes
                (&quot;job&nbhy;impressions&quot; and
                &quot;job-media-sheets&quot;), if the Client supplies the
                attribute but the Printer does not support the attribute, the
                Printer ignores the Client-supplied value. If the Client
                supplies the attribute and the Printer supports the attribute,
                and the value is within the range of the corresponding
                Printer&#039;s &quot;xxx-supported&quot; attribute, the
                Printer MUST use the value to populate the Job&#039;s
                &quot;xxx&quot; attribute. If the Client supplies the
                attribute and the Printer supports the attribute, but the
                value is outside the range of the corresponding Printer&#039;s
                &quot;xxx-supported&quot; attribute, the Printer MUST copy the
                attribute and its value to the Unsupported Attributes group,
                reject the request, and return the
                &#039;client&nbhy;error-attributes-or-values-not-supported&#039;
                status-code. If the Client does not supply the attribute, the
                Printer SHOULD populate the corresponding Job attribute if it
                supports the attribute and is able to calculate or discern the
                correct value.</t>

              </list></t>
              <t>&quot;job-impressions&quot; (integer(0:MAX)):<list style="empty">
                <t>The Client MAY supply and the Printer SHOULD support this
                attribute. The Client&nbhy;supplied &quot;job-impressions&quot;
                operation attribute identifies the total size in number of
                Impressions of the Document(s) being submitted (see <xref
                target="Sec.jobimpressionsinteger0MAX" /> for the complete
                semantics).</t>

                <t>See the last paragraph under &quot;job-k-octets&quot;.</t>
              </list></t>
              <t>&quot;job-media-sheets&quot; (integer(1:MAX)):
               <list style="empty">
                <t>The Client MAY supply and the Printer SHOULD support this
                attribute. The Client&nbhy;supplied
                &quot;job-media-sheets&quot; operation attribute identifies
                the total number of Media Sheets to be produced for this
                Job (see <xref target="Sec.jobmediasheetsinteger0MAX" /> for
                the complete semantics).</t>

                <t>See the last paragraph under &quot;job-k-octets&quot;.</t>
              </list></t>
            </list></t>
            <t>Group 2: Job Template Attributes<list style="empty">
              <t>The Client MAY supply a set of Job Template attributes as
              defined in <xref target="Sec.JobTemplateAttributes" />. If the
              Client is not supplying any Job Template attributes in the
              request, the Client SHOULD omit Group 2 rather than sending an
              empty group. However, a Printer MUST be able to accept an empty
              group.</t>

            </list></t>
            <t>Group 3: Document Data<list style="empty">
              <t>The Client MUST supply the Document data to be processed.</t>
            </list></t>
            <t>The simplest Print-Job request consists of just the
            &quot;attributes&nbhy;charset&quot; and
            &quot;attributes-natural-language&quot; operation attributes, the
            &quot;printer-uri&quot; target operation attribute, and the
            Document data. In this simple case, the Printer:</t>

            <t><list style="symbols">
              <t>creates a new Job containing a single Document,</t>
              <t>stores a generated Job name in the &quot;job-name&quot;
              attribute in the natural language and charset requested (see
              <xref target="Sec.RequestOperationAttributes" />) (if those are
              supported; otherwise, using the Printer&#039;s default natural
              language and charset), and</t>

              <t>at Job processing time, uses its corresponding default value
              attributes for the supported Job Template attributes that were
              not supplied by the Client as an IPP attribute or embedded
              instructions in the Document data.</t>
            </list></t>
          </section>

          <section anchor="Sec.PrintJobResponse" title="Print-Job Response">
            <t>The Printer MUST return to the Client the following sets of
            attributes as part of the Print-Job response:</t>

            <t>Group 1: Operation Attributes<list style="empty">
              <t>Natural Language and Character Set:<list style="empty">
                <t>The &quot;attributes-charset&quot; and
                &quot;attributes-natural-language&quot; attributes as
                described in <xref target="Sec.ResponseOperationAttributes"
                />.</t>

              </list></t>
              <t>Status Message:<list style="empty">
                <t>In addition to the REQUIRED status-code returned in every
                response, the response MAY include a
                &quot;status-message&quot; (text(255)) and/or a
                &quot;detailed-status-message&quot; (text(MAX)) operation
                attribute as described in <xref
                target="Sec.APPENDIXBStatusCodesandSuggestedStatusCodeMessages"
                /> and <xref
                target="Sec.OperationResponseStatusCodesandStatusMessages"/>.
                If the Client supplies unsupported or conflicting Job
                Template attributes or values, the Printer MUST reject or
                accept the Print-Job request, depending on whether the
                Client supplied a &#039;true&#039; or &#039;false&#039;
                value for the &quot;ipp&nbhy;attribute-fidelity&quot; operation
                attribute. See the Implementor&#039;s Guides <xref
                target="RFC3196" /> <xref target="PWG5100.19" /> for guidance
                on processing Job Creation requests.</t>

              </list></t>
            </list></t>
            <t>Group 2: Unsupported Attributes<list style="empty">
              <t>See <xref target="Sec.UnsupportedAttributes" /> for details
              on returning unsupported attributes.</t>

              <t>The value of &quot;ipp-attribute-fidelity&quot; supplied
              by the Client does not affect what attributes the Printer
              returns in this group. The value of
              &quot;ipp-attribute-fidelity&quot; only affects whether the
              Print&nbhy;Job operation is accepted or rejected. If the Job is
              accepted, the Client can query the Job using the
              Get&nbhy;Job&nbhy;Attributes operation, requesting the
              unsupported attributes that were returned in the
              Print&nbhy;Job response to see which attributes were
              ignored (not stored in the Job) and which attributes were
              stored with other (substituted) values.</t>

            </list></t>
            <t>Group 3: Job Attributes<list style="empty">
              <t>&quot;job-id&quot; (integer(1:MAX)):<list style="empty">
                <t>The Printer MUST return the Job&#039;s ID in the REQUIRED
                &quot;job-id&quot; Job attribute. The Client uses this
                &quot;job-id&quot; attribute in conjunction with the
                &quot;printer-uri&quot; attribute used in the Print&nbhy;Job
                request when directing Job operations at the Printer.</t>

              </list></t>
              <t>&quot;job-uri&quot; (uri):<list style="empty">
                <t>The Printer MUST return the Job&#039;s URI by returning
                the contents of the REQUIRED &quot;job-uri&quot; Job
                attribute.</t>

              </list></t>
              <t>&quot;job-state&quot; (type1 enum):<list style="empty">
                <t>The Printer MUST return the Job&#039;s REQUIRED
                &quot;job-state&quot; attribute. The value of this attribute
                along with the value of the &quot;job-state-reasons&quot;
                attribute is a &quot;snapshot&quot; of the new Job's state
                when the Printer returns the response.</t>

              </list></t>
              <t>&quot;job-state-reasons&quot; (1setOf type2 keyword):<list
              style="empty">

                <t>The Printer MUST return the Job&#039;s REQUIRED
                &quot;job-state-reasons&quot; attribute.</t>

              </list></t>
              <t>&quot;job-state-message&quot; (text(MAX)):<list style="empty">
                <t>The Printer SHOULD return the Job&#039;s RECOMMENDED
                &quot;job&nbhy;state&nbhy;message&quot; attribute. If the
                Printer supports this attribute, then it MUST be returned
                in the response. If this attribute is not returned in the
                response, the Client can assume that the
                &quot;job-state-message&quot; attribute is not supported
                and will not be returned in a subsequent Job query.</t>

              </list></t>
              <t>&quot;number-of-intervening-jobs&quot; (integer(0:MAX)):<list style="empty">
                <t>The Printer SHOULD return the Job&#039;s RECOMMENDED
                &quot;number&nbhy;of&nbhy;intervening-jobs&quot; attribute.
                If the Printer supports this attribute, then it MUST be
                returned in the response. If this attribute is not
                returned in the response, the Client can assume that the
                &quot;number-of-intervening-jobs&quot; attribute is not
                supported and will not be returned in a subsequent Job
                query.</t>

              </list></t>
            </list></t>
            <t>Note: Since any Printer state information that affects a
            Job&#039;s state is reflected in the &quot;job-state&quot; and
            &quot;job-state-reasons&quot; attributes, it is sufficient to
            return only these attributes and no additional Printer Status
            attributes.</t>

            <t>Note: The simplest response consists of just the
            &quot;attributes&nbhy;charset&quot; and
            &quot;attributes-natural-language&quot; operation attributes and
            the &quot;job&nbhy;uri&quot;, &quot;job-id&quot;, and
            &quot;job-state&quot; Job attributes. In this simplest case, the
            status-code is &#039;successful-ok&#039; and there is no
            &quot;status-message&quot; or &quot;detailed-status-message&quot;
            operation attribute.</t>
          </section>
        </section>

        <section anchor="Sec.PrintURIOperation" title="Print-URI Operation">
          <t>This OPTIONAL operation is identical to the Print-Job operation
          (<xref target="Sec.PrintJobOperation"/>), except that a Client
          supplies a URI reference to the Document data using the
          &quot;document-uri&quot; (uri) operation attribute (in Group 1)
          rather than including the Document data itself. Before returning the
          response, the Printer MUST validate that the Printer supports the
          retrieval method (e.g., 'http', 'ftp', etc.) implied by the URI and
          MUST check for valid URI syntax. If the Client-supplied URI scheme
          is not supported, i.e., the value is not in the Printer&#039;s
          &quot;referenced-uri-scheme-supported&quot; attribute, the Printer
          MUST reject the request and return the
          &#039;client-error-uri-scheme-not-supported&#039; status-code.</t>

          <t>The Printer MAY validate the accessibility of the Document as
          part of the operation, or subsequently. If the Printer discovers an
          accessibility problem before returning an operation response, it
          MUST reject the request and return the
          &#039;client&nbhy;error&nbhy;document&nbhy;access&nbhy;error&#039;
          status-code. The Printer MAY also return a specific Document
          access error code using the
          &quot;document-access-error&quot; operation attribute
          (see <xref target="Sec.documentaccesserrortextMAX" />).</t>

          <t>If the Printer discovers this Document accessibility problem
          after accepting the request and returning an operation response with
          one of the successful status-code values, the Printer MUST add the
          &quot;document&nbhy;access-error&quot; value to the Job&#039;s
          &quot;job-state-reasons&quot; attribute and MAY populate the
          Job&#039;s &quot;job-document-access-errors&quot; Job Status
          attribute (see <xref
          target="Sec.jobdocumentaccesserrors1setOftextMAX" />). See the
          Implementor&#039;s Guides <xref target="RFC3196" /> <xref
          target="PWG5100.19" /> for guidance on processing Job Creation
          requests.</t>

          <t>If the Printer supports this operation, it MUST support the
          &quot;reference-uri-schemes-supported&quot; Printer attribute (see
          <xref target="Sec.referenceurischemessupported1setOfuriScheme"/>).
          </t>

          <t>It is up to the Printer to interpret the URI and subsequently
          &quot;pull&quot; the Document data from the source referenced by the
          URI string.</t>
        </section>

        <section anchor="Sec.ValidateJobOperation" title="Validate-Job Operation">
          <t>This REQUIRED operation is similar to the Print-Job operation
          (<xref target="Sec.PrintJobOperation" />), except that a Client
          supplies no Document data and the Printer allocates no resources,
          i.e., it does not create a new Job. &nbsp;This operation is used
          only to verify the capabilities of a Printer against whatever
          attributes are supplied by the Client in the Validate-Job request.
          By using the Validate-Job operation, a Client can validate that an
          identical Job Creation request (with the Document data) would be
          accepted. The Validate-Job operation also performs the same
          security negotiation as the Print-Job, Print-URI, and Create-Job
          operations (see <xref target="Sec.SecurityConsiderations" />)
          so that a Client can check that the Client and Printer security
          requirements can be met before performing a Job Creation request.</t>

          <t>The Validate-Job operation does not accept a
          &quot;document-uri&quot; attribute in order to allow a Client to
          check that the same Print-URI operation will be accepted, since the
          Client doesn&#039;t send the data with the Print-URI operation. The
          Client SHOULD just issue the Print-URI request.</t>

          <t>The Printer returns the same status-code values, Operation Attributes
          (Group 1), and Unsupported Attributes (Group 2) as the Print-Job
          operation. However, no Job Attributes (Group 3) are returned, since
          no Job is created.</t>
        </section>

        <section anchor="Sec.CreateJobOperation" title="Create-Job Operation">
          <t>This RECOMMENDED operation is similar to the Print-Job operation
          (<xref target="Sec.PrintJobOperation" />), except that in the
          Create-Job request, a Client does not supply Document data or any
          reference to Document data. Also, the Client does not supply any of
          the &quot;document-name&quot;, &quot;document&nbhy;format&quot;,
          &quot;compression&quot;, or &quot;document-natural-language&quot;
          operation attributes. This operation is followed by one or more
          Send-Document or Send-URI operations. In each of those operation
          requests, the Client MAY supply the &quot;document-name&quot;,
          &quot;document&nbhy;format&quot;, and
          &quot;document-natural-language&quot; attributes for each Document
          in the Job.</t>

          <t>If a Printer supports the Create-Job operation, it MUST also
          support the Send-Document operation. If the Printer supports the
          Create-Job and Print-URI operations, it MUST also support the
          Send-URI operation.</t>

          <t>If the Printer supports this operation, it MUST support the
          &quot;multiple-operation-time-out&quot; Printer attribute (see <xref
          target="Sec.multipleoperationtimeoutinteger1MAX" />).</t>

          <t>If the Printer supports this operation, then it MUST support the
          &quot;multiple-document-jobs-supported&quot; Printer Description
          attribute (see&nbsp;<xref
          target="Sec.multipledocumentjobssupportedboolean" />) and indicate
          whether it supports multiple Documents in a Job.</t>

          <t>If the Printer supports this operation and supports multiple
          Documents in a Job, then it MUST support the
          &quot;multiple&nbhy;document&nbhy;handling&quot;
          Job Template attribute with at least one value (see <xref
          target="Sec.multipledocumenthandlingtype2keyword" />), and the
          associated &quot;multiple&nbhy;document&nbhy;handling&nbhy;default&quot; and
          &quot;multiple&nbhy;document&nbhy;handling&nbhy;supported&quot;
          Printer attributes
          (see <xref target="Sec.JobTemplateAttributes" />).</t>

          <t>After the Create-Job operation has completed, the value of the
          &quot;job&nbhy;state&quot; attribute is similar to the
          &quot;job-state&quot; after a Print-Job operation, even though no
          Document data has arrived. A Printer MAY set the
          &#039;job-data-insufficient&#039; value of the Job&#039;s
          &quot;job&nbhy;state&nbhy;reasons&quot; attribute to indicate that
          processing cannot begin until sufficient data has arrived and set
          the &quot;job-state&quot; to either &#039;pending&#039; or
          &#039;pending-held&#039;. A non-spooling Printer that doesn&#039;t
          implement the &#039;pending&#039; Job state can set
          &quot;job&nbhy;state&quot; to &#039;processing&#039;, even
          though there is not yet any data to process. See Sections&nbsp;<xref
          target="Sec.jobstatetype1enum" format="counter" /> and <xref
          target="Sec.jobstatereasons1setOftype2keyword" format="counter"/>.
          </t>
        </section>

        <section anchor="Sec.GetPrinterAttributesOperation" title="Get-Printer-Attributes Operation">
          <t>This REQUIRED operation allows a Client to request the values of
          the attributes of a Printer. In the request, the Client supplies the
          set of Printer attribute names and/or attribute group names in which
          the requester is interested. In the response, the Printer returns a
          corresponding attribute set with the appropriate attribute values
          filled in.</t>

          <t>For Printers, the possible names of attribute groups are:
           <list style="symbols">
            <t>&#039;job-template&#039;: the subset of the Job Template
            attributes that apply to a Printer (the last two columns of
            <xref target="Table.JobTemplateAttributes"/> in
            <xref target="Sec.JobTemplateAttributes" />) that the
            implementation supports for Printers.</t>
            <t>&#039;printer-description&#039;: the subset of the attributes
            specified in <xref
            target="Sec.PrinterDescriptionandStatusAttributes" /> that the
            implementation supports for Printers.</t>
            <t>&#039;all&#039;: the special group &#039;all&#039; that
            includes all attributes that the implementation supports for
            Printers.</t>
          </list></t>

          <t>Since a Client MAY request specific attributes or named groups,
          there is a potential for some overlap. For example, if a
          Client requests &#039;printer-name&#039; and &#039;all&#039;, the
          Client is actually requesting the &quot;printer-name&quot; attribute
          twice: once by naming it explicitly, and once by inclusion in the
          &#039;all&#039; group. In such cases, the Printer returns each
          attribute only once in the response even if it is requested multiple
          times. The Client SHOULD NOT request the same attribute in multiple
          ways.</t>

          <t>Printers MUST support all group names and MUST return all
          supported attributes belonging to the group.</t>

          <section anchor="Sec.GetPrinterAttributesRequest" title="Get-Printer-Attributes Request">
            <t>The following sets of attributes are part of the
            Get&nbhy;Printer&nbhy;Attributes request:</t>

            <t>Group 1: Operation Attributes<list style="empty">
              <t>Natural Language and Character Set:<list style="empty">
                <t>The &quot;attributes-charset&quot; and
                &quot;attributes-natural-language&quot; attributes as
                described in <xref target="Sec.RequestOperationAttributes"
                />.</t>

              </list></t>
              <t>Target:<list style="empty">
                <t>The &quot;printer-uri&quot; (uri) operation attribute,
                which is the target for this operation as described in <xref
                target="Sec.OperationTargets" />.</t>

              </list></t>
              <t>Requesting User Name:
               <list style="empty">
                <t>The &quot;requesting-user-name&quot; (name(MAX)) attribute
                SHOULD be supplied by the Client as described in <xref
                target="Sec.URIsforeachauthenticationmechanism" />.</t>

              </list></t>
              <t>&quot;requested-attributes&quot; (1setOf keyword):
               <list style="empty">
                <t>The Client MAY supply a set of attribute names and/or
                attribute group names in whose values the requester is
                interested. The Printer MUST support this attribute. If the
                Client omits this attribute, the Printer MUST respond as if
                this attribute had been supplied with a value of
                &#039;all&#039;.</t>

              </list></t>
              <t>&quot;document-format&quot; (mimeMediaType):
               <list style="empty">
                <t>The Client MAY supply and the Printer MUST support this
                attribute. It is useful for a Client to determine the set of
                supported attribute values that relate to the requested
                Document format. The Printer MUST return the attributes and
                values that it uses to validate a Job in a Job Creation or
                Validate-Job operation in which this Document format is
                supplied. The Printer SHOULD return only (1) those attributes
                that are supported for the specified format and (2) the
                attribute values that are supported for the specified Document
                format. By specifying the Document format, the Client can get
                the Printer to eliminate the attributes and values that are
                not supported for a specific Document format. For example, a
                Printer might have multiple interpreters to support both
                &#039;application/postscript&#039; (for PostScript) and
                &#039;text/plain&#039; (for text) Documents. However, only
                one of those interpreters might support the
                &quot;number-up&quot; Job Template attribute with values
                of &#039;1&#039;, &#039;2&#039;, and &#039;4&#039;.
                The other interpreter might only be able to support the
                &quot;number-up&quot; Job Template attribute with a value
                of &#039;1&#039;. Thus, a Client can use the
                Get-Printer-Attributes operation to obtain the attributes
                and values that will be used to accept/reject a Job Creation
                request.</t>

                <t>If the Printer does not distinguish between different sets
                of supported values for each different Document format when
                validating Jobs in the Create-Job, Print-Job, Print-URI, and
                Validate-Job operations, it MUST NOT distinguish between
                different Document formats in the Get-Printer-Attributes
                operation. If the Printer does distinguish between different
                sets of supported values for each different Document format
                specified by the Client, this specialization applies only to
                the following Printer attributes:<list style="symbols">

                  <t>Printer attributes that are Job Template attributes
                  (&quot;xxx&nbhy;default&quot;, &quot;xxx-supported&quot;,
                  and &quot;xxx-ready&quot;)
                  (see&nbsp;<xref target="Table.JobTemplateAttributes"/> in
                  <xref target="Sec.JobTemplateAttributes" />),</t>
                  <t>&quot;pdl-override-supported&quot;,</t>
                  <t>&quot;compression-supported&quot;,</t>
                  <t>&quot;job-k-octets-supported&quot;,</t>
                  <t>&quot;job-impressions-supported,</t>
                  <t>&quot;job-media-sheets-supported&quot;,</t>
                  <t>&quot;printer-driver-installer&quot;,</t>
                  <t>&quot;color-supported&quot;, and</t>
                  <t>&quot;reference-uri-schemes-supported&quot;</t>
                </list></t>
                <t>The values of all other Printer attributes (including
                &quot;document-format-supported&quot;) remain invariant with
                respect to the Client&nbhy;supplied Document format (except
                for new Printer Description attributes as registered according
                to <xref target="Sec.AttributeExtensibility" />).</t>

                <t>If the Client omits this &quot;document-format&quot;
                operation attribute, the Printer MUST respond as if the
                attribute had been supplied with the value of the
                Printer&#039;s &quot;document-format-default&quot;
                attribute. Clients SHOULD always supply a value for
                &quot;document&nbhy;format&quot;, since the Printer&#039;s
                &quot;document&nbhy;format&nbhy;default&quot; value can be
                &#039;application&wj;/octet&nbhy;stream&#039;, in which case
                the returned attributes and values are for the union of the
                Document formats that the Printer can automatically sense.
                For more details, see the description of the
                &#039;mimeMediaType&#039; attribute syntax in <xref
                target="Sec.mimeMediaType" />.</t>

                <t>If the Client supplies a value for the
                &quot;document-format&quot; operation attribute that is not
                supported by the Printer, i.e., is not among the values of the
                Printer&#039;s &quot;document&nbhy;format&nbhy;supported&quot;
                attribute, the Printer MUST reject the operation and return
                the &#039;client&nbhy;error&nbhy;document&nbhy;format&nbhy;not&nbhy;supported&#039;
                status-code.</t>

              </list></t>
            </list></t>
          </section>
          <section anchor="Sec.GetPrinterAttributesResponse" title="Get-Printer-Attributes Response">
            <t>The Printer returns the following sets of attributes as part of the Get-Printer-Attributes response:</t>
            <t>Group 1: Operation Attributes<list style="empty">
              <t>Natural Language and Character Set:<list style="empty">
                <t>The &quot;attributes-charset&quot; and
                &quot;attributes-natural-language&quot; attributes as
                described in <xref target="Sec.ResponseOperationAttributes"
                />.</t>

              </list></t>
              <t>Status Message:<list style="empty">
                <t>In addition to the REQUIRED status-code returned in every
                response, the response MAY include a
                &quot;status-message&quot; (text(255)) and/or a
                &quot;detailed-status-message&quot; (text(MAX)) operation
                attribute as described in <xref
                target="Sec.APPENDIXBStatusCodesandSuggestedStatusCodeMessages"
                /> and <xref
                target="Sec.OperationResponseStatusCodesandStatusMessages"
                />.</t>

              </list></t>
            </list></t>
            <t>Group 2: Unsupported Attributes<list style="empty">
              <t>See <xref target="Sec.UnsupportedAttributes" /> for details
              on returning unsupported attributes.</t>

              <t>The response MAY contain the &quot;requested-attributes&quot;
              operation attribute with any supplied values (attribute
              keywords) that were requested by the Client but are not
              supported by the Printer. If the Printer does return unsupported
              attributes referenced in the &quot;requested-attributes&quot;
              operation attribute and that attribute included group names,
              such as &#039;all&#039;, the unsupported attributes MUST NOT
              include attributes described in this document but not supported
              by the implementation.</t>

            </list></t>
            <t>Group 3: Printer Attributes<list style="empty">
              <t>This is the set of requested attributes and their current
              values. The Printer ignores (does not respond with) any
              requested attribute that is not supported. The Printer MAY
              respond with a subset of the supported attributes and values,
              depending on the security policy in force. However, the Printer
              MUST respond with the &#039;unknown&#039; value for any
              supported attribute (including all REQUIRED attributes) for
              which the Printer does not know the value. Also, the Printer MUST
              respond with &#039;no-value&#039; for any supported
              attribute (including all REQUIRED attributes) for which the
              Administrator has not configured a value. See the description of
              the &quot;out-of-band&quot; values in the beginning of <xref
              target="Sec.AttributeSyntaxes" />.</t>

            </list></t>
          </section>
        </section>

        <section anchor="Sec.GetJobsOperation" title="Get-Jobs Operation">
          <t>This REQUIRED operation allows a Client to retrieve the list of
          Jobs belonging to the target Printer. The Client can also supply a
          list of Job attribute names and/or attribute group names. A group of
          Job attributes will be returned for each Job that is returned.</t>

          <t>This operation is similar to the Get-Job-Attributes operation,
          except that this Get-Jobs operation returns attributes from possibly
          more than one Job.</t>

          <section anchor="Sec.GetJobsRequest" title="Get-Jobs Request">
            <t>The Client submits the Get-Jobs request to a Printer.</t>
            <t>The following groups of attributes are part of the Get-Jobs
            request:</t>

            <t>Group 1: Operation Attributes<list style="empty">
              <t>Natural Language and Character Set:<list style="empty">
                <t>The &quot;attributes-charset&quot; and
                &quot;attributes-natural-language&quot; attributes as
                described in <xref target="Sec.RequestOperationAttributes"
                />.</t>

              </list></t>
              <t>Target:<list style="empty">
                <t>The &quot;printer-uri&quot; (uri) operation attribute,
                which is the target for this operation as described in <xref
                target="Sec.OperationTargets" />.</t>

              </list></t>
              <t>Requesting User Name:<list style="empty">
                <t>The &quot;requesting-user-name&quot; (name(MAX)) attribute
                SHOULD be supplied by the Client as described in <xref
                target="Sec.URIsforeachauthenticationmechanism" />.</t>

              </list></t>
              <t>&quot;limit&quot; (integer(1:MAX)):<list style="empty">
                <t>The Client MAY supply and the Printer MUST support this
                attribute. It is an integer value that determines the maximum
                number of Jobs that a Client will receive from the Printer
                even if &quot;which-jobs&quot; or &quot;my-jobs&quot;
                (described below) constrain which Jobs are returned. The limit
                is a &quot;stateless limit&quot; in that if the value supplied
                by the Client is &#039;N&#039;, then only the first
                &#039;N&#039; Jobs are returned in the Get-Jobs response.
                If the Client does not supply this attribute, the Printer
                responds with all applicable Jobs.</t>

              </list></t>
              <t>&quot;requested-attributes&quot; (1setOf type2 keyword):<list style="empty">
                <t>The Client MAY supply and the Printer MUST support this
                attribute. It is a set of Job attribute names and/or attribute
                group names in whose values the requester is interested. This
                set of attributes is returned for each Job that is
                returned. The allowed attribute group names are the same as
                those defined in the Get-Job-Attributes operation in <xref
                target="Sec.GetJobAttributesOperation" />. If the Client does
                not supply this attribute, the Printer MUST respond as if the
                Client had supplied this attribute with two values:
                &quot;job-uri&quot; and &quot;job-id&quot;.</t>

              </list></t>
              <t>&quot;which-jobs&quot; (type2 keyword):<list style="empty">
                <t>The Client MAY supply and the Printer MUST support this
                attribute. It indicates which Jobs MUST be returned by the
                Printer. The values for this attribute include:<list
                style="symbols">

                  <t>&#039;completed&#039;: Any Job whose state is
                  &#039;completed&#039;, &#039;canceled&#039;, or
                  &#039;aborted&#039;.</t>

                  <t>&#039;not-completed&#039;: Any Job whose state is
                  &#039;pending&#039;, &#039;processing&#039;,
                  &#039;processing-stopped&#039;, or
                  &#039;pending-held&#039;.</t>

                </list></t>
                <t>A Printer MUST support both values. However, if the
                implementation does not keep Jobs in the
                &#039;completed&#039;, &#039;canceled&#039;, and
                &#039;aborted&#039; states, then it returns no Jobs when the
                &#039;completed&#039; value is supplied.</t>

                <t>If a Client supplies some other value that is not supported
                by the Printer, the Printer MUST copy the attribute and the
                unsupported value to the Unsupported Attributes group, reject
                the request, and return the
                &#039;client&nbhy;error&nbhy;attributes&nbhy;or&nbhy;values&nbhy;not&nbhy;supported&#039;
                status-code.</t>

                <t>If the Client does not supply this attribute, the Printer
                MUST respond as if the Client had supplied the attribute with
                a value of &#039;not-completed&#039;.</t>

              </list></t>
              <t>&quot;my-jobs&quot; (boolean):<list style="empty">
                <t>The Client MAY supply and the Printer MUST support this
                attribute. It indicates whether Jobs from all users or just
                the Jobs submitted by the requesting user of this request MUST
                be considered as candidate Jobs to be returned by the
                Printer. If the Client does not supply this attribute, the
                Printer MUST respond as if the Client had supplied the
                attribute with a value of &#039;false&#039;, i.e., Jobs from
                all users. The means for authenticating the requesting user
                and matching the Jobs is described in <xref
                target="Sec.SecurityConsiderations" />.</t>

              </list></t>
            </list></t>
          </section>
          <section anchor="Sec.GetJobsResponse" title="Get-Jobs Response">
            <t>The Printer returns all of the Jobs up to the number specified
            by the &quot;limit&quot; attribute that match the criteria as
            defined by the attribute values supplied by the Client in the
            request. It is possible that no Jobs are returned, since there can
            literally be no Jobs at the Printer or there can be no Jobs that
            match the criteria supplied by the Client. If the Client requests
            any Job attributes at all, there is a set of Job Attributes
            returned for each Job.</t>

            <t>It is not an error for the Printer to return 0 Jobs. If the
            response returns 0 Jobs because there are no Jobs matching the
            criteria, and the request would have returned one or more Jobs with
            a status-code of &#039;successful-ok&#039; if there had been Jobs
            matching the criteria, then the status-code for 0 Jobs MUST be
            &#039;successful-ok&#039;.</t>

            <t>Group 1: Operation Attributes<list style="empty">
              <t>Natural Language and Character Set:<list style="empty">
                <t>The &quot;attributes-charset&quot; and
                &quot;attributes-natural-language&quot; attributes as
                described in <xref target="Sec.ResponseOperationAttributes"
                />.</t>

              </list></t>
              <t>Status Message:<list style="empty">
                <t>In addition to the REQUIRED status-code returned in every
                response, the response MAY include a
                &quot;status-message&quot; (text(255)) and/or a
                &quot;detailed-status-message&quot; (text(MAX)) operation
                attribute as described in <xref
                target="Sec.APPENDIXBStatusCodesandSuggestedStatusCodeMessages"
                /> and <xref
                target="Sec.OperationResponseStatusCodesandStatusMessages"
                />.</t>

              </list></t>
            </list></t>
            <t>Group 2: Unsupported Attributes<list style="empty">
              <t>See <xref target="Sec.UnsupportedAttributes" /> for details
              on returning unsupported attributes.</t>

              <t>The response MAY contain the &quot;requested-attributes&quot;
              operation attribute with any supplied values (attribute
              keywords) that were requested by the Client but are not
              supported by the Printer. If the Printer does return unsupported
              attributes referenced in the &quot;requested-attributes&quot;
              operation attribute and that attribute included group names,
              such as &#039;all&#039;, the unsupported attributes MUST NOT
              include attributes described in this document but not supported
              by the implementation.</t>

            </list></t>
            <t>Groups 3 to N: Job Attributes<list style="empty">
              <t>The Printer responds with one set of Job Attributes for each
              returned Job. &nbsp;The Printer ignores (does not respond with)
              any requested attribute or value that is not supported or that is
              restricted by the security policy in force, including whether
              the requesting user is the user that submitted the Job
              (Job&nbhy;originating user) or not (see <xref
              target="Sec.SecurityConsiderations" />). However, the Printer
              MUST respond with the &#039;unknown&#039; value for any
              supported attribute (including all REQUIRED attributes) for
              which the Printer does not know the value, unless it would
              violate the security policy. See the description of the
              &quot;out-of-band&quot; values in the beginning of <xref
              target="Sec.AttributeSyntaxes" />.</t>

              <t>Jobs are returned in the following order:<list
              style="symbols">
                <t>If the Client requests all &#039;completed&#039; Jobs (Jobs
                in the &#039;completed&#039;, &#039;aborted&#039;, or
                &#039;canceled&#039; states), then the Jobs are returned
                newest to oldest (with respect to actual completion time).</t>

                <t>If the Client requests all &#039;not-completed&#039; Jobs
                (Jobs in the &#039;pending&#039;, &#039;processing&#039;,
                &#039;pending-held&#039;, and
                &#039;processing&nbhy;stopped&#039; states), then Jobs
                are returned in relative chronological order of expected
                time to complete (based on whatever scheduling algorithm is
                configured for the Printer).</t>
              </list></t>
            </list></t>
          </section>
        </section>

        <section anchor="Sec.PausePrinterOperation" title="Pause-Printer Operation">
          <t>This OPTIONAL operation allows a Client to stop the Printer from
          scheduling Jobs on all its devices. Depending on implementation, the
          Pause-Printer operation MAY also stop the Printer from processing
          the current Job or Jobs. Any Job that is currently being printed is
          either (1)&nbsp;stopped as soon as the implementation permits or
          (2)&nbsp;completed, depending on implementation. The Printer MUST
          still accept Job Creation requests to create new Jobs but MUST
          prevent any Jobs from entering the &#039;processing&#039; state.</t>

          <t>If the Pause-Printer operation is supported, then the
          Resume-Printer operation MUST be supported, and vice&nbsp;versa.</t>

          <t>The IPP Printer stops the current Job(s) on its device or
          devices that were in the &#039;processing&#039; or
          &#039;processing-stopped&#039; state as soon as the
          implementation permits. If the implementation
          will take appreciable time to stop, the IPP Printer adds the
          &#039;moving-to-paused&#039; value to the Printer&#039;s
          &quot;printer-state-reasons&quot; attribute (see <xref
          target="Sec.printerstatereasons1setOftype2keyword" />). When the
          device or devices have all stopped, the IPP Printer transitions
          the Printer to the &#039;stopped&#039; state; removes the
          &#039;moving-to-paused&#039; value, if present; and adds the
          &#039;paused&#039; value to the Printer&#039;s
          &quot;printer-state-reasons&quot; attribute.</t>

          <t>When the current Job or Jobs complete that were in the
          &#039;processing&#039; state, the IPP Printer transitions them to
          the &#039;completed&#039; state. When the current Job or Jobs
          stop in mid&nbhy;processing that were in the
          &#039;processing&#039; state, the IPP
          Printer transitions them to the &#039;processing-stopped&#039;
          state and adds the &#039;printer-stopped&#039; value to the
          Jobs&#039; &quot;job-state-reasons&quot; attribute.</t>

          <t>For any Jobs that are &#039;pending&#039; or
          &#039;pending-held&#039;, the &#039;printer&nbhy;stopped&#039;
          value of the Jobs' &quot;job-state-reasons&quot; attribute also
          applies. However, the IPP Printer MAY update those Jobs'
          &quot;job&nbhy;state-reasons&quot; values when those Jobs are queried
          (so-called &quot;lazy evaluation&quot;).</t>

          <t>The IPP Printer MUST accept the request in any state and
          transition the Printer to the indicated new
          &quot;printer-state&quot; before returning, as shown in <xref
          target="Table.PausePrinterStates" />.</t>

          <t>Access Rights: The authenticated user (see <xref
          target="Sec.URIsforeachauthenticationmechanism" />) performing this
          operation MUST be an Operator or Administrator of the Printer (see
          Sections&nbsp;<xref target="Sec.Introduction" format="counter"/>
          and <xref target="Sec.OperationsperformedbyOperatorsandAdministrators" format="counter"/>).
          Otherwise, the IPP Printer MUST reject the operation and return
          &#039;client-error-forbidden&#039;,
          &#039;client&nbhy;error&nbhy;not&nbhy;authenticated&#039;, or
          &#039;client-error-not-authorized&#039; as&nbsp;appropriate.</t>

          <texttable style="all" anchor="Table.PausePrinterStates" title="Pause-Printer State Transitions">
            <ttcol>Current &quot;printer-state&quot;</ttcol><ttcol>New &quot;printer-state&quot;</ttcol><ttcol>&quot;printer-state-reasons&quot;</ttcol><ttcol>IPP Printer&#039;s response status-code and action:</ttcol>
            <c>&#039;idle&#039;</c><c>&#039;stopped&#039;</c><c>&#039;paused&#039;</c><c>&#039;successful-ok&#039;</c>
            <c>&#039;processing&#039;</c><c>&#039;processing&#039;</c><c>&#039;moving-to-paused&#039;</c><c>Option 1: &#039;successful-ok&#039;; Later, when all output has stopped, the &quot;printer-state&quot; becomes &#039;stopped&#039;, and the &#039;paused&#039; value replaces the &#039;moving-to-paused&#039; value in the &quot;printer-state-reasons&quot; attribute</c>
            <c>&#039;processing&#039;</c><c>&#039;stopped&#039;</c><c>&#039;paused&#039;</c><c>Option 2: &#039;successful-ok&#039;; all device output stopped immediately</c>
            <c>&#039;stopped&#039;</c><c>&#039;stopped&#039;</c><c>&#039;paused&#039;</c><c>&#039;successful-ok&#039;</c>
          </texttable>

          <section anchor="Sec.PausePrinterRequest" title="Pause-Printer Request">
            <t>The following groups of attributes are part of the
            Pause-Printer request:</t>

            <t>Group 1: Operation Attributes<list style="empty">
              <t>Natural Language and Character Set:<list style="empty">
                <t>The &quot;attributes-charset&quot; and
                &quot;attributes-natural-language&quot; attributes as
                described in <xref target="Sec.RequestOperationAttributes"
                />.</t>

              </list></t>
              <t>Target:<list style="empty">
                <t>The &quot;printer-uri&quot; (uri) operation attribute,
                which is the target for this operation as described in <xref
                target="Sec.OperationTargets" />.</t>

              </list></t>
              <t>Requesting User Name:<list style="empty">
                <t>The &quot;requesting-user-name&quot; (name(MAX)) attribute
                SHOULD be supplied by the Client as described in <xref
                target="Sec.URIsforeachauthenticationmechanism" />.</t>

              </list></t>
            </list></t>
          </section>
          <section anchor="Sec.PausePrinterResponse" title="Pause-Printer Response">
            <t>The following groups of attributes are part of the Pause-Printer response:</t>
            <t>Group 1: Operation Attributes<list style="empty">
              <t>Natural Language and Character Set:<list style="empty">
                <t>The &quot;attributes-charset&quot; and &quot;attributes-natural-language&quot; attributes as described in <xref target="Sec.ResponseOperationAttributes" />.</t>
              </list></t>
              <t>Status Message:<list style="empty">
                <t>In addition to the REQUIRED status-code returned in every response, the response MAY include a &quot;status-message&quot; (text(255)) and/or a &quot;detailed-status-message&quot; (text(MAX)) operation attribute as described in <xref target="Sec.APPENDIXBStatusCodesandSuggestedStatusCodeMessages" /> and <xref target="Sec.OperationResponseStatusCodesandStatusMessages" />.</t>
              </list></t>
            </list></t>
            <t>Group 2: Unsupported Attributes<list style="empty">
              <t>See <xref target="Sec.UnsupportedAttributes" /> for details on returning unsupported attributes.</t>
            </list></t>
          </section>
        </section>

        <section anchor="Sec.ResumePrinterOperation" title="Resume-Printer Operation">
          <t>This OPTIONAL operation allows a Client to resume the Printer
          scheduling Jobs on all its devices. The Printer MUST remove the
          &#039;paused&#039; and &#039;moving-to-paused&#039; values
          from the Printer&#039;s &quot;printer&nbhy;state-reasons&quot;
          attribute, if present. If there are no other reasons to keep a
          device paused (such as a media jam), the IPP Printer is free to
          transition itself to the &#039;processing&#039; or
          &#039;idle&#039; state, depending on whether there are Jobs to
          be processed or not, respectively, and the device(s) resumes
          processing Jobs.</t>

          <t>If the Pause-Printer operation is supported, then the
          Resume-Printer operation MUST be supported, and vice&nbsp;versa.</t>

          <t>The IPP Printer removes the &#039;printer-stopped&#039; value
          from any Job&#039;s &quot;job-state-reasons&quot; attributes
          contained in that Printer.</t>

          <t>The IPP Printer MUST accept the request in any state and
          transition the Printer to the indicated new state as shown in <xref
          target="Table.ResumePrinterStates" />.</t>

          <t>Access Rights: The authenticated user (see <xref
          target="Sec.URIsforeachauthenticationmechanism" />) performing this
          operation MUST be an Operator or Administrator of the Printer (see
          Sections&nbsp;<xref target="Sec.Introduction" format="counter"/>
          and <xref
          target="Sec.OperationsperformedbyOperatorsandAdministrators" format="counter"/>).
          Otherwise, the IPP Printer MUST reject the operation and
          return &#039;client-error-forbidden&#039;,
          &#039;client&nbhy;error&nbhy;not&nbhy;authenticated&#039;, or
          &#039;client-error-not-authorized&#039; as&nbsp;appropriate.</t>

          <t>The Resume-Printer request and Resume-Printer response have the
          same attribute groups and attributes as the Pause-Printer operation
          (see Sections&nbsp;<xref target="Sec.PausePrinterRequest"
          format="counter" /> and <xref target="Sec.PausePrinterResponse"
          format="counter" />).</t>

          <texttable style="all" anchor="Table.ResumePrinterStates" title="Resume-Printer State Transitions">
            <ttcol>Current &quot;printer-state&quot;</ttcol><ttcol>New &quot;printer-state&quot;</ttcol><ttcol>IPP Printer&#039;s response status-code and action:</ttcol>
            <c>&#039;idle&#039;</c><c>&#039;idle&#039;</c><c>&#039;successful-ok&#039;</c>
            <c>&#039;processing&#039;</c><c>&#039;processing&#039;</c><c>&#039;successful-ok&#039;</c>
            <c>&#039;stopped&#039;</c><c>&#039;processing&#039;</c><c>&#039;successful-ok&#039;, when there are Jobs to be processed</c>
            <c>&#039;stopped&#039;</c><c>&#039;idle&#039;</c><c>&#039;successful-ok&#039;, when there are no Jobs to be processed</c>
          </texttable>
        </section>

        <section anchor="Sec.PurgeJobsOperation" title="Purge-Jobs Operation">
          <t>This DEPRECATED operation allows a Client to remove all Jobs from
          a Printer, regardless of their Job states, including Jobs in the
          Printer&#039;s Job History (see <xref
          target="Sec.PartitioningofJobStates" />). After a Purge-Jobs
          operation has been performed, a Printer MUST return no Jobs in
          subsequent Get-Job-Attributes and Get-Jobs responses (until new Jobs
          are submitted).</t>

          <t>Note: This operation SHOULD NOT be supported in new
          implementations, since it destroys Printer accounting
          information.</t>

          <t>Whether the Purge-Jobs (and Get-Jobs) operation affects Jobs that
          were submitted to the device from sources other than the IPP Printer
          in the same way that the Purge-Jobs operation affects Jobs that were
          submitted to the IPP Printer using IPP depends on implementation,
          i.e., on whether IPP is being used as a universal management
          protocol or just to manage IPP Jobs, respectively.</t>

          <t>Note: If an Operator wants to cancel all Jobs without clearing
          out the Job History, the Operator uses the Cancel-Job operation on
          each Job instead of using the Purge-Jobs operation.</t>

          <t>If this OPTIONAL operation is supported, the Printer MUST accept
          this operation in any state and transition the Printer to the
          &#039;idle&#039; state.</t>

          <t>Access Rights: The authenticated user (see <xref
          target="Sec.URIsforeachauthenticationmechanism" />) performing this
          operation MUST be an Operator or Administrator of the Printer (see
          Sections&nbsp;<xref target="Sec.Introduction" format="counter"/> and
          <xref target="Sec.OperationsperformedbyOperatorsandAdministrators"
          format="counter"/>).
          Otherwise, the Printer MUST reject the operation and return
          &apos;client-error-forbidden&apos;,
          &apos;client&nbhy;error&nbhy;not&nbhy;authenticated&apos;, and
          &apos;client-error-not-authorized&apos; as&nbsp;appropriate.</t>

          <t>The Purge-Jobs request and Purge-Jobs response have the same
          attribute groups and attributes as the Pause-Printer operation (see
          Sections&nbsp;<xref target="Sec.PausePrinterRequest" format="counter" />
          and <xref target="Sec.PausePrinterResponse" format="counter" />).</t>

        </section>
      </section>

      <section anchor="Sec.JobOperations" title="Job Operations">
        <t>All Job operations are directed at Jobs. A Client MUST always
        supply some means of identifying the Job object in order to identify
        the correct target of the operation. That Job identification SHOULD be
        the combination of a Printer URI with a Job ID but MAY be the (single)
        Job URI. The IPP implementation MUST support both forms of
        identification for every Job.</t>

        <section anchor="Sec.SendDocumentOperation" title="Send-Document Operation">
          <t>This RECOMMENDED operation allows a Client to add a Document to a
          Job that was created using the Create-Job operation. In the
          Create-Job response, the Printer returns the Job&#039;s URI (the
          &quot;job-uri&quot; attribute) and the Job&#039;s 32&nbhy;bit identifier
          (the &quot;job-id&quot; attribute). For each new Document that the
          Client desires to add, the Client uses a Send&nbhy;Document
          operation. Each Send-Document request contains the entire stream of
          Document data for one Document.</t>

          <t>If the Printer supports this operation but does not support
          multiple Documents per Job, the Printer MUST reject subsequent
          Send-Document operations supplied with data and return the
          &#039;server&nbhy;error&nbhy;multiple&nbhy;document&nbhy;jobs&nbhy;not&nbhy;supported&#039;
          status-code. However, the Printer MUST accept the first Document
          with a &#039;true&#039; or &#039;false&#039; value for the
          &quot;last-document&quot; operation attribute (see below),
          so that Clients MAY always submit one Document Job with a
          &#039;false&#039; value for &quot;last-document&quot; in the
          first Send-Document and a &#039;true&#039; value for
          &quot;last-document&quot; in the second Send-Document (with
          no&nbsp;data).</t>

          <t>Since the Create-Job and the send operations (Send&nbhy;Document
          or Send&nbhy;URI operations) that follow could occur over an
          arbitrarily long period of time for a particular Job, a Client
          MUST send another send operation within a minimum time interval,
          as defined by the IPP Printer, after the receipt of the previous
          request for the Job. &nbsp;If a Printer supports the Create-Job and
          Send-Document operations, the Printer MUST support the
          &quot;multiple-operation-time-out&quot; attribute
          (see <xref target="Sec.multipleoperationtimeoutinteger1MAX"/>).
          This attribute indicates the minimum number of seconds the
          Printer will wait for the next send operation before taking some
          recovery action.</t>

          <t>A Printer MUST recover from an errant Client that does not supply
          a send operation, sometime after the minimum time interval specified
          by the Printer&#039;s &quot;multiple-operation-time-out&quot;
          attribute. Such recovery MAY include any of the following actions
          or other recovery actions:<list style="numbers">

            <t>Assume that the Job is an invalid Job, start the process of
            changing the Job state to &#039;aborted&#039;, add the
            &#039;aborted-by-system&#039; value to the Job&#039;s
            &quot;job-state-reasons&quot; attribute (see <xref
            target="Sec.jobstatereasons1setOftype2keyword" />), and clean up
            all resources associated with the Job. &nbsp;In this case, if
            another send operation is finally received, the Printer
            responds with a &apos;client-error-not-possible&apos; or
            &apos;client-error-not-found&apos; status-code, depending on
            whether the Job is still around when the send operation
            finally arrives.</t>

            <t>Assume that the last send operation received was in fact the
            last Document (as if the &quot;last-document&quot; flag had been
            set to &#039;true&#039;), close the Job, and proceed to process
            it (i.e., move the Job&#039;s state to &#039;pending&#039;).</t>

            <t>Assume that the last send operation received was in fact the
            last Document and close the Job, but move it to the
            &#039;pending-held&#039; state and add the
            &#039;submission-interrupted&#039; value to the Job&#039;s
            &quot;job-state-reasons&quot; attribute (see <xref
            target="Sec.jobstatereasons1setOftype2keyword" />). This action
            allows the user or an Operator to determine whether to continue
            processing the Job by moving it back to the &#039;pending&#039;
            state using the Release-Job operation (see <xref
            target="Sec.ReleaseJobOperation" />) or to cancel the Job using
            the Cancel-Job operation (see <xref
            target="Sec.CancelJobOperation" />).</t>

          </list></t>
          <t>Each implementation is free to decide the &quot;best&quot; action
          to take, depending on the following:
          local policy, whether any Documents have been added,
          whether the implementation spools Jobs or not, and/or any
          other piece of information available to it. If the choice is to
          abort the Job, it is possible that the Job has already been
          processed to the point that some Media Sheet pages have been
          printed.</t>

          <t>Access Rights: The authenticated user (see <xref
          target="Sec.URIsforeachauthenticationmechanism" />) performing this
          operation must be either the Job owner (as determined in the
          Create-Job operation) or an Operator or Administrator of the Printer
          (see Sections&nbsp;<xref target="Sec.Introduction"
          format="counter"/> and <xref
          target="Sec.OperationsperformedbyOperatorsandAdministrators"
          format="counter"/>).
          Otherwise, the Printer MUST reject the operation and return
          &#039;client-error-forbidden&#039;,
          &#039;client&nbhy;error&nbhy;not&nbhy;authenticated&#039;, or
          &#039;client-error-not-authorized&#039; as&nbsp;appropriate.</t>

          <section anchor="Sec.SendDocumentRequest" title="Send-Document Request">
            <t>The following attribute sets are part of the Send-Document
            request:</t>

            <t>Group 1: Operation Attributes<list style="empty">
              <t>Natural Language and Character Set:<list style="empty">
                <t>The &quot;attributes-charset&quot; and
                &quot;attributes-natural-language&quot; attributes as
                described in <xref target="Sec.RequestOperationAttributes"
                />.</t>

              </list></t>
              <t>Target:<list style="empty">
                <t>Either the &quot;printer-uri&quot; (uri) plus
                &quot;job-id&quot; (integer(1:MAX)), or the
                &quot;job-uri&quot; (uri) operation attribute(s), which
                define the target for this operation as described in <xref
                target="Sec.OperationTargets" />.</t>

              </list></t>
              <t>Requesting User Name:<list style="empty">
                <t>The &quot;requesting-user-name&quot; (name(MAX)) attribute
                SHOULD be supplied by the Client as described in <xref
                target="Sec.URIsforeachauthenticationmechanism" />.</t>

              </list></t>
              <t>&quot;document-name&quot; (name(MAX)):<list style="empty">
                <t>The Client MAY supply and the Printer MUST support this
                attribute. It contains the Client&nbhy;supplied Document
                name. The Document name MAY be different than the Job name and
                is not guaranteed to be unique across multiple Documents in
                the same Job. &nbsp;Typically, the Client software
                automatically supplies the Document name on behalf of the End
                User by using a file name or an application-generated
                name. See the description of the &quot;document-name&quot;
                operation attribute in the Print-Job request (<xref
                target="Sec.PrintJobRequest" />) for more information about
                this attribute.</t>

              </list></t>
              <t>&quot;compression&quot; (type2 keyword):<list style="empty">
                <t>See the description of &quot;compression&quot; for the
                Print-Job operation in <xref target="Sec.PrintJobRequest"
                />.</t>

              </list></t>
              <t>&quot;document-format&quot; (mimeMediaType):<list style="empty">
                <t>See the description of &quot;document-format&quot; for the
                Print-Job operation in <xref target="Sec.PrintJobRequest"
                />.</t>

              </list></t>
              <t>&quot;document-natural-language&quot; (naturalLanguage):<list style="empty">
                <t>The Client MAY supply and the Printer MAY support this
                attribute. It specifies the natural language of the Document
                content for those Document formats that require a
                specification of the natural language in order to properly
                image the Document.</t>

              </list></t>
              <t>&quot;last-document&quot; (boolean):<list style="empty">
                <t>The Client MUST supply and the Printer MUST support this
                attribute. It is a boolean flag that is set to
                &#039;true&#039; if this is the last Document for the Job;
                otherwise, it is set to &#039;false&#039;.</t>

              </list></t>
            </list></t>
            <t>Group 2: Document Data<list style="empty">
              <t>The Client MUST supply the Document data if the
              &quot;last-document&quot; flag is set to
              &#039;false&#039;. However, since a Client might not know that
              the previous Document sent with a Send-Document (or Send-URI)
              operation was the last Document (i.e., the
              &quot;last-document&quot; attribute was set to
              &#039;false&#039;), it is legal to send a Send-Document request
              with no Document data where the &quot;last-document&quot; flag
              is set to &#039;true&#039;. Such a request MUST NOT increment
              the value of the Job&#039;s &quot;number-of-documents&quot;
              attribute, since no real Document was added to the Job. &nbsp;It
              is not an error for a Client to submit a Job with no actual
              Document data, i.e., only a single Create-Job and Send-Document
              request with a &quot;last-document&quot; operation attribute set
              to &#039;true&#039; with no Document data.</t>

            </list></t>
          </section>

          <section anchor="Sec.SendDocumentResponse" title="Send-Document Response">
            <t>The following sets of attributes are part of the Send-Document response:</t>
            <t>Group 1: Operation Attributes<list style="empty">
              <t>Natural Language and Character Set:<list style="empty">
                <t>The &quot;attributes-charset&quot; and &quot;attributes-natural-language&quot; attributes as described in <xref target="Sec.ResponseOperationAttributes" />.</t>
              </list></t>
              <t>Status Message:<list style="empty">
                <t>In addition to the REQUIRED status-code returned in every response, the response MAY include a &quot;status-message&quot; (text(255)) and/or a &quot;detailed-status-message&quot; (text(MAX)) operation attribute as described in <xref target="Sec.APPENDIXBStatusCodesandSuggestedStatusCodeMessages" /> and <xref target="Sec.OperationResponseStatusCodesandStatusMessages" />.</t>
              </list></t>
            </list></t>
            <t>Group 2: Unsupported Attributes<list style="empty">
              <t>See <xref target="Sec.UnsupportedAttributes" /> for details on returning unsupported attributes.</t>
            </list></t>
            <t>Group 3: Job Object Attributes<list style="empty">
              <t>This is the same set of attributes as those described in the
              Print-Job response (see <xref target="Sec.PrintJobResponse"/>).
              </t>
            </list></t>
          </section>
        </section>

        <section anchor="Sec.SendURIOperation" title="Send-URI Operation">
          <t>This RECOMMENDED operation is identical to the Send-Document
          operation (see <xref target="Sec.SendDocumentOperation" />), except
          that a Client MUST supply a URI reference (&quot;document-uri&quot;
          operation attribute) rather than the Document data itself. If a
          Printer supports this operation, Clients can use both Send-URI and
          Send-Document operations to add new Documents to an existing
          Job. &nbsp;However, if a Client needs to indicate that the previous
          Send-URI or Send-Document was the last Document, the Client MUST use
          the Send-Document operation with no Document data and the
          &quot;last-document&quot; flag set to &#039;true&#039; (rather than
          using a Send&nbhy;URI operation with no &quot;document-uri&quot;
          operation attribute).</t>

          <t>If a Printer supports this operation, it MUST also support the
          Print&nbhy;URI operation (see <xref target="Sec.PrintURIOperation"
          />).</t>

          <t>The Printer MUST validate the syntax and URI scheme of the
          supplied URI before returning a response, just as in the Print-URI
          operation. The Printer MAY validate the accessibility of the
          Document as part of the operation, or subsequently (see <xref
          target="Sec.PrintURIOperation" />).</t>

        </section>
        <section anchor="Sec.CancelJobOperation" title="Cancel-Job Operation">
          <t>This REQUIRED operation allows a Client to cancel a Print Job
          from the time the Job is created up to the time it is completed,
          canceled, or aborted. Since a Job might already be printing by the
          time a Cancel-Job is received, some Media Sheet pages might be
          printed before the Job is actually terminated.</t>

          <t>The Printer MUST accept or reject the request based on the
          Job&#039;s current state and transition the Job to the indicated new
          state as shown in <xref target="Table.CancelJobStates" />.</t>

          <t>Access Rights: The authenticated user (see <xref
          target="Sec.URIsforeachauthenticationmechanism" />) performing this
          operation must be either the Job owner or an Operator or
          Administrator of the Printer (see
          Sections&nbsp;<xref target="Sec.Introduction" format="counter"/> and
          <xref target="Sec.OperationsperformedbyOperatorsandAdministrators"
                format="counter"/>).
          Otherwise, the Printer MUST reject the operation and return
          &#039;client&nbhy;error&nbhy;forbidden&#039;,
          &#039;client-error-not-authenticated&#039;, or
          &#039;client&nbhy;error&nbhy;not&nbhy;authorized&#039;
          as&nbsp;appropriate.</t>

          <texttable style="all" anchor="Table.CancelJobStates" title="Cancel-Job State Transitions">
            <ttcol>Current &quot;job-state&quot;</ttcol><ttcol>New &quot;job-state&quot;</ttcol><ttcol>Printer&#039;s response status-code and action:</ttcol>
            <c>&#039;pending&#039;</c><c>&#039;canceled&#039;</c><c>&#039;successful-ok&#039;</c>
            <c>&#039;pending-held&#039;</c><c>&#039;canceled&#039;</c><c>&#039;successful-ok&#039;</c>
            <c>&#039;processing&#039;</c><c>&#039;canceled&#039;</c><c>&#039;successful-ok&#039;</c>
            <c>&#039;processing&#039;</c><c>&#039;processing&#039;</c><c>&#039;successful-ok&#039; (note 1)</c>
            <c>&#039;processing&#039;</c><c>&#039;processing&#039;</c><c>&#039;client-error-not-possible&#039; (note 2)</c>
            <c>&#039;processing-stopped&#039;</c><c>&#039;canceled&#039;</c><c>&#039;successful-ok&#039;</c>
            <c>&#039;processing-stopped&#039;</c><c>&#039;processing-stopped&#039;</c><c>&#039;successful-ok&#039; (note 1)</c>
            <c>&#039;processing-stopped&#039;</c><c>&#039;processing-stopped&#039;</c><c>&#039;client-error-not-possible&#039; (note 2)</c>
            <c>&#039;completed&#039;</c><c>&#039;completed&#039;</c><c>&#039;client-error-not-possible&#039;</c>
            <c>&#039;canceled&#039;</c><c>&#039;canceled&#039;</c><c>&#039;client-error-not-possible&#039;</c>
            <c>&#039;aborted&#039;</c><c>&#039;aborted&#039;</c><c>&#039;client-error-not-possible&#039;</c>
          </texttable>

          <t>Note 1: If the implementation requires some measurable time to
          cancel the Job in the &#039;processing&#039; or
          &#039;processing-stopped&#039; Job state, the Printer MUST add the
          &#039;processing-to-stop-point&#039; value to the Job&#039;s
          &quot;job-state-reasons&quot; attribute and then transition the Job
          to the &#039;canceled&#039; state when the processing ceases (see
          <xref target="Sec.jobstatereasons1setOftype2keyword" />).</t>

          <t>Note 2: If the Job already has the
          &#039;processing-to-stop-point&#039; value in its
          &quot;job-state-reasons&quot; attribute, then the Printer MUST
          reject a Cancel-Job operation.</t>

          <section anchor="Sec.CancelJobRequest" title="Cancel-Job Request">
            <t>The following groups of attributes are part of the Cancel-Job request:</t>
            <t>Group 1: Operation Attributes<list style="empty">
              <t>Natural Language and Character Set:<list style="empty">
                <t>The &quot;attributes-charset&quot; and
                &quot;attributes-natural-language&quot; attributes as
                described in <xref target="Sec.RequestOperationAttributes"
                />.</t>

              </list></t>
              <t>Target:<list style="empty">
                <t>Either the &quot;printer-uri&quot; (uri) plus
                &quot;job-id&quot; (integer(1:MAX)), or the
                &quot;job-uri&quot; (uri) operation attribute(s), which
                define the target for this operation as described in <xref
                target="Sec.OperationTargets" />.</t>

              </list></t>
              <t>Requesting User Name:<list style="empty">
                <t>The &quot;requesting-user-name&quot; (name(MAX)) attribute
                SHOULD be supplied by the Client as described in <xref
                target="Sec.URIsforeachauthenticationmechanism" />.</t>

              </list></t>
              <t>&quot;message&quot; (text(127)):<list style="empty">
                <t>The Client MAY supply and the Printer MAY support this
                attribute. It is a message to the Operator. This
                &quot;message&quot; attribute is not the same as the
                &quot;job-message-from-operator&quot; attribute. That
                attribute is used to report a message from the Operator to the
                End User that queries that attribute. This &quot;message&quot;
                operation attribute is used to send a message from the Client
                to the Operator along with the operation request. How or
                where to display this message to the Operator (if at&nbsp;all)
                is an implementation decision.</t>
              </list></t>
            </list></t>
          </section>

          <section anchor="Sec.CancelJobResponse" title="Cancel-Job Response">
            <t>The following sets of attributes are part of the Cancel-Job
            response:</t>

            <t>Group 1: Operation Attributes<list style="empty">
              <t>Natural Language and Character Set:<list style="empty">
                <t>The &quot;attributes-charset&quot; and
                &quot;attributes-natural-language&quot; attributes as
                described in <xref target="Sec.ResponseOperationAttributes"
                />.</t>

              </list></t>
              <t>Status Message:<list style="empty">
                <t>In addition to the REQUIRED status-code returned in every
                response, the response MAY include a
                &quot;status-message&quot; (text(255)) and/or a
                &quot;detailed-status-message&quot; (text(MAX)) operation
                attribute as described in <xref
                target="Sec.APPENDIXBStatusCodesandSuggestedStatusCodeMessages"
                /> and <xref
                target="Sec.OperationResponseStatusCodesandStatusMessages"
                />.</t>

              </list></t>
            </list></t>
            <t>Group 2: Unsupported Attributes<list style="empty">
              <t>See <xref target="Sec.UnsupportedAttributes" /> for details
              on returning unsupported attributes.</t>

              <t>Once a successful response has been sent, the implementation
              guarantees that the Job will eventually end up in the
              &#039;canceled&#039; state. Between the time that the
              Cancel-Job operation is accepted and when the Job enters the
              &#039;canceled&#039; job-state (see <xref
              target="Sec.jobstatetype1enum" />), the
              &quot;job-state-reasons&quot; attribute SHOULD contain the
              &#039;processing-to-stop-point&#039; value, which indicates to
              later queries that although the Job might still be
              &#039;processing&#039; it will eventually end up in the
              &#039;canceled&#039; state, not the &#039;completed&#039;
              state.</t>
             </list></t>
          </section>
        </section>

        <section anchor="Sec.GetJobAttributesOperation" title="Get-Job-Attributes Operation">
          <t>This REQUIRED operation allows a Client to request the values of
          attributes of a Job, and it is almost identical to the
          Get&nbhy;Printer&nbhy;Attributes operation (see <xref
          target="Sec.GetPrinterAttributesOperation" />). The only differences
          are that the operation is directed at a Job rather than a Printer,
          there is no &quot;document-format&quot; operation attribute used
          when querying a Job, and the returned attribute group is a set of
          Job attributes rather than a set of Printer attributes.</t>

          <t>For Jobs, the possible names of attribute groups are:
           <list style="symbols">
            <t>&#039;job-template&#039;: the subset of the Job Template
            attributes that apply to a Job (the first column of
            <xref target="Table.JobTemplateAttributes"/> in
            <xref target="Sec.JobTemplateAttributes" />) that the
            implementation supports for Jobs.</t>
            <t>&#039;job-description&#039;: the subset of the Job Description
            and Status attributes specified in <xref
            target="Sec.JobDescriptionandStatusAttributes" /> that the
            implementation supports for Jobs.</t>
            <t>&#039;all&#039;: the special group &#039;all&#039; that
            includes all attributes that the implementation supports for
            Jobs.</t>
          </list></t>

          <t>Since a Client MAY request specific attributes or named groups,
          there is a potential for some overlap. For example, if a
          Client requests &#039;job-name&#039; and
          &#039;job-description&#039;, the Client is actually requesting the
          &quot;job-name&quot; attribute once by naming it explicitly, and
          once by inclusion in the &#039;job-description&#039; group. In such
          cases, the Printer returns the attribute only once in the response
          even if it is requested multiple times. The Client SHOULD NOT
          request the same attribute in multiple ways.</t>

          <t>Jobs MUST support all group names and MUST return all supported
          attributes belonging to the group.</t>

          <section anchor="Sec.GetJobAttributesRequest" title="Get-Job-Attributes Request">
            <t>The following groups of attributes are part of the
            Get-Job-Attributes request when the request is directed at a
            Job:</t>

            <t>Group 1: Operation Attributes<list style="empty">
              <t>Natural Language and Character Set:<list style="empty">
                <t>The &quot;attributes-charset&quot; and
                &quot;attributes-natural-language&quot; attributes as
                described in <xref target="Sec.RequestOperationAttributes"/>.
                </t>

              </list></t>
              <t>Target:<list style="empty">
                <t>Either the &quot;printer-uri&quot; (uri) plus
                &quot;job-id&quot; (integer(1:MAX)), or the
                &quot;job-uri&quot; (uri) operation attribute(s), which define
                the target for this operation as described in <xref
                target="Sec.OperationTargets" />.</t>

              </list></t>
              <t>Requesting User Name:<list style="empty">
                <t>The &quot;requesting-user-name&quot; (name(MAX)) attribute
                SHOULD be supplied by the Client as described in <xref
                target="Sec.URIsforeachauthenticationmechanism" />.</t>
              </list></t>

              <t>&quot;requested-attributes&quot; (1setOf keyword):<list
              style="empty">

                <t>The Client MAY supply and the Printer MUST support this
                attribute. It is a set of attribute names and/or attribute
                group names in whose values the requester is interested. If
                the Client omits this attribute, the Printer MUST respond as
                if this attribute had been supplied with a value of
                &#039;all&#039;.</t>
              </list></t>
            </list></t>
          </section>

          <section anchor="Sec.GetJobAttributesResponse" title="Get-Job-Attributes Response">
            <t>The Printer returns the following sets of attributes as part of
            the Get-Job-Attributes response:</t>

            <t>Group 1: Operation Attributes<list style="empty">
              <t>Natural Language and Character Set:<list style="empty">
                <t>The &quot;attributes-charset&quot; and
                &quot;attributes-natural-language&quot; attributes as
                described in <xref target="Sec.ResponseOperationAttributes"
                />. &quot;attributes&nbhy;natural-language&quot; MAY be the
                natural language of the Job, rather than the one
                requested.</t>
              </list></t>
              <t>Status Message:<list style="empty">
                <t>In addition to the REQUIRED status-code returned in every
                response, the response MAY include a
                &quot;status-message&quot; (text(255)) and/or a
                &quot;detailed-status-message&quot; (text(MAX)) operation
                attribute as described in <xref
                target="Sec.APPENDIXBStatusCodesandSuggestedStatusCodeMessages"
                /> and <xref
                target="Sec.OperationResponseStatusCodesandStatusMessages"
                />.</t>
              </list></t>
            </list></t>

            <t>Group 2: Unsupported Attributes<list style="empty">
              <t>See <xref target="Sec.UnsupportedAttributes" /> for details on returning unsupported attributes.</t>
              <t>The response MAY contain the &quot;requested-attributes&quot;
              operation attribute with any supplied values (attribute
              keywords) that were requested by the Client but are not
              supported by the Printer. If the Printer does return unsupported
              attributes referenced in the &quot;requested-attributes&quot;
              operation attribute and that attribute included group names,
              such as &#039;all&#039;, the unsupported attributes MUST NOT
              include attributes described in this document but not supported
              by the implementation.</t>

            </list></t>
            <t>Group 3: Job Attributes<list style="empty">
              <t>This is the set of requested attributes and their current
              values. The Printer ignores (does not respond with) any
              requested attribute or value that is not supported or that is
              restricted by the security policy in force, including whether
              the requesting user is the user that submitted the Job
              (Job&nbhy;originating user) or not (see <xref
              target="Sec.SecurityConsiderations" />). However, the Printer
              MUST respond with the &#039;unknown&#039; value for any
              supported attribute (including all REQUIRED attributes) for
              which the Printer does not know the value, unless it would
              violate the security policy. See the description of the
              &quot;out-of-band&quot; values in the beginning of <xref
              target="Sec.AttributeSyntaxes" />.</t>
            </list></t>
          </section>
        </section>

        <section anchor="Sec.HoldJobOperation" title="Hold-Job Operation">
          <t>This OPTIONAL operation allows a Client to hold a pending Job in
          the queue so that it is not eligible for scheduling. If the Hold-Job
          operation is supported, then the Release-Job operation MUST be
          supported, and vice&nbsp;versa. The OPTIONAL
          &quot;job-hold-until&quot; operation attribute allows a Client to
          specify whether to hold the Job indefinitely or until a specified
          time period, if supported.</t>

          <t>The Printer MUST accept or reject the request based on the
          Job&#039;s current state and transition the Job to the indicated new
          state as shown in <xref target="Table.HoldJobStates" />.</t>

          <t>Note: In order to keep the Hold-Job operation simple, such a
          request is rejected when the Job is in the &#039;processing&#039;
          or &#039;processing&nbhy;stopped&#039; state. If an operation is
          needed to hold Jobs while in either of these states, it will be
          added as an additional operation, rather than overloading the
          Hold-Job operation. Then it
          is clear to Clients by querying the Printer&#039;s
          &quot;operations-supported&quot; (see <xref
          target="Sec.operationssupported1setOftype2enum" />) and the
          Job&#039;s &quot;job-state&quot; (see <xref
          target="Sec.jobstatetype1enum" />) attributes which operations are
          possible.</t>

          <t>Access Rights: The authenticated user (see <xref
          target="Sec.URIsforeachauthenticationmechanism" />) performing this
          operation must be either the Job owner or an Operator or
          Administrator of the Printer (see
          Sections&nbsp;<xref target="Sec.Introduction" format="counter"/>
          and <xref
          target="Sec.OperationsperformedbyOperatorsandAdministrators"
          format="counter"/>).
          Otherwise, the Printer MUST reject the operation and return
          &#039;client&nbhy;error&nbhy;forbidden&#039;,
          &#039;client-error-not-authenticated&#039;, or
          &#039;client-error-not-authorized&#039; as&nbsp;appropriate.</t>

          <texttable style="all" anchor="Table.HoldJobStates" title="Hold-Job State Transitions">
            <ttcol>Current &quot;job-state&quot;</ttcol><ttcol>New &quot;job-state&quot;</ttcol><ttcol>Printer&#039;s response status-code and action:</ttcol>
            <c>&#039;pending&#039;</c><c>&#039;pending-held&#039;</c><c>&#039;successful-ok&#039; (note 1)</c>
            <c>&#039;pending&#039;</c><c>&#039;pending&#039;</c><c>&#039;successful-ok&#039; (note 2)</c>
            <c>&#039;pending-held&#039;</c><c>&#039;pending-held&#039;</c><c>&#039;successful-ok&#039; (note 1)</c>
            <c>&#039;pending-held&#039;</c><c>&#039;pending&#039;</c><c>&#039;successful-ok&#039; (note 2)</c>
            <c>&#039;processing&#039;</c><c>&#039;processing&#039;</c><c>&#039;client-error-not-possible&#039;</c>
            <c>&#039;processing-stopped&#039;</c><c>&#039;processing-stopped&#039;</c><c>&#039;client-error-not-possible&#039;</c>
            <c>&#039;completed&#039;</c><c>&#039;completed&#039;</c><c>&#039;client-error-not-possible&#039;</c>
            <c>&#039;canceled&#039;</c><c>&#039;canceled&#039;</c><c>&#039;client-error-not-possible&#039;</c>
            <c>&#039;aborted&#039;</c><c>&#039;aborted&#039;</c><c>&#039;client-error-not-possible&#039;</c>
          </texttable>

          <t>Note 1: If the implementation supports multiple reasons for a Job
          to be in the &#039;pending-held&#039; state, the Printer MUST add
          the &quot;job&nbhy;hold&nbhy;until&nbhy;specified&quot; value
          to the Job&#039;s &quot;job-state-reasons&quot; attribute.</t>

          <t>Note 2: If the Printer supports the &quot;job-hold-until&quot;
          operation attribute, but the specified time period has already
          started (or is the &#039;no-hold&#039; value) and there are no other
          reasons to hold the Job, the Printer MUST make the Job be a
          candidate for processing immediately (see <xref
          target="Sec.jobholduntiltype2keywordnameMAX" />) by putting the Job
          in the &#039;pending&#039; state.</t>

          <section anchor="Sec.HoldJobRequest" title="Hold-Job Request">
            <t>The groups and operation attributes are the same as
            those defined for a Cancel-Job request
            (see <xref target="Sec.CancelJobRequest" />),
            with the addition of the following Group 1 operation
            attribute:<list style="empty">

              <t>&quot;job-hold-until&quot; (type2 keyword | name(MAX)):</t>
              <t>The Client MAY supply and the Printer MUST support this
              operation attribute in a Hold-Job request if it supports the
              &quot;job&nbhy;hold&nbhy;until&quot; Job Template attribute in
              Job Creation requests. See <xref
              target="Sec.jobholduntiltype2keywordnameMAX" />. The Printer
              SHOULD support the &quot;job&nbhy;hold&nbhy;until&quot;
              Job Template attribute for use in Job Creation requests with
              at least the &#039;indefinite&#039; value, if it supports
              the Hold-Job operation. Otherwise, a Client cannot create a
              Job and hold it immediately (without picking some supported
              time period in the future).</t>

              <t>If supplied and supported as specified in the Printer&#039;s
              &quot;job&nbhy;hold&nbhy;until&nbhy;supported&quot; attribute,
              the Printer copies the supplied operation attribute to the
              Job, replacing the Job&#039;s previous
              &quot;job-hold-until&quot; attribute, if present, and
              makes the Job a candidate for scheduling during the
              supplied named time period.</t>

              <t>If supplied but either the &quot;job-hold-until&quot;
              operation attribute itself or the value supplied is not
              supported, the Printer accepts the request, returns the
              unsupported attribute or value in the Unsupported Attributes
              group according to <xref target="Sec.UnsupportedAttributes" />,
              returns the
              &#039;successful-ok-ignored-or-substituted-attributes&#039;
              status-code, and holds the Job indefinitely until a
              Client performs a subsequent Release-Job operation.</t>

              <t>If (1) the Client supplies either a value that specifies a
              time period that has already started or the
              &#039;no-hold&#039; value (meaning don&#039;t hold the Job)
              and (2) the Printer supports the &quot;job&nbhy;hold&nbhy;until&quot;
              operation attribute and there are no other reasons to hold
              the Job, the Printer MUST accept the operation and make the
              Job be a candidate for processing immediately (see <xref
              target="Sec.jobholduntiltype2keywordnameMAX" />).</t>

              <t>If the Client does not supply a &quot;job-hold-until&quot;
              operation attribute in the request, the Printer MUST populate
              the Job with a &quot;job-hold-until&quot; attribute with the
              &#039;indefinite&#039; value (if the Printer supports the
              &quot;job-hold-until&quot; attribute) and hold the Job
              indefinitely, until a Client performs a Release-Job
              operation.</t>

            </list></t>
          </section>
          <section anchor="Sec.HoldJobResponse" title="Hold-Job Response">
            <t>The groups and attributes are the same as those defined for
            a Cancel&nbhy;Job response
            (see <xref target="Sec.CancelJobResponse" />).</t>
          </section>
        </section>

        <section anchor="Sec.ReleaseJobOperation" title="Release-Job Operation">
          <t>This OPTIONAL operation allows a Client to release a previously
          held Job so that it is again eligible for scheduling. If the
          Hold-Job operation is supported, then the Release-Job operation MUST
          be supported, and vice&nbsp;versa.</t>

          <t>This operation removes the &quot;job-hold-until&quot; Job
          attribute, if present, from the Job that had been supplied in
          the Create&nbhy;Job or most recent Hold-Job or Restart-Job
          operation and removes its effect on the Job. &nbsp;The Printer
          MUST remove the &quot;job-hold-until-specified&quot; value
          from the Job&#039;s &quot;job-state-reasons&quot; attribute, if
          present. See <xref target="Sec.jobstatereasons1setOftype2keyword"/>.
          </t>

          <t>The Printer MUST accept or reject the request based on the
          Job&#039;s current state and transition the Job to the indicated new
          state as shown in <xref target="Table.ReleaseJobStates" />.</t>

          <t>Access Rights: The authenticated user (see <xref
          target="Sec.URIsforeachauthenticationmechanism" />) performing this
          operation must be either the Job owner or an Operator or
          Administrator of the Printer (see
          Sections&nbsp;<xref target="Sec.Introduction" format="counter"/>
          and <xref
          target="Sec.OperationsperformedbyOperatorsandAdministrators"
          format="counter"/>).
          Otherwise, the Printer MUST reject the operation and return
          &#039;client&nbhy;error&nbhy;forbidden&#039;,
          &#039;client-error-not-authenticated&#039;, or
          &#039;client-error-not-authorized&#039; as&nbsp;appropriate.</t>

          <t>The Release-Job request and Release-Job response have the same
          attribute groups and attributes as the Cancel-Job operation (see
          Sections&nbsp;<xref target="Sec.CancelJobRequest" format="counter"/>
          and <xref target="Sec.CancelJobResponse" format="counter"/>).</t>

          <texttable style="all" anchor="Table.ReleaseJobStates" title="Release-Job State Transitions">
            <ttcol>Current &quot;job-state&quot;</ttcol><ttcol>New &quot;job-state&quot;</ttcol><ttcol>Printer&#039;s response status-code and action:</ttcol>
            <c>&#039;pending&#039;</c><c>&#039;pending&#039;</c><c>&#039;successful-ok&#039;.  No effect on the Job.</c>
            <c>&#039;pending-held&#039;</c><c>&#039;pending-held&#039;</c><c>&#039;successful-ok&#039; (note 1)</c>
            <c>&#039;pending-held&#039;</c><c>&#039;pending&#039;</c><c>&#039;successful-ok&#039;</c>
            <c>&#039;processing&#039;</c><c>&#039;processing&#039;</c><c>&#039;successful-ok&#039;.  No effect on the Job.</c>
            <c>&#039;processing-stopped&#039;</c><c>&#039;processing-stopped&#039;</c><c>&#039;successful-ok&#039;.  No effect on the Job.</c>
            <c>&#039;completed&#039;</c><c>&#039;completed&#039;</c><c>&#039;client-error-not-possible&#039;</c>
            <c>&#039;canceled&#039;</c><c>&#039;canceled&#039;</c><c>&#039;client-error-not-possible&#039;</c>
            <c>&#039;aborted&#039;</c><c>&#039;aborted&#039;</c><c>&#039;client-error-not-possible&#039;</c>
          </texttable>
          <t>Note 1: If there are other reasons to keep the Job in the
          &#039;pending&nbhy;held&#039; state, such as
          &#039;resources-are-not-ready&#039;, the Job remains in the
          &#039;pending-held&#039; state. Thus, the
          &#039;pending-held&#039; state is not just for Jobs that have
          the &quot;job-hold-until&quot; attribute applied to them
          but is also used for any reason that will keep the Job from being a
          candidate for scheduling and processing, such as
          &#039;resources&nbhy;are-not-ready&#039;. See the
          &quot;job-hold-until&quot; attribute (<xref
          target="Sec.jobholduntiltype2keywordnameMAX" />).</t>
        </section>
        <section anchor="Sec.RestartJobOperation" title="Restart-Job Operation">
          <t>This DEPRECATED operation allows a Client to restart a Job that
          is retained in the queue after processing has completed (see <xref
          target="Sec.PartitioningofJobStates" />).</t>

          <t>Note: This operation SHOULD NOT be supported in new
          implementations, since it destroys Printer accounting information.
          The Resubmit-Job operation <xref target="PWG5100.11" /> is
          the safe replacement for this operation and makes a copy of the Job,
          assigns a new &quot;job&nbhy;uri&quot; and &quot;job-id&quot; to the
          copy, and resets the Job progress attributes in the new copy
          only.</t>

          <t>The Restart-Job operation moves the Job to the
          &#039;pending&#039; or &#039;pending&nbhy;held&#039; Job state
          and restarts at the beginning on the same Printer with the same
          attribute values. If any of the Documents in the Job were passed by
          reference (Print-URI or Send-URI), the Printer MUST refetch the
          data, since the semantics of Restart-Job are to repeat all Job
          processing. The Job Status attributes that accumulate Job progress,
          such as &quot;job-impressions-completed&quot;,
          &quot;job&nbhy;media&nbhy;sheets&nbhy;completed&quot;, and
          &quot;job-k-octets-processed&quot;, MUST be reset to 0 so that they
          give an accurate record of the Job from its restart point. The Job
          MUST continue to use the same &quot;job-uri&quot; and
          &quot;job-id&quot; attribute values.</t>

          <t>The Printer MUST accept or reject the request based on the
          Job&#039;s current state and transition the Job to the indicated new
          state as shown in <xref target="Table.RestartJobStates" />.</t>

          <t>Note: In order to prevent a user from inadvertently restarting a
          Job in the middle, the Restart-Job request is rejected when the Job
          is in the &#039;processing&#039; or
          &#039;processing-stopped&#039; state. If in the future an
          operation is needed to hold or restart Jobs while in either of
          these states, it will be added as an additional operation,
          rather than overloading the Restart-Job operation, so that
          it is clear that the user intended that the current Job not be
          completed.</t>

          <t>Access Rights: The authenticated user (see <xref
          target="Sec.URIsforeachauthenticationmechanism" />) performing this
          operation must be either the Job owner or an Operator or
          Administrator of the Printer (see
          Sections&nbsp;<xref target="Sec.Introduction" format="counter"/>
          and <xref
          target="Sec.OperationsperformedbyOperatorsandAdministrators"
          format="counter"/>).
          Otherwise, the Printer MUST reject the operation and return
          &#039;client&nbhy;error&nbhy;forbidden&#039;,
          &#039;client-error-not-authenticated&#039;, or
          &#039;client-error-not-authorized&#039; as&nbsp;appropriate.</t>

          <texttable style="all" anchor="Table.RestartJobStates" title="Restart-Job State Transitions">
            <ttcol>Current &quot;job-state&quot;</ttcol><ttcol>New &quot;job-state&quot;</ttcol><ttcol>Printer&#039;s response status-code and action:</ttcol>
            <c>&#039;pending&#039;</c><c>&#039;pending&#039;</c><c>&#039;client-error-not-possible&#039;</c>
            <c>&#039;pending-held&#039;</c><c>&#039;pending-held&#039;</c><c>&#039;client-error-not-possible&#039;</c>
            <c>&#039;processing&#039;</c><c>&#039;processing&#039;</c><c>&#039;client-error-not-possible&#039;</c>
            <c>&#039;processing-stopped&#039;</c><c>&#039;processing-stopped&#039;</c><c>&#039;client-error-not-possible&#039;</c>
            <c>&#039;completed&#039;</c><c>&#039;pending&#039; or &#039;pending-held&#039;</c><c>&#039;successful-ok&#039; - Job is started over.</c>
            <c>&#039;completed&#039;</c><c>&#039;completed&#039;</c><c>&#039;client-error-not-possible&#039; - see Rule 1.</c>
            <c>&#039;canceled&#039;</c><c>&#039;pending&#039; or &#039;pending-held&#039;</c><c>&#039;successful-ok&#039; - Job is started over.</c>
            <c>&#039;canceled&#039;</c><c>&#039;canceled&#039;</c><c>&#039;client-error-not-possible&#039; - see Rule 1.</c>
            <c>&#039;aborted&#039;</c><c>&#039;pending&#039; or &#039;pending-held&#039;</c><c>&#039;successful-ok&#039; - Job is started over.</c>
            <c>&#039;aborted&#039;</c><c>&#039;aborted&#039;</c><c>&#039;client-error-not-possible&#039; - see Rule 1.</c>
          </texttable>

          <t>Rule 1: If the Job Retention Period has expired for the Job in
          this state, then the Printer rejects the operation. See <xref
          target="Sec.PartitioningofJobStates" />.</t>

          <section anchor="Sec.RestartJobRequest" title="Restart-Job Request">
            <t>The groups and attributes are the same as those defined for
            a Cancel&nbhy;Job request
            (see <xref target="Sec.CancelJobRequest" />), with the
            addition of the following Group 1 operation attribute:<list
            style="empty">

              <t>&quot;job-hold-until&quot; (type2 keyword | name(MAX)):</t>
              <t>The Client MAY supply and the Printer MUST support this
              operation attribute in a Restart-Job request if it supports the
              &quot;job&nbhy;hold&nbhy;until&quot; Job Template attribute
              in Job Creation requests. See <xref
              target="Sec.jobholduntiltype2keywordnameMAX" />.</t>

              <t>If supplied and supported as specified in the Printer&#039;s
              &quot;job&nbhy;hold&nbhy;until-supported&quot; attribute, the
              Printer copies the supplied operation attribute to the Job,
              replacing the Job&#039;s previous &quot;job-hold-until&quot;
              attribute, if present, and makes the Job a candidate for
              scheduling during the supplied named time period. See <xref
              target="Sec.jobholduntiltype2keywordnameMAX" />.</t>

              <t>If supplied but the value is not supported, the Printer
              accepts the request, returns the unsupported attribute or value
              in the Unsupported Attributes group according to <xref
              target="Sec.UnsupportedAttributes" />, returns the
              &#039;successful-ok-ignored-or-substituted-attributes&#039;
              status-code, and holds the Job indefinitely until a Client
              performs a subsequent Release-Job operation.</t>

              <t>If supplied but the &quot;job-hold-until&quot; operation
              attribute itself is not supported, the Printer accepts the
              request, returns the unsupported attribute with the out-of-band
              &#039;unsupported&#039; value in the Unsupported Attributes
              group according to <xref target="Sec.UnsupportedAttributes" />,
              returns the
              &#039;successful-ok-ignored-or-substituted-attributes&#039;
              status-code, and restarts the Job, i.e., ignores the
              &quot;job&nbhy;hold&nbhy;until&quot; attribute.</t>

              <t>If (1) the Client supplies either a value that specifies a
              time period that has already started or the
              &#039;no-hold&#039; value (meaning don&#039;t hold the Job)
              and (2) the Printer supports the
              &quot;job&nbhy;hold&nbhy;until&quot; operation attribute
              and there are no other reasons to hold the Job, the
              Printer makes the Job a candidate for processing
              immediately (see <xref
              target="Sec.jobholduntiltype2keywordnameMAX" />).</t>

              <t>If the Client does not supply a &quot;job-hold-until&quot;
              operation attribute in the request, the Printer removes the
              &quot;job-hold-until&quot; attribute, if present, from the
              Job. &nbsp;If there are no other reasons to hold the Job, the
              Restart-Job operation makes the Job a candidate for processing
              immediately (see <xref
              target="Sec.jobholduntiltype2keywordnameMAX" />).</t>

            </list></t>
          </section>
          <section anchor="Sec.RestartJobResponse" title="Restart-Job Response">
            <t>The groups and attributes are the same as those defined for a
            Cancel&nbhy;Job response
            (see <xref target="Sec.CancelJobResponse" />).</t>
          </section>
        </section>
      </section>
    </section>

    <section anchor="Sec.ObjectAttributes" title="Object Attributes">
      <t>This section describes the attributes with their corresponding
      attribute syntaxes and values that are part of the IPP Model. The
      sections below show the objects and their associated attributes that
      are included within the scope of this protocol. Many of these attributes
      are derived from other relevant documents:</t>

      <t><list style="symbols">
        <t>Document Printing Application (DPA) <xref target="ISO10175"/></t>
        <t>Printer MIB v2 <xref target="RFC3805"/></t>
      </list></t>
      <t>Each attribute is uniquely identified in this document using a
      &quot;keyword&quot; (see <xref target="Sec.Keyword" />) that is the
      name of the attribute. The keyword is included in the section title
      describing that attribute.</t>

      <t>Note: Not only are keywords used to identify attributes, but one of
      the attribute syntaxes described below is &quot;keyword&quot; so that
      some attributes have &apos;keyword&apos; values. Therefore, these attributes are
      defined as having an attribute syntax that is a set of keywords.</t>

      <section anchor="Sec.AttributeSyntaxes" title="Attribute Syntaxes">
        <t>This section defines the basic attribute syntax types that all
        Clients and IPP objects MUST be able to accept in responses and accept
        in requests, respectively. Each attribute description in
        Sections&nbsp;<xref target="Sec.IPPOperations" format="counter" />
        and <xref target="Sec.ObjectAttributes" format="counter"/> includes
        in the section title the name of the attribute with its syntax(es)
        in parentheses. A conforming implementation of an attribute MUST
        include the semantics of the attribute syntax(es) so identified.
        <xref target="Sec.AttributeSyntaxExtensibility" /> describes how the
        protocol can be extended with new attribute syntaxes.</t>

        <t>The attribute syntaxes are specified in the following subsections,
        where the subsection title is the keyword name of the attribute
        syntax inside the single quotes. In operation requests and responses,
        each attribute value MUST be represented as one of the attribute
        syntaxes specified in the subsection title for the attribute. In
        addition, the value of an attribute in a response (but not in a
        request) MAY be one of the &quot;out-of-band&quot; values (<xref
        target="Sec.OutofBandValues" />) whose special encoding rules are
        defined in the Encoding and Transport document <xref
        target="RFC8010" />.</t>

        <t>All attributes in a request MUST have one or more values as defined
        in Sections&nbsp;<xref target="Sec.JobTemplateAttributes"
        format="counter" />, <xref
        target="Sec.JobDescriptionandStatusAttributes" format="counter" />,
        and <xref target="Sec.PrinterDescriptionandStatusAttributes"
        format="counter" />. All attributes in a response MUST have
        either (1)&nbsp;one or more values as defined in
        Sections&nbsp;<xref target="Sec.JobTemplateAttributes"
        format="counter"/>,
         <xref target="Sec.JobDescriptionandStatusAttributes"
        format="counter"/>, and
        <xref target="Sec.PrinterDescriptionandStatusAttributes"
        format="counter"/> or (2)&nbsp;a single
        &quot;out-of-band&quot; value.</t>

        <t>Most attributes are defined to have a single attribute
        syntax. However, a few attributes (e.g., &quot;job-sheet&quot;,
        &quot;media&quot;, &quot;job&nbhy;hold&nbhy;until&quot;) are
        defined to have several attribute syntaxes, depending on the value.
        These multiple attribute syntaxes are separated by the
        &quot;|&quot; character in the subsection title to indicate the
        choice. Since each value MUST be tagged as to its attribute syntax
        in the protocol, a single-valued attribute instance can have any
        one of its attribute syntaxes and a multi-valued attribute instance
        can have a mixture of its defined attribute syntaxes.</t>

        <section anchor="Sec.OutofBandValues" title="Out-of-Band Values - &#039;unknown&#039;, &#039;unsupported&#039;, and &#039;no-value&#039;">
          <t>This document defines three &quot;out-of-band&quot; values that
          are used in place of an attribute's defined syntax:
           <list style="symbols">

            <t>&#039;unknown&#039;: The attribute is supported by the IPP
            object, but the value is unknown to the IPP object for some
            reason. This out&nbhy;of&nbhy;band value is used for
            attributes that have an intrinsic, physical value that cannot
            be determined by the IPP object at a given time, e.g.,
            sheet count, geo&nbhy;location, etc.</t>

            <t>&#039;unsupported&#039;: The attribute is unsupported by the
            IPP object. This value MUST be returned only as the value of an
            attribute in the Unsupported Attributes group.</t>

            <t>&#039;no-value&#039;: The attribute is supported by the
            Printer, but the Administrator has not yet configured a value.</t>

          </list></t>
        </section>
        <section anchor="Sec.text" title="&#039;text&#039;">
          <t>A &apos;text&apos; attribute is an attribute whose value is a sequence of
          zero or more characters encoded in a maximum of 1023
          (&#039;MAX&#039;)&nbsp;octets. MAX is the maximum length for each
          value of any &apos;text&apos; attribute. However, if an attribute will always
          contain values whose maximum length is much less than MAX, the
          definition of that attribute will include a qualifier that
          defines the maximum length for values of that attribute. For
          example, the &quot;printer-location&quot; attribute is specified as
          &quot;printer-location (text(127))&quot;. In this case, text values
          for &quot;printer-location&quot; MUST NOT exceed 127 octets; if
          supplied with a longer text string via some external interface
          (other than the protocol), implementations are free to truncate to
          this shorter length limitation.</t>

          <t>In this document, all &apos;text&apos; attributes are defined using the
          &#039;text&#039; syntax. However, &#039;text&#039; is used only for
          brevity; the formal interpretation of &#039;text&#039; is
          &#039;textWithoutLanguage | textWithLanguage&#039;. That is, for
          any attribute defined in this document using the &#039;text&#039;
          attribute syntax, all IPP objects and Clients MUST support both the
          &#039;textWithoutLanguage&#039; and &#039;textWithLanguage&#039;
          attribute syntaxes. However, in actual usage and protocol execution,
          IPP objects and Clients accept and return only one of the
          two syntaxes per attribute. The syntax &#039;text&#039; never
          appears &quot;on-the-wire&quot;.</t>

          <t>Both &#039;textWithoutLanguage&#039; and
          &#039;textWithLanguage&#039; are needed to support the
          real&nbhy;world needs of interoperability between sites and
          systems that use different natural languages as the basis for human
          communication. Generally, one natural language applies to all
          &apos;text&apos; attributes in a given request or response. The
          language is indicated by the
          &quot;attributes-natural-language&quot; operation attribute
          defined in <xref
          target="Sec.CharacterSetandNaturalLanguageOperationAttributes" /> or
          the &quot;attributes-natural-language&quot; Job attribute defined in
          <xref target="Sec.attributesnaturallanguagenaturalLanguage"/>,
          and there is no need to identify the natural language for each
          text string on a value-by-value basis. In these cases, the
          attribute syntax &#039;textWithoutLanguage&#039; is used
          for &apos;text&apos; attributes. In other cases, the Client needs
          to supply or the Printer needs to return a text value in a
          natural language that is different from the rest of the text values
          in the request or response. In these cases, the Client or Printer
          uses the attribute syntax &#039;textWithLanguage&#039; for
          &apos;text&apos; attributes (this is the Natural Language Override
          mechanism described in <xref
          target="Sec.CharacterSetandNaturalLanguageOperationAttributes"/>).
          </t>

          <t>The &#039;textWithoutLanguage&#039; and
          &#039;textWithLanguage&#039; attribute syntaxes are described in
          more detail in the following sections.</t>

          <section anchor="Sec.textWithoutLanguage" title="&#039;textWithoutLanguage&#039;">
            <t>The &#039;textWithoutLanguage&#039; syntax indicates a value
            that is a sequence of zero or more characters encoded in a maximum
            of 1023 (MAX) octets.   Text strings are encoded using the rules
            of some charset. The Printer MUST support the UTF-8 charset <xref
            target="RFC3629" /> and MAY support additional charsets to
            represent &#039;text&#039; values, provided that the charsets are
            registered with IANA <xref target="IANA-CS" />. See <xref
            target="Sec.charset" /> for the definition of the
            &#039;charset&#039; attribute syntax, including restricted
            semantics and examples of charsets.</t>

          </section>
          <section anchor="Sec.textWithLanguage" title="&#039;textWithLanguage&#039;">
            <t>The &#039;textWithLanguage&#039; attribute syntax is a compound
            attribute syntax consisting of two parts: a
            &#039;textWithoutLanguage&#039; part encoded in a maximum of 1023
            (MAX) octets plus an additional &#039;naturalLanguage&#039; (see
            <xref target="Sec.naturalLanguage" />) part that overrides the
            natural language in force. The &#039;naturalLanguage&#039; part
            explicitly identifies the natural language that applies to the
            text part of that value and that value alone. For any given
            &apos;text&apos; attribute, the
            &#039;textWithoutLanguage&#039; part is limited to
            the maximum length defined for that &#039;text&#039; attribute,
            and the &#039;naturalLanguage&#039; part is always limited to 63
            (additional) octets. Using the &#039;textWithLanguage&#039;
            attribute syntax rather than the normal
            &#039;textWithoutLanguage&#039; syntax is the so-called
            &quot;Natural Language Override mechanism&quot; and MUST be
            supported by all IPP objects and Clients.</t>

            <t>If the attribute is multi-valued (1setOf text), then the
            &#039;textWithLanguage&#039; attribute syntax MUST be used to
            explicitly specify each attribute value whose natural language
            needs to be overridden. Other values in a multi-valued
            &#039;text&#039; attribute in a request or a response revert to
            the natural language of the operation attribute.</t>

            <t>In a Job Creation request, the Printer MUST accept and store
            with the Job any natural language in the
            &quot;attributes-natural-language&quot; operation attribute,
            whether the Printer supports that natural language or
            not. Furthermore, the Printer MUST accept and store any
            &#039;textWithLanguage&#039; attribute value, whether the Printer
            supports that natural language or not. These requirements are
            independent of the value of the &quot;ipp-attribute-fidelity&quot;
            operation attribute that the Client MAY supply.</t>

            <t>Example: If the Client supplies the
            &quot;attributes-natural-language&quot; operation attribute with
            the value &#039;en&#039; indicating English but the value of
            the &quot;job-name&quot; attribute is in French, the Client MUST
            use the &#039;textWithLanguage&#039; attribute syntax with the
            following two values:<list style="empty">

              <t>&#039;fr&#039;: Natural Language Override indicating
              French</t>

              <t>&#039;Rapport Mensuel&#039;: the Job name in French</t>
            </list></t>
            <t>See the Encoding and Transport document <xref
            target="RFC8010" /> for the encoding of the two parts and a
            detailed example of the &#039;textWithLanguage&#039; attribute
            syntax.</t>
          </section>
        </section>

        <section anchor="Sec.name" title="&#039;name&#039;">
          <t>This syntax type is used for user-friendly strings, such as a
          Printer name, that, for humans, are more meaningful than
          identifiers. Names are never translated from one natural language to
          another. The &#039;name&#039; attribute syntax is essentially the
          same as &#039;text&#039;, including the REQUIRED support of UTF-8,
          except that the sequence of characters is limited so that its
          encoded form MUST NOT exceed 255 (MAX) octets.</t>

          <t>Also, like &#039;text&#039;, &#039;name&#039; is really an
          abbreviated notation for either &#039;nameWithoutLanguage&#039; or
          &#039;nameWithLanguage&#039;. That is, all IPP objects and Clients
          MUST support both the &#039;nameWithoutLanguage&#039; and
          &#039;nameWithLanguage&#039; attribute syntaxes. However, in actual
          usage and protocol execution, IPP objects and Clients accept and
          return only one of the two syntaxes per attribute. The syntax
          &#039;name&#039; never appears &quot;on-the-wire&quot;.</t>

          <t>Only the &#039;text&#039; and &#039;name&#039; attribute
          syntaxes permit the Natural Language Override mechanism.</t>

          <t>Some attributes are defined as &#039;type2 keyword |
          name&#039;. These attributes support values that are either type2
          keywords or names. This dual-syntax mechanism enables a site
          Administrator to extend these attributes to legally include values
          that are locally defined by the site Administrator. Such names are
          not registered with IANA.</t>

          <section anchor="Sec.nameWithoutLanguage" title="&#039;nameWithoutLanguage&#039;">
            <t>The &#039;nameWithoutLanguage&#039; syntax indicates a value
            that is a sequence of zero or more characters encoded in a
            maximum of 255 (MAX) octets.</t>
          </section>

          <section anchor="Sec.nameWithLanguage" title="&#039;nameWithLanguage&#039;">
            <t>The &#039;nameWithLanguage&#039; attribute syntax is a compound
            attribute syntax consisting of two parts: a
            &#039;nameWithoutLanguage&#039; (see <xref
            target="Sec.nameWithoutLanguage" />) part plus an additional
            &#039;naturalLanguage&#039; (see <xref
            target="Sec.naturalLanguage" />) part that overrides the natural
            language in force. The &#039;naturalLanguage&#039; part
            explicitly identifies the natural language that applies to that
            name value and that name value alone. For any given
            &apos;name&apos; attribute, the
            &#039;nameWithoutLanguage&#039; part is limited to the maximum
            length defined for that &#039;name&#039; attribute, and the
            &#039;naturalLanguage&#039; part is always limited to 63
            (additional) octets. Using the &#039;nameWithLanguage&#039;
            attribute syntax rather than the normal
            &#039;nameWithoutLanguage&#039; syntax is the
            Natural Language Override mechanism and MUST be
            supported by all IPP objects and Clients.</t>

            <t>The &#039;nameWithLanguage&#039; attribute syntax behaves the
            same as the &#039;textWithLanguage&#039; syntax. If a name is in
            a language that is different than the rest of the object or
            operation, then this &#039;nameWithLanguage&#039; syntax is used
            rather than the generic &#039;nameWithoutLanguage&#039;
            syntax.</t>

            <t>If the attribute is multi-valued (1setOf name), then the
            &#039;nameWithLanguage&#039; attribute syntax MUST be used to
            explicitly specify each attribute value whose natural language
            needs to be overridden. Other values in a multi-valued
            &#039;name&#039; attribute in a request or a response revert to
            the natural language of the operation attribute.</t>

            <t>In a Job Creation request, the Printer MUST accept and store
            with the Job any natural language in the
            &quot;attributes-natural-language&quot; operation attribute,
            whether the Printer supports that natural language or
            not. Furthermore, the Printer MUST accept and store any
            &#039;nameWithLanguage&#039; attribute value, whether the Printer
            supports that natural language or not. These requirements are
            independent of the value of the &quot;ipp-attribute-fidelity&quot;
            operation attribute that the Client MAY supply.</t>

            <t>Example: If the Client supplies the
            &quot;attributes-natural-language&quot; operation attribute with
            the value &#039;en&#039; indicating English but the
            &quot;printer-name&quot; attribute is in German, the Client MUST
            use the &#039;nameWithLanguage&#039; attribute syntax as
            follows:<list style="empty">

              <t>&#039;de&#039;:  Natural Language Override indicating
              German</t>
              <t>&#039;Farbdrucker&#039;:  the Printer name in German</t>
            </list></t>
            <t>See the Encoding and Transport document <xref
            target="RFC8010" /> for the encoding of the two parts and a
            detailed example of the &#039;nameWithLanguage&#039; attribute
            syntax.</t>

          </section>
          <section anchor="Sec.Matchingnameattributevalues" title="Matching &#039;name&#039; Attribute Values">
            <t>For purposes of matching two &#039;name&#039; attribute values
            for equality, such as in Job validation (where a Client-supplied
            value for attribute &quot;xxx&quot; is checked to see if the value
            is among the values of the Printer&#039;s corresponding
            &quot;xxx-supported&quot; attribute), the following match rules
            apply:</t>

            <t><list style="numbers">
              <t>&#039;keyword&#039; values never match &#039;name&#039;
              values.</t>

              <t>&#039;name&#039; (&apos;nameWithoutLanguage&apos; and
              &apos;nameWithLanguage&apos;)
              values match if (1) the name parts match and (2) the Associated
              Natural&nbsp;Language parts (see <xref
              target="Sec.RequestOperationAttributes" />) match. The matching
              rules are as follows:
              <list style="format 2%c.">
                <t>The name parts match if the two names are identical
                character by character, except that it is RECOMMENDED that
                case be ignored as defined in "i;unicode-casemap - Simple
                Unicode Collation Algorithm" <xref target="RFC5051" />.
                For example,
                &#039;Ajax&nbhy;letter-head-white&#039; MUST match
                &#039;Ajax-letter-head-white&#039; and SHOULD match
                &#039;ajax-letter-head-white&#039; and
                &#039;AJAX&nbhy;LETTER&nbhy;HEAD-WHITE&#039;.</t>

                <t>The Associated Natural&nbsp;Language parts match if the
                shorter of the two meets the syntactic requirements defined in
                Section&nbsp;2.1 of RFC 5646 <xref target="RFC5646" /> and
                matches (byte for byte, since IPP language tags are
                lowercase) with the longer. For example, &#039;en&#039;
                matches &#039;en&#039;, &#039;en-us&#039;, and
                &#039;en&nbhy;gb&#039; but matches neither
                &#039;fr&#039; nor &#039;e&#039;.</t>
              </list></t>
            </list></t>
          </section>
        </section>

        <section anchor="Sec.keyword" title="&#039;keyword&#039;">
          <t>The &#039;keyword&#039; attribute syntax is a sequence of
          characters, of length 1 to 255, containing only the US-ASCII <xref
          target="RFC20" /> encoded values for lowercase letters
          (&quot;a&quot;-&quot;z&quot;), digits (&quot;0&quot;-&quot;9&quot;),
          hyphen (&quot;-&quot;), dot (&quot;.&quot;), and
          underscore (&quot;_&quot;). The first character MUST be a lowercase
          letter. Furthermore, keywords MUST be in US&nbsp;English.</t>

          <t>This syntax type is used for enumerating semantic identifiers of
          entities in the abstract protocol, i.e., entities identified in this
          document. Keywords are used as attribute names or values of
          attributes. Unlike &#039;text&#039; and &#039;name&#039;
          attribute values, &#039;keyword&#039; values MUST NOT use the
          Natural Language Override mechanism, since they MUST always be
          US-ASCII and US&nbsp;English.</t>

          <t>Keywords are for use in the protocol. A user interface will
          likely provide a mapping between protocol keywords and displayable
          user&nbhy;friendly words and phrases that are localized to the
          natural language of the user. While the keywords specified in this
          document MAY be displayed to users whose natural language is
          US&nbsp;English, they MAY be mapped to other US&nbsp;English
          words for US&nbsp;English users, since the user interface is
          outside the scope of this document.</t>

          <t>In the definition for each attribute of this syntax type, the
          full set of  &apos;keyword&apos; values being defined for that attribute is
          listed. The IANA IPP registry will always contain the complete and
          current list of &apos;keyword&apos; values for the attribute.</t>

          <t>When a keyword is used to represent an attribute (its name), it
          MUST be unique within the full scope of all IPP objects and
          attributes. When a keyword is used to represent a value of an
          attribute, it MUST be unique just within the scope of that
          attribute. That is, the same keyword MUST NOT be used for two
          different values within the same attribute to mean two different
          semantic ideas. However, the same keyword MAY be used across two or
          more attributes, representing different semantic ideas for each
          attribute.  <xref target="Sec.KeywordExtensibility" /> describes how
          the protocol can be extended with new &apos;keyword&apos; values. Examples of
          attribute name keywords are:<list style="empty">

            <t>&quot;job-name&quot;</t>
            <t>&quot;attributes-charset&quot;</t>
          </list></t>
          <t>Note: This document uses &quot;type1&quot; and &quot;type2&quot;
          prefixes to the &quot;keyword&quot; basic syntax to indicate
          different levels of review for extensions (see <xref
          target="Sec.KeywordExtensibility" />).</t>
        </section>

        <section anchor="Sec.enum" title="&#039;enum&#039;">
          <t>The &#039;enum&#039; attribute syntax is an enumerated integer
          value that is in the range from 1 to 2**31 - 1 (MAX). Each value has
          an associated &#039;keyword&#039; name. In the definition for each
          attribute of this syntax type, the full set of possible values for
          that attribute is listed. This syntax type is used for attributes
          for which there are enum values assigned by other standards, such as
          SNMP MIBs. A number of attribute enum values in this document are
          also used for corresponding attributes in other standards <xref
          target="RFC3805" />. This syntax type is not used for attributes to
          which the Administrator can assign values. <xref
          target="Sec.EnumExtensibility" /> describes how the protocol can be
          extended with new enum values.</t>

          <t>Enum values are for use in the protocol. A user interface will
          provide a mapping between protocol enum values and displayable
          user&nbhy;friendly words and phrases that are localized to the
          natural language of the user. While the enum symbols specified in
          this document MAY be displayed to users whose natural language is
          US&nbsp;English, they MAY be mapped to other US&nbsp;English
          words for US&nbsp;English users, since the user interface is
          outside the scope of this document.</t>

          <t>Note: Some SNMP MIBs use &#039;2&#039; for
          &#039;unknown&#039;, which corresponds to the
          IPP &quot;out&nbhy;of-band&quot; value
          &#039;unknown&#039;. See the description of the
          &quot;out&nbhy;of-band&quot; values at the beginning of <xref
          target="Sec.AttributeSyntaxes" />. Therefore, attributes of type
          &#039;enum&#039; typically start at &#039;3&#039;.</t>

          <t>Note: This document uses &quot;type1&quot; and &quot;type2&quot;
          prefixes to the &quot;enum&quot; basic syntax to indicate different
          levels of review for extensions (see <xref
          target="Sec.EnumExtensibility" />).</t>
        </section>

        <section anchor="Sec.uri" title="&#039;uri&#039;">
          <t>The &#039;uri&#039; attribute syntax is any valid Uniform
          Resource Identifier (URI) <xref target="RFC3986" />. Most often,
          URIs are simply Uniform Resource Locators (URLs). The maximum
          length of URIs used as values of IPP attributes is 1023
          octets. Although most other IPP attribute syntax types allow for
          only lowercase values, this attribute syntax type conforms to the
          case-sensitive and case-insensitive rules specified in <xref
          target="RFC3986" />. See also <xref target="RFC3196" /> for a
          discussion of case in URIs.</t>
        </section>

        <section anchor="Sec.uriScheme" title="&#039;uriScheme&#039;">
          <t>The &#039;uriScheme&#039; attribute syntax is a sequence of
          characters representing a URI scheme according to RFC 3986 <xref
          target="RFC3986" />. Though RFC 3986 requires that the values be
          case&nbsp;insensitive, IPP requires all lowercase values in IPP
          attributes, to simplify comparing by IPP Clients and Printers.</t>

          <t>Standard values for this syntax type include the following keywords:<list style="symbols">
            <t>&#039;ipp&#039;: for IPP schemed URIs, e.g.,
            &quot;ipp://example.com/ipp/...&quot; <xref target="RFC3510"
            /></t>

            <t>&#039;ipps&#039;: for IPPS schemed URIs, e.g.,
            &quot;ipps://example.com/ipp/...&quot; <xref target="RFC7472"
            /></t>

            <t>&#039;http&#039;: for HTTP schemed URIs, e.g.,
            &quot;http://example.com/path/to/filename&quot; <xref
            target="RFC7230" /></t>

            <t>&#039;https&#039;: for HTTPS schemed URIs, e.g.,
            &quot;https://example.com/path/to/filename&quot; <xref
            target="RFC7230" /></t>

            <t>&#039;ftp&#039;: for FTP schemed URIs, e.g.,
            &quot;ftp://example.com/path/to/filename&quot; <xref
            target="RFC1738" /></t>

            <t>&#039;mailto&#039;: for SMTP schemed URIs, e.g.,
            &quot;mailto:user@example.com&quot; <xref target="RFC6068" /></t>

            <t>&#039;file&#039;: for file schemed URIs, e.g.,
            &quot;file:///path/to/filename&quot; <xref target="RFC1738" /></t>

            <t>'urn': for Uniform Resource Name schemed URIs, e.g.,
            "urn:uuid:01234567-89ab-cdef-fedc-ba9876543210" <xref
            target="RFC4122" /></t>

          </list></t>
          <t>A Printer MAY support any URI &#039;scheme&#039; that has been
          registered with IANA <xref target="IANA-MT" />. The maximum length
          of URI &#039;scheme&#039; values used to represent IPP attribute
          values is 63 octets.</t>

        </section>
        <section anchor="Sec.charset" title="&#039;charset&#039;">

          <t>The &#039;charset&#039; attribute syntax is a standard
          identifier for a charset. A charset is a coded character set
          and encoding scheme. Charsets are used for labeling certain
          Document contents, &#039;text&#039; attribute values, and
          &#039;name&#039; attribute values. The syntax and semantics
          of this attribute syntax are specified in RFC&nbsp;2046
          <xref target="RFC2046" /> and contained in the IANA
          &quot;Character Sets&quot; registry <xref target="IANA-CS" />
          according to the IANA procedures <xref target="RFC2978" />.
          Though RFC&nbsp;2046 requires that the values be
          case&nbhy;insensitive US&nbhy;ASCII <xref target="RFC20" />,
          IPP requires all lowercase values in IPP attributes, to simplify
          comparing by IPP Clients and Printers. When a character&nbsp;set
          in the IANA registry has more than one name (alias), the name
          labeled as &quot;(preferred MIME name)&quot;, if present, MUST
          be used.</t>

          <t>The maximum length of &#039;charset&#039; values used to
          represent IPP attribute values is 63 octets.</t>

          <t>Some examples are:
           <list style="symbols">
            <t>&#039;utf-8&#039;:  ISO 10646 Universal Multiple-Octet Coded
            Character Set (UCS) <xref target="ISO10646" /> represented as
            the UTF-8 <xref target="RFC3629" /> transfer encoding scheme in
            which US-ASCII <xref target="RFC20" /> is a subset charset.</t>

            <t>&#039;us-ascii&#039;:  7-bit American Standard Code for
            Information Interchange (ASCII) <xref target="RFC20" />.</t>

            <t>&#039;iso-8859-1&#039;:  8-bit One-Byte Coded Character Set,
            Latin Alphabet No. 1 <xref target="ISO8859-1" />. That standard
            defines a coded character set that is used by Latin languages in
            the Western Hemisphere and Western Europe. US-ASCII is a subset
            charset.</t>

          </list></t>
          <t>Some attribute descriptions MAY place additional requirements on
          charset values that can be used, such as REQUIRED values that MUST
          be supported or additional restrictions, such as requiring that the
          charset have US-ASCII as a subset charset.</t>

        </section>
        <section anchor="Sec.naturalLanguage" title="&#039;naturalLanguage&#039;">
          <t>The &#039;naturalLanguage&#039; attribute syntax is a standard
          identifier for a natural language and, optionally, a country or
          region. The values for this syntax type are defined by RFC 5646
          <xref target="RFC5646" />. Though RFC&nbsp;5646 requires that the
          values be case-insensitive US-ASCII, IPP requires all lowercase
          values in IPP attributes, to simplify comparing by IPP Clients
          and Printers. Examples include:
           <list style="symbols">
            <t>&#039;en&#039;:  for English</t>
            <t>&#039;en-us&#039;: for US English</t>
            <t>&#039;fr&#039;: for French</t>
            <t>&#039;de&#039;:  for German</t>
          </list></t>
          <t>The maximum length of &#039;naturalLanguage&#039; values used to
          represent IPP attribute values is 63 octets.</t>

          <t>Note: While any standard natural language identifier defined in RFC 5646 can
          be used, Clients typically only support a subset of these
          identifiers. When comparing two identifiers or performing lookups,
          Printers SHOULD be prepared to match legacy identifiers with their
          corresponding modern equivalents and vice&nbsp;versa.</t>
        </section>

        <section anchor="Sec.mimeMediaType" title="&#039;mimeMediaType&#039;">
          <t>The &#039;mimeMediaType&#039; attribute syntax is the Internet
          media type (sometimes called &quot;MIME type&quot;) as defined by
          RFC&nbsp;2046 <xref target="RFC2046" /> and registered according to
          the procedures of RFC&nbsp;6838 <xref target="RFC6838" /> for
          identifying a Document format. The value MAY include a charset
          parameter, or some other parameter, depending on the specification
          of the media type in the IANA &quot;Media Types&quot; registry
          <xref target="IANA-MT" />. Although most other IPP syntax types
          allow for only lowercase values, this syntax type allows for
          mixed-case values that are case&nbsp;insensitive.</t>

          <t>Examples are:
           <list style="symbols">
            <t>&#039;text/html&#039;: An HTML Document</t>
            <t>&#039;text/plain&#039;: A plain text Document in US-ASCII
            (RFC 2046 indicates that in the absence of the charset
            parameter MUST mean US-ASCII rather than simply unspecified) <xref
            target="RFC2046" /></t>
            <t>&#039;text/plain; charset = US-ASCII&#039;: A plain text
            Document in US&nbhy;ASCII</t>
            <t>&#039;text/plain; charset = ISO-8859-1&#039;: A plain text
            Document in ISO&nbsp;8859-1 (Latin 1) <xref target="ISO8859-1"/>
            </t>
            <t>&#039;text/plain; charset = utf-8&#039;: A plain text
            Document in ISO 10646 represented as UTF-8
            <xref target="RFC3629" /></t>
            <t>&#039;application/postscript&#039;: A PostScript Document
            <xref target="RFC2046" /></t>
            <t>&#039;application/vnd.hp-PCL&#039;: A PCL Document <xref
            target="IANA-MT" /> (charset escape sequence embedded in the
            Document data)</t>
            <t>&#039;application/pdf&#039;: Portable Document Format <xref
            target="ISO32000" /></t>
            <t>&#039;application/octet-stream&#039;: Auto-sense - see <xref
            target="Sec.ApplicationoctetstreamAutoSensingthedocumentformat"
            /></t>
          </list></t>

          <t>The maximum length of a &#039;mimeMediaType&#039; value to
          represent IPP attribute values is 255 octets.</t>

          <section anchor="Sec.ApplicationoctetstreamAutoSensingthedocumentformat" title="'application/octet-stream' - Auto-Sensing the Document Format">
            <t>One special type is &#039;application/octet-stream&#039;. If
            the Printer supports this value, the Printer MUST be capable of
            auto&nbhy;sensing the format of the Document data using an
            implementation-dependent method that examines some number of
            octets of the Document data, either as part of the Job Creation
            request and/or at Document processing time. During
            auto&nbhy;sensing, a Printer can determine that the
            Document data has a format that the Printer doesn&#039;t
            recognize. If the Printer determines this problem before
            returning an operation response, it rejects the request and
            returns the
            &#039;client&nbhy;error&nbhy;document&nbhy;format&nbhy;not&nbhy;supported&#039;
            status-code. If the Printer determines this problem after
            accepting the request and returning an operation response with
            one of the successful status&nbhy;code values, the Printer adds
            the &#039;unsupported&nbhy;document&nbhy;format&#039; value
            to the Job&#039;s &quot;job-state-reasons&quot; attribute.</t>

            <t>If the Printer&#039;s default value attribute
            &quot;document-format-default&quot; is set to
            &#039;application/octet-stream&#039;, the Printer not only
            supports auto&nbhy;sensing of the Document format but will depend
            on the result of applying its auto&nbhy;sensing when the Client
            does not supply the &quot;document-format&quot; attribute. If the
            Client supplies a Document format value, the Printer MUST rely on
            the supplied attribute, rather than trust its auto&nbhy;sensing
            algorithm. To summarize:<list style="numbers">

              <t>If the Client does not supply a Document format value, the
              Printer MUST rely on its default value setting (which can be
              &#039;application/octet-stream&#039; indicating an
              auto&nbhy;sensing mechanism).</t>

              <t>If the Client supplies a value other than
              &#039;application&wj;/octet&nbhy;stream&#039;, the Client
              is supplying valid information about the format of the
              Document data and the Printer MUST trust the
              Client&nbhy;supplied value more than the outcome of
              applying an automatic format detection mechanism. For
              example, the Client can request the printing of a PostScript
              file as a &#039;text/plain&#039; Document. The Printer MUST
              print a text representation of the PostScript commands rather
              than interpret the stream of PostScript commands and print the
              result.</t>

              <t>If the Client supplies a value of
              &#039;application/octet-stream&#039;, the Client is indicating
              that the Printer MUST use its auto&nbhy;sensing mechanism on the
              Client&nbhy;supplied Document data whether auto&nbhy;sensing is
              the Printer&#039;s default or not.</t>

            </list></t>
            <t>Note: Since the auto-sensing algorithm is probabilistic, if the
            Client requests both auto&nbhy;sensing
            (&quot;document-format&quot; set to
            &#039;application/octet-stream&#039;) and true fidelity
            (&quot;ipp&nbhy;attribute&nbhy;fidelity&quot; set to
            &#039;true&#039;), the Printer might not be able to
            guarantee exactly what the End User intended (the
            auto&nbhy;sensing algorithm might mistake one Document
            format for another), but it is able to guarantee that its
            auto&nbhy;sensing mechanism will be used.</t>
          </section>
        </section>

        <section anchor="Sec.octetString" title="&#039;octetString&#039;">
          <t>The &#039;octetString&#039; attribute syntax is a sequence of
          octets encoded in a maximum of 1023 octets that is indicated in
          syntax definitions using the notation
          &apos;octetString(MAX)&apos;. This syntax type is used for
          opaque data.</t>

        </section>

        <section anchor="Sec.boolean" title="&#039;boolean&#039;">
          <t>The &#039;boolean&#039; attribute syntax has only two values:
          &#039;true&#039; and &#039;false&#039;.</t>
        </section>

        <section anchor="Sec.integer" title="&#039;integer&#039;">
          <t>The &#039;integer&#039; attribute syntax is an integer value
          that is in the range from -2**31 (MIN) to 2**31 - 1 (MAX). Each
          individual attribute can specify the range constraint explicitly
          if the range is different from the full range of possible
          integer values -- for example, job&nbhy;priority (integer(1:100))
          for the &quot;job&nbhy;priority&quot; attribute, as shown in the
          title of <xref target="Sec.jobpriorityinteger1100"/>. However, the
          enforcement of that additional constraint is up to the
          IPP objects, not the protocol.</t>

        </section>
        <section anchor="Sec.rangeOfInteger" title="&#039;rangeOfInteger&#039;">
          <t>The &#039;rangeOfInteger&#039; attribute syntax is an ordered
          pair of integers that defines an inclusive range of integer
          values. The first integer specifies the lower bound, and the second
          specifies the upper bound. If a range constraint is specified in the
          attribute definition, i.e., &#039;rangeOfInteger(X:Y)&#039;
          indicating X as a minimum value and Y as a maximum value, then the
          constraint applies to both integers.</t>
        </section>

        <section anchor="Sec.dateTime" title="&#039;dateTime&#039;">
          <t>The &#039;dateTime&#039; attribute syntax is a standard,
          fixed&nbhy;length, 11&nbhy;octet representation of the
          &quot;DateAndTime&quot; syntax as defined in RFC&nbsp;2579
          <xref target="RFC2579" />. RFC 2579 also identifies an
          8&nbhy;octet representation of a &quot;DateAndTime&quot; value,
          but IPP objects MUST use the 11&nbhy;octet representation. A user
          interface will provide a mapping between protocol dateTime values
          and displayable user-friendly words or
          presentation values and phrases that are localized to the natural
          language and date format of the user, including time zone.</t>
        </section>

        <section anchor="Sec.resolution" title="&#039;resolution&#039;">
          <t>The &#039;resolution&#039; attribute syntax specifies a
          two-dimensional resolution in the indicated units. It consists of
          three values: a cross&nbhy;feed direction resolution (positive
          integer value), a feed direction resolution (positive integer
          value), and a units value. The semantics of these three
          components are taken from the suggested values in the Printer MIB
          <xref target="RFC3805"/>. That is, the cross&nbhy;feed direction
          resolution component is the same as the
          prtMarkerAddressabilityXFeedDir object in the Printer MIB, the
          feed direction resolution component is the same as the
          prtMarkerAddressabilityFeedDir in the Printer MIB, and the
          units component is the same as the prtMarkerAddressabilityUnit
          object in the Printer MIB (namely, &#039;3&#039; indicates
          dots per inch and &#039;4&#039; indicates dots per centimeter).
          All three values MUST be present even if the first two values are
          the same. For example, &#039;300&#039;, &#039;600&#039;,
          &#039;3&#039; indicates a 300&nbhy;dpi cross&nbhy;feed
          direction resolution and a 600&nbhy;dpi feed direction resolution,
          since a &#039;3&#039; indicates dots per inch (dpi).</t>
        </section>

        <section anchor="Sec.collection" title="&#039;collection&#039;">
          <t>The &#039;collection&#039; attribute syntax is a container
          holding one or more named values (i.e., attributes), which are
          called &quot;member attributes&quot;. Each &apos;collection&apos;
          attribute definition Document lists the mandatory and optional member
          attributes of each collection value. A collection value is
          similar to an IPP attribute group in a request or a response,
          such as the Operation Attributes group -- they both consist of a
          set of attributes. Collections can also be nested, i.e., a
          collection in a collection.</t>

          <t>A collection value consists of three separate components:<list
          style="symbols">

            <t>A 'begCollection' value with an optional octet string value
            starting the collection,</t>

            <t>Zero or more member attributes defined using a series of
            unnamed values starting with a 'memberAttrName' value that
            specifies the member attribute name, and</t>

            <t>An 'endCollection' value with an optional name plus
            octet string value finishing the collection.</t>

          </list></t>
        </section>
        <section anchor="Sec.1setOfX" title="&#039;1setOf X&#039;">
          <t>The &#039;1setOf X&#039; attribute syntax is one or more values
          of attribute syntax type X. This syntax type is used for multi-valued
          attributes.   The syntax type is called &#039;1setOf&#039; rather
          than just &#039;setOf&#039; as a reminder that the set of values
          MUST NOT be empty (i.e., a set of size 0). Sets are normally
          unordered; however, each attribute description of this type can
          specify that the values MUST be in a certain order for that
          attribute.</t>
        </section>
      </section>

      <section anchor="Sec.JobTemplateAttributes" title="Job Template Attributes">
        <t>Job Template attributes describe Job processing intent. Clients MAY
        supply (in Job Creation requests) and Printers SHOULD support Job
        Template attributes. See <xref target="Sec.Support" /> for a
        description of support for OPTIONAL attributes.</t>

        <t>Job Template attributes conform to the following rules. For each
        Job Template attribute called &quot;xxx&quot;:</t>

        <t><list style="numbers">
          <t>If the Printer supports &quot;xxx&quot;, then it MUST support both
          an &quot;xxx&nbhy;default&quot; attribute (unless there is a
          &quot;No&quot; in <xref target="Table.JobTemplateAttributes"/> below)
          and an &quot;xxx-supported&quot; attribute. If the Printer
          doesn&#039;t support &quot;xxx&quot;, then it MUST support
          neither an &quot;xxx-default&quot; attribute nor an
          &quot;xxx-supported&quot; attribute, and it MUST treat an attribute
          &quot;xxx&quot; supplied by a Client as unsupported. An attribute
          &quot;xxx&quot; can be supported for some Document formats and not
          supported for other Document formats. For example, it is expected
          that a Printer would only support
          &quot;orientation&nbhy;requested&quot; for some Document formats
          (such as &#039;text&wj;/plain&#039; or &#039;text/html&#039;)
          but not others (such as &#039;application/postscript&#039;).</t>

          <t>Clients MAY supply &quot;xxx&quot; in a Job Creation request. If
          &quot;xxx&quot; is supplied, the Client is indicating a desired Job
          processing behavior for this Job. &nbsp;When &quot;xxx&quot; is not
          supplied, the Client is indicating that the Printer apply its
          default Job processing behavior at Job processing time if the
          Document content does not contain an embedded instruction indicating
          an xxx-related behavior.<vspace blankLines="1"/>

          Since an Administrator MAY change the default value attribute after a
          Job has been submitted but before it has been processed, the default
          value used by the Printer at Job processing time can be different
          than the default value in effect at Job submission time.</t>

          <t>The &quot;xxx-supported&quot; attribute is a Printer attribute
          that describes which Job processing behaviors are supported by that
          Printer. A Client can query the Printer to find out what
          xxx&nbhy;related behaviors are supported by inspecting the
          returned values of the &quot;xxx-supported&quot;
          attribute.<vspace blankLines="1"/>

          Note: The &quot;xxx&quot; in each &quot;xxx-supported&quot;
          attribute name is singular, even though an &quot;xxx-supported&quot;
          attribute usually has more than one value, such as
          &quot;print-quality-supported&quot;, unless the &quot;xxx&quot; Job
          Template attribute is plural, such as &quot;finishings&quot; or
          &quot;sides&quot;. In such cases, the &quot;xxx-supported&quot;
          attribute names are &quot;finishings-supported&quot; and
          &quot;sides-supported&quot;.</t>

          <t>The &quot;xxx-default&quot; default value attribute describes
          what will be done at Job processing time when no other Job
          processing information is supplied by the Client (either explicitly
          as an IPP attribute in the Job Creation request or implicitly as an
          embedded instruction within the Document data).</t>

        </list></t>
        <t>If an application wishes to present an End User with a list of
        supported values from which to choose, the application SHOULD query
        the Printer for its supported value attributes. The application SHOULD
        also query the default value attributes. If the application then
        limits selectable values to only those values that are supported, the
        application can guarantee that the values supplied by the Client in
        the Job Creation request all fall within the set of supported values
        at the Printer. When querying the Printer, the Client MAY enumerate
        each attribute by name in the Get&nbhy;Printer&nbhy;Attributes
        request, or the Client MAY just name the &quot;job&nbhy;template&quot;
        group in order to get the complete set of supported attributes
        (both supported and default attributes).</t>

        <t>The &quot;finishings&quot; attribute is an example of a Job
        Template attribute. It can take on a set of values such as '4'
        (&#039;staple&#039;), '5' (&#039;punch&#039;), and/or '6'
        (&#039;cover&#039;); see <xref target="Table.FinishingsValues"/> in
        <xref target="Sec.finishings1setOftype2enum"/>. A Client can query
        the Printer for the &quot;finishings-supported&quot; attribute and the
        &quot;finishings-default&quot; attribute. The supported attribute
        contains a set of supported values. The default value attribute
        contains the finishing value(s) that will be used for a new Job if the
        Client does not supply a &quot;finishings&quot; attribute in the Job
        Creation request and the Document data does not contain any
        corresponding finishing instructions. If the Client does supply the
        &quot;finishings&quot; attribute in the Job Creation request, the
        Printer validates the value or values to make sure that they are a
        subset of the supported values identified in the Printer&#039;s
        &quot;finishings-supported&quot; attribute. See <xref
        target="Sec.UnsupportedAttributes" />.</t>

        <t><xref target="Table.JobTemplateAttributes"/> below summarizes the
        names and relationships for all Job Template attributes. The first
        column of the table (labeled &quot;Job Attribute&quot;) shows the
        name and syntax for each Job Template attribute in the
        Job. &nbsp;These are the attributes that can optionally be
        supplied by the Client in a Job Creation request.   The last two
        columns (labeled &quot;Printer: Default Value Attribute&quot; and
        &quot;Printer: &quot;Supported Values&quot; Attribute&quot;) show the
        name and syntax for each Job Template attribute in the Printer
        (the default value attributes and the
        &quot;supported values&quot; attributes). A &quot;No&quot; in the
        table means the Printer MUST NOT support the attribute
        (that is, the attribute is simply not applicable). For
        brevity in the table, the &#039;text&#039; and &#039;name&#039;
        entries do not show the maximum length for each attribute.</t>

        <texttable style="all" anchor="Table.JobTemplateAttributes" title="Job Template Attributes">
          <ttcol>Job Attribute</ttcol><ttcol>Printer: Default Value Attribute</ttcol><ttcol>Printer: &quot;Supported Values&quot; Attribute</ttcol>
          <c>job-priority (integer 1:100)</c><c>job-priority-default (integer 1:100)</c><c>job-priority-supported (integer 1:100)</c>
          <c>job-hold-until (type2 keyword | name)</c><c>job-hold-until-default (type2 keyword | name)</c><c>job-hold-until-supported (1setOf (type2 keyword | name))</c>
          <c>job-sheets (type2 keyword | name)</c><c>job-sheets-default (type2 keyword | name)</c><c>job-sheets-supported (1setOf (type2 keyword | name))</c>
          <c>multiple-document-handling (type2 keyword)</c><c>multiple-document-handling-default (type2 keyword)</c><c>multiple-document-handling-supported (1setOf type2 keyword)</c>
          <c>copies (integer(1:MAX))</c><c>copies-default (integer(1:MAX))</c><c>copies-supported (rangeOfInteger(1:MAX))</c>
          <c>finishings (1setOf type2 enum)</c><c>finishings-default (1setOf type2 enum)</c><c>finishings-supported (1setOf type2 enum)</c>
          <c>page-ranges (1setOf rangeOfInteger(1:MAX))</c><c>No</c><c>page-ranges-supported (boolean)</c>
          <c>sides (type2 keyword)</c><c>sides-default (type2 keyword)</c><c>sides-supported (1setOf type2 keyword)</c>
          <c>number-up (integer(1:MAX))</c><c>number-up-default (integer(1:MAX))</c><c>number-up-supported (1setOf (integer(1:MAX) | rangeOfInteger(1:MAX)))</c>
          <c>orientation-requested (type2 enum)</c><c>orientation-requested-default (type2 enum)</c><c>orientation-requested-supported (1setOf type2 enum)</c>
          <c>media (type2 keyword | name)</c><c>media-default (type2 keyword | name)</c><c>media-supported (1setOf (type2 keyword | name)) media-ready (1setOf (type2 keyword | name))</c>
          <c>printer-resolution (resolution)</c><c>printer-resolution-default (resolution)</c><c>printer-resolution-supported (1setOf resolution)</c>
          <c>print-quality (type2 enum)</c><c>print-quality-default (type2 enum)</c><c>print-quality-supported (1setOf type2 enum)</c>
        </texttable>

        <section anchor="Sec.jobpriorityinteger1100" title="job-priority (integer(1:100))">
          <t>This attribute specifies a priority for scheduling the
          Job. &nbsp;A higher value specifies a higher priority. The
          value 1 indicates the lowest possible priority. The value 100
          indicates the highest possible priority. Among those Jobs that
          are ready to print, a Printer MUST print all Jobs with a
          priority value of n before printing those with a priority value
          of n&nbsp;-&nbsp;1 for all n.</t>

          <t>If the Printer supports this attribute, it MUST always support
          the full range from 1 to 100. No administrative restrictions are
          permitted. This way, an End User can always make full use of the
          entire range with any Printer. If privileged Jobs are implemented
          outside IPP, they MUST have priorities higher than 100, rather than
          restricting the range available to End Users.</t>

          <t>If the Client does not supply this attribute and this attribute
          is supported by the Printer, the Printer MUST use the value of the
          Printer&#039;s &quot;job-priority-default&quot; attribute at
          Job submission time (unlike most Job Template attributes that are
          used if necessary at Job processing time).</t>

          <t>The syntax for the &quot;job-priority-supported&quot; attribute
          is also integer(1:100). This single integer value indicates the
          number of priority levels supported. The Printer MUST take the
          value supplied by the Client and map it to the closest integer in a
          sequence of n&nbsp;integer values that are evenly distributed over
          the range from 1&nbsp;to&nbsp;100 using the formula:
           <list style="empty">
            <t>roundToNearestInt((100x + 50) / n)</t>
          </list></t>

          <t>where n is the value of &quot;job-priority-supported&quot; and x
          ranges from 0&nbsp;through (n&nbsp;-&nbsp;1).</t>

          <t>For example, if n = 1, the sequence of values is 50;
          if n = 2, the sequence of values is 25 and 75;
          if n = 3, the sequence of values is 17, 50, and 83;
          if n = 10, the sequence of values is 5, 15, 25, 35, 45, 55, 65, 75,
          85, and 95;  if n = 100, the sequence of values is
          1,&nbsp;2, 3, ... 100.</t>

          <t><xref target="Tab.job-priorityValues" /> shows how a Printer maps
          Client-supplied "job-priority" values for example values of n.</t>

          <texttable style="all" anchor="Tab.job-priorityValues" title="&quot;job-priority&quot; Values">
            <ttcol>job-priority</ttcol><ttcol>n = 1</ttcol>
            <ttcol>n = 2</ttcol><ttcol>n = 10</ttcol>
            <c>1</c><c>50</c><c>17</c><c>5</c>
            <c>10</c><c>50</c><c>17</c><c>5</c>
            <c>20</c><c>50</c><c>17</c><c>15</c>
            <c>30</c><c>50</c><c>17</c><c>25</c>
            <c>40</c><c>50</c><c>50</c><c>35</c>
            <c>50</c><c>50</c><c>50</c><c>45</c>
            <c>60</c><c>50</c><c>50</c><c>55</c>
            <c>70</c><c>50</c><c>50</c><c>65</c>
            <c>80</c><c>50</c><c>83</c><c>75</c>
            <c>90</c><c>50</c><c>83</c><c>85</c>
            <c>100</c><c>50</c><c>83</c><c>95</c>
          </texttable>
        </section>

        <section anchor="Sec.jobholduntiltype2keywordnameMAX" title="job-hold-until (type2 keyword | name(MAX))">
          <t>This attribute specifies the named time period during which the
          Job MUST become a candidate for printing.</t>

          <t>Standard &apos;keyword&apos; values for named time periods are:
           <list style="symbols">
            <t>&#039;no-hold&#039;: immediately, if there are no other
            reasons to hold the&nbsp;job</t>
            <t>&#039;indefinite&#039;: the Job is held indefinitely, until
            a Client performs a Release-Job (<xref
            target="Sec.ReleaseJobOperation" />)</t>
            <t>&#039;day-time&#039;: during the day</t>
            <t>&#039;evening&#039;: evening</t>
            <t>&#039;night&#039;: night</t>
            <t>&#039;weekend&#039;: weekend</t>
            <t>&#039;second-shift&#039;: second shift (after close of
            business)</t>
            <t>&#039;third-shift&#039;: third shift (after midnight)</t>
          </list></t>

          <t>An Administrator MUST associate allowable print times with a named
          time period (by means outside the scope of this IPP/1.1
          document). An Administrator is encouraged to pick names that suggest
          the type of time period. An Administrator MAY define additional
          values using the &#039;name&#039; or &#039;keyword&#039;
          attribute syntax, depending on implementation.</t>

          <t>If the value of this attribute specifies a time period that is in
          the future, the Printer SHOULD add the
          &quot;job-hold-until-specified&quot; value to the Job&#039;s
          &quot;job-state-reasons&quot; attribute, MUST move the Job to the
          &#039;pending-held&#039; state, and MUST NOT schedule the Job for
          printing until the specified time period arrives.</t>

          <t>When the specified time period arrives, the Printer MUST remove
          the &quot;job-hold-until-specified&quot; value from the Job&#039;s
          &quot;job-state-reasons&quot; attribute, if present. If there are no
          other Job state reasons that keep the Job in the
          &#039;pending-held&#039; state, the Printer MUST consider the
          Job as a candidate for processing by moving the Job to the
          &#039;pending&#039; state.</t>

          <t>If this Job attribute value is the named value
          &#039;no-hold&#039; or the specified time period has already
          started, the Job MUST be a candidate for processing immediately.</t>

          <t>If the Client does not supply this attribute and this attribute
          is supported by the Printer, the Printer MUST use the value of the
          Printer&#039;s &quot;job-hold-until-default&quot; at Job submission
          time (unlike most Job Template attributes that are used if necessary
          at Job processing time).</t>

        </section>
        <section anchor="Sec.jobsheetstype2keywordnameMAX" title="job-sheets (type2 keyword | name(MAX))">
          <t>This attribute determines which Job start/end sheet(s), if any,
          MUST be printed with a Job.</t>

          <t>Standard &apos;keyword&apos; values are:
            <list style="symbols">
            <t>&#039;none&#039;: no Job sheet is printed</t>
            <t>&#039;standard&#039;: one or more site-specific standard Job
            sheets are printed, e.g., a single start sheet or both start and
            end sheets</t>

          </list></t>
          <t>An Administrator MAY define additional values using the
          &#039;name&#039; or &#039;keyword&#039; attribute syntax, depending
          on implementation.</t>

          <t>The effect of this attribute on Jobs with multiple Documents MAY
          be affected by the &quot;multiple-document-handling&quot; Job
          attribute (<xref target="Sec.multipledocumenthandlingtype2keyword"
          />), depending on the Job sheet semantics.</t>

        </section>
        <section anchor="Sec.multipledocumenthandlingtype2keyword" title="multiple-document-handling (type2 keyword)">
          <t>This RECOMMENDED attribute controls which Impressions and Media
          Sheets constitute a Set for copy generation and finishing
          processes. When the value of the &quot;copies&quot; attribute
          exceeds '1', it also controls the order in which the copies that
          result from processing the Documents are produced. For the purposes
          of this explanation, if &quot;a&quot; represents an instance of
          Document data, then the result of processing the data in Document
          &quot;a&quot; is a sequence of Media Sheets represented by
          &quot;a(*)&quot;. This attribute MUST be supported with at least one
          value if the Printer supports multiple Documents per Job (see
          Sections&nbsp;<xref target="Sec.CreateJobOperation" format="counter" />
          and <xref target="Sec.SendDocumentOperation" format="counter"/>).</t>

          <t>Standard &apos;keyword&apos; values are:
           <list style="symbols">
            <t>&#039;single-document&#039;: If a Job has multiple Documents,
            say, the Document data is called &quot;a&quot; and &quot;b&quot;,
            then the result of processing all the Document data (a and then b)
            MUST be treated as a single sequence of Media Sheets for
            finishing processes; that is, finishing is performed on the
            concatenation of the sequences a(*),b(*). The Printer
            MUST NOT force the data in each Document instance to be
            formatted onto a new Impression, nor to start a new
            Impression on a new Media Sheet. If more than one copy is made,
            the ordering of the sets of Media Sheets resulting from processing
            the Document data MUST be a(*), b(*), a(*), b(*), ..., and the
            Printer MUST force each copy (a(*),b(*)) to start on a new Media
            Sheet.</t>

            <t>&#039;separate-documents-uncollated-copies&#039;: If a
            Job has multiple Documents, say, the Document data is called
            &quot;a&quot; and &quot;b&quot;, then the result of
            processing the data in each Document instance MUST be
            treated as a single sequence of Media Sheets for finishing
            processes; that is, the sets a(*) and b(*) would each be finished
            separately. The Printer MUST force each copy of the result of
            processing the data in a single Document to start on a new Media
            Sheet. If more than one copy is made, the ordering of the sets of
            Media Sheets resulting from processing the Document data MUST be
            a(*), a(*), ..., b(*), b(*), ... .</t>

            <t>&#039;separate-documents-collated-copies&#039;: If a Job has
            multiple Documents, say, the Document data is called
            &quot;a&quot; and &quot;b&quot;, then the result of
            processing the data in each Document instance MUST be
            treated as a single sequence of Media Sheets for finishing
            processes; that is, the sets a(*) and b(*) would each be finished
            separately. The Printer MUST force each copy of the result of
            processing the data in a single Document to start on a new Media
            Sheet. If more than one copy is made, the ordering of the sets of
            Media Sheets resulting from processing the Document data MUST be
            a(*), b(*), a(*), b(*), ... .</t>

            <t>&#039;single-document-new-sheet&#039;: Same as
            &#039;single-document&#039;, except that the Printer MUST ensure
            that the first Impression of each Document instance in the Job is
            placed on a new Media Sheet. This value allows multiple Documents
            to be stapled together with a single staple where each Document
            starts on a new Media Sheet.</t>

          </list></t>
          <t>The &#039;single-document&#039; value is the same as
          &#039;separate&nbhy;documents&nbhy;collated-copies&#039;
          with respect to the ordering of Input Pages, but not Media Sheet
          generation, since &#039;single-document&#039; will put the
          first page of the next Document on the back side of a Media Sheet
          if an odd number of pages have been produced so far for the Job,
          while &#039;separate-documents-collated-copies&#039; always
          forces the next Document or Document copy on to a new Media Sheet.
          In addition, if the &quot;finishings&quot; attribute specifies
          &#039;staple&#039;, then with &#039;single&nbhy;document&#039;,
          Documents a and b are stapled together as a single Set with no
          regard to a new Media Sheet, while with
          &#039;single&nbhy;document&nbhy;new&nbhy;sheet&#039;,
          Documents a and b are stapled together as a single Set but Document
          b starts on a new Media Sheet. With
          &#039;separate-documents-uncollated-copies&#039; and
          &#039;separate&nbhy;documents&nbhy;collated-copies&#039;,
          Documents a and b are stapled separately.</t>

          <t>Note: The value 'separate-documents-uncollated-copies' produces
          uncollated Media Sheets within a Set, e.g., when "copies" is '2' a
          two&nbhy;Document Job will be printed as Media Sheets
          a(1), a(1), a(2), a(2), ... a(n), a(n), b(1), b(1), ..., b(n),
          b(n). All other values produce collated Media Sheets within a
          Set.</t>

          <t>The relationship of this attribute and the other attributes that
          control Document processing is described in <xref
          target="Sec.UsingJobTemplateAttributesDuringDocumentProcessing"/>.
          </t>

        </section>
        <section anchor="Sec.copiesinteger1MAX" title="copies (integer(1:MAX))">
          <t>This RECOMMENDED attribute specifies the number of copies to be
          printed.</t>

          <t>On many devices, the supported number of collated copies will be
          limited by the number of physical output bins on the device and can
          be different from the number of uncollated copies that can be
          supported.</t>

          <t>Note: The effect of this attribute on Jobs with multiple
          Documents is controlled by the
          &quot;multiple-document-handling&quot; Job attribute (<xref
          target="Sec.multipledocumenthandlingtype2keyword"/>). The
          relationship of this attribute and the other attributes that
          control Document processing is described in <xref
          target="Sec.UsingJobTemplateAttributesDuringDocumentProcessing"/>.
          </t>
        </section>

        <section anchor="Sec.finishings1setOftype2enum" title="finishings (1setOf type2 enum)">
          <t>This RECOMMENDED attribute identifies the finishing processes
          that the Printer uses for each copy of each printed Document in the
          Job. For Jobs with multiple Documents, the
          &quot;multiple-document-handling&quot; attribute determines what
          constitutes a &quot;copy&quot; for purposes of finishing.</t>

          <t>Standard enum values defined in this document are listed in <xref
          target="Table.FinishingsValues" />. The &#039;staple-xxx&#039;
          values are specified with respect to the Document as if the Document
          were in portrait orientation with the origin of each Media Sheet at
          the top left corner. If the Document is actually in landscape or
          reverse-landscape orientation, the Client supplies the appropriate
          transformed value. For example, to position a staple in the upper
          left-hand corner of a landscape Document when held for reading, the
          Client supplies the &#039;staple-bottom-left&#039; value, since
          landscape is defined as a +90 degree rotation of the image with
          respect to the media from portrait, i.e., counterclockwise. On the
          other hand, to position a staple in the upper left-hand corner of a
          reverse-landscape Document when held for reading, the Client
          supplies the &#039;staple-top-right&#039; value, since
          reverse-landscape is defined as a -90 degree rotation of the image
          with respect to the media from portrait, i.e., clockwise.</t>

          <t>The angle (vertical, horizontal, angled) of each staple with
          respect to the Document depends on the implementation, which can in
          turn depend on the value of the attribute.</t>

          <t>Note: The effect of this attribute on Jobs with multiple
          Documents is controlled by the
          &quot;multiple-document-handling&quot; Job attribute (<xref
          target="Sec.multipledocumenthandlingtype2keyword"/>). The
          relationship of this attribute and the other attributes that
          control Document processing is described in <xref
          target="Sec.UsingJobTemplateAttributesDuringDocumentProcessing"/>.
          </t>

          <t>Note: The value of '3' (&#039;none&#039;) has no effect when
          combined with any other values.</t>

          <t>Note: The "finishings-col" attribute <xref target="PWG5100.1" />
          is an alternative to the "finishings" attribute that allows the
          Client to specify finishing intent in greater detail.</t>

          <texttable style="all" anchor="Table.FinishingsValues" title="&quot;finishings&quot; Enum Values">
            <ttcol>Value</ttcol><ttcol>Symbolic Name and Description</ttcol>
            <c>&#039;3&#039;</c><c>&#039;none&#039;: Perform no finishing.</c>
            <c>&#039;4&#039;</c><c>&#039;staple&#039;: Bind the Document(s)
            with one or more staples.  The exact number and placement of the
            staples are site defined.</c>
            <c>&#039;5&#039;</c><c>&#039;punch&#039;: This value indicates
that holes are required in the finished Document.  The exact
number and placement of the holes are site defined.  The punch
specification MAY be satisfied (in a site-specific and
implementation-specific manner) either by drilling/punching or by substituting pre-drilled media.</c>
            <c>&#039;6&#039;</c><c>&#039;cover&#039;: This value is specified
            when it is desired to select a non-printed (or pre-printed) cover
            for the Document.  This does not supplant the specification of a printed cover (on cover stock medium) by the Document itself.</c>
            <c>&#039;7&#039;</c><c>&#039;bind&#039;: This value indicates that
            a binding is to be applied to the Document; the type and placement
            of the binding are site defined.</c>
            <c>&#039;8&#039;</c><c>&#039;saddle-stitch&#039;: Bind the
Document(s) with one or more staples (wire stitches) along the
middle fold. The exact number and placement of the staples and the
middle fold are implementation defined and/or site defined.</c>
            <c>&#039;9&#039;</c><c>&#039;edge-stitch&#039;: Bind the
Document(s) with one or more staples (wire stitches) along one
edge.  The exact number and placement of the staples are implementation
defined and/or site defined.</c>
            <c>&#039;10&#039;-&#039;19&#039;</c><c>reserved for future generic finishing enum values.</c>
            <c>&#039;20&#039;</c><c>&#039;staple-top-left&#039;: Bind the Document(s) with one or more staples in the top left corner.</c>
            <c>&#039;21&#039;</c><c>&#039;staple-bottom-left&#039;: Bind the Document(s) with one or more staples in the bottom left corner.</c>
            <c>&#039;22&#039;</c><c>&#039;staple-top-right&#039;: Bind the Document(s) with one or more staples in the top right corner.</c>
            <c>&#039;23&#039;</c><c>&#039;staple-bottom-right&#039;: Bind the Document(s) with one or more staples in the bottom right corner.</c>
            <c>&#039;24&#039;</c><c>&#039;edge-stitch-left&#039;: Bind the
            Document(s) with one or more staples (wire stitches) along the
            left edge.  The exact number and placement of the staples are
            implementation defined and/or site defined.</c>
            <c>&#039;25&#039;</c><c>&#039;edge-stitch-top&#039;: Bind the
            Document(s) with one or more staples (wire stitches) along the top
            edge.  The exact number and placement of the staples are
            implementation defined and/or site defined.</c>
            <c>&#039;26&#039;</c><c>&#039;edge-stitch-right&#039;: Bind the
            Document(s) with one or more staples (wire stitches) along the
            right edge.  The exact number and placement of the staples are
            implementation defined and/or site defined.</c>
            <c>&#039;27&#039;</c><c>&#039;edge-stitch-bottom&#039;: Bind the
            Document(s) with one or more staples (wire stitches) along the
            bottom edge.  The exact number and placement of the staples are
            implementation defined and/or site defined.</c>
            <c>&#039;28&#039;</c><c>&#039;staple-dual-left&#039;: Bind the Document(s) with two staples (wire stitches) along the left edge, assuming a portrait Document (see above).</c>
            <c>&#039;29&#039;</c><c>&#039;staple-dual-top&#039;: Bind the Document(s) with two staples (wire stitches) along the top edge, assuming a portrait Document (see above).</c>
            <c>&#039;30&#039;</c><c>&#039;staple-dual-right&#039;: Bind the Document(s) with two staples (wire stitches) along the right edge, assuming a portrait Document (see above).</c>
            <c>&#039;31&#039;</c><c>&#039;staple-dual-bottom&#039;: Bind the Document(s) with two staples (wire stitches) along the bottom edge, assuming a portrait Document (see above).</c>
          </texttable>
        </section>

        <section anchor="Sec.pageranges1setOfrangeOfInteger1MAX" title="page-ranges (1setOf rangeOfInteger(1:MAX))">
          <t>This RECOMMENDED attribute identifies the range(s) of Input Pages
          that the Printer uses for each Set to be printed prior to imposition
          of those pages onto Impressions. Nothing is printed for any pages
          identified that do not exist in the Set/Document(s). Ranges MUST be
          in ascending order (1-3, 5-7, 15-19, etc.) and MUST NOT overlap so
          that a non-spooling Printer can process the Job in a single pass. If
          the ranges are not ascending or are overlapping, the Printer MUST
          reject the request and return the
          &#039;client-error-bad-request&#039; status&nbhy;code. The
          attribute is associated with Input Pages and not
          application&nbhy;numbered pages such as the page numbers found in
          the headers and/or footers for certain word processing
          applications.</t>

          <t>For Jobs with multiple Documents, the
          &quot;multiple-document-handling&quot; attribute determines what
          constitutes a Set for purposes of the specified page range(s). When
          &quot;multiple-document-handling&quot; is
          &#039;single-document&#039;, the Printer MUST apply each supplied
          page range once to the concatenation of the Input Pages. For
          example, if there are 8 Documents of 10 pages each, the page range
          &#039;41-60&#039; prints the pages in the 5th and 6th Documents as
          a single Document, and none of the pages of the other Documents are
          printed. When &quot;multiple&nbhy;document-handling&quot; is
          &#039;separate&nbhy;documents&nbhy;uncollated&nbhy;copies&#039; or
          &#039;separate&nbhy;documents&nbhy;collated&nbhy;copies&#039;,
          the Printer MUST apply each supplied page range repeatedly to each
          Document copy. For the same Job, the page range &#039;1-3,
          10-10&#039; would print the first 3 pages and the 10th page of
          each of the 8 Documents in the Job, as 8 separate Sets.</t>

          <t>&quot;page-ranges-supported&quot; is a boolean value indicating
          whether the Printer is capable of supporting the printing of page
          ranges. This capability can differ from one PDL to another. There is
          no &quot;page&nbhy;ranges-default&quot; attribute. If the
          &quot;page-ranges&quot; attribute is not supplied by the Client, all
          pages of the Document are printed.</t>

          <t>Note: In many cases, the Client supplies only those Input Pages
          that need to be printed in the Document data, and the "page-ranges"
          Job Template attribute is not used. However, Clients that submit
          already-generated Document data (either static content from some web
          site or previously submitted content the End User wishes to reprint)
          can use this attribute to print just a subset of the pages contained
          in the Document. In this case, if a "page-ranges" value of 'n-m' is
          specified, the first page to be printed will be page n. All
          subsequent pages of the Document will be printed through and
          including page m.</t>

          <t>Note: The effect of this attribute on Jobs with multiple
          Documents is controlled by the
          &quot;multiple-document-handling&quot; Job attribute (<xref
          target="Sec.multipledocumenthandlingtype2keyword"/>). The
          relationship of this attribute and the other attributes that control
          Document processing is described in <xref
          target="Sec.UsingJobTemplateAttributesDuringDocumentProcessing"/>.</t>
        </section>

        <section anchor="Sec.sidestype2keyword" title="sides (type2 keyword)">
          <t>This RECOMMENDED attribute specifies how Impressions are placed
          upon the sides of a Media Sheet.</t>

          <t>The standard &apos;keyword&apos; values are:
<list style="symbols">
            <t>&#039;one-sided&#039;: imposes each consecutive Impression upon
            the same side of consecutive Media Sheets.</t>

            <t>&#039;two-sided-long-edge&#039;: imposes each consecutive pair
            of Impressions upon front and back sides of consecutive Media
            Sheets, such that the orientation of each pair of Impressions on
            the medium would be correct for the reader as if for binding on
            the long edge. This imposition is sometimes called
            &#039;duplex&#039; or &#039;head&nbhy;to-head&#039;.</t>

            <t>&#039;two-sided-short-edge&#039;: imposes each consecutive
            pair of Impressions upon front and back sides of consecutive Media
            Sheets, such that the orientation of each pair of Impressions on
            the medium would be correct for the reader as if for binding on
            the short edge. This imposition is sometimes called
            &#039;tumble&#039; or &#039;head-to-toe&#039;.</t>
          </list></t>

          <t>Note: The effect of this attribute on Jobs with multiple
          Documents is controlled by the
          &quot;multiple-document-handling&quot; Job attribute (<xref
          target="Sec.multipledocumenthandlingtype2keyword"/>). The
          relationship of this attribute and the other attributes that control
          Document processing is described in <xref
          target="Sec.UsingJobTemplateAttributesDuringDocumentProcessing"/>.
          </t>
        </section>

        <section anchor="Sec.numberupinteger1MAX" title="number-up (integer(1:MAX))">
          <t>This attribute specifies the number of Input Pages to impose upon
          a single Impression. For example, if the value is:
           <list style="symbols">
            <t>&#039;1&#039;: the Printer MUST place one Input Page on a
            single Impression.</t>

            <t>&#039;2&#039;: the Printer MUST place two Input Pages on a
            single Impression.</t>

            <t>&#039;4&#039;: the Printer MUST place four Input Pages on a
            single Impression.</t>

          </list></t>
          <t>In all cases, the Printer MAY add some sort of translation,
          scaling, or rotation of Input Pages when imposing them.</t>

          <t>Note: The effect of this attribute on Jobs with multiple
          Documents is controlled by the
          &quot;multiple-document-handling&quot; Job attribute (<xref
          target="Sec.multipledocumenthandlingtype2keyword"/>). The
          relationship of this attribute and the other attributes that control
          Document processing is described in <xref
          target="Sec.UsingJobTemplateAttributesDuringDocumentProcessing"/>.
          </t>
        </section>

        <section anchor="Sec.orientationrequestedtype2enum" title="orientation-requested (type2 enum)">
          <t>This RECOMMENDED attribute indicates the desired orientation for
          printed Input Pages; it does not describe the orientation of the
          Client-supplied Input Pages.</t>

          <t>For some Document formats (such as
          &#039;application/postscript&#039;), the desired orientation of the
          Input Pages is sometimes specified within the Document data. This
          information is generated by a Printer driver prior to the submission
          of the Print Job. &nbsp;Other Document formats such as
          &#039;text/plain&#039; do not include the notion of desired
          orientation within the Document data. In the latter case, it is
          possible for the Printer to bind the desired orientation to the
          Document data after it has been submitted. Printers MAY only support
          &quot;orientation&nbhy;requested&quot; for some Document formats
          (e.g., &#039;text&wj;/plain&#039; or &#039;text&wj;/html&#039;)
          but not others (e.g., &#039;application&wj;/postscript&#039;). This
          is no different than any other Job Template attribute, since <xref
          target="Sec.JobTemplateAttributes" />, item 1, points out that a
          Printer can support or not support any Job Template attribute based
          on the Document format supplied by the Client. However, a special
          mention is made here, since it is very likely that a Printer will
          support &quot;orientation&nbhy;requested&quot; for only a
          subset of the supported Document formats.</t>

          <t>Standard enum values are listed in <xref
          target="Table.OrientationRequestedValues"/>.</t>

          <t>Note: The effect of this attribute on Jobs with multiple
          Documents is controlled by the
          &quot;multiple-document-handling&quot; Job attribute (<xref
          target="Sec.multipledocumenthandlingtype2keyword"/>). The
          relationship of this attribute and the other attributes that control
          Document processing is described in <xref
          target="Sec.UsingJobTemplateAttributesDuringDocumentProcessing"/>.
          </t>

          <texttable style="all" anchor="Table.OrientationRequestedValues" title="&quot;orientation-requested&quot; Enum Values">
            <ttcol>Value</ttcol><ttcol>Symbolic Name and Description</ttcol>
            <c>&#039;3&#039;</c><c>&#039;portrait&#039;: The content will be imaged across the short edge of the medium.</c>
            <c>&#039;4&#039;</c><c>&#039;landscape&#039;: The content will be
            imaged across the long edge of the medium.  Landscape is defined
            to be a rotation of the Input Page to be imaged by +90 degrees
            with respect to the medium (i.e., counterclockwise) from the
            portrait orientation.  Note: The +90 direction was chosen because simple finishing on the long edge is the same edge whether portrait or landscape.</c>
            <c>&#039;5&#039;</c><c>&#039;reverse-landscape&#039;: The content
            will be imaged across the long edge of the medium.
            Reverse-landscape is defined to be a rotation of the Input Page to
            be imaged by -90 degrees with respect to the medium (i.e.,
            clockwise) from the portrait orientation.  Note: The &#039;reverse-landscape&#039; value was added because some applications rotate landscape -90 degrees from portrait, rather than +90 degrees.</c>
            <c>&#039;6&#039;</c><c>&#039;reverse-portrait&#039;: The content
            will be imaged across the short edge of the
            medium.  Reverse-portrait is defined to be a rotation of the Input
            Page to be imaged by 180 degrees with respect to the medium from
            the portrait orientation.  Note: The &#039;reverse-portrait&#039;
            value was added for use with the &quot;finishings&quot; attribute
            in cases where the opposite edge is desired for finishing a
            portrait Document on simple finishing devices that have only one
            finishing position.  Thus, a &#039;text&#039;/plain&#039; portrait Document can be stapled &quot;on the right&quot; by a simple finishing device, as is common use with some Middle Eastern languages such as Hebrew.</c>
          </texttable>
        </section>

        <section anchor="Sec.mediatype2keywordnameMAX" title="media (type2 keyword | name(MAX))">
          <t>This RECOMMENDED attribute identifies the medium that the Printer
          uses for all Impressions of the Job.</t>

          <t>The values for &quot;media&quot; historically have included
          medium names, medium sizes, input trays, and electronic forms so
          that one attribute specifies the media. However, the Client SHOULD
          only use the media attribute to specify medium sizes using
          PWG Media Standardized Names <xref target="PWG5101.1" />.</t>

          <t>If a Printer supports a medium name as a value of this attribute,
          such a medium name implicitly selects an input tray that contains
          the specified medium. If a Printer supports a medium size as a value
          of this attribute, such a medium size implicitly selects a medium
          name that in turn implicitly selects an input tray that contains the
          medium with the specified size. If a Printer supports an input tray
          as the value of this attribute, such an input tray implicitly
          selects the medium that is in that input tray at the time the Job
          prints. This case includes manual-feed input trays. If a Printer
          supports an electronic form as the value of this attribute, such an
          electronic form implicitly selects a medium name that in turn
          implicitly selects an input tray that contains the medium specified
          by the electronic form. The electronic form also implicitly selects
          an image that the Printer MUST merge with the Document data as it
          prints each page.</t>

          <t>PWG Media Standardized Names <xref target="PWG5101.1" /> SHOULD
          be used. Legacy &apos;keyword&apos; values are taken from ISO DPA <xref
          target="ISO10175" />, the Printer MIB <xref target="RFC3805" />, and
          ASME-Y14.1M <xref target="ASME-Y14.1M" />. An Administrator MAY
          define additional values using the &#039;name&#039; or
          &#039;keyword&#039; attribute syntax, depending on
          implementation.</t>

          <t>There is also an additional Printer attribute named
          &quot;media-ready&quot;, which differs from
          &quot;media-supported&quot; in that legal values only include the
          subset of &quot;media-supported&quot; values that are physically
          loaded and ready for printing with no Operator intervention
          required.</t>

          <t>The relationship of this attribute and the other attributes that
          control Document processing is described in <xref
          target="Sec.UsingJobTemplateAttributesDuringDocumentProcessing"
          />.</t>

          <t>Note: If supported by the Printer, Clients MAY use the
          alternative "media-col" attribute <xref target="PWG5100.3" /> <xref
          target="PWG5100.13" /> to specify medium requirements in greater
          detail.</t>
        </section>

        <section anchor="Sec.printerresolutionresolution" title="printer-resolution (resolution)">
          <t>This RECOMMENDED attribute identifies the output resolution that
          the Printer uses for the Job.</t>

          <t>Note: This attribute and the "print-quality" attribute (<xref
          target="Sec.printqualitytype2enum" />) are both used to specify the
          overall output quality of the Job. &nbsp;If a Client specifies
          conflicting "printer-resolution" and "print-quality" values,
          Printers SHOULD use the "print-quality" value.</t>
        </section>

        <section anchor="Sec.printqualitytype2enum" title="print-quality (type2 enum)">
          <t>This RECOMMENDED attribute specifies the print quality that the
          Printer uses for the Job.</t>

          <t>The standard enum values are listed in <xref
          target="Table.PrintQualityValues" />.</t>

          <t>Note: This attribute and the "printer-resolution" attribute
          (<xref target="Sec.printerresolutionresolution" />) are both used to
          specify the overall output quality of the Job. &nbsp;If a Client
          specifies conflicting "printer-resolution" and "print-quality"
          values, Printers SHOULD use the "print-quality" value.</t>

          <texttable style="all" anchor="Table.PrintQualityValues" title="&quot;print-quality&quot; Enum Values">
            <ttcol>Value</ttcol><ttcol>Symbolic Name and Description</ttcol>
            <c>&#039;3&#039;</c><c>&#039;draft&#039;: lowest quality available on the Printer</c>
            <c>&#039;4&#039;</c><c>&#039;normal&#039;: normal or intermediate quality on the Printer</c>
            <c>&#039;5&#039;</c><c>&#039;high&#039;: highest quality available on the Printer</c>
          </texttable>
        </section>
      </section>
      <section anchor="Sec.JobDescriptionandStatusAttributes" title="Job Description and Status Attributes">
        <t>The attributes in this section form the attribute group called
        &quot;job&nbhy;description&quot;. Tables&nbsp;<xref
        target="Table.JobDescriptionandStatusAttributes" format="counter" />
        and <xref target="Table.JobStatusAttributes" format="counter" />
        summarize these attributes. The third column of each table indicates
        whether the attribute is a REQUIRED attribute that MUST be supported
        by Printers. If it is not indicated as REQUIRED, then it is
        OPTIONAL. The maximum size in octets for &#039;text&#039; and
        &#039;name&#039; attributes is indicated in parentheses.</t>

        <texttable style="all" anchor="Table.JobDescriptionandStatusAttributes" title="Job Description Attributes (READ-WRITE)">
          <ttcol>Attribute</ttcol><ttcol>Syntax</ttcol><ttcol>REQUIRED?</ttcol>
          <c>job-impressions</c><c>integer(0:MAX)</c><c></c>
          <c>job-k-octets</c><c>integer(0:MAX)</c><c></c>
          <c>job-media-sheets</c><c>integer(1:MAX)</c><c></c>
          <c>job-name</c><c>name(MAX)</c><c>REQUIRED</c>
        </texttable>

        <texttable style="all" anchor="Table.JobStatusAttributes" title="Job Status Attributes (READ-ONLY)">
          <ttcol>Attribute</ttcol><ttcol>Syntax</ttcol><ttcol>REQUIRED?</ttcol>
          <c>attributes-charset</c><c>charset</c><c>REQUIRED</c>
          <c>attributes-natural-language</c><c>naturalLanguage</c><c>REQUIRED</c>
          <c>date-time-at-completed</c><c>dateTime|unknown|no-value</c><c></c>
          <c>date-time-at-creation</c><c>dateTime|unknown</c><c></c>
          <c>date-time-at-processing</c><c>dateTime|unknown|no-value</c><c></c>
          <c>job-detailed-status-messages</c><c>1setOf text(MAX) </c><c> </c>
          <c>job-document-access-errors</c><c>1setOf text(MAX)</c><c></c>
          <c>job-id</c><c>integer(1:MAX)</c><c>REQUIRED</c>
          <c>job-impressions-completed</c><c>integer(0:MAX)</c><c></c>
          <c>job-k-octets-processed</c><c>integer(0:MAX)</c><c></c>
          <c>job-media-sheets-completed</c><c>integer(0:MAX)</c><c></c>
          <c>job-message-from-operator</c><c>text(127)</c><c></c>
          <c>job-more-info</c><c>uri</c><c></c>
          <c>job-originating-user-name</c><c>name(MAX)</c><c>REQUIRED</c>
          <c>job-printer-up-time</c><c>integer(1:MAX)</c><c>REQUIRED</c>
          <c>job-printer-uri</c><c>uri</c><c>REQUIRED</c>
          <c>job-state</c><c>type1 enum</c><c>REQUIRED</c>
          <c>job-state-message</c><c>text(MAX)</c><c></c>
          <c>job-state-reasons</c><c>1setOf type2 keyword</c><c>REQUIRED</c>
          <c>job-uri</c><c>uri</c><c>REQUIRED</c>
          <c>number-of-documents</c><c>integer(0:MAX)</c><c></c>
          <c>number-of-intervening-jobs</c><c>integer(0:MAX)</c><c></c>
          <c>output-device-assigned</c><c>name(127)</c><c></c>
          <c>time-at-completed</c><c>integer(MIN:MAX)</c><c>REQUIRED</c>
          <c>time-at-creation</c><c>integer(MIN:MAX)</c><c>REQUIRED</c>
          <c>time-at-processing</c><c>integer(MIN:MAX)</c><c>REQUIRED</c>
        </texttable>

        <section anchor="Sec.jobidinteger1MAX" title="job-id (integer(1:MAX))">
          <t>This REQUIRED attribute contains the ID of the Job. &nbsp;The
          Printer, on receipt of a new Job, generates an ID that identifies
          the new Job on that Printer. The Printer returns the value of the
          &quot;job-id&quot; attribute as part of the response to a Job
          Creation request.</t>

          <t>For a description of this attribute and its relationship to
          the &quot;job&nbhy;uri&quot; and &quot;job-printer-uri&quot;
          attributes, see the discussion in
          <xref target="Sec.ObjectIdentity" />
          (&quot;Object Identity&quot;).</t>

        </section>
        <section anchor="Sec.joburiuri" title="job-uri (uri)">
          <t>This REQUIRED attribute contains the URI for the Job. &nbsp;The
          Printer, on receipt of a new Job, generates a URI that identifies
          the new Job. &nbsp;The Printer returns the value of the
          &quot;job-uri&quot; attribute as part of the response to a Job
          Creation request. The precise format of a Job URI is implementation
          dependent <xref target="RFC3510" /> <xref target="RFC7472" />. If
          the Printer supports more than one URI and there is some
          relationship between the newly formed Job URI and the Printer&#039;s
          URI, the Printer uses the Printer URI supplied by the Client in the
          Job Creation request. For example, if the Job Creation request comes
          in over a secure channel, the new Job URI MUST use the same secure
          channel. This can be guaranteed because the Printer is responsible
          for generating the Job URI and the Printer is aware of its security
          configuration and policy as well as the Printer URI used in the Job
          Creation request.</t>

          <t>For a description of this attribute and its relationship to
          the &quot;job&nbhy;id&quot; and &quot;job-printer-uri&quot;
          attributes, see the discussion in
          <xref target="Sec.ObjectIdentity" />
          (&quot;Object Identity&quot;).</t>

        </section>
        <section anchor="Sec.jobprinteruriuri" title="job-printer-uri (uri)">
          <t>This REQUIRED attribute identifies the Printer that created this
          Job. &nbsp;When a Printer creates a Job, it populates this attribute
          with the Printer URI that was used in the Job Creation request. This
          attribute permits a Client to identify the Printer that created this
          Job when only the Job&#039;s URI is available to the Client. The
          Client queries the creating Printer to determine which languages,
          charsets, and operations are supported for this Job.</t>

          <t>For a description of this attribute and its relationship to
          the &quot;job&nbhy;uri&quot; and &quot;job-id&quot;
          attributes, see the discussion in
          <xref target="Sec.ObjectIdentity" />
          (&quot;Object Identity&quot;).</t>
        </section>

        <section anchor="Sec.jobmoreinfouri" title="job-more-info (uri)">
          <t>Similar to &quot;printer-more-info&quot;, this attribute contains
          the URI referencing some resource with more information about this
          Job, perhaps an HTML page containing status information about the
          Job.</t>
        </section>

        <section anchor="Sec.jobnamenameMAX" title="job-name (name(MAX))">
          <t>This REQUIRED attribute is the name of the Job. &nbsp;It is a
          name that is more user friendly than the &quot;job-uri&quot; or
          "job-id" attribute values. It does not need to be unique between
          Jobs. The Job&#039;s &quot;job-name&quot; attribute is set to the
          value supplied by the Client in the &quot;job&nbhy;name&quot;
          operation attribute in the Job Creation request (see <xref
          target="Sec.PrintJobRequest" />). If, however, the
          &quot;job-name&quot; operation attribute is not supplied by the
          Client in the Job Creation request, the Printer, on creation of the
          Job, MUST generate a name. The Printer SHOULD generate the value of
          the Job&#039;s &quot;job-name&quot; attribute from the first of the
          following sources that produces a value: (1)&nbsp;the
          &quot;document&nbhy;name&quot; operation attribute of the first
          (or only) Document, (2)&nbsp;the &quot;document-URI&quot; attribute
          of the first (or only) Document, or (3)&nbsp;any other piece of
          Job-specific and/or Document data.</t>
        </section>

        <section anchor="Sec.joboriginatingusernamenameMAX" title="job-originating-user-name (name(MAX))">
          <t>This REQUIRED attribute contains the name of the End User that
          submitted the Print Job. &nbsp;The Printer sets this attribute to
          the most authenticated printable name that it can obtain from the
          authentication service over which the IPP operation was
          received. Only if such a name is not available does the Printer use
          the value supplied by the Client in the
          &quot;requesting-user-name&quot; operation attribute of the
          Job Creation request (see Sections&nbsp;<xref
          target="Sec.uriauthenticationsupported1setOftype2keyword"
          format="counter"/>, <xref
          target="Sec.urisecuritysupported1setOftype2keyword" format="counter"
          />, and&nbsp;<xref target="Sec.SecurityConsiderations" format="counter"
          />).</t>

          <t>Note: The Printer needs to keep an internal originating user ID
          of some form, typically as a credential of a principal, with the
          Job. &nbsp;Since such an internal attribute is
          implementation dependent and not of interest to Clients, it is not
          specified as a Job attribute. This originating user ID is used for
          authorization checks (if any) on all subsequent operations.</t>

        </section>
        <section anchor="Sec.jobstatetype1enum" title="job-state (type1 enum)">
          <t>This REQUIRED attribute identifies the current state of the
          Job. Even though IPP defines seven values for Job states
          (plus the out-of-band &#039;unknown&#039; value -- see <xref
          target="Sec.AttributeSyntaxes" />), implementations only need to
          support those states that are appropriate for the particular
          implementation. In other words, a Printer supports only those Job
          states implemented by the Output Device and available to the Printer
          implementation.</t>

          <t>Standard enum values are listed in <xref target="Table.JobStateValues" />.</t>
          <t>The final value for this attribute MUST be one of the following --
          &#039;completed&#039;, &#039;canceled&#039;, or
          &#039;aborted&#039; -- before the Printer removes the
          Job altogether. The length of time that Jobs remain in the
          &#039;canceled&#039;, &#039;aborted&#039;,
          and &#039;completed&#039; states depends on implementation. See
          <xref target="Sec.PartitioningofJobStates" />.</t>

          <t><xref target="Figure.JobLifeCycle" /> shows the normal Job state
          transitions. Normally, a Job progresses from left to right. Other
          state transitions are unlikely but are not forbidden. Not shown are
          the transitions to the &#039;canceled&#039; state from the
          &#039;pending&#039;, &#039;pending-held&#039;, and
          &#039;processing&nbhy;stopped&#039; states.</t>

          <figure anchor="Figure.JobLifeCycle" title="IPP Job Life Cycle">
            <artwork>
                                                   +----&gt; canceled
                                                  /
    +----&gt; pending  -------&gt; processing ---------+------&gt; completed
    |         ^                   ^               \
---&gt;+         |                   |                +----&gt; aborted
    |         v                   v               /
    +----&gt; pending-held    processing-stopped ---+
            </artwork>
          </figure>
          <t>Jobs reach one of the three terminal states --
          &#039;completed&#039;, &#039;canceled&#039;, or
          &#039;aborted&#039; -- after the Jobs have completed all
          activity, including stacking output media, and all Job Status
          attributes have reached their final values for the&nbsp;Job.</t>

          <texttable style="all" anchor="Table.JobStateValues" title="&quot;job-state&quot; Enum Values">
            <ttcol>Values</ttcol><ttcol>Symbolic Name and Description</ttcol>
            <c>&#039;3&#039;</c><c>&#039;pending&#039;: The Job is a candidate
            to start processing but is not yet processing.</c>

            <c>&#039;4&#039;</c><c>&#039;pending-held&#039;: The Job is not a
            candidate for processing for any number of reasons but will return
            to the &#039;pending&#039; state as soon as the reasons are no
            longer present.  The Job&#039;s &quot;job-state-reasons&quot;
            attribute MUST indicate why the Job is no longer a candidate for
            processing.</c>

            <c>&#039;5&#039;</c><c>&#039;processing&#039;: One or more of the following:
            (1) the Job is using, or is attempting to use, one or more purely software processes that are analyzing, creating, or interpreting a PDL, etc.;
            (2) the Job is using, or is attempting to use, one or more hardware devices that are interpreting a PDL; making marks on a medium; and/or performing finishing, such as stapling, etc.;
            (3) the Printer has made the Job ready for printing, but the Output
            Device is not yet printing it, either because the Job hasn&#039;t
            reached the Output Device or because the Job is queued in the
            Output Device or some other spooler, waiting for the Output Device to
            print it.
            When the Job is in the &#039;processing&#039; state, the entire Job state includes the detailed status represented in the Printer&#039;s &quot;printer-state&quot;, &quot;printer-state-reasons&quot;, and &quot;printer-state-message&quot; attributes.
            Implementations MAY include additional values in the Job&#039;s &quot;job-state-reasons&quot; attribute to indicate the progress of the Job, such as adding the &#039;job-printing&#039; value to indicate when the Output Device is actually making marks on paper and/or the &#039;processing-to-stop-point&#039; value to indicate that the Printer is in the process of canceling or aborting the Job.</c>
            <c>&#039;6&#039;</c><c>&#039;processing-stopped&#039;: The Job has stopped while processing for any number of reasons and will return to the &#039;processing&#039; state as soon as the reasons are no longer present.
            The Job&#039;s &quot;job-state-reasons&quot; attribute MAY
            indicate why the Job has stopped processing.  For example, if the
            Output Device is stopped, the &#039;printer-stopped&#039; value
            MAY be included in the Job&#039;s &quot;job-state-reasons&quot;
            attribute.

            Note: When an Output Device is stopped, the device usually
            indicates its condition in human-readable form locally at the
            device.  A Client can obtain more complete device status remotely
            by querying the Printer&#039;s &quot;printer-state&quot;,
            &quot;printer-state-reasons&quot;, and
            &quot;printer-state-message&quot; attributes.</c>

            <c>&#039;7&#039;</c><c>&#039;canceled&#039;:  The Job has been
            canceled by a Cancel-Job operation, and the Printer has completed
            canceling the Job. &nbsp;All Job Status attributes have reached their
            final values for the Job. &nbsp;While the Printer is canceling the
            Job, the Job remains in its current state, but the Job&#039;s
            &quot;job-state-reasons&quot; attribute SHOULD contain the
            &#039;processing-to-stop-point&#039; value and one of the
            &#039;canceled-by-user&#039;, &#039;canceled-by-operator&#039;, or
            &#039;canceled-at-device&#039; values.  When the Job moves to the
            &#039;canceled&#039; state, the
&#039;processing-to-stop-point&#039; value, if present, MUST be
            removed, but &#039;canceled-by-xxx&#039;, if present, MUST
            remain.</c>

            <c>&#039;8&#039;</c><c>&#039;aborted&#039;: The Job has been
            aborted by the system, usually while the Job was in the
&#039;processing&#039; or &#039;processing-stopped&#039; state, and
the Printer has completed aborting the Job; all Job Status
attributes have reached their final values for the
            Job. &nbsp;While the Printer is aborting the Job, the Job remains
            in its current state, but the Job&#039;s
&quot;job-state-reasons&quot; attribute SHOULD contain the
&#039;processing-to-stop-point&#039; and
&#039;aborted-by-system&#039; values.  When the Job moves to the
&#039;aborted&#039; state, the
&#039;processing-to-stop-point&#039; value, if present, MUST be
            removed, but the &#039;aborted-by-system&#039; value, if present,
            MUST remain.</c>

            <c>&#039;9&#039;</c><c>&#039;completed&#039;: The Job has
            completed successfully or with warnings or errors after processing,
all of the Job Media Sheets have been successfully stacked in
the appropriate output bin(s), and all Job Status attributes have
reached their final values for the Job. &nbsp;The Job&#039;s
&quot;job-state-reasons&quot; attribute SHOULD contain one of the
&#039;completed-successfully&#039;,
&#039;completed-with-warnings&#039;, or
&#039;completed-with-errors&#039; values.</c>
          </texttable>

          <section anchor="Sec.ForwardingServers" title="Forwarding Servers">
            <t>As with all other IPP attributes, if the implementation cannot
            determine the correct value for this attribute, it SHOULD respond
            with the out-of-band &#039;unknown&#039; value (see <xref
            target="Sec.AttributeSyntaxes" />) rather than try to guess at
            some possibly incorrect value and confuse the End User about the
            state of the Job. &nbsp;For example, if the implementation is just
            a gateway into some printing system from which it can normally get
            status, but temporarily is unable, then the implementation should
            return the &#039;unknown&#039; value. However, if the
            implementation is a gateway to a printing system that never
            provides detailed status about the Print Job, the implementation
            MAY set the IPP Job&#039;s state  to &#039;completed&#039;,
            provided that it also sets the &#039;queued-in-device&#039; value
            in the Job&#039;s &quot;job-state-reasons&quot; attribute (see
            <xref target="Sec.jobstatereasons1setOftype2keyword" />).</t>

          </section>
          <section anchor="Sec.PartitioningofJobStates" title="Partitioning of Job States">
            <t>This section describes the partitioning of the seven Job states
            into phases: Job Not Completed, Job Retention, Job History, and
            Job Removal. This section also explains the
            &#039;job-restartable&#039; value of the
            &quot;job-state-reasons&quot; Job Status attribute for use with
            the Restart-Job and Resubmit-Job <xref target="PWG5100.11" />
            operations.</t>

            <t>Job Not Completed: When a Job is in the &#039;pending&#039;,
            &#039;pending-held&#039;, &#039;processing&#039;, or
            &#039;processing-stopped&#039; state, the Job is not
            completed.</t>

            <t>Job Retention: When a Job enters one of the three terminal Job
            states -- &#039;completed&#039;, &#039;canceled&#039;, or
            &#039;aborted&#039; -- the IPP Printer MAY &quot;retain&quot;
            the Job in a restartable condition for an implementation-defined
            time period. This time period MAY be zero seconds and MAY depend
            on the terminal Job state. This phase is called &quot;Job
            Retention&quot;. While in the Job Retention phase, the
            Job&#039;s Document data is retained and a Client can
            restart the Job using the Restart&nbhy;Job operation. If the
            Printer supports the Restart-Job or Resubmit-Job operation,
            then it SHOULD indicate that the Job is restartable by
            adding the &#039;job-restartable&#039; value to the Job&#039;s
            &quot;job&nbhy;state-reasons&quot; attribute (see <xref
            target="Sec.jobstatereasons1setOftype2keyword" />) during the Job
            Retention phase.</t>

            <t>Job History: After the Job Retention phase expires for a Job,
            the Printer deletes the Document data for the Job and the Job
            becomes part of the Job History. The Printer MAY also delete any
            number of the Job attributes. Since the Job is no longer
            restartable, the Printer MUST remove the
            &#039;job-restartable&#039; value from the Job&#039;s
            &quot;job&nbhy;state-reasons&quot; attribute, if present. Printers
            SHOULD keep the Job in the Job History phase for at least
            60&nbsp;seconds to allow Clients to discover the final
            disposition of the Job.</t>

            <t>Job Removal: After the Job has remained in the Job History for
            an implementation-defined time, such as when the number of Jobs
            exceeds a fixed number or after a fixed time period (which MAY be
            zero&nbsp;seconds), the IPP Printer removes the Job from the
            system.</t>

            <t>Using the Get-Jobs operation and supplying the
            &#039;not-completed&#039; value for the &quot;which-jobs&quot;
            operation attribute, a Client is requesting Jobs in the Job Not
            Completed phase. Using the Get-Jobs operation and supplying the
            &#039;completed&#039; value for the &quot;which-jobs&quot;
            operation attribute, a Client is requesting Jobs in the Job
            Retention and Job History phases. Using the Get-Job-Attributes
            operation, a Client is requesting a Job in any phase except Job
            Removal. After Job Removal, the Get-Job-Attributes and Get-Jobs
            operations no longer are capable of returning any information
            about a Job.</t>
          </section>
        </section>

        <section anchor="Sec.jobstatereasons1setOftype2keyword" title="job-state-reasons (1setOf type2 keyword)">
          <t>This REQUIRED attribute provides additional information about the
          Job&#039;s current state, i.e., information that augments the value
          of the Job&#039;s &quot;job-state&quot; attribute.</t>

          <t>These values MAY be used with any Job state or states for which
          the reason makes sense. Some of these value definitions indicate
          conformance requirements; the rest are OPTIONAL. Furthermore, when
          implemented, the Printer MUST return these values when the reason
          applies and MUST NOT return them when the reason no longer applies,
          whether the value of the Job&#039;s &quot;job-state&quot; attribute
          changed or not. When the Job does not have any reasons for being in
          its current state, the value of the Job&#039;s
          &quot;job-state-reasons&quot; attribute MUST be
          &#039;none&#039;.</t>

          <t>Note: While values cannot be added to the &quot;job-state&quot;
          attribute without impacting deployed Clients that take actions upon
          receiving &quot;job-state&quot; values, it is the intent that
          additional &quot;job&nbhy;state&nbhy;reasons&quot; values can be
          defined and registered without impacting such deployed
          Clients. In other words, the &quot;job&nbhy;state&nbhy;reasons&quot;
          attribute is intended to be extensible.</t>

          <t>The following standard &apos;keyword&apos; values are defined. For ease of
          understanding, the values are presented in the order in which the
          reasons are likely to occur (if implemented):

           <list style="symbols">
            <t>&#039;none&#039;: There are no reasons for the Job&#039;s
            current state. This state reason is semantically equivalent to
            &quot;job-state-reasons&quot; without any value and MUST be used
            when there is no other value, since the &apos;1setOf&apos;
            attribute syntax requires at least one value.</t>

            <t>&#039;job-incoming&#039;: Either (1) the Printer has accepted
            the Create-Job operation and is expecting additional Send-Document
            and/or Send&nbhy;URI operations or (2) the Printer is
            retrieving/accepting Document data as a result of a Print-Job,
            Print-URI, Send&nbhy;Document, or Send-URI operation.</t>

            <t>&#039;job-data-insufficient&#039;: The Create-Job operation
            has been accepted by the Printer, but the Printer is expecting
            additional Document data before it can move the Job into the
            &#039;processing&#039; state. If a Printer starts processing
            before it has received all data, the Printer removes the
            &#039;job&nbhy;data&nbhy;insufficient&#039; reason, but the
            &#039;job-incoming&#039; reason remains. If a Printer starts
            processing after it has received all data, the Printer removes
            the &#039;job&nbhy;data&nbhy;insufficient&#039; reason and the
            &#039;job-incoming&#039; reason at the same time.</t>

            <t>&#039;document-access-error&#039;: After accepting a Print-URI
            or Send-URI request, the Printer could not access one or more
            Documents passed by reference. This reason is intended to cover
            any file access problem, including &apos;file does not exist&apos;
            and &apos;access denied&apos; because of an access control
            problem. The Printer MAY also indicate the Document access error
            using the &quot;job&nbhy;document&nbhy;access&nbhy;errors&quot;
            Job Status attribute (see
            <xref target="Sec.jobdocumentaccesserrors1setOftextMAX"/>).
            The Printer can (1) abort the Job and move the Job to
            the &#039;aborted&#039; Job state or (2) print all Documents
            that are accessible and move the Job to the
            &#039;completed&#039; Job state with the
            &#039;completed-with-errors&#039; value in the
            Job&#039;s &quot;job-state-reasons&quot; attribute. This
            value SHOULD be supported if the Print-URI or Send-URI
            operations are supported.</t>

            <t>&#039;submission-interrupted&#039;: The Job was not completely
            submitted for some unforeseen reason, such as (1) the Printer has
            crashed before the Job was closed by the Client, (2) the Printer
            or the Document transfer method has crashed in some
            non-recoverable way before the Document data was entirely
            transferred to the Printer, or (3) the Client crashed or
            failed to close the Job before the time&nbhy;out period. See <xref
            target="Sec.multipleoperationtimeoutinteger1MAX" />.</t>

            <t>&#039;job-outgoing&#039;: The Printer is transmitting the Job
            to the Output Device.</t>

            <t>&#039;job-hold-until-specified&#039;: The value of the
            Job&#039;s &quot;job&nbhy;hold&nbhy;until&quot; attribute was
            specified with a time period that is still in the future. The
            Job MUST NOT be a candidate for processing until this reason is
            removed and there are no other reasons to hold the
            Job. &nbsp;This value SHOULD be supported if the
            &quot;job-hold-until&quot; Job Template attribute is supported.</t>

            <t>&#039;resources-are-not-ready&#039;: At least one of the
            resources needed by the Job, such as media, fonts, resource
            objects, etc., is not ready on any of the physical Output Devices
            for which the Job is a candidate. This condition MAY be detected
            when the Job is accepted, or subsequently while the Job is pending
            or processing, depending on implementation. The Job can remain in
            its current state or be moved to the &#039;pending-held&#039;
            state, depending on implementation and/or Job scheduling
            policy.</t>

            <t>&#039;printer-stopped-partly&#039;: The value of the
            Printer&#039;s &quot;printer&nbhy;state-reasons&quot; attribute
            contains the value &#039;stopped&nbhy;partly&#039;.</t>

            <t>&#039;printer-stopped&#039;: The value of the Printer&#039;s
            &quot;printer-state&quot; attribute is &#039;stopped&#039;.</t>

            <t>&#039;job-interpreting&#039;: The Job is in the
            &#039;processing&#039; state, but, more specifically,
            the Printer is interpreting the Document data.</t>

            <t>&#039;job-queued&#039;: The Job is in the
            &#039;processing&#039; state, but, more specifically,
            the Printer has queued the Document data.</t>

            <t>&#039;job-transforming&#039;: The Job is in the
            &#039;processing&#039; state, but, more specifically,
            the Printer is interpreting Document data and producing
            another electronic representation.</t>

            <t>&#039;job-queued-for-marker&#039;: The Job is in any of
            the &#039;pending-held&#039;, &#039;pending&#039;, or
            &#039;processing&#039; states, but, more specifically,
            the Printer has completed enough processing of the Document to be
            able to start marking, and the Job is waiting for the marker.
            Systems that require human intervention to release Jobs using
            the Release&nbhy;Job operation put the Job into the
            &#039;pending-held&#039; Job state. Systems that
            automatically select a Job to use the marker put the
            Job into the &#039;pending&#039; Job state or keep the Job
            in the &#039;processing&#039; Job state while waiting for the
            marker, depending on implementation. All implementations put the
            Job into the &#039;processing&#039; state when marking does
            begin.</t>

            <t>&#039;job-printing&#039;: The Output Device is marking
            media. This value is useful for Printers that spend a great deal
            of time processing (1)&nbsp;when no marking is happening and they
            want to show that marking is now happening or (2) when the Job is
            in the process of being canceled or aborted while the Job remains
            in the &#039;processing&#039; state, but the marking has not yet
            stopped so that Impression or sheet counts are still increasing
            for the Job.</t>

            <t>&#039;job-canceled-by-user&#039;: The Job was canceled by the
            owner of the Job using the Cancel-Job request, i.e., by a user
            whose authenticated identity is the same as the value of the
            originating user that created the Job, or by some other authorized
            End User, such as a member of the Job owner&#039;s security
            group. This value SHOULD be supported.</t>

            <t>&#039;job-canceled-by-operator&#039;: The Job was canceled by
            the Operator using the Cancel-Job request, i.e., by a user who has
            been authenticated as having Operator privileges (whether local or
            remote). If the security policy is to allow anyone to cancel
            anyone&#039;s Job, then this value can be used when the Job is
            canceled by other than the owner of the Job. &nbsp;For such a
            security policy, in effect, everyone is an Operator as far as
            canceling Jobs with IPP is concerned. This value SHOULD be
            supported if the implementation permits canceling by other than
            the owner of the&nbsp;Job.</t>

            <t>&#039;job-canceled-at-device&#039;: The Job was canceled by an
            unidentified local user, i.e., a user at a console at the
            device. This value SHOULD be supported if the implementation
            supports canceling Jobs at the console.</t>

            <t>&#039;aborted-by-system&#039;: The Job (1) is in the process
            of being aborted, (2) has been aborted by the system and placed in
            the &#039;aborted&#039; state, or (3) has been aborted by the
            system and placed in the &#039;pending-held&#039; state, so that
            a user or Operator can manually try the Job again. This value
            SHOULD be supported.</t>

            <t>&#039;unsupported-compression&#039;: The Job was aborted by
            the system because the Printer determined, while attempting to
            decompress the Document data, that the compression algorithm
            is actually not among those supported by the Printer. This
            value MUST be supported, since &quot;compression&quot; is a
            REQUIRED operation attribute.</t>

            <t>&#039;compression-error&#039;: The Job was aborted by the
            system because the Printer encountered an error in the Document
            data while decompressing it. If the Printer posts this reason, the
            Document data has already passed any tests that would have led to
            the &#039;unsupported-compression&#039;
            &quot;job-state-reasons&quot; value.</t>

            <t>&#039;unsupported-document-format&#039;: The Job was aborted
            by the system because the Document data&#039;s
            &quot;document&nbhy;format&quot; attribute is not among those
            supported by the Printer. If the Client specifies
            &quot;document&nbhy;format&quot; as
            &#039;application/octet-stream&#039;, the
            Printer MAY abort the Job and post this reason even though the
            &quot;document&nbhy;format&quot; value is among the values of
            the Printer&apos;s &quot;document-format-supported&quot;
            Printer attribute but not among the auto&nbhy;sensed Document
            formats. This value MUST be supported, since
            &quot;document-format&quot; is a REQUIRED operation attribute.</t>

            <t>&#039;document-format-error&#039;: The Job was aborted by the
            system because the Printer encountered an error in the Document
            data while processing it. If the Printer posts this reason, the
            Document data has already passed any tests that would have led to
            the &#039;unsupported-document-format&#039;
            &quot;job-state-reasons&quot; value.</t>

            <t>&#039;processing-to-stop-point&#039;: The requester has
            issued a Cancel-Job operation or the Printer has aborted the
            Job, but the Printer is still performing some actions on
            the Job until a specified stop point occurs or Job
            termination/cleanup is completed.<vspace blankLines="1"/>
            If the implementation requires some measurable time
            to cancel the Job in the &#039;processing&#039; or
            &#039;processing-stopped&#039; Job state, the Printer
            MUST use this value to indicate that the Printer is still
            performing some actions on the Job while the Job remains in
            the &#039;processing&#039; or &#039;processing-stopped&#039;
            state. Once at the stop point, the Printer moves the Job
            from the &#039;processing&#039; state to the
            &#039;canceled&#039; or &#039;aborted&#039; Job state.</t>

            <t>&#039;service-off-line&#039;: The Printer is offline and
            accepting no Jobs. All &#039;pending&#039; Jobs are put into the
            &#039;pending-held&#039; state. This situation could be true if
            the service&#039;s or Document transform&#039;s input is impaired
            or broken.</t>

            <t>&#039;job-completed-successfully&#039;: The Job completed
            successfully. This value SHOULD be supported.</t>

            <t>&#039;job-completed-with-warnings&#039;: The Job completed
            with warnings. This value SHOULD be supported if the implementation
            detects warnings.</t>

            <t>&#039;job-completed-with-errors&#039;: The Job completed with
            errors (and possibly warnings too). This value SHOULD be supported
            if the implementation detects errors.</t>

            <t>&#039;job-restartable&#039;: This Job is retained (see <xref
            target="Sec.PartitioningofJobStates" />) and is currently able to
            be restarted using the Restart-Job (see <xref
            target="Sec.RestartJobOperation" />) or Resubmit-Job <xref
            target="PWG5100.11" /> operation. If
            &#039;job&nbhy;restartable&#039; is a value of the
            Job&#039;s &quot;job-state-reasons&quot; attribute,
            then the Printer MUST accept a Restart-Job operation
            for that Job. &nbsp;This value SHOULD be supported if the
            Restart-Job operation is supported.</t>

            <t>&#039;queued-in-device&#039;: The Job has been forwarded to a
            device or print system that is unable to send back status. The
            Printer sets the Job&#039;s &quot;job-state&quot; attribute to
            &#039;completed&#039;  and adds the
            &#039;queued-in-device&#039; value to the
            Job&#039;s &quot;job-state-reasons&quot; attribute to
            indicate that the Printer has no additional information about the
            Job and never will have any better information. See <xref
            target="Sec.ForwardingServers" />.</t>
          </list></t>
        </section>

        <section anchor="Sec.jobstatemessagetextMAX" title="job-state-message (text(MAX))">
          <t>This RECOMMENDED attribute specifies information about the
          &quot;job&nbhy;state&quot; and &quot;job-state-reasons&quot;
          attributes in human-readable text. If the Printer supports this
          attribute, the Printer MUST be able to generate this message in
          any of the natural languages identified by the Printer&#039;s
          &quot;generated-natural-language-supported&quot; attribute (see the
          &quot;attributes-natural-language&quot; operation attribute
          specified in <xref target="Sec.RequestOperationAttributes" />).</t>

          <t>The value SHOULD NOT contain additional information not contained
          in the values of the &quot;job-state&quot; and
          &quot;job-state-reasons&quot; attributes, such as interpreter error
          information. Otherwise, application programs might attempt to parse
          the (localized) text. For such additional information, such as
          interpreter errors for application program consumption or specific
          Document access errors, new attributes with &apos;keyword&apos; values need to
          be developed and registered.</t>
        </section>

        <section anchor="Sec.jobdetailedstatusmessages1setOftextMAX" title="job-detailed-status-messages (1setOf text(MAX))">
          <t>This attribute specifies additional detailed and technical
          information about the Job. &nbsp;The Printer SHOULD localize the
          message, unless such localization would obscure the technical meaning
          of the message. Clients MUST NOT attempt to parse the value of this
          attribute. See &quot;job-document-access-errors&quot; (<xref
          target="Sec.jobdocumentaccesserrors1setOftextMAX" />) for
          additional errors that a program can process.</t>
        </section>

        <section anchor="Sec.jobdocumentaccesserrors1setOftextMAX" title="job-document-access-errors (1setOf text(MAX))">
          <t>This attribute provides additional information about each
          Document access error for this Job encountered by the Printer after
          it returned a response to the Print-URI or Send-URI operation and
          subsequently attempted to access document(s) supplied in the
          Print&nbhy;URI or Send-URI operation. For errors in the protocol
          that is identified by the URI scheme in the &quot;document-uri&quot;
          operation attribute, such as &#039;http:&#039; or
          &#039;ftp:&#039;, the error code is returned in parentheses,
          followed by the URI. For example:</t>

          <t>(404) http://www.example.com/filename.pdf</t>

          <t>Most Internet protocols use decimal error codes (unlike IPP), so
          the ASCII error code representation is in decimal.</t>
        </section>

        <section anchor="Sec.numberofdocumentsinteger0MAX" title="number-of-documents (integer(0:MAX))">
          <t>This attribute indicates the number of Documents in the Job,
          i.e., the number of Send-Document, Send-URI, Print-Job, or Print-URI
          operations that the Printer has accepted for this Job, regardless of
          whether the Document data has reached the Printer.</t>

          <t>Implementations supporting the RECOMMENDED
          Create-Job/Send-Document/Send-URI operations SHOULD support this
          attribute so that Clients can query the number of Documents in
          each Job.</t>

        </section>
        <section anchor="Sec.outputdeviceassignedname127" title="output-device-assigned (name(127))">
          <t>This attribute identifies the Output Device to which the Printer
          has assigned this Job. &nbsp;If an Output De