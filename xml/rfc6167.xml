<?xml version="1.0" encoding="US-ASCII" ?>
<!DOCTYPE rfc SYSTEM "schemas/rfc2629.dtd" [

<!ENTITY RFC2119 PUBLIC ''
  'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
<!ENTITY RFC3629 PUBLIC ''
  'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml'>
<!ENTITY RFC3986 PUBLIC ''
  'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml'>
<!ENTITY RFC3987 PUBLIC ''
  'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3987.xml'>
<!ENTITY RFC4395 PUBLIC ''
  'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4395.xml'>
<!ENTITY RFC5234 PUBLIC ''
  'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml'>
<!ENTITY RFC6075 PUBLIC ''
  'http://xml.resource.org/public/rfc/bibxml/reference.RFC.6075.xml'>
  ]>
  
<?xml-stylesheet type="text/xsl" href="transforms/rfc2629.xslt"?>

<?rfc toc="yes"?>
<?rfc tocdepth="2"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>

<rfc ipr="pre5378Trust200902" number="6167" category="info">

<front>
  <title abbrev="&quot;jms&quot; URI Scheme">URI Scheme for Java(tm) Message Service 1.0</title>

  <author initials="M. R." surname="Phillips" fullname="Mark Phillips">
    <organization abbrev="IBM">International Business Machines Corporation</organization>
    <address>
      <postal>
        <street>Hursley House, Hursley Park</street>
        <code>SO21 2JN</code>
        <city>Winchester</city>
        <region>Hampshire</region>
        <country>United Kingdom</country>
      </postal>
      <email>m8philli@uk.ibm.com</email>
    </address>
  </author>
  
  <author initials="P." surname="Adams" fullname="Phil Adams">
    <organization abbrev="IBM">International Business Machines Corporation</organization>
    <address>
      <postal>
        <street>11501 Burnet Rd.</street>
        <country>United States</country>
        <code>78758 </code>
        <region>TX</region>
        <city>Austin</city>
      </postal>
      <email>phil_adams@us.ibm.com</email>
    </address>
  </author>

  <author initials="D." surname="Rokicki" fullname="Derek Rokicki">
    <organization abbrev="Software AG">Software AG.</organization>
      <address>
    <postal>
          <street>11700 Plaza America Drive</street>
          <city>Reston</city>
          <region>VA</region>
      <code>20190</code>
      <country>United States</country>
    </postal>
    <email>derek.rokicki@softwareag.com</email>
      </address>
  </author>

  <author initials="E." surname="Johnson" fullname="Eric Johnson">
    <organization abbrev="TIBCO">TIBCO Software Inc.</organization>
    <address>
      <postal>
          <street>3303 Hillview Avenue</street>
          <city>Palo Alto</city>
        <region>CA</region>
          <code>94304</code>
          <country>United States</country>
      </postal>
      <email>eric@tibco.com</email>
    </address>
  </author>

   <date month="April" year="2011" />

	<keyword>SOAP</keyword>
	<keyword>JMS</keyword>
	<keyword>JNDI</keyword>
	<keyword>IRI</keyword>
	
  <abstract>
    <t>This document defines the format of Uniform Resource Identifiers (URIs)
as defined in RFC 3986,
    for designating connections and destination addresses used in the Java(tm) Messaging Service (JMS).
    It was originally designed for particular uses, but applies generally wherever a JMS URI is needed to describe 
    the connection to a JMS provider, and access to a JMS Destination.
    The syntax of this JMS URI is not compatible with previously existing, but unregistered, "jms" URI schemes.
    However, the expressiveness of the scheme described herein should satisfy the requirements
    of all existing circumstances.</t>
  </abstract>
</front>

<middle>
  <section anchor="intro" title="Introduction">
    <t>
        The "jms" URI scheme is used to designate a javax.jms.Destination
        object and an associated javax.jms.ConnectionFactory object <xref target="JMS"/>, and,
        optionally, to provide additional information concerning the way that the
        Destination object is to be used. Probably the most common, and
        certainly the most compatible, way in Java to retrieve such
        Destinations is via Java Naming and Directory Information (JNDI)
        <xref target="JNDI" />
        methods. So as to extend compatibility to existing vendor mechanisms
        beyond JNDI lookup, the JMS URI syntax allows variants on the core
        syntax. The variant exists as an explicit part of the syntax so that
        tools that are otherwise unfamiliar with the variant can recognize the
        presence of a URI with an alternate interpretation.
    </t>

    <t>
        In its simplest and most interoperable form, this URI scheme starts
        with "jms:jndi:" plus a JNDI name for a Destination. Since interaction
        with some resources might require JNDI contextual information or JMS
        header fields and properties to be specified as well, the "jndi"
        variant of the "jms" URI scheme includes support for supplying this
        additional JNDI information as query parameters.
    </t>

    <t>
        While the "jndi" variant provides compatibility, vendors can define
        additional variants. This specification defines three variants:
        "jndi", "queue", and "topic".  Vendors defining additional variants
        are strongly encouraged to register them with IANA as documented in 
        <xref target="variants-registration" />.
    </t>

    <t>
        While the "jms" URI scheme allows the location of network resources, it
        does not map to a single underlying protocol, unlike most other URI
        schemes that do so. Instead, it achieves interoperability through the use
        of a common Java-based API <xref target="JAVA" /> for messaging. Because of this, interoperability
        is dependent upon the implementation of the API and its capabilities;
        two implementations of JMS might or might not interoperate in practice.
        Furthermore, it might be impractical to use JMS URIs in non-Java
        environments.
    </t>
    <t>
        As a consequence of building upon an API, rather than a protocol,
        the utility of a JMS URI depends on the context in which it is used.
        That context includes agreement on the same JMS
        provider or underlying protocol; agreement on how to look
        up endpoints (JNDI); and, when using serialized Java object messages,
        sufficiently similar Java Class environments that serialized objects can be
        appropriately read and written. Users of this scheme need to establish the
        necessary shared-context parts as just enumerated -- a context that can span the
        globe, or merely a small local network. With that shared context, this
        URI scheme enables endpoint identification in a uniform way, and the
        means to connect to those endpoints. 
    </t>
        
<section title="Requirements Notation">
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
"SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
and "OPTIONAL" in this document are to be interpreted as
described in <xref target="RFC2119"/>.</t>

<t>All syntax descriptions use the ABNF specified by <xref target="RFC5234"/>,
"Augmented BNF for Syntax Specifications: ABNF".</t>
<t>Note that some examples in this document wrap long JMS URIs for readability.
 The line breaks are not part of the actual URIs.</t>
</section>
</section>

<section anchor="scheme-name" title="URI Scheme Name">
    <t>The name of the URI scheme is "jms". </t>
</section>

<section anchor="syntax" title="Syntax of a JMS URI">
    <t>The following ABNF describes the "jms" scheme URI syntax: </t>
       <figure>
           <artwork>
                <![CDATA[
  jms-uri = "jms:" jms-variant ":" jms-dest
     [ "?" param *( "&" param ) ]

  jms-variant = segment-nz-nc
 
  jms-dest = segment-nz ; specific meaning per variant
 
  param = param-name "=" param-value

  param-name = 1*(unreserved / pct-encoded)

  param-value = *(unreserved / pct-encoded)

  segment-nz-nc = <as defined in RFC 3986>
 
  path-rootless = <as defined in RFC 3986>

  unreserved = <as defined in RFC 3986>

  pct-encoded = <as defined in RFC 3986>
         ]]></artwork>
    </figure>
    
    <t>The URIs are percent-encoded UTF-8 <xref target="RFC3629"/>.  Please see
<xref target="encoding" /> of this document for encoding considerations.
    </t>
</section>

<section anchor="semantics" title="URI Scheme Semantics">
    <t>
        JMS URIs are used to locate JMS <xref target="JMS"/>
        Destination resources and do not specify actions to be taken on those
        resources. Operations available on JMS Destinations are fully and
        normatively defined by the JMS specification and as such are out of scope
        for this URI specification.
    </t>

    <t>The required portions of the syntax include the terminal of "jms" for
        the URI scheme name; the &lt;jms-variant&gt; element to indicate the
        variant of the scheme; and the &lt;jms-dest&gt; element, which identifies the
        Destination based on the chosen variant. For the &lt;jms-variant&gt;
        element, this document defines three values: "jndi", "queue", and "topic".
        All the terminals resulting from &lt;jms-variant&gt; and
        &lt;jms&nbhy;dest&gt; production rules are case-sensitive.
    </t>
    
    <t>
        Parameters further refine how to locate and use the Destination.  The parameter names and values
        are case-sensitive.  They can occur in any order, and each parameter name SHOULD NOT appear more
        than once.  In the event that a parameter appears multiple times, all but the last instance of the
        parameter MUST be ignored.  For comparison purposes, the absence of a parameter does
        not mean the same thing as a URI with a parameter set to a default value, due to
        the potential variation in default values as determined by the context of a specific use.
    </t>

    <t>
        Each variant can have query parameters specific to that variation.
        All such variant-specific parameters SHOULD use
        the name of the variant as the prefix to the parameters.  For example, a vendor-specific
        variant of "vnd.example.ex" might also define a parameter with a name like "vnd.example.exParameter".
        Parameters that apply across multiple variants -- perhaps because
        they are
        generally applicable, such as JMS settings -- MUST NOT have a name that
        starts with the name of any known variant. This pattern enables tools that
        are otherwise unfamiliar with a particular variant to distinguish those
        parameters that are specific to a variant from those that are more
        generally applicable.
    </t>
    
    <t>Examples of the URI scheme include:</t>
    <figure>
        <artwork>
  jms:jndi:SomeJndiNameForDestination?
    jndiInitialContextFactory=
    com.example.jndi.JndiFactory&amp;priority=3

  jms:queue:ExampleQueueName?timeToLive=1000
</artwork></figure>

    <section anchor="shared-parameters" title="Shared Parameters">

    <t>
    In addition to the required particles, the "jms" URI scheme supports the following shared
    parameters, which are available to all variants.  These parameters correspond to headers and properties
    on the JMS Messages to be sent. For the parameters deliveryMode, timeToLive, and priority, the default
    values might be specified in the context of a specific use, for example by environment
    variables, or in the configuration of a particular network application.  JMS also defines
    default values for these properties.  The context default is hereby defined as the
    default value in the context of a specific use, or the JMS default for a particular property
    if the context does not define a default.
    </t>

    <section title="deliveryMode">
    <t>Indicates whether the request message is persistent or not.
    This property corresponds to the JMS message header field "JMSDeliveryMode"
defined in Section 3.4.2 of the JMS 1.1 specification <xref target="JMS"></xref>.
  The value of this parameter MUST be "PERSISTENT" or "NON_PERSISTENT".
    If this parameter is not specified, then the context default MUST be used.</t>
    </section>

    <section title="timeToLive">
    <t>The lifetime, in milliseconds, of the request message, specified as a decimal number.  This property corresponds to
    the JMS Time-To-Live value defined in Section 4.8 of the JMS 1.1 specification.
    If this parameter is not specified, then the context default MUST be used. </t>
    </section>

    <section title="priority">
    <t>The JMS priority associated with the request message.  As per
Section&nbsp;3.4.10 of the JMS 1.1
    specification, this MUST be a value between 0 and 9 inclusive, 
    specified as a decimal number.
    This corresponds to the JMS message header
    field "JMSPriority". If this parameter is not specified, then the context default MUST be used. </t>
    </section>

    <section title="replyToName">
    <t>This property corresponds to the JMS message header field "JMSReplyTo" defined in Section 3.4.6
    of the JMS 1.1 specification. As interpreted by the
    particular variant, this property value specifies the JMS Destination object to
    which a response message ought to be sent.
    </t>
    </section>

    </section>
        
    <section anchor="jndi-variant" title="&quot;jndi&quot; Variant">

        <t>The "jndi" variant implies the use of JNDI for discovering the Destination object.  When
        this is specified as the variant, the &lt;jms&nbhy;dest&gt; portion of the syntax is the name for
        JNDI lookup purposes.  Additional JNDI-specific parameters can be
specified.  The JNDI-specific parameters SHOULD only be processed
  when the URI variant is "jndi".</t>
        
        <section anchor="jndi-parameters" title="JNDI Parameters">
        
        <section title="jndiConnectionFactoryName">
        <t>Specifies the JNDI name of the Java class (see Section 3.8,
"Identifiers", of <xref target="JLS" /> for the specification of a legal Java class name)
        providing the connection factory. </t>
        </section>
        <section title="jndiInitialContextFactory">
        <t>Specifies the fully qualified Java class name of the "InitialContextFactory" implementation class to use. </t>
        </section>
        <section title="jndiURL">
        <t>Specifies the JNDI provider URL, in a form consistent with javax.naming.spi.NamingManager.getURLContext(String
        scheme, Hashtable environment) as defined in the JNDI specification <xref target="JNDI" />.</t>
        </section>
        
        <section title="Additional JNDI Parameters" anchor="additional-jndi-params" >
        <t>It is possible that connecting to a JNDI provider requires additional
        parameters.  These parameters can be passed in as custom parameters (see
        Section 4.4).  To identify a custom parameter as JNDI specific, the
        parameter name needs to start with the prefix "jndi-".</t>
        
        <t>For example, if the JNDI provider requires a parameter named
        "com.example.jndi.someParameter", you can supply the parameter in the
URI as: jndi-com.example.jndi.someParameter=someValue</t>
  
        </section>
        </section>

        <section anchor="jndi-lookup"
            title="Example of Performing a JNDI Lookup">
            <t>
                To perform a lookup based on a "jndi" variant URI using Java APIs, an application
                might start by creating a JNDI InitialContext object.  The InitialContext object can then be used to look up the 
                JMS ConnectionFactory object (using the "jndiConnectionFactoryName" URI parameter), 
                the target JMS Destination object (using the &lt;jms-dest&gt; portion of the JMS URI), and 
                the "replyToName" JMS Destination object (if the "replyToName" parameter is specified on the 
                URI).
                </t>    
                <t>
                The application creates the InitialContext object by first setting up two properties:
                "Context.INITIAL_CONTEXT_FACTORY", with the value of the 
                jndiInitialContextFactory JMS URI parameter; and
                "Context.PROVIDER_URL", with the value of the 
                jndiURL URI parameter; and then passing the two properties to the 
                InitialContext constructor.  
                </t>
                <t>
                To locate a connection factory or Destination object, the application passes the name
                of the object into the InitialContext.lookup() method.  
                </t>
                <t>
                For example, the JMS URI...</t>                
       <figure>
           <artwork>
                <![CDATA[
  jms:jndi:REQ_QUEUE
    ?jndiURL=file:/C:/JMSAdmin
    &jndiInitialContextFactory
    =com.sun.jndi.fscontext.RefFSContextFactory
    &jndiConnectionFactoryName=CONNFACT
    &replyToName=RESP_QUEUE          
         ]]></artwork>
        </figure>        
<t>                
                ...would be used by the following (non-normative) code sample to locate and retrieve a JMS 
                ConnectionFactory called "CONNFACT", and JMS Destinations called "REQ_QUEUE" 
                and "RESP_QUEUE", from a file-system JNDI context called "c:/JMSAdmin".
    </t>            
       <figure>
           <artwork>
                <![CDATA[
  /*
   * Preconditions on URI: 
   * - portion <jms-dest> has been parsed into variable "jms_dest"
   * - parameters "jndiConnectionFactoryName",
   *   "jndiInitialContextFactory", "replyToName", and "jndiURL" have
   *   been parsed into variables of the same name.
   */
  Hashtable environment = new Hashtable();
  environment.put(Context.INITIAL_CONTEXT_FACTORY,
    jndiInitialContextFactory);
  environment.put(Context.PROVIDER_URL, jndiURL);
  /*
   *  Create File-System Initial Context
   */
  Context ctx = new InitialContext(environment);
  /*
   * Now get the JMS ConnectionFactory and Destination.  These will
   * be used later on in the application to create the JMS
   * Connection and send/receive messages.
   */
  ConnectionFactory jmsConnFact = (ConnectionFactory)
    ctx.lookup(jndiConnectionFactoryName);
  Destination requestDest = (Destination) ctx.lookup(jms_dest);
  Destination replyDest = (Destination) ctx.lookup(replyToName);
]]></artwork>
        </figure>

    <t>                
        The ConnectionFactory is used to create a Connection, which itself is used 
        to create a Session.  The Session can then be used to create the MessageProducer,
        which sends messages to the target Destination; and the
MessageConsumer, which
        receives messages from the replyToName Destination (as shown in the following code 
        extract).</t>

       <figure>
           <artwork>
                <![CDATA[
  /*
   * Create a producer to send a message to the request Destination
   * that was specified in the URI, then create the message, setting
   * the replyToName Destination in the message to the one specified
   * in the URI, and send it.
   */                
  MessageProducer producer = sess.createProducer(requestDest);     
  BytesMessage reqMsg = sess.createBytesMessage();
  reqMsg.setJMSReplyTo(replyDest);
  producer.send(reqMsg);
  /*
   * Create a consumer to get a message from the replyToName
   * Destination using a selector to get the specific response to
   * this request.  The responder sets the correlation ID of the
   * response to the message ID of the request message.
   */
  MessageConsumer consumer = sess.createConsumer(replyDest,
        "JMSCorrelationID = '" + reqMsg.getJMSMessageID() + "'");
  Message respMsg = (Message) consumer.receive(300000);            
]]></artwork>
        </figure>

    <section anchor="jndi-custom-parameter-lookup" title="Performing a JNDI Lookup with Custom Parameters">
    <t>Any parameters with a prefix of "jndi-" MUST be used to set custom properties
    when establishing a connection to the JNDI provider.  The name of the
    custom property is derived by removing the "jndi-" prefix from the URI parameter name,
    and the value of the property is the value of the parameter.</t>
    
    <t>For example, the JMS URI...</t>                
       <figure>
           <artwork>
                <![CDATA[
  jms:jndi:REQ_QUEUE
    ?jndiURL=file:/C:/JMSAdmin
    &jndiInitialContextFactory
    =com.sun.jndi.fscontext.RefFSContextFactory
    &jndiConnectionFactoryName=CONNFACT
    &jndi-com.example.jndi.someParameter=someValue
         ]]></artwork>
    </figure>
    <t>...instructs the consumer to use the following properties to connect to
the JNDI provider:</t>
       <figure>
           <artwork>
                <![CDATA[
  java.naming.provider.url=file:/C:/JMSAdmin
  java.naming.factory.initial=
    com.sun.jndi.fscontext.RefFSContextFactory
  com.example.jndi.someParameter=someValue
         ]]></artwork>
    </figure>

    </section>

    </section>

    </section>

    
    <section anchor="queue-and-topics-variant" title="Vendor Destination Names -- Variants &quot;queue&quot; and &quot;topic&quot;" >
    
    <t>The JMS Session object provides a means to directly access Queues and
    Topics.  Specifically, it has the methods Session.createQueue(String
    name) and Session.createTopic(String name).  These methods can be used
    to "create" the Java representation of an existing JMS Topic or Queue.
    </t>
    
    <t>Since the Session interface requires external knowledge about whether a
    given name relates to a Queue or Topic, rather than introducing one new
    variant, this section defines two variants.  A JMS URI can indicate
    which of these methods to use by specifying the appropriate variant --
    either "queue" or "topic". For example:</t>
    <figure>
        <artwork>
  jms:queue:ExampleQueueName</artwork>
    </figure>
    <t>to identify a JMS Queue Destination, and</t>
    <figure>
        <artwork>
  jms:topic:ExampleTopicName</artwork>
    </figure>
    <t>to identify a JMS Topic Destination.</t>
    
    <t>JMS only specifies one way to obtain the names used by these APIs.  With
    a JMS Queue or Topic available, an implementation can call
    Queue.getQueueName() or Topic.getTopicName(), respectively, both of
    which return a String object.  To create a correct corresponding URI,
    the resulting string MUST use standard URI escape mechanisms so that the
    resulting characters conform to the production &lt;jms-dest&gt;.</t>
    
    <section anchor="topic-reply" title="Treatment of replyToName Parameter" >
    <t>When used with the "queue" and "topic" variants, the replyToName
    parameter, specified in Section 4.1.4, always refers to a name of a JMS
    Queue to look up via the Session.createQueue() method, or its equivalent.  For either
    variant, if a JMS Topic is instead required as a response Destination, a
    JMS URI can employ the "topicReplyToName" parameter.  This parameter
    defines a name to look up with the Session.createTopic() method, or its equivalent.</t>
    
    <t>A JMS URI MUST NOT specify both a "topicReplyToName" and a "replyToName"
    parameter.</t>
    
    </section>
    <section anchor="session-via-jndi" title="Obtaining a Session via JNDI" >
    <t>Using the Session.createQueue() and Session.createTopic() methods
    assumes that a client program has already obtained a Session object.
    Where does that Session object come from -- how does a client get it?
    One way to get a Session is simply to access vendor-specific APIs.</t>
    
    <t>Another way to get a Session object is to simply revert to using JNDI.  That
    is, if a Session is not available to the client from some other context, the
    "queue" and "topic" variants MAY reuse the URL parameters specified in
    Section 4.2.1, "JNDI Parameters".  Via JNDI, those parameters will
    identify a ConnectionFactory, which can then be used to obtain a Session
    object.</t>
    
    <t>Combining the "queue" and "topic" variants with JNDI lookup for an
    implementation of ConnectionFactory raises an important consideration
    for JMS URI clients.  Once clients employ JNDI for one part of
    discovering a Destination, they almost certainly could use a
    vendor-neutral JNDI lookup for a Destination object itself, rather than using
    vendor-specific means.  As a result, clients need to carefully consider
    whether it makes sense to use JNDI for one part of this problem, without
    using it for the other.</t>
    
    </section>
    
    <section anchor="queue-topic-limitations" title="Limitations of &quot;queue&quot; and &quot;topic&quot;">
    
    <t>The JMS specification clearly identifies the two methods on the Session
    interface as returning vendor-specific names for Destinations.
    Consequently, users of the "jms" URI scheme ought to carefully consider when
    these two variants might be employed.  If users plan on switching between
    JMS vendors, they might also need to plan on regenerating resources that
    contain URIs in this vendor-specific form.</t>
    
    <t>A JMS vendor can provide alternate ways to obtain the names that can be
    passed to Session.createQueue() and Session.createTopic().  When using
    names derived from those alternate means, users of this URI specification
    are encouraged to verify that the obtained names work as expected in all
    circumstances.</t>
    
    </section>
    
    </section>
            
        <section title="Custom Parameters">
        <t>The set of parameters is extensible.  Any other vendor- or application-defined parameter can be supplied,
        in the URI, by passing it as &lt;param-name&gt;=&lt;param-value&gt;,
just like the set of well-known parameters.
        </t>
        </section>

        <t>WARNING: Vendors and applications MUST
        NOT include sensitive information (such as authorization tokens) in a
        URI.  Other means of authorization, authentication, and identification
        ought to be used.  Also see the security discussion below about
        properties that might be duplicated as JMS message properties. </t>
        </section>
  
  <section anchor="encoding" title="Encoding Considerations">
    <t>The "jms" URI scheme distinguishes between &lt;unreserved&gt; characters and &lt;pct-encoded&gt; characters, as
    defined in <xref target="RFC3986"/>.  Apart from these encoding considerations, the characters "?" and 
    "&amp;" MUST be encoded when they appear within the &lt;jms-dest&gt; particle (for example, a JNDI name) or 
    in query parameters.  The character ":" SHOULD be escaped when appearing in the &lt;jms-dest&gt; portion 
    of the syntax.</t>

    <t>Conversions to and from Internationalized Resource Identifiers
(IRIs) follow the rules of RFC 3987,
Sections 3.1 and 3.2.  As per
Sections&nbsp;1.2-c. and 6.4 of <xref target="RFC3987"/>, all parts
of the JMS URI MUST use the UTF-8 encoding when
    converting to and from the IRI format.</t>
  </section>

  <section anchor="scheme-usage" title="Applications/Protocols That Use the JMS URI">

    <t>A variety of vendors provide implementations of the JMS Service Provider Interface (SPI).  These products interoperate at the API level, in the Java programming language. </t>

    <t>Some vendors have provided additional products that interoperate with their own SPI implementations.  These extensions might also be able to make use of this URI scheme.</t>

    <t>The vendors working on this URI scheme are also working on a
specification for carrying SOAP messages 
    over their respective implementations of JMS <xref target="SOAP-JMS"/>.  In addition, the 
    Service Component Architecture Bindings technical committee
(TC) <xref target="SCA-TC" />
at OASIS employs the "jms" URI scheme
    to identify JMS Destinations in <xref target="SCA-JMS" />.</t>

  </section>

  <section anchor="Interoperability" title="Interoperability Considerations">
    <t>This "jms" URI scheme focuses on identifying a JMS Destination object,
and some characteristics of communication using that Destination, and
specifically excludes any notion of describing how JMS itself is implemented
and how it delivers messages.  As a consequence of this focus, interoperability
concerns are limited to how implementations obtain and use a Destination object.
    </t>
    
    <t>This scheme definition describes three variants for obtaining a
Destination.  These variants achieve their aims with the use of JNDI and JMS
APIs, with no new APIs or protocols defined here. As a consequence of using
JNDI and JMS, interoperability concerns might arise if implementations do not
conform to the specifications for those APIs.  

Further, the use of Java,
and JNDI in particular, means that the configuration of the execution
environment and the use of Java ClassLoaders can affect the interpretation of
any given URI. Consumers of these URIs are urged to consider the scope and
consistency of the environment across which these URIs will be shared. 
    </t>
      
    <t>As described in <xref target="semantics" />, others can define additional variants, which
    provide the means to describe how to look up JMS Destination objects in a manner specific
    to some environment.  For any new variant, the shared parameters defined in
    <xref target="shared-parameters" /> MUST have the same meaning in that variant as they do here.
    That way, tools and people can safely copy these parameters between environments.
    Note that while additional variants might seem more flexible, employing
    variants not defined here might make it more difficult to switch to an
    alternate JMS provider.
    </t>
  </section>

  <section anchor="security" title="Security Considerations">
    <t>Section 7 of <xref target="RFC3986"/> identifies some of the security concerns that ought to be addressed by this specification.</t>

    <section title="Reliability and Consistency">
        <t>This specification identifies only the variant (&lt;jms-variant&gt;) and variant-specific
        details (&lt;jms-dest&gt;) as an essential part of the URI. For reliability and consistency
        purposes, these variants are the only part that can reasonably be expected to be stable.  Other optional JMS configuration
        and message properties indicated as URI parameters, like "timeToLive", can
        reasonably be determined by the sender of a message, without affecting the recipient.
        Insofar as a recipient might wish to dictate certain parameters, such as the
        "jndiConnectionFactoryName", those parameters can be specified.</t>
    </section>

    <section title="Malicious Construction">

            <section title="Recipient Concerns">
                <t>A malicious consumer of a service using a JMS URI could send,
                as part of a JMS message, a URI with a parameter such as "timeToLive"
                with a value specified in the URI that differs from the corresponding
                JMS message property ("JMSExpiration" header field, in this example).  In the
                case of such messages with such URIs, recipients are strongly cautioned
                to avoid applying processing logic based on particular URI parameters.
                Discrepancies in the message could be used to exploit differences in behavior between
                the selectors that a JMS-based application might use to affect which
                messages it sees, and the processing of the rest of the application.
                As defined in this document, the parameters of concern include: </t>
                <t>
                <list>
                    <t>deliveryMode</t>
                    <t>timeToLive</t>
                    <t>priority</t>
                </list>
                </t>
                <t>Message senders are strongly urged to remove from the URI extra parameters like the
                above in environments where the data will be redundant with information specified
                elsewhere in the JMS message. </t>
                <t>Any use of additional parameters, either as a part of a definition of a new variant
                or for more general use, SHOULD also specify whether those parameters ought to be
                removed by a sender as specified here.  If a recipient is aware of the "jms" URI scheme, and it
                receives a message containing a JMS URI, it MUST ignore or discard parameters that
                it does not recognize.
                </t>
            </section>

            <section title="Sender Concerns">
                <t>A third party could intercept and replace a URI containing any of the
                JMS/JNDI configuration parameters, such as "jndiConnectionFactoryName",
                "jndiInitialContextFactory", or "jndiURL".  As these parameters can affect how
                an implementation establishes an initial connection, such parameters
                could be used as a means to subvert communications.
                This could possibly result in re&nbhy;routing communications to
third parties,
                who could then monitor sent messages.  Clients SHOULD NOT use these URI
                parameters unless assured of their validity in trusted environments. </t>
            </section>
        </section>

        <section title="Back-End Transcoding">
            <t>This specification, in using the URI specification and
building around the JMS specification, has no particular transcoding issues.
Any such issues are problems with the underlying implementation of Java and 
the Java Messaging Service being employed. </t>
        </section>

        <section title="Semantic Attacks">
            <t>A possible semantic attack on the "jndi" variant could be accomplished by replacing
            characters of the JMS URI from one language with equivalent-looking characters
            from another language, known as an "Internationalized Domain Name
(IDN) homograph attack" <xref target="HOMOGRAPH"></xref>.
            This kind of attack could occur in a variety of ways.  For example, if an environment allows
            for the automatic registration of JNDI Destination names, a malicious actor could
            register and then publicize an alternate of an existing Destination name.  Such an environment
            ought to prevent the use of homograph equivalents, perhaps by restricting allowed characters,
            so that clients do not accidentally send their requests to unintended Destinations. </t>
            
            <t>The "queue" and "topic" variants are subject to the same concerns as the
            "jndi" variant.  In addition, because the Destination names are vendor
            defined, URIs employing these two variants might employ special characters
            that significantly change the meaning of the URI.  It is possible that
            the introduction of a single character -- difficult for a human to notice
            -- might dramatically change the intended meaning of a URI.  In
            situations where this might be an issue, users of this URI are urged to
            strongly consider the "jndi" variant instead.</t>
            
        </section>

        <section title="Other Security Concerns">
            <t>This specification does not define or anticipate any use for IP addresses as part of the URI,
            so no issues around IP addresses, rare or otherwise, are raised by this specification. </t>
            
            <t>This specification does not define any characteristics of a "jms" scheme URI that contain
            sensitive information. </t>
        </section>

  </section>

  <section anchor="iana" title="IANA Considerations">
      <section anchor="iana-scheme-registration" title="URI Scheme Registration">

        <t>
            IANA registered the Java Message Service URI
            scheme described in this document, according to the following
            scheme registration request, using the template from <xref target="RFC4395"/>:
        </t>
        <t>
           <list style="symbols">
                   <t>URI scheme name: jms</t>
                   <t>Status: Provisional</t>
                   <t>URI scheme syntax: See <xref target="syntax" /></t>
                <t>URI scheme semantics: See <xref target="semantics" /></t>
                <t>Encoding considerations: See <xref target="encoding" /></t>
                <t>Applications/protocols that use this URI scheme name: See <xref target="scheme-usage" /></t>
                <t>Interoperability considerations: See <xref target="Interoperability" /></t>
                <t>Security considerations: See <xref target="security" /></t>
                <t>Contact: See the Authors' Addresses section</t>
                <t>References:  See the References section</t>
           </list>        
         </t>
      </section>

      <section anchor="registries" title="&quot;jms&quot; URI Scheme Registries">
          <t>
              Per this URI scheme, IANA has created a registry for possible
"variants". IANA can reject obviously bogus registrations.
          </t>

      <section anchor="variants-registration" title="JMS URI Variants"> 
          <t>
              This registry provides a listing of "jms" URI scheme variants.
              Variant names beginning with "vnd." are reserved for vendor extensions.
              Such variants should follow a pattern of vnd.&lt;vendorname&gt;.&lt;label&gt;.
              The &lt;vendorname&gt; corresponds to the iana-vendor-tag production from
              <xref target="RFC6075" />, and vendor.&lt;vendorname&gt; must already be registered in the
              Application Configuration Access Protocol (ACAP)
 Vendor Subtree.  The &lt;label&gt; is chosen by said vendor.
          </t>
          <t>
              All variant names are to be registered on a first come,
              first served basis.
          </t>
          <t>
              Variants must conform to the "jms-variant" production above. Since variants
              occur in URIs, they ought to be short, and MUST NOT be more than forty
              characters in length.
          </t>

          <t>This document defines the "jndi", "queue", and "topic" variants
          initially included in the registry.</t>
          
      </section>
      <section anchor="variants-registration-template" title="&quot;jms&quot; URI Scheme Variant Registration Template">
          <t>
              This template describes the fields that must be present to register a new variant
              for use in a JMS URI.
          </t>
          <t>
To: iana@iana.org<vspace blankLines="0" />
Subject: Registration of JMS URI variant name
        </t>
        <t>
              <list style="hanging">
                  <t hangText="JMS URI variant name:">
                      Variants must conform to the "jms-variant" production above. Since variants
                      occur in URIs, they ought to be short, and MUST NOT be more than forty
                      characters in length.
                  </t>
                  <t hangText="Description:">
                      A description of the purpose of the variant being registered.
                  </t>
                  <t hangText="Contact Information:">
                      Name(s) and email address(es) to contact for more information about this registration.
                  </t>
                  <t hangText="Description URL:">
                      If available, a URL for a document describing the details of how the variant works.
                  </t>
                  <t hangText="Comments:">
                      Any comments the requester thinks are relevant to this request.
                  </t>
                  
                  <t hangText="Change Controller:">
                      Contact information for the person who controls further changes to this variant definition.
                  </t>
              </list>
          </t>
          
      </section>
      
      <section anchor="change-control" title="Change Control">
        <t>
        Once a JMS URI variant registration has been published by IANA, the
  change controller can request a change to its definition.  The change request
  follows the same procedure as the registration request.</t>

  <t>The change controller of a JMS URI variant can pass responsibility for the JMS URI variant
  to another person or agency by informing IANA; this can be
  done without discussion or review.</t>

  <t>
  JMS URI variant registrations MUST NOT be deleted; mechanisms that are
  no longer believed appropriate for use can be marked as obsolete in
  the Comment field.</t>

  <t>In exceptional circumstances, the IESG can reassign responsibility
  for a JMS URI variant.
  </t>

  <t>
  The IESG is considered to be the owner of all JMS URI variants that
  are on the IETF Standards Track.
  </t> 
      </section>
      </section>
  </section>


  <section anchor="contributors" title="Contributors">
  <t>The authors gratefully acknowledge the contributions of: 
      <list>
          <t>Phil Adams<vspace blankLines="0" />
          International Business Machines Corporation<vspace blankLines="0" />
          EMail: phil_adams@us.ibm.com</t>
        
        <t>Glen Daniels<vspace blankLines="0"/>
        WSO2<vspace blankLines="0"/>
        EMail: glen@wso2.com</t>
        
        <t>Peter Easton<vspace blankLines="0"/>
        Progress Software<vspace blankLines="0"/>
        EMail: peaston@progress.com</t>
        
        <t>Tim Frank<vspace blankLines="0"/>
        Software AG.<vspace blankLines="0"/>
        EMail: tim.frank@softwareag.com</t>
        
        <t>Lei Jin<vspace blankLines="0"/>
        BEA Systems, Inc. until March 2007</t>
        
        <t>Eric Johnson<vspace blankLines="0"/>
        TIBCO Software Inc.<vspace blankLines="0"/>
        EMail: eric@tibco.com</t>
        
        <t>Vinod Kumar<vspace blankLines="0"/>
        BEA Systems, Inc. until May 2007</t>
        
        <t>Amelia A. Lewis<vspace blankLines="0"/>
        TIBCO Software Inc.<vspace blankLines="0"/>
        EMail: alewis@tibco.com</t>
        
        <t>Roland Merrick<vspace blankLines="0"/>
        International Business Machines Corporation until June 2009</t>
        
        <t>Mark Phillips<vspace blankLines="0"/>
        International Business Machines Corporation<vspace blankLines="0"/>
        EMail: m8philli@uk.ibm.com</t>
        
        <t>Derek Rokicki<vspace blankLines="0"/>
        Software AG.<vspace blankLines="0"/>
        EMail: derek.rokicki@softwareag.com</t>
        
        <t>Stephen Todd<vspace blankLines="0"/>
        International Business Machines Corporation until April 2007</t>
        
        <t>Dongbo Xiao<vspace blankLines="0"/>
        Oracle Corp.<vspace blankLines="0"/>
        EMail: dongbo.xiao@oracle.com</t>
        
        <t>Prasad Yendluri<vspace blankLines="0"/>
        Software AG.<vspace blankLines="0"/>
        EMail: prasad.yendluri@softwareag.com</t>
        
    </list>
    </t>
  </section>
  
  <section anchor="acknowledgement" title="Acknowledgements">
    <t>Oracle and Java are registered trademarks of Oracle and/or its affiliates. Other names may be trademarks of their respective owners.</t>
  </section>

</middle>

<back>
<references title="Normative References">

  &RFC2119; &RFC3629; &RFC3986; &RFC3987; &RFC4395; &RFC5234; &RFC6075;

    <reference anchor='JLS' target="http://java.sun.com/docs/books/jls/third_edition/html/j3TOC.html">
        <front>
            <title>The Java Language Specification, Third Edition</title>
            <author fullname="Various">
                <organization>Sun Microsystems, Inc.</organization>
            </author>
            <date month="January" year="2005" />
        </front>
    </reference>
    
    <reference anchor='JMS' target="http://java.sun.com/products/jms/">
            <front>
                    <title>Java Message Service</title>
                    <author initials="M." surname="Hapner" fullname="Mark Hapner">
                        <organization>Sun Microsystems</organization>
                    </author>
                    <author initials="R." surname="Burridge" fullname="Rich Burridge">
                        <organization>Sun Microsystems</organization>
                    </author>
                    <author initials="R." surname="Sharma" fullname="Rahul Sharma">
                        <organization>Sun Microsystems</organization>
                    </author>
                    <author initials="J." surname="Fialli" fullname="Joseph Fialli">
                        <organization>Sun Microsystems</organization>
                    </author>
                    <author initials="K." surname="Stout" fullname="Kate Stout">
                        <organization>Sun Microsystems</organization>
                    </author>
                    <date month="April" year="2002"/>
            </front>
    </reference>
    
    <reference anchor='JNDI' target="http://java.sun.com/products/jndi/docs.html">
        <front>
            <title>Java Naming and Directory Interface Application Programming Interface</title>
            <author fullname="">
                <organization>Sun Microsystems, Inc.</organization>
            </author>
            <date month="July" year="1999" />
        </front>
    </reference>

</references>
<references title="Informative References">

    <reference anchor='HOMOGRAPH' target="http://en.wikipedia.org/w/index.php?title=IDN_homograph_attack&amp;oldid=416746950">
            <front>
                    <title>IDN Homograph attack</title>
                    <author fullname="Various">
                        <organization></organization>
                    </author>
                    <date year="2011" />
            </front>
    </reference>

    <reference anchor='JAVA' target="http://www.oracle.com/technetwork/java/index.html">
        <front>
            <title>Oracle Technology for Java Developers</title>
            <author fullname="Various">
                <organization>Oracle Corporation</organization>
            </author>
            <date year="2011" />
        </front>
    </reference>
    
<reference anchor="SCA-TC" target="http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=sca-bindings">
<front>
<title>OASIS Service Component Architecture / Bindings (SCA-Bindings)
TC</title>
<author fullname="Various">
<organization></organization>
</author>
</front>
</reference>

    <reference anchor='SCA-JMS' target="http://docs.oasis-open.org/opencsa/sca-bindings/sca-jmsbinding-1.1-spec.html" >
        <front>
            <title>Service Component Architecture JMS Binding Specification Version 1.1</title>
            <author initials="S" surname="Holdsworth" fullname="Simon Holdsworth">
                <organization>International Business Machines Corporation</organization>
            </author>
            <author initials="A" surname="Karmarkar" fullname="Anish Karmarkar">
                <organization>Oracle Corporation</organization>
            </author>
            <date month="November" year="2010"/>
        </front>
    </reference>
    
    <reference anchor='SOAP-JMS' target="http://www.w3.org/TR/2010/WD-soapjms-20101026/">
            <front>
                    <title>SOAP over Java Message Service 1.0</title>
                    <author initials="P" surname="Adams" fullname="Phil Adams">
                        <organization>International Business Machines Corporation</organization>
                    </author>
                    <author initials="P" surname="Easton" fullname="Peter Easton">
                        <organization>Progress Software</organization>
                    </author>
                    <author initials="E" surname="Johnson" fullname="Eric Johnson">
                        <organization>TIBCO Software Inc.</organization>
                    </author>
                    <author initials="R" surname="Merrick" fullname="Roland Merrick">
                        <organization>International Business Machines Corporation</organization>
                    </author>
                    <author initials="M" surname="Phillips" fullname="Mark Phillips">
                        <organization>International Business Machines Corporation</organization>
                    </author>
                    <date month="October" year="2010" />
            </front>
    </reference>
</references>
</back>
</rfc>
