<?xml version="1.0" encoding="US-ASCII"?>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc1321 SYSTEM 'reference.RFC.1321.xml'>
<!ENTITY rfc2104 SYSTEM 'reference.RFC.2104.xml'>
<!ENTITY rfc2119 SYSTEM 'reference.RFC.2119.xml'>
<!ENTITY rfc3174 SYSTEM 'reference.RFC.3174.xml'>
<!ENTITY rfc3864 SYSTEM 'reference.RFC.3864.xml'>
<!ENTITY rfc4086 SYSTEM 'reference.RFC.4086.xml'>
<!ENTITY rfc4648 SYSTEM 'reference.RFC.4648.xml'>
<!ENTITY rfc4880 SYSTEM 'reference.RFC.4880.xml'>
<!ENTITY rfc5234 SYSTEM 'reference.RFC.5234.xml'>
<!ENTITY rfc5536 SYSTEM 'reference.RFC.5536.xml'>
<!ENTITY rfc5537 SYSTEM 'reference.RFC.5537.xml'>
<!ENTITY rfc6151 SYSTEM 'reference.RFC.6151.xml'>
<!ENTITY rfc6234 SYSTEM 'reference.RFC.6234.xml'>
<!ENTITY rfc8126 SYSTEM 'reference.RFC.8126.xml'>
<!ENTITY rfc8174 SYSTEM 'reference.RFC.8174.xml'>
]>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc category="std" ipr="trust200902" updates="5537"
   number="8315" submissionType="IETF" consensus="yes">

<front>

<title abbrev="Cancel-Locks">Cancel-Locks in Netnews Articles</title>

<author initials="M." surname="Baeuerle" fullname="Michael Baeuerle">
   <organization>STZ Elektronik</organization>
   <address>
      <postal>
         <street>Hofener Weg 33C</street>
         <code>71686</code> <city>Remseck</city>
         <region>Baden-Wuerttemberg</region>
         <country>Germany</country>
      </postal>
      <phone/>
      <facsimile>+49 7146 999061</facsimile>
      <email>michael.baeuerle@stz-e.de</email>
      <uri/>
   </address>
</author>

<date month="February" year="2018"/>

<keyword>Usenet</keyword>
<keyword>Netnews</keyword>
<keyword>Cancel-Lock</keyword>

<abstract>
<t>
   This document defines an extension to the Netnews Article Format that
   may be used to authenticate the withdrawal of existing articles.
   This document updates RFC 5537.
</t>
</abstract>

</front>

<middle>

<section title="Introduction" anchor="intro">

<t>
  The authentication system defined in this document is intended to be used as
  a simple method to verify that the withdrawal of an article is valid;
  that is to say the poster, posting agent, moderator, or injecting agent
  that processed the original article has requested to withdraw it via
  the use of a cancel control article
  (<xref target="RFC5537"/>&nbsp;Section&nbsp;5.3) or a Supersedes header
  field (<xref target="RFC5537"/>&nbsp;Section&nbsp;5.4).
</t>
<t>
  This document defines two new header fields: Cancel-Lock and Cancel&nbhy;Key.
  The Cancel-Lock header field contains hashes of secret data.
  The preimages can later be used in the Cancel-Key header field to
  authenticate a cancel or supersede request.
</t>
<t>
  One property of this system is that it prevents tracking of individual users.
</t>
<t>
  There are other authentication systems available with different properties.
  When everybody should be able to verify who the originator is, e.g., for
  control articles to add or remove newsgroups (<xref target="RFC5537"/>
  Section&nbsp;5.2), an OpenPGP <xref target="RFC4880"/> signature is
  appropriate.
</t>

<section title="Conventions Used in This Document" anchor="conventions">
<t>
  Any term not defined in this document has the same meaning as it
  does in <xref target="RFC5536"/> or <xref target="RFC5537"/>.
</t>

  <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
  "SHALL&nbsp;NOT", "SHOULD", "SHOULD&nbsp;NOT", "RECOMMENDED",
  "NOT&nbsp;RECOMMENDED", "MAY", and "OPTIONAL" in this document
  are to be interpreted as described in BCP&nbsp;14
  <xref format="default" pageno="false" target="RFC2119"/>
  <xref format="default" pageno="false" target="RFC8174"/> when,
  and only when, they appear in all capitals, as shown here.</t>

</section>
</section>

<section title="Header Fields" anchor="headerfields">
<t>
   This section describes the formal syntax of the new header fields using
   ABNF <xref target="RFC5234"/>.
   Non-terminals not defined in this document are defined in
   Section&nbsp;3 of <xref target="RFC5536"/>.
</t>

<t>
   The new header fields Cancel-Lock and Cancel-Key are defined by this
   document, extending the list of article header fields defined in
   <xref target="RFC5536"/>.
</t>

<t>
   Each of these header fields MUST NOT occur more than once in an article.
</t>

<t>
  Both new header field bodies contain lists of encoded values. Every entry is
  based on a &lt;scheme&gt;:
</t>

<figure>
<artwork type="abnf">
   scheme       = "sha256" / "sha512" / 1*scheme-char / obs-scheme
   scheme-char  = ALPHA / DIGIT / "-" / "/"
</artwork>
</figure>

<t>
  The hash algorithms for &lt;scheme&gt;  are defined in <xref
  target="RFC6234"/>; see also <xref target="RFC1321"/> and <xref
  target="RFC6151"/> for MD5, <xref target="RFC3174"/> for SHA1, and
  <xref target="SHA"/> for the SHA2 family. The Base64 encoding used is
  defined in Section&nbsp;4 of <xref target="RFC4648"/>.
</t>

<t>
   This document defines two values for &lt;scheme&gt;: "sha256" and "sha512".
   The hash algorithm "sha256" is mandatory to implement.
</t>
<t>
   Because the hash algorithm for &lt;scheme&gt; cannot be negotiated,
   unnecessary proliferation of hash algorithms should be avoided.
   The hash algorithms "sha224" and "sha384" are only added to the
   "Netnews Cancel-Lock Hash Algorithms" registry
   (<xref target="registrationalg"/>) because implementations exist that
   support them. Implementations SHOULD NOT use the hash algorithms
   "sha224" and "sha384" to generate &lt;scheme&gt;.
</t>

<section title="Cancel-Lock" anchor="cancellock">
<figure>
<artwork type="abnf">
   cancel-lock     = "Cancel-Lock:" SP c-lock-list CRLF
   c-lock-list     = [CFWS] c-lock *(CFWS c-lock) [CFWS]
   c-lock          = scheme ":" c-lock-string
   c-lock-string   = *(4base64-char) [base64-terminal]
   base64-char     = ALPHA / DIGIT / "+" / "/"
   base64-terminal = 2base64-char "==" / 3base64-char "="
</artwork>
</figure>

<t>
   Comments in CFWS (comments and/or folding whitespace) can cause
   interoperability problems, so comments SHOULD NOT be generated
   but MUST be accepted.
</t>
<t>
   If &lt;scheme&gt; is not supported by an implementation, the corresponding
   &lt;c-lock&gt; element MUST be skipped and potential following
   &lt;c-lock&gt; elements MUST NOT be ignored.
</t>

<t>
   &lt;c-lock-string&gt; is the Base64-encoded output of a hash operation
   (defined by &lt;scheme&gt;) of the Base64-encoded key "K" that is intended
   to authenticate the person or agent that created or processed
   (respectively) the proto&nbhy;article up to injection (inclusively):
</t>

<figure>
<artwork>
   Base64(hash(Base64(K)))
</artwork>
</figure>

<t>
   Because of the one-way nature of the hash operation, the key "K" is not
   revealed.
</t>
</section>

<section title="Cancel-Key" anchor="cancelkey">
<figure>
<artwork type="abnf">
   cancel-key   = "Cancel-Key:" SP c-key-list CRLF
   c-key-list   = [CFWS] c-key *(CFWS c-key) [CFWS]
   c-key        = scheme ":" c-key-string
   c-key-string = c-lock-string / obs-c-key-string
</artwork>
</figure>

<t>
   Comments in CFWS can cause interoperability problems, so comments SHOULD NOT
   be generated but MUST be accepted.
</t>
<t>
   If &lt;scheme&gt; is not supported by an implementation, the corresponding
   &lt;c-key&gt; element MUST be skipped and potential following &lt;c-key&gt;
   elements MUST NOT be ignored.
</t>

<t>
   &lt;c-key-string&gt; is the Base64-encoded key "K" that was used to create
   the &lt;c-lock&gt; element in the Cancel-Lock header field body (as defined
   in <xref target="cancellock"/> of this document) of the original article:
</t>
<figure>
<artwork>
   Base64(K)
</artwork>
</figure>
<t>
   The relaxed syntax definition of &lt;c-key-string&gt; above is required for
   backward compatibility with implementations that are not compliant
   with this specification. Compliant implementations SHOULD generate
   valid Base64 (that is to say the syntax of &lt;c-lock-string&gt; as defined
   in <xref target="cancellock"/> of this document) and MUST accept strings of
   &lt;base64-octet&gt; characters (that is to say the syntax of
   &lt;obs&nbhy;c&nbhy;key&nbhy;string&gt; as defined
   in <xref target="obssyntax"/> of this document).
</t>
</section>
</section>

<section title="Use" anchor="use">
<t>
   Use cases:
   <list style="symbols">
   <t>
      The poster of an article wants to cancel or supersede existing articles.
   </t>
   <t>
      A moderator wants the ability to cancel articles after approving them.
   </t>
   <t>
      An injecting agent wants to act as a representative for a posting agent
      that has no support for the authentication system described in this
      document.
   </t>
   <t>
      A news administrator wants the ability to cancel articles that were
      injected by its system (because, for example, they violate its
      abuse policy).
   </t>
   </list>
</t>

<section title="Adding an Initial Cancel-Lock Header Field to a
Proto&nbhy;Article" anchor="generatelocks">
<t>
   A Cancel-Lock header field MAY be added to a proto-article by the poster or
   posting agent and will include one or more &lt;c-lock&gt; elements.
</t>
<t>
   If the poster or posting agent doesn't add a Cancel-Lock header field to a
   proto&nbhy;article, then an injecting agent (or moderator) MAY add one,
   including one or more &lt;c-lock&gt; elements.
</t>
<t>
   If multiple &lt;c-lock&gt; elements are added to the Cancel-Lock header
   field by a single agent, each &lt;c-lock&gt; element MUST use a unique
   key&nbsp;"K" to improve security.
</t>
<t>
   If an injecting agent (or moderator) wants to act as a representative for a
   posting agent without support for the authentication system described in
   this document, then it MUST be able to positively authenticate the poster
   and MUST be able to automatically add a working Cancel-Key header field
   for all proto&nbhy;articles with cancelling or superseding attempts from
   that poster.
</t>
<t>
   Other agents MUST NOT add this header field to articles or
   proto&nbhy;articles that they process.
</t>
</section>

<section title="Extending the Cancel-Lock Header Field of a Proto-Article"
         anchor="extendlocks">
<t>
   If a Cancel-Lock header field has already been added to a
   proto&nbhy;article, then any agent further processing the
   proto&nbhy;article up to the injecting agent (inclusively) MAY append
   additional &lt;c-lock&gt; elements to those already in the header field
   body.
</t>
<t>
   If multiple &lt;c-lock&gt; elements are appended to the Cancel-Lock header
   field by a single agent, each &lt;c-lock&gt; element MUST use a unique
   key&nbsp;"K" to improve security.
</t>
<t>
   If an injecting agent (or moderator) wants to act as a representative for a
   posting agent without support for the authentication system described in
   this document, then the same requirements apply as those mentioned in
   <xref target="generatelocks"/>.
</t>
<t>
   Once an article is injected, then this header field MUST NOT be altered. In
   particular, relaying agents beyond the injecting agent MUST NOT alter it.
</t>
</section>

<section title="Adding a Cancel-Key Header Field to a Proto-Article"
         anchor="generatekeys">
<t>
   The Cancel-Key header field contains one or more of the secret strings that
   were used to create the Cancel-Lock header field of the original article.
   Knowledge of at least one of the secret strings is required to create a
   match for successful authentication.
</t>
<t>
   A Cancel-Key header field MAY be added to a proto-article containing a
   Control or Supersedes header field by the poster or posting agent and
   will include one or more &lt;c-key&gt; elements. They will correspond to
   some or all of the &lt;c-lock&gt; elements in the article referenced by the
   Control (with a "cancel" command as defined in <xref target="RFC5537"/>) or
   Supersedes header field.
</t>
<t>
   If, as mentioned in <xref target="generatelocks"/>, an injecting agent
   or moderator (acting as a representative for the posting agent) has
   added a Cancel-Lock header field to an article listed in the Control
   (with a "cancel" command as defined in <xref target="RFC5537"/>) or
   Supersedes header field, then (given that it authenticates the poster as
   being the same as the poster of the original article) it MUST add the
   Cancel-Key header field with at least one &lt;c-key&gt; element that
   corresponds to that article.
</t>
<t>
   Other agents MUST NOT alter this header field.
</t>
</section>

<section title="Extending the Cancel-Key Header Field of a Proto-Article"
         anchor="extendkeys">
<t>
   If a Cancel-Key header field has already been added to a
   proto&nbhy;article, then any agent further processing the
   proto&nbhy;article up&nbsp;to the injecting agent (inclusively) MAY append
   additional &lt;c-key&gt; elements to those already in the header field body.
</t>
<t>
   If, as mentioned in <xref target="extendlocks"/>, an injecting agent
   or moderator (acting as a representative for the posting agent) has
   extended the Cancel&nbhy;Lock header field in an article listed in the
   Control (with a "cancel" command as defined in <xref target="RFC5537"/>)
   or Supersedes header field, then (given that it authenticates the poster as
   being the same as the poster of the original article) it MUST extend the
   Cancel&nbhy;Key header field body with at least one &lt;c-key&gt; element
   that corresponds to that article.
</t>
<t>
   Once an article is injected, then this header field MUST NOT be altered. In
   particular, relaying agents beyond the injecting agent MUST NOT alter it.
</t>
</section>

<section title="Check a Cancel-Key Header Field" anchor="checkkeys">
<t>
   When a relaying or serving agent receives an article that attempts to cancel
   or supersede a previous article via a Control (with a "cancel" command as
   defined in <xref target="RFC5537"/>) or Supersedes header field, the system
   defined in this document can be used for authentication.
   The general handling of articles containing such attempts as defined in
   <xref target="RFC5537"/> is not changed by this document.
</t>

<t>
   To process the authentication, the received article must contain a
   Cancel-Key header field and the original article must contain a
   Cancel-Lock header field. If this is not the case, the authentication is
   not possible (failed).
</t>

<t>
   For the authentication check, every supported &lt;c-key&gt; element from
   the received article is processed as follows:

   <list style="numbers">
   <t>
     The &lt;c-key-string&gt; part of the &lt;c-key&gt; element is hashed using
     the algorithm defined by its &lt;scheme&gt; part.
   </t>
   <t>
     For each &lt;c-lock&gt; element with the same &lt;scheme&gt; in the
     original article, its &lt;c-lock-string&gt; part is compared to the
     calculated hash.
   </t>
    <t>
     If a &lt;c-lock-string&gt; part is equal to the calculated hash,
     the authentication is passed and the processing of further elements
     can be aborted.
   </t>
   <t>
     If no match was found and there are no more &lt;c-key&gt; elements to
     process, the authentication failed.
    </t>
   </list>
</t>
</section>
</section>

<section title="Calculating the Key Data" anchor="keydata">
<t>
   The following algorithm is RECOMMENDED to calculate the key "K" based on
   a local secret &lt;sec&gt;.
</t>
<t>
   The result of the function
</t>
<figure>
<artwork>
   K = HMAC(sec, uid+mid)
</artwork>
</figure>
<t>
   is the key "K" for an article with a Message-ID &lt;mid&gt; that belongs
   to the User-ID (or UID) &lt;uid&gt; (e.g., the login name of the user).
   The Hashed Message Authentication Code (HMAC) is outlined in <xref
   target="RFC2104"/>. The HMAC is computed over the data &lt;uid+mid&gt;
   (with "+" representing the concatenation operation), using &lt;sec&gt; as a
   secret key held locally that can be used for multiple articles.
   This method removes the need for a per-article database containing the
   keys used for every article.
</t>

<t>
   A posting agent must add the Message-ID header field to the
   proto&nbhy;article itself and use the content of the header field body as
   &lt;mid&gt; (excluding whitespace but including literal angle brackets).
</t>

<t>
   The User-ID &lt;uid&gt; must not contain angle brackets (to ensure that
   concatenation of different &lt;uid&gt; and &lt;mid&gt; elements cannot give
   the same results).
</t>

<t>
   A posting agent that uses a dedicated local secret &lt;sec&gt; for every
   user should use an empty string for the &lt;uid&gt; part.
</t>

<t>
   In general, different values for the secret &lt;sec&gt; must be used if
   multiple &lt;c-lock&gt; elements are added by a single agent.
</t>

<t>
   The local secret &lt;sec&gt; should have a length of at least the output
   size of the hash function that is used by the HMAC
   (256&nbsp;bits&nbsp;/&nbsp;32&nbsp;octets for SHA256) and must be a
   cryptographically random value <xref target="RFC4086"/>.
</t>

<t>
   Note that the hash algorithm used as the base for the HMAC operation
   is not required to be the same as that specified by &lt;scheme&gt;.
   An agent that verifies a Cancel-Key header field body simply checks whether
   one of its &lt;c-key&gt; elements matches one of the &lt;c-lock&gt; elements
   with the same &lt;scheme&gt; in the Cancel-Lock header field body of the
   original article.
</t>

<t>
   Common libraries like OpenSSL can be used for the cryptographic operations.
</t>
</section>

<section title="Examples" anchor="examples">

<section title="Without UID" anchor="withoutuid">
<t>
   Example data for creation of a &lt;c-lock&gt; element with HMAC-SHA256 and
   an empty string as &lt;uid&gt; (as recommended in <xref target="keydata"/>
   for posting agents):
</t>
<figure>
<artwork>
   Message-ID: &lt;12345@mid.example&gt;
</artwork>
</figure>
<figure>
<artwork>
   mid: &lt;12345@mid.example&gt;
   sec: ExampleSecret
   K  : HMAC-SHA256(sec, mid) ;mid used as data, sec as secret key
</artwork>
</figure>
<t>
   Calculation of Base64(K) using the OpenSSL command-line tools in a POSIX
   shell:
</t>
<figure>
<artwork>
   $ printf "%s" "&lt;12345@mid.example&gt;" \
     | openssl dgst -sha256 -hmac "ExampleSecret" -binary \
     | openssl enc -base64
   qv1VXHYiCGjkX/N1nhfYKcAeUn8bCVhrWhoKuBSnpMA=
</artwork>
</figure>
<t>
   This can be used as &lt;c-key-string&gt; for cancelling or superseding the
   article &lt;12345@mid.example&gt;.
</t>
<t>
   Calculation of Base64(SHA256(Base64(K))) required for &lt;c-lock-string&gt;
   using the OpenSSL command-line tools in a POSIX shell:
</t>
<figure>
<artwork>
   $ printf "%s" "qv1VXHYiCGjkX/N1nhfYKcAeUn8bCVhrWhoKuBSnpMA=" \
     | openssl dgst -sha256 -binary \
     | openssl enc -base64
   s/pmK/3grrz++29ce2/mQydzJuc7iqHn1nqcJiQTPMc=
</artwork>
</figure>
<t>
   Inserted into the Cancel-Lock header field body of the article
   &lt;12345@mid.example&gt;, it looks like this:
</t>
<figure>
<artwork>
   Cancel-Lock: sha256:s/pmK/3grrz++29ce2/mQydzJuc7iqHn1nqcJiQTPMc=
</artwork>
</figure>
<t>
   Inserted into the Cancel-Key header field body of an article that should
   cancel or supersede the article &lt;12345@mid.example&gt;, it looks like
   this:</t>
<figure>
<artwork>
   Cancel-Key: sha256:qv1VXHYiCGjkX/N1nhfYKcAeUn8bCVhrWhoKuBSnpMA=
</artwork>
</figure>
</section>

<section title="With UID" anchor="withuid">
<t>
   Example data for creation of a &lt;c-lock&gt; element with HMAC-SHA256 and
   "JaneDoe" as &lt;uid&gt; (as recommended in <xref target="keydata"/>):
</t>
<figure>
<artwork>
   Message-ID: &lt;12345@mid.example&gt;
</artwork>
</figure>
<figure>
<artwork>
   uid: JaneDoe
   mid: &lt;12345@mid.example&gt;
   sec: AnotherSecret
   K  : HMAC-SHA256(sec, uid+mid) ;uid+mid as data, sec as secret key
</artwork>
</figure>
<t>
   Calculation of Base64(K) using the OpenSSL command-line tools in a POSIX
   shell:
</t>
<figure>
<artwork>
   $ printf "%s" "JaneDoe&lt;12345@mid.example&gt;" \
     | openssl dgst -sha256 -hmac "AnotherSecret" -binary \
     | openssl enc -base64
   yM0ep490Fzt83CLYYAytm3S2HasHhYG4LAeAlmuSEys=
</artwork>
</figure>
<t>
   This can be used as &lt;c-key-string&gt; for cancelling or superseding the
   article &lt;12345@mid.example&gt;.
</t>
<t>
   Calculation of Base64(SHA256(Base64(K))) required for &lt;c-lock-string&gt;
   using the OpenSSL command-line tools in a POSIX shell:
</t>
<figure>
<artwork>
   $ printf "%s" "yM0ep490Fzt83CLYYAytm3S2HasHhYG4LAeAlmuSEys=" \
     | openssl dgst -sha256 -binary \
     | openssl enc -base64
   NSBTz7BfcQFTCen+U4lQ0VS8VIlZao2b8mxD/xJaaeE=
</artwork>
</figure>
<t>
   Inserted into the Cancel-Lock header field body of the article
   &lt;12345@mid.example&gt;, it looks like this:
</t>
<figure>
<artwork>
   Cancel-Lock: sha256:NSBTz7BfcQFTCen+U4lQ0VS8VIlZao2b8mxD/xJaaeE=
</artwork>
</figure>
<t>
   Inserted into the Cancel-Key header field body of an article that should
   cancel or supersede the article &lt;12345@mid.example&gt;, it looks like
   this:</t>
<figure>
<artwork>
   Cancel-Key: sha256:yM0ep490Fzt83CLYYAytm3S2HasHhYG4LAeAlmuSEys=
</artwork>
</figure>
</section>

<section title="Other Examples" anchor="otherex">
<t>
   Another matching pair of Cancel-Lock and Cancel-Key header fields:
</t>
<figure>
<artwork>
   Cancel-Lock: sha256:RrKLp7YCQc9T8HmgSbxwIDlnCDWsgy1awqtiDuhedRo=
   Cancel-Key: sha256:sSkDke97Dh78/d+Diu1i3dQ2Fp/EMK3xE2GfEqZlvK8=
</artwork>
</figure>

<t>
   With obsolete syntax (uses a &lt;c-key-string&gt; with invalid/missing
   Base64 padding):
</t>
<figure>
<artwork>
   Cancel-Lock: sha1:bNXHc6ohSmeHaRHHW56BIWZJt+4=
   Cancel-Key: ShA1:aaaBBBcccDDDeeeFFF
</artwork>
</figure>

<t>
   Let's assume that all the examples above are associated to the same article
   (e.g., created by different agents):
</t>
<figure>
<artwork>
   Cancel-Lock: sha256:s/pmK/3grrz++29ce2/mQydzJuc7iqHn1nqcJiQTPMc=
                sha256:NSBTz7BfcQFTCen+U4lQ0VS8VIlZao2b8mxD/xJaaeE=
                sha256:RrKLp7YCQc9T8HmgSbxwIDlnCDWsgy1awqtiDuhedRo=
                sha1:bNXHc6ohSmeHaRHHW56BIWZJt+4=
   Cancel-Key: sha256:qv1VXHYiCGjkX/N1nhfYKcAeUn8bCVhrWhoKuBSnpMA=
               sha256:yM0ep490Fzt83CLYYAytm3S2HasHhYG4LAeAlmuSEys=
               sha256:sSkDke97Dh78/d+Diu1i3dQ2Fp/EMK3xE2GfEqZlvK8=
               ShA1:aaaBBBcccDDDeeeFFF
</artwork>
</figure>

<t>
   Remember that parsing for &lt;scheme&gt; must be case insensitive.
</t>

</section>

<section title="Manual Checks" anchor="manualchecks">
<t>
   Manual checks using the OpenSSL command-line tools in a POSIX shell:
</t>

<figure>
<artwork>
   $ printf "%s" "qv1VXHYiCGjkX/N1nhfYKcAeUn8bCVhrWhoKuBSnpMA=" \
     | openssl dgst -sha256 -binary \
     | openssl enc -base64
   s/pmK/3grrz++29ce2/mQydzJuc7iqHn1nqcJiQTPMc=

   $ printf "%s" "yM0ep490Fzt83CLYYAytm3S2HasHhYG4LAeAlmuSEys=" \
     | openssl dgst -sha256 -binary \
     | openssl enc -base64
   NSBTz7BfcQFTCen+U4lQ0VS8VIlZao2b8mxD/xJaaeE=

   $ printf "%s" "sSkDke97Dh78/d+Diu1i3dQ2Fp/EMK3xE2GfEqZlvK8=" \
     | openssl dgst -sha256 -binary \
     | openssl enc -base64
   RrKLp7YCQc9T8HmgSbxwIDlnCDWsgy1awqtiDuhedRo=

   $ printf "%s" "aaaBBBcccDDDeeeFFF" \
     | openssl dgst -sha1 -binary \
     | openssl enc -base64
   bNXHc6ohSmeHaRHHW56BIWZJt+4=
</artwork>
</figure>
</section>
</section>

<section title="Obsolete Syntax" anchor="obssyntax">
<t>
   Implementations of earlier draft versions of this specification defined a
   different value for &lt;scheme&gt; than this version.
   The following value for &lt;scheme&gt; is now deprecated and SHOULD NOT
   be generated anymore.
   Serving agents SHOULD still accept it for a transition period as long as
   the corresponding hash function is not considered unsafe (see
   <xref target="security"/> for details) or already marked as OBSOLETE in
   the "Netnews Cancel-Lock Hash Algorithms" registry
   (<xref target="registrationalg"/>).
</t>

<figure>
<artwork type="abnf">
   obs-scheme = "sha1"
</artwork>
</figure>

<t>
   It is important for backward compatibility that the deprecated value for
   &lt;scheme&gt; is not phased out too early. Security and compatibility
   concerns should be carefully weighed before choosing to remove 
   &lt;obs&nbhy;scheme&gt; from existing implementations (or not implementing
   it in new ones).
</t>

<t>
   Earlier draft versions of this specification allowed more liberal syntax
   for &lt;c-key-string&gt;:
</t>

<figure>
<artwork type="abnf">
   obs-c-key-string = 1*base64-octet
   base64-octet     = ALPHA / DIGIT / "+" / "/" / "="
</artwork>
</figure>

<t>
   &lt;obs-c-key-string&gt; SHOULD NOT be generated but MUST be accepted.
</t>
</section>

<section title="Security Considerations" anchor="security">
<t>
   The authentication system defined in this document provides no
   integrity-checking properties. Arbitrary modifications can be applied to an
   article on its way through the network, regardless of the presence of a
   Cancel-Key header field. A serving agent that receives an article that
   contains a Cancel-Key header field with a matching &lt;c-key&gt; element
   only gets the information that the withdrawal of the target article was
   approved by a legitimate person or agent.
</t>
<t>
   Example: A valid &lt;c-key&gt; element is extracted from a cancel control
   article and inserted into a forged supersede article. All servers on the
   network that receive the forged supersede article before the cancel control
   article should accept the forged supersede.
   But because everybody can post articles with forged identity information in
   the header (same as with spam email), the same result can be achieved by
   sending a forged new article using no authentication system at all.
</t>
<t>
   For originator and integrity checks, a signature-based authentication system
   is required (normally, OpenPGP <xref target="RFC4880"/> is used for this
   purpose). Both systems can be combined.
</t>

<t>
   The important property of the hash function used for &lt;scheme&gt; is
   the preimage resistance.
   A successful preimage attack either reveals the real Cancel-Key (that was
   used to create the Cancel-Lock of the original article) or gives a different
   Cancel-Key (that matches a Cancel-Lock too).
   This would break the authentication system defined in this document.
</t>

<t>
   Collision resistance of the hash function used for &lt;scheme&gt; is less
   important. Finding two &lt;c-key&gt; elements for the Cancel-Key header
   field that match to a &lt;c-lock&gt; element of an arbitrary Cancel-Lock
   header field is not helpful to break the authentication system defined in
   this document (if a specific article is defined as the target).
   Only collateral damage by arbitrary cancel or supersede is possible.
</t>

<t>
   Currently, there is no known practicable preimage and second preimage attack
   against the hash function SHA1. Therefore, there is no hurry to replace it.
   The reasons why this document specifies hash functions from the SHA2 family
   are:
   <list style="symbols">
   <t>
      The previous specification of the authentication system defined in this
      document -- <xref target="USEFOR-CANCEL-LOCK" /> -- is nearly
      two&nbsp;decades old. The client&nbhy;side implementations are moving
      forward extremely slowly, too (newsreaders from the last millennium are
      still in heavy use). What is defined today should be strong enough for
      the next two&nbsp;decades or so.
   </t>
   <t>
      The collision resistance of SHA1 is already broken; therefore, it is
      now obsolete for digital signatures as used in Transport Layer Security
      (TLS). It is intended that an implementation of the authentication
      system defined in this document can share the same cryptographic library
      functions that are used for TLS.
   </t>
   <t>
      It is intended that the same hash function can be used for &lt;scheme&gt;
      and (as the base) for the HMAC that is recommended in <xref
      target="keydata"/>. See notes below for HMAC-MD5 and HMAC-SHA1.
   </t>
   <t>
      The SHA2 family of hash algorithms is widely supported by cryptographic
      libraries. In contrast, SHA3 is currently too recent and has not been
      studied enough to be considered more secure than SHA2.
   </t>
   </list>
</t>

<t>
   The operation HMAC(sec, uid+mid) as recommended in <xref target="keydata"/>
   must be able to protect the local secret &lt;sec&gt;. The Message-ID
   &lt;mid&gt; is public (in the Message-ID header field body), and &lt;uid&gt;
   is optional. An attacker who wants to steal/use a local secret only needs
   to break this algorithm (regardless of &lt;scheme&gt;), because Cancel-Key
   header fields are explicitly published for every request to cancel or
   supersede existing articles.
</t>
<t>
   Even if HMAC-MD5 and HMAC-SHA1 are not considered broken today, it is
   desired to have a greater margin for security here. Breaking &lt;scheme&gt;
   only allows the authentication of a single forged cancel or supersede
   request. With &lt;sec&gt; in hand, it is possible to forge such requests
   for all articles that contain Cancel-Lock header field bodies with elements
   that were generated with this &lt;sec&gt; in the past. Changing &lt;sec&gt;
   at regular intervals can be used to mitigate potential damage.
</t>
<t>
  If an agent adds or appends multiple &lt;c-lock&gt; elements, it must not use
  the same K for them (by using different secrets (&lt;sec&gt;)).
  Adding multiple &lt;c-lock&gt; elements with the same &lt;scheme&gt; and
  the same K makes no sense (because it would result in identical
  &lt;c-lock&gt; elements); therefore, the case of different &lt;scheme&gt;
  values is relevant: a preimage attack on the different hash algorithms may
  be easier if the attacker knows that the output of those hash
  algorithms was created with the same input.
</t>
<t>
   If an implementation chooses to not implement the key calculation algorithm
   recommended in <xref target="keydata"/> or to implement it with the HMAC
   based on a different hash function than &lt;scheme&gt;, the key size used
   should match the output size of the hash function used for &lt;scheme&gt;.
</t>
</section>

<section title="IANA Considerations" anchor="iana">
<t>
   IANA has registered the following header fields in the "Permanent
   Message Header Field Names" registry, in accordance with the procedures
   set out in <xref target="RFC3864"/>:
</t>
<figure>
<artwork>
   Header field name: Cancel-Lock
   Applicable protocol: netnews
   Status: standard
   Author/change controller: IETF
   Specification document(s): RFC 8315
</artwork>
</figure>

<figure>
<artwork>
   Header field name: Cancel-Key
   Applicable protocol: netnews
   Status: standard
   Author/change controller: IETF
   Specification document(s): RFC 8315
</artwork>
</figure>

<t>
   The "Netnews Cancel-Lock Hash Algorithms" registry is maintained
   by IANA.
</t>
<t>
   The registry is available at
<vspace/>
   &lt;https://www.iana.org/assignments/netnews-parameters/&gt;.
</t>

<section title="Algorithm Name Registration Procedure" anchor="regproc">
<t>
   IANA will register new Cancel-Lock hash algorithm names on a First
   Come First Served basis, as defined in BCP 26 <xref target="RFC8126"/>.
   IANA has the right to reject obviously bogus registration requests but will
   perform no review of claims made in the registration form.
</t>
<t>
   Registration of a Netnews Cancel-Lock hash algorithm is requested by
   filling in the following template and sending it via electronic mail
   to IANA at &lt;iana@iana.org&gt;:
</t>
<figure>
<artwork>
   Subject: Registration of Netnews Cancel-Lock hash algorithm X
   Netnews Cancel-Lock hash algorithm name:
   Security considerations:
   Published specification (recommended):
   Contact for further information:
   Intended usage: (One of COMMON, LIMITED USE, or OBSOLETE)
   Owner/Change controller:
   Note: (Any other information that the author deems relevant may be
      added here.)
</artwork>
</figure>
<t>
  Any name that conforms to the syntax of a Netnews Cancel-Lock hash algorithm
  (see the definition of &lt;scheme&gt; in <xref target="headerfields"/>) can
  be used; in particular, Netnews Cancel-Lock algorithms are named by strings
  consisting of letters, digits, hyphens, and/or slashes.
</t>
<t>
  Authors may seek community review by posting a specification of their
  proposed algorithm as an Internet-Draft. Netnews Cancel-Lock hash algorithms
  intended for widespread use should be standardized through the normal IETF
  process, when appropriate.
</t>
<t>
  The IESG is considered to be the owner of all Netnews Cancel-Lock hash
  algorithms that are on the IETF Standards Track.
</t>
</section>

<section title="Change Control" anchor="changectrl">
<t>
   Once a Netnews Cancel-Lock hash algorithm registration has been published by
   IANA, the owner may request a change to its definition. The change request
   follows the same procedure as the initial registration request.
</t>
<t>
   The owner of a Netnews Cancel-Lock hash algorithm may pass responsibility
   for the algorithm to another person or agency by informing IANA; this can be
   done without discussion or review.
</t>
<t>
   The IESG may reassign responsibility for a Netnews Cancel-Lock hash
   algorithm. The most common reason for this would be to enable changes to
   be made to algorithms where the owner of the registration has died,
   has moved out of contact, or is otherwise unable to make changes that
   are important to the community.
</t>
<t>
   Netnews Cancel-Lock hash algorithm registrations MUST NOT be deleted.
   Algorithms that are no longer believed appropriate for use can be
   declared OBSOLETE by a change to their "intended usage" field; such
   algorithms will be clearly marked in the registry published by IANA.
</t>
<t>
   The IESG is considered to be the owner of all Netnews Cancel-Lock hash
   algorithms that are on the IETF Standards Track.
</t>
</section>


<section title="Registration of the Netnews Cancel-Lock Hash Algorithms"
         anchor="registrationalg">
<t>
   This section gives a formal definition of the Netnews Cancel-Lock hash
   algorithms as required by <xref target="regproc"/> for the IANA
   registry.
</t>

<figure>
<artwork>
   Netnews Cancel-Lock hash algorithm name: md5
   Security considerations: See Section 7 of this document
   Published specification: RFC 8315
   Contact for further information: Author of this document
   Intended usage: OBSOLETE
   Owner/Change controller: IESG &lt;iesg@ietf.org&gt;
   Note: Do not use this algorithm anymore
</artwork>
</figure>

<figure>
<artwork>
   Netnews Cancel-Lock hash algorithm name: sha1
   Security considerations: See Section 7 of this document
   Published specification: RFC 8315
   Contact for further information: Author of this document
   Intended usage: LIMITED USE
   Owner/Change controller: IESG &lt;iesg@ietf.org&gt;
   Note: This algorithm is intended for backward compatibility
</artwork>
</figure>

<figure>
<artwork>
   Netnews Cancel-Lock hash algorithm name: sha224
   Security considerations: See Section 7 of this document
   Published specification: RFC 8315
   Contact for further information: Author of this document
   Intended usage: LIMITED USE
   Owner/Change controller: IESG &lt;iesg@ietf.org&gt;
   Note: sha256 should be used instead; this is a truncated variant
</artwork>
</figure>

<figure>
<artwork>
   Netnews Cancel-Lock hash algorithm name: sha256
   Security considerations: See Section 7 this document
   Published specification: RFC 8315
   Contact for further information: Author of this document
   Intended usage: COMMON
   Owner/Change controller: IESG &lt;iesg@ietf.org&gt;
   Note: This algorithm is mandatory to implement
</artwork>
</figure>

<figure>
<artwork>
   Netnews Cancel-Lock hash algorithm name: sha384
   Security considerations: See Section 7 of this document
   Published specification: RFC 8315
   Contact for further information: Author of this document
   Intended usage: LIMITED USE
   Owner/Change controller: IESG &lt;iesg@ietf.org&gt;
   Note: sha512 should be used instead; this is a truncated variant
</artwork>
</figure>

<figure>
<artwork>
   Netnews Cancel-Lock hash algorithm name: sha512
   Security considerations: See Section 7 of this document
   Published specification: RFC 8315
   Contact for further information: Author of this document
   Intended usage: COMMON
   Owner/Change controller: IESG &lt;iesg@ietf.org&gt;
   Note: This algorithm is optional
</artwork>
</figure>
</section>
</section>

</middle>

<back>

<references title="Normative References">
&rfc2119;
&rfc3864;
&rfc4086;
&rfc4648;
&rfc5234;
&rfc5536;
&rfc5537;
&rfc6234;
&rfc8126;
&rfc8174;
</references>

<references title="Informative References">
&rfc1321;
&rfc2104;
&rfc3174;
&rfc4880;
&rfc6151;

<reference anchor="SHA" target="http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf">
<front>
   <title>
      Secure Hash Standard (SHS)
   </title>
   <author>
      <organization abbrev="NIST">
         National Institute of Standards and Technology
      </organization>
   </author>
   <date month="August" year="2015"/>
</front>
<seriesInfo name="FIPS" value="180-4, DOI 10.6028/NIST.FIPS.180-4"/>
<format type="PDF"
        target="http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf"/>
</reference>

<!-- draft-ietf-usefor-cancel-lock (replaced by this doc.) -->
<reference anchor="USEFOR-CANCEL-LOCK">
<front>
   <title>Cancel-Locks in Usenet articles.</title>
   <author initials="S." surname="Lyall" fullname="Simon Lyall" />
   <date month="November" year="1998" />
</front>
<seriesInfo name="Work in Progress," value="draft-ietf-usefor-cancel-lock-01"/>
</reference>
</references>

<section title="Acknowledgements" anchor="acknowledgements" numbered="no">
<t>
  The author acknowledges the original author of the Cancel-Lock authentication
  system, as documented in <xref target="USEFOR-CANCEL-LOCK" />: Simon Lyall.
  Simon wrote the
  original document and approved the usage of his work for this document. This
  document is mostly based on his work. (It was originally intended as
  revision&nbsp;02 but was renamed because the
  USEFOR IETF WG is now closed.)
</t>
<t>
  The author would like to thank the following individuals for contributing
  their ideas and reviewing this specification: Russ Allbery, Urs Janssen,
  Richard Kettlewell, Marcel Logen, Holger Marzen, Dennis Preiser, and
  Emil Schuster. Thanks also to Peter Faust and Alfred Peters for providing
  statistical data about the algorithms currently in use.
</t>
<t>
  Special thanks to the Document Shepherd, Julien Elie; and to the
  responsible Area Director, Alexey Melnikov.
</t>
</section>

</back>
</rfc>
