<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc strict="yes"?>
<?rfc symrefs="yes"?>
<?rfc linkmailto="no"?>
<rfc number="8437" ipr="trust200902" category="std" updates="3501" consensus="yes" submissionType="IETF">
<front>
<title abbrev="IMAP UNAUTHENTICATE for Connection Reuse">IMAP UNAUTHENTICATE Extension for Connection Reuse</title>
<author initials="C." surname="Newman" fullname="Chris Newman">
 <organization>Oracle</organization>
 <address>
  <postal>
   <street>440 E. Huntington Dr., Suite 400</street>
   <city>Arcadia</city>
   <region>CA</region>
   <code>91006</code>
   <country>United States of America</country>
  </postal>
  <email>chris.newman@oracle.com</email>
 </address>
</author>
<date month="August" year="2018" />
<area>Applications</area>

<abstract><t>
This specification extends the Internet Message Access Protocol (IMAP)
to allow an administrative client to reuse the same IMAP connection on
behalf of multiple IMAP user identities.



</t></abstract>
</front>
<middle>
<section title="Introduction">
<t>
Modern IMAP <xref target="RFC3501"/> server deployments often have peer
systems with administrative privilege that perform actions on behalf of
IMAP end users. For example, a voicemail gateway can use IMAP to store
a user's voicemail and mark that voicemail as \Seen when the user
listens to it via the phone interface. These systems can issue the IMAP
AUTHENTICATE command with administrative credentials to act on behalf of
other users.

However, with the IMAP base specification, these
specialized IMAP clients must close the connection and create a new
connection for each user. For efficiency reasons, it is desirable for
these clients to reuse the same connection, particularly if SSL has been
negotiated. This specification proposes the UNAUTHENTICATE command to
achieve this goal.
</t><t>
The IMAP state machine described in Section 3 of RFC 3501 does not
have a transition from authenticated or selected state to not
authenticated state. The UNAUTHENTICATE command adds this transition.

</t>
</section>

<section title="Conventions Used in This Document">
        <t>
    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
    "MAY", and "OPTIONAL" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>

</section>

<section title="UNAUTHENTICATE Command">
<t><list style="hanging" hangIndent="12">
<t hangText="Arguments:">None</t>
<t hangText="Responses:">No specific response for this command</t>
<t hangText="Result:">OK - Completed, now in not authenticated state<vspace/>BAD - Command unknown or arguments invalid</t>
</list>
This command directs the server to reset all connection state except for the state of the TLS <xref
target="RFC8446"/> layer. Upon completion, the server connection is
placed in not authenticated state. This represents Transition <xref
format="counter" target="unauth-trans"/> in the <xref
target="state-machine">State Machine Diagram</xref>.</t>
<t>
If a mailbox was selected, the mailbox ceases to be selected, but no
expunge event is generated. If a Simple Authentication and Security Layer (SASL) <xref target="RFC4422"/>  was active, the server terminates its outgoing security layer
immediately after sending the CRLF following the OK response. The
client's outgoing security layer terminates immediately after the CRLF
following the UNAUTHENTICATE command. Note that a BAD response only
occurs if UNAUTHENTICATE is issued in an invalid state, is not
advertised by the server, or does not follow the command syntax in the
specification. A NO response is not permitted. As a result,
specification-compliant implementations will interoperate across
security layer termination.
</t>
<t>
After sending this command, the client is free to issue a new
AUTHENTICATE or LOGIN command as permitted based on the server's
capabilities. If no SASL security layer was active, the client is
permitted to pipeline the UNAUTHENTICATE command with a subsequent
AUTHENTICATE command. If the IMAP server also advertises SASL-IR <xref
target="RFC4959"/>, this permits an administrative client to
re-authenticate in one round trip. Because of this pipelining
optimization, a server advertising UNAUTHENTICATE is not permitted to
respond to the UNAUTHENTICATE command with a NO response if it is unable
to reset the state associated with the connection. Servers MAY close the connection
with an untagged BYE response if this preferably rare situation occurs.
</t>
<t>Servers MAY choose to advertise the UNAUTHENTICATE capability only after
authentication has completed. As a result, clients may need to issue an IMAP
CAPABILITY command after authentication in order to determine the
availability of UNAUTHENTICATE.</t>
<t>The IMAP ID <xref target="RFC2971"/> command provides properties
about the client primarily for use in server log or audit files. Because
IMAP ID is not related to application authentication or user identity in
any way, and caching it for the duration of the client connection can be
useful, the interaction between IMAP ID and the UNAUTHENTICATE command
is defined by the implementation.</t>
</section>

<section title="Interactions">
<t>This section describes interactions between this extension and other IMAP extensions or usage models.</t>

<section title="Stateful Extensions">
<t>The connection state for the following list of IMAP extensions MUST
be reset if both a) the specified extension is advertised and b) the
UNAUTHENTICATE command is advertised and used. This list may not be
complete; the requirement to reset the connection state applies to all
current and future extensions except STARTTLS and ID. Additional
requirements apply to specific stateful extensions as follows:
<list style="symbols">
<t>Cached identity information, such as group memberships, that are used to evaluate access control lists <xref target="RFC4314"/> MUST be reset.</t>
<t>After an UNAUTHENTICATE command is issued, CONDSTORE servers <xref
target="RFC7162"/> MUST behave as if no CONDSTORE-enabling command was issued.</t>
<t>If IMAP COMPRESS <xref target="RFC4978"/> is active, the server
terminates its outgoing compression layer after it sends the CRLF
following the OK response. The client terminates its outgoing
compression layer after the CRLF following the UNAUTHENTICATE command.
When it matters, the compression layer terminates before a SASL
layer terminates.</t>
<t>Any extensions enabled by the IMAP ENABLE <xref target="RFC5161"/> command cease to be enabled when the UNAUTHENTICATE command is issued. This includes, but is not limited to, CONDSTORE <xref target="RFC7162"/>, QRESYNC <xref target="RFC7162"/>, METADATA <xref target="RFC5464"/>, METADATA-SERVER <xref target="RFC5464"/>, and UTF8=ACCEPT <xref target="RFC6855"/>.</t>
<t>A server advertising SEARCHRES <xref target="RFC5182"/> discards any saved search results so that '$' subsequently represents the empty set.</t>
<t>A server advertising LANGUAGE <xref target="RFC5255"/> will revert to the "i-default" language.</t>
<t>When a server advertises CONTEXT=SEARCH or CONTEXT=SORT <xref target="RFC5267"/>, the UNAUTHENTICATE command includes an implicit CANCELUPDATE for all server contexts.</t>
<t>When a server advertises NOTIFY <xref target="RFC5465"/>, the
UNAUTHENTICATE command cancels the server state related to the NOTIFY command and reverts to default IMAP base-specification behavior for notifications.</t>
</list></t>
</section>

<section title="Client Certificates, SASL EXTERNAL, and imaps">
<t>When a TLS <xref target="RFC8446"/> security layer is negotiated using
either the STARTTLS command or the imaps port <xref
target="RFC8314"/>, IMAP servers may be configured to request a client
certificate, and IMAP clients may provide one. Client credentials at the
TLS layer do not normally impact the application layer; however, they do have
an impact when
the SASL EXTERNAL mechanism <xref target="RFC4422"/> in an IMAP
AUTHENTICATE command is used to direct the server to use the provided
client certificate to authenticate as the specified IMAP user. The
UNAUTHENTICATE command breaks any application-level binding of the TLS
client credentials but does not discard the client credentials. As a
result, an administrative client may use a client certificate with
administrative privilege to act on behalf of multiple IMAP users in the
same connection via the EXTERNAL mechanism and the UNAUTHENTICATE
command.</t>
<t>Some server implementations using the imaps port will request and use
a TLS client certificate to authenticate immediately as the default IMAP
identity associated with that certificate. These implementations
indicate this behavior by using the PREAUTH greeting, as indicated by
Transition <xref target="preauth" format="counter"/> in the <xref
target="state-machine">State Machine Diagram</xref>. As a result, TLS
client certificates cannot be used for administrative proxy
authentication with the imaps port unless the UNAUTHENTICATE command is
also advertised. In that case, an administrative client can respond to
the PREAUTH greeting with an UNAUTHENTICATE command and then issue an
AUTHENTICATE EXTERNAL command.</t>
</section>
</section>

<section anchor="state-machine" title="Revised State Machine">
<figure>
<artwork>
                   +----------------------+
                   |connection established|
                   +----------------------+
                              ||
                              \/
            +--------------------------------------+
            |          server greeting             |
            +--------------------------------------+
                      || (1)       || (2)        || (3)
                      \/           ||            ||
            +-----------------+    ||            ||
            |Not Authenticated|&lt;===||=========++ ||
            +-----------------+    ||     (7) || ||
             || (8)   || (4)       ||         || ||
             ||       \/           \/         || ||
             ||     +----------------+        || ||
             ||     |                |========++ ||
             ||     | Authenticated  |&lt;=++    || ||
             ||     +----------------+  ||    || ||
             ||       || (8)   || (5)   ||(6) || ||
             ||       ||       \/       ||    || ||
             ||       ||    +--------+  ||    || ||
             ||       ||    |Selected|==++    || ||
             ||       ||    |        |========++ ||
             ||       ||    +--------+           ||
             ||       ||       || (8)            ||
             \/       \/       \/                \/
            +--------------------------------------+
            |               Logout                 |
            +--------------------------------------+
                              ||
                              \/
                +-------------------------------+
                |both sides close the connection|
                +-------------------------------+
</artwork>
</figure>
<t>Revised IMAP state machine transitions:
<list style="numbers">
<t>Connection without pre-authentication (OK greeting)</t>
<t anchor="preauth">Pre-authenticated connection (PREAUTH greeting)</t>
<t>Rejected connection (BYE greeting)</t>
<t>Successful LOGIN or AUTHENTICATE command</t>
<t>Successful SELECT or EXAMINE command</t>
<t>CLOSE, UNSELECT <xref target="RFC3691"/>, or failed SELECT or EXAMINE command</t>
<t anchor="unauth-trans">UNAUTHENTICATE command</t>
<t>LOGOUT command, server shutdown, or connection closed</t>
</list>
</t>
</section>

<section title="Formal Syntax">
<t>The following syntax specification uses the Augmented Backus-Naur
Form (ABNF), as described in <xref target="RFC5234"/>. Amended terms are
defined in <xref target="RFC3501"/>.</t>
<figure>
<artwork type="ABNF">
  capability     =/ "UNAUTHENTICATE"

  command-auth   =/ "UNAUTHENTICATE"

  command-select =/ "UNAUTHENTICATE"
</artwork>
</figure>
</section>

<section title="IANA Considerations">
<t>
IANA has added the UNAUTHENTICATE capability to the "IMAP Capabilities" registry.
</t>
</section>

<section title="Security Considerations">
<t>
The original IMAP state machine was designed to allow a server-implementation approach in which each IMAP authentication identity matches
an operating system identity and the server revokes all administrative
privilege once authentication completes. This extension is not
compatible with that implementation approach. However, that approach has
significant performance costs on Unix systems, and this extension is
designed for environments where efficiency is a relatively high-priority
deployment goal. This extension is therefore appropriate for some deployments
but may not be appropriate for the most security-sensitive environments.
</t>
<t>

IMAP server implementations are complicated and can retain a lot of
state related to an authenticated user. Server implementers need to
take care to reset all server state such that authentication as a
subsequent user does not inherit any data or privileges from the
previous user. State data associated with a user can include cached
identity information such as group membership used to evaluate access
control lists <xref target="RFC4314"/>, active notifications
<xref target="RFC5465"/>, access to per-user data such as flags, etc.
</t>
<t>
IMAP server systems are often deployed in a two-tier model where a
server-side IMAP proxy routes to an IMAP backend that handles all
connections for a subset of possible users. Some IMAP proxies enter a
pass-through mode after authentication. If enabled, the UNAUTHENTICATE command would allow a client, on a subsequent authentication, to bypass any security restrictions
present in the proxy layer but not in the backend server layer. As a result, IMAP server implementations of
this extension MUST provide a way to disable it when it is not needed.
Use of an IMAP proxy that processes the UNAUTHENTICATE command at the
proxy layer eliminates this concern. Another option to mitigate this
concern is for servers to only enable the UNAUTHENTICATE extension if
the supplied authentication credentials are associated with an
administrative identity.
</t>
</section>

<section title="Privacy Considerations">
<t>For the most part, this extension will have no impact on the privacy
considerations already present in an IMAP implementation. However, if
this extension were used between data centers, it could improve end-user
privacy by increasing the difficultly of traffic analysis due to
connection reuse.</t>
</section>

</middle>
<back>
<references title="Normative References">
<?rfc include="reference.RFC.2119"?> <!-- Key words -->
<?rfc include="reference.RFC.3501"?> <!-- IMAP -->
<?rfc include="reference.RFC.5234"?> <!-- ABNF -->
<?rfc include="reference.RFC.8174"?> <!-- Key words Update -->
</references>
<references title="Informative References">
<?rfc include="reference.RFC.2971"?> <!-- IMAP ID -->
<?rfc include="reference.RFC.3691"?> <!-- IMAP UNSELECT -->
<?rfc include="reference.RFC.4422"?> <!-- SASL -->
<?rfc include="reference.RFC.4314"?> <!-- IMAP ACL -->
<?rfc include="reference.RFC.4959"?> <!-- IMAP SASL-IR -->
<?rfc include="reference.RFC.4978"?> <!-- IMAP COMPRESS -->
<?rfc include="reference.RFC.5161"?> <!-- IMAP ENABLE -->
<?rfc include="reference.RFC.5182"?> <!-- IMAP SAVE SEARCH -->
<?rfc include="reference.RFC.8446"?> <!-- TLS 1.3 -->
<?rfc include="reference.RFC.5255"?> <!-- IMAP I18N -->
<?rfc include="reference.RFC.5267"?> <!-- IMAP CONTEXT -->
<?rfc include="reference.RFC.5464"?> <!-- IMAP METADATA -->
<?rfc include="reference.RFC.5465"?> <!-- IMAP NOTIFY -->
<?rfc include="reference.RFC.6855"?> <!-- IMAP UTF8 -->
<?rfc include="reference.RFC.7162"?> <!-- IMAP CONDSTORE/QRESYNC -->
<?rfc include="reference.RFC.8314"?> <!-- imaps/TLS -->
</references>
<section anchor="design" title="Design Considerations">
<t>
The author deliberately chose to add a separate UNAUTHENTICATE
command instead of allowing the LOGIN or AUTHENTICATE commands to be
issued when the connection is in a state other than unauthenticated. The primary reason for this choice is that the code that
transitions from not authenticated state to authenticated state in a
server is often the most security-sensitive code, because it needs to assume
and handle unconditionally hostile attackers. That sensitive code
is simpler if it only handles a single server state (unauthenticated)
and the state transition is as simple as possible. Smaller and simpler
code is easier to audit and write in a secure way.
</t><t>
A secondary reason to have a separate command is that it is simpler to
enable or disable the feature with that design. See the discussion in
the Security Considerations section recommending that implementations provide
a way to disable this extension.
</t>
</section>
<section title="Acknowledgements" numbered="no">
<t>Thanks to Fred Batty for implementing UNAUTHENTICATE and to Cyrus
Daboo for constructive suggestions to improve this document.</t>
</section>
</back>
</rfc>
