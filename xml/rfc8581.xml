<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.2119.xml'>
<!ENTITY RFC8174 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.8174.xml'>
<!ENTITY RFC2234 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.2234.xml'>
<!ENTITY RFC3588 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.3588.xml'>
<!ENTITY RFC4005 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.4005.xml'>
<!ENTITY RFC4072 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.4072.xml'>
<!ENTITY RFC3748 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.3748.xml'>
<!ENTITY RFC4282 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.4282.xml'>
<!ENTITY RFC4284 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.4284.xml'>
<!ENTITY RFC4283 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.4283.xml'>
<!ENTITY RFC2486 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.2486.xml'>
<!ENTITY RFC2865 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.2865.xml'>
<!ENTITY RFC5113 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.5113.xml'>
<!ENTITY RFC1034 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.1034.xml'>
<!ENTITY RFC1035 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.1035.xml'>
<!ENTITY RFC3490 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.3490.xml'>
<!ENTITY RFC6408 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.6408.xml'>
<!ENTITY RFC6733 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.6733.xml'>
<!ENTITY RFC5226 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.5226.xml'>
<!ENTITY RFC4006 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.4006.xml'>
<!ENTITY RFC7068 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.7068.xml'>
<!ENTITY RFC7683 PUBLIC '' 'https://www.rfc-editor.org/refs/bibxml/reference.RFC.7683.xml'>
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc iprnotified="no" ?>
<?rfc strict="no" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc number="8581" submissionType="IETF" category="std" consensus="yes" ipr="trust200902" updates="7683">
  <front>
    <title abbrev="Diameter Agent Overload and Peer Report">Diameter Agent Overload and the Peer
    Overload Report</title>
    <author initials="S" surname="Donovan" fullname="Steve Donovan">
      <organization>Oracle</organization>
      <address>
        <postal>
          <street>7460 Warren Parkway, Suite 300</street>
          <city>Frisco</city>
          <region>Texas</region>
          <code>75034</code>
          <country>United States of America</country>
        </postal>
        <email>srdonovan@usdonovans.com</email>
      </address>
    </author>
    <date month="August" year="2019"/>
    <area>Operations and Management</area>
    <workgroup>Diameter Maintenance and Extensions (DIME)</workgroup>

    <keyword>Diameter, Overload</keyword>

    <abstract>
      <t>
       This specification documents an extension to the Diameter Overload
       Indication Conveyance (DOIC), a base solution for Diameter overload defined
       in RFC 7683. The extension defines the Peer Overload report type.  The
       initial use case for the peer report is
       the handling of occurrences of overload of a
       Diameter Agent.
      </t>
    </abstract>

  </front>

  <middle>

    <section title="Introduction" anchor="intro">
      <t>
        This specification documents an extension to the Diameter Overload
        Indication Conveyance (DOIC), a base solution for Diameter overload
	<xref target="RFC7683"/>. The extension
        defines the Peer Overload report type.  The initial use case for the
        peer report is the handling of occurrences of overload of a Diameter
        Agent.
      </t>


<t>
      This document defines the behavior of Diameter nodes when Diameter Agents
      enter an overload condition and send an Overload report requesting
      a reduction of traffic.  It also defines a new Overload report type, the Peer
      Overload report type, which is used for handling agent overload conditions.  The
      Peer Overload report type is defined in a generic fashion so that it
      can also be used for other Diameter overload scenarios.
    </t>

 <t>
      The base Diameter overload specification <xref target="RFC7683"/> addresses the
      handling of overload when a Diameter
      endpoint (a Diameter Client or Diameter Server as defined in <xref
      target="RFC6733"/>) becomes overloaded.</t>
    <t>
      In the base specification, the goal is to handle abatement of the overload
      occurrence as close to the source
      of the Diameter traffic as feasible.  When possible, this is done at the
      originator of the traffic, generally referred to as a Diameter Client.
      A Diameter Agent might also handle the overload mitigation.
      For instance, a Diameter Agent might handle Diameter overload mitigation
      when it knows that a Diameter Client does not support the DOIC extension.
    </t>
    <t>
      This document extends the base Diameter endpoint overload specification to
      address the case when Diameter Agents become overloaded.  Just as is the
      case with other Diameter nodes, i.e., Diameter Clients and Diameter
      Servers, surges in Diameter traffic can cause a Diameter Agent
      to be asked to handle more Diameter traffic than it was configured to handle.
      For a more detailed discussion of what can cause the
      overload of Diameter nodes, refer to the Diameter overload
      requirements <xref target="RFC7068"/>.</t>


<t>
      This document defines a new Overload report type to communicate occurrences
      of agent overload.  This report type works for the Diameter overload
      loss abatement algorithm defined
      in <xref target="RFC7683"/> and is expected to work for other
      overload abatement algorithms defined in extensions to the DOIC solution.
    </t>



 </section>


 <section title="Requirements Language">

        <t>
    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
    "MAY", and "OPTIONAL" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/>
    when, and only when, they appear in all capitals, as shown here.
        </t>


  </section>
    <section title="Terminology and Abbreviations" anchor="abbrev">

<t>
      <list style="hanging">
      <t hangText="AVP">
      <vspace blankLines="1"/>
        Attribute-Value Pair
      </t>
        <t hangText="Diameter Node">
        <vspace blankLines="1"/>
   A Diameter Client, Diameter Server, or Diameter Agent <xref target="RFC6733"/>
        </t>
        <t hangText="Diameter Endpoint">
        <vspace blankLines="1"/>
   A Diameter Client or Diameter Server <xref target="RFC6733"/>

        </t>
        <t hangText="Diameter Agent">
        <vspace blankLines="1"/>
   A Diameter node that provides relay, proxy, redirect, or translation
   services <xref target="RFC6733"/>

        </t>
        <t hangText="Reporting Node">
        <vspace blankLines="1"/>
          A DOIC node that sends an Overload report in a Diameter answer message
        </t>
        <t hangText="Reacting Node">
        <vspace blankLines="1"/>
          A DOIC node that receives and acts on a DOIC Overload report
        </t>
        <t hangText="DOIC Node">
        <vspace blankLines="1"/>
          A Diameter node that supports the DOIC solution defined
          in <xref target="RFC7683"/>
        </t>
      </list>
      </t>
    </section>

    <section title="Peer-Report Use Cases">
      <t>
        This section outlines representative use cases for the peer report
        used to communicate agent overload.
      </t>
      <t>
        There are two primary classes of use cases currently identified:
        those involving the overload of agents, and those involving the overload
        of Diameter endpoints.  In both cases, the goal is to use an overload
        algorithm that controls traffic sent towards peers.
      </t>

      <section title="Diameter Agent Overload Use Cases" anchor="uc-agents">
        <t>
        The peer report needs to support the use cases described below.
        </t>
        <t>
          In the figures in this section, elements labeled "c" are Diameter Clients,
          elements labeled "a" are Diameter Agents, and elements labeled "s" are
          Diameter Servers.
        </t>
        <section title="Single Agent" anchor="singleagent">
          <t>
            This use case is illustrated in <xref target="usecase1" />.
            In this case, the client sends
            all traffic through the single agent.  If there is a failure in the
            agent, then the client is
            unable to send Diameter traffic toward the server.
          </t>
          <t>
          <figure anchor="usecase1">
          <artwork align="center"><![CDATA[
   +-+    +-+    +-+
   |c|----|a|----|s|
   +-+    +-+    +-+
]]>
          </artwork>
          </figure>
          </t>
          <t>
            A more likely case for the use of agents is illustrated in
            <xref target="usecase2" />.
            In this case, there are multiple servers behind the single agent.
            The client sends
            all traffic through the agent, and the agent determines how to
            distribute the traffic
            to the servers based on local routing and load distribution policy.
          </t>
          <t>
          <figure anchor="usecase2">
          <artwork align="center"><![CDATA[
                 +-+
               --|s|
   +-+    +-+ /  +-+
   |c|----|a|-   ...
   +-+    +-+ \  +-+
               --|s|
                 +-+
]]>
          </artwork>
          </figure>
          </t>

          <t>
            In both of these cases, the occurrence of overload in the single agent must
            by handled by the client similarly to as if the client were handling
            the overload of a directly connected server.  When the agent becomes overloaded,
            it will insert an Overload report in answer messages flowing to the client.
            This Overload report will contain a requested reduction in the amount of
            traffic sent to the agent. The client will apply overload abatement behavior
            as defined in the base Diameter overload specification
            <xref target="RFC7683"/> or in the extension document that defines the
            indicated overload abatement algorithm.
            This will result in the throttling of the abated traffic
            that would have been sent to the agent, as there is no alternative
            route. The client sends an appropriate error response to the originator of the request.
          </t>
        </section>
        <section title="Redundant Agents" anchor="redundantagents">
          <t>
            <xref target="usecase3" /> and <xref target="usecase4" /> illustrate a second,
            and more likely, type of deployment scenario
            involving agents.  In both of these cases, the client has Diameter
            connections to two agents.
          </t>
          <t>
            <xref target="usecase3" /> illustrates a client that has a primary connection
            to one of the agents (agent a1) and a secondary connection to the other agent
            (agent a2).  In this scenario, under normal circumstances, the client will
            use the primary connection for all traffic.  The secondary connection is
            used when there is a failure scenario of some sort.
          </t>
          <t>
          <figure  anchor="usecase3">
          <artwork align="center"><![CDATA[
          +--+   +-+
        --|a1|---|s|
   +-+ /  +--+\ /+-+
   |c|-        x
   +-+ .  +--+/ \+-+
        ..|a2|---|s|
          +--+   +-+
]]>

          </artwork>
          </figure>
          </t>
          <t>
            The second case, in <xref target="usecase4" />, illustrates the case where the
            connections to the agents are both actively used.  In this case, the client
            will have local distribution policy to determine
            the traffic sent through each client.
          </t>
          <t>
          <figure  anchor="usecase4">
          <artwork align="center"><![CDATA[
          +--+   +-+
        --|a1|---|s|
   +-+ /  +--+\ /+-+
   |c|-        x
   +-+ \  +--+/ \+-+
        --|a2|---|s|
          +--+   +-+
]]>
          </artwork>
          </figure>
          </t>
          <t>
            In the case where one of the agents in the above scenarios become overloaded,
            the client should reduce the amount of traffic sent to the overloaded
            agent by the amount requested.  This traffic should instead be routed through
            the non-overloaded agent.  For example, assume that the overloaded
            agent requests a reduction of 10 percent.  The client should send 10
            percent of the traffic that would have been routed to the overloaded agent
            through the non-overloaded agent.
          </t>
          <t>
            When the client has both an active and a standby connection to the two agents, then
            an alternative strategy for responding to an Overload report from an agent is
            to change the standby connection to active.  This will result in all traffic
            being routed through the new
            active connection.
          </t>
          <t>
            In the case where both agents are reporting overload, the client may
            need to start decreasing the total traffic sent to the agents.  This
            would be done in a similar fashion as that discussed in <xref target="singleagent"/>.
            The amount of traffic depends on the combined
            reduction requested by the two agents.
          </t>
        </section>
        <section title="Agent Chains">
          <t>
            There are also deployment scenarios where there can be multiple Diameter
            Agents between Diameter Clients and Diameter Servers.  An example of this
            type of deployment is when there are Diameter Agents between administrative domains.
          </t>
          <t>
            <xref target="usecase5" /> illustrates one such network deployment case.
            Note that while this figure shows a maximum of two agents being involved
            in a Diameter transaction, it is possible for more
            than two agents to be in the path of a transaction.
          </t>
          <t>
          <figure  anchor="usecase5">
          <artwork align="center"><![CDATA[
          +---+     +---+   +-+
        --|a11|-----|a21|---|s|
   +-+ /  +---+ \ / +---+\ /+-+
   |c|-          x        x
   +-+ \  +---+ / \ +---+/ \+-+
        --|a12|-----|a22|---|s|
          +---+     +---+   +-+
]]>

          </artwork>
          </figure>
          </t>
          <t>
            The handling of overload for one or both agents, a11 or a12 in this case, is
            equivalent to that discussed in <xref target="redundantagents"/>.
          </t>
          <t>
            The overload of agents a21 and a22 must be handled by the previous-hop agents.
            As such, agents a11 and a12 must handle the overload mitigation logic when
            receiving an Agent Overload report from agents a21 and a22.
          </t>
          <t>
            The handling of Peer Overload reports is similar to that discussed in
            <xref target="redundantagents"/>.
            If the overload can be addressed using diversion, then this approach should be taken.
          </t>
          <t>
            If both of the agents have requested a reduction in traffic, then the previous-hop
            agent must start throttling the appropriate number of transactions.  When
            throttling requests, an agent uses the same error responses as defined in the base
            DOIC specification <xref target="RFC7683"/>.
          </t>
        </section>
      </section>
      <section title="Diameter Endpoint Use Cases">
        <t>
          This section outlines use cases for the Peer Overload report involving Diameter Clients
          and Diameter Servers.
        </t>
        <section title="Hop-by-Hop Abatement Algorithms">
          <t>
            It is envisioned that abatement algorithms will be defined that will
            support the option for Diameter endpoints to send peer reports.  For
            instance, it is envisioned that one usage scenario for the rate
            algorithm <xref target="RFC8582"/>
            will involve abatement being done on a hop-by-hop basis.
          </t>
          <t>
            This rate-deployment scenario would involve Diameter endpoints
            generating peer reports and selecting the rate algorithm for
            abatement of overload conditions.
          </t>
        </section>
      </section>
    </section>
    <section title="Interaction Between Host/Realm and Peer Overload Reports">
      <t>
        It is possible for both an agent and an endpoint in the path of a transaction
        to be overloaded at the same time.  When this
        occurs, Diameter entities need to handle multiple Overload reports.
        In this scenario, the reacting node should first handle the throttling of the
        overloaded Host or Realm.
        Any messages that survive throttling due to Host or Realm reports should
        then go through abatement for the Peer Overload report.  In this scenario,
        when doing abatement on the peer report, the reacting node SHOULD
        take into consideration the number of messages already throttled by the handling
        of the host/realm report abatement.
      </t>

      <t><list><t>
        Note: The goal is to avoid traffic oscillations that might result from
        throttling of messages for both the host/realm Overload reports and the
        PEER Overload reports.  This is especially a concern if both
        reports indicate the loss abatement algorithm.
       </t></list></t>
    </section>
    <section title="Peer-Report Behavior">
      <t>
        This section defines the normative behavior associated with the Peer-Report
        extension to the DOIC solution.
      </t>
      <t>

      </t>
      <section title="Capability Announcement" anchor="peer-ca">
        <section title="Reacting-Node Behavior">
          <t>
            When sending a Diameter request, a DOIC node that supports the OC_PEER_REPORT
            feature (as defined in <xref target="feature_avp"/>)
            MUST include in the OC-Supported-Features AVP an OC-Feature-Vector AVP
            with the OC_PEER_REPORT bit set.
          </t>

          <t>
            When sending a request, a DOIC node that supports the OC_PEER_REPORT feature
            MUST include a SourceID AVP in the OC-Supported-Features
            AVP with its own DiameterIdentity.
          </t>

          <t>
            When a Diameter Agent relays a request that includes a SourceID AVP in the OC-Supported-Features AVP,
            if the Diameter Agent supports the OC_PEER_REPORT feature, then it MUST remove the received SourceID
            AVP and replace it with a SourceID AVP containing its own DiameterIdentity.
          </t>
        </section>
        <section title="Reporting-Node Behavior">
          <t>
            When receiving a request, a DOIC node that supports the OC_PEER_REPORT feature
            MUST update transaction state with an indication of whether or not
            the peer from which the request was received supports the OC_PEER_REPORT
            feature.
          </t>

          <t><list><t>
            Note: The transaction state is used when the DOIC node is acting as a peer-report
            reporting node and needs to send OC-OLR AVP reports of type "PEER-REPORT" in
            answer messages.
            The Peer Overload reports are only included in answer messages being sent to peers that support
            the OC_PEER_REPORT feature.
          </t></list></t>

          <t>
            The peer supports the OC_PEER_REPORT feature if the received
            request contains an OC-Supported-Features AVP with the OC-Feature-Vector
            with the OC_PEER_REPORT feature bit set and with a SourceID AVP with
            a value that matches the DiameterIdentity of the peer from which the
            request was received.
          </t>

          <t>
            When an agent relays an answer message, a reporting node that supports the
            OC_PEER_REPORT feature MUST strip any SourceID AVP from the
            OC-Supported-Features AVP.
          </t>
          <t>
            When sending an answer message, a reporting node that supports the
            OC_PEER_REPORT feature MUST determine if the peer to which the
            answer is to be sent supports the OC_PEER_REPORT feature.
          </t>
          <t>
            If the peer supports the OC_PEER_REPORT feature, then the reporting node
            MUST indicate support for the feature in the OC-Supported-Features AVP.
          </t>
          <t>
            If the peer supports the OC_PEER_REPORT feature, then the reporting node
            MUST insert the SourceID AVP in the OC-Supported-Features AVP in the
            answer message.
          </t>
          <t>
            If the peer supports the OC_PEER_REPORT feature, then the reporting node
            MUST insert the OC-Peer-Algo AVP in the OC-Supported-Features AVP.  The
            OC-Peer-Algo AVP MUST indicate the overload abatement algorithm that
            the reporting node wants the reacting nodes to use should the reporting node
            send a Peer Overload report as a result of becoming overloaded.
          </t>
        </section>
      </section>
      <section title="Peer Overload Report Handling" anchor="peer-olr">
        <t>
          This section defines the behavior for the handling of Overload reports
          of type "PEER-REPORT".
        </t>
        <section title="Overload Control State">
          <t>
            This section describes the Overload Control State (OCS) that might be maintained
            by both the peer-report reporting node and the peer-report reacting node.
          </t>
          <t>
            This is an extension of the OCS handling defined in <xref target="RFC7683"/>.
          </t>
          <section title="Reporting-Node Peer-Report OCS" anchor="rep-ocs">
            <t>
              A DOIC node that supports the OC_PEER_REPORT feature SHOULD
	      maintain Reporting-Node OCS, as defined in <xref
	      target="RFC7683"/> and extended here.

            </t>
            <t>
              If different abatement-specific contents are sent to each peer, then
              the reporting node MUST maintain a separate reporting-node peer-report OCS
              entry per peer, to which a Peer Overload report is sent.
            </t>
            <t><list><t>
              Note: The rate-overload abatement algorithm allows for different
              rates to be sent to each peer.
            </t></list></t>

          </section>
          <section title="Reacting-Node Peer-Report OCS" anchor="react-ocs">

            <t>
              In addition to OCS maintained as defined in <xref target="RFC7683"/>,
              a reacting node that supports the OC_PEER_REPORT feature
              maintains the following OCS per supported Diameter
              application:
            <list><t>
              A peer-report OCS entry for each peer to which it sends requests</t>
            </list></t>
<t>
              A peer-report OCS entry is identified by both the Application-ID
	      and the peer's DiameterIdentity.
            </t>
            <t>
              The peer-report OCS entry includes the following information
              (the actual information stored is an implementation decision):
            <list>
              <t>
                Sequence number (as received in the OC-OLR AVP)
              </t>
              <t>
                Time of expiry (derived from the OC-Validity-Duration AVP received in
                the OC-OLR AVP and time of reception of the message carrying the
                OC-OLR AVP)
              </t>
              <t>
                Selected abatement algorithm (as received in the OC-Supported-Features AVP)
              </t>
              <t>
                Input data that is specific to the abatement algorithm  (as received in
                the OC-OLR AVP, e.g., OC-Reduction-Percentage for the
                loss abatement algorithm)
              </t>
            </list></t>

          </section>
        </section>
        <section title="Reporting-Node Maintenance of Peer-Report OCS">

          <t>
            All rules for managing the reporting-node OCS entries defined in
            <xref target="RFC7683"/>
            apply to the peer report.
          </t>
        </section>
        <section title="Reacting-Node Maintenance of Peer-Report OCS">
          <t>
            When a reacting node receives an OC-OLR AVP with a report type of "PEER-REPORT", it
            MUST determine if the report was generated by the Diameter peer from which the report was
            received.
          </t>
          <t>
            If a reacting node receives an OC-OLR AVP of type "PEER-REPORT" and the SourceID
            matches the DiameterIdentity of the Diameter peer from which the response message
            was received, then the
            report was generated by a Diameter peer.
          </t>
          <t>
            If a reacting node receives an OC-OLR AVP of type "PEER-REPORT" and the SourceID
            does not match the DiameterIdentity
            of the Diameter peer from which the response message was received, then the
            reacting node MUST ignore the Overload report.
          </t>
          <t><list><t>
            Note: Under normal circumstances, a Diameter node will not add a peer report when
            sending to a peer that does not support this extension.  This requirement is
            to handle the case where peer reports are erroneously or maliciously inserted
            into response messages.
          </t></list></t>
          <t>
            If the peer report was received from a Diameter peer, then the
            reacting node MUST determine if it is for an existing or new overload condition.
          </t>
          <t>
            The peer report is for an existing overload condition if the reacting node
            has an OCS that matches the received peer report.
            For a peer report, this means it matches the Application-ID and the peer's
            DiameterIdentity in an existing OCS entry.
          </t>
          <t>
            If the peer report is for an existing overload condition, then it MUST
            determine if the peer report is a retransmission or an update to the existing
            OLR.
          </t>
          <t>
            If the sequence number for the received peer report is greater than the
            sequence number stored in the matching OCS entry, then the reacting
            node MUST update the matching OCS entry.
          </t>
          <t>
            If the sequence number for the received peer report is less than or equal to
            the sequence number in the matching OCS entry, then the reacting node
            MUST silently ignore the received peer report.  The matching OCS MUST NOT be
            updated in this case.
          </t>
          <t>
            If the received peer report is for a new overload condition, then the reacting
            node MUST generate a new OCS entry for the overload condition.
          </t>
          <t>
            For a peer report, this means it creates an OCS entry with a DiameterIdentity
            from the SourceID AVP in the received OC-OLR AVP.
          </t>
          <t>
            If the received peer report contains a validity duration of zero ("0"), then
            the reacting node MUST update the OCS entry as being expired.
          </t>
          <t>
            The reacting node does not delete an OCS when receiving an answer
            message that does not contain an OC-OLR AVP (i.e., the absence of OLR
            means "no change").
          </t>
          <t>
            The reacting node sets the abatement algorithm based on the
            OC-Peer-Algo AVP in the received OC-Supported-Features AVP.
          </t>
        </section>

        <section title="Peer-Report Reporting-Node Behavior">
          <t>
            When there is an existing reporting-node peer-report OCS entry, the reporting
            node MUST include an OC-OLR AVP with a report type of "PEER-REPORT" using the
            contents of the reporting-node peer-report OCS entry in all answer messages
            sent by the reporting node to peers that support the OC_PEER_REPORT feature.
          </t>
          <t><list><t>
            Note: The reporting node determines if a peer supports the OC_PEER_REPORT feature
            based on the indication recorded in the reporting node's transaction state.
          </t></list></t>
          <t>
            The reporting node MUST include its DiameterIdentity in the SourceID AVP in the
            OC-OLR AVP.  This is used by DOIC nodes that support the OC_PEER_REPORT feature to
            determine if the report was received from a Diameter peer.
          </t>
          <t>
            The reporting agent must follow all other overload reporting-node
            behaviors outlined in the DOIC specification.
          </t>
        </section>
        <section title="Peer-Report Reacting-Node Behavior" anchor="reacting" >
          <t>
            A reacting node supporting this extension MUST support the receipt of multiple
            Overload reports in a single message.  The message might include a Host
            Overload report, a Realm Overload report, and/or a Peer Overload report.
          </t>
          <t>
            When a reacting node sends a request, it MUST determine if that
            request matches an active OCS.
          </t>
          <t>
            In all cases, if the reacting node is an agent, then it
            MUST strip the Peer-Report OC-OLR AVP from the message.
          </t>
          <t>
            If the request matches an active OCS, then the reacting node MUST
            apply abatement treatment to the request.  The abatement treatment
            applied depends on the abatement algorithm indicated in the OCS.
          </t>
          <t>
            For Peer Overload Reports, the preferred abatement treatment is
            diversion.  As such, the reacting node SHOULD attempt to divert
            requests identified as needing abatement to other peers.
          </t>

          <t>
            If there is not sufficient capacity to divert abated traffic, then
            the reacting node MUST throttle the necessary requests to fit
            within the available capacity of the peers able to handle the
            requests.
          </t>
          <t>
            If the abatement treatment results in throttling of the request and
            if the reacting node is an agent, then the agent MUST send an
            appropriate error response as defined in <xref target="RFC7683"/>.
          </t>
          <t>
            In the case that the OCS entry validity duration expires or has a
            validity duration of zero ("0"), meaning that if the reporting node
            has explicitly signaled the end of the overload condition, then
            abatement associated with the OCS entry MUST be ended in a
            controlled fashion.
          </t>
        </section>
      </section>
    </section>
    <section title="Peer-Report AVPs" anchor="avps">
      <section title="OC-Supported-Features AVP">
        <t>
          This extension adds a new feature to the OC-Feature-Vector AVP.  This feature
          indication shows support for handling of Peer Overload reports.  Peer Overload
          reports are used by agents to indicate the need for overload abatement handling
          by the agent's peer.
        </t>
        <t>
          A supporting node must also include the SourceID AVP in the
          OC-Supported-Features capability AVP.
        </t>
        <t>
          This AVP contains the DiameterIdentity of the node that supports the OC_PEER_REPORT
          feature.  This AVP is used to determine if support for the Peer Overload report
          is in an adjacent node.  The value of this AVP should
          be the same Diameter identity used as part of the
          Diameter Capabilities Exchange procedure defined in <xref target="RFC7683"/>.
        </t>
        <t>
          This extension also adds the OC-Peer-Algo AVP to the OC-Supported-Features AVP.  This AVP
          is used by a reporting node to indicate the abatement algorithm it will use for
          Peer Overload reports.
        </t>
        <t>
        <figure>
        <artwork><![CDATA[
 OC-Supported-Features ::= < AVP Header: 621 >
                           [ OC-Feature-Vector ]
                           [ SourceID ]
                           [ OC-Peer-Algo]
                         * [ AVP ]
]]>
        </artwork>
        </figure>
        </t>
        <section title="OC-Feature-Vector AVP" anchor="feature_avp">
          <t>
            The Peer-Report feature defines a new feature bit for the OC-Feature-Vector AVP.
          </t>

          <t>
            <list style="hanging">
              <t hangText="OC_PEER_REPORT (0x0000000000000010)">
              <vspace blankLines="1"/>
                When this flag is set by a DOIC node, it indicates that
                the DOIC node supports the Peer Overload report type.
              </t>
            </list>
           </t>
        </section>
        <section title="OC-Peer-Algo AVP">
          <t>
            The OC-Peer-Algo AVP (AVP code 648) is of type Unsigned64 and
            contains a 64-bit flags field of announced capabilities for a
            DOIC node. The value of zero ("0") is reserved.
          </t>
          <t>
            Feature bits defined for the OC-Feature-Vector AVP and associated
	    with overload abatement algorithms are reused for this
            AVP.
          </t>
        </section>
      </section>

      <section title="OC-OLR AVP">
        <t>
          This extension makes no changes to the OC_Sequence_Number or
          OC_Validity_Duration AVPs in
          the OC-OLR AVP.  These AVPs can also be used in Peer Overload reports.
        </t>
        <t>
          The OC_PEER_REPORT feature extends the base Diameter overload specification
          by defining a new Overload
          report type of "PEER-REPORT".  See Section 7.6 of <xref target="RFC7683"/>
          for a description of the OC-Report-Type AVP.
        </t>
        <t>
          The peer report MUST also include the Diameter identity of the agent that
          generated the report. This is necessary to handle the case where
	  there is a non-supporting agent between the reporting node and the
	  reacting node.  Without the indication of the agent that generated
	  the peer report, the reacting node could erroneously assume that
	  the report applied to the non-supporting node. This could, in turn,
	  result in unnecessary traffic being either diverted or throttled.
        </t>
        <t>
          The SourceID AVP is used in the OC-OLR AVP to carry this DiameterIdentity.
        </t>
        <figure>
        <artwork><![CDATA[
   OC-OLR ::= < AVP Header: 623 >
              < OC-Sequence-Number >
              < OC-Report-Type >
              [ OC-Reduction-Percentage ]
              [ OC-Validity-Duration ]
              [ SourceID ]
            * [ AVP ]
  ]]>
        </artwork>
        </figure>
        <section title="OC-Report-Type AVP" anchor="reporttype">
          <t>
            The following new report type is defined for the OC-Report-Type AVP.
          </t>
          <t>
            <list style="hanging">
              <t hangText="PEER_REPORT 2:">
                The overload treatment should apply to all requests bound for the peer
                identified in the Overload report.  If the peer identified in the peer
                report is not a peer to the reacting endpoint, then the peer report
                should be stripped and not acted upon.
               </t>
            </list>
          </t>
        </section>
      </section>
      <section title="SourceID AVP">
        <t>
          The SourceID AVP (AVP code 649) is of type DiameterIdentity and is inserted by a
          Diameter node to indicate the source of the AVP in which it is a part.
        </t>
        <t>
          In the case of peer reports, the SourceID AVP indicates the node
          that supports this feature (in the OC-Supported-Features
          AVP) or the node that generates an overload report with a report type of "PEER-REPORT"
          (in the OC-OLR AVP).
        </t>
        <t>
          It contains the DiameterIdentity of the inserting node.  This is used by other
          Diameter nodes to determine the node that inserted the enclosing AVP that
          contains the SourceID AVP.
        </t>
      </section>
      <section title="Attribute-Value Pair Flag Rules" anchor="newavps">
        <t>
          <figure>
          <artwork>
          <![CDATA[
                                                          +---------+
                                                          |AVP flag |
                                                          |rules    |
                                                          +----+----+
                          AVP   Section                   |    |MUST|
  Attribute Name          Code  Defined Value Type        |MUST| NOT|
 +--------------------------------------------------------+----+----+
 |OC-Peer-Algo            648    7.1.2  Unsigned64        |    | V  |
 |SourceID                649    7.3    DiameterIdentity  |    | V  |
 +--------------------------------------------------------+----+----+
 ]]>
          </artwork>
          </figure>
        </t>

      </section>
    </section>
    <section title="IANA Considerations">
<t>IANA has registered the following values in the the "Authentication,
Authorization, and Accounting (AAA) Parameters" registry:

<list>
<t>Two new AVP codes are defined in <xref target="newavps" />.
<vspace blankLines="1"/>
Note that the values used for the OC-Peer-Algo AVP are a subset of
the "OC-Feature-Vector AVP Values (code 622)" registry.  Only the
values in that registry that apply to overload abatement algorithms
apply to the OC-Peer-Algo AVP.</t>
<t>A new OC-Feature-Vector AVP value is defined in <xref target="feature_avp" />.</t>
<t>A new OC-Report-Type AVP value is defined in <xref target="reporttype" />.</t>
</list>
</t>
</section>

    <section title="Security Considerations">
      <t>
        Agent overload is an extension to the base Diameter Overload mechanism.
        As such, all of the security considerations outlined in
        <xref target="RFC7683"/> apply to the agent overload scenarios.
      </t>
      <t>
        It is possible that the malicious insertion of an peer report
        could have a bigger impact
        on a Diameter network as agents can be concentration points in a Diameter
        network.  Where an endpoint
        report would impact the traffic sent to a single Diameter Server, for example,
        a peer
        report could throttle all traffic to the Diameter network.
      </t>
      <t>
        This impact is amplified in a Diameter agent that sits at the edge of a Diameter
        network that serves as the
        entry point from all other Diameter networks.
      </t>
      <t>
        The impacts of this attack, as well as the mitigation strategies, are the same
        as those outlined in <xref target="RFC7683"/>.
      </t>
    </section>


  </middle>

  <back>

  <references title="Normative References">
  &RFC6733;
  &RFC7683;

<!-- I-D.ietf-dime-doic-rate-control-03 -->
<reference anchor="RFC8582" target="https://www.rfc-editor.org/info/rfc8582">
<front>
<title>Diameter Overload Rate Control</title>
<author role="editor" initials='S' surname='Donovan' fullname='Steve Donovan'>
  <organization/>
</author>
<author initials='E' surname='Noel' fullname='Eric Noel'>
  <organization/>
</author>
<date month='August' year='2019'/>
</front>
<seriesInfo name="RFC" value="8582"/>
<seriesInfo name="DOI" value="10.17487/RFC8582"/>
</reference>


  </references>

 <references title="Informative References">
    &RFC2119;
    &RFC8174;
    &RFC7068;
  </references>

    <section title="Acknowledgements" numbered="no">
      <t>
      The author would like to thank Adam Roach and Eric McMurry for the work
      done in defining a comprehensive Diameter overload solution
      in draft-roach-dime-overload-ctrl-03.txt.
      </t>
      <t>
      The author would also like to thank Ben Campbell for his insights and review of early versions of this document.
      </t>
    </section>
  </back>
 </rfc>
