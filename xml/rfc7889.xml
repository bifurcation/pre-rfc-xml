<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
        <!ENTITY rfc2119 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
        <!ENTITY rfc3501 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3501.xml'>
        <!ENTITY rfc5234 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml'>
        <!ENTITY rfc5819 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5819.xml'>
        <!ENTITY rfc4469 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4469.xml'>
		<!ENTITY rfc4549 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4549.xml'>
		<!ENTITY rfc4466 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4466.xml'>
]>
<rfc number="7889" category="std" ipr="trust200902" consensus="yes" submissionType="IETF">
	<?xml-stylesheet href="rfc5162_files/rfc2629.htm" type="text/xsl"?>

	<?rfc toc="yes" ?>
	<?rfc symrefs="yes" ?>
	<?rfc sortrefs="yes"?>
	<?rfc compact="yes"?>
	<?rfc subcompact="no"?>
	<front>
	<title>The IMAP APPENDLIMIT Extension</title>

<!-- [rfced] Regarding the running footer in the .txt file, please let
us know which solution is preferred. RFC style would be to 
have the surnames of both coauthors, but that does not fit due to the
character limit. (FYI, this would be a post-xml2rfc correction to 
the document, as xml2rfc only creates the current output.)

Current:
SrimushnamBoovaraghamoorthy &Standards Track                    [Page 1]
^L
RFC 7889             The IMAP APPENDLIMIT Extension             May 2016


Perhaps (abbreviated; please let us know the preferred form):
SrimushnamB. & Bisht         Standards Track                    [Page 1]
^L
RFC 7889             The IMAP APPENDLIMIT Extension             May 2016

Or (one surname only):
SrimushnamBoovaraghamoorthy  Standards Track                    [Page 1]
^L
RFC 7889             The IMAP APPENDLIMIT Extension             May 2016
-->

    <author initials="J." surname="SrimushnamBoovaraghamoorthy" fullname="Jayantheesh SrimushnamBoovaraghamoorthy">
      <organization>Samsung Electronics America</organization>
      <address>
        <postal>
          <street>685 US Highway 202/206</street>
          <city>Bridgewater</city>
          <region>NJ</region>
          <code>08807</code>
          <country>United States</country>
        </postal>
        <email>jayantheesh.sb@gmail.com</email>
      </address>
    </author>
    <author initials="N.S." surname="Bisht" fullname="Narendra Singh Bisht">
		<organization>Samsung Electronics America</organization>
		<address>
		<postal>
			<street>685 US Highway 202/206</street>
			<city>Bridgewater</city>
			<region>NJ</region>
			<code>08807</code>
			<country>United States</country>
		</postal>
		<email>narendrasingh.bisht@gmail.com</email>
		</address>
	</author>
    <date month="May" year="2016"/>
    
    <keyword>IMAP</keyword>
    <keyword>APPENDLIMIT</keyword>

    <abstract>
	<t>
		This document defines an extension to the IMAP service whereby a server can
		inform the client about maximum message upload sizes, allowing the client
		to avoid sending APPEND commands that will fail because the messages are
		too large.
    </t>
    </abstract>
	
	</front>
  
	<middle>
	<section title="Introduction">
	<t>
		Some IMAP servers have limits for message upload size, and those limits
		are not published to the email client.  When the email client APPENDs
		a message with huge attachments, using non-synchronizing literals,
		the APPEND fails because of the upload limit, but the client has
		already sent the message data anyway. This results in unnecessary resource
		usage. Especially in the mobile device environment, appending
		a message with
		huge attachments consumes device resources like device battery power and
		mobile data.
	</t>
	<t>
		The IMAP APPENDLIMIT extension provides the ability to advertise a maximum
		upload size allowed by the IMAP server, so that the email client knows the
		size limitation beforehand.  By implementing this extension, IMAP server-side
		processing of huge attachments above the maximum upload size can be avoided.
    </t>
		<section title="Conventions">
    <t>
		The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
		"SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
		and "OPTIONAL" in this document are to be interpreted as
		described in <xref target="RFC2119"/>.
	</t>

	<t>In examples, "C:" and "S:" indicate lines sent by
		the client and server, respectively. If a single "C:" or "S:"
		label applies to multiple lines, then the line breaks between
		those lines are for editorial clarity only and are not part
		of the actual protocol exchange.
	</t>	
	</section>
	</section>
	


	<section title="APPENDLIMIT Extension">
	<t>
		An IMAP server that supports the APPENDLIMIT extension advertises this by
		including the name APPENDLIMIT in its capability list in the authenticated
		state.  The server may also advertise this extension before the user has
		logged in. If this capability is omitted, no information is conveyed about
		the server's fixed maximum size for mail uploads. An IMAP server can publish the
		APPENDLIMIT capability in two formats. 
	</t>
    <t>
		(a) APPENDLIMIT=<![CDATA[<number>]]>
	</t>
	<t>
		This indicates that the IMAP server has the same upload limit for all
		mailboxes. The following example demonstrates the APPENDLIMIT
		capability with the same upload limit for all mailboxes.
	</t>
	<t>
	
		C: t1 CAPABILITY<vspace />
		S: * CAPABILITY IMAP4rev1 ID APPENDLIMIT=257890<vspace />
		S: t1 OK foo<vspace />
	
	</t>
	<t>
		(b) APPENDLIMIT
	</t>
	<t>
		The APPENDLIMIT capability without any value indicates that
		the IMAP server supports this extension, and that the client
		will need to discover upload limits for each mailbox, as they
		might differ from mailbox to mailbox. The following
		example demonstrates the APPENDLIMIT capability without any value.
	</t>
	<t>
		C: t1 CAPABILITY<vspace />
		S: * CAPABILITY IMAP4rev1 ID APPENDLIMIT<vspace />
		S: t1 OK foo<vspace />
	</t>
	<t>
		In this case, the client can get an APPENDLIMIT value by either issuing
		a STATUS or a LIST command.

	</t>
	<t>
		An IMAP client implementing this extension should be able to parse both
		mailbox-specific and global APPENDLIMIT responses. By looking at the upload
		size advertised by the IMAP server, a client can avoid trying to APPEND mail
		more than the advertised limit.
	</t>
	</section>
	<section title="Mailbox-Specific APPENDLIMIT">
	<t>
		An IMAP server can have mailbox-specific APPENDLIMIT values that
		will not be advertised as part of the CAPABILITY response.  The IMAP
		server can publish specific values for each mailbox, and it can publish
		"NIL" for a mailbox to convey that there is no APPENDLIMIT for that
		mailbox. The following subsections describe the changes to the STATUS
		and LIST commands in support of	this situation.
	</t>
	
	<section title="STATUS Response to the STATUS Command">
	<t>
		A new attribute APPENDLIMIT is added to get the limit set by the server
		for a mailbox as part of a STATUS command. An IMAP client should issue a STATUS
		command with an APPENDLIMIT item to get the mailbox-specific upload value.
		The following example demonstrates its usage.
	</t>
	<t>
		C: t1 STATUS INBOX (APPENDLIMIT)<vspace />
		S: * STATUS INBOX (APPENDLIMIT 257890)<vspace />
		S: t1 OK STATUS completed<vspace />
	</t>
	<t>
		In the above example, APPENDLIMIT represents the maximum upload size for
		INBOX.
	</t>
	</section>
	<section title="STATUS Response to the LIST Command">
	<t>
		If the server advertises the LIST-STATUS capability <xref target="RFC5819"/>,
		the client can issue a LIST command in combination with the STATUS return option
		to get the mailbox-specific upload value.  The following example demonstrates
		its usage.
	</t>
	<t>
		C: t1 LIST "" % RETURN (STATUS (APPENDLIMIT))<vspace />
		S: * LIST () "."  "INBOX"<vspace />
		S: * STATUS "INBOX" (APPENDLIMIT 257890)<vspace />
		S: t1 OK List completed.<vspace />
	</t>
	<t>
	   The IMAP server MUST recognize the APPENDLIMIT attribute and include an
	   appropriate STATUS response for each matching mailbox. Refer to
	   <xref target="for_synx" /> for the syntax.
	</t>
	<t>
	    If the server does not support the STATUS return option on the LIST
		command, then the client should use the STATUS command instead.
	</t>
	</section>
	<section title="APPENDLIMIT Behavior">
	<t>
		Computing the APPENDLIMIT should be fast and should not take
		Access Control Lists (ACLs), quotas,
		or other such information into account.  The APPENDLIMIT specifies one part
		of the policy, but an APPEND command can still fail due to issues related
		to ACLs and quotas, even if the message	being appended is smaller
		than the APPENDLIMIT.
	</t>
	</section>
	</section>
	
	<section title="APPEND Response">
	<t>
		If a client uploads a message that exceeds the maximum upload size set
		for that mailbox, then the server SHALL reject the APPEND command with a
		tagged TOOBIG response code.  Refer to Section 4 of <xref target="RFC4469"/> for various
		APPEND response codes and their handling.
	</t>
	<t>
		A client SHOULD avoid use of non-synchronizing literals <xref target="RFC7888"/>
		when the maximum upload size supported by the IMAP server is unknown.
		Refer to Section 4.2.2.3 of <xref target="RFC4549" /> for usage of 
		non-synchronizing literals and its risk for disconnected IMAP clients.
	</t>
	</section>
	<section title="Formal Syntax" anchor="for_synx">
	<t>
		The following syntax specification uses the Augmented Backus-Naur
		Form (ABNF) notation as specified in <xref target="RFC5234"/> including the core
		rules in Appendix B.1 of that document.  <xref target="RFC3501"/> defines the non-terminals
		"capability" and "status-att", and <xref target="RFC4466"/> defines "status-att-val".

	</t>
	<t>
		All alphabetic characters are case insensitive.  The use of uppercase or
		lowercase characters to define token strings is for editorial clarity only.
		Implementations MUST accept these strings in a case-insensitive fashion.
	</t>
<figure>
<artwork type="abnf"><![CDATA[
capability =/ "APPENDLIMIT" ["=" number]
            ;; capability is defined in RFC 3501

status-att =/ "APPENDLIMIT"
            ;; status-att is defined in RFC 3501

status-att-val =/ "APPENDLIMIT" SP (number / nil)
                ;; status-att-val is defined in RFC 4466
]]>
</artwork>
</figure>
	<t>
		The number indicates the fixed maximum message size in octets that
		the server will accept.  An APPENDLIMIT number of 0 indicates the
		server will not accept any APPEND commands at all for the affected mailboxes. 
	</t>
	</section>
	<section title="Security Considerations">
    <t>
		This extension provides additional information that cooperative
		clients can use as an optimization and does not introduce new
		security concerns.  This extension does not address abusive clients
		that intend to consume server resources, and servers will still have
		to take action to disconnect and/or restrict access to clients that
		exhibit abusive behavior.
    </t>
	</section>
		
	<section title="IANA Considerations">
	<t>
	   IANA has added "APPENDLIMIT" to the "IMAP Capabilities"
	   registry, using this document as its reference.
	</t>
    </section>
	</middle>
	<back>	
	<references title="Normative References">
	  &rfc4466;
      &rfc2119;
      &rfc3501;
      &rfc5234;
      &rfc5819;
&rfc4469;

<!-- draft-ietf-imapand-rfc2088bis: companion document -->
<reference anchor="RFC7888" target="http://www.rfc-editor.org/info/rfc7888">
<front>
<title>IMAP4 Non-synchronizing Literals</title>
<author initials='A' surname='Melnikov' fullname='Alexey Melnikov' role='editor'>
  <organization/>
</author>
<date month='May' year='2016'/>
</front>
<seriesInfo name="RFC" value="7888"/>
<seriesInfo name="DOI" value="10.17487/RFC7888"/>
</reference>

	</references>
	
	<references title="Informative References">
	 &rfc4549;
	</references>	

	<section title="Acknowledgements" numbered="no">
    <t>Thanks to Alexey Melnikov, Dave Cridland, Adrien de Croy,
		 Michael M.&nbsp;Slusarz, Timo Sirainen, Chris Newman,
		 Pete Maclean, Jamie Nicolson, Stu Brandt, Bron Gondwana,
		 Arnt Gulbrandsen, Cyrus Daboo, Jan Kundrat, Brandon Long,
         and Barry Leiba for providing valuable comments.
	</t>
    </section>
  </back>

</rfc>
