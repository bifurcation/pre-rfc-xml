<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc rfcedstyle="yes" ?>

<rfc number="7250" category="std" submissionType="IETF" ipr="trust200902">

  <front>

    <title abbrev="Using Raw Public Keys in TLS/DTLS">Using Raw Public Keys in Transport Layer Security (TLS) and&nbsp;Datagram&nbsp;Transport&nbsp;Layer&nbsp;Security&nbsp;(DTLS)</title>


    <author role="editor" fullname="Paul Wouters" initials="P." surname="Wouters">
      <organization>Red Hat</organization>
      <address>
        <postal>
          <street/>
          <city/>
          <region/>
          <code/>
          <country/>
        </postal>
        <email>pwouters@redhat.com</email>
      </address>
    </author>


    <author initials="H.T." surname="Tschofenig" fullname="Hannes Tschofenig" role="editor">
      <organization>ARM Ltd.</organization>
      <address>
        <postal>
          <street>6060 Hall in Tirol</street>
          <country>Austria</country>
        </postal>
        <email>Hannes.tschofenig@gmx.net</email>
        <uri>http://www.tschofenig.priv.at</uri>
      </address>
    </author>

    <author fullname="John Gilmore" initials="J." surname="Gilmore">
      <organization>Electronic Frontier Foundation</organization>
      <address>
        <postal>
          <street>PO Box 170608</street>
          <city>San Francisco</city>
          <region>California</region>
          <code>94117</code>
          <country>USA</country>
        </postal>
        <phone>+1 415 221 6524</phone>
        <email>gnu@toad.com</email>
        <uri>https://www.toad.com/</uri>
      </address>
    </author>

    <author fullname="Samuel Weiler" initials="S." surname="Weiler">
      <organization>Parsons</organization>
      <address>
        <postal>
          <street>7110 Samuel Morse Drive</street>
          <city>Columbia, Maryland</city>
          <code>21046</code>
          <country>US</country>
        </postal>
        <email>weiler@tislabs.com</email>
      </address>
    </author>

 <author initials="T." surname="Kivinen" fullname="Tero Kivinen">
            <organization>INSIDE Secure</organization>
            <address>
                <postal>
                    <street>Eerikinkatu 28</street>
                    <city>Helsinki</city>
                    <code>FI-00180</code>
                    <country>FI</country>
                </postal>
                <email>kivinen@iki.fi</email>
            </address>
        </author>
    <date month="June" year="2014" />

    <area>Security</area>

    <workgroup>TLS</workgroup>

    <keyword>TLS</keyword>
    <keyword>DNSSEC</keyword>
    <keyword>DANE</keyword>
    <keyword>Raw Public Key</keyword>


    <abstract>
      <t> This document specifies a new certificate type and two TLS extensions for exchanging raw
 public keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS). 
 The new certificate type allows raw public keys to be used for authentication.  
 </t>
    </abstract>
  </front>

   <middle>
    <section anchor="into" title="Introduction">
       <t>Traditionally, TLS client and server public keys are obtained in PKIX containers
          in-band as part of the TLS handshake procedure and are validated using trust anchors
          based on a <xref target='PKIX'/> certification authority (CA). This
          method can add a complicated trust relationship that is difficult
          to validate. Examples of such complexity can be seen in
          <xref target='Defeating-SSL'/>. TLS is, however, also commonly used with self-signed 
          certificates in smaller deployments where the self-signed certificates are distributed 
          to all involved protocol endpoints out-of-band. This practice does, however, still 
          require the overhead of the certificate generation even though none of the information 
          found in the certificate is actually used.</t>


 <t>Alternative methods are available that allow a TLS client/server
 to obtain the TLS server/client public key:

   <list style="symbols">
          <t>The TLS client can obtain the TLS server public key from a
      DNSSEC-secured resource record using DNS-Based Authentication of Named Entities (DANE) <xref target="RFC6698"/>.</t>


   <t>The TLS client or server public key is obtained from a
      <xref target='PKIX'/> certificate chain from a Lightweight Directory
      Access Protocol <xref target="LDAP"/> server or web page.</t>

   <t>The TLS client and server public key is provisioned into
      the operating system firmware image and updated via
      software updates. For example:
      <vspace blankLines="1"/>
      Some smart objects use the UDP-based Constrained
        Application Protocol <xref target="CoAP"/> to
        interact with a Web server to upload sensor data at
        regular intervals, such as temperature readings.
        CoAP can utilize DTLS for securing
        the client-to-server communication.  As part of the
        manufacturing process, the embedded device may be
        configured with the address and the public key of
        a dedicated CoAP server, as well as a public/private key pair for
        the client itself.</t>
   </list>
       </t>
	<t>This document introduces the use of raw public keys in TLS/DTLS. With
   raw public keys, only a subset of the information found in typical
   certificates is utilized: namely, the SubjectPublicKeyInfo structure
   of a PKIX certificate that carries the parameters necessary to
   describe the public key.  
Other parameters found in PKIX certificates are omitted.

   By omitting various certificate-related
   structures, the resulting raw public key is kept fairly small in
   comparison to the original certificate, and the code to process the
   keys can be simpler.  Only a minimalistic ASN.1 parser  is needed; code for
   certificate path validation and other PKIX-related processing 
   is not required. 

 Note, however, 
   the SubjectPublicKeyInfo structure is still in an ASN.1 format.
      
      To further reduce the size of the exchanged information, this specification can be combined with the TLS Cached Info extension <xref target="CACHED-INFO"/>, which enables TLS peers to exchange just fingerprints of their public keys.</t>
      
<t>The mechanism defined herein only provides authentication when
  an out-of-band mechanism is also used to bind the public key
  to the entity presenting the key.</t>

      <t><xref target="Structure"/> defines the structure of the two new TLS extensions, client_certificate_type and
        server_certificate_type, which can be used as part of an extended TLS handshake when raw public keys are to be used. 
      
        <xref target="Behavior"/> defines the behavior of the TLS client and the TLS server. Example exchanges are described in <xref target="Examples"/>. 
        
        <xref target="security"/> describes security considerations with this approach. 
        
        Finally, in <xref target="IANA"/> this document registers a new value
	to the IANA "TLS Certificate
      Types" subregistry for the support of raw public keys.</t>
 
      </section>
	  
      <section title="Terminology" anchor="terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref target="RFC2119">RFC 2119</xref>.</t>
        
        <t>We use the terms "TLS server" and "server" as well as "TLS client" and "client" interchangeably.</t>
      </section>


    <section anchor="Structure" title="Structure of the Raw Public Key Extension">
      <t>This section defines the two TLS extensions client_certificate_type and server_certificate_type, which can be used as part of an extended TLS handshake when raw public keys are used. <xref target="Behavior"/> defines the behavior of the TLS client and the TLS server using these extensions.</t>
    
      <t>This specification uses raw public keys whereby the already available encoding used in a PKIX certificate in the form of a SubjectPublicKeyInfo structure is reused. To carry the raw public key within the TLS handshake, the Certificate payload is used as a container, as shown in <xref target="Certificate"/>. The shown Certificate structure is an adaptation of its original form <xref target="RFC5246"/>.</t>   
   
<t>
<figure anchor="Certificate" title="Certificate Payload as a Container for the Raw Public Key"><artwork><![CDATA[
opaque ASN.1Cert<1..2^24-1>;

struct {
    select(certificate_type){
        
         // certificate type defined in this document.
         case RawPublicKey:                      
           opaque ASN.1_subjectPublicKeyInfo<1..2^24-1>;
             
        // X.509 certificate defined in RFC 5246
        case X.509:
          ASN.1Cert certificate_list<0..2^24-1>;         
               
        // Additional certificate type based on
        // "TLS Certificate Types" subregistry
    };
} Certificate;
]]></artwork></figure>
</t>
     
<t>The SubjectPublicKeyInfo structure is defined in Section 4.1 of RFC 5280 <xref target="PKIX"/> and not only contains the raw keys, such as the public exponent and the modulus of an RSA public key, but also an algorithm identifier. The algorithm identifier can also include parameters. The SubjectPublicKeyInfo value in the Certificate payload MUST contain the DER encoding <xref target="X.690"/> of the SubjectPublicKeyInfo. The structure, as shown in <xref target="SubjectPublicKeyInfo"/>, therefore also contains length information. An example is provided in <xref target="Example"/>.</t>

<t>
<figure anchor="SubjectPublicKeyInfo" title="SubjectPublicKeyInfo ASN.1 Structure">
<artwork><![CDATA[    
   SubjectPublicKeyInfo  ::=  SEQUENCE  {
        algorithm               AlgorithmIdentifier,
        subjectPublicKey        BIT STRING  }

   AlgorithmIdentifier   ::=  SEQUENCE  {
        algorithm               OBJECT IDENTIFIER,
        parameters              ANY DEFINED BY algorithm OPTIONAL  }
]]></artwork>
</figure>
</t>

  <t>The algorithm identifiers are Object Identifiers (OIDs). RFC 3279 <xref
  target="RFC3279"/> and RFC 5480 <xref target="RFC5480"/>, for example, define the OIDs shown in <xref target="alg-ids"/>. Note that this list is not exhaustive, and more OIDs may be defined in future RFCs.</t>
  <t>
<figure anchor="alg-ids" title="Example Algorithm Object Identifiers">
<artwork><![CDATA[
Key Type            | Document                   | OID
--------------------+----------------------------+-------------------
RSA                 | Section 2.3.1 of RFC 3279  | 1.2.840.113549.1.1
....................|............................|...................
Digital Signature   |                            |
Algorithm (DSA)     | Section 2.3.2 of RFC 3279  | 1.2.840.10040.4.1
....................|............................|...................
Elliptic Curve      |                            |
Digital Signature   |                            |
Algorithm (ECDSA)   | Section 2 of RFC 5480      | 1.2.840.10045.2.1
--------------------+----------------------------+-------------------
]]></artwork>
</figure>
</t>

      <t>The extension format for extended client and server hellos, which
      uses the "extension_data" field, is used to carry the
      ClientCertTypeExtension and the ServerCertTypeExtension
      structures. These two structures are shown in <xref
      target="types"/>. The CertificateType structure is an enum with values
      taken from the "TLS Certificate Types" subregistry of the "Transport
      Layer Security (TLS) Extensions"
      registry <xref target="TLS-Ext-Registry"/>. </t>

<t>
<figure anchor="types" title="CertTypeExtension Structure">
<artwork><![CDATA[
struct {
        select(ClientOrServerExtension) { 
            case client:
              CertificateType client_certificate_types<1..2^8-1>;
            case server:
              CertificateType client_certificate_type;
        }
} ClientCertTypeExtension;

struct {
        select(ClientOrServerExtension) {
            case client:
              CertificateType server_certificate_types<1..2^8-1>;
            case server:
              CertificateType server_certificate_type;
        }
} ServerCertTypeExtension;   
]]></artwork>
</figure>
</t>

</section>

   <section anchor="Behavior" title="TLS Client and Server Handshake Behavior">

     <t>This specification extends the ClientHello and the ServerHello messages, according to the extension procedures defined in <xref target="RFC5246"/>. It does not extend or modify any other TLS message.</t>
     
     <t>Note: No new cipher suites are required to use raw public keys.  All
       existing cipher suites that support a key exchange method compatible
       with the defined extension can be used.</t>
     
     <t>The high-level message exchange in <xref target="flow"/> shows the client_certificate_type and server_certificate_type extensions added to the client and server hello messages. 
       
       <figure anchor="flow" title="Basic Raw Public Key TLS Exchange">
         <artwork><![CDATA[ 
 client_hello, 
 client_certificate_type,
 server_certificate_type   ->

                           <-  server_hello,
                               client_certificate_type,
                               server_certificate_type,
                               certificate,
                               server_key_exchange,
                               certificate_request,
                               server_hello_done
 certificate,
 client_key_exchange,
 certificate_verify,
 change_cipher_spec,
 finished                  ->

                           <- change_cipher_spec,
                              finished

Application Data        <------->     Application Data
]]></artwork>
       </figure>
     </t>
     
  <section title="Client Hello">

   <t>
   In order to indicate the support of raw public keys,
   clients include the client_certificate_type and/or the server_certificate_type extensions in an extended
     client hello message. The hello extension mechanism is described in Section 7.4.1.4 of TLS 1.2 <xref target="RFC5246"/>.
   </t>
 
      <t>The client_certificate_type extension in the client hello indicates the certificate types the client is able to provide to the server, when requested using a certificate_request message.</t>
      
    <t>The server_certificate_type extension in the client hello indicates the types of certificates the client is able to process when provided by the server in a subsequent certificate payload.</t>
    
<t>
  The client_certificate_type and server_certificate_type extensions sent in
  the client hello each carry a list of supported certificate types,
  sorted by client preference.  When the client supports
  only one certificate type, it is a list containing a single element.
  </t>
   
<t>
  The TLS client MUST omit certificate types from the
  client_certificate_type extension in the client hello if it does
  not possess the corresponding raw public key or certificate that it
  can provide to the server when requested using a
  certificate_request message, or if it is not configured to use one
  with the given TLS server.  If the client has no remaining certificate
  types to send in the client hello, other than the default X.509
  type, it MUST omit the client_certificate_type extension in the
  client hello.
  </t>

<t>
  The TLS client MUST omit certificate types from the
  server_certificate_type extension in the client hello if it is
  unable to process the corresponding raw public key or other
  certificate type.  If the client has no remaining certificate
  types to send in the client hello, other than the default
  X.509 certificate type, it MUST omit the entire
  server_certificate_type extension from the client hello.
  </t>
    
</section>

<section title="Server Hello">

<t>If the server receives a client hello that contains the client_certificate_type extension and/or the server_certificate_type 
   extension, then three outcomes are possible:
   
   <list style="numbers"> 
   <t>The server does not support the extension defined in this document. In this case, the server returns the server hello 
   without the extensions defined in this document.</t>
   <t>The server supports the extension defined in this document, but it does not have any certificate type in common with the client. Then, the server terminates the session with a fatal alert of type "unsupported_certificate".</t>
     <t>The server supports the extensions defined in this document and has at least one certificate type in common with the client. 
       In this case, the processing rules described below are followed. 
     </t>
   </list> 
   </t> 
 
  
  <t>The client_certificate_type extension in the client hello indicates the
  certificate types the client is able to provide to the server, when
  requested using a certificate_request message. If the TLS server wants to
  request a certificate from the client (via the certificate_request message),
  it MUST include the client_certificate_type extension in the server
  hello. This client_certificate_type extension in the server hello then
  indicates the type of certificates the client is requested to provide in a
  subsequent certificate payload. The value conveyed in the
  client_certificate_type extension MUST be selected from one of the values provided in the client_certificate_type extension sent in the client hello. The server MUST also include a certificate_request payload in the server hello message.</t>

  <t>If the server does not send a certificate_request payload (for example,
  because client authentication happens at the application layer or no client
  authentication is required) or none of the certificates supported by the
  client (as indicated in the client_certificate_type extension in the client hello) match the server-supported certificate types, then the client_certificate_type payload in the server hello MUST be omitted.</t>
  
  <t>The server_certificate_type extension in the client hello indicates the types of certificates the client is able to process when provided by the server in a subsequent certificate payload. If the client hello indicates support of raw public keys in the
    server_certificate_type extension and the server chooses to use raw public keys, then the TLS server
    MUST place the SubjectPublicKeyInfo structure into the Certificate
  payload. With the server_certificate_type extension in the server hello, the TLS server indicates the certificate type carried in the Certificate payload. This additional indication enables avoiding parsing ambiguities since the Certificate payload may contain either the X.509 certificate or a SubjectPublicKeyInfo structure. Note that only a single value is permitted in the server_certificate_type extension when carried in the server hello.</t>
    
</section>


<section title="Client Authentication">

<t>
  When the TLS server has specified RawPublicKey as the
  client_certificate_type, authentication of the TLS client to the
  TLS server is supported only through authentication of the received
  client SubjectPublicKeyInfo via an out-of-band method.
</t>
</section>

<section title="Server Authentication">

<t>
  When the TLS server has specified RawPublicKey as the
  server_certificate_type, authentication of the TLS server to the
  TLS client is supported only through authentication of the received
  client SubjectPublicKeyInfo via an out-of-band method.
</t>

</section>

 </section>


	  <!-- ******************************************************************************************** -->


<section anchor="Examples" title="Examples">

<t>Figures <xref target="flow1" format="counter" />, <xref target="flow2"
format="counter"/>, and <xref target="flow3" format="counter"/> illustrate example exchanges.  Note
  that TLS ciphersuites using a Diffie-Hellman exchange offering
  forward secrecy can be used with a raw public key, although this
  document does not show the information exchange at that level with
  the subsequent message flows.
</t>   

  <section title="TLS Server Uses a Raw Public Key">

<t>
  This section shows an example where the TLS client indicates its
  ability to receive and validate a raw public key from the server. 
 In this example, the
  client is quite restricted since it is unable to process other certificate
  types sent by the server. It also does not have credentials at the TLS layer
  it could send to the server and therefore omits the client_certificate_type
 extension. Hence, the client only populates the server_certificate_type extension with the raw public key type, as shown in (1).</t>
    <t>When the TLS server receives the client hello, it 
    processes the extension. Since it has a raw public key, it indicates 
  in (2) that it had chosen to place the SubjectPublicKeyInfo structure into the Certificate 
      payload (3).</t>
    
    <t>The client uses this raw public key in the TLS handshake together with an out-of-band validation technique, 
  such as DANE, to verify it.</t>
  
  <t>
<figure anchor="flow1" title="Example with Raw Public Key Provided by the TLS Server">
<artwork><![CDATA[ 
client_hello,
server_certificate_type=(RawPublicKey) // (1)
                       -> 
                       <- server_hello,
                          server_certificate_type=RawPublicKey, // (2)
                          certificate, // (3)
                          server_key_exchange,
                          server_hello_done

client_key_exchange,
change_cipher_spec,
finished               ->

                       <- change_cipher_spec,
                          finished

Application Data       <-------> Application Data
]]></artwork>
</figure>
</t>

</section>
     
     <section title="TLS Client and Server Use Raw Public Keys">

     <t>
  This section shows an example where the TLS client as well as the TLS
  server use raw public keys.  This is one of the use cases envisioned
  for smart object networking.  The TLS client in this case is an
  embedded device that is configured with a raw public key for use with
  TLS and is also able to process a raw public key sent by the server.
  Therefore, it indicates these capabilities in (1).  As in the
  previously shown example, the server fulfills the client's request,
  indicates this via the RawPublicKey value in the
  server_certificate_type payload (2), and provides a raw public key in
  the Certificate payload back to the client (see (3)).  The TLS
  server demands client authentication, and therefore includes a
  certificate_request (4).  The client_certificate_type payload in
  (5) indicates that the TLS server accepts a raw public key.  The TLS
  client, which has a raw public key pre-provisioned, returns it in the
  Certificate payload (6) to the server.
     </t>

<t>
<figure anchor="flow2" title="Example with Raw Public Key provided by the TLS Server and the Client">
<artwork><![CDATA[ 
client_hello,
client_certificate_type=(RawPublicKey) // (1)
server_certificate_type=(RawPublicKey) // (1)
                         -> 
                         <-  server_hello,
                             server_certificate_type=RawPublicKey // (2)
                             certificate, // (3)
                             client_certificate_type=RawPublicKey // (5)
                             certificate_request, // (4)
                             server_key_exchange,
                             server_hello_done

certificate, // (6)
client_key_exchange,
change_cipher_spec,
finished                  ->

                         <- change_cipher_spec,
                            finished

Application Data        <------->     Application Data
]]></artwork>
</figure>
</t>

     </section>
     
<section title="Combined Usage of Raw Public Keys and X.509 Certificates">
<t>
This section shows an example combining a raw public key and an
  X.509 certificate.  The client uses a raw public key for client
  authentication, and the server provides an X.509 certificate.  This
  exchange starts with the client indicating its ability to process
  an X.509 certificate, OpenPGP certificate, or a raw public key, if
  provided by the server.  It prefers a raw public key, since the
  RawPublicKey value precedes the other values in the
  server_certificate_type vector.  Additionally, 
  the client indicates that it has a raw public key for
  client-side authentication (see (1)).  The server chooses to provide its
  X.509
  certificate in (3) and indicates that choice in (2).  For client
  authentication, the server indicates in (4) that it has selected the raw
  public key format and requests a certificate from the client in (5).
  The TLS client provides a raw public key in (6) after receiving and
  processing the TLS server hello message.
</t>

 <t>
<figure anchor="flow3" title="Hybrid Certificate Example">
<artwork><![CDATA[ 
client_hello,
server_certificate_type=(RawPublicKey, X.509, OpenPGP)
client_certificate_type=(RawPublicKey) // (1)
                         ->
                         <-  server_hello,
                             server_certificate_type=X.509 // (2)
                             certificate, // (3)
                             client_certificate_type=RawPublicKey // (4)
                             certificate_request, // (5)
                             server_key_exchange,
                             server_hello_done
certificate, // (6)
client_key_exchange,
change_cipher_spec,
finished                  ->

                          <- change_cipher_spec,
                             finished

Application Data        <------->     Application Data
]]></artwork>
</figure>
</t>

</section>
</section> 



    <section title="Security Considerations" anchor="security">

	<t>The transmission of raw public keys, as described in this document, 
	provides benefits by lowering the over-the-air transmission overhead since 
	raw public keys are naturally smaller than an entire certificate. 
	There are also advantages from a code-size point of view for parsing and
    processing these keys. The cryptographic procedures for associating the 
	public key with the possession of a private key also follows standard 
	procedures.</t>

    <t>However, the main security challenge is how to associate the public 
    key with a specific entity. Without a secure binding between identifier and key, the protocol will be vulnerable to man-in-the-middle attacks. This document assumes that such 
	binding can be made out-of-band, and we list a few examples in <xref target="into"/>. 
	DANE <xref target="RFC6698"/> offers one such approach. 
	
	
	In order to address these vulnerabilities, specifications that make use of the extension need to specify how the identifier and public key are bound. In addition to ensuring the binding is done out-of-band, an implementation also needs to check the status of that binding. 
	</t> 
	<t>
	If public keys are obtained using DANE, these public keys are authenticated via DNSSEC.
	Using pre-configured keys is another out-of-band method for authenticating raw public keys.
	 While pre-configured keys are not suitable for 
	a generic Web-based e-commerce environment, such keys are a reasonable approach
	for many smart object deployments where there is a close relationship between 
	the software running on the device and the server-side communication endpoint. 
	Regardless of the chosen mechanism for out-of-band public key validation, an 
	assessment of the most suitable approach has to be made prior to the start of a 
	deployment to ensure the security of the system.</t>
	
      
      <t>  An attacker might try to influence the handshake exchange to make the
        parties select different certificate types than they would
        normally choose.</t>
        
      <t>For this attack, an attacker must actively change one or more
        handshake messages.  If this occurs, the client and server will
        compute different values for the handshake message hashes.  As a
        result, the parties will not accept each others' Finished messages.
        Without the master_secret, the attacker cannot repair the Finished
        messages, so the attack will be discovered.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>IANA has registered a new value in the "TLS Certificate Types"
subregistry of the "Transport Layer Security (TLS) Extensions" registry <xref
target="TLS-Ext-Registry"/>, as follows:</t>

<t>
<figure>
<artwork><![CDATA[ 
Value: 2
Description: Raw Public Key
Reference: RFC 7250
]]></artwork>
</figure>
</t>

     <t>
  IANA has allocated two new TLS extensions, client_certificate_type and
  server_certificate_type, from the "TLS ExtensionType Values" subregistry
  defined in <xref target="RFC5246"/>.
   These extensions are used in both
   the client hello message and the server hello message.  The new
   extension types are used for certificate type negotiation. The values carried in these extensions 
   are taken from the "TLS Certificate Types" subregistry of the "Transport Layer Security (TLS) Extensions" registry <xref target="TLS-Ext-Registry"/>.
     </t>

    </section>

  <section title="Acknowledgements" anchor="acknowledgements">
      <t>The feedback from the TLS working group meeting at IETF 81 has 
	     substantially shaped the document, and we would like to thank the 
	     meeting participants for their input.  The support for hashes of 
	     public keys has been moved to <xref
	     target="CACHED-INFO"/> after the discussions at the
	     IETF 82 
	     meeting.</t>
	     
      <t>We would like to thank the following persons for their review comments: Martin Rex, Bill Frantz, Zach Shelby, 
        Carsten Bormann, Cullen Jennings, Rene Struik, Alper Yegin, Jim Schaad, Barry Leiba, Paul Hoffman, Robert Cragie, Nikos Mavrogiannopoulos, Phil Hunt, John Bradley, Klaus Hartke, Stefan Jucker, Kovatsch Matthias, Daniel Kahn Gillmor, Peter Sylvester, Hauke Mehrtens, Alexey Melnikov, Stephen Farrell, Richard Barnes, and James Manger. Nikos Mavrogiannopoulos contributed the design for reusing the certificate type registry. Barry Leiba contributed guidance for the IANA Considerations text. Stefan Jucker, Kovatsch Matthias, and Klaus Hartke provided implementation feedback regarding the SubjectPublicKeyInfo structure.</t>
    <t>Christer Holmberg provided the General Area (Gen-Art) review, Yaron Sheffer provided the Security Directorate (SecDir) review, Bert Greevenbosch provided the Applications Area Directorate review, and Linda Dunbar provided the Operations Directorate review.</t>
	  <t>We would like to thank our TLS working group chairs, Eric Rescorla and Joe Salowey, for their guidance and support. Finally, we would like to thank Sean Turner, who is the responsible Security Area Director for this work, for his review comments and suggestions.</t>
      </section>

  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>


<references title="Normative References">

<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?>
<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml"?>

  <reference anchor='TLS-Ext-Registry' target='http://www.iana.org/assignments/tls-extensiontype-values'>
       <front>
       <title>Transport Layer Security (TLS) Extensions</title>
       <author>
       <organization>IANA</organization></author>
<date/>
       </front>

    </reference>

   <reference anchor='PKIX'>
      <front>
      <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
      <author initials='D.' surname='Cooper' fullname='D. Cooper'>
      <organization /></author>
      <author initials='S.' surname='Santesson' fullname='S. Santesson'>
      <organization /></author>
      <author initials='S.' surname='Farrell' fullname='S. Farrell'>
      <organization /></author>
      <author initials='S.' surname='Boeyen' fullname='S. Boeyen'>
      <organization /></author>
      <author initials='R.' surname='Housley' fullname='R. Housley'>
      <organization /></author>
      <author initials='W.' surname='Polk' fullname='W. Polk'>
      <organization /></author>
      <date year='2008' month='May' />
      </front>
      <seriesInfo name='RFC' value='5280' />
      <format type='TXT' octets='352580' target='ftp://ftp.isi.edu/in-notes/rfc5280.txt' />
   </reference>

  <reference anchor='X.690'>
      <front>
      <title>Information technology - ASN.1 encoding rules: Specification of
      Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and
      Distinguished Encoding Rules (DER)</title>
       <author>
       <organization>ITU-T</organization></author>
      <date year='2002' />
      </front>
<seriesInfo name="ITU-T Recommendation" value="X.690"/>
<seriesInfo name="ISO/IEC" value="8825-1:2002"/>
   </reference>
   
<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.3279.xml"?> 
<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5480.xml"?> 

</references>

<references title="Informative References">
<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6698.xml"?>  


<!-- draft-ietf-core-coap in same cluster -->

<reference anchor='CoAP'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>

<author initials='Z' surname='Shelby' fullname='Zach Shelby'>
    <organization />
</author>

<author initials='K' surname='Hartke' fullname='Klaus Hartke'>
    <organization />
</author>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<date month='May' year='2014' />


</front>

<seriesInfo name='RFC' value='7252' />

</reference>
  

<!-- draft-ietf-tls-cached-info: I-D Exists -->
<reference anchor='CACHED-INFO'>
<front>
<title>Transport Layer Security (TLS) Cached Information Extension</title>

<author initials='S' surname='Santesson' fullname='Stefan Santesson'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<date month='February' day='14' year='2014' />

<abstract><t>Transport Layer Security (TLS) handshakes often include fairly static information, such as the server certificate and a list of trusted Certification Authorities (CAs).  This information can be of considerable size, particularly if the server certificate is bundled with a complete certificate chain (i.e., the certificates of intermediate CAs up to the root CA).  This document defines an extension that allows a TLS client to inform a server of cached information, allowing the server to omit already available information.</t></abstract>

</front>
<seriesInfo name="Work" value="in Progress"/>

</reference>


   <reference anchor='LDAP'>
      <front>
      <title>Lightweight Directory Access Protocol (LDAP): The Protocol</title>
      <author initials='J.' surname='Sermersheim' fullname='J. Sermersheim'>
      <organization /></author>
      <date year='2006' month='June' />      
      </front>
      <seriesInfo name='RFC' value='4511' />
      <format type='TXT' octets='150116' target='http://www.rfc-editor.org/rfc/rfc4511.txt' />
   </reference>
   
    <reference anchor='Defeating-SSL' target='http://www.blackhat.com/presentations/bh-dc-09/Marlinspike/BlackHat-DC-09-Marlinspike-Defeating-SSL.pdf'>
       <front>
       <title>New Tricks for Defeating SSL in Practice</title>
       <author initials='M.' surname='Marlinspike' fullname='Moxie Marlinspike'>
       <organization /></author>
       <date year='2009' month='February' />
       </front>
       <format type='PDF' target='http://www.blackhat.com/presentations/bh-dc-09/Marlinspike/BlackHat-DC-09-Marlinspike-Defeating-SSL.pdf' />
    </reference>

    <reference anchor='ASN.1-Dump' target='http://www.cs.auckland.ac.nz/~pgut001/'>
       <front>
       <title>ASN.1 Object Dump Program</title>
       <author initials='P.' surname='Gutmann' fullname='Peter Gutmann'>
       <organization /></author>
       <date year='2013' month='February' />
       </front>
       <format type='HTML' target='http://www.cs.auckland.ac.nz/~pgut001/' />
    </reference>
    
    
    
</references>
<section anchor="Example" title="Example Encoding"> 

<t>For example, the hex sequence shown in <xref target="example1"/> describes a SubjectPublicKeyInfo structure inside the certificate payload.</t>
<t>
<figure anchor="example1" title="Example SubjectPublicKeyInfo Structure Byte Sequence">
<artwork><![CDATA[
       0     1     2     3     4     5     6     7     8     9
   +------+-----+-----+-----+-----+-----+-----+-----+-----+-----
1  | 0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 
2  | 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 
3  | 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xcd, 
4  | 0xfd, 0x89, 0x48, 0xbe, 0x36, 0xb9, 0x95, 0x76, 0xd4, 0x13, 
5  | 0x30, 0x0e, 0xbf, 0xb2, 0xed, 0x67, 0x0a, 0xc0, 0x16, 0x3f, 
6  | 0x51, 0x09, 0x9d, 0x29, 0x2f, 0xb2, 0x6d, 0x3f, 0x3e, 0x6c, 
7  | 0x2f, 0x90, 0x80, 0xa1, 0x71, 0xdf, 0xbe, 0x38, 0xc5, 0xcb, 
8  | 0xa9, 0x9a, 0x40, 0x14, 0x90, 0x0a, 0xf9, 0xb7, 0x07, 0x0b, 
9  | 0xe1, 0xda, 0xe7, 0x09, 0xbf, 0x0d, 0x57, 0x41, 0x86, 0x60, 
10 | 0xa1, 0xc1, 0x27, 0x91, 0x5b, 0x0a, 0x98, 0x46, 0x1b, 0xf6, 
11 | 0xa2, 0x84, 0xf8, 0x65, 0xc7, 0xce, 0x2d, 0x96, 0x17, 0xaa, 
12 | 0x91, 0xf8, 0x61, 0x04, 0x50, 0x70, 0xeb, 0xb4, 0x43, 0xb7, 
13 | 0xdc, 0x9a, 0xcc, 0x31, 0x01, 0x14, 0xd4, 0xcd, 0xcc, 0xc2, 
14 | 0x37, 0x6d, 0x69, 0x82, 0xd6, 0xc6, 0xc4, 0xbe, 0xf2, 0x34, 
15 | 0xa5, 0xc9, 0xa6, 0x19, 0x53, 0x32, 0x7a, 0x86, 0x0e, 0x91, 
16 | 0x82, 0x0f, 0xa1, 0x42, 0x54, 0xaa, 0x01, 0x02, 0x03, 0x01, 
17 | 0x00, 0x01
]]></artwork>
</figure>
</t>

<t>The decoded byte sequence shown in <xref target="example1"/> (for example,
using Peter Gutmann's ASN.1 decoder <xref target="ASN.1-Dump"/>) illustrates the structure, as shown in <xref target="example2"/>.</t>
<t>
<figure anchor="example2" title="Decoding of Example SubjectPublicKeyInfo Structure">
<artwork><![CDATA[ 
Offset  Length   Description
-------------------------------------------------------------------
   0     3+159:   SEQUENCE {
   3      2+13:     SEQUENCE {
   5       2+9:      OBJECT IDENTIFIER Value (1 2 840 113549 1 1 1)
              :             PKCS #1, rsaEncryption
  16       2+0:      NULL
              :      }
  18     3+141:    BIT STRING, encapsulates {
  22     3+137:      SEQUENCE {
  25     3+129:        INTEGER Value (1024 bit)
 157       2+3:        INTEGER Value (65537)
              :        }
              :      }
              :    }              
]]></artwork>
</figure>
</t>

</section> 

  </back>
</rfc>
