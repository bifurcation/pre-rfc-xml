<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
	  <!ENTITY rfc2119 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
	  <!ENTITY rfc2863 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2863.xml'>
	  <!ENTITY rfc0792 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.0792.xml'>
	  <!ENTITY rfc1812 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1812.xml'>
	  <!ENTITY rfc2277 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2277.xml'>
	  <!ENTITY rfc3629 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml'>
	  <!ENTITY rfc4443 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4443.xml'>
	  <!ENTITY rfc4884 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4884.xml'>
	  <!ENTITY rfc3022 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3022.xml'>
	  <!ENTITY rfc1122 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1122.xml'>
	  <!ENTITY rfc5508 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5508.xml'>
	]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<rfc number="5837" category="std" ipr="pre5378Trust200902">
	<?rfc toc="yes" ?>
	<?rfc compact="yes"?>
	<?rfc subcompact="no"?>
	<?rfc symrefs="yes" ?>
	<?rfc sortrefs="yes"?>
	<?rfc rfcedstyle="yes"?>
	<front>
		<title abbrev="ICMP Unnumbered"> Extending ICMP for Interface and Next-Hop Identification </title>
		<author initials="A" surname="Atlas" fullname="Alia K. Atlas" role="editor">
			<organization>BT</organization>
			<address>
				<email>alia.atlas@bt.com</email>
			</address>
		</author>
		<author initials="R" surname="Bonica" fullname="Ronald P. Bonica" role="editor">
			<organization>Juniper Networks</organization>
			<address>
				<postal>
					<street>2251 Corporate Park Drive</street>
					<city>Herndon</city>
					<region>VA</region>
					<code>20171</code>
					<country>USA</country>
				</postal>
				<email>rbonica@juniper.net</email>
			</address>
		</author>
		      <author fullname="Carlos Pignataro" initials="C.M."
       surname="Pignataro" role = "editor">
      <organization>Cisco Systems</organization>
      <address>
          <postal>
              <street>7200-12 Kit Creek Road</street>
              <street>PO Box 14987</street>
              <city>Research Triangle Park</city>
              <code>27709</code>
              <region>NC</region>
              <country>USA</country>
          </postal>
          <email>cpignata@cisco.com</email>
          </address>
      </author>

		<author initials="N" surname="Shen" fullname="Naiming Shen">
			<organization>Cisco Systems</organization>
			<address>
				<postal>
					<street>225 West Tasman Drive</street>
					<city>San Jose</city>
					<region>CA</region>
					<code>95134</code>
					<country>USA</country>
				</postal>
				<email>naiming@cisco.com</email>
			</address>
		</author>

		<author initials="JR" surname="Rivers" fullname="JR. Rivers">
          <organization>Consultant</organization>
          <address>
              <email>jrrivers@yahoo.com</email>
			</address>
		</author>

		<date month="April" year="2010"/>
		<area>Internet</area>

       <keyword>ICMP Unnumbered</keyword>
       <keyword>ICMP Interface Identification</keyword>
       <keyword>ICMP Next Hop Identification</keyword>

       <abstract>
          <t>This memo defines  a data structure that can be appended 
              to selected ICMP messages.  The ICMP extension defined 
              herein can be used to identify any combination of the 
              following: the IP interface upon which a  datagram 
              arrived, the sub-IP component of an IP interface upon 
              which a datagram arrived, the IP interface through which 
              the datagram would have been forwarded had it been 
              forwardable, and the IP next hop to which the datagram would 
              have been forwarded.</t>
			<t>Devices can use this ICMP extension  to identify  interfaces and their components by any combination of the following: ifIndex, IPv4 address,
IPv6 address, name, and MTU. ICMP-aware devices can use these extensions to identify both numbered and unnumbered interfaces.</t>
		</abstract>
	</front>
	<middle>

		<section anchor="Introduction" title="Introduction">
			<t>
IP devices use the
Internet Control Message Protocol (<xref target="RFC0792">ICMPv4</xref>
and <xref target="RFC4443">ICMPv6</xref>) to convey control
information.  In particular, when an IP device receives a datagram
that it cannot process, it may send an ICMP message to the datagram's
originator. Network operators and higher-level protocols use these
ICMP messages to detect and diagnose network issues.
</t>
			<t>
In the simplest case, the source address of the ICMP message identifies
the interface upon which the datagram arrived. However,
in many cases, the incoming interface is not identified by the ICMP
message at all. Details follow:
</t>
			<t> According to <xref target="RFC1812"/>, when a router
generates an ICMPv4 message, the source address of that message
MUST be one of the following:
</t>
			<t>
				<list style="symbols">
					<t> one of the IP addresses associated with the physical interface over
which the ICMPv4 message is transmitted </t>
					<t> if that interface has no IP addresses associated with it, the
device's router-id or host-id is used instead.</t>
				</list>
			</t>
			<t>If all of the following conditions are true, the source address of the ICMPv4
message identifies the interface upon which the original
datagram arrived:</t>
			<t>
				<list style="symbols">
					<t>the device sends an ICMPv4 message through the same interface
upon which the original datagram was received</t>
					<t>that interface is numbered</t>
				</list>
			</t>
			<t>However, the incoming and outgoing interfaces may be different
due to an asymmetric return path, which can occur due to asymmetric
link costs, parallel links, or Equal Cost Multipath (ECMP).  </t>
<t>Similarly, <xref target="RFC1122"/> provides guidance for source address selection for multihomed IPv4 hosts. These recommendations, like those stated above, do not always cause the source address of an ICMPv4 message to identify the incoming interface.</t>
			<t>ICMPv6 is 
          somewhat more flexible.  <xref target="RFC4443"/> states 
          that for responses to messages sent to a
non-local interface, the source address must be chosen
as follows:</t>
			<t>
				<list style="symbols">
					<t>the Source Address of the ICMPv6 packet MUST be a unicast address
belonging to the node.  The address SHOULD be chosen according to the
rules that would be used to select the source address for any other
packet originated by the node, given the destination address of the
packet.  However, it MAY be selected in an alternative way if this
would lead to a more informative choice of address reachable from the
destination of the ICMPv6 packet.</t>
				</list>
			</t>
          <t>
             When a datagram that cannot be processed arrives on an 
             unnumbered interface, neither ICMPv4 nor ICMPv6 is 
             currently capable of identifying the incoming interface.  
             Even when an ICMP message is generated such that the ICMP 
             source address identifies the incoming interface, the 
             receiver of that ICMP message has no way of knowing if 
             this is the case. ICMP extensions are required to 
             explicitly identify the incoming interface.
          </t>
			<t>Using the extension defined herein, a device can explicitly
identify the incoming IP interface or its sub-IP components by any combination of the following:</t>
			<t>
				<list style="symbols">
					<t>ifIndex</t>
					<t>IPv4 address</t>
					<t>IPv6 address</t>
					<t>name</t>
					<t>MTU</t>
				</list>
			</t>
			<t>The  interface name SHOULD be identical to the first 63 octets of the ifName, as defined in <xref target="RFC2863"/>. The ifIndex is also defined in <xref target="RFC2863"/>.</t>
			<t>Using the same extension, an IP device can explicitly identify by
the above the outgoing interface over which a datagram would have been
forwarded if that datagram had been deliverable.</t>
			<t>The next-hop IP address, to which the datagram would have been
forwarded, can also be identified using this same extension.  This
information can be used for creating a downstream map.  The next-hop
information may not always be available.  There are corner-cases where it doesn't exist and there may
be implementations where it is not practical to provide this
information.  This specification provides an encoding for providing
the next-hop IP address when it is available.</t>
			<t>The extension defined herein uses the ICMP multi-part message
framework defined in <xref target="RFC4884"/>.  The same backward
compatibility issues that apply to <xref target="RFC4884"/> apply to
this extension.</t>
		</section>

		<section anchor="Conventions" title=" Conventions Used In This Document">
			<t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
"RECOMMENDED",  "MAY", and "OPTIONAL" in this document are to be interpreted as described
in <xref target="RFC2119">RFC 2119</xref>.</t>
		</section>

		<section anchor="applications" title="Applications">
			<section anchor="traceroute" title="Application to Traceroute">
				<t>
ICMP extensions defined in this memo  provide additional capability to
traceroute. An enhanced traceroute application, like older
implementations, identifies nodes that a datagram visited
en route to its destination. It differs from older implementations
in that it can explicitly identify the following at each node:
</t>
<t>
					<list style="symbols">
						<t>the IP interface upon which a datagram arrived</t>
						<t>the sub-IP component of an IP interface upon which a datagram arrived </t>
                      <t>the IP interface through which the datagram 
                          would have been forwarded had it been 
                          forwardable</t>
						<t>the IP next hop to which the datagram would have been forwarded</t>
					</list>
				</t>
				<t>Enhanced traceroute applications can identify the above listed entities by:</t>
							<t>
				<list style="symbols">
					<t>ifIndex</t>
					<t>IPv4 address</t>
					<t>IPv6 address</t>
					<t>name</t>
					<t>MTU</t>
				</list>
			</t>
          <t>
              The ifIndex can be utilized within a management domain 
              to map to an actual interface, but it is also valuable 
              in public applications.  The ifIndex can be used as an 
              opaque token to discern whether or not two ICMP messages 
              generated from the same router involve the same 
              interface.</t>
			</section>
			<section title="Policy and MTU Detection">
				<t>

A general application would be to identify which outgoing interface
triggered a given function for the original packet.  For example, if
an access control list (ACL) drops the packet and Dest Unreachable/Admin Prohibited denies
the packet, being able to identify the outgoing interface might be
useful.  Another example would be to support Path MTU Discovery (PMTUD), 
since this would
allow identification of which outgoing interface can't support a given
MTU size.  For example, knowledge of the problematic interface would
allow an informed request for reconfiguration of the MTU of that interface.
</t>
			</section>
		</section>
		<section anchor="InterfaceObjectClass" title="Interface Information Object">
			<t>
This section defines the Interface Information Object, an ICMP
extension object with a Class-Num (Object Class Value) of 2 that can be 
appended to the following messages:
 </t>

           <t>
				<list style="symbols">
					<t>  ICMPv4 Time Exceeded</t>
					<t> ICMPv4 Destination Unreachable</t>
					<t> ICMPv4 Parameter Problem</t>
					<t> ICMPv6 Time Exceeded</t>
					<t> ICMPv6 Destination Unreachable</t>
				</list>
			</t>
			<t>
For reasons described in <xref target="RFC4884"/>, this extension cannot be appended to any of the currently defined ICMPv4 or ICMPv6 messages other than those listed above.  </t>
			<t>
The extension defined herein MAY be appended to any of the above listed messages and SHOULD be appended  whenever required to identify
an unnumbered interface and when local policy or security considerations do
not supersede this requirement.</t>
			<t>
A single ICMP message can contain as few as zero and as many as four 
instances of the Interface Information Object. It is illegal if it 
contains more than four instances, because that means that an interface 
role is used more than once (see <xref target="Usage" />).
</t><t>
A single instance of the Interface Information Object can provide 
information regarding any one of the following interface roles: </t>
			<t>
				<list style="symbols">
					    <t>the IP interface upon which a datagram arrived</t>
						<t>the sub-IP component of an IP interface upon which a datagram arrived </t>
                      <t>the IP interface through which the datagram 
                          would have been forwarded had it been 
                          forwardable</t>
						<t>the IP next hop to which the datagram would have been forwarded</t>
				</list>
			</t>
			<t>

The following are examples of sub-IP components of IP interfaces upon which a datagram might arrive: </t>
	<t>
				<list style="symbols">
					    <t>Ethernet Link Aggregation Group Member</t>
						<t>Multilink PPP bundle member</t>
						<t>Multilink frame relay bundle member</t>
						
				</list>
			</t>

			<t>
To minimize the number of octets required for this extension,
there are four different pieces of information that can appear in an
Interface Information Object.  
</t>
			<t>
				<list style="numbers">
					<t> The ifIndex of the interface of interest MAY be included.  This
is the 32-bit ifIndex assigned to the interface by the device as
specified by the <xref target="RFC2863">Interfaces Group
MIB</xref>. </t>
                  <t> An IP Address Sub-Object  MAY be included if 
                      either of the following conditions is true: a) 
                      the eliciting datagram is IPv4 and the 
                      identified interface has at least one IPv4 
                      address associated with it, or b) the eliciting 
                      datagram is IPv6 and the identified interface 
                      has at least one IPv6 address associated with 
                      it. The IP Address Sub-Object is described in  
                      <xref target="name_addr"/> of this memo.</t>
					
					<t> An Interface Name Sub-Object, containing a string of no more
than 63 octets, MAY be included.  That string, as specified in
<xref target="name_so"/>, is the interface name and SHOULD
be the MIB-II ifName <xref target="RFC2863"/>, but MAY be some other
human-meaningful name of the interface. </t>
<t>A 32-bit unsigned integer reflecting the MTU MAY be included.</t>
				</list>
			</t>
			<section title="C-Type Meaning in an Interface Information Object">
              <t>For this object, the C-Type <xref target="RFC4884" /> 
                  is used to indicate both the role of
the interface and the information that is included.  This is
illustrated in <xref target="ctype" />.</t>
				<figure align="center" anchor="ctype" title="C-Type for the Interface Information Object">
					<artwork>
Bit     0       1       2       3       4       5       6       7
    +-------+-------+-------+-------+-------+-------+-------+-------+
    | Interface Role| Rsvd1 | Rsvd2 |ifIndex| IPAddr|  name |  MTU  |
    +-------+-------+-------+-------+-------+-------+-------+-------+
</artwork>
				</figure>
				<t>The following are bit-field definitions for C-Type:</t>
				<t>
Interface Role (bits 0-1): These bits indicates the role of the interface being identified.  The enumerated values are given below:</t>
				<t><list>
                   <list style="hanging" hangIndent='10'>
                       <t hangText="Value 0:"> This object describes 
                           the IP interface upon which a datagram 
                           arrived</t>
                       <t hangText="Value 1:"> This object describes 
                           the sub-IP component of an IP interface upon 
                           which a datagram arrived </t>
                       <t hangText="Value 2:"> This object describes 
                           the IP interface through which the datagram 
                           would have been forwarded had it been 
                           forwardable</t>
                       <t hangText="Value 3:"> This object describes 
                           the IP next hop to which the datagram would 
                           have been forwarded</t>
					</list></list>
				</t>
						
				<t>
  Reserved 1  (bit 2): This bit is reserved for future use and MUST be set to 0 and MUST be ignored on receipt.
                   </t>
				<t>
  Reserved 2  (bit 3): This bit is reserved for future use and MUST be set to 0 and MUST be ignored on receipt.
                   </t>
				<t>
  ifIndex (bit 4) : When set,  the 32-bit ifIndex of  the interface is included.  When clear, the ifIndex is not included.
                </t>
				<t>
  IP Addr (bit 5) : When set,  an IP Address Sub-Object is present. When clear, an IP Address Sub-Object  is not present. The IP Address Sub-Object is described in <xref target="name_addr"/> of this memo.
				  </t>
				<t>
  Interface Name (bit 6): When set,  an Interface Name Sub-Object  is included.  When clear, it is not included. The Name Sub-Object is described in <xref target="name_so"/> of this memo.</t>
  <t>
  MTU (bit 7): When set, a 32-bit integer representing the MTU is present. When clear, this 32-bit integer is not present.
  </t>
				<t>The
information included does not self-identify, so this specification
defines a specific ordering for sending the information that must be
followed.</t>
				<t>If bit 4 (ifIndex) is set, then the 32-bit ifIndex MUST be sent
first.  If bit 5 (IP Address) is set,  an IP Address 
 Sub-Object MUST be sent next. If
bit 6 (Name) is set,  an Interface Name Sub-Object MUST
be sent next.  If bit 7 is set, an MTU MUST be sent next.  The information order is thus: ifIndex, IP Address 
 Sub-Object, 
Interface Name Sub-Object, and MTU. Any or all pieces of information
may be present or absent, as indicated by the C-Type.  Any data that
follows these optional pieces of information MUST be ignored.
</t>
				<t>It is
valid (though pointless until additional bits are assigned by IANA) to
receive an Interface Information Object where bits 4, 5, 6, and 7 are
all 0; this MUST NOT generate a warning or error.</t>
			</section>
			<section title="Interface IP Address Sub-Object" anchor="name_addr">
                      <t><xref target="ifAddr" /> depicts the 
                          Interface Address Sub-Object:</t>
						<figure align="center" anchor="ifAddr" title="Interface Address Sub-Object">
					<artwork>
 0                            31
+-------+-------+-------+-------+
|      AFI      |    Reserved   |
+-------+-------+-------+-------+
|         IP Address   ....
</artwork>
				</figure>
<t>The IP Address Sub-Object contains the following fields:</t>
<t>
<list style="symbols">
  <t>
      Address Family Identifier (AFI): This 16-bit bit field 
      identifies the type of address represented by the IP Address 
      field. It also determines the length of that field and the 
      length of the entire sub-object. Values for this field represent 
      a subset of values found in the  IANA registry of Address Family 
      Numbers (available from
      <eref target='http://www.iana.org' />).  Valid values are 1 
      (representing a 32&nbhy;bit IPv4 address) and 2 (representing a 
      128-bit IPv6 address).</t>
<t>Reserved: This 16-bit field MUST be set to zero and ignored upon receipt.</t>
<t>IP Address: This variable-length field represents an IP address associated with the identified interface.</t>
</list>
</t>
<t>If the eliciting datagram  was IPv4, the IP Interface Sub-Object MUST represent an IPv4 address. Likewise, if the  eliciting datagram was IPv6, the IP Interface Sub-Object MUST represent an IPv6 address.
</t>
</section>
			<section title="Interface Name Sub-Object" anchor="name_so">
			<t><xref target="ifname" /> depicts the Interface Name Sub-Object:</t>
						<figure align="center" anchor="ifname" title="Interface Name Sub-Object">
					<artwork>
octet    0        1                                   63
     +--------+-----------................-----------------+
     | length |   interface name octets 1-63               |
     +--------+-----------................-----------------+
</artwork>
				</figure>
				
<t>The Interface Name
Sub-Object MUST have a length that is a multiple of 4 octets and MUST
NOT exceed 64 octets. </t>
				
<t>The Length field represents the length of the Interface Name
Sub-Object, including  the length and the interface name in octets.  The maximum valid length is 64 octets.
The length is constrained to ensure there is space for the start of
the original packet and additional information.  </t><t>The second field
contains the human-readable interface name.

The interface name SHOULD be the full MIB-II ifName <xref target="RFC2863"/>, if less than 64 octets, or the first 63 octets of
the ifName, if the ifName is longer.  The interface name MAY be some
other human-meaningful name of the interface.  It is useful to provide
the ifName for cross-correlation with other MIB information and for
human-reader familiarity. The interface name MUST be padded with ASCII NULL characters if the object would not otherwise terminate on a 4-octet boundary.</t>
<t>The  interface name MUST be represented in  the UTF-8 charset <xref target="RFC3629"/>
using the Default Language <xref target="RFC2277"/>.</t>

			</section>
			<section title="Interface Information Object Examples">
				<t>
					<xref target="full_icmp"/> shows a full ICMPv4 Time Exceeded
message, including the Interface Information Object, which must be
preceded by an ICMP Extension Structure Header and an ICMP Object
Header. Both are defined in <xref target="RFC4884"/>.</t>
				
				<t>Although examples show an Interface Name Sub-Object of
length 64, this is only for illustration and depicts the maximum
allowable length.</t>
				<figure align="center" anchor="full_icmp" title="ICMPv4 Time Exceeded Message with Interface Information Object">
					<artwork>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |     Type      |     Code      |          Checksum             |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |     unused    |    Length     |          unused               |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |      Internet Header + leading octets of original datagram    |
 |                                                               |
 |                           //                                  |
 |                                                               |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | Ver=2 |      (Reserved)       |           Checksum            |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |             Length            |Class-Num=2 | C-Type=00001010b |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                    Interface ifIndex                          |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                Interface Name Sub-Object, 32-bit word 1       |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
...                                                             ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                Interface Name Sub-Object, 32-bit word 16      |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
				</figure>
				<t>
					<xref target="example1"/> depicts an Interface Information
Object representing an incoming interface identified by ifIndex and
					Name.</t>


				<figure align="center" anchor="example1" title="Incoming Interface: By ifIndex and Name">
					<artwork>
      Class-Num = 2
      C-Type = 00001010b   // Indicates incoming interface
      Length = 72 (4 + 4 + 64)

         0              1              2              3
 +--------------+--------------+--------------+--------------+
 |                    Interface ifIndex                      |
 +--------------+--------------+--------------+--------------+
 |    Length    |      Name, word 1                          |
 +--------------+--------------+--------------+--------------+
...                                                         ...
 +--------------+--------------+--------------+--------------+
 |                     Name, word 16                         |
 +--------------+--------------+--------------+--------------+
</artwork>
				</figure>
<t>
					<xref target="example2"/> depicts an Interface Information
Object representing an incoming interface identified by ifIndex, IPv4 Address, and Name.</t>
				<figure align="center" anchor="example2" title="Incoming Interface: by ifIndex, IPv4 Address, and Name">
					<artwork>
      Class-Num = 2
      C-Type = 00001110b   // Indicates incoming interface
      Length = 80 (4 + 4 + 8 + 64)
 
         0              1              2              3
 +--------------+--------------+--------------+--------------+
 |                    Interface ifIndex                      |
 +--------------+--------------+--------------+--------------+
 |             AFI             |          Reserved           |
 +--------------+--------------+--------------+--------------+
 |                    IPv4 address                           |
 +--------------+--------------+--------------+--------------+
 |    Length    |      Name, word 1                          |
 +--------------+--------------+--------------+--------------+
...                                                         ...
 +--------------+--------------+--------------+--------------+
 |                     Name, word 16                         |
 +--------------+--------------+--------------+--------------+
</artwork>
				</figure>
				<t>
					<xref target="example3"/> depicts an Interface Information
Object representing an incoming interface identified by ifIndex and IPv6 Address.</t>
				<figure align="center"
					anchor="example3"
					title="Incoming Interface: By
					       ifIndex and IPv6
					       Address">


				<artwork>
    Class-Num = 2
    C-Type = 00001100b   // Indicates incoming interface
    Length = 28 (4 + 4 + 20)

       0              1              2              3
+--------------+--------------+--------------+--------------+
|                    Interface ifIndex                      |
+--------------+--------------+--------------+--------------+
|             AFI             |          Reserved           |
+--------------+--------------+--------------+--------------+
|                    IPv6 address, 32-bit word 1            |
+--------------+--------------+--------------+--------------+
|                    IPv6 address, 32-bit word 2            |
+--------------+--------------+--------------+--------------+
|                    IPv6 address, 32-bit word 3            |
+--------------+--------------+--------------+--------------+
|                    IPv6 address, 32-bit word 4            |
+--------------+--------------+--------------+--------------+
</artwork>
				</figure>
<t>
					<xref target="example4"/> depicts an Interface Information
Object representing an outgoing interface identified by ifIndex and Name.</t>
				<figure align="center" anchor="example4" title="Outgoing Interface: By ifIndex and Name">
					<artwork>
    Class-Num = 2
    C-Type = 10001010b   // Indicates outgoing interface
    Length = 72 (4 + 4 + 64)
 
         0              1              2              3
 +--------------+--------------+--------------+--------------+
 |                    Interface ifIndex                      |
 +--------------+--------------+--------------+--------------+
 |    Length    |      Name, word 1                          |
 +--------------+--------------+--------------+--------------+
...                                                         ...
 +--------------+--------------+--------------+--------------+
 |                     Name, word 16                         |
 +--------------+--------------+--------------+--------------+
</artwork>
				</figure>
			</section>
          <section anchor="Usage" title="Usage">
				<t>Multiple Interface
Information Objects MAY be included within a single ICMP message, provided that each Interface Information Object specifies a unique role. A single ICMP message MUST NOT contain two Interface Information Objects that specify the same role.</t>

<t>ifIndex, MTU, and name information MAY be included whenever it is available; more than one instance of each of these three information elements MUST NOT be included per Interface Information Object.</t>
<t>A single instance of IP Address information MAY be included in an 
  Interface Information Object under the following circumstances:</t>
	<t>
				<list style="symbols">
					    <t>if the eliciting datagram is IPv4 and an IPv4 address is associated with the identified interface. In this case, if an IP Address Sub-Object is included, it must specify an IPv4 address.</t>
						<t>if the eliciting datagram is IPv6 and an IPv6 address is associated with the identified interface. In this case, if an IP Address Sub-Object is included, it must specify an IPv6 address.</t>
						
						
				</list>
	</t>
	<t>In all other circumstances, IP address information MUST NOT be
             included.</t>
	<t>An ICMP message that does not conform to these rules and
	contains multiple instances of the same information is
	considered illegal; specifically, an ICMP message containing
	more than one Interface Information Object with the same role,
	as well as an ICMP message containing a duplicate information
	element in a given role are considered illegal.  If such an illegal ICMP message is received, it MUST be silently discarded. </t>		</section>
		</section>
		<section title="Network Address Translation Considerations">
			<t>
				<xref target="RFC5508"/> encourages Traditional IP
Network Address Translators (Traditional NATs; see <xref target="RFC3022"/>) to support ICMP extension objects.  This document
defines an ICMP extension that includes IP addresses and therefore
contains realm-specific information, and consequently describes
possible NAT behaviors in the presence of these extensions.</t>
          <t>NAT devices MUST NOT translate or overwrite the ICMP 
              extensions described herein. That is, they MUST either 
              remove the extension entirely or pass it unchanged.</t>
			<t>It is conceivable that a NAT device might translate an ICMP header without translating the extension defined herein. In this case, the ICMP message might contain two instances of the same address, one translated and the other untranslated. Therefore, application developers should not assume addresses in the extension are of the same
realm as the addresses in the datagram's header.
</t>
			<t>It also is conceivable that a NAT device might translate an ICMPv4 message into ICMPv6 or vice versa. If that were to occur, applications might receive ICMPv6 messages that contain IP Address Sub-Objects that specify IPv4 addresses. Likewise, applications might receive ICMPv4 messages that contain IP Address Sub-Objects that specify IPv6 addresses.</t>
	
		</section>
		<section anchor="Security Considerations" title="Security Considerations">
          <t>This extension can provide the user of traceroute with 
              additional network information that is not currently 
              available. Implementations SHOULD provide configuration 
              switches that suppress the generation of this extension 
              based upon role (i.e., incoming interface, outgoing 
              interface, sub-IP data). Implementations SHOULD also 
              provide configuration switches that conceal various 
              types of information (e.g., ifIndex, interface 
              name).</t>
          <t> It may be
desirable to provide this information to a particular network's
operators and not to others.  If such policy controls are desirable,
then an implementation could determine what sub-objects to include
based upon the destination IP address of the ICMP message that will
contain the sub-objects.  The implementation of policy controls could
also be based upon the mechanisms described in <xref target="TRACEROUTE-EXT"/> for those limited cases
supported.</t>
			<t>For instance, the IP address may be included for all potential
recipients.  The ifIndex and interface name could be included as well
if the destination IP address is a management address of the network
that has administrative control of the router.
</t>
			<t>Another example use case would be where the detailed information in
these extensions may be provided to ICMP destinations within the local
administrative domain, but only traditional information is provided to
'external' or untrusted ICMP destinations.</t>
<t>The intended field of use for the extensions defined in this document 
  is administrative debugging and troubleshooting. The extensions 
  herein defined supply additional information in ICMP responses.  
  These mechanisms are not intended to be used in non-debugging 
  applications.</t><t>This document does not specify an authentication 
  mechanism for the extension that it defines. Application developers 
  should be aware that ICMP messages and their contents are easily 
  spoofed.</t>
		</section>
		<section anchor="IANAConsiderations" title="IANA Considerations">
			<t>
IANA has reserved 2 for the Interface Information Object 
from the ICMP Extension Object Classes registry
available from <eref target='http://www.iana.org' />.
</t>
          <t>From the Interface Information Object's C-Type, IANA 
              has reserved values as follows:</t>
			<t>
				<list style="symbols">
					<t> Bit 0-1: Interface Role field</t>
					<t> Bit 2: Unallocated - allocatable with Standards Action</t>
					<t> Bit 3: Unallocated - allocatable with Standards Action</t>
					<t> Bit 4: ifIndex included </t>
					<t> Bit 5: IP Address Sub-Object included</t>
					<t> Bit 6: Name Sub-Object included</t>
					<t> Bit 7: MTU included</t>
				</list>
			</t>
			<t>IANA has reserved the following values for Interface Role:</t>
			<t>
				<list style="symbols">
					<t>Value 0: Incoming IP Interface</t>
					<t>Value 1: Sub-IP Component of Incoming IP Interface</t>
					<t>Value 2: Outgoing IP Interface</t>
					<t>Value 3: IP Next Hop</t>
				</list>
			</t>
		</section>
		<section title="Acknowledgments">
			<t>The authors would like to thank Sasha Vainshtein, Enke Chen,
and Joe Touch for their comments and suggestions. They would also like to thank Dr. Ali Assefi.</t>
		</section>
	</middle>
	<back>
		<references title="Normative References">
&rfc0792;
&rfc2119;
&rfc2863;
&rfc3629;
&rfc4443;
&rfc4884;

</references>
		<references title="Informative References">
&rfc1812;
&rfc1122;
&rfc2277;
&rfc3022;
&rfc5508;

<!--  shen-udp-traceroute-ext -->
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='TRACEROUTE-EXT'>
<front>
<title>UDP Traceroute Message Extension</title>

<author initials='N' surname='Shen' fullname='Naiming Shen'>
   <organization />
</author>

<author initials='C' surname='Pignataro' fullname='Carlos Pignataro'>
   <organization />
</author>

<author initials='R' surname='Asati' fullname='Rajiv  Asati'>
   <organization />
</author>

<author initials='E' surname='Chen' fullname='Enke Chen'>
   <organization />
</author>

<date month='June' day='7' year='2008' />

</front>

<seriesInfo name='Work' value='in Progress'/>

</reference>


		</references>
	</back>
</rfc>
