<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" []>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc strict="yes" ?>
<?rfc rfcedstyle="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc number="5435" category="std">
    <front>
        <title abbrev="Sieve Extension: Notifications">Sieve Email Filtering: Extension for Notifications</title>
        <author initials='A.' surname="Melnikov" fullname="Alexey Melnikov" role="editor">
            <organization>Isode Limited</organization>
            <address>
              <postal>
                <street>5 Castle Business Village</street>
                <street>36 Station Road</street>
                <city>Hampton</city>
                <region>Middlesex</region>
                <code>TW12 2BX</code>
                <country>UK</country>
              </postal>
              <email>Alexey.Melnikov@isode.com</email>
            </address>
        </author>
        <author initials='B.' surname="Leiba" fullname="Barry Leiba" role="editor">
            <organization>IBM T.J. Watson Research Center</organization>
            <address>
              <postal>
                <street>19 Skyline Drive</street>
                <city>Hawthorne</city>
                <region>NY</region>
                <code>10532</code>
                <country>US</country>
              </postal>
              <phone>+1 914 784 7941</phone>
              <email>leiba@watson.ibm.com</email>
            </address>
        </author>
        <author initials='W.' surname="Segmuller" fullname="Wolfgang Segmuller">
            <organization>IBM T.J. Watson Research Center</organization>
            <address>
              <postal>
                <street>19 Skyline Drive</street>
                <city>Hawthorne</city>
                <region>NY</region>
                <code>10532</code>
                <country>US</country>
              </postal>
              <phone>+1 914 784 7408</phone>
              <email>werewolf@us.ibm.com</email>
            </address>
        </author>
        <author initials='T.' surname="Martin" fullname="Tim Martin">
            <organization>Endless Crossword</organization>
            <address>
              <postal>
                <street>672 Haight st.</street>
                <city>San Francisco</city>
                <region>CA</region>
                <code>94117</code>
                <country>US</country>
              </postal>
              <phone>+1 510 260-4175</phone>
              <email>timmartin@alumni.cmu.edu</email>
            </address>
        </author>
        <date month="January" year="2009"/>
        <area>Applications</area>
        <workgroup>Sieve Working Group</workgroup>

        <keyword>Sieve</keyword>
        <keyword>email</keyword>
        <keyword>filter</keyword>
        <keyword>notify</keyword>
        <keyword>notification</keyword>

        <abstract>
          <t>
            Users go to great lengths to be notified as quickly as
            possible that they have received new mail. Most of these
            methods involve polling to check for new messages
            periodically. A push method handled by the final delivery
            agent gives users quicker notifications and saves server
            resources. This document does not specify the notification
            method, but it is expected that using existing instant
            messaging infrastructure such as Extensible Messaging and
            Presence Protocol (XMPP), or Global System for Mobile
            Communications (GSM) Short Message Service (SMS) messages
            will be popular.  This document describes an extension to the
            Sieve mail filtering language that allows users to give
            specific rules for how and when notifications should be
            sent.
          </t>
        </abstract>


    </front>

    <middle>
        <section anchor="intro" title="Introduction">
          <t>
            This is an extension to the Sieve language defined by <xref target="Sieve"/> for
            providing instant notifications. It defines the new action "notify".
          </t>
          <t>
            This document does not specify the notification methods.
            Examples of possible notification methods are email and XMPP.
		To allow for the portability of scripts that use notifications,
            implementation of the <xref target="MailTo"/> method is mandatory.
            Other available methods shall depend upon the implementation and configuration of the system.
          </t>
          
          <section title="Conventions Used in This Document">
            <t>
              Conventions for notations are as in <xref target="Sieve"/>, Section 1.1, including
              the use of <xref target="ABNF"/>.
            </t>
            <t>
              The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
              "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
              document are to be interpreted as described in <xref target="Kwds"/>.
            </t>
          </section>
        </section>

        <section anchor="capability" title="Capability Identifier">
          <t>
            The capability string associated with the extension defined in this
            document is "enotify".
          </t>
        </section>

        <section anchor="notify-action" title="Notify Action">
          <section anchor="syntax" title="Notify Action Syntax and Semantics">
            <t>
              <list style="hanging" hangIndent="8">
                <t hangText="Usage:">
                  notify [":from" string]<vspace/>
                         [":importance" &lt;"1" / "2" / "3"&gt;]<vspace/>
                         [":options" string-list]<vspace/>
                         [":message" string]<vspace/>
						 &lt;method: string&gt;
                </t>
              </list>
            </t>
            <t>
              The "notify" action specifies that a notification should be sent to
              a user.
              The format of the notification is implementation-defined and
              is also affected by the notification method used (see <xref target="tag-method"/>).
              However, all content specified in the ":message" parameter SHOULD be included.
            </t>
          </section>
          <section anchor="tag-method" title='Notify Parameter "method"'>
            <t>
              The "method" positional parameter identifies the notification method that will be
              used; it is a URI <xref target="URI"/>.
              For example, the notification method can be a tel URI <xref target="TEL-URI"/>
	      with a phone number to send SMS messages to,
              or an XMPP <xref target="XMPP"/> URI containing an XMPP
              identifier <xref target="XMPP-URI"/>.
            </t>
            <t>
              The supported URI values will be site-specific, but support for the
              <xref target="MailTo"/> method is REQUIRED in order to ensure interoperability.
			  If a URI schema is
              specified that the implementation does not support, the notification
              MUST cause an error condition at run time.  Sieve scripts can check the supported
              methods using the valid_notify_method test to be sure that they only use
              supported ones, to avoid such error conditions.
            </t>
            <t>
              If the "method" parameter contains a supported URI schema, then the URI MUST
              be checked for syntactic validity.  Invalid URI syntax or an unsupported URI
              extension MUST cause an error. An implementation MAY enforce
              other semantic restrictions on URIs -- for example, to restrict
              phone numbers in a tel: URI to a particular geographical region -- and will treat
              violations of such semantic restrictions as errors.
            </t>
          </section>
            
          <section anchor="tag-from" title='Notify Tag ":from"'>
            <t>A ":from" tag may be used to specify an author of the notification.
               The syntax of this parameter's value is method-specific.
               Implementations SHOULD check the
               syntax according to the notification method specification
               and generate an error when a syntactically invalid ":from"
               tag is specified.
            </t>

            <t>
			   In order to minimize/prevent forgery of the author value,
			   implementations SHOULD impose restrictions on what values can be specified
			   in a ":from" tag. For example, an implementation may restrict this value
			   to be a member of a list of known author addresses or to belong to a particular domain.
			   It is suggested that values that don't satisfy
			   such restrictions simply be ignored rather than causing
			   the "notify" action to fail.
            </t>
          </section>
            
          <section anchor="tag-importance" title='Notify Tag ":importance"'>
            <t>
              The ":importance" tag specifies the importance of quick delivery of
              the notification, as perceived by the Sieve script owner.
              The ":importance" tag is followed by a numeric value represented
              as a string: "1" (high importance), "2" (normal importance),
              and "3" (low importance). If no importance is given,
              the default value "2" SHOULD be assumed.
              A notification method MAY treat the importance value as a transport indicator.
              For example, it might deliver notifications of high importance quicker
              than notifications of normal or low importance.
              Some notification methods allow users to specify their
              state of activity (for example, "busy" or "away from keyboard"). If
              the notification method provides this information, it SHOULD be used
              to selectively send notifications.  If, for example, the user marks
              herself as "busy", a notification method can require that
              a notification with importance of "3" is not to be sent;
              however, the user might be notified of a notification with higher importance.
            </t>
            <t>
              If the notification method allows users to filter messages based upon
              certain parameters in the message, users SHOULD be able to filter
              based upon importance. If the notification method does not support
              importance, then this parameter MUST be ignored. An implementation
              MAY include the importance value in the default message, <xref target="tag-message"/>,
              if one is not provided.
            </t>
          </section>
            
          <section anchor="tag-options" title='Notify Tag ":options"'>
            <t>
              The ":options" tag is used to send additional parameters to the notification
              method. Interpretation of the parameters is method-specific. This document
              doesn't specify any such additional parameter.
            </t>
            <t>Each string in the options string list has the following syntax:<vspace/>
              "&lt;optionname&gt;=&lt;value&gt;"<vspace/><vspace/>
              where optionname has the following ABNF <xref target="ABNF"/>:</t>
<t>
<figure><artwork type="ABNF">
   l-d = ALPHA / DIGIT
   l-d-p = l-d / "." / "-" / "_"
   optionname = l-d *l-d-p
   value = *(%x01-09 / %x0B-0C / %x0E-FF)
</artwork></figure>
            </t>
          </section>
            
          <section anchor="tag-message" title='Notify Tag ":message"'>
            <t>
              The ":message" tag specifies the message data to be included in the
              notification. The entirety of the string SHOULD be sent, but
              implementations MAY shorten the message for technical or aesthetic
              reasons. If the ":message" parameter is absent, a default
              implementation-specific message is used. Unless otherwise specified by a particular
              notification mechanism, an implementation default containing
              at least the value of the "From" header field and the value of the
              "Subject" header field is RECOMMENDED.
            </t>
            <t>
              In order to construct more complex messages,
              the notify extension can be used together with the Sieve variables
              extension <xref target="Variables"/>, as shown in the examples below.
            </t>
          </section>

<?rfc needLines="10"?>

          <section anchor="examples" title="Examples">

            <t>
              <figure>
               <artwork><![CDATA[
Example 1:
    require ["enotify", "fileinto", "variables"];

    if header :contains "from" "boss@example.org" {
        notify :importance "1"
            :message "This is probably very important"
			"mailto:alm@example.com";
        # Don't send any further notifications
        stop;
    }

    if header :contains "to" "sievemailinglist@example.org" {
        # :matches is used to get the value of the Subject header
        if header :matches "Subject" "*" {
            set "subject" "${1}";
        }

        # :matches is used to get the value of the From header
        if header :matches "From" "*" {
            set "from" "${1}";
        }

        notify :importance "3"
            :message "[SIEVE] ${from}: ${subject}"
            "mailto:alm@example.com";
        fileinto "INBOX.sieve";
    }
              ]]></artwork>
              </figure>
            </t>

            <t>
              <figure>
               <artwork><![CDATA[
Example 2:
    require ["enotify", "fileinto", "variables", "envelope"];

    if header :matches "from" "*@*.example.org" {
        # :matches is used to get the MAIL FROM address
        if envelope :all :matches "from" "*" {
            set "env_from" " [really: ${1}]";
        }

        # :matches is used to get the value of the Subject header
        if header :matches "Subject" "*" {
            set "subject" "${1}";
        }

        # :matches is used to get the address from the From header
        if address :matches :all "from" "*" {
            set "from_addr" "${1}";
        }

        notify :message "${from_addr}${env_from}: ${subject}"
			"mailto:alm@example.com";
    }
              ]]></artwork>
              </figure>
            </t>
              
            <t>
              <figure>
               <artwork><![CDATA[
Example 3:
    require ["enotify", "variables"];

    set "notif_method"
    "xmpp:tim@example.com?message;subject=SIEVE;body=You%20got%20mail";

    if header :contains "subject" "Your dog" {
        set "notif_method" "tel:+14085551212";
    }
    
    if header :contains "to" "sievemailinglist@example.org" {
        set "notif_method" "";
    }
    
    if not string :is "${notif_method}" "" {
        notify "${notif_method}";
    }

    if header :contains "from" "boss@example.org" {
        # :matches is used to get the value of the Subject header
        if header :matches "Subject" "*" {
            set "subject" "${1}";
        }

        # don't need high importance notification for
        # a 'for your information'
        if not header :contains "subject" "FYI:" {
            notify :importance "1" :message "BOSS: ${subject}"
			       "tel:+14085551212";
        }
    }
               ]]></artwork>
              </figure>
            </t>
          </section>
            
          <section anchor="method-reqs" title='Requirements on Notification Methods Specifications'>
            <t>This section describes requirements for documents that define specific
            Sieve notification methods.
            </t>

            <t>Notification mechanisms MUST NOT add new Sieve tags to the "notify" action.
            </t>

            <t>A notification method MAY allow modification of the
            final notification text -- for example, truncating it if it exceeds
            a length limit or modifying characters that can not be represented
            in the target character set. Characters in the notification text
            that can't be represented by the notification method SHOULD be
            replaced with a symbol indicating an unknown character.
            Allowed modifications MUST be documented
            in the document describing the notification method.</t>

            <t>A notification method MAY ignore parameters specified in the "notify"
            action.</t>
              
            <t>A notification method MAY recommend the default message value to be
            used if the ":message" argument is not specified.</t>
              
            <t>Notifications SHOULD include timestamps, if the notification method allows
			for their transmission outside of the textual message. Implementation methods
			that can only transmit timestamps in the textual message MAY include them
			in the textual message.</t>
			  
            <t>A notification MUST include means to identify/track its origin in order
			to allow a recipient to stop notifications or find out how to contact the sender.
			This requirement is to help with tracking a misconfigured or abusive origin of
			notifications.</t>

            <t>Methods SHOULD NOT include any other extraneous information not
            specified in parameters to the "notify" action.</t>

            <t>Methods MUST specify which URI parameters (if any) must be ignored,
			which ones must be used in the resulting notification, and which ones
			must cause an error.</t>

	    <t>Methods MUST specify what values are returned by the notify_method_capability
			test, <xref target="capas"/>, in particular for the "online" notification-capability.</t>
			  
            <t>If there are errors sending the notification, the Sieve interpreter
            SHOULD ignore the notification and not retry indefinitely.
            The Sieve interpreter MAY throttle notifications; if it does,
            a request to send a notification MAY be silently ignored.
            Documents describing notification methods SHOULD describe how
            retries, throttling, duplicate suppression (if any), etc. are
            to be handled by implementations.
            </t>
              
          </section>

        </section>

        <section anchor="valid" title="Test valid_notify_method">
            <t>
              <list style="hanging" hangIndent="8">
                <t hangText="Usage:">
                  valid_notify_method &lt;notification-uris: string-list&gt;
                </t>
              </list>
            </t>
            <t>
                The valid_notify_method test is true if the notification methods listed in the notification-uris
                argument are supported and they are valid both syntactically (including URI parameters) and semantically
                (including implementation-specific semantic restrictions). This test MUST perform exactly the same validation as would be performed
                on the "method" parameter to the "notify" action.
            </t>
            <t>
                The test is true only if ALL of the listed notification methods are supported and valid.
            </t>
            <t>
              <figure>
               <artwork>
                   <![CDATA[
Example 4 (partial):
          if not valid_notify_method ["mailto:",
                  "http://gw.example.net/notify?test"] {
              stop;
          }
               ]]></artwork>
              </figure>
            </t>
        </section>

		<section anchor="capas" title="Test notify_method_capability">
            <t>
              <list style="hanging" hangIndent="8">
                <t hangText="Usage:">
                  notify_method_capability [COMPARATOR] [MATCH-TYPE]<vspace/>
										   &lt;notification-uri: string&gt;<vspace/>
										   &lt;notification-capability: string&gt;<vspace/>
										   &lt;key-list: string-list&gt;
				</t>
              </list>
            </t>
            <t>
			The notify_method_capability test retrieves the notification capability
			specified by the notification-capability string that is specific to the
			notification-uri and matches it to the values specified
			in the key-list.  The test succeeds if a match occurs.  The type of
			match defaults to ":is", and the default comparator is "i;ascii-casemap".			
			</t>

			<t>The notification-capability parameter is case insensitive.</t>

			<t>
			The notify_method_capability test MUST fail unconditionally if the specified
			notification-uri is syntactically invalid (as determined by the valid_notify_method
			test, <xref target="valid"/>) or specifies an unsupported notification
			method. However this MUST NOT cause an error.
			</t>

            <t>
			The notify_method_capability test MUST fail unconditionally if the specified
			notification-capability item is not known to the Sieve interpreter.  A script MUST NOT fail with an
			error if the item does not exist.  This allows scripts to be written
			that handle nonexistent items gracefully.
			</t>

			<t>
			This document defines a single notification-capability value "online",
			which is described below. Additional notification-capability values may
			be defined by using the procedure defined in <xref target="iana-capa-template"/>.
			</t>
			
			<t>
			The "relational" extension <xref target="Relational"/> adds a match type
			called ":count".  The count of an notify_method_capability test is 0, if the
			returned information is the empty string, or 1. 
			</t>

			<t>
			For the "online" notification-capability, the notify_method_capability test
			can match one of the following key-list values:
			</t>
			 
			<t><list style="symbols">
			<t>"yes" - the entity identified by the notification-uri can receive a notify
			notification immediately.
			Note that even after this value is returned, there is no guarantee that the entity
			would actually be able to receive any notification immediately or even receive
			it at all. Transport errors, recipient policy, etc. can prevent that.</t>

			<t>"no" - the entity identified by the notification-uri is not currently available
			to receive an immediate notification.
			</t>

			<t>"maybe" - the Sieve interpreter can't determine if the entity identified by
			the notification-uri is online or not.</t>
			</list>
			
              <figure>
               <artwork>
                   <![CDATA[
Example 5:
          require ["enotify"];

          if notify_method_capability
                 "xmpp:tim@example.com?message;subject=SIEVE"
                 "Online"
                 "yes" {
              notify :importance "1" :message "You got mail"
                   "xmpp:tim@example.com?message;subject=SIEVE";
          } else {
              notify :message "You got mail" "tel:+14085551212";
          }
               ]]></artwork>
              </figure>
            </t>
        </section>

        <section anchor="url_escape" title="Modifier encodeurl to the 'set' Action">
            <t>
              <list style="hanging" hangIndent="8">
                <t hangText="Usage:">
                  ":encodeurl"
                </t>
              </list>
            </t>
            <t>When the Sieve script specifies both "variables" <xref target="Variables"/>
			and "enotify" capabilities in the "require", a new "set" action modifier
			(see <xref target="Variables"/>) ":encodeurl" becomes available to Sieve
			scripts. This modifier performs percent-encoding of any octet in the string
			that doesn't belong to the "unreserved" set (see <xref target="URI"/>).
		    The percent-encoding procedure is described in <xref target="URI"/>.
            </t>

            <t>The ":encodeurl" modifier has precedence 15.
            </t>

			<t>
              <figure>
               <artwork>
                   <![CDATA[
Example 6:
    require ["enotify", "variables"];

    set :encodeurl "body_param" "Safe body&evil=evilbody";

    notify "mailto:tim@example.com?body=${body_param}";
               ]]></artwork>
              </figure>
            </t>
        </section>
		
        <section anchor="interactions" title="Interactions with Other Sieve Actions">
            <t>
              The "notify" action is compatible with all other actions, and does not
              affect the operation of other actions.  In particular,
              the "notify" action MUST NOT cancel the implicit keep.
            </t>
            <t>
              Multiple executed "notify" actions are allowed.
              Specific notification methods MAY allow multiple notifications
              from the same script to be collapsed into one.
            </t>
        </section>

        <section anchor="security" title="Security Considerations">
          <t>
            Security considerations are discussed in <xref target="Sieve"/>.
            Additionally,
            implementations must be careful to follow the security
            considerations of the specific notification methods.
          </t>
          <t>
            The "notify" action is potentially very dangerous.  The path the
            notification takes through the network may not be secure.  An error
            in the options string may cause the message to be transmitted to
            someone it was not intended for, or may expose information to
            eavesdroppers.
          </t>
          <t>
            Just because a notification is received doesn't mean that
            it was sent by the Sieve implementation.  It might be possible to forge
            notifications or modify parts of valid notifications with some notification methods.
          </t>
          <t>
            Forgery of the ":importance" value (for example, by unauthorized script
	    modification) can potentially result in slowdown in notification delivery.
          </t>
          <t>Note that some components of notifications should not be trusted.
	     For example, the timestamp field can be easily forged or modified
	     when some notification transports are used. Even if the timestamp
	     is believed to be correct by the sender and is not modified in transit,
	     it might be misleading on the receiving system due to clock differences.
          </t>
          <t>
            An organization may have a policy about the forwarding of classified
            information to unclassified networks. Unless the policy is also enforced
            in the module responsible for the generating (or sending) of notifications,
            users can use the extension defined in this document to extract classified
            information and bypass the policy.
          </t>
          <t>
  Notifications can result in loops and bounces.
  Also, allowing a single script to notify multiple destinations can be
  used as a means of amplifying the number of messages in an attack.
  Moreover, if loop detection is not properly implemented, it may be
  possible to set up exponentially growing notification loops. Accordingly,
  Sieve notification methods:

	  <list style="numbers">

  <t>MUST provide mechanisms for avoiding notification loops.</t>

  <t>MUST provide the means for administrators to limit the ability of
      users to abuse notify. In particular, it MUST be possible to
      limit the number of "notify" actions a script can perform. Additionally,
      if no use cases exist for using "notify" with multiple
      destinations, this limit SHOULD be set to 1. Additional limits,
      such as the ability to restrict "notify" to local users, MAY also
      be implemented.</t>

  <t>MUST provide facilities to log the use of "notify" in order to
      facilitate tracking down abuse.</t>

  <t>MAY use script analysis to determine whether or not a given
      script can be executed safely. While the Sieve language is
      sufficiently complex so that full analysis of all possible scripts
      is computationally infeasible, the majority of real-world
      scripts are amenable to analysis.  For example, an
      implementation might allow scripts that it has determined to be
      safe to run unhindered, block scripts that are potentially
      problematic, and subject unclassifiable scripts to additional
      auditing and logging.</t>
	  </list>
          </t>
          <t>
  Allowing "notify" action at all may not be appropriate in situations where
  Sieve scripts are associated with email accounts that are freely-available and/or not trackable to a human
  who can be held accountable for creating message bombs or other
  abuse.
          </t>
          <t>Implementations that construct URIs internally from various notify
		  parameters MUST make sure that all components of such URIs are
		  properly percent-encoded (see <xref target="URI"/>). In particular,
		  this applies to values of the ":from" and ":message" tagged arguments
		  and may apply to the ":options" values.
          </t>

          <t>Header/envelope tests <xref target="Sieve"/>, together with Sieve variables, can
	     be used to extract the list of users to receive notifications from the incoming
	     email message or its envelope.
	     This is potentially quite dangerous, as this can be used for denial-of-service attacks
	     on recipients controlled by the message sender.
	     For this reason, implementations SHOULD NOT allow the use of variables containing values
	     extracted from the email message in the "method" parameter to the "notify" action.

	     Note that violation of this SHOULD NOT may result in the creation
	     of an open relay, i.e., any sender would be able to create specially
	     crafted email messages that would result in notifications delivered
	     to recipients under the control of the sender. In the worst case, this
	     might result in financial loss by the user controlling the Sieve script
	     and/or by recipients of notifications (e.g., if a notification is an
	     SMS message).
          </t>
          <t>
	     Note that the last SHOULD NOT is not a generic prohibition of use
	     of variables in the "notify" action, as controlling the target
	     of a notification by extracting it from user-owned data stores
	     (such as user's Lightweight Directory Access Protocol (LDAP) entry) is considered to be useful.</t>

<t>
It is imperative that whatever implementations use to store the
user-defined filtering scripts protect them from unauthorized
modification, to preserve the integrity of the mail system.  An attacker
who can modify a script can cause mail to be discarded, rejected, or
forwarded to an unauthorized recipient.  In addition, it's possible that
Sieve scripts might expose private information, such as mailbox names or
email addresses of favored (or disfavored) correspondents. Because of
that, scripts SHOULD also be protected from unauthorized retrieval.
          </t>

        </section>
        <section anchor="iana" title="IANA Considerations">

          <section title="Registration of Sieve Extension">

<?rfc subcompact="yes"?>
          <t><list style="hanging">
            <t hangText="To:">iana@iana.org</t>

            <t hangText="Subject:">Registration of new Sieve extension</t>

            <t hangText="Capability name:">enotify</t>

            <t hangText="Description:">adds the "notify" action for notifying user about
            the received message. It also provides two new tests:
	      <list style="empty">
		<t>valid_notify_method checks notification URIs for validity;</t>
		<t>notify_method_capability can check recipients capabilities.</t>
	      </list>
	    </t>

            <t hangText="RFC number:">this RFC</t>

            <t hangText="Contact address:">
            The Sieve discussion list &lt;ietf-mta-filters@imc.org&gt;</t>
	    </list></t>
<?rfc subcompact="no"?>

          <t>
            This information has been added to the list of Sieve extensions
            available from http://www.iana.org/.
          </t>
          </section>

          <section anchor="iana-mech-template" title="New Registry for Sieve Notification Mechanisms">
          <t>
            IANA has created a new registry for Sieve notification mechanisms.
            This registry contains both vendor-controlled notification mechanism names
            (beginning with "vnd.") and IETF-controlled notification mechanism names.
            Vendor-controlled notification mechanism names have the format as defined
            in the following paragraph and may be registered on a
            "First Come First Served" basis <xref target="IANA-GUIDELINES"/>,
            by applying to IANA with the form specified later in this section. Registration
            of notification mechanisms that do not begin with "vnd." are registered
            using a "Specification Required" policy <xref target="IANA-GUIDELINES"/>.
          </t>

          <t>
            Vendor-controlled notification mechanism names MUST have the form
            "vnd.&lt;vendor-name&gt;.&lt;mechanism-name&gt;", where
            &lt;vendor-name&gt; is as specified in the Application Configuration Access Protocol (ACAP) Vendor Subtree registry
            <xref target="ACAP"/>.
          </t>

            <t>
              This defines the template for a new registry for Sieve notification mechanisms, 
              which has been created and is available from http://www.iana.org/.  There are
              no initial entries for this registry.
            </t>

<?rfc subcompact="yes"?>

            <t><list style="hanging">

              <t hangText="To:">iana@iana.org</t>

              <t hangText="Subject:">Registration of new Sieve notification mechanism</t>

              <t hangText="Mechanism name:">[the name of the mechanism]</t>

              <t hangText="Mechanism URI:">[the RFC number of the document that defines the URI used by 
              this mechanism. Different mechanisms MUST use different URI schema.]</t>

              <t hangText="Mechanism-specific options:">[the names of
              any Sieve notify options (as used in the ":options"
              parameter) that are specific to this mechanism, or
              "none"]</t>

              <t hangText="Permanent and readily available reference:">[the RFC number or an URL
              of the document that defines this notification mechanism]</t>

              <t hangText="Person and email address to contact for
              further information:">[the name and email address of the
              technical contact for information about this
              mechanism]</t>
</list></t>
<?rfc subcompact="no"?>
          </section>

          <section anchor="iana-capa-template" title="New Registry for Notification-Capability Parameters">
            <t>

            IANA has created a new registry for the notification-capability parameters
	    of the notify_method_capability test.

            This registry contains both vendor-controlled notification-capability values
            (beginning with "vnd.") and IETF-controlled notification-capability values.
            Vendor-controlled notification-capability values have the format as defined
            in the following paragraph and may be registered on a
            "First Come First Served" basis <xref target="IANA-GUIDELINES"/>,
            by applying to IANA with the form specified later in this section. Registration
            of notification-capability values that do not begin with "vnd." are registered
            using the "Specification Required" policy <xref target="IANA-GUIDELINES"/>.
            </t>

            <t>
            Vendor-controlled notification-capability values MUST have the form
            "vnd.&lt;vendor-name&gt;.&lt;capability-name&gt;", where
            &lt;vendor-name&gt; is as specified in the ACAP Vendor Subtree registry
            <xref target="ACAP"/>.
            </t>

            <t>
            The following template must be used for registering notification-capability parameters:
            </t>
            
	      <?rfc subcompact="yes"?>
	    <t>  <list style="hanging">
		<t hangText="To:">iana@iana.org</t>
		
		<t hangText="Subject:">Registration of a new notification-capability parameter</t>
		
		<t hangText="Capability name:">[the name of the notification-capability]</t>
		
		<t hangText="Description:">[an explanation of the
		purpose of the notification-capability]</t>
		
		<t hangText="Syntax:">[formal definition of allowed values and their syntax]</t>
		
		<t hangText="Permanent and readily available
			     reference(s):">[the RFC number(s) or an URL of the
		  document that defines this notification mechanism]</t>
		
		<t hangText="Contact information:">[the name and email
		  address of the technical contact for information about this mechanism]</t>
	    </list></t>
	    <?rfc subcompact="no"?>
	    
            <t>Below is the registration form for the "online" notification-capability:</t>

	      <?rfc subcompact="yes"?>
	     <t> <list style="hanging">
		<t hangText="To:">iana@iana.org
		</t>
		<t hangText="Subject:">Registration of a new notification-capability parameter
		</t>
		<t hangText="Capability name:">online
		</t>
		<t hangText="Description:">Returns whether the entity identified by the notification-uri
		  parameter to the notify_method_capability test can receive a notify
		  notification immediately.
		</t>
		<t hangText="Syntax:">Can contain one of three values: "yes", "no", and, "maybe". Values
		  MUST be in lowercase.
		</t>
		<t hangText="Permanent and readily available reference(s):">This RFC
		</t>
		<t hangText="Contact information:">The Sieve discussion list &lt;ietf-mta-filters@imc.org&gt;
		</t>
	    </list></t>
	    <?rfc subcompact="no"?>
	    
          </section>
        </section>

        <section anchor="acknowledgements" title="Acknowledgements">
            <t>
              Thanks to Larry Greenfield, Sarah Robeson, Tim Showalter,
              Cyrus Daboo, Nigel Swinson, Kjetil Torgrim Homme,
              Michael Haardt, Mark E. Mallett, Ned Freed, Lisa Dusseault,
              Dilyan Palauzov, Arnt Gulbrandsen, Peter Saint-Andre,
              Sean Turner, Cullen Jennings, and Pasi Eronen
              for help with this document.
            </t>
        </section>
    </middle>

    <back>
        <references title="Normative References">
        
          <reference anchor="Kwds">
            <front>
              <title>Key words for use in RFCs to Indicate Requirement Levels</title>
              <author initials="S." surname="Bradner" fullname="Scott Bradner">
                <organization>Harvard University</organization>
              </author>
              <date month="March" year="1997" />
            </front>
            <seriesInfo name="RFC" value="2119" />
          </reference>
          
          <reference anchor="ABNF">
            <front>
              <title>Augmented BNF for Syntax Specifications: ABNF</title>
              <author initials="D." surname="Crocker" fullname="Dave Crocker" role="editor">
                <organization/>
              </author>
              <author initials="P." surname="Overell" fullname="Paul Overell">
                <organization/>
              </author>
              <date month="January" year="2008" />
            </front>
            <seriesInfo name="STD" value="68" />
            <seriesInfo name="RFC" value="5234" />
          </reference>
          
          <reference anchor="Sieve">
            <front>
              <title>Sieve: An Email Filtering Language</title>
              <author initials="P." surname="Guenther" fullname="Philip Guenther" role="editor">
                <organization>Sendmail, Inc.</organization>
              </author>
              <author initials="T." surname="Showalter" fullname="Tim Showalter"role="editor">
                <organization />
              </author>
              <date month="January" year="2008" />
            </front>
            <seriesInfo name="RFC" value="5228" />
          </reference>

          <reference anchor="Relational">
            <front>
              <title>Sieve Extension: Relational Tests</title>
              <author initials="W." surname="Segmuller" fullname="Wolfgang Segmuller">
                <organization>IBM T.J. Watson Research Center</organization>
              </author>
              <author initials="B." surname="Leiba" fullname="Barry Leiba">
                <organization>IBM T.J. Watson Research Center</organization>
              </author>
              <date month="January" year="2008" />
            </front>
            <seriesInfo name="RFC" value="5231" />
          </reference>

          <reference anchor="Variables">
            <front>
              <title>Sieve Extension: Variables</title>
              <author initials="K." surname="Homme" fullname="Kjetil Torgrim Homme">
                <organization>University of Oslo</organization>
              </author>
              <date month="January" year="2008" />
            </front>
            <seriesInfo name="RFC" value="5229" />
          </reference>
          
          <reference anchor="MailTo">
            <front>
              <title>Sieve Notification Mechanism: mailto</title>
              <author initials="B." surname="Leiba" fullname="Barry Leiba">
                <organization>IBM T.J. Watson Research Center</organization>
              </author>
              <author initials="M." surname="Haardt" fullname="Michael Haardt">
                <organization>freenet.de AG</organization>
              </author>
              <date month="January" year="2009" />
            </front>
            <seriesInfo name="RFC" value="5436" />
          </reference>
          
          <reference anchor="URI">
            <front>
              <title abbrev="URI Generic Syntax">Uniform Resource Identifier (URI): Generic Syntax</title>
              <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
                <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
              </author>
              <author initials="R." surname="Fielding" fullname="Roy T. Fielding">
                <organization abbrev="Day Software">Day Software</organization>
              </author>
              <author initials="L." surname="Masinter" fullname="Larry Masinter">
                <organization abbrev="Adobe Systems">Adobe Systems Incorporated</organization>
              </author>
              <date year="2005" month="January"/>
            </front>
            <seriesInfo name="STD" value="66"/>
            <seriesInfo name="RFC" value="3986"/>
            <format type="TXT" octets="141811" target="ftp://ftp.isi.edu/in-notes/rfc3986.txt"/>
            <format type="HTML" octets="200858" target="http://xml.resource.org/public/rfc/html/rfc3986.html"/>
            <format type="XML" octets="165759" target="http://xml.resource.org/public/rfc/xml/rfc3986.xml"/>
          </reference>        
            
        </references>
        
        <references title="Informative References">
       
          <reference anchor="XMPP">
            <front>
              <title>Extensible Messaging and Presence Protocol (XMPP): Core</title>
              <author initials="P." surname="Saint-Andre, Ed." fullname="Peter Saint-Andre">
                <organization>Jabber Software Foundation</organization>
              </author>
              <date month="October" year="2004" />
            </front>
            <seriesInfo name="RFC" value="3920" />
          </reference>
          
          <reference anchor="XMPP-URI">
            <front>
              <title>Internationalized Resource Identifiers (IRIs) and Uniform
                Resource Identifiers (URIs) for the Extensible Messaging and
                Presence Protocol (XMPP)</title>
              <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
                <organization>XSF</organization>
              </author>
              <date month="February" year="2008" />
            </front>
            <seriesInfo name="RFC" value="5122"/>
          </reference>

          <reference anchor="TEL-URI">
            <front>
              <title>The tel URI for Telephone Numbers</title>
              <author initials="H." surname="Schulzrinne" fullname="H. Schulzrinne">
                <organization>Columbia University</organization>
              </author>

              <date month="December" year="2004" />
            </front>
            <seriesInfo name="RFC" value="3966" />
          </reference>

<reference anchor='IANA-GUIDELINES'>

<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='T.' surname='Narten' fullname='Thomas Narten'>
<organization />
</author>
<author initials='H.' surname='Alvestrand' fullname='Harald Tveit Alvestrand'>
<organization />
</author>

<date year='2008' month='May' />

</front>

<seriesInfo name='BCP' value='26' />
<seriesInfo name='RFC' value='5226' />

</reference>

          <reference anchor="ACAP">
            <front>
              <title>ACAP -- Application Configuration Access Protocol</title>
              <author initials="C." surname="Newman" fullname="Chris Newman">
                <organization>Innosoft</organization>
              </author>
              <author initials="J. G." surname="Myers" fullname="J. G. Myers">
                <organization>Netscape</organization>
              </author>
              <date month="November" year="1997" />
            </front>
            <seriesInfo name="RFC" value="2244" />
          </reference>

        </references>
    </back>
</rfc>
