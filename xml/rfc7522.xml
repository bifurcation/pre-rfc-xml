<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<?xml-stylesheet type='text/xsl'
href='http://xml2rfc.tools.ietf.org/authoring/rfc2629.xslt' ?>

<?rfc rfcedstyle="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="std" number="7522" submissionType="IETF" consensus="yes"
     ipr="trust200902">


    <!-- ***** FRONT MATTER ***** -->

    <front>


        <title abbrev="OAuth SAML Assertion Profiles">Security Assertion Markup Language (SAML) 2.0 Profile for&nbsp;OAuth&nbsp;2.0&nbsp;Client&nbsp;Authentication&nbsp;and&nbsp;Authorization&nbsp;Grants</title>

        <author fullname="Brian Campbell" initials="B." surname="Campbell">
            <organization abbrev="Ping Identity">Ping Identity</organization>

            <address>
                <email>brian.d.campbell@gmail.com</email>
            </address>
        </author>

        <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
            <organization abbrev="Salesforce">Salesforce.com</organization>
            <address>
                <email>cmortimore@salesforce.com</email>
            </address>
        </author>

	<author fullname="Michael B. Jones" surname="Jones" initials="M.B.">
	  <organization>Microsoft</organization>
	  <address>
	    <email>mbj@microsoft.com</email>
	    <uri>http://self-issued.info/</uri>
	  </address>
	</author>

      <date month="May" year="2015" />

        <area>Security</area>

        <workgroup>OAuth Working Group</workgroup>


        <keyword>OAuth</keyword>
        <keyword>SAML</keyword>
        <keyword>Assertion</keyword>


        <abstract>
            <t>This specification defines the use of a Security Assertion Markup Language (SAML) 2.0 Bearer Assertion as a means for requesting an OAuth 2.0 access
                token as well as for client authentication.
            </t>
        </abstract>
    </front>

    <middle>
        <section title="Introduction" anchor="Introduction">

            <t>The Security Assertion Markup Language (SAML) 2.0 <xref target="OASIS.saml-core-2.0-os"/>
                is an XML-based framework that allows identity and security information to be shared across security domains.
                The SAML specification, while primarily targeted at providing cross domain Web browser single sign-on (SSO),
                was also designed to be modular and extensible to facilitate use in other contexts.
            </t>

            <t>
              The Assertion, an XML security token, is a fundamental construct of SAML that is often adopted
                for use in other protocols and specifications.

		(Some examples include <xref target="OASIS.WSS-SAMLTokenProfile"/> and <xref target="OASIS.WS-Fed"/>.)
                An Assertion is generally issued by an Identity Provider and consumed by a Service Provider that relies
                on its content to identify the Assertion's subject for security-related purposes.
            </t>

            <t>
                The OAuth 2.0 Authorization Framework <xref target="RFC6749"/> provides
                a method for making authenticated HTTP requests to a resource using an access token.
                Access tokens are issued to third-party clients by an
                authorization server (AS) with the (sometimes implicit) approval of the resource owner.
                In OAuth, an authorization grant is an abstract term used to describe
                intermediate credentials that represent the resource owner
                authorization.  An authorization grant is used by the client to obtain an access token.
                Several authorization grant types are defined to support a wide range
                of client types and user experiences.
                OAuth also allows for the definition of new extension grant types
                to support additional clients or to provide a bridge between OAuth and other trust frameworks.
                Finally, OAuth allows the definition of additional authentication mechanisms to be used by clients when interacting with the authorization server.
            </t>

            <t>
	      "Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants"
	      <xref target="RFC7521"/> 
	      is an abstract extension to OAuth 2.0 that provides a general
	      framework for the use of assertions as client credentials and/or authorization grants with OAuth 2.0.
	      This specification profiles 
	      the OAuth Assertion Framework
	      <xref target="RFC7521"/> 
               to define an extension grant type that uses a SAML 2.0 Bearer Assertion to
               request an OAuth 2.0 access token as well as for use as client credentials.
               The format and processing rules for the SAML Assertion defined in this specification are intentionally similar,
               though not identical, to those in the Web Browser SSO profile defined in
	       the SAML Profiles <xref target="OASIS.saml-profiles-2.0-os"/> specification.
               This specification is reusing, to the extent reasonable, concepts and patterns from that well-established profile.
            </t>

            <t>This document defines how a SAML Assertion can be used to request an access token when a client 
               wishes to utilize an existing trust
               relationship, expressed through the semantics of
	       the SAML Assertion,
               without a direct user approval step at the authorization server.  It also defines 
               how a SAML Assertion can be used as a client authentication mechanism.
               The use of an Assertion for client
               authentication is orthogonal to and separable from using an Assertion as an
               authorization grant.  They can be used either in combination or separately.
               Client assertion authentication is nothing more than an alternative way for a client to authenticate
               to the token endpoint, and it must be used in conjunction with some grant type to form a complete and
               meaningful protocol request. Assertion authorization grants may be used with or without client authentication
               or identification. Whether or not client authentication is needed in conjunction with an assertion authorization
               grant, as well as the supported types of client authentication, are policy decisions at the discretion of the authorization server.
            </t>
            <t>The process by which the client obtains the SAML Assertion, prior to exchanging it with the authorization server or using it for client authentication, is out of scope.</t>


	    <section title="Notational Conventions" anchor="NotationalConventions">
                <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
                    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
                    document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.
                </t>
                <t>
                    Unless otherwise noted, all the protocol parameter names and values are case sensitive.
                </t>
            </section>

	    <section title='Terminology' anchor='Terminology'>
	      <t>
		All terms are as defined in the following specifications:
		"The OAuth 2.0 Authorization Framework" <xref target="RFC6749"/>,
		the OAuth Assertion Framework
		<xref target="RFC7521"/>,
		and "Assertions and Protocols for the OASIS Security Assertion
                Markup Language (SAML) V2.0" <xref target="OASIS.saml-core-2.0-os"/>.
	      </t>
	    </section>

        </section>

        <section title="HTTP Parameter Bindings for Transporting Assertions" anchor="Transporting">
            <t>
	      The OAuth Assertion Framework
	      <xref target="RFC7521"/> 
	      defines generic HTTP parameters for transporting assertions
	      during interactions with a token endpoint.
              This section defines specific parameters and treatments of those parameters
	      for use with SAML 2.0 Bearer Assertions.
            </t>
            <section title="Using SAML Assertions as Authorization Grants" anchor="AuthGrants">
              <t>
		To use a SAML Bearer Assertion as an authorization grant, the client uses an access token request as defined in
                Section 4 of 
	        the OAuth Assertion Framework
	        <xref target="RFC7521"/> 
		with the following specific parameter values and encodings.
	      </t>
              <t>The value of the <spanx style='verb'>grant_type</spanx> parameter is
	      <spanx style='verb'>urn:ietf:params:oauth:grant-type:saml2-bearer</spanx>.</t>
              <t>
                The value of the <spanx style='verb'>assertion</spanx> parameter contains a single SAML 2.0
                Assertion. It MUST NOT contain more than one SAML 2.0 Assertion.
                The SAML Assertion XML data
		MUST be encoded using base64url,
                where the encoding adheres to the definition in Section 5 of RFC 4648 <xref target="RFC4648"/>
                and where the padding bits are set to zero.
                To avoid the need for subsequent encoding steps
		(by "application/x-www-form-urlencoded" <xref target='W3C.REC-html401-19991224'/>, for example),
                the base64url-encoded data MUST NOT be line wrapped and pad characters ("=") MUST NOT be included.
              </t>
              <t>
		The <spanx style='verb'>scope</spanx> parameter may be used, as defined in 
		the OAuth Assertion Framework
		<xref target="RFC7521"/>, to indicate the requested scope.
	      </t>
              <t>Authentication of the client is optional, as described in
                Section 3.2.1 of OAuth 2.0 <xref target="RFC6749"/> and
                consequently, the <spanx style='verb'>client_id</spanx> is only needed
                when a form of client authentication that relies on the parameter is used.</t>

              <t>The following example demonstrates an access token request with an Assertion as
                 an authorization grant
	(with extra line breaks for display purposes only):</t>

        <figure>
          <artwork><![CDATA[
  POST /token.oauth2 HTTP/1.1
  Host: as.example.com
  Content-Type: application/x-www-form-urlencoded

  grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-bearer&
  assertion=PHNhbWxwOl...[omitted for brevity]...ZT4
]]></artwork>
        </figure>

            </section>
            <section title="Using SAML Assertions for Client Authentication" anchor="ClientAuth">
              <t>To use a SAML Bearer Assertion for client authentication, the client uses the following parameter values and encodings.</t>
              <t>The value of the <spanx style='verb'>client_assertion_type</spanx> parameter is
	      <spanx style='verb'>urn:ietf:params:oauth:client-assertion-type:saml2-bearer</spanx>.</t>
              <t>
                The value of the <spanx style='verb'>client_assertion</spanx> parameter
		MUST contain a single SAML 2.0 Assertion. The SAML Assertion XML data
		MUST be encoded using base64url,
                where the encoding adheres to the definition in Section 5 of RFC 4648 <xref target="RFC4648"/>
                and where the padding bits are set to zero.
                To avoid the need for subsequent encoding steps
		(by "application/x-www-form-urlencoded" <xref target='W3C.REC-html401-19991224'/>, for example),
                the base64url-encoded data SHOULD NOT be line wrapped and pad characters ("=") SHOULD NOT be included.
              </t>

              <t>The following example demonstrates a client
                authenticating using an Assertion during the presentation of an authorization code grant in an
                access token request
                (with extra line breaks for display purposes only):</t>

        <figure>
          <artwork><![CDATA[
  POST /token.oauth2 HTTP/1.1
  Host: as.example.com
  Content-Type: application/x-www-form-urlencoded

  grant_type=authorization_code&
  code=n0esc3NRze7LTCu7iYzS6a5acc3f0ogp4&
  client_assertion_type=urn%3Aietf%3Aparams%3Aoauth
  %3Aclient-assertion-type%3Asaml2-bearer&
  client_assertion=PHNhbW...[omitted for brevity]...ZT
]]></artwork>
        </figure>

            </section>
        </section>

        <section title="Assertion Format and Processing Requirements" anchor="Processing">
                <t>
                  In order to issue an access token response as described in
		  OAuth 2.0 <xref target="RFC6749"/>
                  or to rely on an Assertion for client authentication,
                  the authorization server MUST validate the Assertion according to the criteria below.
                  Application of additional restrictions and policy are at the discretion of the authorization server.
                </t>
                <t>
                    <list style="numbers">
                        <t>The Assertion's &lt;Issuer&gt; element MUST contain a unique identifier for the entity that
                            issued the Assertion.
			    In the absence of an application profile specifying
			    otherwise, compliant applications MUST compare Issuer
			    values using the Simple String Comparison method defined in Section
			    6.2.1 of RFC 3986 <xref target="RFC3986"/>.
                        </t>
                        <t>The Assertion MUST contain a &lt;Conditions&gt; element with an &lt;AudienceRestriction&gt; element with an &lt;Audience&gt;
                            element that identifies the
                            authorization server as an intended audience. Section 2.5.1.4 of
			    "Assertions and Protocols for the OASIS Security Assertion Markup Language (SAML) V2.0"
			    <xref target="OASIS.saml-core-2.0-os"/>
			    defines the &lt;AudienceRestriction&gt; and &lt;Audience&gt; elements and, in addition to the
                            URI references discussed there, the token endpoint URL of the authorization server MAY be used as a URI 
                          that identifies the authorization server as an intended audience.
                          The authorization server MUST reject any Assertion that does not
                          contain its own identity as the intended audience.
                          In the absence of an application profile specifying
                          otherwise, compliant applications MUST compare the Audience
                          values using the Simple String Comparison method defined in Section
                          6.2.1 of RFC 3986 <xref target="RFC3986"/>.
                          As noted in <xref target="Interoperability"/>, the precise strings to be used
                          as the Audience for a given authorization server must be configured out of band
                          by the authorization server and the issuer of the Assertion.
                        </t>
                        <t>The Assertion MUST contain a &lt;Subject&gt; element identifying the principal that is the subject of the Assertion.
                            Additional information identifying the subject/principal MAY be included in an &lt;AttributeStatement&gt;.
                          <list style="letters">
                              <t> For the authorization grant, the Subject typically identifies an authorized accessor for which the
                                  access token is being requested (i.e., the resource owner or an authorized delegate), but
                                  in some cases, it may be a pseudonymous identifier or other value denoting an anonymous user.</t>

                            <t>
			      For client authentication, the Subject MUST be the
			      <spanx style='verb'>client_id</spanx> of the OAuth client.
			    </t>
                          </list>
                        </t>
                        <t>
                          The Assertion MUST have an expiry that limits the time window during which it can be used.
                          The expiry can be expressed either as the NotOnOrAfter attribute
                          of the &lt;Conditions&gt; element or as the NotOnOrAfter attribute of a suitable &lt;SubjectConfirmationData&gt; element.

                        </t>

                        <t>
                        The &lt;Subject&gt; element MUST contain at least one &lt;SubjectConfirmation&gt;
                        element that has a Method attribute with a value of
                        <spanx style='verb'>urn:oasis:names:tc:SAML:2.0:cm:bearer</spanx>.
                        If the Assertion does not have a suitable NotOnOrAfter attribute
                        on the &lt;Conditions&gt; element, the &lt;SubjectConfirmation&gt; element
                        MUST contain a &lt;SubjectConfirmationData&gt; element.
                        When present, the &lt;SubjectConfirmationData&gt; element MUST have a Recipient attribute with a value
                        indicating the token endpoint URL of the authorization server (or an acceptable alias). The authorization server MUST
                        verify that the value of the Recipient attribute matches the token endpoint
                        URL (or an acceptable alias) to which the Assertion was delivered.
                        The &lt;SubjectConfirmationData&gt; element MUST have a NotOnOrAfter attribute
                        that limits the window during which the Assertion can be confirmed.
                        The &lt;SubjectConfirmationData&gt; element MAY also contain an Address attribute limiting
                        the client address from which the Assertion can be delivered.
                        Verification of the Address is at the discretion of the authorization server.
                        </t>

                        <t>
                        The authorization server MUST reject the entire Assertion if
                        the NotOnOrAfter instant on the &lt;Conditions&gt; element has passed
                        (subject to allowable clock skew between systems). The
                        authorization server MUST reject the &lt;SubjectConfirmation&gt; (but
                        MAY still use the rest of the Assertion) if the NotOnOrAfter
                        instant on the &lt;SubjectConfirmationData&gt; has passed (subject to
                        allowable clock skew).
                        Note that the authorization server may reject Assertions with a NotOnOrAfter instant that is unreasonably far in the future.
                        The authorization server MAY ensure that Bearer Assertions are not replayed, by maintaining
                        the set of used ID values for the length of time for which the Assertion would be considered
                        valid based on the applicable NotOnOrAfter instant.
                        </t>

                        <t>If the Assertion issuer directly authenticated the subject, the Assertion SHOULD contain a single &lt;AuthnStatement&gt;
                            representing that authentication event. If the Assertion was issued with the intention that the client act autonomously on behalf of
                            the subject, an &lt;AuthnStatement&gt; SHOULD NOT be included and
                            the client presenting the Assertion SHOULD be identified in the &lt;NameID&gt; or similar element in the &lt;SubjectConfirmation&gt; element, or by other available means like
			    "SAML V2.0 Condition for Delegation Restriction" <xref target="OASIS.saml-deleg-cs"/>.
                        </t>
                        <t>
                            Other statements, in particular &lt;AttributeStatement&gt; elements, MAY be included in the
                            Assertion.
                        </t>

                        <t>
                          The Assertion MUST be digitally signed or have a Message Authentication Code (MAC) applied
                            by the issuer.  The authorization server
                            MUST reject Assertions with an invalid signature or MAC.
                        </t>
                        <t>Encrypted elements MAY appear in place of their plaintext counterparts as defined in
                            <xref target="OASIS.saml-core-2.0-os"/>.
                        </t>
                        <t>The authorization server MUST reject an Assertion that is not valid in all other respects per
                            <xref target="OASIS.saml-core-2.0-os"/>, such as (but not limited to) all content within the Conditions element including the NotOnOrAfter and NotBefore attributes, unknown condition types, etc.
                        </t>
                    </list>
                </t>

                <section title="Authorization Grant Processing" anchor="GrantProcessing">

                  <t>
		    Assertion authorization grants may be used with or without client authentication
		    or identification. Whether or not client authentication is needed in
		    conjunction with an Assertion authorization grant, as well as the supported types
		    of client authentication, are policy decisions at the discretion of the
		    authorization server. However, if client credentials are present in
		    the request, the authorization server MUST validate them.
                  </t>

                    <t>If the Assertion is not valid (including if its subject confirmation requirements cannot be met), the
                    authorization server constructs an error response as defined in
		    OAuth 2.0 <xref target="RFC6749"/>.
                    The value of the <spanx style='verb'>error</spanx> parameter MUST be the
		    <spanx style='verb'>invalid_grant</spanx> error code. The authorization server
                    MAY include additional information regarding the reasons the Assertion was considered invalid using the
                    <spanx style='verb'>error_description</spanx> or <spanx style='verb'>error_uri</spanx> parameters.
                          <figure>
                              <preamble>For example:</preamble>
                                <artwork><![CDATA[
  HTTP/1.1 400 Bad Request
  Content-Type: application/json
  Cache-Control: no-store

  {
    "error":"invalid_grant",
    "error_description":"Audience validation failed"
  }
]]></artwork>
                            </figure>
                  </t>
                </section>

                <section title="Client Authentication Processing" anchor="ClientProcessing">

                  <t>If the client Assertion is not valid (including if its subject confirmation requirements cannot be met), the
                  authorization server constructs an error response as defined in
		  OAuth 2.0 <xref target="RFC6749"/>.
                  The value of the <spanx style='verb'>error</spanx> parameter MUST be the
		  <spanx style='verb'>invalid_client</spanx> error code. The authorization server
                  MAY include additional information regarding the reasons the Assertion was considered invalid using the
                  <spanx style='verb'>error_description</spanx> or <spanx style='verb'>error_uri</spanx> parameters.

            </t>
          </section>

            </section>

             <section title="Authorization Grant Example" anchor="GrantExample">
                <t>The following examples illustrate what a conforming Assertion and an access token request would look like.
                </t>
               <t>
		 The example shows an assertion issued and signed by the SAML Identity Provider identified as
		 <spanx style='verb'>https://saml-idp.example.com</spanx>.
                 The subject of the Assertion is identified by email address as <spanx style='verb'>brian@example.com</spanx>,
		 who authenticated
                 to the Identity Provider by means of a digital signature where the key was validated as part of an X.509 Public Key Infrastructure.
                 The intended audience of the Assertion is <spanx style='verb'>https://saml-sp.example.net</spanx>,
		 which is an identifier for a SAML Service Provider with which the authorization server identifies itself.
		 The Assertion is sent as part of an access token request to the authorization server's
		 token endpoint at <spanx style='verb'>https://authz.example.net/token.oauth2</spanx>.
               </t>
      <figure title='Example SAML 2.0 Assertion' anchor='assertion'>
          <preamble>
              Below is an example SAML 2.0 Assertion (whitespace formatting is for
              display purposes only):

          </preamble>
                <artwork><![CDATA[
  <Assertion IssueInstant="2010-10-01T20:07:34.619Z"
    ID="ef1xsbZxPV2oqjd7HTLRLIBlBb7"
    Version="2.0"
    xmlns="urn:oasis:names:tc:SAML:2.0:assertion">
   <Issuer>https://saml-idp.example.com</Issuer>
   <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
    [...omitted for brevity...]
   </ds:Signature>
   <Subject>
    <NameID
     Format="urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress">
     brian@example.com
    </NameID>
    <SubjectConfirmation
      Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">
     <SubjectConfirmationData
       NotOnOrAfter="2010-10-01T20:12:34.619Z"
       Recipient="https://authz.example.net/token.oauth2"/>
     </SubjectConfirmation>
    </Subject>
    <Conditions>
      <AudienceRestriction>
        <Audience>https://saml-sp.example.net</Audience>
      </AudienceRestriction>
    </Conditions>
    <AuthnStatement AuthnInstant="2010-10-01T20:07:34.371Z">
      <AuthnContext>
        <AuthnContextClassRef>
          urn:oasis:names:tc:SAML:2.0:ac:classes:X509
        </AuthnContextClassRef>
      </AuthnContext>
    </AuthnStatement>
  </Assertion>
]]></artwork>
              </figure>
                <figure anchor="http" title="Example Request">
            <preamble>
              To present the Assertion shown in the previous example as part of an access token request, for example,
               the client might make the following HTTPS request
	       (with extra line breaks for display purposes only):
            </preamble>
            <artwork><![CDATA[
  POST /token.oauth2 HTTP/1.1
  Host: authz.example.net
  Content-Type: application/x-www-form-urlencoded

  grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
  bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
  [...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork>
          </figure>
            </section>

	<section anchor="Interoperability" title="Interoperability Considerations">
	  <t>
	    Agreement between system entities regarding identifiers,
	    keys, and endpoints is required in order to achieve interoperable
	    deployments of this profile. Specific items that require agreement are as follows:
	    values for the Issuer and Audience identifiers, the location of the token endpoint, the key used to
	    apply and verify the digital signature over the Assertion, one-time use restrictions on Assertions,
      maximum Assertion lifetime allowed, and the specific Subject and attribute requirements of the Assertion.
	    The exchange of such information is explicitly out
	    of scope for this specification, and typical deployment of it will be done
	    alongside existing SAML Web SSO deployments that have already established a means of
	    exchanging such information.
	    "Metadata for the OASIS
            Security Assertion Markup Language (SAML) V2.0"
	    <xref target="OASIS.saml-metadata-2.0-os"/>
	    specifies one common method of exchanging SAML-related information about system entities.
	  </t>
    <t>
      The RSA-SHA256 algorithm, from <xref target="RFC6931"/>, is a mandatory-to-implement XML
      signature algorithm for this profile.
    </t>

	</section>

        <section anchor="Security" title="Security Considerations">
           
          <t>
           The security considerations described within the following specifications are all applicable to 
           this document:
	   "Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants"
	   <xref target="RFC7521"/>,
           "The OAuth 2.0 Authorization Framework" <xref target="RFC6749"/>, and "Security and Privacy
           Considerations for the OASIS Security Assertion Markup Language (SAML) V2.0"
           <xref target="OASIS.saml-sec-consider-2.0-os"/>.
          </t>
	  <t>
            The specification does not mandate replay protection for the SAML
            Assertion usage for either the authorization grant or for client
            authentication. It is an optional feature, which implementations may employ at their own discretion.
          </t>
    
        </section>

      <section anchor="Privacy" title="Privacy Considerations">

        <t>
          A SAML Assertion may contain privacy-sensitive information and, to prevent disclosure of such information
          to unintended parties, should only be transmitted over encrypted channels, such as Transport Layer Security (TLS). In cases where
          it is desirable to prevent disclosure of certain information to the client, the Subject and/or individual
          attributes of a SAML Assertion should be encrypted to the authorization server.
        </t>
        <t>
          Deployments should determine the minimum amount of information necessary to complete the exchange and
          include only that information in an Assertion (typically by limiting what information is included in
          an &lt;AttributeStatement&gt; or by omitting it altogether). In some cases, the Subject can be a value representing
          an anonymous or pseudonymous user, as described in Section 6.3.1 of
	  the OAuth Assertion Framework
	  <xref target="RFC7521"/>.
        </t>
      </section>

        <section title='IANA Considerations' anchor="IANA">
          <section title='Sub-Namespace Registration of urn:ietf:params:oauth:grant&nbhy;type:saml2&nbhy;bearer'
		   anchor="grant-type_reg">
            <t>
              This section registers the value
	      <spanx style='verb'>grant-type:saml2-bearer</spanx> in the
	      IANA "OAuth URI" registry established by
	      "An IETF URN Sub-Namespace for OAuth" <xref target="RFC6755"/>.

              <list style='symbols'>
                <t>URN: urn:ietf:params:oauth:grant-type:saml2-bearer</t>
                <t>Common Name: SAML 2.0 Bearer Assertion Grant Type Profile for OAuth 2.0</t>
                <t>Change Controller: IESG</t>
                <t>Specification Document: RFC 7522</t>
              </list>
            </t>
          </section>
          <section title='Sub-Namespace Registration of urn:ietf:params:oauth:client&nbhy;assertion&nbhy;type:saml2-bearer'
		   anchor="client-assertion-type_reg">
            <t>
              This section registers the value
	      <spanx style='verb'>client-assertion-type:saml2-bearer</spanx> in the
	      IANA "OAuth URI" registry established by
	      "An IETF URN Sub-Namespace for OAuth" <xref target="RFC6755"/>.

              <list style='symbols'>
                <t>URN: urn:ietf:params:oauth:client-assertion-type:saml2-bearer</t>
                <t>Common Name: SAML 2.0 Bearer Assertion Profile for OAuth 2.0 Client Authentication </t>
                <t>Change Controller: IESG</t>
                <t>Specification Document: RFC 7522</t>
              </list>
            </t>
          </section>
        </section>
    </middle>


  <!--  *****BACK MATTER ***** -->

  <back>

    <references title="Normative References">
      <?rfc include='reference.RFC.2119.xml' ?>
      <?rfc include='reference.RFC.3986.xml' ?>
      <?rfc include='reference.RFC.4648.xml' ?>
      <?rfc include='reference.RFC.6749.xml' ?>
      <?rfc include='reference.RFC.6931.xml' ?>

      <reference target="http://docs.oasis&nbhy;open.org/security/saml/v2.0/saml-core-2.0-os.pdf" anchor="OASIS.saml-core-2.0-os">
<front><title>Assertions and Protocols for the OASIS Security Assertion Markup Language
        (SAML) V2.0</title>
<author fullname="Scott Cantor" initials="S." surname="Cantor">
<organization>Internet2</organization>
<address><email>cantor.2@osu.edu</email></address></author>
<author fullname="John Kemp" initials="J." surname="Kemp"><organization>Nokia</organization>
<address><email>John.Kemp@nokia.com</email></address></author><author fullname="Rob Philpott" initials="R." surname="Philpott">
<organization>RSA Security</organization>
<address><email>rphilpott@rsasecurity.com</email></address></author>
<author fullname="Eve Maler" initials="E." surname="Maler">
<organization>Sun Microsystems</organization><address><email>eve.maler@sun.com</email></address></author>
<date year="2005" month="March"/></front>
<seriesInfo name="OASIS Standard" value="saml-core-2.0-os"/>
</reference>

<!---draft-ietf-oauth-assertions, in queue-->
      <reference anchor="RFC7521" target='http://www.rfc-editor.org/info/rfc7521'>
	<front>
	  <title abbrev="OAuth Assertion Framework">Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants</title>
	  <author fullname="Brian Campbell" initials="B." surname="Campbell">
	    <organization abbrev="Ping Identity">Ping Identity</organization>
	  </author>
	  <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
	    <organization abbrev="Salesforce">Salesforce.com</organization>
	  </author>
	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization abbrev="Microsoft">Microsoft</organization>
	  </author>
	  <author fullname="Yaron Y. Goland" initials="Y.Y." surname="Goland">
	    <organization abbrev="Microsoft">Microsoft</organization>
	  </author>
	  <date month="May" year="2015" />
	</front>
	<seriesInfo  name="RFC" value="7521"/>
      </reference>

      <reference anchor="OASIS.saml-deleg-cs" target='http://docs.oasis&nbhy;open.org/security/saml/Post2.0/sstc-saml-delegation-cs-01.html'>
        <front>
          <title abbrev='SAML2 DEL'>SAML V2.0 Condition for Delegation Restriction Version 1</title>
          <author initials='S.' surname='Cantor' fullname='Scott Cantor' role='editor'/>
          <date year="2009" month="November"/>
        </front>
	<seriesInfo name="Committee Specification" value="01"/>
      </reference>

      <reference target='http://docs.oasis&nbhy;open.org/security/saml/v2.0/saml-sec-consider-2.0-os.pdf' anchor="OASIS.saml-sec-consider-2.0-os"><front><title>Security and Privacy Considerations for the OASIS Security Assertion Markup
        Language (SAML) V2.0</title>
<author fullname="Frederick Hirsch" initials="F." surname="Hirsch">
<organization>Nokia</organization>
<address><email>Frederick.Hirsch@nokia.com</email></address></author>
<author fullname="Rob Philpott" initials="R." surname="Philpott">
<organization>RSA Security</organization>
<address><email>rphilpott@rsasecurity.com</email></address></author>
<author fullname="Eve Maler" initials="E." surname="Maler">
<organization>Sun Microsystems</organization>
<address><email>eve.maler@sun.com</email></address></author>
<date year="2005" month="March"/></front>
<seriesInfo name="OASIS Standard" value="saml-sec-consider-2.0-os"/>
</reference>
    </references>

    <references title="Informative References">
      <?rfc include='reference.RFC.6755.xml' ?>

<reference target="http://www.w3.org/TR/1999/REC-html401-19991224" anchor="W3C.REC-html401-19991224"><front><title>HTML 4.01 Specification</title>
<author fullname="D. Raggett" initials="D." surname="Raggett">
<organization></organization><address><email></email></address></author>
<author fullname="A. Hors" initials="A." surname="Hors">
<organization></organization><address><email></email></address></author>
<author fullname="I. Jacobs" initials="I." surname="Jacobs">
<organization></organization><address><email></email></address></author>
<date year="1999" month="December"/></front>
<seriesInfo name="World Wide Web Consortium Recommendation" value="REC-html401-19991224"/></reference>

      <reference target="http://docs.oasis&nbhy;open.org/security/saml/v2.0/saml-profiles-2.0-os.pdf" anchor="OASIS.saml-profiles-2.0-os"><front>
<title>Profiles for the OASIS Security Assertion Markup Language
        (SAML) V2.0</title>
<author fullname="John Hughes" initials="J." surname="Hughes">
<organization>Altos Origin</organization><address><email/></address></author>
<author fullname="Scott Cantor" initials="S." surname="Cantor">
<organization>Internet2</organization><address><email>cantor.2@osu.edu</email></address></author>
<author fullname="Jeff Hodges" initials="J." surname="Hodges">
<organization>NeuStar</organization><address><email>Jeff.Hodges@neustar.biz</email></address></author>
<author fullname="Frederick Hirsch" initials="F." surname="Hirsch">
<organization>Nokia</organization><address><email>Frederick.Hirsch@nokia.com</email></address></author>
<author fullname="Prateek Mishra" initials="P." surname="Mishra">
<organization>Principal Identity</organization><address><email>pmishra@principalidentity.com</email></address></author>
<author fullname="Rob Philpott" initials="R." surname="Philpott">
<organization>RSA Security</organization><address><email>rphilpott@rsasecurity.com</email></address></author>
<author fullname="Eve Maler" initials="E." surname="Maler">
<organization>Sun Microsystems</organization><address><email>eve.maler@sun.com</email></address></author>
<date year="2005" month="March"/></front>
<seriesInfo name="OASIS Standard" value="OASIS.saml-profiles-2.0-os"/></reference>

      <reference target="http://docs.oasis&nbhy;open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf" anchor="OASIS.saml-metadata-2.0-os"><front><title>Metadata for the OASIS Security Assertion Markup Language
        (SAML) V2.0</title>
<author fullname="Scott Cantor" initials="S." surname="Cantor">
<organization>Internet2</organization><address><email>cantor.2@osu.edu</email></address></author>
<author fullname="Jahan Moreh" initials="J." surname="Moreh">
<organization>Sigaba</organization><address><email>jmoreh@sigaba.com</email></address></author>
<author fullname="Rob Philpott" initials="R." surname="Philpott">
<organization>RSA Security</organization><address><email>rphilpott@rsasecurity.com</email></address></author>
<author fullname="Eve Maler" initials="E." surname="Maler">
<organization>Sun Microsystems</organization><address><email>eve.maler@sun.com</email></address></author>
<date year="2005" month="March"/></front>
<seriesInfo name="OASIS Standard" value="saml-metadata-2.0-os"/></reference>

      <reference target="http://docs.oasis&nbhy;open.org/wss-m/wss/v1.1.1/wss-SAMLTokenProfile-v1.1.1.html" anchor="OASIS.WSS-SAMLTokenProfile">
        <front>
          <title abbrev='WSS SAML'>Web Services Security SAML Token Profile Version 1.1.1</title>
          <author initials='R.' surname='Monzillo'/>
          <author initials='C.' surname='Kaler'/>
          <author initials='T.' surname='Nadalin'/>
          <author initials='P.' surname='Hallam-Baker'/>
          <author initials='C.' surname='Milono'/>
          <date year="2012" month="May"/>
        </front>
       <seriesInfo name="OASIS" value="Standard"/>
      </reference>

      <reference target="http://docs.oasis&nbhy;open.org/wsfed/federation/v1.2/os/ws-federation-1.2-spec-os.html" anchor="OASIS.WS-Fed">
        <front>
          <title abbrev='WSS SAML'>Web Services Federation Language (WS-Federation) Version 1.2</title>
          <author initials='M.' surname='Goodner'/>
          <author initials='A.' surname='Nadalin'/>
          <date year="2009" month="May"/>
        </front>
       <seriesInfo name="OASIS" value="Standard"/>
      </reference>
    </references>

    <section title='Acknowledgements' anchor='Acknowledgements' numbered="no">
      <t>
	The following people contributed wording and concepts to this document:
	Paul Madsen, Patrick Harding, Peter Motykowski, Eran Hammer, Peter Saint-Andre,
	Ian Barnett, Eric Fazendin, Torsten Lodderstedt, Susan Harper, Scott Tomilson,
	Scott Cantor, Hannes Tschofenig, David Waite,
	Phil Hunt, and Mukesh Bhatnagar.
      </t>
    </section>
  </back>
</rfc>
