<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<?rfc toc="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="no"?>

<rfc number="6021" ipr="pre5378Trust200902" category="std" >
    <front>
    <title abbrev="YANG-TYPES">Common YANG Data Types</title>

    <author initials="J" surname="Schoenwaelder" fullname='Juergen Schoenwaelder' role="editor">
      <organization>Jacobs University</organization>
      <address>
        <email>j.schoenwaelder@jacobs-university.de</email>
      </address>
    </author>
	<date month="September" year="2010"/>


    <keyword>YANG, NETCONF</keyword>

    <abstract>
	<t>
This document introduces a collection of common data types to be used
with the YANG data modeling language.
	</t>
</abstract>
</front>
<middle>
<section title="Introduction">
    <t>
YANG <xref target="RFC6020"/> is a data modeling language used to model configuration
and state data manipulated by the Network Configuration Protocol (NETCONF) <xref target="RFC4741"/>. The YANG
language supports a small set of built-in data types and provides
mechanisms to derive other types from the built-in types.
    </t>
    <t>
This document introduces a collection of common data types derived
from the built-in YANG data types. The definitions are organized in
several YANG modules. The &quot;ietf&#8209;yang&#8209;types&quot; module contains generally
useful data types. The &quot;ietf&#8209;inet&#8209;types&quot; module contains definitions
that are relevant for the Internet protocol suite.
    </t>
    <t>
The derived types are generally designed to be applicable for modeling
all areas of management information.
    </t>
    <t>
The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;,
&quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;NOT RECOMMENDED&quot;, &quot;MAY&quot;, and
&quot;OPTIONAL&quot; in this document are to be interpreted as described in BCP
14 <xref target="RFC2119"/>.
    </t>
</section>
<section title="Overview">
    <t>
This section provides a short overview of the types defined in
subsequent sections and their equivalent Structure of Management
Information Version 2 (SMIv2) <xref target="RFC2578"/><xref target="RFC2579"/> data types. A YANG
data type is equivalent to an SMIv2 data type if the data types have
the same set of values and the semantics of the values are equivalent.
    </t>
    <t>
<xref target="t1"/> lists the types defined in the ietf-yang-types YANG module and
the corresponding SMIv2 types (- indicates there is no corresponding
SMIv2 type).
    </t>
<?rfc compact="yes"?><texttable anchor="t1">
<preamble>ietf-yang-types</preamble>
<ttcol align='left'> YANG type</ttcol>
<ttcol align='left'>Equivalent SMIv2 type (module)</ttcol>
<c>counter32</c>
<c>Counter32 (SNMPv2-SMI)</c>
<c>zero-based-counter32</c>
<c>ZeroBasedCounter32 (RMON2-MIB)</c>
<c>counter64</c>
<c>Counter64 (SNMPv2-SMI)</c>
<c>zero-based-counter64</c>
<c>ZeroBasedCounter64 (HCNUM-TC)</c>
<c>gauge32</c>
<c>Gauge32 (SNMPv2-SMI)</c>
<c>gauge64</c>
<c>CounterBasedGauge64 (HCNUM-TC)</c>
<c>object-identifier</c>
<c>-</c>
<c>object-identifier-128</c>
<c>OBJECT IDENTIFIER</c>
<c>date-and-time</c>
<c>-</c>
<c>timeticks</c>
<c>TimeTicks (SNMPv2-SMI)</c>
<c>timestamp</c>
<c>TimeStamp (SNMPv2-TC)</c>
<c>phys-address</c>
<c>PhysAddress (SNMPv2-TC)</c>
<c>mac-address</c>
<c>MacAddress (SNMPv2-TC)</c>
<c>xpath1.0</c>
<c>-</c>
</texttable>
<?rfc compact="no"?>    <t>
<xref target="t2"/> lists the types defined in the ietf-inet-types YANG module and the
corresponding SMIv2 types (if any).
    </t>
<?rfc compact="yes"?><texttable anchor="t2">
<preamble>ietf-inet-types</preamble>
<ttcol align='left'> YANG type</ttcol>
<ttcol align='left'>Equivalent SMIv2 type (module)</ttcol>
<c>ip-version</c>
<c>InetVersion (INET-ADDRESS-MIB)</c>
<c>dscp</c>
<c>Dscp (DIFFSERV-DSCP-TC)</c>
<c>ipv6-flow-label</c>
<c>IPv6FlowLabel (IPV6-FLOW-LABEL-MIB)</c>
<c>port-number</c>
<c>InetPortNumber (INET-ADDRESS-MIB)</c>
<c>as-number</c>
<c>InetAutonomousSystemNumber (INET-ADDRESS-MIB)</c>
<c>ip-address</c>
<c>- </c>
<c>ipv4-address</c>
<c>- </c>
<c>ipv6-address</c>
<c>- </c>
<c>ip-prefix</c>
<c>- </c>
<c>ipv4-prefix</c>
<c>- </c>
<c>ipv6-prefix</c>
<c>- </c>
<c>domain-name</c>
<c>- </c>
<c>host</c>
<c>- </c>
<c>uri</c>
<c>Uri (URI-TC-MIB)</c>
</texttable>
<?rfc compact="no"?></section>
<section title="Core YANG Derived Types" anchor="yang-types">
<t>
The ietf-yang-types YANG module references
<xref target="IEEE802"/>,
<xref target="ISO9834-1"/>,
<xref target="RFC2578"/>,
<xref target="RFC2579"/>,
<xref target="RFC2856"/>,
<xref target="RFC3339"/>,
<xref target="RFC4502"/>,
<xref target="XPATH"/>, and
<xref target="XSD-TYPES"/>.  
</t>
<t>&lt;CODE BEGINS> file "ietf-yang-types@2010-09-24.yang"</t>
	<figure>
	    <artwork><![CDATA[
module ietf-yang-types {
  
  namespace "urn:ietf:params:xml:ns:yang:ietf-yang-types";
  prefix "yang";

  organization
   "IETF NETMOD (NETCONF Data Modeling Language) Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/netmod/>
    WG List:  <mailto:netmod@ietf.org>

    WG Chair: David Partain
              <mailto:david.partain@ericsson.com>

    WG Chair: David Kessens
              <mailto:david.kessens@nsn.com>

    Editor:   Juergen Schoenwaelder
              <mailto:j.schoenwaelder@jacobs-university.de>";

  description
   "This module contains a collection of generally useful derived
    YANG data types.

    Copyright (c) 2010 IETF Trust and the persons identified as
    authors of the code.  All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, is permitted pursuant to, and subject to the license
    terms contained in, the Simplified BSD License set forth in Section
    4.c of the IETF Trust's Legal Provisions Relating to IETF Documents
    (http://trustee.ietf.org/license-info). 


    This version of this YANG module is part of RFC 6021; see
    the RFC itself for full legal notices.";

  revision 2010-09-24 {
    description
     "Initial revision.";
    reference 
     "RFC 6021: Common YANG Data Types";
  }

  /*** collection of counter and gauge types ***/

  typedef counter32 {
    type uint32;
    description
     "The counter32 type represents a non-negative integer
      that monotonically increases until it reaches a
      maximum value of 2^32-1 (4294967295 decimal), when it
      wraps around and starts increasing again from zero.

      Counters have no defined 'initial' value, and thus, a
      single value of a counter has (in general) no information
      content.  Discontinuities in the monotonically increasing
      value normally occur at re-initialization of the
      management system, and at other times as specified in the
      description of a schema node using this type.  If such 
      other times can occur, for example, the creation of 
      a schema node of type counter32 at times other than
      re-initialization, then a corresponding schema node 
      should be defined, with an appropriate type, to indicate
      the last discontinuity.

      The counter32 type should not be used for configuration
      schema nodes.  A default statement SHOULD NOT be used in
      combination with the type counter32.

      In the value set and its semantics, this type is equivalent
      to the Counter32 type of the SMIv2.";
    reference
     "RFC 2578: Structure of Management Information Version 2 (SMIv2)";
  }

  typedef zero-based-counter32 {
    type yang:counter32;
    default "0";
    description
     "The zero-based-counter32 type represents a counter32
      that has the defined 'initial' value zero.

      A schema node of this type will be set to zero (0) on creation
      and will thereafter increase monotonically until it reaches
      a maximum value of 2^32-1 (4294967295 decimal), when it
      wraps around and starts increasing again from zero.

      Provided that an application discovers a new schema node
      of this type within the minimum time to wrap, it can use the
      'initial' value as a delta.  It is important for a management 
      station to be aware of this minimum time and the actual time
      between polls, and to discard data if the actual time is too
      long or there is no defined minimum time.

      In the value set and its semantics, this type is equivalent
      to the ZeroBasedCounter32 textual convention of the SMIv2.";
    reference
      "RFC 4502: Remote Network Monitoring Management Information
                 Base Version 2";
  }

  typedef counter64 {
    type uint64;
    description
     "The counter64 type represents a non-negative integer
      that monotonically increases until it reaches a
      maximum value of 2^64-1 (18446744073709551615 decimal),
      when it wraps around and starts increasing again from zero.

      Counters have no defined 'initial' value, and thus, a
      single value of a counter has (in general) no information
      content.  Discontinuities in the monotonically increasing
      value normally occur at re-initialization of the
      management system, and at other times as specified in the
      description of a schema node using this type.  If such
      other times can occur, for example, the creation of
      a schema node of type counter64 at times other than
      re-initialization, then a corresponding schema node
      should be defined, with an appropriate type, to indicate
      the last discontinuity.

      The counter64 type should not be used for configuration
      schema nodes.  A default statement SHOULD NOT be used in
      combination with the type counter64.

      In the value set and its semantics, this type is equivalent
      to the Counter64 type of the SMIv2.";
    reference
     "RFC 2578: Structure of Management Information Version 2 (SMIv2)";
  }

  typedef zero-based-counter64 {
    type yang:counter64;
    default "0";
    description
     "The zero-based-counter64 type represents a counter64 that
      has the defined 'initial' value zero.

      A schema node of this type will be set to zero (0) on creation
      and will thereafter increase monotonically until it reaches
      a maximum value of 2^64-1 (18446744073709551615 decimal), 
      when it wraps around and starts increasing again from zero.

      Provided that an application discovers a new schema node
      of this type within the minimum time to wrap, it can use the
      'initial' value as a delta.  It is important for a management
      station to be aware of this minimum time and the actual time
      between polls, and to discard data if the actual time is too
      long or there is no defined minimum time.

      In the value set and its semantics, this type is equivalent
      to the ZeroBasedCounter64 textual convention of the SMIv2.";
    reference
     "RFC 2856: Textual Conventions for Additional High Capacity 
                Data Types";
  }

  typedef gauge32 {
    type uint32;
    description
     "The gauge32 type represents a non-negative integer, which 
      may increase or decrease, but shall never exceed a maximum
      value, nor fall below a minimum value.  The maximum value
      cannot be greater than 2^32-1 (4294967295 decimal), and
      the minimum value cannot be smaller than 0.  The value of
      a gauge32 has its maximum value whenever the information
      being modeled is greater than or equal to its maximum 
      value, and has its minimum value whenever the information
      being modeled is smaller than or equal to its minimum value.
      If the information being modeled subsequently decreases
      below (increases above) the maximum (minimum) value, the
      gauge32 also decreases (increases).

      In the value set and its semantics, this type is equivalent
      to the Gauge32 type of the SMIv2.";
    reference
     "RFC 2578: Structure of Management Information Version 2 (SMIv2)";
  }

  typedef gauge64 {
    type uint64;
    description
     "The gauge64 type represents a non-negative integer, which 
      may increase or decrease, but shall never exceed a maximum
      value, nor fall below a minimum value.  The maximum value
      cannot be greater than 2^64-1 (18446744073709551615), and 
      the minimum value cannot be smaller than 0.  The value of
      a gauge64 has its maximum value whenever the information
      being modeled is greater than or equal to its maximum
      value, and has its minimum value whenever the information
      being modeled is smaller than or equal to its minimum value.
      If the information being modeled subsequently decreases
      below (increases above) the maximum (minimum) value, the
      gauge64 also decreases (increases).

      In the value set and its semantics, this type is equivalent
      to the CounterBasedGauge64 SMIv2 textual convention defined 
      in RFC 2856";
    reference
     "RFC 2856: Textual Conventions for Additional High Capacity 
                Data Types";
  }

  /*** collection of identifier related types ***/

  typedef object-identifier {
    type string {
      pattern '(([0-1](\.[1-3]?[0-9]))|(2\.(0|([1-9]\d*))))'
            + '(\.(0|([1-9]\d*)))*';
    }
    description
     "The object-identifier type represents administratively
      assigned names in a registration-hierarchical-name tree.

      Values of this type are denoted as a sequence of numerical
      non-negative sub-identifier values.  Each sub-identifier
      value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers
      are separated by single dots and without any intermediate
      whitespace.

      The ASN.1 standard restricts the value space of the first
      sub-identifier to 0, 1, or 2.  Furthermore, the value space
      of the second sub-identifier is restricted to the range 
      0 to 39 if the first sub-identifier is 0 or 1.  Finally, 
      the ASN.1 standard requires that an object identifier 
      has always at least two sub-identifier.  The pattern
      captures these restrictions.

      Although the number of sub-identifiers is not limited,
      module designers should realize that there may be
      implementations that stick with the SMIv2 limit of 128
      sub-identifiers.

      This type is a superset of the SMIv2 OBJECT IDENTIFIER type
      since it is not restricted to 128 sub-identifiers.  Hence,
      this type SHOULD NOT be used to represent the SMIv2 OBJECT
      IDENTIFIER type, the object-identifier-128 type SHOULD be
      used instead.";
    reference
     "ISO9834-1: Information technology -- Open Systems
      Interconnection -- Procedures for the operation of OSI
      Registration Authorities: General procedures and top
      arcs of the ASN.1 Object Identifier tree";
  }

  typedef object-identifier-128 {
    type object-identifier {
      pattern '\d*(\.\d*){1,127}';
    }
    description
     "This type represents object-identifiers restricted to 128
      sub-identifiers.

      In the value set and its semantics, this type is equivalent
      to the OBJECT IDENTIFIER type of the SMIv2.";
    reference
     "RFC 2578: Structure of Management Information Version 2 (SMIv2)";
  }

  /*** collection of date and time related types ***/

  typedef date-and-time {
    type string {
      pattern '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?'
            + '(Z|[\+\-]\d{2}:\d{2})';
    }
    description
     "The date-and-time type is a profile of the ISO 8601
      standard for representation of dates and times using the
      Gregorian calendar.  The profile is defined by the
      date-time production in Section 5.6 of RFC 3339.

      The date-and-time type is compatible with the dateTime XML
      schema type with the following notable exceptions:

      (a) The date-and-time type does not allow negative years.

      (b) The date-and-time time-offset -00:00 indicates an unknown
          time zone (see RFC 3339) while -00:00 and +00:00 and Z all
          represent the same time zone in dateTime.

      (c) The canonical format (see below) of data-and-time values
          differs from the canonical format used by the dateTime XML
          schema type, which requires all times to be in UTC using the
          time-offset 'Z'.

      This type is not equivalent to the DateAndTime textual 
      convention of the SMIv2 since RFC 3339 uses a different
      separator between full-date and full-time and provides
      higher resolution of time-secfrac.

      The canonical format for date-and-time values with a known time
      zone uses a numeric time zone offset that is calculated using
      the device's configured known offset to UTC time.  A change of
      the device's offset to UTC time will cause date-and-time values
      to change accordingly.  Such changes might happen periodically
      in case a server follows automatically daylight saving time
      (DST) time zone offset changes.  The canonical format for
      date-and-time values with an unknown time zone (usually referring
      to the notion of local time) uses the time-offset -00:00.";
    reference
     "RFC 3339: Date and Time on the Internet: Timestamps
      RFC 2579: Textual Conventions for SMIv2
      XSD-TYPES: XML Schema Part 2: Datatypes Second Edition";
  }
    
  typedef timeticks {
    type uint32;
    description
     "The timeticks type represents a non-negative integer that
      represents the time, modulo 2^32 (4294967296 decimal), in
      hundredths of a second between two epochs.  When a schema
      node is defined that uses this type, the description of
      the schema node identifies both of the reference epochs.

      In the value set and its semantics, this type is equivalent
      to the TimeTicks type of the SMIv2.";
    reference
     "RFC 2578: Structure of Management Information Version 2 (SMIv2)";
  }

  typedef timestamp {
    type yang:timeticks;
    description
     "The timestamp type represents the value of an associated
      timeticks schema node at which a specific occurrence happened.  
      The specific occurrence must be defined in the description 
      of any schema node defined using this type.  When the specific
      occurrence occurred prior to the last time the associated
      timeticks attribute was zero, then the timestamp value is
      zero.  Note that this requires all timestamp values to be
      reset to zero when the value of the associated timeticks
      attribute reaches 497+ days and wraps around to zero.

      The associated timeticks schema node must be specified
      in the description of any schema node using this type.

      In the value set and its semantics, this type is equivalent
      to the TimeStamp textual convention of the SMIv2.";
    reference
     "RFC 2579: Textual Conventions for SMIv2";
  }

  /*** collection of generic address types ***/

  typedef phys-address {
    type string {
      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';
    }
    description
     "Represents media- or physical-level addresses represented
      as a sequence octets, each octet represented by two hexadecimal
      numbers.  Octets are separated by colons.  The canonical
      representation uses lowercase characters.

      In the value set and its semantics, this type is equivalent 
      to the PhysAddress textual convention of the SMIv2.";
    reference 
     "RFC 2579: Textual Conventions for SMIv2";
  }

  typedef mac-address {
    type string {
      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';
    }
    description
     "The mac-address type represents an IEEE 802 MAC address.
      The canonical representation uses lowercase characters.

      In the value set and its semantics, this type is equivalent
      to the MacAddress textual convention of the SMIv2.";
    reference
     "IEEE 802: IEEE Standard for Local and Metropolitan Area
                Networks: Overview and Architecture
      RFC 2579: Textual Conventions for SMIv2";
  }

  /*** collection of XML specific types ***/

  typedef xpath1.0 {
    type string;
    description
     "This type represents an XPATH 1.0 expression.

      When a schema node is defined that uses this type, the
      description of the schema node MUST specify the XPath
      context in which the XPath expression is evaluated.";
    reference
     "XPATH: XML Path Language (XPath) Version 1.0";
  }

}
	    ]]></artwork>
	</figure>
<t>&lt;CODE ENDS></t>
</section>
<section title="Internet-Specific Derived Types" anchor="inet-types">
    <t>
The ietf-inet-types YANG module references
<xref target="RFC0768"/>,
<xref target="RFC0791"/>,
<xref target="RFC0793"/>,
<xref target="RFC0952"/>,
<xref target="RFC1034"/>,
<xref target="RFC1123"/>,
<xref target="RFC1930"/>,
<xref target="RFC2460"/>,
<xref target="RFC2474"/>,
<xref target="RFC2780"/>,
<xref target="RFC2782"/>,
<xref target="RFC3289"/>,
<xref target="RFC3305"/>,
<xref target="RFC3492"/>,
<xref target="RFC3595"/>,
<xref target="RFC3986"/>,
<xref target="RFC4001"/>,
<xref target="RFC4007"/>,
<xref target="RFC4271"/>,
<xref target="RFC4291"/>,
<xref target="RFC4340"/>,
<xref target="RFC4893"/>,
<xref target="RFC4960"/>,
<xref target="RFC5017"/>,
<xref target="RFC5891"/>, and
<xref target="RFC5952"/>.
    </t>
<t>&lt;CODE BEGINS> file "ietf-inet-types@2010-09-24.yang"</t>
	<figure>
	    <artwork><![CDATA[
module ietf-inet-types {

  namespace "urn:ietf:params:xml:ns:yang:ietf-inet-types";
  prefix "inet";
  
  organization
   "IETF NETMOD (NETCONF Data Modeling Language) Working Group";
  
  contact
   "WG Web:   <http://tools.ietf.org/wg/netmod/>
    WG List:  <mailto:netmod@ietf.org>

    WG Chair: David Partain
              <mailto:david.partain@ericsson.com>

    WG Chair: David Kessens
              <mailto:david.kessens@nsn.com>

    Editor:   Juergen Schoenwaelder
              <mailto:j.schoenwaelder@jacobs-university.de>";

  description
   "This module contains a collection of generally useful derived
    YANG data types for Internet addresses and related things.

    Copyright (c) 2010 IETF Trust and the persons identified as
    authors of the code.  All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, is permitted pursuant to, and subject to the license
    terms contained in, the Simplified BSD License set forth in Section
    4.c of the IETF Trust's Legal Provisions Relating to IETF Documents
    (http://trustee.ietf.org/license-info). 


    This version of this YANG module is part of RFC 6021; see 
    the RFC itself for full legal notices.";

  revision 2010-09-24 {
    description
     "Initial revision.";
    reference 
     "RFC 6021: Common YANG Data Types";
  }

  /*** collection of protocol field related types ***/

  typedef ip-version {
    type enumeration {
      enum unknown {
        value "0"; 
        description
         "An unknown or unspecified version of the Internet protocol.";
      }
      enum ipv4 {
        value "1";
        description
         "The IPv4 protocol as defined in RFC 791.";
      }
      enum ipv6 {
        value "2";
        description
         "The IPv6 protocol as defined in RFC 2460.";
      }
    }
    description
     "This value represents the version of the IP protocol.

      In the value set and its semantics, this type is equivalent
      to the InetVersion textual convention of the SMIv2.";
    reference
     "RFC  791: Internet Protocol
      RFC 2460: Internet Protocol, Version 6 (IPv6) Specification
      RFC 4001: Textual Conventions for Internet Network Addresses";
  }

  typedef dscp {
    type uint8 {
      range "0..63";
    }
    description
     "The dscp type represents a Differentiated Services Code-Point
      that may be used for marking packets in a traffic stream.

      In the value set and its semantics, this type is equivalent
      to the Dscp textual convention of the SMIv2.";
    reference 
     "RFC 3289: Management Information Base for the Differentiated
                Services Architecture
      RFC 2474: Definition of the Differentiated Services Field
                (DS Field) in the IPv4 and IPv6 Headers
      RFC 2780: IANA Allocation Guidelines For Values In
                the Internet Protocol and Related Headers";
  }
  
  typedef ipv6-flow-label {
    type uint32 {
      range "0..1048575";
    }
    description
     "The flow-label type represents flow identifier or Flow Label 
      in an IPv6 packet header that may be used to discriminate 
      traffic flows.

      In the value set and its semantics, this type is equivalent
      to the IPv6FlowLabel textual convention of the SMIv2.";
    reference
     "RFC 3595: Textual Conventions for IPv6 Flow Label
      RFC 2460: Internet Protocol, Version 6 (IPv6) Specification";
  }

  typedef port-number {
    type uint16 {
      range "0..65535";
    }
    description
     "The port-number type represents a 16-bit port number of an 
      Internet transport layer protocol such as UDP, TCP, DCCP, or 
      SCTP.  Port numbers are assigned by IANA.  A current list of
      all assignments is available from <http://www.iana.org/>.

      Note that the port number value zero is reserved by IANA.  In
      situations where the value zero does not make sense, it can
      be excluded by subtyping the port-number type.

      In the value set and its semantics, this type is equivalent
      to the InetPortNumber textual convention of the SMIv2.";
    reference
     "RFC  768: User Datagram Protocol
      RFC  793: Transmission Control Protocol
      RFC 4960: Stream Control Transmission Protocol
      RFC 4340: Datagram Congestion Control Protocol (DCCP)
      RFC 4001: Textual Conventions for Internet Network Addresses";
  }

  /*** collection of autonomous system related types ***/

  typedef as-number {
    type uint32;
    description
     "The as-number type represents autonomous system numbers
      which identify an Autonomous System (AS).  An AS is a set
      of routers under a single technical administration, using
      an interior gateway protocol and common metrics to route
      packets within the AS, and using an exterior gateway
      protocol to route packets to other ASs'.  IANA maintains
      the AS number space and has delegated large parts to the
      regional registries.

      Autonomous system numbers were originally limited to 16 
      bits.  BGP extensions have enlarged the autonomous system
      number space to 32 bits.  This type therefore uses an uint32
      base type without a range restriction in order to support
      a larger autonomous system number space.

      In the value set and its semantics, this type is equivalent
      to the InetAutonomousSystemNumber textual convention of 
      the SMIv2.";
    reference
     "RFC 1930: Guidelines for creation, selection, and registration
                of an Autonomous System (AS)
      RFC 4271: A Border Gateway Protocol 4 (BGP-4)
      RFC 4893: BGP Support for Four-octet AS Number Space
      RFC 4001: Textual Conventions for Internet Network Addresses";
  }
  
  /*** collection of IP address and hostname related types ***/

  typedef ip-address {
    type union {
      type inet:ipv4-address;
      type inet:ipv6-address;
    }
    description
     "The ip-address type represents an IP address and is IP 
      version neutral.  The format of the textual representations 
      implies the IP version.";
  }

  typedef ipv4-address {
    type string {
      pattern 
        '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}'
      +  '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
      + '(%[\p{N}\p{L}]+)?';
    }
    description
      "The ipv4-address type represents an IPv4 address in 
       dotted-quad notation.  The IPv4 address may include a zone
       index, separated by a % sign.

       The zone index is used to disambiguate identical address
       values.  For link-local addresses, the zone index will
       typically be the interface index number or the name of an
       interface.  If the zone index is not present, the default
       zone of the device will be used.

       The canonical format for the zone index is the numerical
       format";
  }

  typedef ipv6-address {
    type string {
      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}'
            + '((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|'
            + '(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}'
            + '(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))'
            + '(%[\p{N}\p{L}]+)?';
      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|'
            + '((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)'
            + '(%.+)?';
    }
    description
     "The ipv6-address type represents an IPv6 address in full,
      mixed, shortened, and shortened-mixed notation.  The IPv6
      address may include a zone index, separated by a % sign.

      The zone index is used to disambiguate identical address
      values.  For link-local addresses, the zone index will
      typically be the interface index number or the name of an
      interface.  If the zone index is not present, the default
      zone of the device will be used.

      The canonical format of IPv6 addresses uses the compressed
      format described in RFC 4291, Section 2.2, item 2 with the
      following additional rules: the :: substitution must be
      applied to the longest sequence of all-zero 16-bit chunks
      in an IPv6 address.  If there is a tie, the first sequence
      of all-zero 16-bit chunks is replaced by ::.  Single 
      all-zero 16-bit chunks are not compressed.  The canonical
      format uses lowercase characters and leading zeros are
      not allowed.  The canonical format for the zone index is
      the numerical format as described in RFC 4007, Section
      11.2.";
    reference
     "RFC 4291: IP Version 6 Addressing Architecture
      RFC 4007: IPv6 Scoped Address Architecture
      RFC 5952: A Recommendation for IPv6 Address Text Representation";
  }

  typedef ip-prefix {
    type union {
      type inet:ipv4-prefix;
      type inet:ipv6-prefix;
    }
    description
     "The ip-prefix type represents an IP prefix and is IP
      version neutral.  The format of the textual representations
      implies the IP version.";
  }

  typedef ipv4-prefix {
    type string {
      pattern
         '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}'
       +  '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
       + '/(([0-9])|([1-2][0-9])|(3[0-2]))';
    }
    description
     "The ipv4-prefix type represents an IPv4 address prefix.
      The prefix length is given by the number following the
      slash character and must be less than or equal to 32. 

      A prefix length value of n corresponds to an IP address
      mask that has n contiguous 1-bits from the most
      significant bit (MSB) and all other bits set to 0.

      The canonical format of an IPv4 prefix has all bits of
      the IPv4 address set to zero that are not part of the
      IPv4 prefix.";
  }

  typedef ipv6-prefix {
    type string {
      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}'
            + '((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|'
            + '(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}'
            + '(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))'
            + '(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';
      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|'
            + '((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)'
            + '(/.+)';
    }
    description
     "The ipv6-prefix type represents an IPv6 address prefix.
      The prefix length is given by the number following the
      slash character and must be less than or equal 128. 

      A prefix length value of n corresponds to an IP address
      mask that has n contiguous 1-bits from the most
      significant bit (MSB) and all other bits set to 0.

      The IPv6 address should have all bits that do not belong
      to the prefix set to zero.

      The canonical format of an IPv6 prefix has all bits of
      the IPv6 address set to zero that are not part of the
      IPv6 prefix.  Furthermore, IPv6 address is represented
      in the compressed format described in RFC 4291, Section
      2.2, item 2 with the following additional rules: the :: 
      substitution must be applied to the longest sequence of
      all-zero 16-bit chunks in an IPv6 address.  If there is
      a tie, the first sequence of all-zero 16-bit chunks is
      replaced by ::.  Single all-zero 16-bit chunks are not
      compressed.  The canonical format uses lowercase
      characters and leading zeros are not allowed.";
    reference
     "RFC 4291: IP Version 6 Addressing Architecture";
  }

  /*** collection of domain name and URI types ***/

  typedef domain-name {
    type string {
      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*'
           +  '([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)'
           +  '|\.';
      length "1..253";
    }
    description
     "The domain-name type represents a DNS domain name.  The 
      name SHOULD be fully qualified whenever possible.

      Internet domain names are only loosely specified.  Section
      3.5 of RFC 1034 recommends a syntax (modified in Section 
      2.1 of RFC 1123).  The pattern above is intended to allow
      for current practice in domain name use, and some possible
      future expansion.  It is designed to hold various types of
      domain names, including names used for A or AAAA records
      (host names) and other records, such as SRV records.  Note
      that Internet host names have a stricter syntax (described
      in RFC 952) than the DNS recommendations in RFCs 1034 and
      1123, and that systems that want to store host names in
      schema nodes using the domain-name type are recommended to
      adhere to this stricter standard to ensure interoperability.

      The encoding of DNS names in the DNS protocol is limited
      to 255 characters.  Since the encoding consists of labels
      prefixed by a length bytes and there is a trailing NULL
      byte, only 253 characters can appear in the textual dotted
      notation.

      The description clause of schema nodes using the domain-name
      type MUST describe when and how these names are resolved to
      IP addresses.  Note that the resolution of a domain-name value
      may require to query multiple DNS records (e.g., A for IPv4
      and AAAA for IPv6).  The order of the resolution process and
      which DNS record takes precedence can either be defined
      explicitely or it may depend on the configuration of the
      resolver.

      Domain-name values use the US-ASCII encoding.  Their canonical
      format uses lowercase US-ASCII characters.  Internationalized
      domain names MUST be encoded in punycode as described in RFC
      3492";
    reference
     "RFC  952: DoD Internet Host Table Specification
      RFC 1034: Domain Names - Concepts and Facilities
      RFC 1123: Requirements for Internet Hosts -- Application 
                and Support
      RFC 2782: A DNS RR for specifying the location of services
                (DNS SRV)
      RFC 3492: Punycode: A Bootstring encoding of Unicode for
                Internationalized Domain Names in Applications
                (IDNA)
      RFC 5891: Internationalizing Domain Names in Applications
                (IDNA): Protocol";
  }

  typedef host {
    type union {
      type inet:ip-address;
      type inet:domain-name;
    }
    description
     "The host type represents either an IP address or a DNS
      domain name.";
  }

  typedef uri {
    type string;
    description
     "The uri type represents a Uniform Resource Identifier
      (URI) as defined by STD 66.

      Objects using the uri type MUST be in US-ASCII encoding,
      and MUST be normalized as described by RFC 3986 Sections
      6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary
      percent-encoding is removed, and all case-insensitive
      characters are set to lowercase except for hexadecimal
      digits, which are normalized to uppercase as described in
      Section 6.2.2.1.

      The purpose of this normalization is to help provide
      unique URIs.  Note that this normalization is not
      sufficient to provide uniqueness.  Two URIs that are
      textually distinct after this normalization may still be
      equivalent.

      Objects using the uri type may restrict the schemes that
      they permit.  For example, 'data:' and 'urn:' schemes
      might not be appropriate.

      A zero-length URI is not a valid URI.  This can be used to
      express 'URI absent' where required.

      In the value set and its semantics, this type is equivalent
      to the Uri SMIv2 textual convention defined in RFC 5017.";
    reference
     "RFC 3986: Uniform Resource Identifier (URI): Generic Syntax
      RFC 3305: Report from the Joint W3C/IETF URI Planning Interest
                Group: Uniform Resource Identifiers (URIs), URLs, 
                and Uniform Resource Names (URNs): Clarifications
                and Recommendations
      RFC 5017: MIB Textual Conventions for Uniform Resource 
                Identifiers (URIs)";
  }

}
	    ]]></artwork>
	</figure>
<t>&lt;CODE ENDS></t>
</section>
<section title="IANA Considerations" anchor="iana">
    <t>
This document registers two URIs in the IETF XML registry
<xref target="RFC3688"/>. Following the format in RFC 3688, the following
registrations have been made.
    </t>
	<figure>
	    <artwork><![CDATA[
  URI: urn:ietf:params:xml:ns:yang:ietf-yang-types

  Registrant Contact: The NETMOD WG of the IETF.

  XML: N/A, the requested URI is an XML namespace.
	    ]]></artwork>
	</figure>

	<figure>
	    <artwork><![CDATA[
  URI: urn:ietf:params:xml:ns:yang:ietf-inet-types

  Registrant Contact: The NETMOD WG of the IETF.

  XML: N/A, the requested URI is an XML namespace.
	    ]]></artwork>
	</figure>
    <t>
This document registers two YANG modules in the YANG Module Names
registry <xref target="RFC6020"/>.
    </t>
	<figure>
	    <artwork><![CDATA[
  name:         ietf-yang-types
  namespace:    urn:ietf:params:xml:ns:yang:ietf-yang-types
  prefix:       yang
  reference:    RFC 6021

  name:         ietf-inet-types
  namespace:    urn:ietf:params:xml:ns:yang:ietf-inet-types
  prefix:       inet
  reference:    RFC 6021
	    ]]></artwork>
	</figure>
</section>
<section title="Security Considerations">
    <t>
This document defines common data types using the YANG data modeling
language. The definitions themselves have no security impact on the
Internet but the usage of these definitions in concrete YANG modules
might have. The security considerations spelled out in the YANG
specification <xref target="RFC6020"/> apply for this document as well.
    </t>
</section>
<section title="Contributors">
    <t>
The following people contributed significantly to the initial
version of this document:
    </t>
	<figure>
	    <artwork><![CDATA[
 - Andy Bierman (Brocade)
 - Martin Bjorklund (Tail-f Systems)
 - Balazs Lengyel (Ericsson)
 - David Partain (Ericsson)
 - Phil Shafer (Juniper Networks)
	    ]]></artwork>
	</figure>
</section>
<section title="Acknowledgments">
    <t>
The editor wishes to thank the following individuals for providing
helpful comments on various versions of this document: Ladislav
Lhotka, Lars-Johan Liman, and Dan Romascanu.
    </t>
</section>
</middle>
<back>
  <references title="Normative References">

    <reference anchor="RFC6020">
      <front>
        <title>YANG - A Data Modeling Language for Network Configuration Protocol (NETCONF)</title>
        <author initials="M." surname="Bjorklund" fullname="Martin Bjorklund" role="editor">
          <organization>Tail-f Systems</organization>
        </author>
       <date month="September" year="2010"/>
      </front>
      <seriesInfo name="RFC" value="6020"/>
    </reference>

 

    <reference anchor="XPATH" target="http://www.w3.org/TR/1999/REC-xpath-19991116">
      <front>
        <title>XML Path Language (XPath) Version 1.0</title>
        <author initials="J." surname="Clark" fullname="James Clark">
          <organization/>
        </author>
        <author initials="S." surname="DeRose" fullname="Steven DeRose">
          <organization/>
        </author>
        <date month="November" day="16" year="1999"/>
      </front>
      <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-xpath-19991116"/>
      <format type="HTML" target="http://www.w3.org/TR/1999/REC-xpath-19991116"/>
    </reference>

  <reference anchor='RFC2119'>

<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>

<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year='1997' month='March' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.

</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='http://www.rfc-editor.org/rfc/rfc2119.txt' />
<format type='HTML' octets='17491' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5777' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>

<reference anchor='RFC3339'>

<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='Graham Klyne' role='editor'>
<organization>Clearswift Corporation</organization>
<address>
<postal>
<street>1310 Waterside</street>
<street>Arlington Business Park</street>
<city>Theale</city>

<region>Reading</region>
<code>RG7 4SA</code>
<country>UK</country></postal>
<phone>+44 11 8903 8903</phone>
<facsimile>+44 11 8903 9000</facsimile>
<email>GK@ACM.ORG</email></address></author>
<author initials='C.' surname='Newman' fullname='Chris Newman'>
<organization>Sun Microsystems</organization>
<address>
<postal>

<street>1050 Lakes Drive, Suite 250</street>
<city>West Covina</city>
<region>CA</region>
<code>91790</code>
<country>USA</country></postal>
<email>chris.newman@sun.com</email></address></author>
<date year='2002' month='July' />
<abstract>
<t>
   This document defines a date and time format for use in Internet
   protocols that is a profile of the ISO 8601 standard for
   representation of dates and times using the Gregorian calendar.
     </t></abstract></front>

<seriesInfo name='RFC' value='3339' />
<format type='TXT' octets='35064' target='http://www.rfc-editor.org/rfc/rfc3339.txt' />
<format type='HTML' octets='61277' target='http://xml.resource.org/public/rfc/html/rfc3339.html' />
<format type='XML' octets='37259' target='http://xml.resource.org/public/rfc/xml/rfc3339.xml' />
</reference>
<reference anchor='RFC3492'>

<front>
<title>Punycode: A Bootstring encoding of Unicode for Internationalized Domain Names in Applications (IDNA)</title>
<author initials='A.' surname='Costello' fullname='A. Costello'>
<organization /></author>
<date year='2003' month='March' />
<abstract>
<t>Punycode is a simple and efficient transfer encoding syntax designed for use with Internationalized Domain Names in Applications (IDNA).  It uniquely and reversibly transforms a Unicode string into an ASCII string.  ASCII characters in the Unicode string are represented literally, and non-ASCII characters are represented by ASCII characters that are allowed in host name labels (letters, digits, and hyphens).  This document defines a general algorithm called Bootstring that allows a string of basic code points to uniquely represent any string of code points drawn from a larger set.  Punycode is an instance of Bootstring that uses particular parameter values specified by this document, appropriate for IDNA. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='3492' />
<format type='TXT' octets='67439' target='http://www.rfc-editor.org/rfc/rfc3492.txt' />
</reference>
<reference anchor='RFC3688'>

<front>
<title>The IETF XML Registry</title>
<author initials='M.' surname='Mealling' fullname='M. Mealling'>
<organization /></author>
<date year='2004' month='January' />
<abstract>
<t>This document describes an IANA maintained registry for IETF standards which use Extensible Markup Language (XML) related items such as Namespaces, Document Type Declarations (DTDs), Schemas, and Resource Description Framework (RDF) Schemas.</t></abstract></front>

<seriesInfo name='BCP' value='81' />
<seriesInfo name='RFC' value='3688' />
<format type='TXT' octets='17325' target='http://www.rfc-editor.org/rfc/rfc3688.txt' />

</reference>
<reference anchor='RFC3986'>

<front>
<title abbrev='URI Generic Syntax'>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
<organization abbrev='W3C/MIT'>World Wide Web Consortium</organization>
<address>
<postal>
<street>Massachusetts Institute of Technology</street>
<street>77 Massachusetts Avenue</street>
<city>Cambridge</city>

<region>MA</region>
<code>02139</code>
<country>USA</country></postal>
<phone>+1-617-253-5702</phone>
<facsimile>+1-617-258-5999</facsimile>
<email>timbl@w3.org</email>
<uri>http://www.w3.org/People/Berners-Lee/</uri></address></author>
<author initials='R.' surname='Fielding' fullname='Roy T. Fielding'>
<organization abbrev='Day Software'>Day Software</organization>

<address>
<postal>
<street>5251 California Ave., Suite 110</street>
<city>Irvine</city>
<region>CA</region>
<code>92617</code>
<country>USA</country></postal>
<phone>+1-949-679-2960</phone>
<facsimile>+1-949-679-2972</facsimile>
<email>fielding@gbiv.com</email>

<uri>http://roy.gbiv.com/</uri></address></author>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization abbrev='Adobe Systems'>Adobe Systems Incorporated</organization>
<address>
<postal>
<street>345 Park Ave</street>
<city>San Jose</city>
<region>CA</region>
<code>95110</code>
<country>USA</country></postal>

<phone>+1-408-536-3024</phone>
<email>LMM@acm.org</email>
<uri>http://larry.masinter.net/</uri></address></author>
<date year='2005' month='January' />
<area>Applications</area>
<keyword>uniform resource identifier</keyword>
<keyword>URI</keyword>
<keyword>URL</keyword>
<keyword>URN</keyword>

<keyword>WWW</keyword>
<keyword>resource</keyword>
<abstract>
<t>
A Uniform Resource Identifier (URI) is a compact sequence of characters
that identifies an abstract or physical resource.  This specification
defines the generic URI syntax and a process for resolving URI references
that might be in relative form, along with guidelines and security
considerations for the use of URIs on the Internet.
The URI syntax defines a grammar that is a superset of all valid URIs,
allowing an implementation to parse the common components of a URI
reference without knowing the scheme-specific requirements of every
possible identifier.  This specification does not define a generative
grammar for URIs; that task is performed by the individual
specifications of each URI scheme.
</t></abstract></front>

<seriesInfo name='STD' value='66' />
<seriesInfo name='RFC' value='3986' />
<format type='TXT' octets='141811' target='http://www.rfc-editor.org/rfc/rfc3986.txt' />
<format type='HTML' octets='213584' target='http://xml.resource.org/public/rfc/html/rfc3986.html' />
<format type='XML' octets='163534' target='http://xml.resource.org/public/rfc/xml/rfc3986.xml' />
</reference>

<reference anchor='RFC4007'>

<front>
<title>IPv6 Scoped Address Architecture</title>
<author initials='S.' surname='Deering' fullname='S. Deering'>
<organization /></author>
<author initials='B.' surname='Haberman' fullname='B. Haberman'>
<organization /></author>
<author initials='T.' surname='Jinmei' fullname='T. Jinmei'>
<organization /></author>
<author initials='E.' surname='Nordmark' fullname='E. Nordmark'>
<organization /></author>
<author initials='B.' surname='Zill' fullname='B. Zill'>
<organization /></author>

<date year='2005' month='March' />
<abstract>
<t>This document specifies the architectural characteristics, expected behavior, textual representation, and usage of IPv6 addresses of different scopes.  According to a decision in the IPv6 working group, this document intentionally avoids the syntax and usage of unicast site-local addresses. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4007' />
<format type='TXT' octets='53555' target='http://www.rfc-editor.org/rfc/rfc4007.txt' />
</reference>
<reference anchor='RFC4291'>

<front>
<title>IP Version 6 Addressing Architecture</title>
<author initials='R.' surname='Hinden' fullname='R. Hinden'>
<organization /></author>
<author initials='S.' surname='Deering' fullname='S. Deering'>
<organization /></author>
<date year='2006' month='February' />
<abstract>
<t>This specification defines the addressing architecture of the IP Version 6 (IPv6) protocol. The document includes the IPv6 addressing model, text representations of IPv6 addresses, definition of IPv6 unicast addresses, anycast addresses, and multicast addresses, and an IPv6 node's required addresses.&lt;/t>&lt;t> This document obsoletes RFC 3513, "IP Version 6 Addressing Architecture". [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4291' />
<format type='TXT' octets='52897' target='http://www.rfc-editor.org/rfc/rfc4291.txt' />
</reference>

    
  </references>

  <references title="Informative References">

<reference anchor='RFC0768'>
<!-- [rfced] We note that this RFC is mentioned in the YANG module, but it is 
not cited elsewhere in the text.  Is there an appropriate place where this RFC 
can be referenced in the body of the document also?
-->

<front>
<title>User Datagram Protocol</title>
<author initials='J.' surname='Postel' fullname='J. Postel'>
<organization>University of Southern California (USC)/Information Sciences Institute</organization>
<address>
<postal>
<street>4676 Admiralty Way</street>
<city>Marina del Rey</city>
<region>CA</region>
<code>90291</code>
<country>US</country></postal>
<phone>+1 213 822 1511</phone></address></author>
<date year='1980' day='28' month='August' /></front>

<seriesInfo name='STD' value='6' />
<seriesInfo name='RFC' value='768' />
<format type='TXT' octets='5896' target='ftp://ftp.isi.edu/in-notes/rfc768.txt' />
</reference>

  

   <reference anchor='IEEE802'>
     <front>
       <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
       <author>
	 <organization>IEEE</organization>
       </author>
     </front>
     <seriesInfo name='IEEE Std.' value='802-2001'/>
   </reference>

   <reference anchor='RFC5952'>
     <front>
       <title>A Recommendation for IPv6 Address Text Representation</title>
       <author initials="S." surname="Kawamura">
	 <organization>NEC BIGLOBE, Ltd.</organization>
       </author>
       <author initials="M." surname="Kawashima">
	 <organization>NEC AccessTechnica, Ltd.</organization>
       </author>
       <date month="August" year="2010" />
     </front>
     <seriesInfo name='RFC' value='5952'/>
   </reference>

<reference anchor='RFC0791'>

<front>
<title abbrev='Internet Protocol'>Internet Protocol</title>
<author initials='J.' surname='Postel' fullname='Jon Postel'>
<organization>University of Southern California (USC)/Information Sciences Institute</organization>
<address>
<postal>
<street>4676 Admiralty Way</street>
<city>Marina del Rey</city>
<region>CA</region>

<code>90291</code>
<country>US</country></postal></address></author>
<date year='1981' day='1' month='September' /></front>

<seriesInfo name='STD' value='5' />
<seriesInfo name='RFC' value='791' />
<format type='TXT' octets='97779' target='http://www.rfc-editor.org/rfc/rfc791.txt' />
</reference>
<reference anchor='RFC0793'>

<front>
<title abbrev='Transmission Control Protocol'>Transmission Control Protocol</title>
<author initials='J.' surname='Postel' fullname='Jon Postel'>
<organization>University of Southern California (USC)/Information Sciences Institute</organization>
<address>
<postal>
<street>4676 Admiralty Way</street>
<city>Marina del Rey</city>
<region>CA</region>

<code>90291</code>
<country>US</country></postal></address></author>
<date year='1981' day='1' month='September' /></front>

<seriesInfo name='STD' value='7' />
<seriesInfo name='RFC' value='793' />
<format type='TXT' octets='172710' target='http://www.rfc-editor.org/rfc/rfc793.txt' />
</reference>
<reference anchor='RFC0952'>

<front>
<title>DoD Internet host table specification</title>
<author initials='K.' surname='Harrenstien' fullname='K. Harrenstien'>
<organization>SRI International</organization></author>
<author initials='M.' surname='Stahl' fullname='M. Stahl'>
<organization>SRI International</organization></author>
<author initials='E.' surname='Feinler' fullname='E. Feinler'>
<organization>SRI International</organization></author>
<date year='1985' day='1' month='October' /></front>

<seriesInfo name='RFC' value='952' />
<format type='TXT' octets='12388' target='http://www.rfc-editor.org/rfc/rfc952.txt' />
</reference>

<reference anchor='RFC1034'>

<front>
<title abbrev='Domain Concepts and Facilities'>Domain names - concepts and facilities</title>
<author initials='P.' surname='Mockapetris' fullname='P. Mockapetris'>
<organization>Information Sciences Institute (ISI)</organization></author>
<date year='1987' day='1' month='November' /></front>

<seriesInfo name='STD' value='13' />
<seriesInfo name='RFC' value='1034' />
<format type='TXT' octets='129180' target='http://www.rfc-editor.org/rfc/rfc1034.txt' />
</reference>
<reference anchor='RFC1123'>

<front>
<title>Requirements for Internet Hosts - Application and Support</title>
<author initials='R.' surname='Braden' fullname='Robert Braden'>
<organization>University of Southern California (USC), Information Sciences Institute</organization>
<address>
<postal>
<street>4676 Admiralty Way</street>
<city>Marina del Rey</city>
<region>CA</region>

<code>90292-6695</code>
<country>US</country></postal>
<phone>+1 213 822 1511</phone>
<email>Braden@ISI.EDU</email></address></author>
<date year='1989' month='October' /></front>

<seriesInfo name='STD' value='3' />
<seriesInfo name='RFC' value='1123' />
<format type='TXT' octets='245503' target='http://www.rfc-editor.org/rfc/rfc1123.txt' />
</reference>
<reference anchor='RFC1930'>

<front>
<title abbrev='Guidelines for creation of an AS'>Guidelines for creation, selection, and registration of an Autonomous System (AS)</title>
<author initials='J.' surname='Hawkinson' fullname='John Hawkinson'>
<organization>BBN Planet Corporation</organization>
<address>
<postal>
<street>150 CambridgePark Drive</street>
<city>Cambridge</city>
<region>MA</region>

<code>02139</code>
<country>US</country></postal>
<phone>+1 617 873 3180</phone>
<email>jhawk@bbnplanet.com</email></address></author>
<author initials='T.' surname='Bates' fullname='Tony Bates'>
<organization>MCI</organization>
<address>
<postal>
<street>2100 Reston Parkway</street>
<city>Reston</city>

<region>VA</region>
<code>22094</code>
<country>US</country></postal>
<phone>+1 703 715 7521</phone>
<email>Tony.Bates@mci.net</email></address></author>
<date year='1996' month='March' />
<abstract>
<t>This memo discusses when it is appropriate to register and utilize an Autonomous System (AS), and lists criteria for such.  ASes are the unit of routing policy in the modern world of exterior routing, and are specifically applicable to protocols like EGP (Exterior Gateway Protocol, now at historical status; see, BGP (Border Gateway Protocol, the current de facto standard for inter-AS routing; see, and IDRP (The OSI Inter-Domain Routing Protocol, which the Internet is expected to adopt when BGP becomes obsolete; see. It should be noted that the IDRP equivalent of an AS is the RDI, or Routing Domain Identifier.</t></abstract></front>

<seriesInfo name='BCP' value='6' />
<seriesInfo name='RFC' value='1930' />

<format type='TXT' octets='22073' target='http://www.rfc-editor.org/rfc/rfc1930.txt' />
</reference>

<reference anchor='RFC2460'>

<front>
<title abbrev='IPv6 Specification'>Internet Protocol, Version 6 (IPv6) Specification</title>
<author initials='S.E.' surname='Deering' fullname='Stephen E. Deering'>
<organization>Cisco Systems, Inc.</organization>
<address>
<postal>
<street>170 West Tasman Drive</street>
<street>San Jose</street>
<region>CA</region>

<code>95134-1706</code>
<country>USA</country></postal>
<phone>+1 408 527 8213</phone>
<facsimile>+1 408 527 8254</facsimile>
<email>deering@cisco.com</email></address></author>
<author initials='R.M.' surname='Hinden' fullname='Robert M. Hinden'>
<organization>Nokia</organization>
<address>
<postal>
<street>232 Java Drive</street>

<street>Sunnyvale</street>
<region>CA</region>
<code>94089</code>
<country>USA</country></postal>
<phone>+1 408 990 2004</phone>
<facsimile>+1 408 743 5677</facsimile>
<email>hinden@iprg.nokia.com</email></address></author>
<date year='1998' month='December' />
<area>Internet</area>

<keyword>internet protocol version 6</keyword>
<keyword>IPv6</keyword>
<abstract>
<t>
   This document specifies version 6 of the Internet Protocol (IPv6),
   also sometimes referred to as IP Next Generation or IPng.
</t></abstract></front>

<seriesInfo name='RFC' value='2460' />
<format type='TXT' octets='85490' target='http://www.rfc-editor.org/rfc/rfc2460.txt' />
<format type='HTML' octets='99496' target='http://xml.resource.org/public/rfc/html/rfc2460.html' />
<format type='XML' octets='93343' target='http://xml.resource.org/public/rfc/xml/rfc2460.xml' />
</reference>
<reference anchor='RFC2474'>

<front>
<title abbrev='Differentiated Services Field'>Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers</title>
<author initials='K.' surname='Nichols' fullname='Kathleen Nichols'>
<organization>Cisco Systems</organization>
<address>
<postal>
<street>170 West Tasman Drive</street>
<city>San Jose</city>
<region>CA</region>

<code>95134-1706</code>
<country>USA</country></postal>
<phone>+1 408 525 4857</phone>
<email>kmn@cisco.com</email></address></author>
<author initials='S.' surname='Blake' fullname='Steven Blake'>
<organization>Torrent Networking Technologies</organization>
<address>
<postal>
<street>3000 Aerial Center</street>
<city>Morrisville</city>

<region>NC</region>
<code>27560</code>
<country>USA</country></postal>
<phone>+1 919 468 8466 x232</phone>
<email>slblake@torrentnet.com</email></address></author>
<author initials='F.' surname='Baker' fullname='Fred Baker'>
<organization>Cisco Systems</organization>
<address>
<postal>
<street>519 Lado Drive</street>

<city> Santa Barbara</city>
<region>CA</region>
<code>93111</code>
<country>USA</country></postal>
<phone>+1 408 526 4257</phone>
<email>fred@cisco.com</email></address></author>
<author initials='D.L.' surname='Black' fullname='David L. Black'>
<organization>EMC Corporation</organization>
<address>

<postal>
<street>35 Parkwood Drive</street>
<city>Hopkinton</city>
<region>MA</region>
<code>01748</code>
<country>USA</country></postal>
<phone>+1 508 435 1000 x76140</phone>
<email>black_david@emc.com</email></address></author>
<date year='1998' month='December' />
<area>Internet</area>

<keyword>internet protocol version 4</keyword>
<keyword>IPv6</keyword>
<keyword>IPv4</keyword>
<keyword>internet protocol version 6</keyword>
<keyword>type of service</keyword>
<abstract>
<t>
   Differentiated services enhancements to the Internet protocol are
   intended to enable scalable service discrimination in the Internet
   without the need for per-flow state and signaling at every hop.  A
   variety of services may be built from a small, well-defined set of
   building blocks which are deployed in network nodes.  The services
   may be either end-to-end or intra-domain; they include both those
   that can satisfy quantitative performance requirements (e.g., peak
   bandwidth) and those based on relative performance (e.g., &quot;class&quot;
   differentiation).  Services can be constructed by a combination of:


<list>
<t>
   - setting bits in an IP header field at network boundaries
     (autonomous system boundaries, internal administrative boundaries,
     or hosts),
</t>
<t>
   - using those bits to determine how packets are forwarded by the
     nodes inside the network, and
</t>
<t>
   - conditioning the marked packets at network boundaries in accordance
     with the requirements or rules of each service.
</t></list></t>
<t>
   The requirements or rules of each service must be set through
   administrative policy mechanisms which are outside the scope of this
   document.  A differentiated services-compliant network node includes
   a classifier that selects packets based on the value of the DS field,
   along with buffer management and packet scheduling mechanisms capable
   of delivering the specific packet forwarding treatment indicated by
   the DS field value.  Setting of the DS field and conditioning of the
   temporal behavior of marked packets need only be performed at network
   boundaries and may vary in complexity.
</t>

<t>
   This document defines the IP header field, called the DS (for
   differentiated services) field.  In IPv4, it defines the layout of
   the TOS octet; in IPv6, the Traffic Class octet.  In addition, a base
   set of packet forwarding treatments, or per-hop behaviors, is
   defined.
</t>
<t>
   For a more complete understanding of differentiated services, see
   also the differentiated services architecture .
</t></abstract></front>

<seriesInfo name='RFC' value='2474' />
<format type='TXT' octets='50576' target='http://www.rfc-editor.org/rfc/rfc2474.txt' />
<format type='HTML' octets='67719' target='http://xml.resource.org/public/rfc/html/rfc2474.html' />
<format type='XML' octets='62259' target='http://xml.resource.org/public/rfc/xml/rfc2474.xml' />
</reference>

<reference anchor='RFC2578'>

<front>
<title abbrev='SMIv2'>Structure of Management Information Version 2 (SMIv2)</title>
<author initials='K.' surname='McCloghrie' fullname='Keith McCloghrie' role='editor'>
<organization>Cisco Systems, Inc.</organization>
<address>
<postal>
<street>170 West Tasman Drive</street>
<city>San Jose</city>
<region>CA</region>

<code>95134-1706</code>
<country>US</country></postal>
<phone>+1 408 526 5260</phone>
<email>kzm@cisco.com</email></address></author>
<author initials='D.' surname='Perkins' fullname='David Perkins' role='editor'>
<organization>SNMPinfo</organization>
<address>
<postal>
<street>3763 Benton Street</street>
<city>Santa Clara</city>

<region>CA</region>
<code>95051</code>
<country>US</country></postal>
<phone>+1 408 221 8702</phone>
<email>dperkins@snmpinfo.com</email></address></author>
<author initials='J.' surname='Schoenwaelder' fullname='Juergen Schoenwaelder' role='editor'>
<organization>TU Braunschweig</organization>
<address>
<postal>
<street>Bueltenweg 74/75</street>

<street>38106 Braunschweig</street>
<country>DE</country></postal>
<phone>+49 531 3913283</phone>
<email>schoenw@ibr.cs.tu-bs.de</email></address></author>
<date year='1999' month='April' /></front>

<seriesInfo name='STD' value='58' />
<seriesInfo name='RFC' value='2578' />
<format type='TXT' octets='89712' target='http://www.rfc-editor.org/rfc/rfc2578.txt' />
</reference>
<reference anchor='RFC2579'>

<front>
<title>Textual Conventions for SMIv2</title>
<author initials='K.' surname='McCloghrie' fullname='Keith McCloghrie' role='editor'>
<organization>Cisco Systems, Inc.</organization>
<address>
<postal>
<street>170 West Tasman Drive</street>
<city>San Jose</city>
<region>CA</region>

<code>95134-1706</code>
<country>US</country></postal>
<phone>+1 408 526 5260</phone>
<email>kzm@cisco.com</email></address></author>
<author initials='D.' surname='Perkins' fullname='David Perkins' role='editor'>
<organization>SNMPinfo</organization>
<address>
<postal>
<street>3763 Benton Street</street>
<city>Santa Clara</city>

<region>CA</region>
<code>95051</code>
<country>US</country></postal>
<phone>+1 408 221 8702</phone>
<email>dperkins@snmpinfo.com</email></address></author>
<author initials='J.' surname='Schoenwaelder' fullname='Juergen Schoenwaelder' role='editor'>
<organization>TU Braunschweig</organization>
<address>
<postal>
<street>Bueltenweg 74/75</street>

<street>38106 Braunschweig</street>
<country>DE</country></postal>
<phone>+49 531 3913283</phone>
<email>schoenw@ibr.cs.tu-bs.de</email></address></author>
<date year='1999' month='April' /></front>

<seriesInfo name='STD' value='58' />
<seriesInfo name='RFC' value='2579' />
<format type='TXT' octets='59039' target='http://www.rfc-editor.org/rfc/rfc2579.txt' />
</reference>
<reference anchor='RFC2780'>

<front>
<title abbrev='IANA Assignments'>IANA Allocation Guidelines For Values In the Internet Protocol and Related Headers</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street />
<city>Cambridge</city>
<region>MA</region>

<code>02138</code>
<country>US</country></postal>
<phone>+1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<author initials='V.' surname='Paxson' fullname='Vern Paxson'>
<organization>ACIRI / ICSI</organization>
<address>
<postal>
<street>1947 Center Street</street>
<street>Suite 600</street>

<city>Berkeley</city>
<region>CA</region>
<code>94704-1198</code>
<country>US</country></postal>
<phone>+1 510 666 2882</phone>
<email>vern@aciri.org</email></address></author>
<date year='2000' month='March' />
<abstract>
<t>This memo provides guidance for the IANA to use in assigning parameters for fields in the IPv4, IPv6, ICMP, UDP and TCP protocol headers.</t></abstract></front>

<seriesInfo name='BCP' value='37' />
<seriesInfo name='RFC' value='2780' />
<format type='TXT' octets='18954' target='http://www.rfc-editor.org/rfc/rfc2780.txt' />
</reference>
<reference anchor='RFC2782'>

<front>
<title abbrev='DNS SRV RR'>A DNS RR for specifying the location of services (DNS SRV)</title>
<author initials='A.' surname='Gulbrandsen' fullname='Arnt Gulbrandsen'>
<organization>Troll Tech</organization>
<address>
<postal>
<street>Waldemar Thranes gate 98B</street>
<city>Oslo</city>
<region />

<code>N-0175</code>
<country>NO</country></postal>
<phone>+47 22 806390</phone>
<facsimile>+47 22 806380</facsimile>
<email>arnt@troll.no</email></address></author>
<author initials='P.' surname='Vixie' fullname='Paul Vixie'>
<organization>Internet Software Consortium</organization>
<address>
<postal>
<street>950 Charter Street</street>

<city>Redwood City</city>
<region>CA</region>
<code>94063</code>
<country>US</country></postal>
<phone>+1 650 779 7001</phone></address></author>
<author initials='L.' surname='Esibov' fullname='Levon Esibov'>
<organization>Microsoft Corporation</organization>
<address>
<postal>
<street>One Microsoft Way</street>

<city>Redmond</city>
<region>WA</region>
<code>98052</code>
<country>US</country></postal>
<email>levone@microsoft.com</email></address></author>
<date year='2000' month='February' />
<abstract>
<t>This document describes a DNS RR which specifies the location of the
   server(s) for a specific protocol and domain.</t></abstract></front>

<seriesInfo name='RFC' value='2782' />
<format type='TXT' octets='24013' target='http://www.rfc-editor.org/rfc/rfc2782.txt' />

</reference>

<reference anchor='RFC2856'>

<front>
<title>Textual Conventions for Additional High Capacity Data Types</title>
<author initials='A.' surname='Bierman' fullname='A. Bierman'>
<organization /></author>
<author initials='K.' surname='McCloghrie' fullname='K. McCloghrie'>
<organization /></author>
<author initials='R.' surname='Presuhn' fullname='R. Presuhn'>
<organization /></author>
<date year='2000' month='June' />
<abstract>
<t>This memo specifies new textual conventions for additional high capacity data types, intended for SNMP implementations which already support the Counter64 data type. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='2856' />
<format type='TXT' octets='20954' target='http://www.rfc-editor.org/rfc/rfc2856.txt' />
</reference>

<reference anchor='RFC3289'>

<front>
<title>Management Information Base for the Differentiated Services Architecture</title>
<author initials='F.' surname='Baker' fullname='F. Baker'>
<organization /></author>
<author initials='K.' surname='Chan' fullname='K. Chan'>
<organization /></author>
<author initials='A.' surname='Smith' fullname='A. Smith'>
<organization /></author>
<date year='2002' month='May' />
<abstract>
<t>This memo describes an SMIv2 (Structure of Management Information version 2) MIB for a device implementing the Differentiated Services Architecture.  It may be used both for monitoring and configuration of a router or switch capable of Differentiated Services functionality. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='3289' />
<format type='TXT' octets='239041' target='http://www.rfc-editor.org/rfc/rfc3289.txt' />
</reference>

<reference anchor='RFC3305'>

<front>
<title>Report from the Joint W3C/IETF URI Planning Interest Group: Uniform Resource Identifiers (URIs), URLs, and Uniform Resource Names (URNs): Clarifications and Recommendations</title>
<author initials='M.' surname='Mealling' fullname='M. Mealling'>
<organization /></author>
<author initials='R.' surname='Denenberg' fullname='R. Denenberg'>
<organization /></author>
<date year='2002' month='August' /></front>

<seriesInfo name='RFC' value='3305' />
<format type='TXT' octets='21793' target='http://www.rfc-editor.org/rfc/rfc3305.txt' />
</reference>

<reference anchor='RFC5891'>
<front>
<title>Internationalizing Domain Names in Applications (IDNA): Protocol</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<date year='2010' month='August' />
</front>
<seriesInfo name='RFC' value='5891' />
</reference>

<reference anchor='RFC3595'>

<front>
<title>Textual Conventions for IPv6 Flow Label</title>
<author initials='B.' surname='Wijnen' fullname='B. Wijnen'>
<organization /></author>
<date year='2003' month='September' />
<abstract>
<t>This MIB module defines textual conventions to represent the commonly used IPv6 Flow Label.  The intent is that these textual conventions (TCs) will be imported and used in MIB modules that would otherwise define their own representations. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='3595' />
<format type='TXT' octets='11746' target='http://www.rfc-editor.org/rfc/rfc3595.txt' />
</reference>

<reference anchor='RFC4001'>

<front>
<title>Textual Conventions for Internet Network Addresses</title>
<author initials='M.' surname='Daniele' fullname='M. Daniele'>
<organization /></author>
<author initials='B.' surname='Haberman' fullname='B. Haberman'>
<organization /></author>
<author initials='S.' surname='Routhier' fullname='S. Routhier'>
<organization /></author>
<author initials='J.' surname='Schoenwaelder' fullname='J. Schoenwaelder'>
<organization /></author>
<date year='2005' month='February' />
<abstract>

<t>This MIB module defines textual conventions to represent commonly used Internet network layer addressing information.  The intent is that these textual conventions will be imported and used in MIB modules that would otherwise define their own representations. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4001' />
<format type='TXT' octets='45836' target='http://www.rfc-editor.org/rfc/rfc4001.txt' />
</reference>

<reference anchor='RFC4271'>

<front>
<title>A Border Gateway Protocol 4 (BGP-4)</title>
<author initials='Y.' surname='Rekhter' fullname='Y. Rekhter'>
<organization /></author>
<author initials='T.' surname='Li' fullname='T. Li'>
<organization /></author>
<author initials='S.' surname='Hares' fullname='S. Hares'>
<organization /></author>
<date year='2006' month='January' />
<abstract>
<t>This document discusses the Border Gateway Protocol (BGP), which is an inter-Autonomous System routing protocol.&lt;/t>&lt;t> The primary function of a BGP speaking system is to exchange network reachability information with other BGP systems. This network reachability information includes information on the list of Autonomous Systems (ASes) that reachability information traverses. This information is sufficient for constructing a graph of AS connectivity for this reachability from which routing loops may be pruned, and, at the AS level, some policy decisions may be enforced.&lt;/t>&lt;t> BGP-4 provides a set of mechanisms for supporting Classless Inter-Domain Routing (CIDR). These mechanisms include support for advertising a set of destinations as an IP prefix, and eliminating the concept of network "class" within BGP. BGP-4 also introduces mechanisms that allow aggregation of routes, including aggregation of AS paths.&lt;/t>&lt;t> This document obsoletes RFC 1771. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4271' />
<format type='TXT' octets='222702' target='http://www.rfc-editor.org/rfc/rfc4271.txt' />
</reference>

<reference anchor='RFC4340'>

<front>
<title>Datagram Congestion Control Protocol (DCCP)</title>
<author initials='E.' surname='Kohler' fullname='E. Kohler'>
<organization /></author>
<author initials='M.' surname='Handley' fullname='M. Handley'>
<organization /></author>
<author initials='S.' surname='Floyd' fullname='S. Floyd'>
<organization /></author>
<date year='2006' month='March' />
<abstract>
<t>The Datagram Congestion Control Protocol (DCCP) is a transport protocol that provides bidirectional unicast connections of congestion-controlled unreliable datagrams.  DCCP is suitable for applications that transfer fairly large amounts of data and that can benefit from control over the tradeoff between timeliness and reliability. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4340' />
<format type='TXT' octets='318830' target='http://www.rfc-editor.org/rfc/rfc4340.txt' />
</reference>
<reference anchor='RFC4502'>

<front>
<title>Remote Network Monitoring Management Information Base Version 2</title>
<author initials='S.' surname='Waldbusser' fullname='S. Waldbusser'>
<organization /></author>
<date year='2006' month='May' />
<abstract>
<t>This document defines a portion of the Management Information Base (MIB) for use with network management protocols in TCP/IP-based internets. In particular, it defines objects for managing remote network monitoring devices.&lt;/t>&lt;t> This document obsoletes RFC 2021, updates RFC 3273, and contains a new version of the RMON2-MIB module. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4502' />

<format type='TXT' octets='290816' target='http://www.rfc-editor.org/rfc/rfc4502.txt' />
</reference>

<reference anchor='RFC4741'>

<front>
<title>NETCONF Configuration Protocol</title>
<author initials='R.' surname='Enns' fullname='R. Enns'>
<organization /></author>
<date year='2006' month='December' />
<abstract>
<t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized on top of a simple Remote Procedure Call (RPC) layer. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4741' />
<format type='TXT' octets='173914' target='http://www.rfc-editor.org/rfc/rfc4741.txt' />
</reference>

<reference anchor='RFC4893'>

<front>
<title>BGP Support for Four-octet AS Number Space</title>
<author initials='Q.' surname='Vohra' fullname='Q. Vohra'>
<organization /></author>
<author initials='E.' surname='Chen' fullname='E. Chen'>
<organization /></author>
<date year='2007' month='May' />
<abstract>
<t>Currently the Autonomous System (AS) number is encoded as a two-octet entity in BGP.  This document describes extensions to BGP to carry the Autonomous System number as a four-octet entity. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4893' />

<format type='TXT' octets='21520' target='http://www.rfc-editor.org/rfc/rfc4893.txt' />
</reference>

<reference anchor='RFC4960'>

<front>
<title>Stream Control Transmission Protocol</title>
<author initials='R.' surname='Stewart' fullname='R. Stewart'>
<organization /></author>
<date year='2007' month='September' />
<abstract>
<t>This document obsoletes RFC 2960 and RFC 3309. It describes the Stream Control Transmission Protocol (SCTP). SCTP is designed to transport Public Switched Telephone Network (PSTN) signaling messages over IP networks, but is capable of broader applications.&lt;/t>&lt;t> SCTP is a reliable transport protocol operating on top of a connectionless packet network such as IP. It offers the following services to its users:&lt;/t>&lt;t> -- acknowledged error-free non-duplicated transfer of user data,&lt;/t>&lt;t> -- data fragmentation to conform to discovered path MTU size,&lt;/t>&lt;t> -- sequenced delivery of user messages within multiple streams, with an option for order-of-arrival delivery of individual user messages,&lt;/t>&lt;t> -- optional bundling of multiple user messages into a single SCTP packet, and&lt;/t>&lt;t> -- network-level fault tolerance through supporting of multi-homing at either or both ends of an association.&lt;/t>&lt;t> The design of SCTP includes appropriate congestion avoidance behavior and resistance to flooding and masquerade attacks. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4960' />
<format type='TXT' octets='346022' target='http://www.rfc-editor.org/rfc/rfc4960.txt' />
</reference>

<reference anchor='RFC5017'>

<front>
<title>MIB Textual Conventions for Uniform Resource Identifiers (URIs)</title>
<author initials='D.' surname='McWalter' fullname='D. McWalter'>
<organization /></author>
<date year='2007' month='September' />
<abstract>
<t>This MIB module defines textual conventions to represent STD 66 Uniform Resource Identifiers (URIs).  The intent is that these textual conventions will be imported and used in MIB modules that would otherwise define their own representation(s). [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5017' />
<format type='TXT' octets='14826' target='http://www.rfc-editor.org/rfc/rfc5017.txt' />
</reference>

    <!-- 
        http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/datatypes.html
    -->
    <reference anchor="XSD-TYPES" target="http://www.w3.org/TR/2004/REC-xmlschema-2-20041028">
      <front>
        <title>XML Schema Part 2: Datatypes Second Edition</title>
        <author initials="A." surname="Malhotra" fullname="Ashok Malhotra">
          <organization/>
        </author>
        <author initials="P." surname="Biron" fullname="Paul V. Biron">
          <organization/>
        </author>
        <date month="October" day="28" year="2004"/>
      </front>
      <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-xmlschema-2-20041028"/>
      <format type="HTML" target="http://www.w3.org/TR/2004/REC-xmlschema-2-20041028"/>
    </reference>

    <reference anchor="ISO9834-1">
      <front>
        <title>
          Information technology -- Open Systems Interconnection --
          Procedures for the operation of OSI Registration
          Authorities: General procedures and top arcs of the ASN.1
          Object Identifier tree
        </title>
        <author>
          <organization>ISO/IEC</organization>
        </author>
        <date year="2008"/>
      </front>
      <seriesInfo name="ISO/IEC" value="9834-1:2008"/>
    </reference>

  </references>

</back></rfc>
