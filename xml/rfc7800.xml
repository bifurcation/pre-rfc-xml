<?xml version="1.0" encoding="us-ascii"?>

<?xml-stylesheet type='text/xsl' href='http://xml2rfc.tools.ietf.org/authoring/rfc2629.xslt' ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc number="7800"
     category="std" 
     submissionType="IETF"
     consensus="yes"
     ipr="trust200902">
  <front>
    <title abbrev="Proof-of-Possession Key for JWTs">Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)</title>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>

    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization abbrev="Ping Identity">Ping Identity</organization>
      <address>
	<email>ve7jtb@ve7jtb.com</email>
	<uri>http://www.thread-safe.com/</uri>
      </address>
    </author>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>ARM Limited</organization>
      <address>
	<postal>
	  <street></street>
	  <country>Austria</country>
	</postal>
	<email>Hannes.Tschofenig@gmx.net</email>
	<uri>http://www.tschofenig.priv.at</uri>
      </address>
    </author>

    <date month="March" year="2016"/>

    <area>Security</area>
    <workgroup>OAuth Working Group</workgroup>

    <keyword>JSON Web Token</keyword>
    <keyword>JWT</keyword>
    <keyword>Proof-of-Possession</keyword>
    <keyword>Holder-of-Key</keyword>

    <abstract>
      <t>
        This specification describes how to declare in a JSON Web Token (JWT)
	that the presenter of the JWT possesses a particular proof-of-possession key
	and how the recipient can cryptographically confirm
	proof of possession of the key by the presenter.
	Being able to prove possession of a key is also sometimes described as
	the presenter being a holder-of-key.
      </t>
    </abstract>

  </front>

  <middle>
    <section title="Introduction" anchor="Introduction">
      <t>
        This specification describes how a JSON Web Token <xref target="JWT"/> can declare
	that the presenter of the JWT possesses a particular proof-of-possession (PoP) key
	and how the recipient can cryptographically confirm
	proof of possession of the key by the presenter.
	Proof of possession of a key is also sometimes described as
	the presenter being a holder-of-key.
	The <xref target="OAUTH-POP-ARCH"/> specification
	describes key confirmation, among other confirmation mechanisms.
        This specification defines how to communicate confirmation key information in JWTs.
     </t>
     <t>
       Envision the following two use cases.
       The first use case employs a symmetric proof-of-possession key and
       the second use case employs an asymmetric proof-of-possession key.
     </t>
     <figure title="Proof of Possession with a Symmetric Key" anchor="Figure-1">
       <artwork><![CDATA[
  +--------------+
  |              |                         +--------------+
  |              |--(3) Presentation of -->|              |
  |              |      JWT w/ Encrypted   |              |
  |  Presenter   |      PoP Key            |              |
  |              |                         |              |
  |              |<-(4) Communication ---->|              |
  |              |      Authenticated by   |              |
  +--------------+      PoP Key            |              |
    ^          ^                           |              |
    |          |                           |              |
   (1) Sym.   (2) JWT w/                   |  Recipient   |
    |  PoP     |  Encrypted                |              |
    |  Key     |  PoP Key                  |              |
    v          |                           |              |
  +--------------+                         |              |
  |              |                         |              |
  |              |                         |              |
  |              |<-(0) Key Exchange for ->|              |
  |   Issuer     |      Key Encryption Key |              |
  |              |                         |              |
  |              |                         |              |
  |              |                         +--------------+
  +--------------+
]]></artwork></figure>
     <t>
       In the case illustrated in <xref target="Figure-1"/>,
       (1) either the presenter generates a symmetric key and
       privately sends it to the issuer
       or the issuer generates a symmetric key and
       privately sends it to the presenter.
       The issuer generates a JWT with an encrypted copy of this
       symmetric key in the confirmation claim.
       This symmetric key is encrypted with a key known
       only to the issuer and the recipient,
       which was previously established in step (0).
       The entire JWT is integrity protected by the issuer.
       The JWT is then (2) sent to the presenter.
       Now, the presenter is in possession of the symmetric key as well as the
       JWT (which includes the confirmation claim).
       When the presenter (3) presents the JWT to the recipient,
       it also needs to demonstrate possession of the symmetric key;
       the presenter, for example, (4) uses the symmetric key
       in a challenge/response protocol with the recipient.
       The recipient is then able to verify that it is
       interacting with the genuine presenter by decrypting the key
       in the confirmation claim of the JWT.
       By doing this, the recipient obtains the symmetric key, which it then uses to
       verify cryptographically protected messages exchanged with the presenter (4).
       This symmetric key mechanism described above is conceptually similar
       to the use of Kerberos tickets.
     </t>
     <t>
       Note that for simplicity, the diagram above and associated text describe
       the direct use of symmetric keys without the use of derived keys.
       A more secure practice is to derive the symmetric keys actually used
       from secrets exchanged, such as the key exchanged in step (0),
       using a Key Derivation Function (KDF) and use the derived keys,
       rather than directly using the secrets exchanged.
     </t>
     <figure title="Proof of Possession with an Asymmetric Key" anchor="Figure-2">
       <artwork><![CDATA[
  +--------------+
  |              |                         +--------------+
  |              |--(3) Presentation of -->|              |
  |              |      JWT w/ Public      |              |
  |  Presenter   |      PoP Key            |              |
  |              |                         |              |
  |              |<-(4) Communication ---->|              |
  |              |      Authenticated by   |              |
  +--------------+      PoP Key            |              |
    |          ^                           |              |
    |          |                           |              |
   (1) Public (2) JWT w/                   |  Recipient   |
    |  PoP     |  Public                   |              |
    |  Key     |  PoP Key                  |              |
    v          |                           |              |
  +--------------+                         |              |
  |              |                         |              |
  |              |                         |              |
  |              |                         |              |
  |    Issuer    |                         |              |
  |              |                         |              |
  |              |                         |              |
  |              |                         +--------------+
  +--------------+
]]></artwork></figure>
     <t>
       In the case illustrated in <xref target="Figure-2"/>,
       the presenter generates a public/private key pair
       and (1) sends the public key to the issuer,
       which creates a JWT that contains the public key (or an identifier for it)
       in the confirmation claim.
       The entire JWT is integrity protected using a digital
       signature to protect it against modifications.
       The JWT is then (2) sent to the presenter.
       When the presenter (3) presents the JWT to the recipient,
       it also needs to demonstrate possession of the private key.
       The presenter, for example, (4) uses the private key in a Transport
       Layer Security (TLS) exchange
       with the recipient or (4) signs a nonce with the private key.
       The recipient is able to verify that it is interacting with
       the genuine presenter by extracting the public key from
       the confirmation claim of the JWT
       (after verifying the digital signature of the JWT)
       and utilizing it with the private key in the TLS exchange
       or by checking the nonce signature.
     </t>
     <t>
       In both cases, the JWT may contain other claims that are needed by the application.
     </t>

     <section title="Notational Conventions" anchor="NotationalConventions">
       <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
       "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY",
       and "OPTIONAL" in this
       document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.
       </t>
       <t>
	 Unless otherwise noted, all the protocol parameter names and values are case sensitive.
       </t>
     </section>
    </section>

    <section title='Terminology' anchor='Terminology'>
      <t>
	This specification uses terms defined in
	the JSON Web Token <xref target="JWT"/>,
	JSON Web Key <xref target="JWK"/>, and
	JSON Web Encryption <xref target="JWE"/> specifications.
      </t>

      <t>
	These terms are defined by this specification:
      </t>

      <t>
	<list style="hanging">

	  <t hangText="Issuer">
	    <vspace/>
	    Party that creates the JWT and binds the proof-of-possession key to it.
	  </t>

	  <t hangText="Presenter">
	    <vspace/>
	    Party that proves possession of a private key (for asymmetric key cryptography)
	    or secret key (for symmetric key cryptography) to a recipient.
	  </t>

	  <t hangText="Recipient">
	    <vspace/>
	    Party that receives the JWT containing the proof-of-possession key information from the presenter.
	  </t>

	</list>
      </t>
    </section>

    <section title='Representations for Proof-of-Possession Keys' anchor="PoP">
      <t>
	By including a <spanx style="verb">cnf</spanx> (confirmation) claim in a JWT,
	the issuer of the JWT declares that the presenter possesses a particular key
	and that the recipient can cryptographically confirm that
	the presenter has possession of that key.
	The value of the <spanx style="verb">cnf</spanx> claim is a JSON object
	and the members of that object identify the proof-of-possession key.
      </t>
      <t>
	The presenter can be identified in one of several ways by the JWT 
	depending upon the application requirements.
	If the JWT contains a <spanx style="verb">sub</spanx> (subject) claim <xref target="JWT"/>,
	the presenter is normally the subject identified by the JWT.
	(In some applications, the subject identifier will be relative to
	the issuer identified by the <spanx style="verb">iss</spanx> (issuer) claim <xref target="JWT"/>.)
	If the JWT contains no <spanx style="verb">sub</spanx> claim,
	the presenter is normally the issuer identified by the JWT
	using the <spanx style="verb">iss</spanx> claim.
	The case in which the presenter is the subject of the JWT is analogous to
	Security Assertion Markup Language (SAML) 2.0 <xref target="OASIS.saml-core-2.0-os"/> SubjectConfirmation usage.
	At least one of the <spanx style="verb">sub</spanx> and <spanx style="verb">iss</spanx>
	claims MUST be present in the JWT.
	Some use cases may require that both be present.
      </t>
      <t>
	Another means used by some applications to identify the presenter
	is an explicit claim,
	such as the <spanx style="verb">azp</spanx> (authorized party) claim
	defined by OpenID Connect <xref target="OpenID.Core"/>.
	Ultimately, the means of identifying the presenter is application specific,
	as is the means of confirming possession of the key that is communicated.
      </t>

      <section title="Confirmation Claim" anchor="Confirmation">
	<t>
	  The <spanx style="verb">cnf</spanx> claim is used in the JWT
	  to contain members used to identify the proof-of-possession key.
	  Other members of the <spanx style="verb">cnf</spanx> object may be defined because
	  a proof-of-possession key may not be the only means of confirming
	  the authenticity of the token.
	  This is analogous to the SAML 2.0 <xref target="OASIS.saml-core-2.0-os"/>
	  SubjectConfirmation element in which a number of different
	  subject confirmation methods can be included
	  (including proof-of-possession key information).
	</t>
	<t>
	  The set of confirmation members that a
	  JWT must contain to be considered valid is context dependent
	  and is outside the scope of this specification.
	  Specific applications of JWTs will require implementations
	  to understand and process some confirmation members in particular ways.
	  However, in the absence of such requirements, all confirmation members
	  that are not understood by implementations MUST be ignored.
	</t>
	<t>
	  This specification establishes the
	  IANA "JWT Confirmation Methods" registry for these members
	  in <xref target="CnfReg"/> and registers the members defined by this specification.
	  Other specifications can register
	  other members used for confirmation, including other members for
	  conveying proof-of-possession keys using different key
	  representations.
	</t>
	<t>
	  The <spanx style="verb">cnf</spanx> claim value MUST represent only a single
	  proof-of-possession key; thus, at most one of the
	  <spanx style="verb">jwk</spanx>,
	  <spanx style="verb">jwe</spanx>,
	  and <spanx style="verb">jku</spanx> (JWK Set URL)
	  confirmation values defined below may be present.
	  Note that if an application needs to represent multiple proof-of-possession
	  keys in the same JWT, one way for it to achieve this is to
	  use other claim names, in addition to <spanx style="verb">cnf</spanx>,
	  to hold the additional proof-of-possession key information.
	  These claims could use the same syntax and semantics
	  as the <spanx style="verb">cnf</spanx> claim.
	  Those claims would be defined by applications or other specifications
	  and could be registered in
	  the IANA "JSON Web Token Claims" registry <xref target="IANA.JWT.Claims"/>.
	</t>
      </section>

      <section title="Representation of an Asymmetric Proof-of-Possession Key" anchor="PrivatePoP">

	<t>
	  When the key held by the presenter is an asymmetric private key,
	  the <spanx style="verb">jwk</spanx> member
	  is a JSON Web Key <xref target="JWK"/>
	  representing the corresponding asymmetric public key.
	  The following example demonstrates such a declaration
	  in the JWT Claims Set of a JWT:
	</t>
	<figure>
	  <artwork><![CDATA[
  {
   "iss": "https://server.example.com",
   "aud": "https://client.example.org",
   "exp": 1361398824,
   "cnf":{
     "jwk":{
       "kty": "EC",
       "use": "sig",
       "crv": "P-256",
       "x": "18wHLeIgW9wVN6VD1Txgpqy2LszYkMf6J8njVAibvhM",
       "y": "-V4dS4UaLMgP_4fY4j8ir7cl1TXlFdAgcx55o7TkcSA"
      }
    }
  }
]]></artwork>
	</figure>

	<t>
	  The JWK MUST contain the required key members for a JWK of that key type
	  and MAY contain other JWK members,
	  including the <spanx style="verb">kid</spanx> (Key ID) member.
	</t>

	<t>
	  The <spanx style="verb">jwk</spanx> member MAY also be used for a JWK
	  representing a symmetric key, provided that the JWT is encrypted
	  so that the key is not revealed to unintended parties.
	  If the JWT is not encrypted, the symmetric key MUST be encrypted as described below.
	</t>
      </section>

      <section title="Representation of an Encrypted Symmetric Proof-of-Possession Key" anchor="SymmetricPoP">

	<t>
	  When the key held by the presenter is a symmetric key,
	  the <spanx style="verb">jwe</spanx> member
	  is an encrypted JSON Web Key <xref target="JWK"/>
	  encrypted to a key known to the recipient
	  using the JWE Compact Serialization
	  containing the symmetric key.
	  The rules for encrypting a JWK are found in
	  Section 7 of the JSON Web Key <xref target="JWK"/> specification.
	</t>
	<t>
	  The following example illustrates a symmetric key that could subsequently be
	  encrypted for use in the <spanx style="verb">jwe</spanx> member:
	</t>
	<figure>
	  <artwork><![CDATA[
  {
   "kty": "oct",
   "alg": "HS256",
   "k": "ZoRSOrFzN_FzUA5XKMYoVHyzff5oRJxl-IXRtztJ6uE"
  }
]]></artwork>
	</figure>
	<t>
	  The UTF-8 <xref target="RFC3629"/> encoding of this JWK
	  is used as the JWE Plaintext when encrypting the key.
	</t>
	<t>
	  The following example is a JWE Header that could be used
	  when encrypting this key:
	</t>
	<figure>
	  <artwork><![CDATA[
  {
   "alg": "RSA-OAEP",
   "enc": "A128CBC-HS256"
  }
]]></artwork>
	</figure>
	<t>
	  The following example JWT Claims Set of a JWT illustrates
	  the use of an encrypted symmetric key as the
	  <spanx style="verb">jwe</spanx> member value:
	</t>
	<figure>
	  <artwork><![CDATA[
  {
   "iss": "https://server.example.com",
   "sub": "24400320",
   "aud": "s6BhdRkqt3",
   "nonce": "n-0S6_WzA2Mj",
   "exp": 1311281970,
   "iat": 1311280970,
   "cnf":{
     "jwe":
       "eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkExMjhDQkMtSFMyNTYifQ.
       (remainder of JWE omitted for brevity)"
     }
  }
]]></artwork>
	</figure>

      </section>

      <section title="Representation of a Key ID for a Proof-of-Possession Key" anchor="KidPoP">

	<t>
	  The proof-of-possession key can also be identified by the use of
	  a Key ID instead of communicating the actual key,
	  provided the recipient is able to obtain the identified key
	  using the Key ID.
	  In this case,
	  the issuer of a JWT declares that the presenter possesses a particular key
	  and that the recipient can cryptographically confirm
	  proof of possession of the key by the presenter by including a
	  <spanx style="verb">cnf</spanx> claim in the JWT
	  whose value is a JSON object with the JSON object containing a
	  <spanx style="verb">kid</spanx> member
	  identifying the key.
	</t>
	<t>
	  The following example demonstrates such a declaration
	  in the JWT Claims Set of a JWT:
	</t>
	<figure>
	  <artwork><![CDATA[
  {
   "iss": "https://server.example.com",
   "aud": "https://client.example.org",
   "exp": 1361398824,
   "cnf":{
     "kid": "dfd1aa97-6d8d-4575-a0fe-34b96de2bfad"
    }
  }
]]></artwork>
	</figure>
	<t>
	  The content of the <spanx style="verb">kid</spanx> value is application specific.
	  For instance, some applications may choose to use a JWK Thumbprint <xref target="JWK.Thumbprint"/>
	  value as the <spanx style="verb">kid</spanx> value.
	</t>
      </section>

      <section title="Representation of a URL for a Proof-of-Possession Key" anchor="jkuPoP">

	<t>
	  The proof-of-possession key can be passed by reference
	  instead of being passed by value.
	  This is done using the <spanx style="verb">jku</spanx> member.
	  Its value is a URI <xref target="RFC3986"/> that refers to a
	  resource for a set of JSON-encoded public keys represented as a JWK Set <xref target="JWK" />,
	  one of which is the proof-of-possession key.
	  If there are multiple keys in the referenced JWK Set document,
	  a <spanx style="verb">kid</spanx> member MUST also be included
	  with the referenced key's JWK also containing the same <spanx style="verb">kid</spanx> value.
	</t>
	<t>
	  The protocol used to acquire the resource MUST provide
	  integrity protection.  An HTTP GET request to retrieve the
	  JWK Set MUST use TLS
	  <xref target="RFC5246"/> and
	  the identity of the server MUST be validated, as per
	  Section 6 of <xref target="RFC6125">RFC 6125</xref>.
	</t>
	<t>
	  The following example demonstrates such a declaration
	  in the JWT Claims Set of a JWT:
	</t>
	<figure>
	  <artwork><![CDATA[
  {
   "iss": "https://server.example.com",
   "sub": "17760704",
   "aud": "https://client.example.org",
   "exp": 1440804813,
   "cnf":{
     "jku": "https://keys.example.net/pop-keys.json",
     "kid": "2015-08-28"
    }
  }
]]></artwork>
	</figure>
      </section>

      <section title="Specifics Intentionally Not Specified" anchor="NotSpecified">
	<t>
	  Proof of possession is typically demonstrated by having the presenter sign
	  a value determined by the recipient using the key possessed by the presenter.
	  This value is sometimes called a "nonce" or a "challenge".
	</t>
	<t>
	  The means of communicating the nonce and the nature of its contents
	  are intentionally not described in this specification,
	  as different protocols will communicate this information in different ways.
	  Likewise, the means of communicating the signed nonce is also not specified,
	  as this is also protocol specific.
	</t>
	<t>
	  Note that another means of proving possession of the key
	  when it is a symmetric key is to encrypt the key to the recipient.
	  The means of obtaining a key for the recipient is likewise protocol specific.
	</t>
	<t>
	  For examples using the mechanisms defined in this specification,
	  see <xref target="OAUTH-POP-ARCH"/>.
	</t>
      </section>

    </section>

    <section anchor="Security" title="Security Considerations">
      <t>
        All of the security considerations that
        are discussed in <xref target="JWT"/> also apply here.
        In addition, proof of possession introduces its own unique security issues.
	Possessing a key is only valuable if it is kept secret.
	Appropriate means must be used to ensure that unintended parties
	do not learn private key or symmetric key values.
      </t>
      <t>
	Applications utilizing proof of possession should also utilize audience restriction,
	as described in Section 4.1.3 of <xref target="JWT"/>,
	as it provides different protections.
	Proof of possession can be used by recipients to reject messages from unauthorized senders.
	Audience restriction can be used by recipients to reject messages intended for different recipients.
      </t>
      <t>
	A recipient might not understand the <spanx style="verb">cnf</spanx> claim.
	Applications that require
	the proof-of-possession keys communicated with it
	to be understood and processed must ensure that
	the parts of this specification that they use are implemented.
      </t>
      <t>
	Proof of possession via encrypted symmetric secrets is subject to replay attacks.
	This attack can be avoided when a signed nonce or challenge is used
	since the recipient can use a distinct nonce or challenge for each interaction.
	Replay can also be avoided if a sub-key is derived from a shared secret
	that is specific to the instance of the PoP demonstration.
      </t>
      <t>
	As is the case with other information included in a JWT,
	it is necessary to apply data origin authentication and integrity protection
	(via a keyed message digest or a digital signature).
	Data origin authentication ensures that the recipient of the JWT
	learns about the entity that created the JWT
	since this will be important for any policy decisions.
	Integrity protection prevents an adversary from changing
	any elements conveyed within the JWT payload.
	Special care has to be applied when carrying symmetric keys inside the JWT
	since those not only require integrity protection
	but also confidentiality protection.
      </t>
    </section>

    <section anchor="Privacy" title="Privacy Considerations">
      <t>
	A proof-of-possession key can be used as a correlation handle if the same key
	is used with multiple parties.
	Thus, for privacy reasons, it is recommended that different proof-of-possession keys
	be used when interacting with different parties.
      </t>
    </section>

    <section anchor="IANA" title="IANA Considerations">

      <t>
	The following registration procedure is used for all the
	registries established by this specification.
      </t>
      <t>
	Values are registered on a Specification Required
	<xref target="RFC5226"/> basis after a three-week review period on the jwt-reg-review@ietf.org mailing
	list, on the advice of one or more Designated Experts. However, to allow for the
	allocation of values prior to publication, the Designated Experts may approve
	registration once they are satisfied that such a specification will be published.
       </t>
      <t>
	Registration requests sent to the mailing list for review should use
	an appropriate subject
	(e.g., "Request to Register JWT Confirmation Method: example").
	Registration requests that are undetermined for
	a period longer than 21 days can be brought to the IESG's attention
	(using the iesg@ietf.org mailing list) for resolution.
      </t>
      <t>
	Criteria that should be applied by the Designated Experts include
	determining whether the proposed registration duplicates existing functionality,
	determining whether it is likely to be of general applicability
	or whether it is useful only for a single application, and
	evaluating the security properties of the item being registered
	and whether the registration makes sense.
      </t>
      <t>
	It is suggested that multiple Designated Experts be appointed who are able to
	represent the perspectives of different applications using this specification
	in order to enable broadly informed review of registration decisions.
	In cases where a registration decision could be perceived as
	creating a conflict of interest for a particular Expert,
	that Expert should defer to the judgment of the other Experts.
      </t>

      <section anchor="ClaimsRegistry" title="JSON Web Token Claims Registration">
	<t>
	  This specification registers the  <spanx style="verb">cnf</spanx> claim in the IANA
	  "JSON Web Token Claims" registry <xref target="IANA.JWT.Claims"/>
	  established by <xref target="JWT"/>.
	</t>

	<section anchor='ClaimsContents' title='Registry Contents'>
	  <t> <?rfc subcompact="yes"?>
	  <list style='symbols'>
	    <t>
	      Claim Name: <spanx style="verb">cnf</spanx>
	    </t>
	    <t>
	      Claim Description: Confirmation
	    </t>
	    <t>
	      Change Controller: IESG
	    </t>
	    <t>
	      Specification Document(s): <xref target="Confirmation"/> of [RFC7800]
	    </t>
	  </list>
	  </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

      <section title="JWT Confirmation Methods Registry" anchor="CnfReg">
	<t>
	  This specification establishes the
	  IANA "JWT Confirmation Methods" registry
	  for JWT <spanx style="verb">cnf</spanx> member values.
	  The registry records the confirmation method member
	  and a reference to the specification that defines it.
	</t>

        <section title="Registration Template" anchor="CnfTemplate">
          <t>
            <list style='hanging'>
              <t hangText='Confirmation Method Value:'>
                <vspace/>
                The name requested (e.g., "kid").
		Because a core goal of this specification is for the resulting
		representations to be compact, it is RECOMMENDED that the name be short
		-- not to exceed eight characters without a compelling reason to do so.
		This name is case sensitive.
		Names may not match other registered names in a case-insensitive manner
		unless the Designated Experts state that there is a compelling reason
		to allow an exception.
              </t>
              <t hangText='Confirmation Method Description:'>
                <vspace/>
                Brief description of the confirmation method (e.g., "Key Identifier").
              </t>
              <t hangText='Change Controller:'>
                <vspace/>
                For Standards Track RFCs, list the "IESG". For others, give the name of the
                responsible party. Other details (e.g., postal address, email address, home page
                URI) may also be included.
              </t>
              <t hangText='Specification Document(s):'>
                <vspace/>
                Reference to the document or documents that specify the parameter,
		preferably including URIs that
                can be used to retrieve copies of the documents.
		An indication of the relevant
                sections may also be included but is not required.
              </t>
            </list>
          </t>
        </section>

        <section title="Initial Registry Contents" anchor="CnfContents">
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                Confirmation Method Value: <spanx style="verb">jwk</spanx>
              </t>
              <t>
                Confirmation Method Description: JSON Web Key Representing Public Key
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="PrivatePoP"/> of [RFC7800]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Confirmation Method Value: <spanx style="verb">jwe</spanx>
              </t>
              <t>
                Confirmation Method Description: Encrypted JSON Web Key
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="SymmetricPoP"/> of [RFC7800]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Confirmation Method Value: <spanx style="verb">kid</spanx>
              </t>
              <t>
                Confirmation Method Description: Key Identifier
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="KidPoP"/> of [RFC7800]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Confirmation Method Value: <spanx style="verb">jku</spanx>
              </t>
              <t>
                Confirmation Method Description: JWK Set URL
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="jkuPoP"/> of [RFC7800]
              </t>
            </list>
          </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

    </section>

  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml' ?>

      <reference anchor="JWT" target='http://www.rfc-editor.org/info/rfc7519'>
        <front>
          <title>JSON Web Token (JWT)</title>
	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>
	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization abbrev="Ping Identity">Ping Identity</organization>
	    <address>
	      <email>ve7jtb@ve7jtb.com</email>
	    </address>
	  </author>
	  <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
	    <organization abbrev="NRI">Nomura Research Institute</organization>
	    <address>
	      <email>n-sakimura@nri.co.jp</email>
	    </address>
	  </author>
	  <date month="May" year="2015"/>
        </front>
        <seriesInfo name="RFC" value="7519"/>
	<seriesInfo name="DOI" value="10.17487/RFC7159"/>
      </reference>

      <reference anchor="JWK" target="http://www.rfc-editor.org/info/rfc7517">
        <front>
	  <title>JSON Web Key (JWK)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <date month="May" year="2015"/>
        </front>
        <seriesInfo name="RFC" value="7517"/>
	<seriesInfo name="DOI" value="10.17487/RFC7157"/>
      </reference>

      <reference anchor="JWE" target="http://www.rfc-editor.org/info/rfc7516">
        <front>
          <title>JSON Web Encryption (JWE)</title>
	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>
	  <author fullname="Joe Hildebrand" initials="J." surname="Hildebrand">
	    <organization abbrev="Cisco">Cisco Systems, Inc.</organization>
	    <address>
	      <email>jhildebr@cisco.com</email>
	    </address>
	  </author>
	  <date month="May" year="2015"/>
        </front>
        <seriesInfo name="RFC" value="7516" />
	<seriesInfo name="DOI" value="10.17487/RFC7156"/>
      </reference>

      <reference anchor="IANA.JWT.Claims" target="http://www.iana.org/assignments/jwt">
        <front>
          <title>JSON Web Token Claims</title>
          <author>
            <organization>IANA</organization>
          </author>
	  <date/>
        </front>
      </reference>

    </references>

    <references title="Informative References">

<reference anchor="OASIS.saml-core-2.0-os" target="http://docs.oasis-open.org/security/saml/v2.0/">
    <front>
        <title>Assertions and Protocol for the OASIS Security Assertion Markup Language
            (SAML) V2.0</title>
        <author fullname="Scott Cantor" initials="S." surname="Cantor">
            <organization>Internet2</organization>
            <address>
                <email>cantor.2@osu.edu</email>
            </address>
        </author>
        <author fullname="John Kemp" initials="J." surname="Kemp">
            <organization>Nokia</organization>
            <address>
                <email>John.Kemp@nokia.com</email>
            </address>
        </author>
        <author fullname="Rob Philpott" initials="R." surname="Philpott">
            <organization>RSA Security</organization>
            <address>
                <email>rphilpott@rsasecurity.com</email>
            </address>
        </author>
         <author fullname="Eve Maler" initials="E." surname="Maler">
            <organization>Sun Microsystems</organization>
            <address>
                <email>eve.maler@sun.com</email>
            </address>
        </author>
        <date year="2005" month="March"/>
    </front>
    <seriesInfo name="OASIS Standard" value="saml-core-2.0-os"/>
    <format type="PDF" target="http://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf"/>
</reference>


<!--draft-ietf-oauth-pop-architecture-05: I-D Exists-->

<reference anchor='OAUTH-POP-ARCH'>
<front>
<title>OAuth 2.0 Proof-of-Possession (PoP) Security Architecture</title>

<author initials='P' surname='Hunt' fullname='Phil Hunt'>
    <organization />
</author>

<author initials='J' surname='Richer' fullname='Justin Richer'>
    <organization />
</author>

<author initials='W' surname='Mills' fullname='William Mills'>
    <organization />
</author>

<author initials='P' surname='Mishra' fullname='Prateek Mishra'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<date month='October' year='2015' />

</front>

<seriesInfo name='Work in Progress,' value='draft-ietf-oauth-pop-architecture-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-oauth-pop-architecture-05.txt' />
</reference>


      <reference anchor="OpenID.Core"
		 target="http://openid.net/specs/openid-connect-core-1_0.html">
        <front>
          <title>OpenID Connect Core 1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute, Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Ping Identity">Ping Identity</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <author fullname="Breno de Medeiros" initials="B." surname="de Medeiros">
            <organization abbrev="Google">Google</organization>
          </author>

	  <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
	    <organization abbrev="Salesforce">Salesforce</organization>
	  </author>

          <date day="8" month="November" year="2014"/>
        </front>

	<format target="http://openid.net/specs/openid-connect-core-1_0.html"
                type="HTML" />
      </reference>

      <reference anchor="JWK.Thumbprint" target="http://www.rfc-editor.org/info/rfc7638">
	<front>
	  <title>JSON Web Key (JWK) Thumbprint</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
	    <organization abbrev="NRI">Nomura Research Institute</organization>
	    <address>
	      <email>n-sakimura@nri.co.jp</email>
	      <uri>http://nat.sakimura.org/</uri>
	    </address>
	  </author>

	  <date month="September" year="2015" />
	</front>

        <seriesInfo name="RFC" value="7638" />
	<seriesInfo name="DOI" value="10.17487/RFC7638"/>
      </reference>

    </references>

    <section title='Acknowledgements' anchor='Acknowledgements' numbered="no">
      <t>
	The authors wish to thank
	Brian Campbell,
	Stephen Farrell,
	Barry Leiba,
	Kepeng Li,
	Chris Lonvick,
	James Manger,
	Kathleen Moriarty,
	Justin Richer,
	and Nat Sakimura
	for their reviews of the specification.
      </t>
    </section>

  </back>
</rfc>
