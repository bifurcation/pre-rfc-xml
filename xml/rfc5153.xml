<?xml version="1.0" encoding="US-ASCII"?>

<rfc number="5153" category="info">
<?rfc rfcedstyle="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>

<front>
  <title abbrev="IPFIX Implementation Guidelines">
    IP Flow Information Export (IPFIX) Implementation Guidelines 
  </title>
    <author initials="E." surname="Boschi" fullname="Elisa Boschi">
    <organization abbrev="Hitachi Europe">
      Hitachi Europe 
    </organization>
    <address>
      <postal>
        <street>c/o ETH Zurich</street>
        <street>Gloriastr. 35</street>
        <city>8092 Zurich</city>
        <country>Switzerland</country>
      </postal>
      <phone>+41 44 6327057</phone>
      <email>elisa.boschi@hitachi-eu.com</email>
    </address>
  </author>
  <author initials="L." surname="Mark" fullname="Lutz Mark">
    <organization abbrev="Fraunhofer FOKUS">
      Fraunhofer FOKUS
    </organization>
    <address>
      <postal>
        <street>Kaiserin Augusta Allee 31</street>
        <city>10589 Berlin</city> 
        <country>Germany</country>
      </postal>
      <phone>+49 421 2246-206 </phone>
      <email>lutz.mark@ifam.fraunhofer.de</email>
    </address>
  </author>
  <author initials="J." surname="Quittek" fullname="Juergen Quittek">
    <organization abbrev="NEC">
      NEC Europe Ltd. 
    </organization>
    <address>
      <postal>
        <street>Kurfuersten-Anlage 36</street>
        <city>69115 Heidelberg</city> 
        <country>Germany</country>
      </postal>
      <phone>+49 6221 4342-115</phone>
      <email> quittek@nw.neclab.eu</email>
    </address>
  </author>
  <author initials="M." surname="Stiemerling" fullname="Martin Stiemerling">
    <organization abbrev="NEC">
      NEC Europe Ltd. 
    </organization>
    <address>
      <postal>
        <street>Kurfuersten-Anlage 36</street>
        <city>69115 Heidelberg</city> 
        <country>Germany</country>
      </postal>
      <phone>+49 6221 4342-113</phone>
      <email>stiemerling@nw.neclab.eu</email>
    </address>
  </author>
  <author initials="P." surname="Aitken" fullname="Paul Aitken">
    <organization abbrev="Cisco Systems, Inc.">
      Cisco Systems, Inc.
    </organization>
    <address>
      <postal>
        <street>96 Commercial Quay</street>
        <city>Edinburgh</city> 
        <code>EH6 6LX</code>
        <country>Scotland</country>
      </postal>
      <phone>+44 131 561 3616</phone>
      <email>paitken@cisco.com</email>
    </address>
  </author>

  <date month="April" year="2008"></date>
  <area>Operations</area>
  <workgroup>IPFIX Working Group</workgroup>

 <!-- [rfced] Please insert any keywords (beyond those that appear in 
   the title) for use on http://www.rfceditor.org/rfcsearch.html. --> 
<!--<keyword>example</keyword> -->

 <abstract> 
    <t>The IP Flow Information Export (IPFIX) protocol defines how IP
    Flow information can be exported from routers, measurement probes,
    or other devices. This document provides guidelines for the
    implementation and use of the IPFIX protocol. Several sets of
    guidelines address Template management, transport-specific issues,
    implementation of Exporting and Collecting Processes, and IPFIX
    implementation on middleboxes (such as firewalls, network address
    translators, tunnel endpoints, packet classifiers, etc.). </t>
  </abstract>
</front>


<middle>

  <section title="Introduction">
    <t>The <xref target="RFC5101">IPFIX protocol</xref> defines how IP Flow information can be exported from routers, 
    measurement probes, or other devices.  In this document, we provide guidelines for its implementation.</t> 
 
    <t>The guidelines are split into seven main sets. These sets address implementation 
    aspects for Template management, Exporting Process, Collecting Process, transport, 
    implementation on middleboxes, security, and extending the information model.</t>
    
    <t>Finally, this document contains a list of common mistakes
    related to issues that had been misinterpreted in the first IPFIX
    implementations and that created (and still might create)
    interoperability problems.</t>

       <section title="IPFIX Documents Overview">
        <t>The <xref target="RFC5101">IPFIX protocol
        </xref> provides network administrators with access to IP Flow 
        information.  The architecture for the export of 
        measured IP Flow information out of an IPFIX Exporting Process to a 
        Collecting Process is defined in the 
        <xref target="IPFIX-ARCH">IPFIX architecture</xref>, 
        per the requirements defined in <xref target="RFC3917"></xref>.</t>
          
        <t>The <xref target="IPFIX-ARCH">IPFIX architecture</xref> 
        specifies how IPFIX Data Records 
        and Templates are carried via a congestion-aware transport protocol 
        from IPFIX Exporting Processes to IPFIX Collecting Processes.</t>
        
        <t>IPFIX has a formal description of IPFIX Information Elements, their name, type, 
        and additional semantic information, as specified in the 
        <xref target="RFC5102">IPFIX information model</xref>.</t>  
        
        <t>Finally, the <xref target="IPFIX-AS">IPFIX applicability statement
        </xref> describes what type of applications can use the 
        IPFIX protocol and how they can use the information provided.  
        It furthermore shows how the IPFIX framework relates to other 
        architectures and frameworks.</t>
       </section>
       
       <section title="Overview of the IPFIX Protocol">
        <t>In the IPFIX protocol, { type, length, value } tuples are expressed 
        in Templates containing { type, length } pairs,  specifying
        which 
<vspace blankLines="0"></vspace>
 { value } 
        fields are present in Data Records conforming to the Template, giving great 
        flexibility as to what data is transmitted.</t> 

        <t>Since Templates are sent very infrequently compared with Data Records, 
        this results in significant bandwidth savings.</t> 

        <t>Different Data Records may be transmitted simply by sending new Templates 
        specifying the { type, length } pairs for the new data format.
        See <xref target="RFC5101"></xref> for more information.</t> 

        <t>The <xref target="RFC5102">IPFIX information model</xref> 
        defines a large number of standard Information Elements that provide the 
        necessary 
<vspace blankLines="0"></vspace>
 { type } information for Templates.</t> 

        <t>The use of standard elements enables interoperability among
        different vendors' implementations.  The list of standard
        elements may be extended in the future through the process
        defined in <xref target="extending"></xref>, below.
        Additionally, non-standard enterprise-specific elements may be
        defined for private use.</t>
       
       </section>
    
    </section>

  <section title="Terminology">
  
    <t>The terminology used in this document is fully aligned with the terminology 
    defined in <xref target="RFC5101"></xref>.  Therefore, the terms 
    defined in the IPFIX terminology are capitalized in this document, as in other 
    IPFIX documents (<xref target="RFC5101"></xref>, 
    <xref target="RFC5102"></xref>, <xref target="IPFIX-ARCH"></xref>).</t>

    <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL"
    in this document are to be interpreted as described
    in <xref target="RFC2119"></xref>.</t>

    <t>This document is Informational. It does not specify a protocol and does 
    not use <xref target="RFC2119">RFC 2119 key words</xref> such as "MUST" and "SHOULD", except in quotations 
    and restatements from the IPFIX standards documents. The normative specification 
    of the protocol is given in the IPFIX protocol <xref target="RFC5101"></xref> 
    and information model <xref target="RFC5102"></xref> documents.</t>
    
    </section>
  

<section title="Template Management Guidelines">
    

    <section title="Template Management">
    
    <t>The Exporting Process should always endeavor to send Template Records before the related 
    Data Records.  However, since the Template Record may not arrive before the corresponding 
    Data Records, the Collecting Process MAY store Data Records with an unknown Template ID 
    pending the arrival of the corresponding Template 
    (see Section 9 of <xref target="RFC5101"></xref>).  
    If no Template becomes available, we recommend logging the event and
  discarding the corresponding Data Records, and for SCTP and TCP we
  recommend resetting the Transport Session. The amount of time the Collecting Process waits 
    for a Template before resetting should be configurable. We recommend a default of 30 minutes. 
    Note that when using UDP as the transport protocol, this delay should be bound, when possible, 
    by the Template Retransmit and the Template Expiry times (see <xref target="udp"></xref>). </t>
       
    <t>The Exporting Process must be able to resend active
Templates. Templates must be resent in the
      case of a Stream Control Transport Protocol (SCTP) association
restart, a User Datagram Protocol 
      (UDP) template refresh, or a Transmission Control Protocol (TCP)
      connection restart.</t>
    
    <t>The Exporting Process is responsible for the management of
Template IDs. Should an insufficient number of
    Template IDs be available, the Exporting Process must send a Template Withdrawal Message in order to 
    free up the allocation of unused Template IDs.  Note that UDP doesn't use the Template Withdrawal 
    Message, and the Template lifetime on the Collecting Process relies on timeout.</t>
     
     </section>
  
     <section title="Template Records versus Options Template Records">
      
      <t>The <xref target="RFC5101">IPFIX protocol</xref> defines and specifies the use of Templates 
      and Options Templates.  Templates define the layout of Data Records, which represent Flow data.  
      Options Templates additionally specify scope Information Elements, which can be used to define 
      scoped Data Records.  Scoped Data Records generally export control plane data (such as metadata 
      about processes in the IPFIX collection architecture) or data otherwise applicable to multiple 
      Flow Data Records (such as common properties as in <xref target="IPFIX-REDUCING"></xref>).
      </t>

      
    <t>Aside from Section 4 of <xref target="RFC5101"></xref>, which defines 
    specific Options Templates to use for reporting Metering Process and Exporting Process 
    statistics and configuration information, the choice to use Options Templates is left up 
    to the implementer. Indeed, there is a trade-off between bandwidth efficiency and complexity 
    in the use of Options Templates and scoped Data Records. </t>
    
    <t>For example, control plane information about an Observation Point could be exported with 
    every Flow Record measured at that Observation Point, or in a single Data Record described 
    by an Options Template, scoped to the Observation Point identifier.  In the former case, 
    simplicity of decoding the data is gained in exchange for redundant export of the same 
    data with every applicable Flow Record.  The latter case is more bandwidth-efficient, 
    but at the expense of requiring the Collecting Process to maintain the relationship 
    between each applicable Flow Record and the Observation Point.</t>
    
    <t>A generalized method of using Options Templates to increase bandwidth efficiency 
    is fully described in <xref target="IPFIX-REDUCING"></xref>.</t>
    
  </section>
  
  <section title="Using Scopes">
    <t>The root scope for all IPFIX Messages is the Observation Domain, which appears 
    in the Message Header. In other words, all Data Records within a message implicitly 
    belong to the Observation Domain. All Data Records described by Options Templates 
    (and only those) must be restricted to an additional scope within the Observation 
    Domain, as defined by the scope Information Elements in the Options Template Record.</t>
       
    <t>In IPFIX, any Information Element can be used for scope. However, Information 
    Elements such as counters, timestamps, padding elements, Flow properties like timeout, 
    Flow end reason, duration, or Min/Max Flow properties <xref target="RFC5102"></xref> 
    may not be appropriate.</t>

    <t>Note that it is sometimes necessary to export information about entities that exist 
    outside any Observation Domain, or within multiple Observation Domains (e.g., information 
    about Metering Processes scoped to meteringProcessID). Such 
    information SHOULD be exported in an IPFIX Message with Observation Domain ID 0 (see 
    <xref target="RFC5101"></xref>, Section 3.1).</t>

    </section>
    
    <section title="Multiple Information Elements of the Same Type">
    
    <t>The Exporting Process and Collecting Process MUST support the use of multiple Information 
    Elements of the same type in a single Template <xref target="RFC5101"></xref>.  
    This was first required by Packet Sampling (PSAMP) <xref target="PSAMP-PROTO"></xref> for the export of multiple Selector IDs.  
    Note that the IPFIX protocol recommends that Metering Processes SHOULD use packet treatment 
    order when exporting multiple Information Elements of the same
type in the same record 
    (<xref target="RFC5101"></xref> Section 8). This implies 
    that ordering is important, and changes to the order of multiple identical Information 
    Elements could cause information loss. Therefore, we strongly recommend preservation of 
    the order of multiple Information Elements of the same type by Exporting and Collecting 
    Processes for correct processing and storage.</t>
        
     </section>
    
    <section title="Selecting Message Size">   
    <t>Section 10.3.3 of the IPFIX protocol defines the maximum message size for IPFIX Messages 
    transported over UDP to be constrained by the path MTU, or if the path MTU is not available, 
    512 bytes, which is the minimum datagram 
    size all IP implementations must support (see also <xref target="dtls-udp"></xref>). However, 
    no maximum message size is imposed on other 
    transport protocols, beyond the 65535-byte limit imposed by the 16-bit Message Length field in the 
    IPFIX Message Header specified in Section 3.1 of <xref target="RFC5101"></xref>.</t>
    
    <t>An IPFIX Exporting Process operating over SCTP or TCP may export IPFIX Messages up to this 
    64-kB limit, and an IPFIX Collecting Process must accept any IPFIX Message up to that size. </t>
    
    </section>
</section> 

    


<section title="Exporting Process Guidelines">
    
    <section title="Sets">
      <t>A Set is identified by a Set ID <xref target="RFC5101"></xref>.  
      A Set ID has an integral data type and its value is in the range of 0-65535. The Set ID 
      values of 0 and 1 are not used for historical reasons <xref target="RFC3954"></xref>.  
      A value of 2 identifies a Template Set.&nbsp; A value of 3 identifies
      an Options Template Set.&nbsp; Values from 4 to 255 are reserved for future use.  
      Values above 255 are used for Data Sets. 
      In this case, the Set ID corresponds to the Template ID of the used Template.</t>


      <t>A Data Set received with an unknown Set ID may be stored pending the arrival of the 
       corresponding Template (see Section 9 of <xref target="RFC5101"></xref>).  
       If no Template becomes available, we recommend logging the event and discarding the 
       corresponding Data Records, and for SCTP and TCP we recommend resetting the Transport Session.  
       The amount of time the Collecting Process waits for a Template before resetting should 
       be configurable. We recommend a default of 30 minutes. 
       Note that when using UDP as the transport protocol, this delay should be bound, when possible, 
       by the Template Retransmit and the Template Expiry times (see <xref target="udp"></xref>).</t>

      <t>The arrival of a Set with a reserved Set ID should be logged, and the Collector must ignore the Set.</t>
  
    </section>
    
   
    <section title="Information Element Coding">
      
      <t><xref target="IPFIX-ARCH"></xref> does not specify which entities are 
      responsible for the encoding and decoding of Information Elements transferred via IPFIX.  
      An IPFIX device can do the encoding either within the Metering Process or within the 
      Exporting Process.  The decoding of the Information Elements can be done by the Collecting 
      Process or by the data processing application.</t>

      <t>If an IPFIX node simply relays IPFIX Records (like a proxy), then no decoding or encoding 
      of Information Elements is needed.  In this case, the Exporting Process may export unknown 
      Information Elements, i.e., Information Elements with an unknown Information Element identifier.</t>
      
     </section>
    
    <section title="Using Counters">
     
      <t>IPFIX offers both Delta and Total counters (e.g., octetDeltaCount, octetTotalCount).  
      If information about a Flow is only ever exported once, then it's not important whether 
      Delta or Total counters are used.  However, if further information about additional 
      packets in a Flow is exported after the first export, then either:</t>
      
      <list style="symbols">
	       <t>the metering system must reset its counters to zero after the first export 
         and report the new counter values using Delta counters, or</t>
      </list>
      
      <list style="symbols">
	       <t>the metering system must carefully maintain its counters and report the 
         running total using Total counters.</t>
      </list>
      
      <t>At first, reporting the running total may seem to be the
      obvious choice.  However, this requires that the system accurately maintains information 
      about the Flow over a long time without any loss or error, because when reported to a 
      Collecting Process, the previous total values will be replaced with the new information. </t>

      <t>Delta counters offer some advantages: information about Flows doesn't have to be 
      permanently maintained, and any loss of information has only a small impact on the 
      total stored at the Collecting Process.  
      Finally, Deltas may be exported in fewer bytes than Total counters using the IPFIX "Reduced Size 
      Encoding" scheme <xref target="RFC5101"></xref>.</t>
         
      <t>Note that Delta counters have an origin of zero and that a Collecting Process receiving 
      Delta counters for a Flow that is new to the Collecting Process must assume the Deltas 
      are from zero.</t>

    </section>
    
    <section title="Padding">
      <t>The IPFIX information model defines an Information Element for padding called paddingOctets 
      <xref target="RFC5102"></xref>.  It is of type octetArray, and the IPFIX protocol 
      allows encoding it as a fixed-length array as well as a variable-length array.</t>
         
      <t>The padding Information Element can be used to align Information Elements within Data Records, 
      Records within Sets, and Sets within IPFIX Messages, as described below.</t>
      
               
      <section title="Alignment of Information Elements within a Data Record ">
         <t>The padding Information Element gives flexible means for aligning Information 
         Elements within a Data Record.  Aligning within a Data Record can be useful, because 
         internal data structures can be easily converted into Flow Records at the Exporter 
         and vice versa at the Collecting Process.</t>
         
         <t>Alignment of Information Elements within a Data Record is achieved by inserting 
         an instance of the paddingOctets Information Element with appropriate length before 
         each unaligned Information Element.  This insertion is explicitly specified within the 
         Template Record or Options Template Record, respectively, that corresponds to the 
         Data Record.</t>

       </section>
              
       <section title="Alignment of Information Element Specifiers within a Template Record">
         <t>There is no means for aligning Information Element specifiers within Template Records. 
         However, there is limited need for such a method, as Information Element specifiers are 
         always 32-bit aligned, and 32-bit alignment is generally sufficient.</t>

       </section>
              
       <section title="Alignment of Records within a Set ">
         <t>There is no means for aligning Template Records within a Set. 
         However, there is limited need for such a method, as Information Element 
         specifiers are always 32-bit aligned, and 32-bit alignment is generally sufficient.</t> 
 
         <t>Data Records can be aligned within a Set by appending instances of the paddingOctets 
         Information Element at the end of the Record.  Since all Data Records within a Set have the same 
         structure and size, aligning one Data Record implies aligning all the Data Records within 
         a single Set.</t>

       </section>
              
       <section title="Alignment of Sets within an IPFIX Message">
         <t>If Records are already aligned within a Set by using paddingOctets Information Elements, 
         then this alignment will already be achieved.  But for aligning Sets within an 
         IPFIX Message, padding Information Elements can be used at the end of the Set so that 
         the subsequent Set starts at an aligned boundary.  This padding mechanism is described 
         in Section 3.3.1 of <xref target="RFC5101"></xref> and can be applied 
         even if the Records within the Set are not aligned.  However, it should be noted that 
         this method is limited by the constraint that "the padding length MUST be shorter 
         than any allowable Record in the Set", to prevent the padding from being misinterpreted 
         as an additional Data Record.</t>

       </section>             

    </section>
    
    <section title="Time Issues">
                   
         <t>IPFIX Messages contain the export time in the Message Header.  In addition, there 
         is a series of Information Elements defined to transfer time values.  
         <xref target="RFC5102"></xref> defines four abstract data types to 
         transfer time values in second, millisecond, microsecond, and nanosecond resolution.</t>
                   
         <t>The accuracy and precision of these values depend on the accuracy and the precision of the Metering 
         Process clock. The accuracy and precision of the Exporting Process clock, and the synchronization 
         of the Metering Process and Exporting Process clocks, are also important when using the delta 
         timestamp Information Elements. To ensure accuracy, the clocks should be synchronized to a UTC 
         time source.  Normally, it would be sufficient 
         to derive the time from a remote time server using the Network Time Protocol (NTP) 
         <xref target="RFC1305"></xref>.  IPFIX Devices operating with time values of microsecond 
         or nanosecond resolution need direct access to a time source, for example, to a GPS 
         (Global Positioning System) unit.</t>

         <t>The most important consideration in selecting timestamp Information
         Elements is to use a precision appropriate for the timestamps as
         generated from the Metering Process.
         Specifically, an IPFIX Device should not export timestamp Information Elements 
         of higher precision than the timestamps used by the Metering Process (e.g.,
         millisecond-precision Flows should not be exported with
         flowStartMicroseconds and flowEndMicroseconds).</t>
 
                    
    </section>
    
    <section title="IPFIX Message Header Export Time and Data Record Time">
                   
          <t>Section 5 of <xref target="RFC5101"></xref> defines 
          a method for optimized export of time-related Information Elements based 
          upon the Export Time field of the IPFIX Message Header.  The architectural 
          separation of the Metering Process and Exporting Process in 
          <xref target="IPFIX-ARCH"></xref> raises some difficulties 
          with this method, of which implementers should be aware.</t>
          
          <t>Since the Metering Process has no information about the export time of the 
          IPFIX Message (that is, when the message leaves the Exporting Process), it cannot 
          properly use the delta time Information Elements; it must store absolute timestamps 
          and transmit these to the Exporting Process.  The Exporting Process must then convert 
          these to delta timestamps once the export time is known. This increases the processing 
          burden on the Exporting Process.  Note also that the absolute timestamps require more 
          storage than their delta timestamp counterparts.  However, this method can result in 
          reduced export bandwidth.</t>
          
          <t>Alternatively, the Exporting Process may simply export absolute timestamp Information 
          Elements.  This simplifies the Exporting Process' job and reduces processing burden, 
          but increases export bandwidth requirements.</t>
          
    </section>
    
    <section title="Devices without an Absolute Clock">
                   
          <t>Exporting just relative times in a device without an absolute clock is often not sufficient.  
          For instance, observed traffic could be retained in the device's cache for some time before being 
          exported (e.g., if the Exporter runs once per minute), or stuck in an Inter Process Communication 
          (IPC) queue, or stuck in the 
          export stack, or delayed in the network between the Exporter and Collector.</t>
          
          <t>For these reasons, it can be difficult for the Collecting Process to convert the relative times 
          exported using the flowStartSysUpTime and flowEndSysUpTime Information Elements to absolute times 
          with any sort of accuracy without knowing the systemInitTimeMilliseconds. Therefore, the sending of the 
          flowStartSysUpTime and flowEndSysUpTime Information Elements without also sending the 
          systemInitTimeMilliseconds Information Element is not recommended.</t>       
          
    </section>
 </section>
 
<section title="Collecting Process Guidelines">
      
      <section title="Information Element (De)Coding">
      
      <t>Section 9 of <xref target="RFC5101"></xref> specifies: "The Collecting 
      Process MUST note the Information Element identifier of any Information Element 
      that it does not understand and MAY discard that Information Element from the Flow Record".  
      The Collecting Process may accept Templates with Information Elements of unknown types.  
      In this case, the value received for these Information Elements should be decoded as an octet array.</t>
      
      <t>Alternatively, the Collecting Process may ignore Templates and subsequent Data 
      Sets that contain Information Elements of unknown types.</t>
      
      <t>It is recommended that Collecting Processes provide means to flexibly add 
      types of new Information Elements to their knowledge base.  An example is a 
      configuration file that is read by the Collecting Process and that contains a 
      list of Information Element identifiers and their corresponding
      types.  Particularly 
      for adding enterprise-specific Information Elements, such a feature can be very useful.</t>
     
      </section>
      
      <section title="Reduced-Size Encoding of Information Elements">
      <t>Since a Collector may receive data from the same device and Observation Domain 
      in two Templates using different reduced-size encodings, it is recommended that the 
      data be stored using full-size encoding, to ensure that the values can be stored or 
      even aggregated together.</t>

    </section>
    
    <section title="Template Management">
      <t>Template IDs are generated dynamically by the Exporting Process. 
      They are unique per Transport Session and Observation Domain.</t>

      <t>Therefore, for each Transport Session, the Collecting Process has to maintain 
      a list of Observation Domains.  For each Observation Domain, the Collecting Process 
      has to maintain a list of current Template IDs in order to decode subsequent Data Records.</t>
            
      <t>Note that a restart of the Transport Session may lead to a Template ID renumbering.</t>
      
    </section>
</section>


<section title="Transport-Specific Guidelines">
      <t>IPFIX can use SCTP, TCP, or UDP as a transport protocol. IPFIX implementations 
      MUST support SCTP with partial reliability extensions (PR-SCTP), and MAY support TCP 
      and/or UDP (see <xref target="RFC5101"></xref>, Section 10.1). In the IPFIX documents, the 
      terms SCTP and PR-SCTP are often used interchangeably to mean SCTP with partial reliability 
      extensions.
      </t>

    <section title="SCTP">
      
      <t>PR-SCTP is the preferred transport protocol for IPFIX because it is congestion-aware, 
      reducing total bandwidth usage in the case of congestion, but with a simpler state machine 
      than TCP.  This saves resources on lightweight probes and router line cards.</t> 

      <t>SCTP, as specified in <xref target="RFC4960"></xref>
      with the PR-SCTP extension defined in <xref target="RFC3758"></xref>, 
      provides several features not available in TCP or UDP.
      The two of these most universally applicable to IPFIX implementations, and which 
      IPFIX implementers need to know about, are multiple streams and per-message partial 
      reliability.</t>

      <t>An SCTP association may contain multiple streams. Streams are useful 
      for avoiding head-of-line blocking, thereby minimizing end-to-end delay     
      from the Exporting Process to the Collecting Process.  Example applications 
      for this feature would be using one SCTP stream per Observation Domain, 
      one stream per type of data (or Template ID), or one stream for Flow data 
      and one for metadata.</t>
      
      <t>An Exporting Process may request any number of streams, and may send 
      IPFIX Messages containing any type of Set (Data Set, Template Set, etc.)
      on any stream. A Collecting Process MUST be able to process any Message 
      received on any stream.</t>

      <t>Stream negotiation is a feature of the SCTP protocol. Note, however, 
      that the IPFIX protocol doesn't provide any mechanism
      for the Exporter to convey any information about which streams are in
      use to the Collector.  Therefore, stream configuration must be done
      out of band.</t>

      <t>One extra advantage of the PR-SCTP association is its ability to send messages with different 
      levels of reliability, selected according to the application.  
      For example, billing or security applications might require reliable delivery of all their 
      IPFIX Messages, while capacity planning applications might be more tolerant of message loss. 
      SCTP allows IPFIX Messages for all these applications to be transported over the same 
      association with the appropriate level of reliability.</t>
 
      <t>IPFIX Messages may be sent with full or partial reliability, on a per-message basis. 
      Fully reliable delivery guarantees that the IPFIX Message will be received at 
      the Collecting Process or that that SCTP association will be reset, as with TCP. 
      Partially reliable delivery does not guarantee the receipt of the IPFIX 
      Message at the Collecting Process. This feature may be used to allow Messages to be dropped 
      during network congestion, i.e., while observing a Denial of Service attack.</t>
      
      <t><xref target="RFC3758"></xref> defines the concept of a Partial Reliability policy, which
      specifies the interface used to control partially reliable delivery. It
      also defines a single example Partial Reliability policy called "timed
      reliability", which uses a single parameter: lifetime.  The lifetime is
      specified per message in milliseconds, and after it expires, no
      further attempt will be made to transmit the message. Longer lifetimes specify
      more retransmission attempts per message and therefore higher
      reliability; however, it should be noted that the absolute reliability
      provided by a given lifetime is highly dependent on network conditions,
      so an Exporting Process using the timed reliability service should
      provide a mechanism for configuring the lifetime of exported IPFIX Messages. 
      Another possible Partial Reliability policy could be limited retransmission, which
      guarantees a specified number of retransmissions for each message. It is up to the 
      implementer to decide which Partial Reliability policy is most appropriate for its application.</t>
      
      <t>There is an additional service provided by SCTP and useful in
      conjunction with PR-SCTP: unordered delivery. This also works on a
      per-message basis by declaring that a given message should be delivered
      to the receiver as soon as it is queued rather than kept in sequence;
      however, it should be noted that unless explicitly requested by the
      sender, even messages sent partially reliably will still be delivered in
      order. Unordered delivery should not be used when the order of IPFIX Messages
      may matter: e.g., a Template or Options Template. Unordered delivery should not 
      be used when Total counters are used, as reordering
could result in the counter value decreasing at the Collecting Process
and even being left with a stale value if the last message processed
is stale.</t>

      <t>By convention, when the IPFIX documents state a requirement for reliable
      delivery (as, for example, the IPFIX protocol document does
      for Template Sets, Options Template Sets, and Template Withdrawal Messages), 
      an IPFIX Exporting Process must not use partially
      reliable delivery for those Messages. By default, and explicitly if
      the IPFIX documents call for "partially reliable" or "unreliable"
      delivery, an IPFIX Exporting Process may use partially reliable delivery
      if the other requirements of the application allow.</t>
      
      <t>The Collecting Process may check whether IPFIX Messages are lost by checking the Sequence Number 
      in the IPFIX header.  The Collecting Process should use the Sequence Number in the IPFIX Message Header 
      to determine whether any messages are lost when sent with partial reliability.  
      Sequence Numbers should be tracked independently for each stream.</t>
      
      <t>The following may be done to mitigate message loss:</t>
      
      <list style="symbols">
	    <t>Increase the SCTP buffer size on the Exporter.</t>
            
      <t>Increase the bandwidth available for communicating the exported
      Data Records.</t>
  
      <t>Use sampling, filtering, or aggregation in the Metering Process to reduce the amount of 
      exported data (see <xref target="RFC5101"></xref>, Section 10.4.2.3).</t>
	    
      <t>If partial reliability is used, switch to fully reliable delivery
       on the Exporting Process or increase the level of partial
       reliability (e.g., when using timed reliability, by specifying a longer
       lifetime for exported IPFIX Messages).</t>
      </list>
      
         
      <t>If the SCTP association is brought down because the IFPIX Messages can't be exported 
      reliably, the options are:</t>
      
      <list style="symbols">
	    <t>Increase the SCTP buffer size on the Exporter.</t>

	    <t>Increase the bandwidth available for communicating the exported
      Data Records.</t>
  
      <t>Use sampling, filtering, or aggregation in the Metering Process to reduce 
      the amount of exported data.</t>
	    </list>
	        
	    
      <t> Note that Templates must not be resent when using SCTP, without an
   intervening Template Withdrawal or SCTP association reset. Note also that
   since Template Sets and Template Withdrawal Messages may be sent on
   any SCTP stream, a Template Withdrawal Message may withdraw a
   Template sent on a different stream, and a Template Set may reuse a
   Template ID withdrawn by a Template Withdrawal Message sent on a
   different stream.  Therefore, an Exporting Process sending Template
   Withdrawal Messages should ensure to the extent possible that the
   Template Withdrawal Messages and subsequent Template Sets reusing the
   withdrawn Template IDs are received and processed at the Collecting
   Process in proper order.  The Exporting Process can achieve this by
   one of two possible methods: 1. by sending a Template Withdrawal
   Message reliably, in order, and on the same stream as the subsequent
   Template Set reusing its ID; or 2. by waiting an appropriate amount
   of time (on the scale of one minute) after sending a Template
   Withdrawal Message before attempting to reuse the withdrawn Template
   ID.</t>
      
        
    </section>
    
    <section title="UDP" anchor="udp">
       <t>UDP is useful in simple systems where an SCTP stack is not available, 
       and where there is insufficient memory for TCP buffering.</t>
       
       <t>However, UDP is not a reliable transport protocol, and IPFIX Messages 
       sent over UDP might be lost as with partially reliable SCTP 
       streams.  UDP is not the recommended protocol for IPFIX and is intended 
       for use in cases in which IPFIX is replacing an existing NetFlow infrastructure, 
       with the following properties:</t>
       
<list style="symbols">
	    <t>A dedicated network,</t>

      <t>within a single administrative domain,</t>
      
      <t>where SCTP is not available due to implementation
      constraints, and </t>
	    
      <t>the Collector is as topologically close as possible to the Exporter.</t>    
	    </list>
       
         
      <t>Note that because UDP itself provides no congestion control
      mechanisms, it is recommended that UDP transport be used only on managed 
      networks, where the network path has been explicitly provisioned for 
      IPFIX traffic through traffic engineering mechanisms, such as rate 
      limiting or capacity reservations.</t>
	    
      <t>An important example of an explicitly provisioned, managed
      network for IPFIX is the use of IPFIX to replace a functioning
      NetFlow implementation on a dedicated network. In this
      situation, the dedicated network should be provisioned in
      accordance with the NetFlow deployment experience that Flow
      export traffic generated by monitoring an interface will
      amount to 2-5% of the monitored interface's bandwidth.</t>
    
      <t>As recommended in <xref target="TSVWG-UDP"></xref>, an application
      should not send UDP messages that result in IP packets that exceed
      the MTU of the path to the destination and should enable UDP checksums 
      (see Sections 3.2 and 3.4 of <xref target="TSVWG-UDP"></xref>, respectively).</t>  

      <t>Since IPFIX assumes reliable transport of Templates over SCTP, 
       this necessitates some changes for IPFIX Template management over UDP.  
       Templates sent from the Exporting Process to the Collecting Process over 
       UDP MUST be resent at regular time intervals; these intervals MUST be configurable (see Section 10.3 of 
       <xref target="RFC5101"></xref>).</t>
       
       <t>We recommend a default Template-resend time of 10 minutes, configurable 
       between 1 minute and 1 day.</t>
       
       <t>Note that this could become an interoperability problem; e.g., if an 
       Exporter resends Templates once per day, while a Collector expires Templates 
       hourly, then they may both be IPFIX-compatible, but not be interoperable. </t>
       
       <t>Retransmission time intervals that are too short waste bandwidth on unnecessary 
       Template retransmissions.  On the other hand, time intervals that are too long 
       introduce additional costs or risk of data loss by potentially requiring the Collector 
       to cache more data without having the Templates available to decode it.</t>
            
       <t>To increase reliability and limit the amount of potentially lost data, the 
       Exporting Process may resend additional Templates using a packet-based schedule. 
       In this case, Templates are resent depending on the number of data packets sent.  
       Similarly to the time interval, resending a Template every few packets introduces 
       additional overhead, while resending after a large amount of packets have already been  
       sent means high costs due to the data caching and potential data loss. </t>
       
       <t>We recommend a default Template-resend interval of 20 packets, 
       configurable between 1 and 1000 data packets.</t>
       
       <t>Note that a sufficiently small resend time or packet interval may cause a system 
       to become stuck, continually resending Templates or Options Data. For example, if the resend packet interval 
       is 2 (i.e., Templates or Options Data are to be sent in every other packet) but more than two packets 
       are required to send all the information, then the resend interval will have expired by 
       the time the information has been sent, and Templates or Options Data will be sent continuously -- possibly 
       preventing any data from being sent at all. Therefore, the resend intervals should 
       be considered from the last data packet, and should not be tied to specific Sequence Numbers.</t>
       
       <t>The Collecting Process should use the Sequence Number in the IPFIX Message 
       Header to determine whether any messages are lost.</t>
       
       <t>The following may be done to mitigate message loss:</t>
       
      <list style="symbols">
	    <t>Move the Collector topologically closer to the Exporter.</t>

      <t>Increase the bandwidth of the links through which the Data Records are exported.</t>
      
      <t>Use sampling, filtering, or aggregation in the Metering Process to reduce the amount of exported data.</t>
	    
      <t>Increase the buffer size at the Collector and/or the Exporter.</t>    
	    </list>
       
       <t>Before using a Template for the first time, the Exporter may send it in several different 
       IPFIX Messages spaced out over a period of packets in order to increase the likelihood that 
       the Collector has received the Template.</t>
       
       <t>Template Withdrawal Messages MUST NOT be sent over UDP (per Section 10.3.6 of <xref target="RFC5101"></xref>). 
       The Exporter must rely on expiration 
       at the Collector to expire old Templates or to reuse Template IDs.</t>
       
       <t>We recommend that the Collector implements a Template Expiry of three times the Exporter 
       refresh rate.</t>
       
       <t>However, since the IPFIX protocol doesn't provide any mechanism for the Exporter to convey 
       any information about the Template Expiry time to the Collector, configuration must be done 
       out of band.</t>
       
       <t>If no out-of-band configuration is made, we recommend to initially set a Template Expiry 
       time at the Collector of 60 minutes. The Collecting Process may estimate each Exporting Process's 
       resend time and adapt the Expiry time for the corresponding Templates accordingly.</t>

          </section>
    
    <section title="TCP">
      <t>TCP can be used as a transport protocol for IPFIX if one of the endpoints has no support 
      for SCTP, but a reliable transport is needed and/or the network between the Exporter and the 
      Collector has not explicitly been provisioned for the IPFIX traffic. TCP is one of the core 
      protocols of the Internet and is widely supported.</t>

      <t>The Exporting Process may resend Templates (per UDP, above), but it's not required to do 
      so, per Section 10.4.2.2 of <xref target="RFC5101"></xref>:</t>
      
      <t>"A Collecting Process MUST record all Template and Options Template Records for the duration 
      of the connection, as an Exporting Process is not required to re-export Template Records."</t>
 
      <t>If the available bandwidth between Exporter and Collector is not sufficient or the Metering 
      Process generates more Data Records than the Collector is capable of processing, then TCP congestion 
      control may cause the Exporter to block.  Options in this case are:</t>
      
      <list style="symbols">
	    <t>Increase the TCP buffer size on the Exporter.</t>

	    <t>Increase the bandwidth of the links through which the Data Records are exported.</t>
  
      <t>Use sampling, filtering, or aggregation in the Metering Process to reduce the amount of exported data.</t>
	    </list>
      
      		</section>
</section>		
		

<section title="Guidelines for Implementation on Middleboxes" anchor="middleboxes">

    <t>The term middlebox is defined in <xref target="RFC3234"></xref> as:</t>

    <t>"any intermediary device performing functions other than the normal, 
    standard functions of an IP router on the datagram path between a source host and destination host."</t>

    <t>The list of middleboxes discussed in <xref target="RFC3234"></xref> contains:</t>
    
        <list style="numbers">
	      <t>Network Address Translation (NAT),</t>
        <t>NAT-Protocol Translation (NAT-PT),</t>
        <t>SOCKS gateway,</t>
        <t>IP tunnel endpoints,</t>
        <t>packet classifiers, markers, schedulers,</t>
        <t>transport relay,</t>
        <t>TCP performance enhancing proxies, </t>
        <t>load balancers that divert/munge packets, </t>
        <t>IP firewalls,</t>            
        <t>application firewalls,</t>
        <t>application-level gateways,</t>
        <t>gatekeepers / session control boxes,</t>
        <t>transcoders,</t>
        <t>proxies, </t>
        <t>caches,</t>
        <t>modified DNS servers,</t>
        <t>content and applications distribution boxes,</t>
        <t>load balancers that divert/munge URLs,</t>
        <t>application-level interceptors,</t>
        <t>application-level multicast,</t>
        <t>involuntary packet redirection, </t>
        <t>anonymizers.</t>
         </list>

	      <t>It is likely that since the publication of RFC 3234 new kinds of middleboxes 
        have been added.</t>
  
        <t>While the IPFIX specifications <xref target="RFC5101"></xref> based 
        the requirements on the export protocol only (as the IPFIX name implies), these sections 
        cover the guidelines for the implementation of the Metering Process by recommending which 
        Information Elements to export for the different middlebox considerations.</t>
	      
      <section title="Traffic Flow Scenarios at Middleboxes">
      <t>Middleboxes may delay, reorder, drop, or multiply packets; they may change packet 
      header fields and change the payload.  All these actions have an impact on traffic Flow 
      properties.  In general, a middlebox transforms a unidirectional original traffic Flow 
      T that arrives at the middlebox into a transformed traffic Flow T' that leaves the middlebox.</t> 
      
      <figure title="Unidirectional traffic Flow traversing a middlebox" anchor="middleboxes1">
        <artwork>


                              +-----------+
                       T ----&gt;| middlebox |----&gt; T'
                              +-----------+


        </artwork>
      </figure>
      
      <t>Note that in an extreme case, T' may be an empty traffic Flow (a Flow with no packets), for example, 
      if the middlebox is a firewall and blocks the Flow.</t>
      
      <t>In case of a middlebox performing a multicast function, a single original traffic Flow may be transformed 
      into more than one transformed traffic Flow.</t>
      
      <figure title="Unidirectional traffic Flow traversing a middlebox with multicast function" anchor="middleboxes2">
        <artwork>

                                        +------&gt; T'
                                        |
                              +---------+-+
                       T ----&gt;| middlebox |----&gt; T''
                              +---------+-+
                                        |
                                        +------&gt; T'''


        </artwork>
      </figure>
      
      <t>For bidirectional traffic Flows, we identify Flows on different sides of the middlebox; say, T_l on 
      the left side and T_r on the right side.</t>
      
      <figure title="Bidirectional unicast traffic Flow traversing a middlebox" anchor="middleboxes3">
        <artwork>


                              +-----------+
                     T_l &lt;---&gt;| middlebox |&lt;---&gt; T_r
                              +-----------+


        </artwork>
      </figure>
      
      <t>In case of a NAT, T_l might be a traffic Flow in a private address realm and T_r the translated 
      traffic Flow in the public address realm.  If the middlebox is a NAT-PT, then T_l may be an IPv4 
      traffic Flow and T_r the translated IPv6 traffic Flow.</t>
      
      <t>At tunnel endpoints, Flows are multiplexed or demultiplexed. In general, tunnel 
      endpoints can deal with bidirectional traffic Flows.</t>
      
      <figure title="Multiple data reduction" anchor="8-multiple">
        <artwork>

                                        +------&gt; T_r1
                                        v
                              +---------+-+
                     T_l &lt;---&gt;| middlebox |&lt;---&gt; T_r2
                              +---------+-+
                                        ^
                                        +------&gt; T_r3


        </artwork>
      </figure>
    
          
      <t>An example is a traffic Flow T_l of a tunnel and Flows T_rx that are multiplexed into 
      or demultiplexed out of a tunnel. According to the IPFIX definition of traffic Flows in 
      <xref target="RFC5101"></xref>, T and T' or T_l and T_rx, respectively, are 
      different Flows in general.</t>
           
      <t>However, from an application point of view, they might be considered as closely related 
      or even as the same Flow, for example, if the payloads they carry are identical.</t>
      
      
             
  </section>
    
  <section title="Location of the Observation Point">
      
    <t>Middleboxes might be integrated with other devices. An example is a router with a NAT or a 
    firewall at a line card.  If an IPFIX Observation Point is located at the line card, then the 
    properties of measured traffic Flows may depend on the side of the integrated middlebox at which 
    packets were captured for traffic Flow measurement.</t>
    
    <t>Consequently, an Exporting Process reporting traffic Flows measured at a device that hosts one 
    or more middleboxes should clearly indicate to Collecting Processes the location of the used Observation 
    Point(s) with respect to the middlebox(es).  This can be done by using Options with Observation Point 
    as scope and elements like, for instance, lineCardID or samplerID. Otherwise, processing the measured Flow 
    data could lead to wrong results.</t>
    
    <t>At first glance, choosing an Observation Point that covers the entire middlebox looks like an 
    attractive choice.  But this leads to ambiguities for all kinds of middleboxes.  Within the middlebox, 
    properties of packets are modified, and it should be clear at a Collecting Process whether packets were 
    observed and metered before or after modification.  For example, it must be clear whether a reported 
    source IP address was observed before or after a NAT changed it or whether a reported packet count was 
    measured before or after a firewall dropped packets.  For this reason, <xref target="RFC5102"></xref> 
    provides Information Elements with prefix "post" for Flow properties that are changed within a middlebox.</t>
    
    <t>If an Observation Point is located inside a middlebox, the middlebox
   must have well-defined and well-separated internal functions,
   for example, a combined NAT and firewall, and the Observation Point
   should be located on a boundary between middlebox functions rather
   than within one of the functions.</t>
    
    
  </section>
  
  <section title="Reporting Flow-Related Middlebox Internals">
      
    <t>While this document recommends IPFIX implementations using Observation Points outside of 
    middlebox functions, there are a few special cases where reporting Flow-related internals of a 
    middlebox is of interest.</t>
    
    <t>For many applications that use traffic measurement results, it is desirable to get more 
    information than can be derived from just observing packets on one side of a middlebox.  
    If, for example, packets are dropped by the middlebox acting as a firewall, NAT, or traffic 
    shaper, then information about how many observed packets are dropped may be of high interest.</t>
    
    <t>This section gives recommendations on middlebox internal information that may be 
    reported if the IPFIX Observation Point is co-located with one or more middleboxes.  Since the 
    internal information to be reported depends on the kind of middlebox, it is discussed per kind.</t>
    
    <t>The recommendations cover middleboxes that act per packet and that do not modify the application-level payload of the packet (except by dropping the entire packet) and that do not insert additional 
    packets into an application-level or transport-level traffic stream.</t>
    
    <t>Covered are the packet-level middleboxes of kinds 1, 2, 3, 5, 9, 10, 21, 
    and 22 (according to the enumeration given at the beginning of 
    <xref target="middleboxes"></xref> of this document). Not covered are 4, 6-8 
    and 11-20. TCP performance-enhancing proxies (7) are not covered because they 
    may add ACK packets to a TCP connection.</t>
    
    <t>Still, if possible, IPFIX implementations co-located with uncovered middleboxes (i.e., of type 
    7 or 11-20) should follow the recommendations given in this section if they can be applied in a way 
    that reflects the intention of these recommendations.</t>
    
   
    
    <section title="Packet Dropping Middleboxes">
      
    <t>If an IPFIX Observation Point is co-located with one or more middleboxes that potentially drop 
    packets, then the corresponding IPFIX Exporting Process should be able to report the number of packets 
    that were dropped per reported Flow.</t>
    
    <t>Concerned kinds of middleboxes are NAT (1), NAT-PT (2), SOCKS gateway (3), packet schedulers (5), 
    IP firewalls (9) and application-level firewalls (10).</t>
          
    </section>
  
    <section title="Middleboxes Changing the DSCP">
      
    <t>If an IPFIX Observation Point is co-located with one or more middleboxes that potentially modify 
    the Diffserv Code Point (DSCP, see <xref target="RFC2474"></xref>) in the IP header, then the 
    corresponding IPFIX Exporting Process should be able to report both the observed incoming DSCP 
    value and also the DSCP value on the 'other' side of the middlebox (if this is a constant value 
    for the particular traffic flow).  The related Information Elements specified in 
    <xref target="RFC5102"></xref> are: IpClassOfService and postIpClassOfService.</t>
    
    <t>Note that the current IPFIX information model only contains Information Elements 
    supporting packets observed before the DSCP change, i.e. ipClassOfService and 
    postIpClassOfService, where the latter reports the value of the IP TOS field after 
    the DSCP change.
    We recommend, whenever possible, to move the Observation Point to the point before 
    the DSCP change and report the Observed and post- values. If reporting the value of 
    the IP TOS field before DSCP change is required, "pre" values can be exported using 
    enterprise-specific Information Elements. </t>
    
    <t>Note also that a classifier may change the same DSCP value of packets from the same Flow 
    to different values depending on the packet or other conditions.  Also, it is possible that 
    packets of a single unidirectional arriving Flow contain packets with different DSCP values 
    that are all set to the same value by the middlebox.  In both cases, there is a constant value 
    for the DSCP field in the IP packet header to be observed on one side of the middlebox, but 
    on the other side the value may vary.  In such a case, reliable reporting of the DSCP value on 
    the 'other' side of the middlebox is not possible by just reporting a single value.  According 
    to the IPFIX information model <xref target="RFC5102"></xref>, the first value 
    observed for the DSCP is reported by the IPFIX protocol in that case.</t>
    
    <t>This recommendation applies to packet markers (5).</t> 
    
  </section>
  
  <section title="Middleboxes Changing IP Addresses and Port Numbers">
      
     <t>If an IPFIX Observation Point is co-located with one or more middleboxes that potentially modify the:</t>
    
     <list style="symbols">
	    <t>IP version field,</t>  
      
      <t>IP source address header field,</t>
    
      <t>IP destination address header field,</t>

      <t>Source transport port number, or </t>

      <t>Destination transport port number</t>
	    </list>
    
    <t>in one of the headers, then the corresponding IPFIX Exporting Process should be able to report 
    the 'translated' value of these fields, as far as they have constant values for the particular 
    traffic Flow, in addition to the observed values of these fields.</t>
    
    <t>If the changed values are not constant for the particular traffic Flow but still reporting 
    is desired, then it is recommended that the general rule from <xref target="RFC5102"></xref> 
    for Information Elements with changing 
    values is applied: the reported value is the one that applies to the first packet observed for 
    the reported Flow.</t>
    
    <t>Note that the 'translated' value of the fields can be the values before or after the translation 
    depending on the Flow direction and the location of the Observation Point with respect to the middlebox.  
    We always call the value that is not the one observed at the Observation Point the translated value.</t>
    
    <t>Note also that a middlebox may change the same port number value of packets from the same Flow to different 
    values depending on the packet or other conditions.  Also, it is possible that packets of different unidirectional 
    arriving Flows with different source/destination port number pairs may be mapped to a single Flow with a single 
    source/destination port number pair by the middlebox.  In both cases, there is a constant value for the port number 
    pair to be observed on one side of the middlebox, but on the other side the values may vary.  
    In such a case, reliable 
    reporting of the port number pairs on the 'other' side of the middlebox is not possible. According to the IPFIX 
    information model <xref target="RFC5102"></xref>, the first value observed for each port number is 
    reported by the IPFIX protocol in that case.</t>
    
    <t>This recommendation applies to NAT (1), NAT-PT (2), SOCKS gateway (3) and involuntary packet 
    redirection (21) middleboxes.  It may also be applied to anonymizers (22), though it should be 
    noted that this carries the risk of losing the effect of anonymization.</t>
    
  </section>
    
  </section>
</section>

<section title="Security Guidelines">

    <section title="Introduction to TLS and DTLS for IPFIX Implementers">
    
    <t>Transport Layer Security (TLS) <xref target="RFC4346"></xref>
    and Datagram Transport Layer Security (DTLS) <xref target="RFC4347"></xref> are the 
    REQUIRED protocols for securing network traffic exported with IPFIX 
    (see Section 11 of <xref target="RFC5101"></xref>). TLS requires a reliable 
    transport channel and is selected as the security mechanism for TCP. DTLS is a version of 
    TLS capable of securing datagram traffic and is selected for UDP, SCTP, and PR-SCTP.</t>
    
    <t>When mapping TLS terminology used in <xref target="RFC4346"></xref> to IPFIX terminology, 
    keep in mind that the IPFIX Exporting Process, as it is the connection initiator, corresponds 
    to the TLS client, and the IPFIX Collecting Process corresponds to the TLS server. These terms 
    apply only to the bidirectional TLS handshakes done at Transport Session establishment and 
    completion time; aside from TLS connection set up between the Exporting Process and the Collecting 
    Process, and teardown at the end of the session, the unidirectional Flow of messages from Exporting 
    Process to Collecting Process operates over TLS just as over any other transport layer for IPFIX.</t>
    
    </section>
    
    <section title="X.509-Based Identity Verification for IPFIX over TLS or DTLS">
    
    <t>When using TLS or DTLS to secure an IPFIX Transport Session, the Collecting Process and 
    Exporting Process must use strong mutual authentication. In other words, each IPFIX endpoint 
    must have its own X.509 certificate <xref target="RFC3280"></xref> and private key, and the 
    Collecting Process, which acts as the TLS or DTLS server, must send a Certificate Request to 
    the Exporting Process during the TLS handshake, and fail to establish a session if the Exporting 
    Process does not present a valid certificate.</t>
    
    <t>Each Exporting Process and Collecting Process must verify the identity of its 
    peer against a set of authorized peers. This may be done by configuring a set of authorized 
    distinguished names and comparing the peer certificate's subject distinguished name against 
    each name in the set. However, if a private certification authority (CA) is used to sign the 
    certificates identifying the Collecting Processes and Exporting Processes, and the set of 
    certificates signed by that private CA may be restricted to those identifying peers authorized 
    to communicate with each other, it is sufficient to merely verify that the peer's certificate 
    is issued by this private CA.</t>
    
    <t>When verifying the identity of its peer, an IPFIX Exporting
    Process or Collecting Process must verify that the peer
    certificate's subject common name or subjectAltName extension
    dNSName matches the fully-qualified domain name (FQDN) of the
    peer. This involves retrieving the expected 
    domain name from the peer certificate and the address of the peer, then verifying that the two match 
    via a DNS lookup. Such verification should require both that forward lookups (FQDN to peer address) 
    and reverse lookups (peer address to FQDN) match. In deployments without DNS infrastructure, it is 
    acceptable to represent the FQDN as an IPv4 dotted-quad or a textual IPv6 address as in 
    <xref target="RFC1924"></xref>. </t>    
    
    </section>
    
    <section title="Implementing IPFIX over TLS over TCP">
    
    <t>Of the security solutions specified for IPFIX, TLS over TCP is as of this writing the most 
    mature and widely implemented. Until stable implementations of DTLS over SCTP are widely available 
    (see <xref target="dtls-sctp"></xref>, below), it is recommended that applications requiring secure 
    transport for IPFIX Messages use TLS over TCP.</t>
    
    <t>When using TLS over TCP, IPFIX Exporting Processes and Collecting Processes should behave in 
    all other aspects as if using TCP as the transport protocol, especially as regards the handling of 
    Templates and Template withdrawals.</t>
    </section>

    <section title="Implementing IPFIX over DTLS over UDP" anchor="dtls-udp">
    
    <t>An implementation of the DTLS protocol version 1, described in <xref target="RFC4347"></xref> 
    and required to secure IPFIX over UDP, is available in <xref target="OPENSSL">OpenSSL</xref> as of 
    version 0.9.8. However, DTLS support is as of this writing under active development and certain 
    implementations might be unstable. We recommend extensive testing of DTLS-based IPFIX implementations 
    to build confidence in the DTLS stack over which your implementation runs.</t>
    
    <t>When using DTLS over UDP, IPFIX Exporting Processes and Collecting Processes should behave in all 
    other aspects as if using UDP as the transport protocol, especially as regards the handling of Templates 
    and Template timeouts.</t>
    
    <t>Note that the selection of IPFIX Message sizes for DTLS over UDP must account for overhead per packet 
    introduced by the DTLS layer.</t>
    
    </section>
    
    <section title="Implementing IPFIX over DTLS over SCTP" anchor="dtls-sctp">
    
    <t>As of this writing, there is no publicly available implementation of DTLS over SCTP as 
    described in <xref target="RFC4347"></xref> and  <xref target="TUEXEN"></xref>. </t>
    
    <t>When using DTLS over SCTP, IPFIX Exporting Processes and
    Collecting Processes should behave in all other aspects as if
    using SCTP as the transport protocol, especially as regards the
    handling of Templates and the use of reliable transport for Template
    and scope information.</t>
    
    <t>An implementation of the DTLS protocol version 1, described in <xref target="RFC4347"></xref> and 
    required to secure IPFIX over SCTP, is available in  <xref target="OPENSSL">OpenSSL</xref> as of 
    version 0.9.8.         
    However, DTLS support is as of this writing under active development and certain implementations 
    might be unstable. 
    We recommend extensive testing of DTLS-based IPFIX implementations to build confidence in the 
    DTLS stack over which your implementation runs.</t>
    
    </section>     
</section>


<section title="Extending the Information Model" anchor="extending">

    <t>IPFIX supports two sets of Information Elements: IANA-registered Information Elements 
    and enterprise-specific Information Elements. New Information Elements can be added to 
    both sets as described in this section.  If an Information Element is considered of general 
    interest, it should be added to the set of IETF-specified Information Elements that is 
    maintained by IANA.</t>
    
    <t>Alternatively, private enterprises can define proprietary Information Elements for internal 
    purposes.  There are several potential reasons for doing so. For example, the Information Element 
    might only relate to proprietary features of a device or protocol of the enterprise.  
    Also, pre-standard product delivery or commercially sensitive product features might cause the need 
    for enterprise-specific Information Elements.</t>
   
    <t>The <xref target="RFC5102">IPFIX information model</xref> document contains an XML-based 
    specification of Template, abstract data types, and IPFIX Information Elements, which may be used 
    to create consistent machine-readable extensions to the IPFIX information model.  This description 
    can be used for automatically checking syntactic correctness of the specification of IPFIX 
    Information Elements and for generating code that deals with processing IPFIX Information Elements.</t>
    
    <section title="Adding New IETF-Specified Information Elements">
    
    <t>New IPFIX Information Elements that are considered to be of general interest should 
    be added to the set of IETF-specified Information Elements that is maintained by IANA.</t>
    
    <t>The introduction of new Information Elements in the IANA registry is subject to expert 
    review.  As described in Section 7.1 of <xref target="RFC5102"></xref>, an 
    expert review is performed by 
    one of a group of experts designated by an IETF Operations and Management Area Director.  
    The experts will initially be drawn from the Working Group Chairs and document editors of 
    the IPFIX and PSAMP Working Groups.  The group of experts must double check the Information 
    Elements definitions with already defined Information Elements for completeness, accuracy, 
    redundancy, and correct naming following the naming conventions in <xref target="RFC5102"></xref>, 
    Section 2.3.</t>
   
    <t>The specification of new IPFIX Information Elements must use the Template specified in 
    <xref target="RFC5102"></xref>, Section 2.1, and must be published using a well-established and persistent publication medium.</t> 

    </section>

    <section title="Adding Enterprise-Specific Information Elements">
    <t>Enterprises or other organizations holding a registered
    Structure of Management Information (SMI) network management private 
    enterprise code number can specify enterprise-specific Information
    Elements.
  Their identifiers 
    can be chosen arbitrarily within the range of 1-32767 and have to be coupled with a 
    <xref target="PEN">Private Enterprise Identifier</xref>.  Enterprise identifiers MUST be registered as 
    SMI network management private enterprise code numbers with IANA.  The registry can be found at 
    http://www.iana.org/assignments/enterprise-numbers.</t>
    
    </section>
    
</section>


<section title="Common Implementation Mistakes">
    <t>The issues listed in this section were identified during implementation and 
    interoperability testing. They do not stem from insufficient clarity in the protocol, 
    but each of these was an actual mistake made in a tested IPFIX implementation. 
    They are listed here for the convenience of future implementers.</t>
    
    <section title="IPFIX and NetFlow Version 9" anchor="ipfix-v9">
    <t>A large group of mistakes stems from the fact that many implementers started 
    implementing IPFIX from an existing version of NetFlow version 9 <xref target="RFC3954"></xref>.  
    Despite their similarity, the two protocols differ in many aspects.  
    We list here some of the most important differences.</t>
    
    <list style="symbols">
	    <t>Transport protocol: NetFlow version 9 initially ran over UDP, while IPFIX 
      must have a congestion-aware transport protocol. IPFIX specifies PR-SCTP as 
      its mandatory protocol, while TCP and UDP are optional.</t>  
      
      <t>IPFIX differentiates between IANA-registered and enterprise-specific Information Elements.  
      Enterprise-specific Information Elements can be specified by coupling a non-IANA-registered Information 
      Element identifier with an Enterprise ID (corresponding to the vendor that defined 
      the Information Element).</t>
    
      <t>Options Templates: in IPFIX, an Options Template must have a scope, and the scope 
      is not allowed to be of length zero.  The NetFlow version 9 specifications 
      <xref target="RFC3954"></xref> don't specify that the scope must not be of length zero.</t>
	  </list>
    
    <t>Message Header:</t>
    
    <list style="symbols">
	    <t>Set ID: Even if the packet headers are different between IPFIX and NetFlow 
      version 9, similar fields are used in both of them.  The difference between 
      the two protocols is in the values that these fields can assume.  A typical example 
      is the Set ID values: the Set ID values of 0 and 1 are used in NetFlow version 9, 
      while they are not used in IPFIX.</t>
      
      <t>Length field: in NetFlow version 9, this field (called count) contains the 
      number of Records.  In IPFIX, it indicates the total length of the IPFIX Message, 
      measured in octets (including Message Header and Set(s)).</t>
    
      <t>Timestamp: the NetFlow version 9 header has an additional timestamp: sysUpTime.  
      It indicates the time in milliseconds since the last reboot of the Exporting Process.</t>
      
      <t>The version number is different.  NetFlow version 9 uses the version number 9, 
      while IPFIX uses the version number 10.</t>
	  </list>
    </section>

    <section title="Padding of the Data Set">
    <t><xref target="RFC5101"></xref> specifies that the Exporting Process 
    MAY insert some octets for set padding to align Data Sets within a Message. 
    The padding length must be shorter than any allowable Record in that set.</t>

    <t>It is important to respect this limitation: if the padding length is equal to or longer 
    than the length of the shortest Record, it will be interpreted as another Record.</t> 

    <t>An alternative is to use the paddingOctets Information Element in the Template definition.</t>
    </section>
    
    <section title="Field ID Numbers">
    <t>Information Element numbers in IPFIX have the range 0-32767 (0-0x7FFF). Information Element numbers 
    outside this range (i.e., with the high bit set) are taken to be enterprise-specific Information 
    Elements, which have an additional four-byte Private Enterprise Number following the Information 
    Element number and length. Inadvertently setting the high bit of the Information Element number 
    by selecting a number out of this range will therefore cause Template scanning errors.</t>
    </section>
    
    <section title="Template ID Numbers">
    <t>Template IDs are generated as required by the Exporting Process.
    When the same set of Information Elements is exported at different times, the corresponding 
    Template is usually identified by different Template IDs. Similarly, if multiple co-existing 
    Templates are composed of the same set of Information Elements, they are also identified by 
    different Template IDs. The Collecting Process does not know in advance which Template ID a 
    particular Template will use.</t>
    </section>
    
    
</section>


  <section title="Security Considerations">
    <t>This document describes the implementation guidelines of IPFIX.  The security requirements 
    for the IPFIX target applications are addressed in the IPFIX requirements document <xref target="RFC3917"></xref>.  
    These requirements are considered for the specification of the IPFIX protocol <xref target="RFC5101"></xref>, for which a Security 
    Considerations Section exists.</t>
    
    <t><xref target="middleboxes"></xref> of this document recommends that IPFIX Exporting Processes report internals about 
    middleboxes.  These internals may be security-relevant, and the reported information needs to be protected 
    appropriately for reasons given below.</t>
    
    <t>Reporting of packets dropped by firewalls and other packet-dropping middleboxes carries the risk that 
    this information can be used by attackers for analyzing the configuration of the middlebox and for 
    developing attacks against it. 
    Address translation may be used for hiding the network structure behind an address translator.  If an 
    IPFIX Exporting Process reports the translations performed by an address translator, then parts of the 
    network structure may be revealed. If an IPFIX Exporting Process reports the translations performed by 
    an anonymizer, the main function of the anonymizer may be compromised.</t>
    
    <t>Note that there exist vulnerabilities in DTLS over SCTP as specified in the IPFIX protocol, such that 
    a third party could cause messages to be undetectably lost, or an SCTP association to shut down. These 
    vulnerabilities are addressed by <xref target="TUEXEN"></xref>; however, it is unclear 
    whether initial OpenSSL-based implementations of DTLS over SCTP will contain the required fixes. DTLS over 
    SCTP should be used with caution in production environments until these issues are completely addressed.</t>
    
  </section>

  <section title="Acknowledgments">
    <t>We would like to thank the MoMe project for organizing two IPFIX Interoperability Events in July 2005 
    and in March 2006, and Fraunhofer Fokus for organizing the third one in November 2006. The Interoperability 
    Events provided us precious input for this document.  Thanks to Brian Trammell for his contributions to the 
    SCTP section and the security guidelines and for the multiple thorough reviews. We would also like to thank 
    Benoit Claise, Carsten Schmoll, and Gerhard Muenz for the technical review and feedback, and Michael Tuexen, 
    Randall Stewart, and Peter Lei for reviewing the SCTP section.</t>
  </section>
</middle>   

<back>
    <references title="Normative References">
  
<reference anchor="RFC5101">
<front>
<title>Specification of the IP Flow Information Export (IPFIX) Protocol for the Exchange of IP Traffic Flow Information</title>

<author initials="B" surname="Claise" fullname="Benoit Claise" role="editor">
    <organization></organization>
</author>

<date month="January" year="2008"></date>

<abstract><t>This document specifies the IPFIX protocol that serves for transmitting IP traffic flow information over the network. In order to transmit IP traffic flow information from an exporting process to an information collecting process, a common representation of flow data and a standard means of communicating them is required. This document describes how the IPFIX data and Templates records are carried over a number of transport protocols from an IPFIX exporting process to an IPFIX collecting process.</t></abstract>

</front>

<seriesInfo name="RFC" value="5101"></seriesInfo>

</reference>

<reference anchor="RFC5102">
<front>
<title>Information Model for IP Flow Information Export</title>

<author initials="J" surname="Quittek" fullname="Juergen Quittek">
    <organization></organization>
</author>
<author initials="S" surname="Bryant" fullname="Stewart Bryant">
</author>
<author initials="B" surname="Claise" fullname="Benoit Claise">
</author>
<author initials="P" surname="Aitken" fullname="Paul Aitken">
</author>
<author initials="J" surname="Meyer" fullname="Jeff Meyer">
</author>

<date month="January" year="2008"></date>

<abstract><t>This memo defines an information model for the IP Flow Information eXport (IPFIX) protocol. It is used by the IPFIX protocol for encoding measured traffic information and information related to the traffic Observation Point, the traffic Metering Process and the Exporting Process. Although developed for the IPFIX protocol, the model is defined in an open way that easily allows using it in other protocols, interfaces, and applications.</t></abstract>

</front>

<seriesInfo name="RFC" value="5102"></seriesInfo>

</reference>
<?rfc linefile="1427:/tmp/CGI8002.1"?> 
      <?rfc linefile="1:http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?>

<reference anchor="RFC2119">

<front>
<title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials="S." surname="Bradner" fullname="Scott Bradner">
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year="1997" month="March"></date>
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name="BCP" value="14"></seriesInfo>
<seriesInfo name="RFC" value="2119"></seriesInfo>
<format type="TXT" octets="4723" target="ftp://ftp.isi.edu/in-notes/rfc2119.txt"></format>
<format type="HTML" octets="17491" target="http://xml.resource.org/public/rfc/html/rfc2119.html"></format>
<format type="XML" octets="5777" target="http://xml.resource.org/public/rfc/xml/rfc2119.xml"></format>
</reference>
<?rfc linefile="1428:/tmp/CGI8002.1"?>
    </references>
    <references title="Informative References">

<reference anchor="IPFIX-AS">
<front>
<title>IPFIX Applicability</title>

<author initials="T" surname="Zseby" fullname="Tanja Zseby">
    <organization></organization>
</author>
<author initials="E" surname="Boschi" fullname="Elisa Boschi">
</author>
<author initials="N" surname="Brownlee" fullname="Nevil Brownlee">
</author>
<author initials="B" surname="Claise" fullname="Benoit Claise">
</author>

<date month="July" year="2007"></date>

<abstract><t>In this document we describe the applicability of the IP Flow Information Export (IPFIX) protocol for a variety of applications. We show how applications can use IPFIX, describe the relevant information elements (IEs) for those applications and present opportunities and limitations of the protocol. We furthermore describe relations of the IPFIX framework to other architectures and frameworks.</t></abstract>

</front>

<seriesInfo name="Work in" value="Progress"></seriesInfo>
<format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-ipfix-as-12.txt"></format>
</reference>


<reference anchor="IPFIX-ARCH">
<front>
<title>Architecture for IP Flow Information Export</title>

<author initials="G" surname="Sadasivan" fullname="Ganesh Sadasivan">
    <organization></organization>
</author>
<author initials="N" surname="Brownlee" fullname="Nevil Brownlee">
</author>
<author initials="B" surname="Claise" fullname="Benoit Claise">
</author>
<author initials="J" surname="Quittek" fullname="Juergen Quittek">
</author>

<date month="September" year="2006"></date>

<abstract><t>This memo defines the IP Flow Information eXport (IPFIX) architecture for the selective monitoring of IP flows, and for the export of measured IP flow information from an IPFIX device to a collector.</t></abstract>

</front>

<seriesInfo name="Work in" value="Progress"></seriesInfo>
<format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-ipfix-architecture-12.txt"></format>
</reference>

<reference anchor="IPFIX-REDUCING">
<front>
<title>Reducing Redundancy in IP Flow Information Export (IPFIX) and Packet Sampling (PSAMP) Reports</title>

<author initials="E" surname="Boschi" fullname="Elisa Boschi">
    <organization></organization>
</author>
<author initials="L" surname="Mark" fullname="Lutz Mark">
</author>
<author initials="B" surname="Claise" fullname="Benoit Claise">
</author>

<date month="May" year="2007"></date>

<abstract><t>This document describes a bandwidth saving method for exporting flow or packet information using the IP Flow Information Export (IPFIX) protocol. As the Packet Sampling (PSAMP) protocol is based on IPFIX, these considerations are valid for PSAMP exports as well. This method works by separating information common to several flow records from information specific to an individual flow record. Common flow information is exported only once in a data record defined by an option Template, while the rest of the specific flow information is associated with the common information via a unique identifier.</t></abstract>

</front>

<seriesInfo name="Work in" value="Progress"></seriesInfo>
<format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-ipfix-reducing-redundancy-09.txt"></format>
</reference>

<reference anchor="PSAMP-PROTO">
<front>
<title>Packet Sampling (PSAMP) Protocol Specifications</title>

<author initials="B" surname="Claise" fullname="Benoit Claise">
    <organization></organization>
</author>
<author initials="J" surname="Quittek" fullname="Juergen Quittek">
</author>
<author initials="A" surname="Johnson" fullname="Andrew Johnson">
</author>

<date month="December" year="2007"></date>

<abstract><t>This document specifies the export of packet information from a 
   PSAMP Exporting Process to a PSAMP Collecting Process.  For export 
   of packet information the IP Flow Information eXport (IPFIX) 
   protocol is used, as both the IPFIX and PSAMP architecture match 
   very well and the means provided by the IPFIX protocol are sufficient.  
   The document specifies in detail how the IPFIX protocol 
   is used for PSAMP export of packet information.</t></abstract>

</front>

<seriesInfo name="Work in" value="Progress"></seriesInfo>
<format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-psamp-protocol-04.txt"></format>
</reference>

<reference anchor="TUEXEN">
<front>
<title>Datagram Transport Layer Security for Stream Control Transmission Protocol</title>

<author initials="M" surname="Tuexen" fullname="Michael Tuexen">
    <organization></organization>
</author>

<author initials="E" surname="Rescorla" fullname="Eric Rescorla">
    <organization></organization>
</author>

<date month="November" year="2007"></date>

<abstract><t>This document describes the usage of the Datagram Transport Layer Security (DTLS) protocol over the Stream Control Transmission Protocol (SCTP). The user of DTLS over SCTP can take advantage of all features provided by SCTP and its extensions, especially support of o multiple streams to avoid head of line blocking. o multi-homing to provide network level fault tolerance. o unordered delivery. o partial reliable data transfer.</t></abstract>

</front>

<seriesInfo name="Work in" value="Progress"></seriesInfo>
<format type="TXT" target="http://www.ietf.org/internet-drafts/draft-tuexen-dtls-for-sctp-02.txt"></format>
</reference>

<reference anchor="TSVWG-UDP">
<front>
<title>UDP Usage Guidelines for Application Designers</title>

<author initials="L" surname="Eggert" fullname="Lars Eggert">
    <organization></organization>
</author>

<author initials="G" surname="Fairhurst" fullname="Gorry  Fairhurst">
    <organization></organization>
</author>

<date month="February" year="2008"></date>

<abstract><t>The User Datagram Protocol (UDP) provides a minimal, message-passing transport that has no inherent congestion control mechanisms. Because congestion control is critical to the stable operation of the Internet, applications and upper-layer protocols that choose to use UDP as an Internet transport must employ mechanisms to prevent congestion collapse and establish some degree of fairness with concurrent traffic. This document provides guidelines on the use of UDP for the designers of such applications and upper-layer protocols. Congestion control guidelines are a primary focus, but the document also provides guidance on other topics, including message sizes, reliability, checksums and middlebox traversal.</t></abstract>

</front>

<seriesInfo name="Work in" value="Progress"></seriesInfo>
<format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-tsvwg-udp-guidelines-05.txt"></format>
</reference>
<?rfc linefile="1435:/tmp/CGI8002.1"?>
      <?rfc linefile="1:http://xml.resource.org/public/rfc/bibxml/reference.RFC.1305.xml"?>

<reference anchor="RFC1305">

<front>
<title>Network Time Protocol (Version 3) Specification,
  Implementation and Analysis</title>
<author initials="D." surname="Mills" fullname="David L. Mills">
<organization>University of Delaware, Electrical Engineering Department</organization>
<address>
<postal>
<street></street>
<city>Newark</city>
<region>DE</region>
<code>19716</code>
<country>US</country></postal>
<phone>+1 302 451 8247</phone>
<email>mills@udel.edu</email></address></author>
<date year="1992" month="March"></date>
<abstract>
<t>This document describes the Network Time Protocol (NTP), specifies its normal structure and summarizes information useful for its implementation. NTP provides the mechanisms to synchronize time and coordinate time distribution in a large, diverse internet operating at rates from mundane to lightwave. It uses a returnable-time design in which a distributed subnet of time servers operating in a self-organizing, hierarchical-master-slave configuration synchronizes local clocks within the subnet and to national time standards via wire or radio. The servers can also redistribute reference time via local routing algorithms and time daemons.</t></abstract></front>

<seriesInfo name="RFC" value="1305"></seriesInfo>
<format type="TXT" octets="307085" target="ftp://ftp.isi.edu/in-notes/rfc1305.txt"></format>
<format type="PDF" octets="442493" target="ftp://ftp.isi.edu/in-notes/rfc1305.pdf"></format>
</reference>
<?rfc linefile="1436:/tmp/CGI8002.1"?>
      <?rfc linefile="1:http://xml.resource.org/public/rfc/bibxml/reference.RFC.1924.xml"?>

<reference anchor="RFC1924">

<front>
<title>A Compact Representation of IPv6 Addresses</title>
<author initials="R." surname="Elz" fullname="Robert Elz">
<organization>University of Melbourne, Computer Science</organization>
<address>
<postal>
<street></street>
<city>Parkville</city>
<region>Victoria</region>
<code>3052</code>
<country>AU</country></postal>
<email>kre@munnari.OZ.AU</email></address></author>
<date year="1996" month="April" day="1"></date>
<abstract>
<t>IPv6 addresses, being 128 bits long, need 32 characters to write in the general case, if standard hex representation, is used, plus more for any punctuation inserted (typically about another 7 characters, or 39 characters total).  This document specifies a more compact representation of IPv6 addresses, which permits encoding in a mere 20 bytes.</t></abstract></front>

<seriesInfo name="RFC" value="1924"></seriesInfo>
<format type="TXT" octets="10409" target="ftp://ftp.isi.edu/in-notes/rfc1924.txt"></format>
</reference>
<?rfc linefile="1437:/tmp/CGI8002.1"?>
      <?rfc linefile="1:http://xml.resource.org/public/rfc/bibxml/reference.RFC.2309.xml"?>


<?rfc linefile="1438:/tmp/CGI8002.1"?>
      <?rfc linefile="1:http://xml.resource.org/public/rfc/bibxml/reference.RFC.2474.xml"?>

<reference anchor="RFC2474">

<front>
<title abbrev="Differentiated Services Field">Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers</title>
<author initials="K." surname="Nichols" fullname="Kathleen Nichols">
<organization>Cisco Systems</organization>
<address>
<postal>
<street>170 West Tasman Drive</street>
<city>San Jose</city>
<region>CA</region>
<code>95134-1706</code>
<country>USA</country></postal>
<phone>+1 408 525 4857</phone>
<email>kmn@cisco.com</email></address></author>
<author initials="S." surname="Blake" fullname="Steven Blake">
<organization>Torrent Networking Technologies</organization>
<address>
<postal>
<street>3000 Aerial Center</street>
<city>Morrisville</city>
<region>NC</region>
<code>27560</code>
<country>USA</country></postal>
<phone>+1 919 468 8466 x232</phone>
<email>slblake@torrentnet.com</email></address></author>
<author initials="F." surname="Baker" fullname="Fred Baker">
<organization>Cisco Systems</organization>
<address>
<postal>
<street>519 Lado Drive</street>
<city> Santa Barbara</city>
<region>CA</region>
<code>93111</code>
<country>USA</country></postal>
<phone>+1 408 526 4257</phone>
<email>fred@cisco.com</email></address></author>
<author initials="D.L." surname="Black" fullname="David L. Black">
<organization>EMC Corporation</organization>
<address>
<postal>
<street>35 Parkwood Drive</street>
<city>Hopkinton</city>
<region>MA</region>
<code>01748</code>
<country>USA</country></postal>
<phone>+1 508 435 1000 x76140</phone>
<email>black_david@emc.com</email></address></author>
<date year="1998" month="December"></date>
<area>Internet</area>
<keyword>internet protocol version 4</keyword>
<keyword>IPv6</keyword>
<keyword>IPv4</keyword>
<keyword>internet protocol version 6</keyword>
<keyword>type of service</keyword>
<abstract>
<t>
   Differentiated services enhancements to the Internet protocol are
   intended to enable scalable service discrimination in the Internet
   without the need for per-flow state and signaling at every hop.  A
   variety of services may be built from a small, well-defined set of
   building blocks which are deployed in network nodes.  The services
   may be either end-to-end or intra-domain; they include both those
   that can satisfy quantitative performance requirements (e.g., peak
   bandwidth) and those based on relative performance (e.g., &quot;class&quot;
   differentiation).  Services can be constructed by a combination of:

<list>
<t>
   - setting bits in an IP header field at network boundaries
     (autonomous system boundaries, internal administrative boundaries,
     or hosts),
</t>
<t>
   - using those bits to determine how packets are forwarded by the
     nodes inside the network, and
</t>
<t>
   - conditioning the marked packets at network boundaries in accordance
     with the requirements or rules of each service.
</t></list></t>
<t>
   The requirements or rules of each service must be set through
   administrative policy mechanisms which are outside the scope of this
   document.  A differentiated services-compliant network node includes
   a classifier that selects packets based on the value of the DS field,
   along with buffer management and packet scheduling mechanisms capable
   of delivering the specific packet forwarding treatment indicated by
   the DS field value.  Setting of the DS field and conditioning of the
   temporal behavior of marked packets need only be performed at network
   boundaries and may vary in complexity.
</t>
<t>
   This document defines the IP header field, called the DS (for
   differentiated services) field.  In IPv4, it defines the layout of
   the TOS octet; in IPv6, the Traffic Class octet.  In addition, a base
   set of packet forwarding treatments, or per-hop behaviors, is
   defined.
</t>
<t>
   For a more complete understanding of differentiated services, see
   also the differentiated services architecture .
</t></abstract></front>

<seriesInfo name="RFC" value="2474"></seriesInfo>
<format type="TXT" octets="50576" target="ftp://ftp.isi.edu/in-notes/rfc2474.txt"></format>
<format type="HTML" octets="67719" target="http://xml.resource.org/public/rfc/html/rfc2474.html"></format>
<format type="XML" octets="62259" target="http://xml.resource.org/public/rfc/xml/rfc2474.xml"></format>
</reference>
<?rfc linefile="1439:/tmp/CGI8002.1"?>
      <?rfc linefile="1:http://xml.resource.org/public/rfc/bibxml/reference.RFC.3234.xml"?>

<reference anchor="RFC3234">

<front>
<title>Middleboxes: Taxonomy and Issues</title>
<author initials="B." surname="Carpenter" fullname="B. Carpenter">
<organization></organization></author>
<author initials="S." surname="Brim" fullname="S. Brim">
<organization></organization></author>
<date year="2002" month="February"></date>
<abstract>
<t>This document is intended as part of an IETF discussion about "middleboxes" - defined as any intermediary box performing functions apart from normal, standard functions of an IP router on the data path between a source host and destination host.  This document establishes a catalogue or taxonomy of middleboxes, cites previous and current IETF work concerning middleboxes, and attempts to identify some preliminary conclusions.  It does not, however, claim to be definitive.  This memo provides information for the Internet community.</t></abstract></front>

<seriesInfo name="RFC" value="3234"></seriesInfo>
<format type="TXT" octets="62329" target="ftp://ftp.isi.edu/in-notes/rfc3234.txt"></format>
</reference>
<?rfc linefile="1440:/tmp/CGI8002.1"?>
      <?rfc linefile="1:http://xml.resource.org/public/rfc/bibxml/reference.RFC.3280.xml"?>

<reference anchor="RFC3280">

<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author initials="R." surname="Housley" fullname="R. Housley">
<organization></organization></author>
<author initials="W." surname="Polk" fullname="W. Polk">
<organization></organization></author>
<author initials="W." surname="Ford" fullname="W. Ford">
<organization></organization></author>
<author initials="D." surname="Solo" fullname="D. Solo">
<organization></organization></author>
<date year="2002" month="April"></date>
<abstract>
<t>This memo profiles the X.509 v3 certificate and X.509 v2 Certificate Revocation List (CRL) for use in the Internet. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name="RFC" value="3280"></seriesInfo>
<format type="TXT" octets="295556" target="ftp://ftp.isi.edu/in-notes/rfc3280.txt"></format>
</reference>
<?rfc linefile="1441:/tmp/CGI8002.1"?>
      <?rfc linefile="1:http://xml.resource.org/public/rfc/bibxml/reference.RFC.3758.xml"?>

<reference anchor="RFC3758">

<front>
<title>Stream Control Transmission Protocol (SCTP) Partial Reliability Extension</title>
<author initials="R." surname="Stewart" fullname="R. Stewart">
<organization></organization></author>
<author initials="M." surname="Ramalho" fullname="M. Ramalho">
<organization></organization></author>
<author initials="Q." surname="Xie" fullname="Q. Xie">
<organization></organization></author>
<author initials="M." surname="Tuexen" fullname="M. Tuexen">
<organization></organization></author>
<author initials="P." surname="Conrad" fullname="P. Conrad">
<organization></organization></author>
<date year="2004" month="May"></date>
<abstract>
<t>This memo describes an extension to the Stream Control Transmission Protocol (SCTP) that allows an SCTP endpoint to signal to its peer that it should move the cumulative ack point forward.  When both sides of an SCTP association support this extension, it can be used by an SCTP implementation to provide partially reliable data transmission service to an upper layer protocol.  This memo describes the protocol extensions, which consist of a new parameter for INIT and INIT ACK, and a new FORWARD TSN chunk type, and provides one example of a partially reliable service that can be provided to the upper layer via this mechanism. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name="RFC" value="3758"></seriesInfo>
<format type="TXT" octets="50999" target="ftp://ftp.isi.edu/in-notes/rfc3758.txt"></format>
</reference>
<?rfc linefile="1442:/tmp/CGI8002.1"?>
      <?rfc linefile="1:http://xml.resource.org/public/rfc/bibxml/reference.RFC.3917.xml"?>

<reference anchor="RFC3917">

<front>
<title>Requirements for IP Flow Information Export (IPFIX)</title>
<author initials="J." surname="Quittek" fullname="J. Quittek">
<organization></organization></author>
<author initials="T." surname="Zseby" fullname="T. Zseby">
<organization></organization></author>
<author initials="B." surname="Claise" fullname="B. Claise">
<organization></organization></author>
<author initials="S." surname="Zander" fullname="S. Zander">
<organization></organization></author>
<date year="2004" month="October"></date>
<abstract>
<t>This memo defines requirements for the export of measured IP flow information out of routers, traffic measurement probes, and middleboxes.  This memo provides information for the Internet community.</t></abstract></front>

<seriesInfo name="RFC" value="3917"></seriesInfo>
<format type="TXT" octets="81615" target="ftp://ftp.isi.edu/in-notes/rfc3917.txt"></format>
</reference>
<?rfc linefile="1443:/tmp/CGI8002.1"?>
      <?rfc linefile="1:http://xml.resource.org/public/rfc/bibxml/reference.RFC.3954.xml"?>

<reference anchor="RFC3954">

<front>
<title>Cisco Systems NetFlow Services Export Version 9</title>
<author initials="B." surname="Claise" fullname="B. Claise" role="editor">
<organization></organization></author>
<date year="2004" month="October"></date>
<abstract>
<t>This document specifies the data export format for version 9 of Cisco Systems' NetFlow services, for use by implementations on the network elements and/or matching collector programs.  The version 9 export format uses templates to provide access to observations of IP packet flows in a flexible and extensible manner.  A template defines a collection of fields, with corresponding descriptions of structure and semantics.  This memo provides information for the Internet community.</t></abstract></front>

<seriesInfo name="RFC" value="3954"></seriesInfo>
<format type="TXT" octets="76360" target="ftp://ftp.isi.edu/in-notes/rfc3954.txt"></format>
</reference>
<?rfc linefile="1444:/tmp/CGI8002.1"?> 
      <?rfc linefile="1:http://xml.resource.org/public/rfc/bibxml/reference.RFC.4346.xml"?>

<reference anchor="RFC4346">

<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.1</title>
<author initials="T." surname="Dierks" fullname="T. Dierks">
<organization></organization></author>
<author initials="E." surname="Rescorla" fullname="E. Rescorla">
<organization></organization></author>
<date year="2006" month="April"></date>
<abstract>
<t>This document specifies Version 1.1 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name="RFC" value="4346"></seriesInfo>
<format type="TXT" octets="187041" target="ftp://ftp.isi.edu/in-notes/rfc4346.txt"></format>
</reference>
<?rfc linefile="1445:/tmp/CGI8002.1"?>
      <?rfc linefile="1:http://xml.resource.org/public/rfc/bibxml/reference.RFC.4347.xml"?>

<reference anchor="RFC4347">

<front>
<title>Datagram Transport Layer Security</title>
<author initials="E." surname="Rescorla" fullname="E. Rescorla">
<organization></organization></author>
<author initials="N." surname="Modadugu" fullname="N. Modadugu">
<organization></organization></author>
<date year="2006" month="April"></date>
<abstract>
<t>This document specifies Version 1.0 of the Datagram Transport Layer Security (DTLS) protocol.  The DTLS protocol provides communications privacy for datagram protocols.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  The DTLS protocol is based on the Transport Layer Security (TLS) protocol and provides equivalent security guarantees.  Datagram semantics of the underlying transport are preserved by the DTLS protocol. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name="RFC" value="4347"></seriesInfo>
<format type="TXT" octets="56014" target="ftp://ftp.isi.edu/in-notes/rfc4347.txt"></format>
</reference>
<?rfc linefile="1446:/tmp/CGI8002.1"?>
      <?rfc linefile="1:http://xml.resource.org/public/rfc/bibxml/reference.RFC.4960.xml"?>

<reference anchor="RFC4960">

<front>
<title>Stream Control Transmission Protocol</title>
<author initials="R." surname="Stewart" fullname="R. Stewart" role="editor">
<organization></organization></author>
<date year="2007" month="September"></date>
<abstract>
<t>This document obsoletes RFC 2960 and RFC 3309. It describes the Stream Control Transmission Protocol (SCTP). SCTP is designed to transport Public Switched Telephone Network (PSTN) signaling messages over IP networks, but is capable of broader applications.&lt;/t&gt;&lt;t&gt; SCTP is a reliable transport protocol operating on top of a connectionless packet network such as IP. It offers the following services to its users:&lt;/t&gt;&lt;t&gt; -- acknowledged error-free non-duplicated transfer of user data,&lt;/t&gt;&lt;t&gt; -- data fragmentation to conform to discovered path MTU size,&lt;/t&gt;&lt;t&gt; -- sequenced delivery of user messages within multiple streams, with an option for order-of-arrival delivery of individual user messages,&lt;/t&gt;&lt;t&gt; -- optional bundling of multiple user messages into a single SCTP packet, and&lt;/t&gt;&lt;t&gt; -- network-level fault tolerance through supporting of multi-homing at either or both ends of an association.&lt;/t&gt;&lt;t&gt; The design of SCTP includes appropriate congestion avoidance behavior and resistance to flooding and masquerade attacks. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name="RFC" value="4960"></seriesInfo>
<format type="TXT" octets="346022" target="ftp://ftp.isi.edu/in-notes/rfc4960.txt"></format>
</reference>
<?rfc linefile="1447:/tmp/CGI8002.1"?>
    
    
    
    <reference anchor="OPENSSL" target="http://www.openssl.org/">
        <front>
            <title>OpenSSL: The Open Source toolkit for SSL/TLS</title>
            <author surname="OpenSSL">
            </author> 
        </front>
    </reference>
    
    <reference anchor="PEN" target="http://www.iana.org/assignments/enterprise-numbers">
        <front>
            <title>PRIVATE ENTERPRISE NUMBERS</title>
            <author surname="IANA">
            </author>  
        </front>
    </reference>
    

    
</references>
    
    
</back>
</rfc>
