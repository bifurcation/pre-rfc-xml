<?xml version='1.0' encoding='US-ASCII' ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY RFC1035 SYSTEM "reference.RFC.1035.xml">
<!ENTITY RFC2119 SYSTEM "reference.RFC.2119.xml">
<!ENTITY RFC4033 SYSTEM "reference.RFC.4033.xml">
<!ENTITY RFC4034 SYSTEM "reference.RFC.4034.xml">
<!ENTITY RFC4035 SYSTEM "reference.RFC.4035.xml">
<!ENTITY RFC5011 SYSTEM "reference.RFC.5011.xml">
<!ENTITY RFC6891 SYSTEM "reference.RFC.6891.xml">
<!ENTITY RFC6975 SYSTEM "reference.RFC.6975.xml">
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="std" number="8145" ipr="trust200902" submissionType="IETF" consensus="yes">

  <front>

    <title abbrev="DNSSEC Key Tag Signaling">Signaling Trust Anchor Knowledge in DNS Security Extensions (DNSSEC)</title>

    <author fullname="Duane Wessels" initials="D." surname="Wessels">
      <organization>Verisign</organization>
      <address>
        <postal>
          <street>12061 Bluemont Way</street>
          <city>Reston</city>
          <region>VA</region>
          <code>20190</code>
          <country>United States of America</country>
        </postal>
        <phone>+1 703 948-3200</phone>
        <email>dwessels@verisign.com</email>
        <uri>http://verisigninc.com</uri>
      </address>
    </author>

    <author fullname="Warren Kumari" initials="W." surname="Kumari">
      <organization>Google</organization>
      <address>
        <postal>
          <street>1600 Amphitheatre Parkway</street>
          <city>Mountain View</city>
          <region>CA</region>
          <code>94043</code>
          <country>United States of America</country>
        </postal>
        <email>warren@kumari.net</email>
      </address>
    </author>

    <author fullname="Paul Hoffman" initials="P." surname="Hoffman">
      <organization>ICANN</organization>
      <address>
        <email>paul.hoffman@icann.org</email>
      </address>
    </author>

    <date month="April" year="2017"/>

    <keyword>DNS</keyword>
    <keyword>DNSSEC</keyword>
    <keyword>Trust Anchor</keyword>

    <abstract>
      <t>
        The DNS Security Extensions (DNSSEC) were developed to provide
        origin authentication and integrity protection for DNS data
        by using digital signatures.  These digital signatures can be
        verified by building a chain of trust starting from a trust
        anchor and proceeding down to a particular node in the DNS.
        This document specifies two different ways for validating
        resolvers to signal to a server which keys are referenced in
        their chain of trust.
        The data from such signaling allow zone administrators
        to monitor the progress of rollovers in a DNSSEC-signed zone.
      </t>

    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>
        The DNS Security Extensions (DNSSEC) <xref target="RFC4033"/>
        <xref target="RFC4034"/> <xref target="RFC4035"/> were developed
        to provide origin
        authentication and integrity protection for DNS data by using digital
        signatures.  DNSSEC uses Key&nbsp;Tags to efficiently match signatures
        to the keys from which they are generated.  The Key Tag is a 16-bit
        value computed from the RDATA portion of a DNSKEY resource record (RR) using a formula
        not unlike a ones-complement checksum.  RRSIG RRs contain a Key Tag
        field whose value is equal to the Key Tag of the DNSKEY RR that validates
        the signature.
      </t>
      <t>
        Likewise, Delegation Signer (DS) RRs also contain a Key Tag field whose
        value is equal to the Key Tag of the DNSKEY RR to which it refers.
      </t>
      <t>
        This document specifies how validating
        resolvers can tell a server, in a DNS query, which DNSSEC key(s) they
        would use to validate the server's responses.

        It describes two independent methods for conveying Key Tag information
        between clients and servers:
        <list style="numbers">
        <t>placing an EDNS option in the OPT RR <xref target="RFC6891"/>
        that contains the Key Tags (described in <xref target="option-all"/>)
        </t>
        <t>periodically sending special "Key Tag queries" to a server
        authoritative for the zone (described in
        <xref target="query-all"/>)</t>
        </list>
      </t>
      <t>
        Each of these new signaling mechanisms is OPTIONAL to implement and use.
        These mechanisms serve to measure the
        acceptance and use of new DNSSEC trust anchors and key signing keys (KSKs).
        This signaling data can be used by zone administrators as a gauge
        to measure the successful deployment of new keys.  This is of particular
        interest for the DNS root zone in the event of key and/or algorithm rollovers that
        rely on <xref target="RFC5011"/> to automatically update a validating DNS resolver's
        trust anchor.
      </t>
      <t>
        This document does not introduce new processes for rolling keys or updating
        trust anchors.
        Rather, it specifies a means by which a DNS
        query can signal the set of keys that a client uses for DNSSEC validation.
      </t>

    <section anchor="Evolution" title="Design Evolution">
      <t>
        Initially, when the work on this document started, it
        proposed including Key Tag values in a new EDNS(0) option
        code.  It was modeled after <xref target="RFC6975"/>, which
        provides DNSSEC algorithm signaling.
      </t>
      <t>
        The authors received feedback from participants in the DNSOP working group 
        that it might be better to convey Key Tags in the QNAME of a
        separate DNS query, rather than as an EDNS(0) option.  Mostly,
        this is because forwarding (e.g., from stub to recursive to
        authoritative) could be problematic.  Reasons include the following:
        <list style="numbers">
          <t>
            EDNS(0) is a hop-by-hop protocol.  Unknown option codes
            would not be forwarded by default, as per <xref
            target="RFC6891"/>.
          </t>
          <t>
            Middleboxes might block entire queries containing unknown
            EDNS(0) option codes.
          </t>
          <t>
            A recursive resolver might need to remember Key Tag values
            (i.e., keep state) received from its stub clients and then
            forward them at a later opportunity.
          </t>
        </list>
      </t>
      <t>
        One advantage of the EDNS(0) option code is that it is
        possible to see that a stub client has a different Key Tag
        list than its forwarder.  In the QNAME-based approach,
        this is not possible because queries originated by a stub
        and a forwarder are indistinguishable.  The authors feel that
        this advantage is not sufficient to justify the EDNS(0)
        approach.
      </t>
      <t>
        One downside to the QNAME approach is that it uses a separate
        query, whereas with EDNS(0) the Key Tag values are
        "piggybacked" onto an existing DNSKEY query.  For this
        reason, this document recommends only sending QNAME-based Key Tag
        queries for trust anchors, although EDNS-based Key Tags can be
        sent with any DNSKEY query.
      </t>
      <t>
        Another downside to the QNAME-based approach is that since the
        trust&nbsp;anchor zone might not contain labels matching the QNAME,
        these queries could be subject to aggressive negative caching features
        now in development by the working group.  This could affect
        the amount of signaling sent by some clients compared to
        others.
      </t>
      <t>
        A probably minor downside to the QNAME-based approach is that it cannot
        be used with extremely long query names if the addition of the prefix
        would cause the name to be longer than 255 octets.
      </t>
    </section>

     </section>
    <section title="Requirements Terminology">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
          target="RFC2119"/>.
      </t>
    </section>

    <section title="Terminology">
      <t>
      <list style="hanging">
<!-- DNE paragraph (quoted from RFC 4033) -->
        <t hangText="Trust Anchor:">A configured
          DNSKEY RR or DS RR hash of a DNSKEY RR.  A validating
          security-aware resolver uses this public key or hash as a
          starting point for building the authentication chain to a
          signed DNS response.  In general, a validating resolver
          will have to obtain the initial values of its trust anchors
          via some secure or trusted means outside the DNS protocol.
          Presence of a trust&nbsp;anchor also implies that the resolver
          should expect the zone to which the trust anchor points to
          be signed. (This paragraph is quoted
          from Section 2 of <xref target="RFC4033"/>.)</t>
        <t hangText="Key Tag:">A 16-bit integer that identifies and
          enables efficient selection of DNSSEC public keys.  A Key Tag
          value can be computed over the RDATA of a DNSKEY RR.  The
          Key Tag field in the RRSIG and DS records can be used to help select
          the corresponding DNSKEY RR efficiently when more than
          one candidate DNSKEY RR is available.  For most algorithms,
          the Key Tag is a simple 16-bit modular sum of the DNSKEY
          RDATA.  See <xref target="RFC4034"/>, Appendix B.</t>
      </list>
      </t>
    </section>

<section title="Using the edns-key-tag Option" anchor="option-all">
    <section title="Option Format" anchor="option-format">
      <t>The edns-key-tag option is encoded as follows:</t>
        <figure><artwork align="left"><![CDATA[
0                       8                      16
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                  OPTION-CODE                  |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                 OPTION-LENGTH                 |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    KEY-TAG                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                      ...                      /
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
]]></artwork></figure>
        <t>where:


          <list style="hanging">
            <t hangText="OPTION-CODE:">The EDNS0 option code 
              assigned to edns-key-tag (14).</t>

            <t hangText="OPTION-LENGTH:">The value 2 x number of key-tag values present.</t>

            <t hangText="KEY-TAG:">One or more 16-bit Key Tag values (<xref target="RFC4034"/>, Appendix B).</t>
          </list>
        </t>

    </section>

    <section title="Use by Queriers">
      <t>
        A validating resolver sets the edns-key-tag
        option in the OPT RR when sending a
        DNSKEY query.  The validating resolver SHOULD also set the
        DNSSEC OK bit (also known as the DO bit) <xref target="RFC4035"/>
        to indicate that it wishes to receive DNSSEC RRs in the response.
      </t>
      <t>
        A DNS client MUST NOT include the edns-key-tag option for non-DNSKEY queries.
      </t>

      <t>
        The KEY-TAG value(s) included in the edns-key-tag option represents the
        Key Tag of the trust anchor or DNSKEY RR that will be used to validate
        the expected response. When the client sends a DNSKEY query, the
        edns-key-tag option represents the Key Tag(s) of the KSK(s) of the
        zone for which the server is authoritative. A validating resolver
        learns the Key Tag(s) of the KSK(s) from the zone's DS record(s)
        (found in the parent) or from a trust anchor.
      </t>
      <t>
        A DNS client SHOULD include the edns-key-tag option when issuing a
        DNSKEY query for a zone corresponding to a trust anchor.
      </t>
      <t>
        A DNS client MAY include the edns-key-tag option when issuing
        a DNSKEY query for a non-trust anchor zone (i.e., Key Tags
        learned via DS records).  Since some DNSSEC validators
        implement bottom-up validation, a non-trust anchor Key Tags zone
        might not be known at the time of the query.  Such a
        validator can include the edns-key-tag option based on
        previously cached data.
      </t>
      <t>
        A DNS client MUST NOT include Key Tag(s) for keys that are
        not learned via either a trust anchor or DS records.
      </t>
      <t>
        Since the edns-key-tag option is only set in the query, if
        a client sees these options in the response, no action needs to be
        taken and the client MUST ignore the option values.
      </t>

      <section title="Stub Resolvers">
        <t>
          Typically, stub resolvers rely on an upstream recursive resolver
          (or cache) to provide a response.  Optimal setting of the
          edns-key-tag option depends on whether the stub resolver elects
          to perform its own validation.
        </t>
        <section title="Validating Stub Resolvers">
          <t>
            A validating stub resolver sets the DNSSEC OK bit
            <xref target="RFC4035"/> to indicate that it wishes to receive
            additional DNSSEC RRs (i.e., RRSIG RRs) in the response.  Such
            validating resolvers SHOULD include the edns-key-tag option in
            the OPT RR when sending a DNSKEY query.
          </t>
        </section>
        <section title="Non-validating Stub Resolvers">
          <t>
            The edns-key-tag option MUST NOT be included by
            non-validating stub resolvers.
          </t>
        </section>
      </section>

      <section title="Recursive Resolvers">
              <section title="Validating Recursive Resolvers">
          <t>
            A validating recursive resolver is, by definition, configured
            with at least one trust anchor.  Thus, a recursive resolver
            SHOULD include the edns-key-tag option in its DNSKEY queries
            as described above.
          </t>
          <t>
            In addition, the clients of a validating recursive
            resolver might be configured to do their own validation,
            with their own trust&nbsp;anchor(s).  When a validating
            recursive resolver receives a query that includes the
            edns-key-tag option with a Key Tag list that differs
            from its own, it SHOULD forward both the client's Key
            Tag list and its own list.  When doing so, the recursive
            resolver SHOULD transmit the two Key Tag lists using
            separate instances of the edns&nbhy;key&nbhy;tag option code in
            the OPT RR.
            For example, if the recursive resolver's Key Tag list
            is (19036, 12345) and the stub&wj;/client's list is (19036,
            34567), the recursive resolver would&nbsp;include the
            edns-key-tag option twice: once with values (19036,&nbsp;12345)
            and once with values (19036, 34567).
          </t>
          <t>
            A validating recursive resolver MAY combine stub/client Key Tag values
            from multiple incoming queries into a single outgoing query.  It is
            RECOMMENDED that implementations place reasonable limits on the number of
            Key Tags to include in the outgoing edns-key-tag option.
          </t>
          <t>
            If the client included the DNSSEC OK and
            Checking Disabled (CD) bits but did&nbsp;not include the
            edns-key-tag option in the query, the validating
            recursive resolver MAY include the option with its own
            Key&nbsp;Tag values in full.
          </t>
          <t>
            Validating recursive resolvers MUST NOT set the edns-key-tag
            option in the final response to the stub client.
          </t>
        </section>

        <section title="Non-validating Recursive Resolvers">
          <t>
            Recursive resolvers that do not validate responses SHOULD copy the edns-key-tag
            option seen in received queries, as they represent the
            wishes of the validating downstream resolver that issued the original
            query.
          </t>

        </section>
      </section>
    </section>

    <section title="Use by Responders">
      <t>
        An authoritative name server receiving queries with the
        edns-key-tag option MAY log or otherwise collect the Key
        Tag values to provide information to the zone operator.
      </t>
      <t>
        A responder MUST NOT include the edns-key-tag option in any
        DNS response.
      </t>
    </section>

</section>

<section title="Using the Key Tag Query" anchor="query-all">

    <section title="Query Format" anchor="query-format">
      <t>
        A Key Tag query consists of a standard DNS query of type NULL
        and of class IN <xref target="RFC1035"/>.
      </t>
      <t>
        The first component of the query name is the string "_ta-" followed
        by a sorted, hyphen-separated list of hexadecimal-encoded Key Tag values.
        The zone name corresponding to the trust anchor is appended to this
        first component.
      </t>
      <t>
        For example, a validating DNS resolver that has a single root
        zone trust anchor with Key Tag 17476 (decimal) would originate
        a query of the form QTYPE=NULL, QCLASS=IN, QNAME=_ta-4444.
      </t>
      <t>
        Hexadecimal values MUST be zero-padded to four hexadecimal digits.
        For example, if the Key Tag is 999 (decimal), it is represented in
        hexadecimal as 03e7.
      </t>
      <t>
        When representing multiple Key Tag values, they MUST be sorted
        in order from smallest to largest.  For example, a validating
        DNS resolver that has three trust anchors for the example.com zone
        with Key Tags 1589, 43547, 31406 (decimal) would originate a query
        of the form
        QTYPE=NULL, QCLASS=IN, QNAME=_ta-0635-7aae-aa1b.example.com.
      </t>
        
    </section>

    <section title="Use by Queriers">
      <t>
        A validating DNS resolver (stub or recursive) SHOULD originate a
        Key&nbsp;Tag query whenever it also originates a DNSKEY query for a
        trust&nbsp;anchor zone. In other words, the need to issue a DNSKEY
        query is also the trigger to issue a Key Tag query.
      </t>
      <t>
        The value(s) included in the Key Tag query represents the
        Key Tag(s) of the trust anchor that will be used to validate the
        expected DNSKEY response.
      </t>
      <t>
        A validating DNS resolver SHOULD NOT originate Key Tag queries
        when also originating DNSKEY queries for non-trust anchor zones.
      </t>
      <t>
        A non-validating DNS resolver MUST NOT originate Key Tag queries.
      </t>
      <t>
        DNS resolvers with caches SHOULD cache and reuse the response to a
        Key Tag query just as it would any other response.
      </t>

    </section>

    <section title="Use by Responders">
      <t>
        An authoritative name server receiving Key Tag queries
        MAY log or otherwise collect the Key
        Tag values to provide information to the zone operator.
      </t>
      <t>
        An authoritative name server MUST generate an appropriate
        response to the Key Tag query.  
        A server does not need to have built-in logic
        that determines the response to Key Tag queries: the response code
        is determined by whether the data is in the zone file or
        covered by wildcards. The zone operator might want
        to add specific Key Tag records to its zone, perhaps with specific TTLs,
        to affect the frequency of Key Tag queries from clients.
      </t>
      <section title="Interaction with Aggressive Negative Caching">
        <t>
          Aggressive NSEC/NSEC3 negative caching
          <xref target="NSEC-NSEC3-Usage"/> may also affect the
          quality of Key Tag signaling.  When the response code for a
          Key Tag query is NXDOMAIN, DNS resolvers that implement aggressive
          negative caching will send fewer Key Tag queries than resolvers
          that do not implement it.
        </t>
        <t>
          For this reason, zone operators might choose to create records
          corresponding to expected Key Tag queries.  During a rollover
          from Key Tag 1111 (hex) to Key Tag 2222 (hex), the zone could
          include the following records:
      <figure>
            <artwork align="left"><![CDATA[
_ta-1111        IN   NULL   \# 0
_ta-2222        IN   NULL   \# 0
_ta-1111-2222   IN   NULL   \# 0
]]></artwork>
          </figure>
          Recall that when multiple Key Tags are present, the originating client
          MUST sort them from smallest to largest in the query name.
        </t>
      </section>
    </section>

</section>

    <section title="IANA Considerations">
      <t>IANA has assigned an EDNS0 option code for
        the edns&nbhy;key&nbhy;tag option in the
        "DNS EDNS0 Option Codes (OPT)" registry as follows:</t>

      <texttable>
        <ttcol>Value</ttcol>
        <ttcol>Name</ttcol>
        <ttcol>Status</ttcol>
        <ttcol>Reference</ttcol>

        <c>14</c>
        <c>edns-key-tag</c>
        <c>Optional</c>
        <c>RFC 8145</c>
      </texttable>
    </section>

   <section title="Security Considerations" anchor="security">
      <t>
        This document specifies two ways for a client to signal its
        trust&nbsp;anchor knowledge to a cache or server. The goal of these
        optional mechanisms is to signal new trust anchor uptake in
        clients to allow zone administrators to know when it is
        possible to complete a key rollover in a DNSSEC-signed zone.
      </t>
      <t>
        There is a possibility that an eavesdropper or server could infer the
        validator in use by a client by the Key Tag list seen.
        This may allow an attacker to find validators using old,
        possibly broken, keys.
        It could also be used to identify the validator or to narrow down
        the possible validator implementations in use by a client;
        the validator used by the client could have a known vulnerability
        that could be exploited by the attacker.
      </t>
      <t>
        Consumers of data collected from the mechanisms described in
        this document are advised that provided Key Tag values might be
        "made up" by some DNS clients with malicious, or at least mischievous,
        intentions.  For example, an attacker with sufficient
        resources might try to generate large numbers of queries
        including only old Key Tag values, with the intention of
        delaying the completion of a key rollover.
      </t>
      <t>
        DNSSEC does not require keys in a zone to have unique Key
        Tags.  During a rollover, there is a small possibility that
        an old key and a new key will have identical Key Tag values.
        Zone operators relying on the edns-key-tag mechanism SHOULD
        take care to ensure that new keys have unique Key Tag values.
      </t>
    </section>

    <section title="Privacy Considerations" anchor="privacy">
      <t>
        This proposal provides additional, optional "signaling" to
        DNS queries in the form of Key Tag values.  While Key Tag values
        themselves are not considered private information, it may
        be possible for an eavesdropper to use Key Tag values as a
        fingerprinting technique to identify particular validating DNS
        clients.  This may be especially true if the validator is
        configured with trust anchors for zones in addition to the
        root zone.
      </t>
      <t>
        A validating resolver need not transmit the
        Key Tags in every applicable query.  Due to
        privacy concerns, such a resolver MAY choose to transmit
        the Key Tags for a subset of queries (e.g., every
        25th time) or by random chance with a certain probability
        (e.g.,&nbsp;5%).
      </t>
      <t>
        Implementations of this specification MAY be administratively
        configured to only transmit the Key Tags for
        certain zones.  For example, the software's configuration
        file may specify a list of zones for which the use of the
        mechanisms described here
        is allowed or denied.  Since the primary motivation for
        this specification is to provide operational measurement
        data for root zone key rollovers, it is RECOMMENDED that
        implementations at least include the edns-key-tag option
        for root zone DNSKEY queries.
      </t>
    </section>

  </middle>
  <back>

    <references title="Normative References">
    &RFC2119;
    &RFC1035;
    &RFC4033;
    &RFC4034;
    &RFC4035;
    &RFC6891;
    </references>

    <references title="Informative References">
    &RFC5011;
    &RFC6975;

<!-- draft-ietf-dnsop-nsec-aggressiveuse (Waiting for Writeup) -->
<reference anchor='NSEC-NSEC3-Usage'>
<front>
<title>Aggressive use of DNSSEC-validated Cache</title>

<author initials='K' surname='Fujiwara' fullname='Kazunori Fujiwara'>
    <organization />
</author>
<author initials='A' surname='Kato' fullname='Akira Kato'>
    <organization />
</author>
<author initials='W' surname='Kumari' fullname='Warren Kumari'>
    <organization />
</author>
<date month='March' year='2017' />
</front>
<seriesInfo name='Work in Progress,' value='draft-ietf-dnsop-nsec-aggressiveuse-09' />
</reference>

    </references>

    <section anchor="Acknowledgments" title="Acknowledgments" numbered="no">
      <t>
        This document was inspired by and borrows heavily from <xref target="RFC6975"/>
        by Scott Rose and Steve Crocker.  The authors would like to
        thank
        Mark Andrews,
        Casey Deccio,
        Burt Kalisky,
        Bob Harold,
        Edward Lewis,
        Tim Wicinski,
        Suzanne Woolf,
        and other members of
        the DNSOP working group
        for their input.
      </t>
    </section>
  </back>
</rfc>
