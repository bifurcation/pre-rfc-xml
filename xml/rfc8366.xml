<?xml version='1.0' encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-index="no" ?>

<rfc number="8366" category="std" ipr="trust200902" submissionType="IETF" consensus="yes">
    <front>
        <title abbrev="Voucher Profile">A Voucher Artifact for Bootstrapping Protocols</title>
        <author initials="K.W." surname="Watsen" fullname="Kent Watsen">
            <organization>Juniper Networks</organization>
            <address>
                <email>kwatsen@juniper.net</email>
            </address>
        </author>
        <author fullname="Michael C. Richardson" initials="M." surname="Richardson">
          <organization>Sandelman Software</organization>
          <address>
            <email>mcr+ietf@sandelman.ca</email>
            <uri>http://www.sandelman.ca/</uri>
          </address>
        </author>
        <author initials="M.P." surname="Pritikin" fullname="Max Pritikin">
            <organization>Cisco Systems</organization>
            <address>
                <email>pritikin@cisco.com</email>
            </address>
        </author>
        <author fullname="Toerless Eckert" initials="T.T.E." surname="Eckert">
          <organization abbrev="Huawei">Futurewei Technologies Inc.</organization>
          <address>
            <postal>
              <street>2330 Central Expy</street>
              <city>Santa Clara</city>
              <code>95050</code>
              <country>United States of America</country>
            </postal>
            <email>tte+ietf@cs.fau.de, toerless.eckert@huawei.com</email>
          </address>
        </author>

        <date month="April" year="2018"/>
        <area>Operations</area>
        <workgroup>ANIMA Working Group</workgroup>
        <keyword>voucher</keyword>
        <abstract>
          <t>This document defines a strategy to securely assign a pledge to an owner
          using an artifact signed, directly or indirectly, by the pledge's manufacturer.
          This artifact is known as a "voucher".</t>

          <t>
            This document defines an artifact format as a YANG-defined JSON document
            that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.
            The voucher artifact is normally generated by
            the pledge's manufacturer (i.e., the Manufacturer Authorized Signing
            Authority (MASA)).
          </t>

          <t>This document only defines the voucher artifact, leaving it to other
          documents to describe specialized protocols for accessing it.</t>
        </abstract>
    </front>

    <middle>
      <section title="Introduction" anchor="introduction">

        <t>This document defines a strategy to securely assign a candidate device
        (pledge) to an owner using an artifact signed, directly or indirectly,
        by the pledge's manufacturer, i.e., the Manufacturer Authorized
        Signing Authority (MASA).  This artifact is known as the "voucher".</t>

        <t>The voucher artifact is a JSON <xref target="RFC8259"/> document that
        conforms with a data model described by YANG <xref target="RFC7950"/>, is
        encoded using the rules defined in <xref target="RFC8259"/>, and
        is signed using (by default) a CMS structure <xref target="RFC5652"/>.</t>
 
<t>The primary purpose of a voucher is to securely convey a
  certificate, the "pinned-domain-cert", that a pledge can
  use to authenticate subsequent interactions. A voucher may be useful
        in several contexts, but the driving motivation
        herein is to support secure bootstrapping mechanisms.  Assigning
        ownership is important to bootstrapping mechanisms so that the pledge
        can authenticate the network that is trying to take control of it.</t>

        <t>The lifetimes of vouchers may vary. In some bootstrapping
	protocols, the vouchers may include a nonce restricting them to a
	single use, whereas the vouchers in other bootstrapping protocols may have an indicated lifetime. In order to support long lifetimes, this document recommends using short lifetimes with programmatic renewal, see <xref target="renewal-over-revocation"/>.</t>

        <t>This document only defines the voucher artifact, leaving it to other
        documents to describe specialized protocols for accessing it.  Some bootstrapping
        protocols using the voucher artifact defined in this document include:
        <xref target="ZERO-TOUCH"/>,
        <xref target="SECUREJOIN"/>, and
        <xref target="KEYINFRA"/>).</t>
      </section>

      <section title="Terminology">
        <t>This document uses the following terms:</t>
        <t><list style="hanging">
        <t hangText="Artifact:"> Used throughout to represent the
            voucher as instantiated in the form of a signed structure.</t>
          <t hangText="Domain:">The set of entities or infrastructure under
            common administrative control.  The goal of the bootstrapping
            protocol is to enable a pledge to discover and join a domain.</t>

        <t hangText="Imprint:">The process where a device obtains the
            cryptographic key material to identify and trust future
            interactions with a network. This term is taken from Konrad
            Lorenz's work in biology with new ducklings: "during a critical
            period, the duckling would assume that anything that looks like a
            mother duck is in fact their mother" <xref
	    target="Stajano99theresurrecting" />. An equivalent for a device is
            to obtain the fingerprint of the network's root certification
            authority certificate. A device that imprints on an attacker
            suffers a similar fate to a duckling that imprints on a hungry
            wolf. Imprinting is a term from psychology and ethology, as described in <xref target="imprinting"></xref>. 
</t>

          <t hangText="Join Registrar (and Coordinator):">A representative of the domain that is
            configured, perhaps autonomically, to decide whether a new device
            is allowed to join the domain. The administrator of the domain
            interfaces with a join registrar (and Coordinator) to control this process.
            Typically, a join registrar is "inside" its domain. For simplicity, this document
            often refers to this as just "registrar".</t>

          <t hangText="MASA (Manufacturer Authorized Signing Authority):">The entity that, for the purpose of this document, signs the
            vouchers for a manufacturer's pledges.  In some bootstrapping protocols, the
            MASA may have an Internet presence and be integral to the bootstrapping
            process, whereas in other protocols the MASA may be an offline service
            that has no active role in the bootstrapping process.</t>

          <t hangText="Owner:">The entity that controls the private key of the
          "pinned-domain-cert" certificate conveyed by the voucher.</t>

          <t hangText="Pledge:">The prospective device attempting to find and
            securely join a domain.  When shipped, it only trusts authorized
            representatives of the manufacturer.</t>

          <t hangText="Registrar:">See join registrar.</t>

          <t hangText="TOFU (Trust on First Use):">Where a pledge
            device makes no security decisions but rather simply trusts the
            first domain entity it is contacted by.  Used similarly to <xref
            target="RFC7435"/>. This is also known as the "resurrecting
            duckling" model.</t>

          <t hangText="Voucher:">A signed statement from the MASA service
            that indicates to a pledge the cryptographic identity of the
            domain it should trust.</t>

        </list></t>
      </section>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
        NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
        "MAY", and "OPTIONAL" in this document are to be interpreted as
        described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
        when, and only when, they appear in all capitals, as shown here.</t>
      </section>

      <section title="Survey of Voucher Types">

          <t>A voucher is a cryptographically protected statement to the pledge
              device authorizing a zero-touch "imprint" on the join registrar of the
              domain. The specific information a voucher provides is influenced by the
              bootstrapping use case.</t>

              <t>The voucher can impart the following information to
              the join registrar and pledge:</t>

          <t><list style="hanging">
              <t hangText="Assertion Basis:">Indicates the method that protects
                  the imprint (this is distinct from the voucher signature that
                  protects the voucher itself). This might include
		  manufacturer-asserted ownership verification, assured
		  logging operations, or reliance on pledge endpoint behavior
		  such as secure root of trust
                  of measurement. The join registrar might use this information.
                  Only some methods are normatively defined in this
                  document. Other methods are left for future work.</t>

              <t hangText="Authentication of Join Registrar:">Indicates how the pledge
                  can authenticate the join registrar.  This document defines
                  a mechanism to pin the domain certificate.
                  Pinning a symmetric key, a raw key, or "CN-ID" 
                  or "DNS-ID" information (as defined in <xref
		  target="RFC6125"/>) is left for future work.
              </t>

              <t hangText="Anti-Replay Protections:">Time- or nonce-based
                  information to constrain the voucher to time periods or bootstrap
                  attempts.</t>
          </list></t>

          <t>A number of bootstrapping scenarios can be met using differing
              combinations of this information. All scenarios address the primary
              threat of a Man-in-The-Middle (MiTM) registrar gaining control over the pledge device. The
              following combinations are "types" of vouchers:</t>

          <figure>
              <artwork><![CDATA[
             |Assertion   |Registrar ID    | Validity    |
Voucher      |Log-|Veri-  |Trust  |CN-ID or| RTC | Nonce |
Type         | ged|  fied |Anchor |DNS-ID  |     |       |
---------------------------------------------------------|
Audit        |  X |       | X     |        |     | X     |
-------------|----|-------|-------|--------|-----|-------|
Nonceless    |  X |       | X     |        | X   |       |
Audit        |    |       |       |        |     |       |
-------------|----|-------|-------|--------|-----|-------|
Owner Audit  |  X |   X   | X     |        | X   | X     |
-------------|----|-------|-------|--------|-----|-------|
Owner ID     |    |   X   | X     |  X     | X   |       |
-------------|----|-------|----------------|-----|-------|
Bearer       |  X |       |   wildcard     | optional    |
out-of-scope |    |       |                |             |
-------------|----|-------|----------------|-------------|

NOTE: All voucher types include a 'pledge ID serial-number'
      (not shown here for space reasons).
              ]]></artwork>
          </figure>

          <t><list style="hanging">
              <t hangText="Audit Voucher:">An Audit Voucher is named after the
                  logging assertion mechanisms that the registrar then "audits" to
                  enforce local policy. The registrar mitigates a MiTM registrar by
                  auditing that an unknown MiTM registrar does not appear in the log
                  entries. This does not directly prevent the MiTM but provides a
                  response mechanism that ensures the MiTM is
		  unsuccessful. The advantage is that actual ownership knowledge is not required on
                  the MASA service.</t>

              <t hangText="Nonceless Audit Voucher:">An Audit Voucher without a
                  validity period statement. Fundamentally, it is the same as an Audit
                  Voucher except that it can be issued in advance to support network
                  partitions or to provide a permanent voucher for remote
                  deployments.</t>

              <t hangText="Ownership Audit Voucher:">An Audit Voucher where the
                  MASA service has verified the registrar as the authorized owner.
                  The MASA service mitigates a MiTM registrar by refusing to
                  generate Audit Vouchers for unauthorized registrars. The
                  registrar uses audit techniques to supplement the MASA. This
                  provides an ideal sharing of policy decisions and enforcement
                  between the vendor and the owner.</t>

              <t hangText="Ownership ID Voucher:">Named after inclusion of the pledge's CN-ID or DNS-ID within the
                  voucher. The MASA service
                  mitigates a MiTM registrar by identifying the specific registrar
                  (via WebPKI) authorized to own the pledge. </t>

              <t hangText="Bearer Voucher:">A Bearer Voucher is named after the
                  inclusion of a registrar ID wildcard. Because the registrar identity
                  is not indicated, this voucher type must be treated as a
                  secret and protected from exposure as any 'bearer' of the voucher
                  can claim the pledge device. Publishing a nonceless
                  bearer voucher effectively turns the specified pledge into a
                  "TOFU" device with minimal mitigation against MiTM registrars. Bearer
                  vouchers are out of scope.</t>
          </list></t>
      </section> 

      <section title="Voucher Artifact" anchor="voucher">

        <t>The voucher's primary purpose is to securely assign a pledge to an owner.
        The voucher informs the pledge which entity it should consider to be
        its owner.</t>

        <t>
          This document defines a voucher that is a JSON-encoded instance of
          the YANG module defined in <xref target="voucher-yang-module" />
	  that has been, by default,  CMS signed.
        </t>
        <t>
          This format is described here as a practical basis for
          some uses (such as in NETCONF), but more to clearly indicate what
          vouchers look like in practice.  This description also serves to
          validate the YANG data model.
        </t>

        <t>
          Future work is expected to define new mappings of the voucher to
          Concise Binary Object Representation (CBOR) (from JSON) and to
	  change the signature container from CMS to JSON Object Signing and
	  Encryption (JOSE) or CBOR Object Signing and Encryption (COSE).  XML or ASN.1 formats are also conceivable.
        </t>

        <t>

          This document defines a media type and a filename extension for the
          CMS-encoded JSON type.  Future documents on additional formats
          would define additional media types.  Signaling is in the form of a MIME
          Content-Type, an HTTP Accept: header, or more mundane methods like
          use of a filename extension when a voucher is transferred on a USB
          key.
        </t>

        <section title="Tree Diagram" anchor="voucher-tree-diagram">
          <t>The following tree diagram illustrates a high-level view of a
          voucher document.  The notation used in this diagram is described
          in <xref target="RFC8340"/>.  Each node in the diagram is
          fully described by the YANG module in <xref target="voucher-yang-module"/>.
          Please review the YANG module for a detailed description of the
          voucher format.</t>
          <figure>
            <artwork><![CDATA[
module: ietf-voucher

  yang-data voucher-artifact:
      +---- voucher
         +---- created-on                       yang:date-and-time
         +---- expires-on?                      yang:date-and-time
         +---- assertion                        enumeration
         +---- serial-number                    string
         +---- idevid-issuer?                   binary
         +---- pinned-domain-cert               binary
         +---- domain-cert-revocation-checks?   boolean
         +---- nonce?                           binary
         +---- last-renewal-date?               yang:date-and-time
]]></artwork>
          </figure>
        </section>

        <section title="Examples" anchor="voucher-examples">
          <t>This section provides voucher examples for illustration
          purposes.  These examples conform to the encoding rules
          defined in <xref target="RFC8259"/>.</t>

          <t>The following example illustrates an ephemeral voucher (uses a nonce).
             The MASA generated this voucher using the 'logged' assertion type, knowing
             that it would be suitable for the pledge making the request.</t>
          <figure>
            <artwork><![CDATA[
{
  "ietf-voucher:voucher": {
    "created-on": "2016-10-07T19:31:42Z",
    "assertion": "logged",
    "serial-number": "JADA123456789",
    "idevid-issuer": "base64encodedvalue==",
    "pinned-domain-cert": "base64encodedvalue==",
    "nonce": "base64encodedvalue=="
  }
}
]]></artwork>
          </figure>

          <t>The following example illustrates a non-ephemeral voucher (no nonce).
             While the voucher itself expires after two weeks, it presumably can
             be renewed for up to a year.   The MASA generated this voucher
             using the 'verified' assertion type, which should satisfy all pledges.</t>
          <figure>
            <artwork><![CDATA[
{
  "ietf-voucher:voucher": {
    "created-on": "2016-10-07T19:31:42Z",
    "expires-on": "2016-10-21T19:31:42Z",
    "assertion": "verified",
    "serial-number": "JADA123456789",
    "idevid-issuer": "base64encodedvalue==",
    "pinned-domain-cert": "base64encodedvalue==",
    "domain-cert-revocation-checks": "true",
    "last-renewal-date": "2017-10-07T19:31:42Z"
  }
}
]]></artwork>
          </figure>

        </section>

        <section title="YANG Module" anchor="voucher-yang-module">

          <t>Following is a YANG <xref target="RFC7950"/> module formally
          describing the voucher's JSON document structure.</t>

          <figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-voucher@2018-05-08.yang"
module ietf-voucher {
  yang-version 1.1;

  namespace 
    "urn:ietf:params:xml:ns:yang:ietf-voucher";
  prefix vch;

  import ietf-yang-types {
    prefix yang;
    reference "RFC 6991: Common YANG Data Types";
  }

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  organization
    "IETF ANIMA Working Group";

  contact
    "WG Web:   <https://datatracker.ietf.org/wg/anima/>
     WG List:  <mailto:anima@ietf.org>
     Author:   Kent Watsen
               <mailto:kwatsen@juniper.net>
     Author:   Max Pritikin
               <mailto:pritikin@cisco.com>
     Author:   Michael Richardson
               <mailto:mcr+ietf@sandelman.ca>
     Author:   Toerless Eckert
               <mailto:tte+ietf@cs.fau.de>";

  description
   "This module defines the format for a voucher, which is produced by
    a pledge's manufacturer or delegate (MASA) to securely assign a
    pledge to an 'owner', so that the pledge may establish a secure
    connection to the owner's network infrastructure.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when, they
    appear in all capitals, as shown here. 

    Copyright (c) 2018 IETF Trust and the persons identified as 
    authors of the code.  All rights reserved.

    Redistribution and use in source and binary forms, with or without 
    modification, is permitted pursuant to, and subject to the license
    terms contained in, the Simplified BSD License set forth in Section
    4.c of the IETF Trust's Legal Provisions Relating to IETF Documents
    (https://trustee.ietf.org/license-info). 

    This version of this YANG module is part of RFC 8366; see the RFC
    itself for full legal notices.";

  revision 2018-05-08 {
    description
     "Initial version";
    reference
     "RFC 8366: Voucher Profile for Bootstrapping Protocols";
  }

  // Top-level statement
  rc:yang-data "voucher-artifact" {
    uses voucher-artifact-grouping;
  }

  // Grouping defined for future augmentations
  grouping voucher-artifact-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";

    container voucher {
      description
        "A voucher assigns a pledge to an owner (pinned-domain-cert).";

      leaf created-on {
        type yang:date-and-time;
        mandatory true;
        description
          "A value indicating the date this voucher was created.  This
           node is primarily for human consumption and auditing.  Future 
           work MAY create verification requirements based on this 
           node.";
      }

      leaf expires-on {
        type yang:date-and-time;
        must 'not(../nonce)';
        description
          "A value indicating when this voucher expires.  The node is
           optional as not all pledges support expirations, such as
           pledges lacking a reliable clock.

           If this field exists, then the pledges MUST ensure that
           the expires-on time has not yet passed.  A pledge without
           an accurate clock cannot meet this requirement.

           The expires-on value MUST NOT exceed the expiration date
           of any of the listed 'pinned-domain-cert' certificates.";

      }

      leaf assertion {
        type enumeration {
          enum verified {
            description
              "Indicates that the ownership has been positively
               verified by the MASA (e.g., through sales channel
               integration).";
          }
          enum logged {
            description
              "Indicates that the voucher has been issued after
              minimal verification of ownership or control.  The 
              issuance has been logged for detection of 
              potential security issues (e.g., recipients of
              vouchers might verify for themselves that unexpected
              vouchers are not in the log).  This is similar to 
              unsecured trust-on-first-use principles but with the
              logging providing a basis for detecting unexpected 
              events.";
          }
          enum proximity {
            description
              "Indicates that the voucher has been issued after
              the MASA verified a proximity proof provided by the 
              device and target domain.  The issuance has been logged
              for detection of potential security issues.  This is 
              stronger than just logging, because it requires some
              verification that the pledge and owner are 
              in communication but is still dependent on analysis of 
              the logs to detect unexpected events.";
          }
        }
        mandatory true;
        description
          "The assertion is a statement from the MASA regarding how
           the owner was verified.  This statement enables pledges
           to support more detailed policy checks.  Pledges MUST
           ensure that the assertion provided is acceptable, per
           local policy, before processing the voucher.";
      }

      leaf serial-number {
        type string;
        mandatory true;
        description
          "The serial-number of the hardware.  When processing a
           voucher, a pledge MUST ensure that its serial-number
           matches this value.  If no match occurs, then the
           pledge MUST NOT process this voucher.";
      }

      leaf idevid-issuer {
        type binary;
        description
          "The Authority Key Identifier OCTET STRING (as defined in 
           Section 4.2.1.1 of RFC 5280) from the pledge's IDevID 
           certificate.  Optional since some serial-numbers are 
           already unique within the scope of a MASA.
           Inclusion of the statistically unique key identifier
           ensures statistically unique identification of the hardware.
           When processing a voucher, a pledge MUST ensure that its
           IDevID Authority Key Identifier matches this value.  If no
           match occurs, then the pledge MUST NOT process this voucher.
          
           When issuing a voucher, the MASA MUST ensure that this field
           is populated for serial-numbers that are not otherwise unique
           within the scope of the MASA.";
      }

      leaf pinned-domain-cert {
        type binary;
        mandatory true;
        description
          "An X.509 v3 certificate structure, as specified by RFC 5280,
           using Distinguished Encoding Rules (DER) encoding, as defined
           in ITU-T X.690.

           This certificate is used by a pledge to trust a Public Key
           Infrastructure in order to verify a domain certificate
           supplied to the pledge separately by the bootstrapping
           protocol.  The domain certificate MUST have this certificate
           somewhere in its chain of certificates.  This certificate
           MAY be an end-entity certificate, including a self-signed
           entity.";
        reference
          "RFC 5280:
             Internet X.509 Public Key Infrastructure Certificate
             and Certificate Revocation List (CRL) Profile.
           ITU-T X.690:
              Information technology - ASN.1 encoding rules:
              Specification of Basic Encoding Rules (BER),
              Canonical Encoding Rules (CER) and Distinguished
              Encoding Rules (DER).";
      }

      leaf domain-cert-revocation-checks {
         type boolean;
         description
            "A processing instruction to the pledge that it MUST (true)
             or MUST NOT (false) verify the revocation status for the
             pinned domain certificate.  If this field is not set, then
             normal PKIX behavior applies to validation of the domain
             certificate.";
      }

      leaf nonce {
        type binary {
          length "8..32";
        }
        must 'not(../expires-on)';
        description
          "A value that can be used by a pledge in some bootstrapping
           protocols to enable anti-replay protection.  This node is
           optional because it is not used by all bootstrapping
           protocols.

           When present, the pledge MUST compare the provided nonce
           value with another value that the pledge randomly generated
           and sent to a bootstrap server in an earlier bootstrapping
           message.  If the values do not match, then the pledge MUST
           NOT process this voucher.";
      }

      leaf last-renewal-date {
        type yang:date-and-time;
        must '../expires-on';
        description
          "The date that the MASA projects to be the last date it
           will renew a voucher on.  This field is merely informative;
           it is not processed by pledges.

           Circumstances may occur after a voucher is generated that 
           may alter a voucher's validity period.  For instance, a
           vendor may associate validity periods with support contracts,
           which may be terminated or extended over time.";
      }
    } 
    // end voucher
  } 

  // end voucher-grouping
}

<CODE ENDS>
]]></artwork>
          </figure>
        </section>  

        <section title="CMS Format Voucher Artifact" anchor="cms-voucher">
          <t>
            The IETF evolution of PKCS#7 is CMS <xref target="RFC5652" />.
            A CMS-signed voucher, the default type, contains a ContentInfo
            structure with the voucher content. An eContentType of 40
            indicates that the content is a JSON-encoded voucher.
          </t>

          <t>
            The signing structure is a CMS SignedData structure, as specified
            by Section 5.1 of <xref target="RFC5652"/>, encoded using ASN.1
            Distinguished Encoding Rules (DER), as specified in ITU-T X.690
            <xref target="ITU.X690.2015"/>.
          </t>

          <t>
            To facilitate interoperability, <xref target="vcj"/> in this
            document registers the media type "application/voucher-cms+json"
            and the filename extension ".vcj".
          </t>

          <t>
            The CMS structure MUST contain a 'signerInfo' structure, as
            described in Section 5.1 of <xref target="RFC5652"/>, containing the
            signature generated over the content using a private key
            trusted by the recipient. Normally, the recipient is the pledge and the
            signer is the MASA. Another possible use could be as a "signed
            voucher request" format originating from the pledge or registrar
            toward the MASA.
            Within this document, the signer is assumed to be the MASA.
          </t>

          <t>
            Note that Section 5.1 of <xref target="RFC5652"/> includes a
            discussion about how to validate a CMS object, which is really a
            PKCS7 object (cmsVersion=1).  Intermediate systems (such the
            Bootstrapping Remote Secure Key
              Infrastructures (BRSKI) registrar) that might need to evaluate the voucher in
            flight MUST be prepared for such an older format.  No signaling
            is necessary, as the manufacturer knows the capabilities of the
            pledge and will use an appropriate format voucher for each
            pledge.
          </t>

          <t>
            The CMS structure SHOULD also contain all of the certificates
            leading up to and including the signer's trust anchor certificate
            known to the recipient.  The inclusion of the trust anchor is
            unusual in many applications, but third parties cannot accurately
	    audit the transaction without it.
          </t>

          <t>
            The CMS structure MAY also contain revocation objects for any
            intermediate certificate authorities (CAs) between the
            voucher issuer and the trust anchor known to the recipient.
            However, the use of CRLs and other validity mechanisms is
            discouraged, as the pledge is unlikely to be able to perform
            online checks and is unlikely to have a trusted clock source.
            As described below, the use of short-lived vouchers and/or a pledge-provided nonce provides a freshness guarantee.
          </t>

        </section>
      </section>  


      <section title="Design Considerations" anchor="design-con">

        <section title="Renewals Instead of Revocations" anchor="renewal-over-revocation">

          <t>The lifetimes of vouchers may vary.  In some bootstrapping protocols, the
          vouchers may be created and consumed immediately, whereas in other bootstrapping
          solutions, there may be a significant time delay between when a voucher is created
          and when it is consumed.  In cases when there is a time delay, there is a need for
          the pledge to ensure that the assertions made when the voucher was created are
          still valid.</t>

          <t>A revocation artifact is generally used to verify the continued validity
          of an assertion such as a PKIX certificate, web token, or a "voucher".  With
          this approach, a potentially long-lived assertion is paired with a reasonably
          fresh revocation status check to ensure that the assertion is still valid.
          However, this approach increases solution complexity, as it introduces the
          need for additional protocols and code paths to distribute and process the
          revocations.</t>

          <t>Addressing the shortcomings of revocations, this document recommends
          instead the use of lightweight renewals of short-lived non-revocable
          vouchers.  That is, rather than issue a long-lived voucher, where the
          'expires-on' leaf is set to some distant date, the expectation
          is for the MASA to instead issue a short-lived voucher, where the
          'expires-on' leaf is set to a relatively near date, along with a promise
          (reflected in the 'last-renewal-date' field) to reissue the voucher again
          when needed.  Importantly, while issuing the initial voucher may incur
          heavyweight verification checks ("Are you who you say you are?" "Does the
          pledge actually belong to you?"), reissuing the voucher should be a
          lightweight process, as it ostensibly only updates the voucher's
          validity period.  
   With this approach, there is
   only the one artifact, and only one code path is needed to process
   it; there is no possibility of a pledge choosing to skip the
   revocation status check because, for instance, the OCSP Responder is
   not reachable.
</t>

          <t>While this document recommends issuing short-lived vouchers, the
          voucher artifact does not restrict the ability to create long-lived
          voucher, if required; however, no revocation method is described.</t>

          <t>Note that a voucher may be signed by a chain of intermediate CAs
          leading up to the trust anchor certificate known by the pledge.  Even
          though the voucher itself is not revocable, it may still be revoked,
          per se, if one of the intermediate CA certificates is revoked.</t>
        </section>

        <section title="Voucher Per Pledge">
          <t>The solution described herein originally enabled a single voucher to
          apply to many pledges, using lists of regular expressions to represent
          ranges of serial-numbers.  However, it was determined that blocking the
          renewal of a voucher that applied to many devices would be excessive
          when only the ownership for a single pledge needed to be blocked.
          Thus, the voucher format now only supports a single serial-number
          to be listed.</t>
        </section>
      </section>

      <section title="Security Considerations" anchor="sec-con">
        <section title="Clock Sensitivity">
          <t>
            An attacker could use an expired voucher to gain control over
            a device that has no understanding of time.  The device cannot
            trust NTP as a time reference, as an attacker could control
            the NTP stream.
          </t>
          <t>
            There are three things to defend against this: 1) devices are
            required to verify that the expires-on field has not yet passed, 
            2) devices without access to time can use nonces to
            get ephemeral vouchers, and 3) vouchers without expiration times
	    may be used, which will appear in the audit log, informing the
	    security decision. 
          </t>

          <t>
            This document defines a voucher format that  contains time values
            for expirations, which require an accurate clock
            in order to be processed correctly.  Vendors planning on
            issuing vouchers with expiration values must ensure that devices
            have an accurate clock when shipped from manufacturing
            facilities and take steps to prevent clock tampering.
            If it is not possible to ensure clock accuracy, then
            vouchers with expirations should not be issued.
          </t>
        </section>
        <section title="Protect Voucher PKI in HSM">
          <t>
Pursuant the recommendation made in Section 6.1 for the MASA to be
deployed as an online voucher signing service, it is RECOMMENDED that
the MASA's private key used for signing vouchers is protected by
a hardware security module (HSM).
</t>
        </section>
        <section title="Test Domain Certificate Validity When Signing">
          <t>If a domain certificate is compromised, then any outstanding
          vouchers for that domain could be used by the attacker.  The domain
          administrator is clearly expected to initiate revocation of any
          domain identity certificates (as is normal in PKI solutions).
          </t>
          <t>
          Similarly,they are expected to contact the MASA to indicate that
          an outstanding (presumably short lifetime) voucher should be blocked from
          automated renewal. Protocols for voucher distribution are RECOMMENDED
          to check for revocation of any domain identity certificates before
	  signing of vouchers.</t>
        </section>

<section title="YANG Module Security Considerations">

<t>The YANG module specified in this document defines the schema
  for data that is subsequently encapsulated by a CMS signed-data
  content type, as described in Section 5 of <xref target="RFC5652" />.  As such,
  all of the YANG modeled data is protected from modification.</t>

<t>Implementations should be aware that the signed data is only
  protected from external modification; the data is still visible.
  This potential disclosure of information doesn't affect security
  so much as privacy.  In particular, adversaries can glean
  information such as which devices belong to which organizations
  and which CRL Distribution Point and/or OCSP Responder URLs are
  accessed to validate the vouchers.  When privacy is important,
  the CMS signed-data content type SHOULD be encrypted, either by
  conveying it via a mutually authenticated secure transport protocol
  (e.g., TLS <xref target="RFC5246" />) or by encapsulating the signed-data
  content type with an enveloped-data content type (Section 6
  of <xref target="RFC5652" />), though details for how to do this are outside
  the scope of this document.</t>

<t> The use of YANG to define data structures, via the 'yang-data'
  statement, is relatively new and distinct from the traditional
  use of YANG to define an API accessed by network management
  protocols such as NETCONF <xref target="RFC6241" /> and RESTCONF <xref
  target="RFC8040" />. For this reason,
  these guidelines do not follow template described by Section 3.7 of <xref
  target="YANG-GUIDE"/>.</t>
</section>

      </section>

      <section title="IANA Considerations" anchor="iana-considerations">

        <section title="The IETF XML Registry">
          <t>This document registers a URI in the "IETF XML
          Registry" <xref target="RFC3688"/>.  IANA has registered the following:</t>
          <t>
            <figure>
                <artwork><![CDATA[
   URI: urn:ietf:params:xml:ns:yang:ietf-voucher
   Registrant Contact: The ANIMA WG of the IETF.
   XML: N/A, the requested URI is an XML namespace.
]]></artwork>
            </figure>
          </t>
        </section>

        <section title="The YANG Module Names Registry">
          <t>This document registers a YANG module in the
          "YANG Module Names" registry <xref target="RFC6020"/>.
          IANA has
	  registered the following:</t>
          <t>
            <figure>
                <artwork><![CDATA[
   name:         ietf-voucher
   namespace:    urn:ietf:params:xml:ns:yang:ietf-voucher
   prefix:       vch
   reference:    RFC 8366
]]></artwork>
          </figure>
        </t>
        </section>

        <section title="The Media Types Registry" anchor="vcj">

          <t>This document registers a new media type in the "Media Types"
          registry <xref target="RFC6838"/>. IANA has registered the following:</t>
          <t>
            <list style="hanging">
              <t hangText="Type name:">application</t>
              <t hangText="Subtype name:">voucher-cms+json</t>
              <t hangText="Required parameters:"> none</t>
              <t hangText="Optional parameters:"> none</t>
              <t hangText="Encoding considerations:"> CMS-signed JSON
              vouchers are ASN.1/DER encoded.</t>
              <t hangText="Security considerations:"> See <xref target="sec-con" /></t>
              <t hangText="Interoperability considerations:">The format is
              designed to be broadly interoperable.</t>
              <t hangText="Published specification:"> RFC 8366 </t>
              <t hangText="Applications that use this media type:"> ANIMA,
              6tisch, and NETCONF zero-touch imprinting systems.</t>

<t hangText="Fragment identifier considerations:"> none </t>

              <t hangText="Additional information:">
                <list style="hanging">
<t hangText="Deprecated alias names for this type:"> none 
<list style="hanging">
                  <t hangText="Magic number(s):">None</t>
</list>
</t>
                  <t hangText="File extension(s):">.vcj</t>
                  <t hangText="Macintosh file type code(s):">none</t>
                </list>
              </t>
              <t hangText="Person and email address to contact for further information:">IETF&nbsp;ANIMA WG</t>
              <t hangText="Intended usage:"> LIMITED</t>
              <t hangText="Restrictions on usage:"> NONE</t>
              <t hangText="Author:">ANIMA WG</t>
              <t hangText="Change controller:">IETF</t>
              <t hangText="Provisional registration? (standards tree only):">NO</t>
              </list>
          </t>
        </section>
        
        <section title="The SMI Security for S/MIME CMS Content Type Registry">
          <t>
            IANA has registered the following OID in the "SMI Security for S/MIME
            CMS Content Type (1.2.840.113549.1.9.16.1)" registry: 

            <figure>
                <artwork><![CDATA[
            Decimal  Description                             References
            -------  --------------------------------------  ----------
            40       id-ct-animaJSONVoucher                  RFC 8366
]]></artwork>
            </figure>
          </t>
        </section>

      </section>

    </middle>

    <back>
      <references title="Normative References">

        <?rfc include="reference.RFC.2119.xml"?>
        <?rfc include="reference.RFC.5652.xml"?>
        <?rfc include="reference.RFC.6020.xml"?>
        <?rfc include="reference.RFC.8259.xml"?>
        <?rfc include="reference.RFC.7950.xml"?>
        <?rfc include="reference.RFC.8174.xml"?>

        <reference anchor="ITU.X690.2015" target="https://www.itu.int/rec/T-REC-X.690/">
 <front>
 <title>Information Technology - ASN.1 encoding rules: Specification of Basic
 Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished
 Encoding Rules (DER)</title>
 <author>
 <organization>International Telecommunication Union</organization>
 </author>
 <date month="August" year="2015" />
 </front>
 <seriesInfo name="ITU-T Recommendation X.690," value="ISO/IEC 8825-1" />
	</reference>

      </references>


      <references title="Informative References">
        <?rfc include="reference.RFC.5246.xml"?> 
        <?rfc include="reference.RFC.3688.xml"?>
        <?rfc include="reference.RFC.6838.xml"?>       
        <?rfc include="reference.RFC.6241.xml"?> 
        <?rfc include="reference.RFC.8040.xml"?>

	<!-- draft-ietf-netconf-zerotouch-21 IESG state: I-D Exists -->

<reference anchor='ZERO-TOUCH'>
<front>
<title>Zero Touch Provisioning for Networking Devices</title>

<author initials='K' surname='Watsen' fullname='Kent Watsen'>
    <organization />
</author>

<author initials='M' surname='Abrahamsson' fullname='Mikael Abrahamsson'>
    <organization />
</author>

<author initials='I' surname='Farrer' fullname='Ian Farrer'>
    <organization />
</author>

<date month='March' day='5' year='2018' />

</front>

<seriesInfo name='Work in Progress,' value='draft-ietf-netconf-zerotouch-21' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-netconf-zerotouch-21.txt' />
</reference>

<!-- draft-ietf-anima-bootstrapping-keyinfra-12 IESG state: I-D Exists -->

<reference anchor='KEYINFRA'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructures (BRSKI)</title>

<author initials='M' surname='Pritikin' fullname='Max Pritikin'>
    <organization />
</author>

<author initials='M' surname='Richardson' fullname='Michael Richardson'>
    <organization />
</author>

<author initials='M' surname='Behringer' fullname='Michael Behringer'>
    <organization />
</author>

<author initials='S' surname='Bjarnason' fullname='Steinthor Bjarnason'>
    <organization />
</author>

<author initials='K' surname='Watsen' fullname='Kent Watsen'>
    <organization />
</author>

<date month='March' day='5' year='2018' />

</front>

<seriesInfo name='Work in Progress,' value='draft-ietf-anima-bootstrapping-keyinfra-12' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-anima-bootstrapping-keyinfra-12.txt' />
</reference>

<!-- draft-ietf-6tisch-dtsecurity-secure-join-01 IESG state: Replaced by
draft-ietf-6tisch-dtsecurity-zerotouch-join -->

<reference anchor='SECUREJOIN'>
<front>
<title>6tisch Secure Join protocol</title>

<author initials='M' surname='Richardson' fullname='Michael Richardson'>
    <organization />
</author>

<date month='February' day='25' year='2017' />

</front>

<seriesInfo name='Work in Progress,' value='draft-ietf-6tisch-dtsecurity-secure-join-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-6tisch-dtsecurity-secure-join-01.txt' />
</reference>

<reference anchor='YANG-GUIDE'>
<front>
<title>Guidelines for Authors and Reviewers of YANG Data Model Documents</title>

<author initials='A' surname='Bierman' fullname='Andy Bierman'>
    <organization />
</author>

<date month='March' day='13' year='2018' />

<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG data model modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG data model modules.  This document obsoletes RFC 6087.</t></abstract>

</front>

<seriesInfo name='Work in Progress,' value='draft-ietf-netmod-rfc6087bis-20' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-netmod-rfc6087bis-20.txt' />
</reference>





<!-- draft-ietf-netmod-yang-tree-diagrams-06 IESG state: RFC Ed Queue -->

<?rfc include="reference.RFC.8340.xml"?>

        <?rfc include="reference.RFC.6125.xml"?>
        <?rfc include="reference.RFC.7435" ?>

        <reference anchor="Stajano99theresurrecting"
            target="https://www.cl.cam.ac.uk/research/dtg/www/files/publications/public/files/tr.1999.2.pdf">
            <front>
                <title>The Resurrecting Duckling: Security Issues for Ad-Hoc
                    Wireless Networks</title>

                <author fullname="Frank Stajano" initials="F." surname="Stajano"></author>

                <author fullname="Ross Anderson" initials="R." surname="Anderson"></author>

                <date year="1999" />
            </front>
        </reference>

        <reference anchor="imprinting"
            target="https://en.wikipedia.org/w/index.php?title=Imprinting_(psychology)&amp;oldid=825757556">
            <front>
                <title>Wikipedia article: Imprinting</title>

                <author surname="Wikipedia"></author>

                <date month="February" year="2018" />
            </front>
        </reference>

      </references>
      <section title="Acknowledgements" numbered="no">
        <t>The authors would like to thank for following for
        lively discussions on list and in the halls (ordered
        by last name): William Atwood, Toerless Eckert, and Sheng Jiang.
        </t>
        <t>
          Russ Housley provided the upgrade from PKCS7 to CMS (RFC 5652) along
          with the detailed CMS structure diagram.
        </t>
      </section>

    </back>
</rfc>

