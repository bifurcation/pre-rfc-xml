<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocdepth="2"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" ipr="pre5378Trust200902" number="6407" obsoletes="3547"
     submissionType="IETF">
  <front>
    <title abbrev="GDOI">The Group Domain of Interpretation</title>

    <author fullname="Brian Weis" initials="B.W." surname="Weis">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street>170 W. Tasman Drive</street>

          <city>San Jose</city>

          <code>95134-1706</code>

          <region>California</region>

          <country>USA</country>
        </postal>

        <phone>+1-408-526-4796</phone>

        <email>bew@cisco.com</email>
      </address>
    </author>

    <author fullname="Sheela Rowles" initials="S.R." surname="Rowles">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street>170 W. Tasman Drive</street>

          <city>San Jose</city>

          <code>95134-1706</code>

          <region>California</region>

          <country>USA</country>
        </postal>

        <phone>+1-408-527-7677</phone>

        <email>sheela@cisco.com</email>
      </address>
    </author>

    <author fullname="Thomas Hardjono" initials="T.H." surname="Hardjono">
      <organization>MIT</organization>

      <address>
        <postal>
          <street>77 Massachusetts Ave.</street>

          <city>Cambridge</city>

          <code>02139</code>

          <region>Massachusetts</region>

          <country>USA</country>
        </postal>

        <phone>+1-781-729-9559</phone>

        <email>hardjono@mit.edu</email>
      </address>
    </author>

    <date month="October" year="2011" />

    <abstract>
      <t>This document describes the Group Domain of Interpretation (GDOI)
      protocol specified in RFC 3547. The GDOI provides group key management
      to support secure group communications according to the architecture
      specified in RFC 4046. The GDOI manages group security associations,
      which are used by IPsec and potentially other data security protocols.
      This document replaces RFC 3547.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>Secure group and multicast applications require a method by which
      each group member shares common security policy and keying material.
      This document describes the Group Domain of Interpretation (GDOI), which
      is an Internet Security Association and Key Management Protocol (ISAMKP)
      <xref target="RFC2408"></xref> Domain of Interpretation (DOI), a group
      key management system. The GDOI distributes security associations (SAs)
      for IPsec Authentication Header (AH) <xref target="RFC4302"></xref> and
      Encapsulating Security Payload (ESP) <xref target="RFC4303"></xref>
      protocols and potentially other data security protocols used in group
      applications. The GDOI uses the group key management model defined in
      <xref target="RFC4046"></xref>, and described more generally by <xref
      target="RFC3740">"The Multicast Group Security Architecture"
      </xref>.</t>

      <t>In this group key management model, the GDOI protocol participants
      are a Group Controller/Key Server (GCKS) and a group member (GM). A
      group member contacts ("registers with") a GCKS to join the group.
      During the registration, mutual authentication and authorization are
      achieved, after which the GCKS distributes current group policy and
      keying material to the group member over an authenticated and encrypted
      session. The GCKS may also initiate contact ("rekeys") with group
      members to provide updates to group policy.</t>

      <t>ISAKMP defines two "phases" of negotiation (Section 2.3 of <xref
      target="RFC2408"></xref>). A Phase 1 security association provides
      mutual authentication and authorization, and a security association that
      is used by the protocol participants to execute a Phase 2 exchange. This
      document incorporates (i.e., uses but does not redefine) the Phase 1
      security association definition from the Internet DOI <xref
      target="RFC2407"></xref>, <xref target="RFC2409"></xref>. Although RFCs
      2407, 2408, and 2409 were obsoleted by <xref target="RFC4306"></xref>
      (and subsequently <xref target="RFC5996"></xref>), they are used by this
      document because the protocol definitions remain relevant for ISAKMP
      protocols other than IKEv2.</t>

      <t>The GDOI includes two new Phase 2 ISAKMP exchanges (protocols), as
      well as necessary new payload definitions to the ISAKMP standard
      (Section 2.1 of <xref target="RFC2408"></xref>). These two new protocols
      are:</t>

      <t><list style="numbers">
          <t>The GROUPKEY-PULL registration protocol exchange. This exchange
          uses "pull" behavior since the member initiates the retrieval of
          these SAs from a GCKS. It is protected by an ISAKMP Phase 1
          protocol, as described above. At the culmination of a GROUPKEY-PULL
          exchange, an authorized group member has received and installed a
          set of SAs that represent group policy, and it is ready to
          participate in secure group communications.</t>

          <t>The GROUPKEY-PUSH rekey protocol exchange. The rekey protocol is
          a datagram initiated ("pushed") by the GCKS, usually delivered to
          group members using a IP multicast address. The rekey protocol is an
          ISAKMP protocol, where cryptographic policy and keying material
          ("Rekey SA") are included in the group policy distributed by the
          GCKS in the GROUPKEY-PULL exchange. At the culmination of a
          GROUPKEY-PUSH exchange, the key server has sent group policy to all
          authorized group members, allowing receiving group members to
          participate in secure group communications. If a group management
          method is included in group policy (as described in <xref
          target="FB-AC"></xref>), at the conclusion of the GROUPKEY-PUSH
          exchange, some members of the group may have been de-authorized and
          no longer able to participate in the secure group
          communications.</t>
        </list></t>

      <t><figure title="Figure 1. Group Key Management Model">
          <artwork align="center"><![CDATA[
+--------------------------------------------------------------+
|                                                              |
|                    +--------------------+                    |
|            +------>|     GDOI GCKS      |<------+            |
|            |       +--------------------+       |            | 
|            |                 |                  |            | 
|       GROUPKEY-PULL          |             GROUPKEY-PULL     | 
|         PROTOCOL             |               PROTOCOL        | 
|            |                 |                  |            | 
|            v           GROUPKEY-PUSH            v            | 
|   +-----------------+     PROTOCOL     +-----------------+   | 
|   |                 |        |         |                 |   | 
|   |    GDOI GM(s)   |<-------+-------->|    GDOI GM(S)   |   | 
|   |                 |                  |                 |   | 
|   +-----------------+                  +-----------------+   | 
|            |                                    ^            | 
|            v                                    |            | 
|            +-Data Security Protocol (e.g., ESP)-+            | 
|                                                              | 
+--------------------------------------------------------------+ 
]]></artwork>
        </figure></t>

      <t>Although the GROUPKEY-PUSH protocol specified by this document can be
      used to refresh the Rekey SA protecting the GROUPKEY-PUSH protocol, the
      most common use of GROUPKEY-PUSH is to establish keying material and
      policy for a data security protocol.</t>

      <t>GDOI defines several payload types used to distribute policy and
      keying material within the GROUPKEY-PULL and GROUPKEY-PUSH protocols:
      Security Association (SA), SA KEK, SA TEK, Group Associated Policy
      (GAP), Sequence Number (SEQ), and Key Download (KD). Format and usage of
      these payloads are defined in later sections of this memo.</t>

      <t>In summary, GDOI is a group security association management protocol:
      all GDOI messages are used to create, maintain, or delete security
      associations for a group. As described above, these security
      associations protect one or more data security protocol SAs, a Rekey SA,
      and/or other data shared by group members for multicast and groups
      security applications.</t>

      <section title="Requirements Notation">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119"></xref>.</t>
      </section>

      <section title="Terminology">
        <t>The following key terms are used throughout this document.</t>

        <t><list hangIndent="6" style="hanging">
            <t hangText="Data-Security SA">The security policy distributed by
            a GDOI GCKS describing traffic that is expected to be protected by
            group members. This document described the distribution of IPsec
            AH and ESP Data-Security SAs.</t>

            <t hangText="Group Controller/Key Server">A device that defines
            group policy and distributes keys for that policy <xref
            target="RFC3740"></xref>.</t>

            <t hangText="Group Member.">An authorized member of a secure
            group, sending and/or receiving IP packets related to the
            group.</t>

            <t hangText="GROUPKEY-PULL.">A protocol used by a GDOI group
            member to request group policy and keying material.</t>

            <t hangText="GROUPKEY-PUSH.">A protocol used by a GDOI GCKS to
            distribute updates of group policy and keying material to
            authorized group members.</t>

            <t hangText="Key Encrypting Key.">The symmetric cipher key used to
            protect the GROUPKEY-PUSH message.</t>

            <t hangText="Logical Key Hierarchy.">A group management method
            defined in Section 5.4 of <xref target="RFC2627"></xref>.</t>

            <t hangText="Rekey SA.">The security policy protecting a
            GROUPKEY-PUSH protocol.</t>

            <t hangText="SA Attribute Payload">A payload that follows the
            Security Association payload and that describes group security
            attributes associated with the security association. SA Attribute
            payloads include the SAK, SAT, and GAP payloads.</t>

            <t hangText="Security Parameter Index">An arbitrary value that is
            used by a receiver to identify a security association such as an
            IPsec ESP Security Association or a Rekey SA.</t>

            <t hangText="Traffic Encryption Key.">The symmetric cipher key
            used to protect a data security protocol (e.g., IPsec ESP).</t>
          </list></t>
      </section>

      <section title="Acronyms and Abbreviations">
        <t>The following acronyms and abbreviations are used throughout this
        document. <list counter="" hangIndent="6" style="hanging">
            <t hangText="AH">IP Authentication Header</t>

            <t hangText="ATD">Activation Time Delay</t>

            <t hangText="DOI">Domain of Interpretation</t>

            <t hangText="DTD">Deactivation Time Delay</t>

            <t hangText="ESP">IP Encapsulating Security Payload</t>

            <t hangText="GCKS">Group Controller/Key Server</t>

            <t hangText="GDOI">Group Domain of Interpretation</t>

            <t hangText="GAP">Group Associated Policy Payload</t>

            <t hangText="GM">Group Member</t>

            <t hangText="GSPD">Group Security Policy Database</t>

            <t hangText="IV">Initialization Vector</t>

            <t hangText="KD">Key Download Payload</t>

            <t hangText="KEK">Key Encryption Key</t>

            <t hangText="LKH">Logical Key Hierarchy</t>

            <t hangText="SA">Security Association</t>

            <t hangText="SAK">SA KEK Payload</t>

            <t hangText="SEQ">Sequence Number Payload</t>

            <t hangText="SAT">SA TEK Payload</t>

            <t hangText="SID">Sender-ID</t>

            <t hangText="SPI">Security Parameter Index</t>

            <t hangText="SSIV">Sender-Specific IV</t>

            <t hangText="TEK">Traffic Encryption Key</t>

            <t hangText="TLV">Type/Length/Value</t>

            <t hangText="TV">Type/Value</t>
          </list></t>
      </section>
    </section>

    <section title="GDOI Phase 1 Protocol">
      <t>The GDOI GROUPKEY-PULL exchange is a Phase 2 protocol that MUST be
      protected by a Phase 1 protocol. The Phase 1 protocol can be any
      protocol that provides for the following protections:</t>

      <t><list style="symbols">
          <t>Peer Authentication</t>

          <t>Confidentiality</t>

          <t>Message Integrity</t>
        </list></t>

      <t>The following sections describe one such Phase 1 protocol. Other
      protocols which may be potential Phase 1 protocols are described in
      Appendix A. However, the use of the protocols listed there are not
      considered part of this document.</t>

      <t>This document defines how the ISAKMP Phase 1 exchanges as defined in
      <xref target="RFC2409"></xref> can be used a Phase 1 protocol for GDOI.
      The following sections define characteristics of the ISAKMP Phase 1
      protocols that are unique for these exchanges when used for GDOI.</t>

      <t><xref target="IKE-Security-Considerations"></xref> describes how the
      ISAKMP Phase 1 protocols meet the requirements of a GDOI Phase 1
      protocol.</t>

      <section title="DOI value">
        <t>The Phase 1 SA payload has a DOI value. That value MUST be the GDOI
        DOI value as defined later in this document.</t>
      </section>

      <section title="UDP port">
        <t>IANA has assigned port 848 for the use of GDOI; this allows for an
        implementation to use separate ISAKMP implementations to service GDOI
        and the Internet Key Exchange Protocol (IKE) <xref
        target="RFC5996"></xref>. A GCKS SHOULD listen on this port for
        GROUPKEY-PULL exchanges, and the GCKS MAY use this port to distribute
        GROUPKEY-PUSH messages. An ISAKMP Phase 1 exchange implementation
        supporting NAT traversal <xref target="RFC3947"></xref> MAY move to
        port 4500 to process the GROUPKEY-PULL exchange.</t>
      </section>
    </section>

    <section title="GROUPKEY-PULL Exchange">
      <t>The goal of the GROUPKEY-PULL exchange is to establish a Rekey and/or
      Data-Security SAs at the member for a particular group. A Phase 1 SA
      protects the GROUPKEY-PULL; there MAY be multiple GROUPKEY-PULL
      exchanges for a given Phase 1 SA. The GROUPKEY-PULL exchange downloads
      the data security keys (TEKs) and/or group key encrypting key (KEK) or
      KEK array under the protection of the Phase 1 SA.</t>

      <section title="Authorization">
        <t>It is important that a group member explicitly trust entities that
        it expects to act as a GCKS for a particular group. When no
        authorization is performed, it is possible for a rogue GDOI
        participant to perpetrate a man-in-the-middle attack between a group
        member and a GCKS <xref target="MP04"></xref>. A group member MUST
        specifically list each authorized GCKS in its Group Peer Authorization
        Database (GPAD) <xref target="RFC5374"></xref>. A group member MUST
        ensure that the Phase 1 identity of the GCKS is an authorized
        GCKS.</t>

        <t>It is important that a GCKS explicitly authorize group members
        before providing them with group policy and keying material. A GCKS
        implementation SHOULD have a method of authorizing group members
        (e.g., by maintaining an authorization list). When the GCKS performs
        authorization, it MUST use the Phase 1 identity to authorize the
        GROUPKEY-PULL request for group policy and keying material.</t>
      </section>

      <section anchor="messages" title="Messages">
        <t>The GROUPKEY-PULL is a Phase 2 exchange. Phase 1 computes SKEYID_a,
        which is the "key" in the keyed hash used in the ISAKMP HASH payloads
        <xref target="RFC2408"></xref> included in GROUPKEY-PULL messages.
        When using the Phase 1 defined in this document, SKEYID_a is derived
        according to <xref target="RFC2409"></xref>. Each GROUPKEY-PULL
        message hashes a uniquely defined set of values (described below) and
        includes the result in the HASH payload. Nonces permute the HASH and
        provide some protection against replay attacks. Replay protection is
        important to protect the GCKS from attacks that a key management
        server will attract.</t>

        <t>The GROUPKEY-PULL uses nonces to guarantee "liveness" as well as
        against replay of a recent GROUPKEY-PULL message. The replay attack is
        only possible in the context of the current Phase 1. If a
        GROUPKEY-PULL message is replayed based on a previous Phase 1, the
        HASH calculation will fail due to a wrong SKEYID_a. The message will
        fail processing before the nonce is ever evaluated.</t>

        <t>In order for either peer to get the benefit of the replay
        protection, it must postpone as much processing as possible until it
        receives the message in the protocol that proves the peer is live. For
        example, the GCKS MUST NOT adjust its internal state (e.g., keeping a
        record of the GM) until it receives a message with Nr included
        properly in the HASH payload. This requirement ensures that replays of
        GDOI messages will not cause the GCKS to change the state of the group
        until it has confirmation that the initiating group member is
        live.</t>

        <t><figure align="center" title="Figure 2. GROUPKEY-PULL Exchange">
            <preamble></preamble>

            <artwork><![CDATA[
    Group Member                      GCKS
    ------------                      ----
(1) HDR*, HASH(1), Ni, ID     -->
(2)                           <--     HDR*, HASH(2), Nr, SA
(3) HDR*, HASH(3) [,GAP]      --> 
(4)                           <--     HDR*, HASH(4), [SEQ,] KD

    * Protected by the Phase 1 SA; encryption occurs after HDR
]]></artwork>

            <postamble></postamble>
          </figure></t>

        <t>Figure 2 demonstrates the four messages that are part of a
        GROUPKEY-PULL exchange. HDR is an ISAKMP header payload that uses the
        Phase 1 cookies and a message identifier (M-ID) as in ISAKMP.
        Following each HDR is a set of payloads conveying requests (messages 1
        and 3 originated by the group member), or group policy and/or keying
        material (messages 2 and 4 originated by the GCKS).</t>

        <t>Hashes are computed in the manner described within <xref
        target="RFC2409"></xref>. The HASH computation for each message is
        unique; it is shown in Figure 2 and below as HASH(n) where (n)
        represents the GROUPKEY-PULL message number. Each HASH calculation is
        a pseudo-random function ("prf") over the message ID (M-ID) from the
        ISAKMP header concatenated with the entire message that follows the
        hash including all payload headers, but excluding any padding added
        for encryption. The GM expects to find its nonce, Ni, in the HASH of a
        returned message, and the GCKS expects to see its nonce, Nr, in the
        HASH of a returned message. HASH(2), HASH(3), and HASH(4) also include
        nonce values previously passed in the protocol (i.e., Ni or Nr minus
        the payload header). The nonce passed in Ni is represented as Ni_b,
        and the nonce passed in Nr is represented as Nr_b. The HASH payloads
        prove that the peer has the Phase 1 secret (SKEYID_a) and the nonce
        for the exchange identified by message ID, M-ID. <figure>
            <preamble></preamble>

            <artwork><![CDATA[
     HASH(1) = prf(SKEYID_a, M-ID | Ni | ID)
     HASH(2) = prf(SKEYID_a, M-ID | Ni_b | Nr | SA)
     HASH(3) = prf(SKEYID_a, M-ID | Ni_b | Nr_b [ | GAP ])
     HASH(4) = prf(SKEYID_a, M-ID | Ni_b | Nr_b [ | SEQ ] | KD)
 ]]></artwork>

            <postamble></postamble>
          </figure></t>

        <t>In addition to the Nonce and HASH payloads, the GM identifies the
        group it wishes to join through the ISAKMP ID payload.</t>

        <t>The GCKS informs the member of the cryptographic policies of the
        group in the SA payload, which describes the DOI, KEK, and/or TEK
        keying material, authentication transforms, and other group policy.
        Each SPI is also determined by the GCKS and downloaded in the SA
        payload chain (see <xref target="SA-Payload"></xref>). The SA KEK
        attribute contains the ISAKMP cookie pair for the Rekey SA, which is
        not negotiated but downloaded. Each SA TEK attribute contains a SPI as
        defined in <xref target="TEK-Payload"></xref> of this document.</t>

        <t>After receiving and parsing the SA payload, the GM responds with an
        acknowledgement message proving its liveness. It optionally includes a
        GAP payload requesting resources.</t>

        <t>The GCKS informs the GM of the value of the sequence number in the
        SEQ payload. This sequence number provides anti-replay state
        associated with a KEK, and its knowledge ensures that the GM will not
        accept GROUPKEY-PUSH messages sent prior to the GM joining the group.
        The SEQ payload has no other use and is omitted from the GROUPKEY-PULL
        exchange when a KEK attribute is not included in the SA payload. When
        a SEQ payload is included in the GROUPKEY-PULL exchange, it includes
        the most recently used sequence number for the group. At the
        conclusion of a GROUPKEY-PULL exchange, the initiating group member
        MUST NOT accept any rekey message with both the KEK attribute SPI
        value and a sequence number less than or equal to the one received
        during the GROUPKEY-PULL exchange. When the first group member
        initiates a GROUPKEY-PULL exchange, the GCKS provides a Sequence
        Number of zero, since no GROUPKEY-PUSH messages have yet been sent.
        Note the sequence number increments only with GROUPKEY-PUSH messages.
        The GROUPKEY-PULL exchange distributes the current sequence number to
        the group member. The sequence number resets to a value of one with
        the usage of a new KEK attribute. Thus, the first packet sent for a
        given Rekey SA will have a Sequence Number of 1. The sequence number
        increments with each successive rekey.</t>

        <t>The GCKS always returns a KD payload containing keying material to
        the GM. If a Rekey SA is defined in the SA payload, then KD will
        contain the KEK; if one or more Data-Security SAs are defined in the
        SA payload, KD will contain the TEKs.</t>

        <section title="ISAKMP Header Initialization">
          <t>Cookies are used in the ISAKMP header to identify a particular
          GDOI session. The GDOI GROUPKEY-PULL exchange uses cookies according
          to ISAKMP <xref target="RFC2408"></xref>.</t>

          <t>Next Payload identifies an ISAKMP or GDOI payload (see <xref
          target="payloads"></xref>).</t>

          <t>Major Version is 1 and Minor Version is 0 according to ISAKMP
          (Section 3.1 of <xref target="RFC2408"></xref>).</t>

          <t>The Exchange Type has value 32 for the GDOI GROUPKEY-PULL
          exchange.</t>

          <t>Flags, Message ID, and Length are according to ISAKMP (Section
          3.1 of <xref target="RFC2408"></xref>). The Commit flag is not
          useful because there is no synchronization between the GROUPKEY-PULL
          exchange and the data traffic protected by the policy distributed by
          the GROUPKEY-PULL exchange.</t>
        </section>
      </section>

      <section title="Group Member Operations">
        <t>Before a GM contacts the GCKS, it needs to determine the group
        identifier and acceptable Phase 1 policy via an out-of-band method.
        Phase 1 is initiated using the GDOI DOI in the SA payload. Once Phase
        1 is complete, the GM state machine moves to the GDOI protocol.</t>

        <t>To construct the first GDOI message, the GM chooses Ni, creates a
        nonce payload, builds an identity payload including the group
        identifier, and generates HASH(1).</t>

        <t>Upon receipt of the second GDOI message, the GM validates HASH(2),
        extracts the nonce Nr, and interprets the SA payload (including its SA
        Attribute payloads) . The SA payload contains policy describing the
        security protocol and cryptographic protocols used by the group. This
        policy describes the Rekey SA (if present), Data-Security SAs, and
        other group policy. If the policy in the SA payload is acceptable to
        the GM, it continues the protocol. Otherwise, the GM SHOULD tear down
        the Phase 1 session after notifying the GCKS with an ISAKMP
        Informational Exchange containing a Delete payload.</t>

        <t>When constructing the third GDOI message, it first reviews each
        Data-Security SA given to it. If any describe the use of a counter
        mode cipher, the GM determines whether it requires more than one
        Sender-ID (SID) (see <xref target="Counter-modes"></xref>). If so, it
        requests the required number of Sender-IDs for its exclusive use
        within the counter mode nonce as described in <xref
        target="GAP-Payload"></xref> of this document. The GM then completes
        construction of the third GDOI message by creating HASH(3).</t>

        <t>Upon receipt of the fourth GDOI message, the GM validates
        HASH(4).</t>

        <t>If the SEQ payload is present, the sequence number included in the
        SEQ payload asserts the lowest acceptable sequence number present in a
        future GROUPKEY-PUSH message. But if the KEK associated with this
        sequence number had been previously installed, due to the asynchronous
        processing of GROUPKEY-PULL and GROUPKEY-PUSH messages, this sequence
        number may be lower than the sequence number contained in the most
        recently received GROUPKEY-PUSH message. In this case, the sequence
        number value in the SEQ payload MUST be considered stale and
        ignored.</t>

        <t>The GM interprets the KD key packets, where each key packet
        includes the keying material for SAs distributed in the SA payload.
        Keying material is matched by comparing the SPI in each key packet to
        SPI values previously sent in the SA payloads. Once TEKs and policy
        are matched, the GM provides them to the data security subsystem, and
        it is ready to send or receive packets matching the TEK policy. If
        this group has a KEK, the KEK policy and keys are marked as ready for
        use, and the GM knows to expect a sequence number not less than the
        one distributed in the SEQ payload. The GM is now ready to receive
        GROUPKEY-PUSH messages.</t>

        <t>If the KD payload included an LKH array of keys, the GM takes the
        last key in the array as the group KEK. The array is then stored
        without further processing.</t>
      </section>

      <section title="GCKS Operations">
        <t>The GCKS passively listens for incoming requests from group
        members. The Phase 1 authenticates the group member and sets up the
        secure session with them.</t>

        <t>Upon receipt of the first GDOI message, the GCKS validates HASH(1)
        and extracts the Ni and group identifier in the ID payload. It
        verifies that its database contains the group information for the
        group identifier and that the GM is authorized to participate in the
        group.</t>

        <t>The GCKS constructs the second GDOI message, including a nonce Nr,
        and the policy for the group in an SA payload, followed by SA
        Attribute payloads (i.e, SA KEK, GAP, and/or SA TEK payloads)
        according to the GCKS policy. (See <xref
        target="SA-Following-Payloads"></xref> for details on how the GCKS
        chooses which payloads to send.)</t>

        <t>Upon receipt of the third GDOI message, the GCKS validates HASH(3).
        If the message includes a GAP payload, it caches the requests included
        in that payload for the use of constructing the fourth GDOI
        message.</t>

        <t>The GCKS constructs the fourth GDOI message, including the SEQ
        payload (if the GCKS sends rekey messages), and the KD payload
        containing keys corresponding to policy previously sent in the SA TEK
        and SA KEK payloads. If a group management algorithm is defined as
        part of group policy, the GCKS will first insert the group member into
        the group management structure (e.g., a leaf in the LKH tree), and
        then create an LKH array of keys and include it in the KD payload. The
        first key in the array is associated with the group member leaf node,
        followed by each LKH node above it in the tree, culminating with the
        root node (which is also the KEK). If one or more Data-Security SAs
        distributed in the SA payload included a counter mode of operation,
        the GCKS includes at least one SID value in the KD payload, and
        possibly more depending on a request received in the third GDOI
        message.</t>
      </section>

      <section anchor="Counter-modes" title="Counter-Modes of Operation">
        <t>Several new counter-based modes of operation have been specified
        for ESP (e.g., AES-CTR <xref target="RFC3686"></xref>, AES-GCM <xref
        target="RFC4106"></xref>, AES-CCM <xref target="RFC4309"></xref>,
        AES-GMAC <xref target="RFC4543"> </xref>) and AH (e.g., AES-GMAC <xref
        target="RFC4543"></xref>). These counter-based modes require that no
        two senders in the group ever send a packet with the same
        Initialization Vector (IV) using the same cipher key and mode. This
        requirement is met in GDOI when the following requirements are
        met:</t>

        <t><list style="symbols">
            <t>The GCKS distributes a unique key for each Data-Security
            SA.</t>

            <t>The GCKS uses the method described in <xref
            target="RFC6054"></xref>, which assigns each sender a portion of
            the IV space by provisioning each sender with one or more unique
            SID values.</t>
          </list></t>

        <t>When at least one Data-Security SA included in the group policy
        includes a counter-mode, the GCKS automatically allocates and
        distributes one SID to each group member acting in the role of sender
        on the Data-Security SA. The SID value is used exclusively by the
        group member to which it was allocated. The group member uses the same
        SID for each Data-Security SA specifying the use of a counter-based
        mode of operation. A GCKS MUST distribute unique keys for each
        Data-Security SA including a counter-based mode of operation in order
        to maintain a unique key and nonce usage.</t>

        <t>When a group member receives a Data-Security SA in a SA TEK payload
        for which it is a sender, it can choose to request one or more SID
        values. Requesting a value of 1 is not necessary since the GCKS will
        automatically allocate exactly one to the sending group member. A
        group member MUST request as many SIDs matching the number of
        encryption modules in which it will be installing the TEKs in the
        outbound direction. Alternatively, a group member MAY request more
        than one SID and use them serially. This could be useful when it is
        anticipated that the group member will exhaust their range of
        Data-Security SA nonces using a single SID too quickly (e.g., before
        the time-based policy in the TEK expires).</t>

        <t>When group policy includes a counter-based mode of operation, a
        GCKS SHOULD use the following method to allocate SID values, which
        ensures that each SID will be allocated to just one group member.</t>

        <t><list style="numbers">
            <t>A GCKS maintains a SID-counter, which records which SIDs have
            been allocated. SIDs are allocated sequentially, with the first
            SID allocated to be zero.</t>

            <t>Each time a SID is allocated, the current value of the counter
            is saved and allocated to the group member. The SID-counter is
            then incremented in preparation for the next allocation.</t>

            <t>When the GCKS distributes a Data-Security SA specifying a
            counter-based mode of operation, and a group member is a sender, a
            group member may request a count of SIDs in a GAP payload. When
            the GCKS receives this request, it increments the SID-counter once
            for each requested SID, and distributes each SID value to the
            group member.</t>

            <t>A GCKS allocates new SID values for each GROUPKEY-PULL exchange
            originated by a sender, regardless of whether a group member had
            previously contacted the GCKS. In this way, the GCKS does not have
            a requirement of maintaining a record of which SID values it had
            previously allocated to each group member. More importantly, since
            the GCKS cannot reliably detect whether the group member had sent
            data on the current group Data-Security SAs, it does not know
            which Data-Security counter-mode nonce values a group member has
            used. By distributing new SID values, the key server ensures that
            each time a conforming group member installs a Data-Security SA it
            will use a unique set of counter-based mode nonces.</t>

            <t>When the SID-counter maintained by the GCKS reaches its final
            SID value, no more SID values can be distributed. Before
            distributing any new SID values, the GCKS MUST delete the
            Data-Security SAs for the group, followed by creation of new
            Data-Security SAs, and resetting the SID-counter to its initial
            value.</t>

            <t>The GCKS SHOULD send a GROUPKEY-PUSH message deleting all
            Data-Security SAs and the Rekey SA for the group. This will result
            in the group members initiating a new GROUPKEY-PULL exchange, in
            which they will receive both new SID values and new Data-Security
            SAs. The new SID values can safely be used because they are only
            used with the new Data-Security SAs. Note that deletion of the
            Rekey SA is necessary to ensure that group members receiving a
            GROUPKEY-PUSH exchange before the re-register do not inadvertently
            use their old SIDs with the new Data-Security SAs.</t>
          </list>Using the method above, at no time can two group members use
        the same IV values with the same Data-Security SA key.</t>
      </section>
    </section>

    <section title="GROUPKEY-PUSH Message">
      <t>GDOI sends control information securely using group communications.
      Typically, this will be using IP multicast distribution of a
      GROUPKEY-PUSH message, but it can also be "pushed" using unicast
      delivery if IP multicast is not possible. The GROUPKEY-PUSH message
      replaces a Rekey SA KEK or KEK array, and/or it creates a new
      Data-Security SA. <figure align="center" suppress-title="false"
          title="Figure 3. GROUPKEY-PUSH Message">
          <preamble></preamble>

          <artwork><![CDATA[GM                    GCKS
--                    ----
                      <---- HDR*, SEQ, [D,] SA, KD, SIG
  
* Protected by the Rekey SA KEK; encryption occurs after HDR
]]></artwork>

          <postamble></postamble>
        </figure></t>

      <t>HDR is defined below. The SEQ payload is defined in <xref
      target="payloads"></xref> ("Payloads"). One or more D (Delete) payloads
      (further described in <xref target="Delete"></xref>) optionally specify
      the deletion of existing group policy. The SA defines the group policy
      for replacement Rekey SA and/or Data-Security SAs as described in <xref
      target="payloads"></xref>, with the KD providing keying material for
      those SAs.</t>

      <t>The SIG payload includes a signature of a hash of the entire
      GROUPKEY-PUSH message (excepting the SIG payload octets) before it has
      been encrypted. The HASH is taken over the string 'rekey', the
      GROUPKEY-PUSH HDR, followed by all payloads preceding the SIG payload.
      The prefixed string ensures that the signature of the Rekey datagram
      cannot be used for any other purpose in the GDOI protocol. The SIG
      payload is created using the signature of the above hash, with the
      receiver verifying the signature using a public key retrieved in a
      previous GDOI exchange. The current KEK (also previously distributed in
      a GROUPKEY-PULL exchange or GROUPKEY-PUSH message) encrypts all the
      payloads following the GROUPKEY-PUSH HDR. Note: The rationale for this
      order of operations is given in <xref target="PUSH-DoS"></xref>.</t>

      <t>If the SA defines the use of a single KEK or an LKH KEK array, KD
      MUST contain a corresponding KEK or KEK array for a new Rekey SA, which
      has a new cookie pair. When the KD payload carries a new SA KEK
      attribute (<xref target="SAK"></xref>), a Rekey SA is replaced with a
      new SA having the same group identifier (ID specified in message 1 of
      <xref target="messages"></xref>) and incrementing the same sequence
      counter, which is initialized in message 4 of <xref
      target="messages"></xref>. Note the first packet for the given Rekey SA
      encrypted with the new KEK attribute will have a Sequence number of 1.
      If the SA defines an SA TEK payload, this informs the member that a new
      Data-Security SA has been created, with keying material carried in KD
      (<xref target="KD-Payload"></xref>).</t>

      <t>If the SA defines a large LKH KEK array (e.g., during group
      initialization and batched rekeying), parts of the array MAY be sent in
      different unique GROUPKEY-PUSH datagrams. However, each of the
      GROUPKEY-PUSH datagrams MUST be a fully formed GROUPKEY-PUSH datagram.
      This results in each datagram containing a sequence number and the
      policy in the SA payload, which corresponds to the KEK array portion
      sent in the KD payload.</t>

      <section title="Use of Signature Keys">
        <t>A signing key should not be used in more than one context (e.g.,
        used for host authentication and also for message authentication).
        Thus, the GCKS SHOULD NOT use the same key to sign the SIG payload in
        the GROUPKEY-PUSH message as was used for authentication in the
        GROUPKEY-PULL exchange.</t>
      </section>

      <section title="ISAKMP Header Initialization">
        <t>Unlike ISAKMP, the cookie pair is completely determined by the
        GCKS. The cookie pair in the GDOI ISAKMP header identifies the Rekey
        SA to differentiate the secure groups managed by a GCKS. Thus, GDOI
        uses the cookie fields as an SPI.</t>

        <t>Next Payload identifies an ISAKMP or GDOI payload (see <xref
        target="payloads"></xref>).</t>

        <t>Major Version is 1 and Minor Version is 0 according to ISAKMP
        (Section 3.1 of <xref target="RFC2408"></xref>).</t>

        <t>The Exchange Type has value 33 for the GDOI GROUPKEY-PUSH
        message.</t>

        <t>Flags MUST have the Encryption bit set according to Section 3.1 of
        <xref target="RFC2408"></xref>. All other bits MUST be set to
        zero.</t>

        <t>Message ID MUST be set to zero.</t>

        <t>Length is according to ISAKMP (Section 3.1 of <xref
        target="RFC2408"></xref>).</t>
      </section>

      <section title="GCKS Operations">
        <t>GCKS may initiate a Rekey message for one of several reasons, e.g.,
        the group membership has changed or keys are due to expire.</t>

        <t>To begin the rekey datagram, the GCKS builds an ISAKMP HDR with the
        correct cookie pair, and a SEQ payload that includes a sequence number
        that is 1 greater than the previous rekey datagram. If the message is
        using the new KEK attribute for the first time, the SEQ is reset to 1
        in this message.</t>

        <t>An SA payload is then added. This is identical in structure and
        meaning to an SA payload sent in a GROUPKEY-PULL exchange. If there
        are changes to the KEK (including due to group members being excluded,
        in the case of LKH), an SA_KEK attribute is added to the SA. If there
        are one or more new TEKs, then SA_TEK attributes are added to describe
        that policy.</t>

        <t>A KD payload is then added. This is identical in structure and
        meaning to a KD payload sent in a GROUPKEY-PULL exchange. If an SA_KEK
        attribute was included in the SA payload, then corresponding KEKs (or
        a KEK update array) are included. A KEK update array is created by
        first determining which group members have been excluded, generating
        new keys as necessary, and then distributing LKH update arrays
        sufficient to provide the new KEK to remaining group members (see
        Section 5.4.1 of <xref target="RFC2627"></xref> for details). TEKs are
        also sent for each SA_TEK attribute included in the SA payload.</t>

        <t>In the penultimate step, the GCKS creates the SIG payload and adds
        it to the datagram.</t>

        <t>Lastly, the payloads following the HDR are encrypted using the
        current KEK. The datagram can now be sent.</t>
      </section>

      <section title="Group Member Operations">
        <t>A group member receiving the GROUPKEY-PUSH datagram matches the
        cookie pair in the ISAKMP HDR to an existing SA. The message is
        decrypted, and the form of the datagram is validated. This weeds out
        obvious ill-formed messages (which may be sent as part of a
        denial-of-service attack on the group).</t>

        <t>The sequence number in the SEQ payload is validated to ensure that
        it is greater than the previously received sequence number. The SIG
        payload is then validated. If the signature fails, the message is
        discarded.</t>

        <t>The SA and KD payloads are processed, which results in a new GDOI
        Rekey SA (if the SA payload included an SA_KEK attribute) and/or new
        Data-Security SAs being added to the system. If the KD payload
        includes an LKH update array, the group member compares the LKH ID in
        each key update packet to the LKH IDs that it holds. If it finds a
        match, it decrypts the key using the key prior to it in the key array
        and stores the new key in the LKH key array that it holds. The final
        decryption yields the new group KEK.</t>

        <t>If the SA payload includes one or more Data-Security SAs including
        a counter-mode of operation and if the receiving group member is a
        sender for that SA, the group member uses its current SID value with
        the Data-Security SAs to create counter-mode nonces. If it is a sender
        and does not hold a current SID value, it MUST NOT install the
        Data-Security SAs. It MAY initiate a GROUPKEY-PULL exchange to the
        GCKS in order to obtain a SID value (along with current group
        policy).</t>
      </section>
    </section>

    <section anchor="payloads" title="Payloads and Defined Values">
      <t>This document specifies use of several ISAKMP payloads, which are
      defined in accordance with <xref target="RFC2408"></xref>. The following
      payloads are used as defined in <xref target="RFC2408"></xref>.</t>

      <figure>
        <preamble></preamble>

        <artwork><![CDATA[               Next Payload Type            Value
               -----------------            -----
               Hash Payload (HASH)            8
               Signature (SIG)                9
]]></artwork>

        <postamble></postamble>
      </figure>

      <t>The following payloads are extended or further specified. <figure>
          <preamble></preamble>

          <artwork><![CDATA[               Next Payload Type            Value
               -----------------            -----
               Security Association (SA)      1
               Identification (ID)            5
               Nonce (N)                     10
               Delete (D)                    12
]]></artwork>

          <postamble></postamble>
        </figure></t>

      <t>Several payload formats specific to the group security exchanges are
      required. <figure>
          <preamble></preamble>

          <artwork><![CDATA[               Next Payload Type                Value
               -----------------                -----
               SA KEK (SAK)                      15
               SA TEK (SAT)                      16
               Key Download (KD)                 17
               Sequence Number (SEQ)             18
               Group Associated Policy (GAP)     22
]]></artwork>

          <!-- [rfced] The table includes the following:

        SA KEK Payload (SAK)              15
        SA TEK Payload (SAT)              16

As "Payload" is not part of the abbreviation, perhaps these should appear as 
(similar to the other items in the list): 

        SA KEK (SAK)              15
        SA TEK (SAT)              16

Please let us know if any updates should be made. 
-->

          <postamble></postamble>
        </figure></t>

      <t>All multi-octet fields in GDOI payloads representing integers are
      laid out in big endian order (also known as "most significant byte
      first" or "network byte order").</t>

      <t>All payloads including an ISAKMP Generic Payload Header create a
      Payload Length field that includes the length of the generic payload
      header (Section 3.2 of <xref target="RFC2408"></xref>).</t>

      <section title="Identification Payload">
        <t>The Identification payload is defined in <xref
        target="RFC2408"></xref>. For the GDOI, it is used to identify a group
        identity that will later be associated with security associations for
        the group. A group identity may map to a specific IPv4 or IPv6
        multicast address, or may specify a more general identifier, such as
        one that represents a set of related multicast streams.</t>

        <t>When used with the GDOI, the DOI-Specific ID Data field MUST be set
        to 0.</t>

        <t>When used with the GDOI, the ID_KEY_ID ID Type MUST be supported by
        a conforming implementation and MUST specify a 4-octet group
        identifier as its value. Implementations MAY also support other ID
        Types.</t>
      </section>

      <section anchor="SA-Payload" title="Security Association Payload">
        <t>The Security Association payload is defined in <xref
        target="RFC2408"></xref>. For the GDOI, it is used by the GCKS to
        assert security attributes for both Rekey and Data-Security SAs.
        <figure title="Figure 4. Security Association Payload">
            <preamble></preamble>

            <artwork><![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   ! Next Payload  !   RESERVED    !         Payload Length        !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   !                              DOI                              !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   !                           Situation                           !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   ! SA Attribute Next Payload     !          RESERVED2            !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
]]></artwork>

            <postamble></postamble>
          </figure> The Security Association payload fields are defined as
        follows:</t>

        <t><list style="symbols">
            <t>Next Payload (1 octet) -- Identifies the next payload for the
            GROUPKEY-PULL or the GROUPKEY-PUSH message as defined above. The
            next payload MUST NOT be an SA Attribute payload; it MUST be the
            next payload following the Security Association type payload.</t>

            <t>RESERVED (1 octet) -- MUST be zero.</t>

            <t>Payload Length (2 octets) -- Is the octet length of the current
            payload including the generic header and all TEK and KEK
            payloads.</t>

            <t>DOI (4 octets) -- Is the GDOI, which is value 2.</t>

            <t>Situation (4 octets) -- MUST be zero.</t>

            <t>SA Attribute Next Payload (2 octets) -- MUST be the code for an
            SA Attribute payload type. See <xref
            target="SA-Following-Payloads"></xref> for a description of which
            circumstances are required for each payload type to be
            present.</t>

            <t>RESERVED (2 octets) -- MUST be zero.</t>
          </list></t>

        <section anchor="SA-Following-Payloads" title="SA Attribute Payloads">
          <t>Payloads that define specific security association attributes for
          the KEK and/or TEKs used by the group MUST follow the SA payload.
          How many of each payload is dependent upon the group policy. There
          may be zero or one SAK payload, zero or one GAP payload, and zero or
          more SAT payloads, where either one SAK or SAT payload MUST be
          present. When present, the order of the SA Attribute payloads MUST
          be: SAK, GAP, and SATs.</t>

          <t>This latitude regarding SA Attribute payloads allows various
          group policies to be accommodated. For example, if the group policy
          does not require the use of a Rekey SA, the GCKS would not need to
          send an SA KEK attribute to the group member since all SA updates
          would be performed using the Registration SA. Alternatively, group
          policy might use a Rekey SA but choose to download a KEK to the
          group member only as part of the Registration SA. Therefore, the KEK
          policy (in the SA KEK attribute) would not be necessary as part of
          the Rekey SA message SA payload.</t>

          <t>Specifying multiple SATs allows multiple sessions to be part of
          the same group and multiple streams to be associated with a session
          (e.g., video, audio, and text) but each with individual security
          association policy.</t>

          <t>A GAP payload allows for the distribution of group-wide policy,
          such as instructions as to when to activate and deactivate SAs.</t>
        </section>
      </section>

      <section anchor="SAK" title="SA KEK Payload">
        <t>The SA KEK (SAK) payload contains security attributes for the KEK
        method for a group and parameters specific to the GROUPKEY-PULL
        operation. The source and destination identities describe the
        identities used for the GROUPKEY-PULL datagram. <figure
            title="Figure 5. SA KEK Payload">
            <preamble></preamble>

            <artwork><![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   ! Next Payload  !   RESERVED    !         Payload Length        !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   !    Protocol   !  SRC ID Type  !         SRC ID Port           !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   !SRC ID Data Len!          SRC Identification Data              ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   ! DST ID Type   !         DST ID Port           !DST ID Data Len!
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   !                    DST Identification Data                    ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   !                                                               !
   ~                              SPI                              ~
   !                                                               !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   !                           RESERVED2                           !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   ~                        KEK Attributes                         ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
]]></artwork>

            <postamble></postamble>
          </figure> The SAK payload fields are defined as follows:</t>

        <t><list style="symbols">
            <t>Next Payload (1 octet) -- Identifies the next payload for the
            GROUPKEY-PULL or the GROUPKEY-PUSH message. The only valid next
            payload types for this message are a GAP payload, SAT payload, or
            zero to indicate that no SA Attribute payloads follow.</t>

            <t>RESERVED (1 octet) -- MUST be zero.</t>

            <t>Payload Length (2 octets) -- Length of this payload, including
            the KEK attributes.</t>

            <t>Protocol (1 octet) -- Value describing an IP protocol ID (e.g.,
            UDP/TCP) <xref target="PROT-REG"/> for the GROUPKEY-PUSH datagram.</t>

            <t>SRC ID Type (1 octet) -- Value describing the identity
            information found in the SRC Identification Data field. Defined
            values are specified by the IPsec Identification Type section in
            the IANA ISAKMP registry <xref target="ISAKMP-REG"></xref>.</t>

            <t>SRC ID Port (2 octets) -- Value specifying a port associated
            with the source ID. A value of zero means that the SRC ID Port
            field MUST be ignored.</t>

            <t>SRC ID Data Len (1 octet) -- Value specifying the length (in
            octets) of the SRC Identification Data field.</t>

            <t>SRC Identification Data (variable length) -- Value, as
            indicated by the SRC ID Type.</t>

            <t>DST ID Type (1 octet) -- Value describing the identity
            information found in the DST Identification Data field. Defined
            values are specified by the IPsec Identification Type section in
            the IANA ISAKMP registry <xref target="ISAKMP-REG"></xref>.</t>

            <t>DST ID Prot (1 octet) -- Value describing an IP protocol ID
            (e.g., UDP/TCP) <xref target="PROT-REG"></xref>.</t>

            <t>DST ID Port (2 octets) -- Value specifying a port associated
            with the source ID.</t>

            <t>DST ID Data Len (1 octet) -- Value specifying the length (in
            octets) of the DST Identification Data field.</t>

            <t>DST Identification Data (variable length) -- Value, as
            indicated by the DST ID Type.</t>

            <t>SPI (16 octets) -- Security Parameter Index for the KEK. The
            SPI is the ISAKMP Header cookie pair where the first 8 octets
            become the "Initiator Cookie" field of the GROUPKEY-PUSH message
            ISAKMP HDR, and the second 8 octets become the "Responder Cookie"
            in the same HDR. As described above, these cookies are assigned by
            the GCKS.</t>

            <t>RESERVED2 (4 octets) -- MUST be zero. These octets represent
            fields previously defined but no longer used by GDOI.</t>

            <t>KEK Attributes -- Contains KEK policy attributes associated
            with the group. The following attributes may be present in a SAK
            payload. The attributes must follow the format defined in ISAKMP
            (Section 3.3 of <xref target="RFC2408"></xref>). In the table,
            attributes that are defined as TV are marked as Basic (B);
            attributes that are defined as TLV are marked as Variable (V).
            <figure>
                <preamble></preamble>

                <artwork><![CDATA[
             ID Class                   Value    Type
             --------                   -----    ----
             RESERVED                     0
             KEK_MANAGEMENT_ALGORITHM     1        B
             KEK_ALGORITHM                2        B
             KEK_KEY_LENGTH               3        B
             KEK_KEY_LIFETIME             4        V
             SIG_HASH_ALGORITHM           5        B
             SIG_ALGORITHM                6        B
             SIG_KEY_LENGTH               7        B
             RESERVED                     8        B
             Unassigned                  9-127
             Private Use               128-255
             Unassigned                256-32767
]]></artwork>

                <postamble></postamble>
              </figure> The KEK_ALGORITHM and SIG_ALGORITHM attributes MUST be
            included; others are OPTIONAL and are included depending on group
            policy. The KEK_MANAGEMENT_ALGORITHM attribute MUST NOT be
            included in a GROUPKEY-PULL message, and MUST be ignored if
            present.</t>
          </list></t>

        <section title="KEK_MANAGEMENT_ALGORITHM">
          <t>The KEK_MANAGEMENT_ALGORITHM class specifies the group KEK
          management algorithm used to provide forward or backward access
          control (i.e., used to exclude group members). Defined values are
          specified in the following table. <figure>
              <preamble></preamble>

              <artwork><![CDATA[
               KEK Management Type               Value
               -------------------               -----
               Reserved                            0
               LKH                                 1
               Unassigned                         2-127
               Private Use                      128-255
               Unassigned                       256-65535
]]></artwork>

              <postamble></postamble>
            </figure></t>

          <section title="LKH">
            <t>This type indicates the group management method described in
            Section 5.4 of <xref target="RFC2627"></xref>. A general
            discussion of LKH operations can also be found in Section 6.3 of
            "Multicast and Group Security" <xref target="HD03"></xref></t>
          </section>
        </section>

        <section title="KEK_ALGORITHM">
          <t>The KEK_ALGORITHM class specifies the encryption algorithm in
          which the KEK is used to provide confidentiality for the
          GROUPKEY-PUSH message. Defined values are specified in the following
          table. A GDOI implementation MUST abort if it encounters an
          attribute or capability that it does not understand.<figure>
              <preamble></preamble>

              <artwork><![CDATA[
                Algorithm Type      Value
                --------------      -----
                RESERVED               0
                KEK_ALG_DES            1
                KEK_ALG_3DES           2
                KEK_ALG_AES            3
                Unassigned            4-127
                Private Use         128-255
                Unassigned          256-32767
]]></artwork>

              <postamble></postamble>
            </figure>If a KEK_MANAGEMENT_ALGORITHM is defined that specifies
          multiple keys (e.g., LKH), and if the management algorithm does not
          specify the algorithm for those keys, then the algorithm defined by
          the KEK_ALGORITHM attribute MUST be used for all keys that are
          included as part of the management.</t>

          <section title="KEK_ALG_DES">
            <t>This type specifies DES using the Cipher Block Chaining (CBC)
            mode as described in <xref target="FIPS81"></xref>.</t>
          </section>

          <section title="KEK_ALG_3DES">
            <t>This type specifies 3DES using three independent keys as
            described in "Keying Option 1" in <xref
            target="FIPS46-3"></xref>.</t>
          </section>

          <section title="KEK_ALG_AES">
            <t>This type specifies AES as described in <xref
            target="FIPS197"></xref>. The mode of operation for AES is CBC as
            defined in <xref target="SP.800-38A"></xref>.</t>
          </section>
        </section>

        <section title="KEK_KEY_LENGTH">
          <t>The KEK_KEY_LENGTH class specifies the KEK Algorithm key length
          (in bits). The Group Controller/Key Server (GCKS) adds the
          KEK_KEY_LENGTH attribute to the SA payload when distributing KEK
          policy to group members. The group member verifies whether or not it
          has the capability of using a cipher key of that size. If the cipher
          definition includes a fixed key length (e.g., KEK_ALG_3DES), the
          group member can make its decision solely using the KEK_ALGORITHM
          attribute and does not need the KEK_KEY_LENGTH attribute. Sending
          the KEK_KEY_LENGTH attribute in the SA payload is OPTIONAL if the
          KEK cipher has a fixed key length. Also, note that the KEK_KEY_LEN
          includes only the actual length of the cipher key (the IV length is
          not included in this attribute).</t>
        </section>

        <section title="KEK_KEY_LIFETIME">
          <t>The KEK_KEY_LIFETIME class specifies the maximum time for which
          the KEK is valid. The GCKS may refresh the KEK at any time before
          the end of the valid period. The value is a 4-octet number defining
          a valid time period in seconds.</t>
        </section>

        <section title="SIG_HASH_ALGORITHM">
          <t>SIG_HASH_ALGORITHM specifies the SIG payload hash algorithm. The
          following table defines the algorithms for SIG_HASH_ALGORITHM.</t>

          <t><figure>
              <preamble></preamble>

              <artwork><![CDATA[
                Algorithm Type     Value
                --------------     -----
                Reserved             0
                SIG_HASH_MD5         1
                SIG_HASH_SHA1        2
                SIG_HASH_SHA256      3
                SIG_HASH_SHA384      4
                SIG_HASH_SHA512      5
                Unassigned          6-127
                Private Use       128-255
                Unassigned        256-65535]]></artwork>

              <postamble></postamble>
            </figure>The SHA hash algorithms are defined in the Secure Hash
          Standard <xref target="FIPS180-3.2008"></xref>.</t>

          <t>If the SIG_ALGORITHM is SIG_ALG_ECDSA-256, SIG_ALG_ECDSA-384, or
          SIG_ALG_ECDSA-521, the hash algorithm is implicit in the definition,
          and SIG_HASH_ALGORITHM is OPTIONAL in a SAK payload.</t>
        </section>

        <section title="SIG_ALGORITHM">
          <t>The SIG_ALGORITHM class specifies the SIG payload signature
          algorithm. Defined values are specified in the following table.
          <figure>
              <preamble></preamble>

              <artwork><![CDATA[
                Algorithm Type      Value
                --------------      -----
                Reserved              0
                SIG_ALG_RSA           1
                SIG_ALG_DSS           2
                SIG_ALG_ECDSS         3
                SIG_ALG_ECDSA-256     4
                SIG_ALG_ECDSA-384     5
                SIG_ALG_ECDSA-521     6
                Unassigned           7-127
                Private Use        128-255
                Unassigned         256-65535
]]></artwork>

              <postamble></postamble>
            </figure></t>

          <section title="SIG_ALG_RSA">
            <t>This algorithm specifies the RSA digital signature algorithm
            using the EMSA-PKCS1-v1_5 encoding method, as described in <xref
            target="RFC3447"></xref>.</t>
          </section>

          <section title="SIG_ALG_DSS">
            <t>This algorithm specifies the DSS digital signature algorithm as
            described in Section 4 of <xref target="FIPS186-3"></xref>.</t>
          </section>

          <section title="SIG_ALG_ECDSS">
            <t>This algorithm specifies the Elliptic Curve Digital Signature
            Algorithm as described in Section 5 of <xref
            target="FIPS186-3"></xref>. This definition is deprecated in favor
            of the SIG_ALG_ECDSA family of algorithms.</t>
          </section>

          <section title="SIG_ALG_ECDSA-256">
            <t>This algorithm specifies the 256-bit Random ECP Group, as
            described in <xref target="RFC5903"></xref>. The format of the
            signature in the SIG payload MUST be as specified in <xref
            target="RFC4754"></xref>.</t>
          </section>

          <section title="SIG_ALG_ECDSA-384">
            <t>This algorithm specifies the 384-bit Random ECP Group, as
            described in <xref target="RFC5903"></xref>. The format of the
            signature in the SIG payload MUST be as specified in <xref
            target="RFC4754"></xref>.</t>
          </section>

          <section title="SIG_ALG_ECDSA-521">
            <t>This algorithm specifies the 521-bit Random ECP Group, as
            described in <xref target="RFC5903"></xref>. The format of the
            signature in the SIG payload MUST be as specified in <xref
            target="RFC4754"></xref>.</t>
          </section>
        </section>

        <section title="SIG_KEY_LENGTH">
          <t>The SIG_KEY_LENGTH class specifies the length of the SIG payload
          key in bits.</t>
        </section>
      </section>

      <section anchor="GAP-Payload" title="Group Associated Policy">
        <t>A GCKS may have group-specific policy that is not distributed in an
        SA TEK or SA KEK. Some of this policy is relevant to all group
        members, and some is sender-specific policy for a particular group
        member. The former can be distributed in either a GROUPKEY-PULL or
        GROUPKEY-PUSH exchange, whereas the latter MUST only be sent in a
        GROUPKEY-PULL exchange. Additionally, a group member sometimes has the
        need to make policy requests for resources of the GCKS in a
        GROUPKEY-PULL exchange. GDOI distributes this associated group policy
        and the policy requests in the Group Associated Policy (GAP)
        payload.</t>

        <t>The GAP payload can be distributed by the GCKS as part of the SA
        payload. It follows any SA KEK payload and is placed before any SA TEK
        payloads. In the case that group policy does not include an SA KEK,
        the SA Attribute Next Payload field in the SA payload MAY indicate the
        GAP payload.</t>

        <t>The GAP payload can be optionally included by a group member in
        message 3 of the GROUPKEY-PULL exchange in order to make policy
        requests.</t>

        <t>The GAP payload is defined as follows:</t>

        <t><figure title="Figure 6. GAP Payload">
            <artwork><![CDATA[     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
    ! Next Payload  !   RESERVED    !        Payload Length         !
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
    !               Group Associated Policy Attributes              ~
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
]]></artwork>
          </figure></t>

        <t>The GAP payload fields are defined as follows: <list
            style="symbols">
            <t>Next Payload (1 octet) -- Identifies the next payload present
            in the GROUPKEY-PULL or the GROUPKEY-PUSH message. The only valid
            next payload type for this message is an SA TEK or zero to
            indicate there are no more security association attributes.</t>

            <t>RESERVED (1 octet) -- MUST be zero.</t>

            <t>Payload Length (2 octets) -- Length of this payload, including
            the GAP header and Attributes.</t>

            <t>Group Associated Policy Attributes (variable) -- Contains
            attributes following the format defined in Section 3.3 of <xref
            target="RFC2408"></xref>. In the table, attributes that are
            defined as TV are marked as Basic (B); attributes that are defined
            as TLV are marked as Variable (V). <figure>
                <artwork><![CDATA[
           Attribute Type         Value       Type
           --------------         -----       ----
           RESERVED                 0
           ACTIVATION_TIME_DELAY    1          B
           DEACTIVATION_TIME_DELAY  2          B
           SENDER_ID_REQUEST        3          B
           Unassigned              4-127
           Private Use           128-255
           Unassigned            256-32767
 ]]></artwork>

                <postamble></postamble>
              </figure></t>
          </list></t>

        <t>Several group associated policy attributes are defined in this
        memo. A GDOI implementation MUST abort if it encounters an attribute
        or capability that it does not understand. The values for these
        attributes are included in the IANA Considerations section of this
        memo.</t>

        <section title="ACTIVATION_TIME_DELAY/DEACTIVATION_TIME_DELAY">
          <t>Section 4.2.1 of <xref target="RFC5374"></xref> specifies a key
          rollover method that requires two values be given it from the group
          key management protocol. The ACTIVATION_TIME_DELAY attribute allows
          a GCKS to set the Activation Time Delay (ATD) for SAs generated from
          TEKs. The ATD defines how long after receiving new SAs that they are
          to be activated by the GM. The ATD value is in seconds.</t>

          <t>The DEACTIVATION_TIME_DELAY allows the GCKS to set the
          Deactivation Time Delay (DTD) for previously distributed SAs. The
          DTD defines how long after receiving new SAs that it SHOULD
          deactivate SAs that are destroyed by the rekey event. The value is
          in seconds.</t>

          <t>The values of ATD and DTD are independent. However, the most
          effective policy will have the DTD value be the larger value, as
          this allows new SAs to be activated before older SAs are
          deactivated. Such a policy ensures that protected group traffic will
          always flow without interruption.</t>
        </section>

        <section title="SENDER_ID_REQUEST">
          <t>The SENDER_ID_REQUEST attribute is used by a group member to
          request SIDs during the GROUPKEY-PULL message, and includes a count
          of how many SID values it desires.</t>
        </section>
      </section>

      <section anchor="TEK-Payload" title="SA TEK Payload">
        <t>The SA TEK (SAT) payload contains security attributes for a single
        TEK associated with a group. <figure title="Figure 7. SA TEK Payload">
            <preamble></preamble>

            <artwork><![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   ! Next Payload  !   RESERVED    !         Payload Length        !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   ! Protocol-ID   !       TEK Protocol-Specific Payload           ~
   +-+-+-+-+-+-+-+-+                                               ~
   ~                                                               ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
]]></artwork>

            <postamble></postamble>
          </figure></t>

        <t>The SAT payload fields are defined as follows: <list
            style="symbols">
            <t>Next Payload (1 octet) -- Identifies the next payload for the
            GROUPKEY-PULL or the GROUPKEY-PUSH message. The only valid next
            payload types for this message are another SAT payload or zero to
            indicate there are no more security association attributes.</t>

            <t>RESERVED (1 octet) -- MUST be zero.</t>

            <t>Payload Length (2 octets) -- Length of this payload, including
            the TEK Protocol-Specific Payload.</t>

            <t>Protocol-ID (1 octet) -- Value specifying the Security
            Protocol. The following table defines values for the Security
            Protocol. <figure>
                <preamble></preamble>

                <artwork><![CDATA[
          Protocol ID                       Value
          -----------                       -----
          RESERVED                            0
          GDOI_PROTO_IPSEC_ESP                1
          GDOI_PROTO_IPSEC_AH                 2
          Unassigned                         3-127
          Private Use                      128-255
]]></artwork>

                <postamble></postamble>
              </figure></t>

            <t>TEK Protocol-Specific Payload (variable) -- Payload which
            describes the attributes specific for the Protocol-ID.</t>
          </list></t>

        <section anchor="PROTO_IPSEC_ESP"
                 title="GDOI_PROTO_IPSEC_ESP/GDOI_PROTO_IPSEC_AH">
          <t>The TEK Protocol-Specific payload for ESP and AH is as follows:
          <figure title="Figure 8. ESP/AH TEK Payload">
              <preamble></preamble>

              <artwork><![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   !    Protocol   !  SRC ID Type  !         SRC ID Port           !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   !SRC ID Data Len!          SRC Identification Data              ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   ! DST ID Type   !         DST ID Port           !DST ID Data Len!
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   ! DST Identification Data                                       ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   ! Transform ID  !                        SPI                    !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   !      SPI      !       RFC 2407 SA Attributes                  ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
]]></artwork>

              <postamble></postamble>
            </figure></t>

          <t>The SAT payload fields are defined as follows: <list
              style="symbols">
              <t>Protocol (1 octet) -- Value describing an IP protocol ID
              (e.g., UDP/TCP) <xref target="PROT-REG"></xref>. A value of
              zero means that the Protocol field MUST be ignored.</t>

              <t>SRC ID Type (1 octet) -- Value describing the identity
              information found in the SRC Identification Data field. Defined
              values are specified by the IPsec Identification Type section in
              the IANA ISAKMP registry <xref target="ISAKMP-REG"></xref>.</t>

              <t>SRC ID Port (2 octets) -- Value specifying a port associated
              with the source ID. A value of zero means that the SRC ID Port
              field MUST be ignored.</t>

              <t>SRC ID Data Len (1 octet) -- Value specifying the length (in
              octets) of the SRC Identification Data field.</t>

              <t>SRC Identification Data (variable length) -- Value, as
              indicated by the SRC ID Type. Set to 3 octets or zero for
              multiple-source multicast groups that use a common TEK for all
              senders.</t>

              <t>DST ID Type (1 octet) -- Value describing the identity
              information found in the DST Identification Data field. Defined
              values are specified by the IPsec Identification Type section in
              the IANA ISAKMP registry <xref target="ISAKMP-REG"></xref>.</t>

              <t>DST ID Prot (1 octet) -- Value describing an IP protocol ID
              (e.g., UDP/TCP) <xref target="PROT-REG"></xref>. A value of
              zero means that the DST ID Prot field MUST be ignored.</t>

              <t>DST ID Port (2 octets) -- Value specifying a port associated
              with the source ID. A value of zero means that the DST ID Port
              field MUST be ignored.</t>

              <t>DST ID Data Len (1 octet) -- Value specifying the length (in
              octets) of the DST Identification Data field.</t>

              <t>DST Identification Data (variable length) -- Value, as
              indicated by the DST ID Type.</t>

              <t>Transform ID (1 octet) -- Value specifying which ESP or AH
              transform is to be used. The list of valid values is defined in
              the IPsec ESP or IPsec AH Transform Identifiers section of the
              IANA ISAKMP registry <xref target="ISAKMP-REG"></xref>.</t>

              <t>SPI (4 octets) -- Security Parameter Index for ESP.</t>

              <t>RFC 2407 Attributes -- ESP and AH Attributes from Section 4.5
              of <xref target="RFC2407"></xref>. The GDOI supports all IPsec
              DOI SA Attributes for GDOI_PROTO_IPSEC_ESP and
              GDOI_PROTO_IPSEC_AH, excluding the Group Description (Section
              4.5 of <xref target="RFC2407"></xref>), which MUST NOT be sent
              by a GDOI implementation and is ignored by a GDOI implementation
              if received. The following attributes MUST be supported by an
              implementation supporting ESP and AH: SA Life Type, SA Life
              Duration, and Encapsulation Mode. An implementation supporting
              ESP MUST also support the Authentication Algorithm attribute if
              the ESP transform includes authentication. The Authentication
              Algorithm attribute of the IPsec DOI is group authentication in
              GDOI.</t>
            </list></t>

          <section title="New IPsec Security Association Attributes">
            <t>"Multicast Extensions to the Security Architecture for the
            Internet Protocol" (RFC 5374) introduces new requirements for a
            group key management system distributing IPsec policy. It also
            defines new attributes as part of the Group Security Policy
            Database (GSPD). These attributes describe policy that a group key
            management system must convey to a group member in order to
            support those extensions. The GDOI SA TEK payload distributes
            IPsec policy using IPsec security association attributes defined
            in <xref target="ISAKMP-REG"></xref>. This section defines how
            GDOI can convey the new attributes as IPsec Security Association
            Attributes.</t>

            <section title="Address Preservation">
              <t>Applications use the extensions in <xref
              target="RFC5374"></xref> to copy the IP addresses into the outer
              IP header when encapsulating an IP packet as an IPsec tunnel
              mode packet. This allows an IP multicast packet to continue to
              be routed as a IP multicast packet. This attribute also provides
              the necessary policy so that the GDOI group member can
              appropriately set up the GSPD. The following table defines
              values for the Address Preservation attribute.</t>

              <t><figure>
                  <preamble></preamble>

                  <artwork><![CDATA[           Address Preservation Type               Value
           -------------------------               -----
           Reserved                                  0
           None                                      1
           Source-Only                               2
           Destination-Only                          3
           Source-and-Destination                    4
           Unassigned                               5-61439
           Private Use                          61440-65535
 ]]></artwork>

                  <postamble></postamble>
                </figure></t>

              <t>Depending on group policy, several address preservation
              methods are possible: no address preservation ("None"),
              preservation of the original source address ("Source-Only"),
              preservation of the original destination address
              ("Destination-Only"), or both addresses
              ("Source-and-Destination"). If this attribute is not included in
              a GDOI SA TEK payload provided by a GCKS, then
              Source-and-Destination address preservation has been defined for
              the SA TEK.</t>
            </section>

            <section title="SA Direction">
              <t>Depending on group policy, an IPsec SA created from an SA TEK
              payload is defined to be in the sending and/or receiving
              direction. The following table defines values for the SA
              Direction attribute.</t>

              <t><figure>
                  <preamble></preamble>

                  <artwork><![CDATA[           Name                      Value
           ----                      -----
           Reserved                    0
           Sender-Only                 1
           Receiver-Only               2
           Symmetric                   3
           Unassigned                 4-61439
           Private Use            61440-65535
 ]]></artwork>

                  <postamble></postamble>
                </figure></t>

              <t>SA TEK policy used by multiple senders MUST be installed in
              both the sending and receiving direction ("Symmetric"), whereas
              SA TEK for a single sender SHOULD be installed in the receiving
              direction by receivers ("Receiver-Only") and in the sending
              direction by the sender ("Sender-Only").</t>

              <t>An SA TEK payload that does not include the SA Direction
              attribute is treated as a Symmetric IPsec SA. Note that
              Symmetric is the only value that can be meaningfully described
              for an SA TEK distributed in a GROUPKEY-PUSH message.
              Alternatively, Receiver-Only could be distributed, but group
              senders would need to be configured to not receive GROUPKEY-PUSH
              messages in order to retain their role.</t>
            </section>
          </section>
        </section>

        <section anchor="OTHER-SP" title="Other Security Protocols">
          <t>Besides ESP and AH, GDOI should serve to establish SAs for secure
          groups needed by other Security Protocols that operate at the
          transport, application, and internetwork layers. These other
          Security Protocols, however, are in the process of being developed
          or do not yet exist.</t>

          <t>The following information needs to be provided for a Security
          Protocol to the GDOI. <list style="symbols">
              <t>The Protocol-ID for the particular Security Protocol</t>

              <t>The SPI Size</t>

              <t>The method of SPI generation</t>

              <t>The transforms, attributes, and keys needed by the Security
              Protocol</t>
            </list></t>

          <t>All Security Protocols MUST provide the information in the
          bulleted list above to guide the GDOI specification for that
          protocol. Definitions for the support of those Security Protocols in
          GDOI will be specified in separate documents.</t>

          <t>A Security Protocol MAY protect traffic at any level of the
          network stack. However, in all cases, applications of the Security
          Protocol MUST protect traffic that MAY be shared by more than two
          entities.</t>
        </section>
      </section>

      <section anchor="KD-Payload" title="Key Download Payload">
        <t>The Key Download payload contains group keys for the group
        specified in the SA payload. These Key Download payloads can have
        several security attributes applied to them based upon the security
        policy of the group as defined by the associated SA payload.</t>

        <t><figure title="Figure 9. Key Download Payload">
            <preamble></preamble>

            <artwork><![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   ! Next Payload  !   RESERVED    !         Payload Length        !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   ! Number of Key Packets         !            RESERVED2          !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   ~                    Key Packets                                ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
]]></artwork>

            <postamble></postamble>
          </figure></t>

        <t>The Key Download payload fields are defined as follows: <list
            style="symbols">
            <t>Next Payload (1 octet) -- Identifier for the payload type of
            the next payload in the message. If the current payload is the
            last in the message, then this field will be zero.</t>

            <t>RESERVED (1 octet) -- Unused; set to zero.</t>

            <t>Payload Length (2 octets) -- Length in octets of the current
            payload, including the generic payload header.</t>

            <t>Number of Key Packets (2 octets) -- Contains the total number
            of key packets being passed in this data block.</t>

            <t>Key Packets (variable) -- Several types of key packets are
            defined. Each key packet has the following format. <figure
                suppress-title="false" title="Figure 10. Key Packet">
                <preamble></preamble>

                <artwork><![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   !   KD Type     !   RESERVED    !            KD Length          !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   !    SPI Size   !                   SPI (variable)              ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
   ~                    Key Packet Attributes                      ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!
]]></artwork>

                <postamble></postamble>
              </figure></t>

            <t>Key Download (KD) Type (1 octet) -- Identifier for the Key Data
            field of this key packet. <figure>
                <preamble></preamble>

                <artwork><![CDATA[
                       Key Download Type        Value
                       -----------------        -----
                       Reserved                   0
                       TEK                        1
                       KEK                        2
                       LKH                        3
                       SID                        4
                       Unassigned                4-127
                       Private Use             128-255
]]></artwork>

                <postamble></postamble>
              </figure> "KEK" is a single key, whereas LKH is an array of
            key-encrypting keys.</t>

            <t>Reserved (1 octet) -- Unused; set to zero.</t>

            <t>Key Download Length (2 octets) -- Length in octets of the Key
            Packet data, including the Key Packet header.</t>

            <t>SPI Size (1 octet) -- Value specifying the length in octets of
            the SPI as defined by the Protocol-ID.</t>

            <t>SPI (variable length) -- Security Parameter Index, which
            matches a SPI previously sent in a SAK or SAT payload.</t>

            <t>Key Packet Attributes (variable length) -- Contains key
            information. The format of this field is specific to the value of
            the KD Type field. The following sections describe the format of
            each KD Type.</t>
          </list></t>

        <section title="TEK Download Type">
          <t>The following attributes may be present in a TEK Download Type.
          Exactly one attribute matching each type sent in the SAT payload
          MUST be present. The attributes must follow the format defined in
          ISAKMP (Section 3.3 of <xref target="RFC2408"></xref>). In the
          table, attributes defined as TV are marked as Basic (B); attributes
          defined as TLV are marked as Variable (V). <figure>
              <preamble></preamble>

              <artwork><![CDATA[
             TEK Class                 Value      Type
             ---------                 -----      ----
             RESERVED                     0
             TEK_ALGORITHM_KEY            1        V
             TEK_INTEGRITY_KEY            2        V
             TEK_SOURCE_AUTH_KEY          3        V
             Unassigned                  4-127
             Private Use               128-255
             Unassigned                256-32767
]]></artwork>

              <postamble></postamble>
            </figure> If no TEK key packets are included in a Registration KD
          payload, the group member can expect to receive the TEK as part of a
          Rekey SA. At least one TEK must be included in each Rekey KD
          payload. Multiple TEKs may be included if multiple streams
          associated with the SA are to be rekeyed.</t>

          <t>When an algorithm specification specifies the format of the
          keying material, the value transported in the KD payload for that
          key is passed according to that specification. The keying material
          may contain information besides a key. For example, "The Use of
          Galois/Counter Mode (GCM) in IPsec Encapsulating Security Payload
          (ESP)" <xref target="RFC4106"></xref> defines a salt value as part
          of KEYMAT.</t>

          <section title="TEK_ALGORITHM_KEY">
            <t>The TEK_ALGORITHM_KEY class declares that the encryption key
            for this SPI is contained as the Key Packet Attribute. The
            encryption algorithm that will use this key was specified in the
            SAT payload.</t>

            <t>In the case that the algorithm requires multiple keys (e.g.,
            3DES), all keys will be included in one attribute.</t>

            <t>DES keys will consist of 64 bits (the 56 key bits with parity
            bits). Triple DES keys will be specified as a single 192-bit
            attribute (including parity bits) in the order that the keys are
            to be used for encryption (e.g., DES_KEY1, DES_KEY2,
            DES_KEY3).</t>
          </section>

          <section title="TEK_INTEGRITY_KEY">
            <t>The TEK_INTEGRITY_KEY class declares that the integrity key for
            this SPI is contained as the Key Packet Attribute. The integrity
            algorithm that will use this key was specified in the SAT payload.
            Thus, GDOI assumes that both the symmetric encryption and
            integrity keys are pushed to the GM. HMAC-SHA1 keys will consist
            of 160 bits <xref target="RFC2404"></xref>, and HMAC-MD5 keys will
            consist of 128 bits <xref target="RFC2403"></xref>. HMAC-SHA2 and
            AES-GMAC keys will have a key length equal to the output length of
            the hash functions <xref target="RFC4868"></xref> <xref
            target="RFC4543"></xref>.</t>
          </section>

          <section title="TEK_SOURCE_AUTH_KEY">
            <t>The TEK_SOURCE_AUTH_KEY class declares that the source
            authentication key for this SPI is contained in the Key Packet
            Attribute. The source authentication algorithm that will use this
            key was specified in the SAT payload.</t>
          </section>
        </section>

        <section title="KEK Download Type">
          <t>The following attributes may be present in a KEK Download Type.
          Exactly one attribute matching each type sent in the SAK payload
          MUST be present. The attributes MUST follow the format defined in
          ISAKMP (Section 3.3 of <xref target="RFC2408"></xref>). In the
          table, attributes defined as TV are marked as Basic (B); attributes
          defined as TLV are marked as Variable (V). <figure>
              <preamble></preamble>

              <artwork><![CDATA[
             KEK Class                 Value      Type
             ---------                 -----      ----
             RESERVED                     0
             KEK_ALGORITHM_KEY            1        V
             SIG_ALGORITHM_KEY            2        V
             Unassigned                  3-127
             Private Use               128-255
             Unassigned                256-32767
]]></artwork>

              <postamble></postamble>
            </figure> If the KEK key packet is included, there MUST be only
          one present in the KD payload.</t>

          <section title="KEK_ALGORITHM_KEY">
            <t>The KEK_ALGORITHM_KEY class declares the encryption key for
            this SPI is contained in the Key Packet Attribute. The encryption
            algorithm that will use this key was specified in the SAK
            payload.</t>

            <t>If the mode of operation for the algorithm requires an IV, an
            explicit IV MUST be included in the KEK_ALGORITHM_KEY before the
            actual key.</t>
          </section>

          <section title="SIG_ALGORITHM_KEY">
            <t>The SIG_ALGORITHM_KEY class declares that the public key for
            this SPI is contained in the Key Packet Attribute, which may be
            useful when no public key infrastructure is available. The
            signature algorithm that will use this key was specified in the
            SAK payload.</t>
          </section>
        </section>

        <section title="LKH Download Type">
          <t>The LKH key packet is comprised of attributes representing
          different nodes in the LKH key tree.</t>

          <t>The following attributes are used to pass an LKH KEK array in the
          KD payload. The attributes MUST follow the format defined in ISAKMP
          (Section 3.3 of <xref target="RFC2408"></xref>). In the table,
          attributes defined as TV are marked as Basic (B); attributes defined
          as TLV are marked as Variable (V). <figure>
              <preamble></preamble>

              <artwork><![CDATA[
             KEK Class                 Value      Type
             ---------                 -----      ----
             RESERVED                     0
             LKH_DOWNLOAD_ARRAY           1        V
             LKH_UPDATE_ARRAY             2        V
             SIG_ALGORITHM_KEY            3        V
             Unassigned                  4-127
             Private Use               128-255
             Unassigned                256-32767
]]></artwork>

              <postamble></postamble>
            </figure> If an LKH key packet is included in the KD payload,
          there MUST be only one present.</t>

          <section title="LKH_DOWNLOAD_ARRAY">
            <t>This attribute is used to download a set of keys to a group
            member. It MUST NOT be included in a GROUPKEY-PUSH message KD
            payload if the GROUPKEY-PUSH is sent to more than the group
            member. If an LKH_DOWNLOAD_ARRAY attribute is included in a KD
            payload, there MUST be only one present.</t>

            <t>This attribute consists of a header block, followed by one or
            more LKH keys. <figure title="Figure 11. LKH Download Array">
                <preamble></preamble>

                <artwork><![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   !  LKH Version  !          # of LKH Keys        !  RESERVED     !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   !                             LKH Keys                          !
   ~                                                               ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>

                <postamble></postamble>
              </figure></t>

            <t>The KEK_LKH attribute fields are defined as follows: <list
                style="symbols">
                <t>LKH version (1 octet) -- Version of the LKH data format.
                Must be one.</t>

                <t>Number of LKH Keys (2 octets) -- This value is the number
                of distinct LKH keys in this sequence.</t>

                <t>RESERVED (1 octet) -- Unused; set to zero. Each LKH Key is
                defined as follows: <figure title="Figure 12. LKH Key">
                    <preamble></preamble>

                    <artwork><![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   !             LKH ID            !    Key Type   !    RESERVED   !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   !                        Key Creation Date                      !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   !                       Key expiration Date                     !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   !                           Key Handle                          !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   !                                                               !
   ~                            Key Data                           ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>

                    <postamble></postamble>
                  </figure></t>

                <t>LKH ID (2 octets) -- Identity of the LKH node. A GCKS is
                free to choose the ID in an implementation-specific manner
                (e.g., the position of this key in a binary tree structure
                used by LKH).</t>

                <t>Key Type (1 octet) -- Encryption algorithm for which this
                key data is to be used. This value is specified in Section
                5.3.3.</t>

                <t>RESERVED (1 octet) -- Unused; set to zero.</t>

                <t>Key Creation Date (4 octets) -- Unsigned time value
                defining a valid time period in seconds representing the
                number of seconds since 0 hours, 0 minutes, 0 seconds, January
                1, 1970, Coordinated Universal Time (UTC), without including
                leap seconds. <xref target="RFC5905"></xref>. This is the time
                when this key data was originally generated. A time value of
                zero indicates that there is no time before which this key is
                not valid.</t>

                <t>Key Expiration Date (4 octets) -- Unsigned time value
                defining a valid time period in seconds representing the
                number of seconds since 0 hours, 0 minutes, 0 seconds, January
                1, 1970, Coordinated Universal Time (UTC), without including
                leap seconds. <xref target="RFC5905"></xref>. This is the time
                when this key is no longer valid for use. A time value of zero
                indicates that this key does not have an expiration time.</t>

                <t>Key Handle (4 octets) -- Value assigned by the GCKS to
                uniquely identify a key within an LKH ID. Each new key
                distributed by the GCKS for this node will have a key handle
                identity distinct from previous or successive key handles
                specified for this node.</t>

                <t>Key Data (variable length) -- Key data, which is dependent
                on the Key Type algorithm for its format. If the mode of
                operation for the algorithm requires an IV, an explicit IV
                MUST be included in the Key Data field prepended to the actual
                key.</t>
              </list></t>

            <t>The Key Creation Date and Key expiration Dates MAY be zero.
            This is necessary in the case where time synchronization within
            the group is not possible.</t>

            <t>The first LKH Key structure in an LKH_DOWNLOAD_ARRAY attribute
            contains the Leaf identifier and key for the group member. The
            rest of the LKH Key structures contain keys along the path of the
            key tree in order from the leaf, culminating in the group KEK.</t>
          </section>

          <section title="LKH_UPDATE_ARRAY">
            <t>This attribute is used to update the keys for a group. It is
            most likely to be included in a GROUPKEY-PUSH message KD payload
            to rekey the entire group. This attribute consists of a header
            block, followed by one or more LKH keys, as defined in the
            previous section.</t>

            <t>There may be any number of UPDATE_ARRAY attributes included in
            a KD payload. <figure title="Figure 13. LKH Update Array">
                <preamble></preamble>

                <artwork><![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   !  LKH Version  !          # of LKH Keys        !  RESERVED     !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   !            LKH ID             !           RESERVED2           !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   !                           Key Handle                          !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   !                            LKH Keys                           !
   ~                                                               ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>

                <postamble></postamble>
              </figure></t>

            <t><list style="symbols">
                <t>LKH version (1 octet) -- Version of the LKH data format.
                Must be one.</t>

                <t>Number of LKH Keys (2 octets) -- Number of distinct LKH
                keys in this sequence.</t>

                <t>RESERVED (1 octet) -- Unused; set to zero.</t>

                <t>LKH ID (2 octets) -- Node identifier associated with the
                key used to encrypt the first LKH Key.</t>

                <t>RESERVED2 (2 octets) -- Unused; set to zero.</t>

                <t>Key Handle (4 octets) -- Value assigned by the GCKS to
                uniquely identify the key within the LKH ID used to encrypt
                the first LKH Key.</t>
              </list></t>

            <t>The LKH Keys are as defined in the previous section. The LKH
            Key structures contain keys along the path of the key tree in
            order from the LKH ID found in the LKH_UPDATE_ARRAY header,
            culminating in the group KEK. The Key Data field of each LKH Key
            is encrypted with the LKH key preceding it in the LKH_UPDATE_ARRAY
            attribute. The first LKH Key is encrypted under the key defined by
            the LKH ID and Key Handle found in the LKH_UPDATE_ARRAY
            header.</t>
          </section>

          <section title="SIG_ALGORITHM_KEY">
            <t>The SIG_ALGORITHM_KEY class declares that the public key for
            this SPI is contained in the Key Packet Attribute, which may be
            useful when no public key infrastructure is available. The
            signature algorithm that will use this key was specified in the
            SAK payload.</t>
          </section>
        </section>

        <section title="SID Download Type">
          <t>This attribute is used to download one or more Sender-ID (SID)
          values for the exclusive use of a group member.</t>

          <t>The SID Download Type does not require an SPI. When the KD Type
          is SID, the SPI Size field MUST be zero, and the SPI field is
          omitted.</t>

          <t><figure>
              <preamble></preamble>

              <artwork><![CDATA[ 
             SID Class                 Value      Type
             ---------                 -----      ----
             RESERVED                     0
             NUMBER_OF_SID_BITS           1        B
             SID_VALUE                    2        V
             Unassigned                 3-128
             Private Use              129-255 
             Unassigned               256-32767]]></artwork>

              <postamble></postamble>
            </figure></t>

          <t>Because a SID value is intended for a single group member, the
          SID Download type MUST NOT be distributed in a GROUPKEY-PUSH message
          distributed to multiple group members.</t>

          <section title="NUMBER_OF_SID_BITS">
            <t>The NUMBER_OF_SID_BITS class declares how many bits of the
            cipher nonce in which to represent a SID value. This value is
            applied to each SID value distributed in the SID Download.</t>
          </section>

          <section title="SID_VALUE">
            <t>The SID_VALUE class declares a single SID value for the
            exclusive use of the group member. Multiple SID_VALUE attributes
            MAY be included in a SID Download.</t>
          </section>

          <section title="Group Member Semantics">
            <t>The SID_VALUE attribute value distributed to the group member
            MUST be used by that group member as the SID field portion of the
            IV for all Data-Security SAs including a counter-based mode of
            operation distributed by the GCKS as a part of this group.</t>

            <t>When the Sender-Specific IV (SSIV) field for any Data-Security
            SA is exhausted, the group member MUST no longer act as a sender
            on that SA using its active SID. The group member SHOULD
            re-register, at which time the GCKS will issue a new SID to the
            group member, along with either the same Data-Security SAs or
            replacement ones. The new SID replaces the existing SID used by
            this group member and also resets the SSIV value to its starting
            value. A group member MAY re-register prior to the actual
            exhaustion of the SSIV field to avoid dropping data packets due to
            the exhaustion of available SSIV values combined with a particular
            SID value.</t>

            <t>GROUPKEY-PUSH message may include Data-Security SAs that are
            distributed to the group member for the first time. A SID
            previously issued to the receiving group member is used with
            counter-based mode of operation Data-Security SAs on which the
            group member acts as a sender. Because this Data-Security SA has
            not previously been used for transmission, the SSIV field should
            be set to its starting value.</t>
          </section>

          <section title="GCKS Semantics">
            <t>If any KD payload includes keying material that is associated
            with a counter-mode of operation, a SID Download Type KD payload
            containing at least one SID_VALUE attribute MUST be included.</t>

            <t>The GCKS MUST NOT send the SID Download Type KD payload as part
            of a GROUPKEY-PUSH message because distributing the same
            sender-specific policy to more than one group member will reduce
            the security of the group.</t>
          </section>
        </section>
      </section>

      <section title="Sequence Number Payload">
        <t>The Sequence Number (SEQ) Payload provides an anti-replay
        protection for GROUPKEY-PUSH messages. Its use is similar to the
        Sequence Number field defined in the IPsec ESP protocol <xref
        target="RFC4303"></xref>. <figure
            title="Figure 14. Sequence Number Payload">
            <preamble></preamble>

            <artwork><![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ! Next Payload  !   RESERVED    !         Payload Length        !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   !                      Sequence Number                          !
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>

            <postamble></postamble>
          </figure></t>

        <t>The Sequence Number Payload fields are defined as follows: <list
            style="symbols">
            <t>Next Payload (1 octet) -- Identifier for the payload type of
            the next payload in the message. If the current payload is the
            last in the message, then this field will be zero.</t>

            <t>RESERVED (1 octet) -- Unused; set to zero.</t>

            <t>Payload Length (2 octets) -- Length in octets of the current
            payload, including the generic payload header. MUST be a value of
            8.</t>

            <t>Sequence Number (4 octets) -- This field contains a
            monotonically increasing counter value for the group. It is
            initialized to zero by the GCKS and incremented in each
            subsequently transmitted message. Thus, the first packet sent for
            a given Rekey SA will have a Sequence Number of 1. The GDOI
            implementation keeps a sequence counter as an attribute for the
            Rekey SA and increments the counter upon receipt of a
            GROUPKEY-PUSH message. The current value of the sequence number
            MUST be transmitted to group members as a part of the Registration
            SA payload.</t>
          </list></t>
      </section>

      <section title="Nonce">
        <t>The data portion of the Nonce payload (i.e., Ni_b and Nr_b included
        in the HASHs) MUST be a value between 8 and 128 octets.</t>
      </section>

      <section anchor="Delete" title="Delete">
        <t>There are times the GCKS may want to signal to receivers to delete
        SAs, for example, at the end of a broadcast. Deletion of keys may be
        accomplished by sending an ISAKMP Delete payload (Section 3.15 of
        <xref target="RFC2408"></xref>) as part of a GDOI GROUPKEY-PUSH
        message.</t>

        <t>One or more Delete payloads MAY be placed following the SEQ payload
        in a GROUPKEY-PUSH message. If a GCKS has no further SAs to send to
        group members, the SA and KD payloads MUST be omitted from the
        message.</t>

        <t>The following fields of the Delete payload are further defined as
        follows: <list style="symbols">
            <t>The Domain of Interpretation field contains the GDOI DOI.</t>

            <t>The Protocol-ID field contains TEK protocol ID values defined
            in <xref target="TEK-Payload"></xref> of this document. To delete
            a KEK SA, the value of zero MUST be used as the protocol ID. Note
            that only one protocol ID value can be defined in a Delete
            payload. Thus, if a TEK SA and a KEK SA are to be deleted, their
            SPI values MUST be sent in different Delete payloads.</t>
          </list></t>

        <t>There may be circumstances where the GCKS may want to start over
        with a clean slate. If the administrator is no longer confident in the
        integrity of the group, the GCKS can signal deletion of all policy of
        a particular TEK protocol by sending a TEK with an SPI value equal to
        zero in the delete payload. For example, if the GCKS wishes to remove
        all the KEKs and all the TEKs in the group, the GCKS SHOULD send a
        delete payload with an SPI of zero and a Protocol-ID of a TEK
        Protocol-ID value, followed by another delete payload with an SPI
        value of zero and Protocol-ID of zero, indicating that the KEK SA
        should be deleted.</t>
      </section>
    </section>

    <section title="Algorithm Selection">
      <t>For GDOI implementations to interoperate, they must support one or
      more security algorithms in common. This section specifies the security
      algorithm implementation requirements for standards-conformant GDOI
      implementations. In all cases, the choices are intended to maintain at
      least 112 bits of security <xref target="SP.800-131"></xref>.</t>

      <t>Algorithms not referenced in this section MAY be used.</t>

      <section title="KEK">
        <t>These tables list the algorithm selections for values related to
        the KEK.<figure>
            <artwork><![CDATA[             Requirement   KEK Management Algorithm 
             -----------   ---------------------
             SHOULD        LKH

             Requirement   KEK Algorithm (notes) 
             -----------   ---------------------
             MUST          KEK_ALG_AES with 128-bit keys
             SHOULD NOT    KEK_ALG_DES  (1)

             Requirement   KEK Signature Hash Algorithm (notes) 
             -----------   ------------------------------------
             MUST          SIG_HASH_SHA256
             SHOULD        SIG_HASH_SHA1 (2)
             SHOULD NOT    SIG_HASH_MD5 (3)

             Requirement   KEK Signature Algorithm (notes) 
             -----------   -------------------------------
             MUST          SIG_ALG_RSA with 2048-bit keys
 ]]></artwork>
          </figure></t>

        <t>Notes: <list style="format (%d)">
            <t>DES, with its small key size and corresponding security
            strength, is of questionable security for general use</t>

            <t>The use of SIG_HASH_SHA1 as a signature hash algorithm used
            with GROUPKEY-PUSH messages remains safe at the time of this
            writing, and it is a widely deployed signature hash algorithm.</t>

            <t>Although a real weakness with second preimage resistance with
            MD5 has not been found at the time of this writing, the security
            strength of MD5 has been shown to be rapidly declining over time,
            and its use should be understood and carefully weighed.</t>
          </list></t>
      </section>

      <section title="TEK">
        <t>The following table lists the requirements for Security Protocol
        support for an implementation.</t>

        <t><figure>
            <artwork><![CDATA[             Requirement   KEK Management Algorithm 
             -----------   ---------------------
             MUST          GDOI_PROTO_IPSEC_ESP]]></artwork>
          </figure></t>
      </section>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>GDOI is a security association (SA) management protocol for groups of
      senders and receivers. This protocol performs authentication of
      communicating protocol participants (Group Member, Group Controller/Key
      Server). It provides confidentiality of key management messages, and it
      provides source authentication of those messages. GDOI includes defenses
      against man-in-middle, connection hijacking, replay, reflection, and
      denial-of-service (DoS) attacks on unsecured networks. GDOI assumes the
      network is not secure and may be under the complete control of an
      attacker.</t>

      <t>GDOI assumes that the group members and GCKS are secure even though
      the network is insecure. GDOI ultimately establishes keys among members
      of a group, which MUST be trusted to use those keys in an authorized
      manner according to group policy. A GDOI entity compromised by an
      attacker may reveal the secrets necessary to eavesdrop on group traffic
      and/or take the identity of a group sender, so host security measures
      mitigating unauthorized access are of the utmost importance. The latter
      threat could be mitigated by using source origin authentication in the
      Data-Security SAs (e.g., the use of RSA signatures <xref
      target="RFC4359"></xref> or TESLA <xref target="RFC4082"></xref>). The
      choice of Data-Security SAs is a matter of group policy and is not
      within the scope of this memo.</t>

      <t>There are three phases of GDOI as described in this document: an
      ISAKMP Phase 1 protocol, the GROUPKEY-PULL exchange protected by the
      ISAKMP Phase 1 protocol, and the GROUPKEY-PUSH message. Each phase is
      considered separately below.</t>

      <section anchor="IKE-Security-Considerations" title="ISAKMP Phase 1">
        <t>GDOI uses the Phase 1 exchanges defined in <xref
        target="RFC2409"></xref> to protect the GROUPKEY-PULL exchange.
        Therefore, all security properties and considerations of those
        exchanges (as noted in <xref target="RFC2409"></xref>) are relevant
        for GDOI.</t>

        <t>GDOI may inherit the problems of its ancestor protocols, such as
        identity exposure, absence of unidirectional authentication, or
        stateful cookies <xref target="PK01"></xref>.</t>

        <section title="Authentication">
          <t>Authentication is provided via the mechanisms defined in <xref
          target="RFC2409"></xref>, namely pre-shared keys or public key
          encryption.</t>
        </section>

        <section title="Confidentiality">
          <t>Confidentiality is achieved in Phase 1 through a Diffie-Hellman
          exchange that provides keying material and through negotiation of
          encryption transforms.</t>

          <t>The Phase 1 protocol will be protecting encryption and integrity
          keys sent in the GROUPKEY-PULL protocol. The strength of the
          encryption used for Phase 1 SHOULD exceed that of the keys sent in
          the GROUPKEY-PULL protocol.</t>
        </section>

        <section title="Man-in-the-Middle Attack Protection">
          <t>A successful man-in-the-middle or connection-hijacking attack
          foils entity authentication of one or more of the communicating
          entities during key establishment. GDOI relies on Phase 1
          authentication to defeat man-in-the-middle attacks.</t>
        </section>

        <section title="Replay/Reflection Attack Protection">
          <t>In a replay/reflection attack, an attacker captures messages
          between GDOI entities and subsequently forwards them to a GDOI
          entity. Replay and reflection attacks seek to gain information from
          a subsequent GDOI message response or seek to disrupt the operation
          of a GDOI member or GCKS entity. GDOI relies on the Phase 1 nonce
          mechanism in combination with a hash-based message authentication
          code to protect against the replay or reflection of previous key
          management messages.</t>
        </section>

        <section title="Denial-of-Service Protection">
          <t>A DoS attacker sends messages to a GDOI entity to cause that
          entity to perform unneeded message authentication operations. GDOI
          uses the Phase 1 cookie mechanism to identify spurious messages
          prior to cryptographic hash processing. This is a "weak" form of DoS
          protection in that the GDOI entity must check for good cookies,
          which can be successfully imitated by a sophisticated attacker. The
          Phase 1 cookie mechanism is stateful and commits memory resources
          for cookies.</t>
        </section>
      </section>

      <section title="GROUPKEY-PULL Exchange">
        <t>The GROUPKEY-PULL exchange allows a group member to request SAs and
        keys from a GCKS. It runs as a Phase 2 protocol under protection of
        the Phase 1 security association.</t>

        <section title="Authentication">
          <t>Peer authentication is not required in the GROUPKEY-PULL
          protocol. It is running in the context of the Phase 1 protocol,
          which has previously authenticated the identity of the peer.</t>

          <t>Message authentication is provided by HASH payloads in each
          message, where the HASH is defined to be over SKEYID_a (derived in
          the Phase 1 exchange), the ISAKMP Message-ID, and all payloads in
          the message. Because only the two endpoints of the exchange know the
          SKEYID_a value, this provides confidence that the peer sent the
          message.</t>
        </section>

        <section title="Confidentiality">
          <t>Confidentiality is provided by the Phase 1 security association,
          after the manner described in <xref target="RFC2409"></xref>.</t>
        </section>

        <section title="Man-in-the-Middle Attack Protection">
          <t>Message authentication (described above) includes a secret known
          only to the group member and GCKS when constructing a HASH payload.
          This prevents man-in-the-middle and connection-hijacking attacks
          because an attacker would not be able to change the message
          undetected.</t>
        </section>

        <section title="Replay Protection">
          <t>A GROUPKEY-PULL message identifies its messages using a cookie
          pair from the Phase 1 exchange that precedes it. A GROUPKEY-PULL
          message with invalid cookies will be discarded. Therefore, GDOI
          messages that are not associated with a current GDOI session will be
          discarded without further processing.</t>

          <t>Replayed GDOI messages that are associated with a current GDOI
          session will be decrypted and authenticated. The M-ID in the HDR
          identifies a session. Replayed packets will be processed according
          to the state machine of that session. Packets not matching that
          state machine will be discarded without processing.</t>
        </section>

        <section title="Denial-of-Service Protection">
          <t>GCKS implementations SHOULD keep a record of recently received
          GROUPKEY-PULL messages (e.g., a hash of the packet) and reject
          messages that have already been processed. This provides DoS and
          replay protection of previously sent messages. An implementation MAY
          choose to rate-limit the receipt of GDOI messages in order to
          mitigate overloading its computational resources.</t>

          <t>The GCKS SHOULD NOT perform any computationally expensive tasks
          before receiving a HASH with its own nonce included. The GCKS MUST
          NOT update the group management state (e.g., LKH key tree,
          SID-counter) until it receives the third message in the exchange
          with a valid HASH payload including its own nonce.</t>
        </section>

        <section title="Authorization">
          <t>A GCKS implementation SHOULD maintain an authorization list of
          authorized group members. A group member MUST specifically list each
          authorized GCKS in its Group Peer Authorization Database (GPAD)
          <xref target="RFC5374"></xref>.</t>
        </section>
      </section>

      <section title="GROUPKEY-PUSH Exchange">
        <t>The GROUPKEY-PUSH exchange is a single message that allows a GCKS
        to send SAs and keys to group members. This is likely to be sent to
        all members using an IP multicast group. This message provides an
        efficient rekey and group membership adjustment capability.</t>

        <section title="Authentication">
          <t>The GROUPKEY-PULL exchange distributes a public key that is used
          for message authentication. The GROUPKEY-PUSH message is digitally
          signed using the corresponding private key held by the GCKS. This
          digital signature provides source authentication for the message.
          Thus, GDOI protects the GCKS from impersonation in group
          environments.</t>
        </section>

        <section title="Confidentiality">
          <t>The GCKS encrypts the GROUPKEY-PUSH message with an encryption
          key that was distributed in the GROUPKEY-PULL exchange or a previous
          GROUPKEY-PUSH exchange. The encryption key may be a simple KEK or
          the result of a group management method (e.g., LKH) calculation.</t>
        </section>

        <section title="Man-in-the-Middle Attack Protection">
          <t>This combination of confidentiality and message authentication
          services protects the GROUPKEY-PUSH message from man-in-middle and
          connection-hijacking attacks.</t>
        </section>

        <section title="Replay/Reflection Attack Protection">
          <t>The GROUPKEY-PUSH message includes a monotonically increasing
          sequence number to protect against replay and reflection attacks. A
          group member will discard sequence numbers associated with the
          current KEK SPI that have the same or lower value as the most
          recently received replay number.</t>

          <t>Implementations SHOULD keep a record (e.g., a hash value) of
          recently received GROUPKEY-PUSH messages and reject duplicate
          messages prior to performing cryptographic operations. This enables
          an early discard of the replayed messages.</t>
        </section>

        <section anchor="PUSH-DoS" title="Denial-of-Service Protection">
          <t>A cookie pair identifies the security association for the
          GROUPKEY-PUSH message. The cookies thus serve as a weak form of DoS
          protection for the GROUPKEY-PUSH message.</t>

          <t>The digital signature used for message authentication has a much
          greater computational cost than a message authentication code and
          could amplify the effects of a DoS attack on GDOI members who
          process GROUPKEY-PUSH messages. The added cost of digital signatures
          is justified by the need to prevent GCKS impersonation: If a shared
          symmetric key were used for GROUPKEY-PUSH message authentication,
          then GCKS source authentication would be impossible, and any member
          would be capable of GCKS impersonation.</t>

          <t>The potential of the digital signature amplifying a DoS attack is
          mitigated by the order of operations a group member takes, where the
          least expensive cryptographic operation is performed first. The
          group member first decrypts the message using a symmetric cipher. If
          it is a validly formed message, then the sequence number is checked
          against the most recently received sequence number. Only when the
          sequence number is valid (i.e., it is a larger value than previously
          received) is the digital signature verified and the message further
          processed. Thus, in order for a DoS attack to be mounted, an
          attacker would need to know both the symmetric encryption key used
          for confidentiality and a valid sequence number. Generally speaking,
          this means only current group members can effectively deploy a DoS
          attack.</t>
        </section>
      </section>

      <section anchor="FB-AC" title="Forward and Backward Access Control">
        <t>Through GROUPKEY-PUSH, the GDOI supports group management methods
        such as LKH (Section 5.4 of <xref target="RFC2627"></xref>) that have
        the property of denying access to a new group key by a member removed
        from the group (forward access control) and to an old group key by a
        member added to the group (backward access control). The concepts
        "forward access control" and "backward access control" have also been
        described as "perfect forward security" and "perfect backward
        security", respectively, in the literature <xref
        target="RFC2627"></xref>.</t>

        <t>Group management algorithms providing forward and backward access
        control other than LKH have been proposed in the literature, including
        one-way function trees <xref target="OFT"></xref> and Subset
        Difference <xref target="NNL"></xref>. These algorithms could be used
        with GDOI, but are not specified as a part of this document.</t>

        <section anchor="Forward-AC"
                 title="Forward Access Control Requirements">
          <t>When group membership is altered using a group management
          algorithm, new Data-Security SAs are usually also needed. New SAs
          ensure that members who were denied access can no longer participate
          in the group.</t>

          <t>If forward access control is a desired property of the group, new
          Data-Security SAs MUST NOT be included in a GROUPKEY-PUSH message
          that changes group membership. This is required because the new
          Data-Security SAs are not protected with the new KEK. Instead, two
          sequential GROUPKEY-PUSH messages must be sent by the GCKS; the
          first changing the KEK, and the second (protected with the new KEK)
          distributing the new Data-Security SAs.</t>

          <t>Note that in the above sequence, although the new KEK can
          effectively deny access to the group to some group members, they
          will be able to view the new KEK policy. If forward access control
          policy for the group includes keeping the KEK policy secret as well
          as the KEK itself secret, then two GROUPKEY-PUSH messages changing
          the KEK must occur before the new Data-Security SAs are
          transmitted.</t>

          <t>If other methods of using LKH or other group management
          algorithms are added to GDOI, those methods MAY remove the above
          restrictions requiring multiple GROUPKEY-PUSH messages, providing
          those methods specify how forward access control policy is
          maintained within a single GROUPKEY-PUSH message.</t>
        </section>

        <section title="Backward Access Control Requirements">
          <t>If backward access control is a desired property of the group, a
          new member MUST NOT be given Data-Security SAs that were used prior
          to its joining the group. This can be accomplished if the GCKS
          provides only the Rekey SA to the new member in a GROUPKEY-PULL
          exchange, followed by a GROUPKEY-PUSH message that both deletes
          current Data-Security SAs and provides new replacement Data-Security
          SAs. The new group member will effectively join the group at such
          time as the existing members begin sending on the Data-Security
          SAs.</t>

          <t>If there is a possibility that the new group member has stored
          GROUPKEY-PUSH messages delivered prior to joining the group, then
          the above procedure is not sufficient. In this case, to achieve
          backward access control, the GCKS needs to return a new Rekey SA to
          the group member in a GROUPKEY-PULL exchange rather than the
          existing one. The GCKS would subsequently deliver two GROUPKEY-PUSH
          messages. The first, intended for existing group members,
          distributes the new Rekey SA to existing members. The GCKS would
          then deliver the second GROUPKEY-PUSH message using the new Rekey SA
          that both deletes current Data-Security SAs and provides new
          replacement Data-Security SAs. Both preexisting and new members
          would process the second GROUPKEY-PUSH message, and all would be
          able to communicate using the new Data-Security SAs.</t>
        </section>
      </section>

      <section title="Derivation of Keying Material">
        <t>A GCKS distributes keying material associated with Data-Security
        SAs and the Rekey SA. Because these security associations are used by
        a set of group members, this keying material is not related to any
        pair-wise connection, and there is no requirement in "The Multicast
        Group Security Architecture" <xref target="RFC3740"></xref> for group
        members to permute group keying material. Because the GCKS is solely
        responsible for the generation of the keying material, the GCKS MUST
        derive the keying material using a strong random number generator.
        Because there are no interoperability concerns with key generation, no
        method is prescribed in GDOI.</t>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t></t>

      <section title="Additions to Current Registries">
        <t>The GDOI KEK Attribute named SIG_HASH_ALGORITHM <xref
        target="GDOI-REG"></xref> has been assigned several new Algorithm Type
        values from the RESERVED space to represent the SHA-256, SHA-384, and
        SHA-512 hash algorithms as defined in <xref
        target="FIPS180-3.2008"></xref>. The new algorithm names are
        SIG_HASH_SHA256, SIG_HASH_SHA384, and SIG_HASH_SHA512, respectively,
        and have the values of 3, 4, and 5, respectively.</t>

        <t>The GDOI KEK Attribute named SIG_ALGORITHM <xref
        target="GDOI-REG"></xref> has been assigned several new Algorithm Type
        values from the RESERVED space to represent the SIG_ALG_ECDSA-256,
        SIG_ALG_ECDSA-384, and SIG_ALG_ECDSA-521 signature algorithms. The
        Algorithm Types values are 4, 5, and 6, respectively.</t>

        <t>A new GDOI SA TEK type Protocol-ID type <xref
        target="GDOI-REG"></xref> has been assigned from the RESERVED space.
        The new algorithm ID is called GDOI_PROTO_IPSEC_AH, refers to the
        IPsec AH encapsulation, and has a value of 2.</t>

        <t>A new Next Payload Type <xref target="ISAKMP-REG"></xref> has been
        assigned. The new type is called "SA Group Associated Policy (GAP)"
        and has a value of 22.</t>

        <t>A new Key Download Type <xref target="KD-Payload"></xref> has been
        assigned. The new type is called "SID" and has a value of 4.</t>
      </section>

      <section title="New Registries">
        <t>A new registry identifying the possible values of GAP Payload
        Policy Attributes (of the form described in Section 3.3 of <xref
        target="RFC2408"></xref>) has been created in the GDOI Payloads
        registry <xref target="GDOI-REG"></xref>. This memo defines the
        following values for this registry:</t>

        <t><figure>
            <artwork><![CDATA[           Attribute Type         Value       Type
           ----                   -----       ----
           RESERVED                 0
           ACTIVATION_TIME_DELAY    1          B
           DEACTIVATION_TIME_DELAY  2          B
           SENDER_ID_REQUEST        3          B
           Unassigned              4-127
           Private Use           128-255
           Unassigned            256-32767
 ]]></artwork>

            <postamble>The registration procedure is Standards Action. The terms Standards Action and Private Use are to be
            applied as defined in <xref target="RFC5226"></xref>.</postamble>
          </figure></t>

        <t>A new IPsec Security Association Attribute <xref
        target="ISAKMP-REG"> </xref> defining the preservation of IP addresses
        has been registered. The attribute class is called "Address
        Preservation", and it is a Basic type. The following rules apply to
        define the values of the attribute:<figure>
            <preamble></preamble>

            <artwork><![CDATA[           Name                      Value
           ----                      -----
           Reserved                  0
           None                      1
           Source-Only               2
           Destination-Only          3
           Source-and-Destination    4
           Unassigned               5-61439
           Private Use          61440-65535
 ]]></artwork>

            <postamble>The registration procedure is Standards Action. The terms Standards Action and Private Use are to be
            applied as defined in <xref target="RFC5226"></xref>.</postamble>
          </figure></t>

        <t>A new IPsec Security Association Attribute <xref
        target="ISAKMP-REG"></xref> defining the SA direction has been
        created. The attribute class is called "SA Direction", and it is a
        Basic type. The following rules apply to define the values of the
        attribute:<figure>
            <preamble></preamble>

            <artwork><![CDATA[           Name                      Value
           ----                      -----
           Reserved                  0
           Sender-Only               1
           Receiver-Only             2
           Symmetric                 3
           Unassigned               4-61439
           Private Use          61440-65535
 ]]></artwork>

            <postamble>The registration procedure is Standards Action. terms Standards Action and Private Use are to be
            applied as defined in <xref target="RFC5226"></xref>.</postamble>
          </figure></t>

        <t>When the SID "Key Download Type" (described in the previous
        section) has a set of attributes, the attributes must follow the
        format defined in ISAKMP (Section 3.3 of <xref
        target="RFC2408"></xref>). In the table, attributes defined as TV are
        marked as Basic (B); attributes defined as TLV are marked as Variable
        (V).</t>

        <t><figure>
            <preamble></preamble>

            <artwork><![CDATA[
             SID Class                 Value      Type
             ---------                 -----      ----
             RESERVED                     0
             NUMBER_OF_SID_BITS           1        B
             SID_VALUE                    2        V
             Unassigned                 3-128
             Private Use              129-255 
             Unassigned               256-32767
 ]]></artwork>

            <postamble>The registration procedure is Standards Action. terms Standards Action and Private Use are to be
            applied as defined in <xref target="RFC5226"></xref>.</postamble>
          </figure></t>
      </section>

      <section title="Cleanup of Existing Registries">
        <t>Several existing GDOI Payloads registries do not use the terms in
        RFC 5226 and/or do not describe the entire range of possible values.
        The following sections correct these registries. The terms Standards
        Action, Unassigned, and Private Use are to be applied as defined in
        <xref target="RFC5226"></xref>.</t>

        <section title="Pop Algorithm">
          <t>The registration procedure is Standards Action. Values 4-27 are
designated Unassigned. Values 256-32767
          have been added and are designated Unassigned.</t>
        </section>

        <section title="KEK Attributes">
          <t>The registration procedure is Standards Action. Values 9-127 have been added and are designated Unassigned.
          Values 128-255 have been added and are designated Private
          Use. &nbsp;Values 256-32767 have been added and are designated
          Unassigned.</t>

        </section>

        <section title="KEK_MANAGEMENT_ALGORITHM">
          <t>The registration procedure is Standards Action. Values 2-127 are designated Unassigned. Values 128-255
          have been added and designated Private Use. &nbsp;Values 256-65535 have
          been added and are designated Unassigned.</t>
        </section>

        <section title="KEK_ALGORITHM">
          <t>The registration procedure is Standards Action. Values 4-127 are designated Unassigned. Values 256-65535
          have been added and are designated Unassigned.</t>
        </section>

        <section title="SIG_HASH_ALGORITHM">
          <t>The registration procedure is Standards
Action. Values 6-127 are designated Unassigned. Values 256-65535
          have been added and are designated Unassigned.</t>
        </section>

        <section title="SIG_ALGORITHM">
          <t>The registration procedure is Standards Action.  Values 7-127 are designated Unassigned. Values 256-65535
          have been added and are designated Unassigned.</t>
        </section>

        <section title="SA TEK Payload Values">
          <t>The registration procedure is Standards Action. Values 3-127 are designated Unassigned.</t>
        </section>

        <section title="Key Download Types">
          <t>The registration procedure is Standards Action.  Values 5-127 are designated Unassigned.</t>
        </section>

        <section title="TEK Download Type">
          <t>The registration procedure is Standards Action. Values 4-127 have been added and are designated Unassigned.
          Values 128-255 have been added and are designated Private Use.
          &nbsp;Values 256-32767 have been added and are designated
          Unassigned.</t>
        </section>

        <section title="KEK Download Type">
          <t>The registration procedure is Standards Action. Values 3-127 are designated Unassigned. Values 128-255
          have been added and are designated Private Use. &nbsp;Values
          256-32767 have been added and are designated Unassigned.</t>
        </section>

        <section title="LKH Download Type">
          <t>The registration procedure is Standards
Action.  Values 4-127 are designated Unassigned. Values 256-32767
          have been added and are designated Unassigned.</t>
        </section>
      </section>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>This memo replaces RFC 3547, and the authors wish to thank Mark
      Baugher and Hugh Harney for their extensive contributions that led to
      this newer specification of GDOI.</t>

      <t>The authors are grateful to Catherine Meadows for her careful review
      and suggestions for mitigating the man-in-the-middle attack she had
      previously identified. Yoav Nir, Vincent Roca, Sean Turner, and Elwyn
      Davies provided many useful technical and editorial comments and
      suggestions for improvement.</t>
    </section>
  </middle>

  <back>
    <?rfc rfcedstyle="no"?>

    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include='reference.RFC.2403'?>

      <?rfc include='reference.RFC.2404'?>

      <?rfc include="reference.RFC.4302"?>

      <?rfc include='reference.RFC.4303'?>

      <?rfc include="reference.RFC.2407"?>

      <?rfc include='reference.RFC.2408'?>

      <?rfc include="reference.RFC.2409"?>

      <?rfc include="reference.RFC.2627"?>

      <?rfc include='reference.RFC.3447'?>

      <?rfc include='reference.RFC.4754'?>

      <?rfc include='reference.RFC.4868'?>

      <?rfc include='reference.RFC.5374'?>

      <?rfc include='reference.RFC.5903'?>

      <?rfc include='reference.RFC.6054'?>
    </references>

    <references title="Informative References">
      <reference anchor="SP.800-38A">
        <front>
          <title>Recommendation for Block Cipher Modes of Operation</title>

          <author fullname="Morris Dworkin" initials="M." surname="Dworkin">
            <organization></organization>
          </author>

          <date month="December" year="2001" />
        </front>

        <seriesInfo name="United States of America, National Institute of Science and Technology,"
                    value="NIST Special Publication 800&nbhy;38A 2001 Edition" />
      </reference>

      <reference anchor="SP.800-131">
        <front>
          <title>Recommendation for the Transitioning of Cryptographic
          Algorithms and Key Lengths</title>

          <author fullname="Elaine Barker" initials="E." surname="Barker">
            <organization></organization>
          </author>

          <author fullname="Allen" initials="A." surname="Roginsky">
            <organization></organization>
          </author>

          <date month="June" year="2010" />
        </front>

        <seriesInfo name="United States of America, National Institute of Science and Technology,"
                    value="DRAFT NIST Special Publication 800&nbhy;131" />
      </reference>

      <reference anchor="FIPS46-3">
        <front>
          <title>Data Encryption Standard (DES)</title>

          <author fullname="" surname="">
            <organization></organization>
          </author>

          <date month="October" year="1999" />
        </front>

        <seriesInfo name="United States of America, National Institute of Science and Technology,"
                    value="Federal Information Processing Standard (FIPS) 46-3" />
      </reference>

      <reference anchor="FIPS81">
        <front>
          <title>DES Modes of Operation</title>

          <author fullname="" surname="">
            <organization></organization>
          </author>

          <date month="December" year="1980" />
        </front>

        <seriesInfo name="United States of America, National Institute of Science and Technology,"
                    value="Federal Information Processing Standard (FIPS) 81" />
      </reference>

      <reference anchor="FIPS186-3">
        <front>
          <title>Digital Signature Standard (DSS)</title>

          <author fullname="" surname="">
            <organization></organization>
          </author>

          <date month="June" year="2009" />
        </front>

        <seriesInfo name="United States of America, National Institute of Science and Technology,"
                    value="Federal Information Processing Standard (FIPS) 186-2" />
      </reference>

      <reference anchor="FIPS197">
        <front>
          <title>Advanced Encryption Standard (AES)</title>

          <author fullname="" surname="">
            <organization></organization>
          </author>

          <date month="November" year="2001" />
        </front>

        <seriesInfo name="United States of America, National Institute of Science and Technology,"
                    value="Federal Information Processing Standard (FIPS) 197" />
      </reference>

      <reference anchor="ISAKMP-REG"
                 target="http://www.iana.org/assignments/isakmp-registry">
        <front>
          <title>'Magic Numbers' for ISAKMP Protocol</title>

          <author fullname="" surname="">
            <organization></organization>
          </author>

          <date month="" year="" />
        </front>
      </reference>

      <reference anchor="NNL"
                 target="http://www.iacr.org/archive/crypto2001/21390040.pdf">
        <front>
          <title>Revocation and Tracing Schemes for Stateless
          Receivers</title>

          <author fullname="" initials="D." surname="Naor">
            <organization></organization>
          </author>

          <author fullname="" initials="M." surname="Noal">
            <organization></organization>
          </author>

          <author fullname="" initials="J." surname="Lotspiech">
            <organization></organization>
          </author>

          <date month="" year="2001" />
        </front>

        <seriesInfo name="Advances in Cryptology, Crypto '01,"
                    value="Springer-Verlag LNCS 2139, 2001, pp. 41-62" />
      </reference>

      <reference anchor="OFT"
                 target="http://ieeexplore.ieee.org/search/freesrchabstract.jsp?tp=&amp;arnumber=1199073">
        <front>
          <title>Key Establishment in Large Dynamic Groups Using One-Way
          Function Trees</title>

          <author fullname="" initials="A." surname="Sherman">
            <organization></organization>
          </author>

          <author fullname="" initials="D." surname="McGrew">
            <organization></organization>
          </author>

          <date month="May" year="2003" />
        </front>

        <seriesInfo name="IEEE Transactions on Software Engineering,"
                    value="Vol. 29, Issue 5" />

        <seriesInfo name="pp." value="444-458" />
      </reference>

      <reference anchor="PK01"
                 target="http://ieeexplore.ieee.org/search/freesrchabstract.jsp?tp=&amp;arnumber=953405">
        <front>
          <title>Analysis of the IPsec Key Exchange Standard</title>

          <author fullname="" initials="R." surname="Perlman">
            <organization></organization>
          </author>

          <author fullname="" initials="C." surname="Kaufman">
            <organization></organization>
          </author>

          <date month="June" year="2001" />
        </front>

        <seriesInfo name="Enabling Technologies: Infrastructure for         Collaborative"
                    value="Enterprises" />

        <seriesInfo name="WET ICE" value="2001" />

        <seriesInfo name="Proceedings. Tenth IEEE International Workshops on IEEE Transactions on Software Engineering"
                    value="pp. 150-156" />
      </reference>

      <reference anchor="PROT-REG"
                 target="http://www.iana.org/assignments/protocol-numbers/">
        <front>
          <title>Assigned Internet Protocol Numbers</title>

          <author>
            <organization></organization>
          </author>

          <date />
        </front>
      </reference>

      <?rfc include="reference.RFC.4046"?>

      <?rfc include='reference.RFC.3686'?>

      <?rfc include='reference.RFC.4359'?>

      <?rfc include='reference.RFC.4082'?>

      <?rfc include='reference.RFC.3740'?>

      <?rfc include='reference.RFC.3947'?>

      <?rfc include='reference.RFC.4301'?>

      <?rfc include='reference.RFC.4306'?>

      <?rfc include='reference.RFC.4309'?>

      <?rfc include='reference.RFC.4106'?>

      <?rfc include='reference.RFC.4543'?>

      <?rfc include='reference.RFC.5226'?>

      <?rfc include='reference.RFC.5996'?>

      <?rfc include='reference.RFC.5905'?>

      <reference anchor="MP04">
        <front>
          <title>Deriving, Attacking, and Defending the GDOI Protocol</title>

          <author fullname="Catherine Meadows" initials="C." surname="Meadows">
            <organization></organization>
          </author>

          <author fullname="Dusko Pavlovic" initials="D." surname="Pavlovic">
            <organization></organization>
          </author>

          <date month="September" year="2004" />
        </front>

        <seriesInfo name="European Symposium on Research in Computer Security (ESORICS) 2004,"
                    value="pp. 53-72" />
      </reference>

      <reference anchor="HD03">
        <front>
          <title>Multicast and Group Security</title>

          <author fullname="Thomas Hardjono" initials="T." surname="Hardjono">
            <organization></organization>
          </author>

          <author fullname="Lakshminath Dondeti" initials="L."
                  surname="Dondeti">
            <organization></organization>
          </author>

          <date year="2003" />
        </front>

        <seriesInfo name="Artech House Computer Security Series,"
                    value="ISBN 1-58053-342-6" />
      </reference>

      <reference anchor="FIPS180-3.2008"
                 target="http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf">
        <front>
          <title>Secure Hash Standard</title>

          <author>
            <organization>National Institute of Standards and
            Technology</organization>
          </author>

          <date month="October" year="2008" />
        </front>

        <seriesInfo name="FIPS" value="PUB 180-3" />
      </reference>

      <reference anchor="GDOI-REG"
                 target="http://www.iana.org/assignments/gdoi-payloads">
        <front>
          <title>Group Domain of Interpretation (GDOI) Payload Type
          Values</title>

          <author>
            <organization>Internet Assigned Numbers Authority</organization>
          </author>

          <date month="December" year="2004" />
        </front>

        <seriesInfo name="IANA" value="Registry" />
      </reference>
    </references>

    <?rfc rfcedstyle="yes"?>

    <section title="GDOI Applications">
      <t>GDOI can be used to distribute keys for several secure multicast
      applications, where different applications have different key management
      requirements. This section outlines two examples of ways that GDOI can
      be used. Other examples can be found in Section 10 of <xref
      target="HD03"></xref>.</t>

      <t>A simple application is secure delivery of periodic multicast content
      over an organization's IP network, perhaps a multicast video broadcast.
      Assuming the content delivery time frame is bounded and the group
      membership is not expected to change over time, there is no need for
      group policy to include a GROUPKEY-PUSH exchange, and there is no need
      for the GCKS to distribute a Rekey SA. Thus, the GDOI GCKS may only need
      to distribute a single set of Data-Security SAs to protect the
      time-bounded broadcast.</t>

      <t>In contrast, a persistent IP multicast application (e.g.,
      stock-ticker delivery service) may have many group members, where the
      group membership changes over time. A periodic change of Data-Security
      SAs may be desirable, and the potential for change in group membership
      requires the use of a group management method enabling de-authorization
      of group members. The GDOI GCKS will distribute the current set of
      Data-Security SAs and a Rekey SA to registering group members. It will
      then use regularly scheduled GROUPKEY-PUSH exchanges to deliver the new
      SAs for the group. Additionally, the group membership on the GCKS may be
      frequently adjusted, which will result in a GROUPKEY-PUSH exchange that
      delivers new Rekey SAs protected by a group management method. Each
      GROUPKEY-PUSH may include Data-Security SAs and/or a Rekey SA.</t>

      <t>In each example, the relevant policy is defined on the GCKS and
      relayed to group members using the GROUPKEY-PULL and/or GROUPKEY-PUSH
      protocols. Specific policy choices configured by the GCKS administrator
      depend on each application.</t>
    </section>

    <section title="Significant Changes from RFC 3547">
      <t>The following significant changes have been made from RFC 3547.</t>

      <t><list style="symbols">
          <t>The Proof of Possession (POP) payload was removed from the
          GROUPKEY-PULL exchange. It provided an alternate form of
          authorization, but its use was underspecified. Furthermore, Meadows
          and Pavlovic <xref target="MP04"></xref> discussed a
          man-in-the-middle attack on the POP authorization method, which
          would require changes to its semantics. No known implementation of
          RFC 3547 supported the POP payload, so it was removed. Removal of
          the POP payload obviated the need for the CERT payload in that
          exchange, and it was removed as well.</t>

          <t>The Key Exchange payloads (KE_I, KE_R) were removed from the
          GROUPKEY-PULL exchange. However, the specification for computing
          keying material for the additional encryption function in RFC 3547
          is faulty. Furthermore, it has been observed that because the GDOI
          registration message uses strong ciphers and provides authenticated
          encryption, additional encryption of the keying material in a GDOI
          registration message provides negligible value. Therefore, the use
          of KE payloads is deprecated in this memo.</t>

          <t>The Certificate Payload (CERT) was removed from the GROUPKEY-PUSH
          exchange. The use of this payload was underspecified. In all known
          use cases, the public key used to verify the GROUPKEY-PUSH payload
          is distributed directly from the key server as part of the
          GROUPKEY-PULL exchange.</t>

          <t>Supported cryptographic algorithms were changed to meet current
          guidance. Implementations are required to support AES with
          128&nbhy;bit keys to encrypt the rekey message and support SHA-256
          for cryptographic signatures. The use of DES is deprecated.</t>

          <t>New protocol support for AH.</t>

          <t>New protocol definitions were added to conform to the most recent
          "Security Architecture for the Internet Protocol" <xref
          target="RFC4301"></xref> and the "Multicast Extensions to the
          Security Architecture for the Internet Protocol" <xref
          target="RFC5374"></xref>. This includes addition of the GAP
          payload.</t>

          <t>New protocol definitions and semantics were added to support
          "Using Counter Modes with Encapsulating Security Payload (ESP) and
          Authentication Header (AH) to Protect Group Traffic" <xref
          target="RFC6054"> </xref>.</t>

          <t>Specification to IANA was added to better clarify the use of the
          GDOI Payloads registry.</t>
        </list></t>
    </section>
  </back>
</rfc>
