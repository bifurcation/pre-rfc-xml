<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<?xml-stylesheet type='text/xsl' 'rfc2629.xslt ?>


<?rfc rfcedstyle="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="std" ipr="trust200902" number="7523" submissionType="IETF" consensus="yes">


  <!-- ***** FRONT MATTER ***** -->

  <front>
    <title abbrev="OAuth JWT Assertion Profiles">JSON Web Token (JWT) Profile for&nbsp;OAuth&nbsp;2.0&nbsp;Client&nbsp;Authentication&nbsp;and&nbsp;Authorization&nbsp;Grants</title>

    <author fullname="Michael B. Jones" surname="Jones" initials="M.B.">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>

    <author fullname="Brian Campbell" initials="B." surname="Campbell">
      <organization abbrev="Ping Identity">Ping Identity</organization>
      <address>
        <email>brian.d.campbell@gmail.com</email>
      </address>
    </author>

    <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
      <organization abbrev="Salesforce">Salesforce</organization>
      <address>
        <email>cmortimore@salesforce.com</email>
      </address>
    </author>

    <date month="May" year="2015" />

    <area>Security</area>
    <workgroup>OAuth Working Group</workgroup>

    <keyword>OAuth</keyword>
    <keyword>JWT</keyword>
    <keyword>Assertion</keyword>
    <keyword>Token</keyword>
    <keyword>Security Token</keyword>

    <abstract>
      <t>This specification defines the use of a JSON Web Token (JWT) Bearer Token as a means for 
        requesting an OAuth 2.0 access token as well as for client authentication.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction" anchor="Introduction">
      <t>
	JSON Web Token (JWT) <xref target="JWT"/>
	is a JSON-based <xref target="RFC7159"/> security token encoding 
        that enables
	identity and security information to be shared across security
	domains.
        A security token is generally issued by an Identity Provider
        and consumed by a Relying Party that relies on its content to
        identify the token's subject for security-related purposes.
      </t>

      <t>
        The OAuth 2.0 Authorization Framework <xref target="RFC6749"/> provides
        a method for making authenticated HTTP requests to a resource using an access token.
        Access tokens are issued to third-party clients by an
        authorization server (AS) with the (sometimes implicit) approval of the resource owner.
        In OAuth, an authorization grant is an abstract term used to describe
        intermediate credentials that represent the resource owner
        authorization.  An authorization grant is used by the client to obtain an access token.
        Several authorization grant types are defined to support a wide range
        of client types and user experiences.
        OAuth also allows for the definition of new extension grant types
        to support additional clients or to provide a bridge between OAuth and other trust frameworks.
        Finally, OAuth allows the definition of additional authentication mechanisms to be used by clients when interacting with the authorization server.
      </t>

      <t>
	"Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants"
	<xref target="RFC7521"/> 
	is an abstract extension to OAuth 2.0 that provides a general
        framework for the use of assertions (a.k.a. security tokens) as client credentials and/or authorization grants with OAuth 2.0.
        This specification profiles 
	the OAuth Assertion Framework
	<xref target="RFC7521"/>
	to define an extension grant type that uses a JWT Bearer Token to
        request an OAuth 2.0 access token as well as for use as client credentials.
        The format and processing rules for the JWT defined in this specification are intentionally similar,
        though not identical, to those in the closely related specification "Security
	Assertion Markup Language (SAML) 2.0 Profile for OAuth 2.0 Client Authentication 
        and Authorization Grants"
	<xref target="RFC7522"/>.
        The differences arise where the structure and semantics of JWTs differ from SAML Assertions.
        JWTs, for example, have no direct equivalent to the &lt;SubjectConfirmation&gt; or &lt;AuthnStatement&gt; elements of SAML Assertions.
      </t>

      <t>This document defines how a JWT Bearer Token can be used to request an access token when a client wishes to utilize an existing trust
        relationship, expressed through the semantics of
	the JWT,
        without a direct user-approval step at the authorization server.  It also defines how a JWT can be used as a client authentication mechanism.
        The use of a security token for client
        authentication is orthogonal to and separable from using a security token as an
        authorization grant.  They can be used either in combination or separately.
        Client authentication using a JWT is nothing more than an alternative way for a client to authenticate
        to the token endpoint and must be used in conjunction with some grant type to form a complete and
        meaningful protocol request. JWT authorization grants may be used with or without client authentication
        or identification. Whether or not client authentication is needed in conjunction with a JWT authorization
        grant, as well as the supported types of client authentication, are policy decisions at the discretion of the authorization server.
      </t>
      <t>The process by which the client obtains the JWT, prior to exchanging it with the authorization server or using it for client authentication, is out of scope.</t>

      <section title="Notational Conventions" anchor="NotationalConventions">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
          document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.
        </t>
        <t>
          Unless otherwise noted, all the protocol parameter names and values are case sensitive.
        </t>
      </section>

      <section title='Terminology' anchor='Terminology'>
        <t>
	  All terms are as defined in the following specifications:
	  "The OAuth 2.0 Authorization Framework" <xref target="RFC6749"/>,
	  the OAuth Assertion Framework
	  <xref target="RFC7521"/>, and "JSON Web Token (JWT)" <xref target="JWT"/>.
        </t>
      </section>

    </section>

    <section title="HTTP Parameter Bindings for Transporting Assertions" anchor="Transporting">
      <t>
	The OAuth Assertion Framework
	<xref target="RFC7521"/> 
	defines generic HTTP parameters for transporting assertions (a.k.a. security tokens)
	during interactions with a token endpoint.
	This section defines specific parameters and treatments of those parameters
	for use with JWT Bearer Tokens.
      </t>
      <section title="Using JWTs as Authorization Grants" anchor="AuthGrants">
	<t>
	  To use a Bearer JWT as an authorization grant, the client uses an access token request as defined in
	  Section 4 of 
	  the OAuth Assertion Framework
	  <xref target="RFC7521"/> 
	  with the following specific parameter values and encodings.
	</t>
	<t>The value of the <spanx style='verb'>grant_type</spanx> is
	<spanx style='verb'>urn:ietf:params:oauth:grant-type:jwt-bearer</spanx>.</t>
	<t>
	  The value of the <spanx style='verb'>assertion</spanx> parameter
	  MUST contain a single JWT.
	</t>
	<t>
	  The <spanx style='verb'>scope</spanx> parameter may be used, as defined in
	  the OAuth Assertion Framework
	  <xref target="RFC7521"/>, to indicate the requested scope.
	</t>
  <t>Authentication of the client is optional, as described in
   Section 3.2.1 of OAuth 2.0 <xref target="RFC6749"/> and
   consequently, the <spanx style='verb'>client_id</spanx> is only needed
   when a form of client authentication that relies on the parameter is used.</t>
  <t>The following example demonstrates an access token request with a JWT as an authorization grant
	(with extra line breaks for display purposes only):</t>

        <figure>
          <artwork><![CDATA[
  POST /token.oauth2 HTTP/1.1
  Host: as.example.com
  Content-Type: application/x-www-form-urlencoded

  grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer
  &assertion=eyJhbGciOiJFUzI1NiIsImtpZCI6IjE2In0.
  eyJpc3Mi[...omitted for brevity...].
  J9l-ZhwP[...omitted for brevity...]
]]></artwork>
        </figure>

      </section>
      <section title="Using JWTs for Client Authentication" anchor="ClientAuth">
	<t>To use a JWT Bearer Token for client authentication, the client uses the following parameter values and encodings.</t>
	<t>The value of the <spanx style='verb'>client_assertion_type</spanx> is
	<spanx style='verb'>urn:ietf:params:oauth:client-assertion-type:jwt-bearer</spanx>.</t>
	<t>
	  The value of the <spanx style='verb'>client_assertion</spanx> parameter
	  contains a single JWT. It MUST NOT contain more than one JWT.
  </t>

  <t>The following example demonstrates client
     authentication using a JWT during the presentation of an authorization code grant in an
     access token request
     (with extra line breaks for display purposes only):</t>

        <figure>
          <artwork><![CDATA[
  POST /token.oauth2 HTTP/1.1
  Host: as.example.com
  Content-Type: application/x-www-form-urlencoded

  grant_type=authorization_code&
  code=n0esc3NRze7LTCu7iYzS6a5acc3f0ogp4&
  client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3A
  client-assertion-type%3Ajwt-bearer&
  client_assertion=eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.
  eyJpc3Mi[...omitted for brevity...].
  cC4hiUPo[...omitted for brevity...]
]]></artwork>
        </figure>

      </section>
    </section>

    <section title="JWT Format and Processing Requirements" anchor="Processing">
      <t>
	In order to issue an access token response as described in
	OAuth 2.0 <xref target="RFC6749"/>
	or to rely on a JWT for client authentication,
	the authorization server MUST validate the JWT according to the criteria below.
	Application of additional restrictions and policy are at the discretion of the authorization server.
      </t>
      <t>
	<list style="numbers">

	  <t>
	    The JWT MUST contain an <spanx style="verb">iss</spanx>
	    (issuer) claim that contains a unique identifier for the
	    entity that issued the JWT.
	    In the absence of an application profile specifying
	    otherwise, compliant applications MUST compare issuer
	    values using the Simple String Comparison method defined in Section
	    6.2.1 of RFC 3986 <xref target="RFC3986"/>.
	  </t>
	  <t>
	    The JWT MUST contain a <spanx style="verb">sub</spanx>
	    (subject) claim identifying the
	    principal that is the subject of the JWT. Two cases need to
	    be differentiated:
      <list style="letters">
        <t> For the authorization grant, the subject typically identifies an authorized accessor for which the
            access token is being requested (i.e., the resource owner or an authorized delegate), but
            in some cases, may be a pseudonymous identifier or other value denoting an anonymous user.</t>

        <t>
	  For client authentication, the subject MUST be the
          <spanx style='verb'>client_id</spanx> of the OAuth client.
        </t>
      </list>
	  </t>
	  <t>
	    The JWT MUST contain an <spanx style="verb">aud</spanx>
	    (audience) claim containing a value that
	    identifies the authorization server as an intended audience.
	    The token endpoint URL of the authorization server MAY be used as a
	    value for an <spanx style="verb">aud</spanx> element to identify
	    the authorization server as an intended audience of the JWT.
      The authorization server MUST reject any JWT that does not
      contain its own identity as the intended audience.
      In the absence of an application profile specifying
      otherwise, compliant applications MUST compare the audience
      values using the Simple String Comparison method defined in Section
      6.2.1 of RFC 3986 <xref target="RFC3986"/>.
      As noted in <xref target="Interoperability"/>, the precise strings to be used
      as the audience for a given authorization server must be configured out of band
      by the authorization server and the issuer of the JWT.
	  </t>
	  <t>
	    The JWT MUST contain an <spanx style="verb">exp</spanx>
	    (expiration time) claim that limits the time window during
	    which the JWT can be used.  The authorization server
	    MUST reject any JWT with an expiration time that has passed,
	    subject to allowable clock skew between systems.
            Note that the
	    authorization server may reject JWTs with an <spanx
	    style="verb">exp</spanx> claim value that is
	    unreasonably far in the future.
	  </t>
	  <t>
	    The JWT MAY contain an <spanx style="verb">nbf</spanx>
	    (not before) claim that identifies the time before which
	    the token MUST NOT be accepted for processing.
	  </t>
	  <t>
	    The JWT MAY contain an <spanx style="verb">iat</spanx>
	    (issued at) claim that identifies the time at which the
	    JWT was issued.  Note that the authorization server may reject JWTs
	    with an <spanx style="verb">iat</spanx> claim value that is
	    unreasonably far in the past.
	  </t>
	  <t>
	    The JWT MAY contain a <spanx style="verb">jti</spanx>
	    (JWT ID) claim that provides a unique identifier for
	    the token.
	    The authorization server MAY ensure that JWTs are not
	    replayed by maintaining the set of used
	    <spanx style="verb">jti</spanx> values for the length of
	    time for which the JWT would be considered valid based
	    on the applicable <spanx style="verb">exp</spanx> instant.
	  </t>
	
	  <t>
	    The JWT MAY contain other claims.
	  </t>
	  <t>
	    The JWT MUST be digitally signed or have a Message Authentication Code (MAC) applied
      by the issuer.  The authorization server
      MUST reject JWTs with an invalid signature or MAC.
	  </t>
	  <t>
	    The authorization server MUST reject a JWT that is not
	    valid in all other respects per 
	    "JSON Web Token (JWT)" <xref target="JWT"/>.
	  </t>
	</list>
      </t>

      <section title="Authorization Grant Processing" anchor="GrantProcessing">

	<t>
	  JWT authorization grants may be used with or without client authentication
	  or identification. Whether or not client authentication is needed in
	  conjunction with a JWT authorization grant, as well as the supported types
	  of client authentication, are policy decisions at the discretion of the
	  authorization server. However, if client credentials are present in
	  the request, the authorization server MUST validate them.
	</t>

	<t>If the JWT is not valid, or the current time is not within the token's valid time window for use, the
	authorization server constructs an error response as defined in
	OAuth 2.0 <xref target="RFC6749"/>.
	The value of the <spanx style='verb'>error</spanx> parameter MUST be the
	<spanx style='verb'>invalid_grant</spanx> error code.  The authorization server
	MAY include additional information regarding the reasons the JWT was considered invalid using the
	<spanx style='verb'>error_description</spanx> or <spanx style='verb'>error_uri</spanx> parameters.
	<figure>
	  <preamble>For example:</preamble>
	  <artwork><![CDATA[
  HTTP/1.1 400 Bad Request
  Content-Type: application/json
  Cache-Control: no-store

  {
   "error":"invalid_grant",
   "error_description":"Audience validation failed"
  }
]]></artwork>
	</figure>
	</t>
      </section>

      <section title="Client Authentication Processing" anchor="ClientProcessing">

	<t>If the client JWT is not valid, the
	authorization server constructs an error response as defined in
	OAuth 2.0 <xref target="RFC6749"/>.
	The value of the <spanx style='verb'>error</spanx> parameter MUST be the
	<spanx style='verb'>invalid_client</spanx> error code.  The authorization server
	MAY include additional information regarding the reasons the JWT was considered invalid using the
	<spanx style='verb'>error_description</spanx> or <spanx style='verb'>error_uri</spanx> parameters.
	</t>
      </section>
    </section>

    <section title="Authorization Grant Example" anchor="GrantExample">
      <t>The following examples illustrate what a conforming JWT and an access token request would look like.
      </t>
      <t>
	The example shows a JWT issued and signed by the system entity identified as
	<spanx style='verb'>https://jwt-idp.example.com</spanx>.
	The subject of the JWT is identified by email address as <spanx style='verb'>mike@example.com</spanx>.
	The intended audience of the JWT is <spanx style='verb'>https://jwt-rp.example.net</spanx>,
	which is an identifier with which the authorization server identifies itself.
	The JWT is sent as part of an access token request to the authorization server's
	token endpoint at <spanx style='verb'>https://authz.example.net/token.oauth2</spanx>.
      </t>
      <figure>
	<preamble>
	  Below is an example JSON object that could be encoded to
	  produce the JWT Claims Set for a JWT:
	</preamble>
	<artwork><![CDATA[
  {"iss":"https://jwt-idp.example.com",
   "sub":"mailto:mike@example.com",
   "aud":"https://jwt-rp.example.net",
   "nbf":1300815780,
   "exp":1300819380,
   "http://claims.example.com/member":true}
]]></artwork>
      </figure>

      <figure>
	<preamble>
	  The following example JSON object, used as the header of a
	  JWT, declares that the JWT is signed with the Elliptic Curve 
          Digital Signature Algorithm (ECDSA) P-256
	  SHA-256 using a key identified by the <spanx style="verb">kid</spanx> value <spanx style="verb">16</spanx>.
	</preamble>
	<artwork><![CDATA[
  {"alg":"ES256","kid":"16"}
]]></artwork>
      </figure>

      <figure>
	<preamble>
	  To present the JWT with the claims and header shown in the previous example as part of an access token request, for example,
	  the client might make the following HTTPS request
	  (with extra line breaks for display purposes only):
	</preamble>
	<artwork><![CDATA[
  POST /token.oauth2 HTTP/1.1
  Host: authz.example.net
  Content-Type: application/x-www-form-urlencoded

  grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer
  &assertion=eyJhbGciOiJFUzI1NiIsImtpZCI6IjE2In0.
  eyJpc3Mi[...omitted for brevity...].
  J9l-ZhwP[...omitted for brevity...]
]]></artwork>
      </figure>
    </section>

    <section anchor="Interoperability" title="Interoperability Considerations">

      <t>
	Agreement between system entities regarding identifiers,
	keys, and endpoints is required in order to achieve interoperable
	deployments of this profile. Specific items that require agreement are as follows:
	values for the issuer and audience identifiers, the location of the token endpoint, the key used to
	apply and verify the digital signature or MAC over the JWT, one-time use restrictions on the JWT,
  maximum JWT lifetime allowed, and the specific subject and claim requirements of the JWT.
	The exchange of such information is explicitly out of scope for this specification.
	In some cases, additional profiles may be created that constrain or prescribe these values or specify
	how they are to be exchanged.
	Examples of such profiles include
	the OAuth 2.0 Dynamic Client Registration Core Protocol <xref target="OAUTH-DYN-REG"/>,
	OpenID Connect Dynamic Client Registration 1.0 <xref target="OpenID.Registration"/>,
	and OpenID Connect Discovery 1.0 <xref target="OpenID.Discovery"/>.
      </t>
      <t>
        The <spanx style="verb">RS256</spanx> algorithm, from <xref target="JWA"/>, is a mandatory-to-implement JSON Web
        Signature algorithm for this profile.
      </t>

    </section>

    <section anchor="Security" title="Security Considerations">
   
      <t>
       The security considerations described within the following specifications are all applicable 
       to this document:
       "Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants"
       <xref target="RFC7521"/>,
       "The OAuth 2.0 Authorization Framework" <xref target="RFC6749"/>, and "JSON Web Token (JWT)" <xref target="JWT"/>.
      </t>
      <t>
        The specification does not mandate replay protection for the JWT
        usage for either the authorization grant or for client
        authentication. It is an optional feature, which implementations may employ at their own discretion.
     </t>
   
    </section>
    <section anchor="Privacy" title="Privacy Considerations">

      <t>
        A JWT may contain privacy-sensitive information and, to prevent disclosure of such information to unintended parties,
        should only be transmitted over encrypted channels, such as Transport Layer Security (TLS). In cases where it is desirable to prevent disclosure
        of certain information to the client, the JWT should be encrypted to the authorization server.
      </t>
      <t>
        Deployments should determine the minimum amount of information necessary to complete the exchange and include
        only such claims in the JWT. In some cases, the <spanx style="verb">sub</spanx> (subject) claim can be a value representing an anonymous
        or pseudonymous user, as described in Section 6.3.1 of
	the OAuth Assertion Framework
	<xref target="RFC7521"/>.
      </t>
    </section>
    <section title='IANA Considerations' anchor="IANA">
      <section title='Sub-Namespace Registration of urn:ietf:params:oauth:grant-type:jwt-bearer'
	       anchor="grant-type_reg">
	<t>
	  This section registers the value
	  <spanx style='verb'>grant-type:jwt-bearer</spanx> in the
	  IANA "OAuth URI" registry established by
	  "An IETF URN Sub-Namespace for OAuth" <xref target="RFC6755"/>.

	  <list style='symbols'>
	    <t>URN: urn:ietf:params:oauth:grant-type:jwt-bearer</t>
	    <t>Common Name: JWT Bearer Token Grant Type Profile for OAuth 2.0</t>
	    <t>Change Controller: IESG</t>
	    <t>Specification Document: RFC 7523</t>
	  </list>
	</t>
      </section>
      <section title='Sub-Namespace Registration of urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
	       anchor="client-assertion-type_reg">
	<t>
	  This section registers the value
	  <spanx style='verb'>client-assertion-type:jwt-bearer</spanx> in the
	  IANA "OAuth URI" registry established by
	  "An IETF URN Sub-Namespace for OAuth" <xref target="RFC6755"/>.

	  <list style='symbols'>
	    <t>URN: urn:ietf:params:oauth:client-assertion-type:jwt-bearer</t>
	    <t>Common Name: JWT Bearer Token Profile for OAuth 2.0 Client Authentication </t>
	    <t>Change Controller: IESG</t>
	    <t>Specification Document: RFC 7523</t>
	  </list>
	</t>
      </section>
    </section>
  </middle>

  <!-- *****BACK MATTER ***** -->

  <back>


    <references title="Normative References">

      <?rfc include='reference.RFC.2119.xml' ?>
      <?rfc include='reference.RFC.3986.xml' ?>
      <?rfc include='reference.RFC.6749.xml' ?>
      <?rfc include='reference.RFC.7159.xml' ?>

<!--draft-ietf-jose-json-web-algorithms, in queue -->
      <reference anchor="JWA" target="http://www.rfc-editor.org/info/rfc7518">
        <front>
	  <title>JSON Web Algorithms (JWA)</title>
	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>
	  <date month="May" year="2015"/>
        </front>
        <seriesInfo name="RFC" value="7518"/>
      </reference>

<!--draft-ietf-oauth-assertions, in queue -->
      <reference anchor="RFC7521" target='http://www.rfc-editor.org/info/rfc7521'>
	<front>
	  <title abbrev="OAuth Assertion Framework">Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants</title>
	  <author fullname="Brian Campbell" initials="B." surname="Campbell">
	    <organization abbrev="Ping Identity">Ping Identity</organization>
	  </author>
	  <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
	    <organization abbrev="Salesforce">Salesforce.com</organization>
	  </author>
	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization abbrev="Microsoft">Microsoft</organization>
	  </author>
	  <author fullname="Yaron Y. Goland" initials="Y.Y." surname="Goland">
	    <organization abbrev="Microsoft">Microsoft</organization>
	  </author>
	  <date month="May" year="2015" />
	</front>
	<seriesInfo name="RFC" value="7521"/>
      </reference>

<!--draft-ietf-oauth-json-web-token, in queue -->
      <reference anchor="JWT" target='http://www.rfc-editor.org/info/rfc7519'>
        <front>
          <title>JSON Web Token (JWT)</title>
	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>
	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization abbrev="Ping Identity">Ping Identity</organization>
	    <address>
	      <email>ve7jtb@ve7jtb.com</email>
	    </address>
	  </author>
	  <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
	    <organization abbrev="NRI">Nomura Research Institute</organization>
	    <address>
	      <email>n-sakimura@nri.co.jp</email>
	    </address>
	  </author>
	  <date month="May" year="2015"/>
        </front>
        <seriesInfo name="RFC" value="7519"/>
      </reference>
    </references>

    <references title="Informative References">
      <?rfc include='reference.RFC.6755.xml' ?>

<!--draft-ietf-oauth-dyn-reg, Active-->
<reference anchor='OAUTH-DYN-REG'>
<front>
<title>OAuth 2.0 Dynamic Client Registration Protocol</title>
<author initials='J' surname='Richer' fullname='Justin Richer'>
    <organization />
</author>
<author initials='M.B.' surname='Jones' fullname='Michael B. Jones'>
    <organization />
</author>
<author initials='J' surname='Bradley' fullname='John Bradley'>
    <organization />
</author>
<author initials='M' surname='Machulak' fullname='Maciej Machulak'>
    <organization />
</author>
<author initials='P' surname='Hunt' fullname='Phil Hunt'>
    <organization />
</author>
<date month='April' year='2015' />
</front>
<seriesInfo name='Work in Progress,' value='draft-ietf-oauth-dyn-reg-28' />
</reference>

<!--draft-ietf-oauth-saml2-bearer, in queue -->
      <reference anchor="RFC7522" target="http://www.rfc-editor.org/info/rfc7522">
	<front>
	  <title abbrev="OAuth SAML Assertion Profiles">Security Assertion
	  Markup Language (SAML) 2.0 Profile for OAuth 2.0 Client Authentication and Authorization Grants</title>
	  <author fullname="Brian Campbell" initials="B." surname="Campbell">
	    <organization abbrev="Ping Identity">Ping Identity</organization>
	  </author>
	  <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
	    <organization abbrev="Salesforce">Salesforce.com</organization>
	  </author>
	  <author fullname="Michael B. Jones" surname="Jones" initials="M.B.">
	    <organization>Microsoft</organization>
	  </author>
	  <date month="May" year="2015" />
	</front>
	<seriesInfo name="RFC" value="7522"/>
      </reference>

      <reference anchor="OpenID.Registration" target="http://openid.net/specs/openid-connect-registration-1_0.html">
	<front>
	  <title>OpenID Connect Dynamic Client Registration 1.0 incorporating errata set 1</title>
	  <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
	    <organization abbrev="NRI">Nomura Research Institute, Ltd.</organization>
	  </author>
	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization abbrev="Ping Identity">Ping Identity</organization>
	  </author>
	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization abbrev="Microsoft">Microsoft</organization>
	  </author>
	  <date month="November" year="2014"/>
	</front>
      </reference>

      <reference anchor="OpenID.Discovery" target="http://openid.net/specs/openid-connect-discovery-1_0.html">
	<front>
	  <title>OpenID Connect Discovery 1.0 incorporating errata set 1</title>
	  <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
	    <organization abbrev="NRI">Nomura Research Institute, Ltd.</organization>
	  </author>
	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization abbrev="Ping Identity">Ping Identity</organization>
	  </author>
	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization abbrev="Microsoft">Microsoft</organization>
	  </author>
	  <author fullname="Edmund Jay" initials="E." surname="Jay">
	    <organization abbrev="Illumila">Illumila</organization>
	  </author>
	  <date month="November" year="2014"/>
	</front>
      </reference>
    </references>

    <section title='Acknowledgements' anchor='Acknowledgements' numbered="no">

      <t>
	This profile was derived from
	"Security Assertion Markup Language (SAML) 2.0 Profile for OAuth 2.0 Client Authentication and Authorization Grants"
	<xref target="RFC7522"/>,
	which has the same authors as this document.
      </t>
    </section>
  </back>
</rfc>
