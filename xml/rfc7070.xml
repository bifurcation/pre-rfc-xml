<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<!--used v2 -->

<?rfc toc="yes" ?>
<?rfc tocdepth="2" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc rfcedstyle="yes"?>

<rfc
    submissionType="IETF"
    category="std"
    consensus="yes"
    number="7070"
    ipr="trust200902">

  <front>

    <title
        abbrev="Reputation Architecture"> An Architecture for Reputation
    Reporting </title>
    <author
        fullname="Nathaniel Borenstein"
        initials="N."
        surname="Borenstein">
      <organization>Mimecast</organization>
      <address>
        <postal>
          <street>203 Crescent St., Suite 303</street>
          <city>Waltham</city>
          <region>MA</region>
          <code>02453</code>
          <country>USA</country>
        </postal>
        <phone>+1 781 996 5340</phone>
        <email>nsb@guppylake.com</email>
      </address>
    </author>

    <author
        fullname="Murray S. Kucherawy"
        initials="M. S."
        surname="Kucherawy">
      <organization/>
      <address>
        <postal>
          <street>270 Upland Drive</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94127</code>
          <country>USA</country>
        </postal>
        <email>superuser@gmail.com</email>
      </address>
    </author>

    <date
        month="November" year="2013"></date>

    <area>Applications</area>
    <workgroup>REPUTE Working Group</workgroup>

    <keyword>domain</keyword>
    <keyword>security</keyword>
    <keyword>messaging</keyword>
    <keyword>dkim</keyword>
    <keyword>spf</keyword>
    <keyword>authentication</keyword>
    <keyword>reputation</keyword>

    <abstract>
      <t> This document describes a general architecture for a
      reputation-based service, allowing one to request
      reputation-related data over the Internet,
      where "reputation" refers to predictions or expectations about
      an entity or an identifier such as a domain name.  The document
      roughly follows the recommendations of RFC 4101 for describing a protocol
      model. </t>
    </abstract>
  </front>

  <middle>
    <section
        title="Introduction">
      <t> Historically, many Internet protocols have operated between
      unauthenticated entities. For example, an email message's author
      field (From:) <xref
      target="MAIL"></xref> can contain any display name or
      address and is not verified by the recipient or other agents
      along the delivery path. Similarly, a server that sends email using the
      Simple Mail Transfer Protocol <xref target="SMTP"></xref> trusts that
      the Domain Name System <xref target="DNS"></xref> has led it to the
      intended receiving server. Both kinds of trust are easily betrayed,
      opening the operation to subversion of some kind, which makes spam,
      phishing, and other attacks even easier than they
      would otherwise be. </t>

      <t> In recent years, explicit identity authentication mechanisms have
      begun to see wider deployment. For example, the DomainKeys Identified
      Mail <xref target="DKIM"></xref> protocol permits associating a
      validated identifier to a message.  This association is
      cryptographically strong, and is an improvement over the
      prior state of affairs, but it does not distinguish
      between identifiers of good actors and bad. Even
      when it is possible to validate the domain name in an
      author field (e.g., "trustworthy.example.com" in
      "john.doe@trustworthy.example.com"), there is no basis for
      knowing whether it is associated with a good actor who is worthy
      of trust. As a practical matter, both bad actors and good
      adopt basic authentication mechanisms like DKIM. In fact,
      bad actors tend to adopt them even more rapidly than the
      good actors do in the hope that some receivers will confuse
      identity authentication with identity assessment. The
      former merely means that the name is being used by its
      owner or their agent, while the latter makes a statement
      about the quality of the owner.</t>

      <t> With the advent of these authentication protocols, it is
      possible to satisfy the requirement for a mechanism
      by which mutually trusted parties can exchange
      assessment information about other actors.  For these purposes,
      we may usefully define "reputation" as "the estimation in which
      an identifiable actor is held, especially by the community or
      the Internet public generally".  (This is based on the definition of
      "reputation" in <xref target="RANDOMHOUSE"/>.) We may call an
      aggregation of individual assessments "reputation input".
      </t>

      <t> While the need for reputation services has been perhaps
      especially clear in the email world, where abuses are commonplace,
      other Internet services are coming under attack and may have a
      similar need.  For instance, a reputation mechanism could be
      useful in rating the security of web sites, the quality of
      service of an Internet Service Provider (ISP), or an Application
      Service Provider (ASP).  More generally, there are many different
      opportunities for use of reputation services, such as customer
      satisfaction at e-commerce
      sites, and even things unrelated to Internet protocols, such as
      plumbers, hotels, or books. Just as human beings traditionally
      rely on the recommendations of trusted parties in the physical
      world, so too they can be expected to make use of such
      reputation services in a variety of applications on the
      Internet. </t>
      
      <t> A full trust architecture encompasses a range of actors and
      activities, to enable an end-to-end service for creating, exchanging, and
      consuming trust-related information.  One component of that is a
      query mechanism, to permit retrieval of a reputation.
      Not all such reputation services will need to convey the same
      information.  Some need only to produce a basic rating, while
      others need to provide underlying detail.  This is akin to the
      difference between check approval and a credit report. </t>

      <t>An overall reckoning of goodness versus badness can be
      defined generically, but specific applications are likely to
      want to describe reputations for multiple attributes: an
      e-commerce site might be rated on price, speed of delivery,
      customer service, etc., and might receive very different ratings
      on each.  Therefore, the architecture defines a generic query mechanism
      and basic format for reputation retrieval, but allows
      extensions for each application. </t>

      <t> Omitted from this architecture is the means by which a
      reputation-reporting agent goes about collecting such data and
      the method for creating an evaluation.  The mechanism defined
      here merely enables asking a question and getting an answer; the
      remainder of an overall service provided by such a reputation
      agent is specific to the implementation of that service and is
      out of scope here. </t>
    </section>
    <!-- Introduction -->
    
    <section title="Overview">
      <t> The basic premise of this reputation system involves a client that
          is seeking to evaluate content based on an identifier associated
          with the content, and a reputation service provider that collects,
          aggregates, and makes available for consumption, scores based on the
          collected data.  Typically, client and service operators enter into
	  some kind of agreement during which some parameters are exchanged,
	  such as: the location at which the reputation service can be reached,
	  the nature of the reputation data being offered, possibly some
          client authentication details, and the like. </t>

      <t> Upon receipt of some content the client operator wishes to evaluate
          (an Internet message, for example), the client extracts from the
	  content one or more identifiers of interest to be evaluated.  Examples
          of this include the domain name found in the From: field of a message,
          or the domain name extracted from a valid DKIM signature. </t>

      <t> Next, the goal is to ask the reputation service provider what the
          reputation of the extracted identifier is.  The query will contain
	  the identifier to be evaluated and possibly some context-specific
	  information (such as to establish the context of the query, e.g.,
	  an email message) or client-specific information.
          The client typically folds the data in the response into whatever
          local evaluation logic it applies to decide what disposition the
          content deserves. </t>
    </section>

    <section title="Related Documents" anchor="docs">
      <t> This document presents a high-level view of the reputation
          architecture. </t>

      <t> For the purposes of sending and receiving reputation information,
          <xref target="RFC7071"/> defines a media type
          for containing responses to reputation queries, and a serialization
          format for these data (with examples).  It also creates
          the registry for specific reputation contexts and the parameters
          related to them. </t>

      <t> <xref target="RFC7072"/> describes how to construct
          and issue reputation queries and replies in the context of this
          architecture using the HyperText Transport Protocol (HTTP) as the
          query protocol. </t>

      <t> Finally, <xref target="RFC7073"/> defines
          (and registers) a first, common, reputation application, namely
          the evaluation of portions of an email message as subjects for
          reputation queries and replies. </t>
    </section>

    <section
        title="High-Level Architecture">
      <t>This document outlines the reputation query and response mechanism. It
      provides the following definitions:
      <list style="symbols">
        <t>Vocabulary for the current work and work of this type;</t>
        <t>The types and content of queries that can be
        supported;</t>
        <t>The extensible range of response information that can be
        provided;</t>
        <t>Query/response transport conventions.</t>
        </list>It provides an extremely simple
        query/response model that can be carried over a variety of
        transports, including the Domain Name System.  (Although not
        typically thought of as a 'transport', the DNS provides generic
        capabilities and can be thought of as a mechanism for transporting
        queries and responses that have nothing to do with Internet addresses,
        such as is done with a DNS BlockList <xref target="DNSBL"/>.)
        Each specification for Repute transport is independent of any
        other specification.  </t>

      <t>The precise syntaxes of both the query and response are
      application specific.  An application within this architecture defines
      the parameters available to queries of that type, and it also defines
      the data returned in response to any query.</t>

      <section anchor="arch_example"
	title="Example of a Reputation Service Being Used">
      <t>A reputation mechanism functions as a component of an overall
      service.  A current example is that of an email system that uses
      DKIM <xref target="DKIM"/>
      to affix a stable identifier to a message and then uses that as a 
      basis for evaluation:

      <figure anchor="fig-dkim"
              title="Actors in a Trust Sequence Using DKIM">
      <artwork>
<![CDATA[
     +-------------+                           +------------+
     |   Sender    |                           | Recipient  |
     +-------------+                           +------------+
            |                                         ^
            V                                         |
     +-------------+                           +------------+
     |     MSA     |                           |     MDA    |
     +-------------+                           +------------+
            |                                         ^
            |                                         |
            |                                  +------------+
            |                                  |  Handling  |
            |                                  |   Filter   |
            |                                  +------------+
            |                                         ^
            |                                         |
            |             +------------+       +------------+
            |             | Reputation |<=====>| Identifier |
            |             |  Service   |       |  Assessor  |
            |             +------------+       +------------+
            |                                         ^
            V                                         |
     +------------+  Responsible Identifier    +------------+
     | Identifier |. . . . . . . . . . . . . .>| Identifier |
     |   Signer   |         (DKIM)             |  Verifier  |
     +------------+                            +------------+
            |                                         ^
            V                                         |
     +-------------+       /~~~~~~~~~~\        +------+-----+
     |     MTA     |----->( other MTAs )------>|    MTA     |
     +-------------+       \~~~~~~~~~~/        +------------+]]>
        </artwork> </figure>

	See <xref target="EMAIL-ARCH"/> for a general description
        of the Internet messaging architecture.  In particular, the terms
        Message Submission Agent (MSA), Message Delivery Agent (MDA), and
        Message Transfer Agent (MTA) are described there. </t>

    <t> In this figure, the solid
        lines indicate the flow of a message; the dotted line indicates transfer
        of validated identifiers within the message content; and the double
        line shows the query and response of the reputation information. </t>

    <t> Here, the DKIM Service
        provides one or more stable identifiers that is the basis for the
        reputation query.  On receipt of a message from an MTA, the
        DKIM Service provides a
        (possibly empty) set of validated identifiers -- domain names, in this
        case -- that are the subjects of reputation queries made by
        the Identifier Assessor.  The Identifier Assessor queries a Reputation
        Service to determine the reputation of the provided identifiers, and
        delivers the identifiers and their reputations to the Handling Filter.
        The Handling Filter makes a decision about whether and how to deliver
        the message to the recipient based on these and other inputs about
        the message, possibly including evaluation mechanisms in addition to
        DKIM. </t>
    </section>
    </section>
    
    <section
        anchor="terms_and_defs"
        title="Terminology and Definitions">
      <t>This section defines terms used in the rest of the document.</t>
      
      <section
          anchor="defs_application"
          title="Application">
        <t> An "Application" is a specific context in which reputation queries
        are made.  Some obvious popular examples include restaurants, movies,
        or providers of various services. </t>

	<t> Applications have different sets
        of attributes of interest, and so the subjects of queries and the
        resulting responses will vary in order
        to describe the reputations of entities in their respective contexts.
        For example,
        the Application "movies" would have a different set of properties of
        interest and associated ratings (see below) from "restaurants".  It is
        therefore necessary for them to be formally defined. </t>
      </section>

      <section
          anchor="defs_vocabulary"
          title="Response Set">
        <t> A "Response Set" is a representation for data that are returned
	in response to a reputation query about a particular entity within
        the context of an Application.  A Response Set will always contain
	at least the following components:

        <list style="symbols">
		<t> the name of the entity being rated; </t>

		<t> the Assertion (see <xref target="defs_assertion"/>); </t>

		<t> the Rating (see <xref target="defs_assertion"/>). </t>
 	</list> </t>

	<t> The full content of the Response Set is specific to the
 	Application; though all Applications have these few key
        Response Set fields in common, some of the reputation data returned in
        the evaluation of email senders would be different than that returned
        about a movie, restaurant, or baseball player.  The specific meaning
	of a Rating is also specific to an Application. </t>

        <t> A Response Set is declared in a specification document,
        along with a symbolic name representing the Application.
        The specifying documents will include the details of query parameters
        and responses particular to that Application.  The symbolic names
        and corresponding specifying documents are registered with IANA in
        the "Reputation Applications" registry in order to prevent name
        collisions and provide convenient references to the documents. </t>

        <t> IANA registries are created in <xref target='RFC7071'/>. </t>
       </section>

       <section anchor="defs_assertion" title="Assertions and Ratings">
         <t> One of the key properties of a Response Set is called an
             "Assertion".  Assertions are claims made about the subject
             of a reputation query.  For example, one might assert
             that a particular restaurant serves good food.  In the context
      of this architecture, the assertion would be "serves good food". </t>

  <t> Assertions are coupled with a numeric value called a "Rating",
             which is an indication of how much the party generating the
             Response Set agrees with the assertion being made.  Ratings
      are typically expressed as a floating point value between 0.0
      and 1.0 inclusive, with the former indicating no support for the
      assertion and the latter indicating total agreement with the
      assertion. </t>

  <t> The documents that define future applications will also specify the
      type of scale in use when generating ratings, to which all
      reputation service providers for that application space must
      adhere.  This will allow a client to change which reputation
      service provider is being queried without having to learn
      through some out-of-band method what the new provider's ratings
      mean.  For example, a registration might state that ratings are
      linear, which would mean a score of "x" is twice as strong as
      a value of "x/2".  It also allows easier aggregation of ratings
             collected from multiple reputation service providers. </t>
       </section>

     <section
         anchor="defs_reputon"
         title="Reputon">
       <t> A "reputon" is an object that comprises the basic response to a
           reputation query.  It contains the Response Set relevant to the
           subject of the query in a serialized form.  Its specific encoding
           is left to documents that implement this architecture. </t>
     </section>
    </section>
    <!-- Terminology and Definitions -->
    
    <section
        anchor="protoinfo"
        title="Information Represented in the Protocol">
      <t> Regardless of the transport selected for the interchange,
      the basic information to be represented in the protocol is
      fairly simple, and normally includes at least the following data: </t>

      <t> In the query:
       <list style="symbols">
        <t> the subject of the query; </t>

        <t> the name of the reputation context ("Application"; see
            <xref target="defs_application"/>); </t>

        <t> optionally, name(s) of the specific reputation assertions
            of interest. </t>
      </list> </t>

      <t> Different transports, or different reputation contexts, might need
          additional query parameters. </t>

      <t> In the response:
       <list style="symbols">
        <t> the identity of the entity providing the reputation
        information; </t>
      
        <t> the identity of the entity being rated; </t>
      
        <t> the application context for the query (e.g., email address
            evaluation); </t>
      
        <t> the overall rating score for that entity. </t>
      </list> </t>
      
      <t> Beyond this, arbitrary amounts of additional information
      might be included for specific uses of the service.  The entire
      collection of data found in the response is the Response Set for that
      application and is defined in specifying documents as described
      above. </t>

      <t> For example, a specification might be needed for
      a reputation Response Set for an "email-sending-domain"; the
      Response Set might include information on how often spam was
      received from that domain. </t>

      <t> <xref target='RFC7071'/> defines a media type and format for
      reputation data, and <xref target='RFC7072'/> describes a protocol
      for exchanging such data. </t>
    </section>
    <!-- Information Represented in a Response Set -->
    
    <section
        anchor="protoflow"
        title="Information Flow in the Reputation Query Protocol">
      <t> The basic Response Set could be wrapped into a new MIME media
      type <xref
      target="MIME"></xref> or a DNS Resource Record (RR), and transported
      accordingly.  It also could be the integral payload of a
      purpose-built protocol.  For a basic request/response scenario, one
      entity (the client) will ask a second entity (the server) for
      reputation data about a third entity (the subject), and the
      second entity will respond with those data. </t>
      
      <t> An application might benefit from an extremely lightweight
      mechanism, supporting constrained queries and responses, while
      others might need to support larger and more complex responses.
      </t>
    </section>
    <!-- Information Flow in the Reputation Query Protocol -->
    

    <section
        anchor="priv_considerations"
        title="Privacy Considerations">
     <section anchor="priv_transit" title="Data in Transit">
      <t> Some reputation exchanges can be sensitive, and should not
      be shared publicly.  A client making use of this framework is
      explicitly revealing that it is interested in particular subjects, and
      the server is revealing what its information sources have reported
      about those subjects (in the aggregate).
      In the email context, for example, a client is revealing from whom
      it receives email, and the server is revealing what it (based on its
      aggregated data) believes to be true about those subjects. </t>

      <t> These can be sensitive things that need to be secured, particularly
      when a client is talking to a server outside of its own administrative
      domain.  Furthermore, certain types of reputation information are
      typically perceived as more sensitive than others; movie ratings,
      for example, are much less damaging if leaked than a person's credit
      rating. </t>

      <t> For interchanges that are sensitive to such exposures, it
      is imperative to protect the information from unauthorized access and
      viewing, and possibly add the capability to do object-level integrity
      and origin verification.  Not all transport options can be adequately
      secured in these ways.  In particular, DNS queries and responses are
      entirely insecure.  Services MUST use a transport method that provides
      adequate security when privacy-sensitive data are involved. </t>

      <t> The architecture described here neither suggests nor precludes any
      particular transport mechanism for the data.  An HTTP mechanism
      is defined in <xref target="RFC7072"/>, and email-based
      mechanisms are also envisioned.  For HTTP, use of HTTP over Transport Layer Security
      <xref target="HTTP-TLS"/> is very strongly advised.  For email,
      mechanisms such as
      OpenPGP <xref target="OPENPGP"/> and
      S/MIME <xref target="SMIME"/> are similarly advised. </t>

     </section>

     <section anchor="priv_data" title="Aggregation">
      <t> The data that are collected as input to a reputation calculation are,
          in essence, a statement by one party about the actions or output of
          another.  What one party says about another is often meant to be kept
          in confidence.  Accordingly, steps often need to be taken to secure
          the submission of these input data to a reputation service
          provider. </t>

      <t> Moreover, although the aggregated reputation is the product provided
          by this service, its inadvertent exposure can have undesirable
          effects.  Just as the collection of data about a subject needs
          due consideration to privacy and security, so too does the
          output and storage of whatever aggregation the service provider
          applies. </t>
     </section>

     <section anchor="priv_collect" title="Collection of Data">
      <t> The basic notion of collection and storage of reputation data
          is obviously a privacy issue in that the opinions of one party about
          another are likely to be sensitive.  Inadvertent or unauthorized
          exposure of those data can lead to personal or commercial damage. </t>
     </section>

     <section anchor="priv_queries" title="Queries Can Reveal Information">
      <t> When a client asks a service provider about a particular subject,
          the service provider can infer the existence of that subject and
          begin observing which clients ask about it.  This can be an
          unanticipated leak of private information. </t>
     </section>

     <section anchor="priv_abuse" title="Compromised Relationships">
      <t> Reputation services that limit queries to authorized clients can
          cause private information, such as the reputations themselves or
          the data used to compute them, to be revealed if the client
          credentials are compromised.  It is critical to safeguard not only
          the interchange of reputation information, and the information once
          it has been delivered to the client, but the ability to issue
          requests for information as well. </t>

      <t> An important consideration here is that compromised credentials
          are mainly an exposure of some third party (whose reputation is
          improperly revealed) rather than the client or the server. </t>
     </section>
    </section>
    
    <section
        anchor="sec_considerations"
        title="Security Considerations">
      <t> This document introduces an overall protocol architecture, but no
      implementation details. As such, the security considerations
      presented here are very high level. The detailed analysis of the
      various specific components of the protocol can be found in the
      documents that instantiate this architecture. </t>

      <section
          anchor="sec_biased"
          title="Biased Reputation Agents">
        <t> As with <xref target="VBR"></xref>, an agent seeking to
        make use of a reputation reporting service is placing some
        trust that the service presents an unbiased "opinion" of the
        object about which reputation is being returned. The result of
        trusting the data is, presumably, to guide action taken by the
        reputation client. It follows, then, that bias in the
        reputation service can adversely affect the client. Clients
        therefore need to be aware of this possibility and the effect
        it might have. For example, a biased system returning a
        reputation about a DNS domain found in email
        messages could result in the admission of spam, phishing, or
        malware through a mail gateway (by rating the domain name more
        favorably than warranted) or could result in the needless
        rejection or delay of mail (by rating the domain more
        unfavorably than warranted).  As a possible mitigation
        strategy, clients might seek to interact only with reputation
        services that offer some disclosure of the computation methods
        for the results they return.  Such disclosure and evaluation
        is beyond the scope of the present document. </t>
        
        <t> Similarly, a client placing trust in the results returned
        by such a service might suffer if the service itself is
        compromised, returning biased results under the control of an
        attacker without the knowledge of the agency providing the
        reputation service. This might result from an attack on the
        data being returned at the source, or from a man-in-the-middle
        attack. Protocols, therefore, need to be designed so as to be
        as resilient against such attacks as possible. </t>
      </section>
      <!-- Biased Reputation Agents -->
      
      <section
          anchor="sec_malformed"
          title="Malformed Messages">
        <t> Both clients and servers of reputation systems need to be
        resistant to attacks that involve malformed messages,
        deliberate or otherwise. Malformations can be used to confound
	clients and servers alike in terms of identifying the party or
	parties responsible for the content under evaluation. This can
	result in delivery of undesirable or even dangerous content. </t>
      </section>
      <!-- Malformed Messages -->
      
      <section
          anchor="sec_further"
          title="Further Discussion">
        <t> Involving a third party (in this case, a reputation service
	    provider) that can influence the handling of incoming content
	    involves ceding some amount of control to that third party.
	    Numerous other topics related to the management, operation,
	     and safe use of reputation systems can be found in
	    <xref target="CONSIDERATIONS"/>. </t>
      </section>
      <!-- Further Discussion -->
    </section>
    <!-- Security Considerations -->
  </middle>
  
  <back>
    <references
        title="Informative References">
      
 


<reference anchor='DKIM'>

<front>
<title>DomainKeys Identified Mail (DKIM) Signatures</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role="editor">
<organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen' role="editor">
<organization /></author>
<author initials='M.' surname='Kucherawy' fullname='M. Kucherawy' role="editor">
<organization /></author>
<date year='2011' month='September' />
<abstract>
<t>DomainKeys Identified Mail (DKIM) permits a person, role, or organization that owns the signing domain to claim some responsibility for a message by associating the domain with the message. This can be an author's organization, an operational relay, or one of their agents. DKIM separates the question of the identity of the Signer of the message from the purported author of the message. Assertion of responsibility is validated through a cryptographic signature and by querying the Signer's domain directly to retrieve the appropriate public key. Message transit from author to recipient is through relays that typically make no substantive change to the message content and thus preserve the DKIM signature.&lt;/t>&lt;t> This memo obsoletes RFC 4871 and RFC 5672. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='STD' value='76' />
<seriesInfo name='RFC' value='6376' />
<format type='TXT' octets='176999' target='http://www.rfc-editor.org/rfc/rfc6376.txt' />
</reference>



<reference anchor='DNS'>

<front>
<title abbrev='Domain Implementation and Specification'>Domain names - implementation and specification</title>
<author initials='P.' surname='Mockapetris' fullname='P. Mockapetris'>
<organization>USC/ISI</organization>
<address>
<postal>
<street>4676 Admiralty Way</street>
<city>Marina del Rey</city>
<region>CA</region>
<code>90291</code>
<country>US</country></postal>
<phone>+1 213 822 1511</phone></address></author>
<date year='1987' day='1' month='November' /></front>

<seriesInfo name='STD' value='13' />
<seriesInfo name='RFC' value='1035' />
<format type='TXT' octets='125626' target='http://www.rfc-editor.org/rfc/rfc1035.txt' />
</reference>




<reference anchor='DNSBL'>

<front>
<title>DNS Blacklists and Whitelists</title>
<author initials='J.' surname='Levine' fullname='J. Levine'>
<organization /></author>
<date year='2010' month='February' />
<abstract>
<t>The rise of spam and other anti-social behavior on the Internet has led to the creation of shared blacklists and whitelists of IP addresses or domains.  The DNS has become the de-facto standard method of distributing these blacklists and whitelists.  This memo documents the structure and usage of DNS-based blacklists and whitelists, and the protocol used to query them.  This document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract></front>

<seriesInfo name='RFC' value='5782' />
<format type='TXT' octets='25296' target='http://www.rfc-editor.org/rfc/rfc5782.txt' />
</reference>





<reference anchor='EMAIL-ARCH'>

<front>
<title>Internet Mail Architecture</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker'>
<organization /></author>
<date year='2009' month='July' />
<abstract>
<t>Over its thirty-five-year history, Internet Mail has changed significantly in scale and complexity, as it has become a global infrastructure service.  These changes have been evolutionary, rather than revolutionary, reflecting a strong desire to preserve both its installed base and its usefulness.  To collaborate productively on this large and complex system, all participants need to work from a common view of it and use a common language to describe its components and the interactions among them.  But the many differences in perspective currently make it difficult to know exactly what another participant means.  To serve as the necessary common frame of reference, this document describes the enhanced Internet Mail architecture, reflecting the current service.  This memo provides information for the Internet community.</t></abstract></front>

<seriesInfo name='RFC' value='5598' />
<format type='TXT' octets='115741' target='http://www.rfc-editor.org/rfc/rfc5598.txt' />
<format type='PDF' octets='342738' target='http://www.rfc-editor.org/rfc/rfc5598.pdf' />
</reference>



<reference anchor='HTTP-TLS'>

<front>
<title>HTTP Over TLS</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'>
<organization /></author>
<date year='2000' month='May' />
<abstract>
<t>This memo describes how to use Transport Layer Security (TLS) to secure Hypertext Transfer Protocol (HTTP) connections over the Internet.  This memo provides information for the Internet community.</t></abstract></front>

<seriesInfo name='RFC' value='2818' />
<format type='TXT' octets='15170' target='http://www.rfc-editor.org/rfc/rfc2818.txt' />
</reference>

<!-- draft-ietf-repute-considerations: I-D Exists -->
<reference anchor='CONSIDERATIONS'>
<front>
<title>Operational Considerations Regarding Reputation Services</title>

<author initials='M' surname='Kucherawy' fullname='Murray Kucherawy'>
    <organization />
</author>

<date month='May' day='20' year='2013' />

<abstract><t>The use of reputation systems is has become a common tool in many applications that seek to apply collected intelligence about traffic sources.  Often this is done because it is common or even expected operator practice.  It is therefore important to be aware of a number of considerations for both operators and consumers of the data.  This document includes a collection of the best advice available regarding providers and consumers of reputation data, based on experience to date.  Much of this is based on experience with email reputation systems, but the concepts are generally applicable.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

<!--draft-ietf-repute-email-identifiers; Companion Doc, RFC 7073-->

<reference anchor='RANDOMHOUSE'>
<front>
<title>
Random House Webster's Dictionary, Revised Edition
</title>
<date month='June' day='1' year='2001' />
</front>

<seriesInfo name='ISBN' value='978-0-345-44725-8' />
</reference>

<reference anchor='RFC7073'>
<front>
<title>A Reputation Response Set for Email Identifiers</title>

<author initials='N' surname='Borenstein' fullname='Nathaniel Borenstein'>
    <organization />
</author>

<author initials='M' surname='Kucherawy' fullname='Murray Kucherawy'>
    <organization />
</author>

<date month='November' year='2013' />

<abstract><t>This document defines a response set for describing assertions a reputation service provider can make about email identifers, for use in generating reputons.</t></abstract>

</front>

<seriesInfo name='RFC' value='7073' />

</reference>


<!--draft-ietf-repute-media-type; Companion Doc; RFC7071 -->



<reference anchor='RFC7071'>
<front>
<title>A Media Type for Reputation Interchange</title>

<author initials='N' surname='Borenstein' fullname='Nathaniel Borenstein'>
    <organization />
</author>

<author initials='M' surname='Kucherawy' fullname='Murray Kucherawy'>
    <organization />
</author>

<date month='November' year='2013' />

<abstract><t>This document defines the format of reputation response data ("reputons"), the media-type for packaging it, and definition of a registry for the names of reputation applications and response sets.</t></abstract>

</front>

<seriesInfo name='RFC' value='7071' />

</reference>


<!--draft-ietf-repute-query-http; Companion Doc; RFC7072 -->



<reference anchor='RFC7072'>
<front>
<title>A Reputation Query Protocol</title>

<author initials='N' surname='Borenstein' fullname='Nathaniel Borenstein'>
    <organization />
</author>

<author initials='M' surname='Kucherawy' fullname='Murray Kucherawy'>
    <organization />
</author>

<date month='November' year='2013' />

<abstract><t>This document defines a mechanism to conduct queries for reputation information over the Hypertext Transfer Protocol using JSON as the payload meta-format.</t></abstract>

</front>

<seriesInfo name='RFC' value='7072' />

</reference>



<reference anchor='MAIL'>

<front>
<title>Internet Message Format</title>
<author initials='P.' surname='Resnick' fullname='Peter W. 
Resnick' role='editor'>
<organization>Qualcomm Incorporated</organization>
<address>
<postal>
<street>5775 Morehouse Drive</street>
<city>San Diego</city>
<region>CA</region>
<code>92121-1714</code>
<country>US</country></postal>
<phone>+1 858 651 4478</phone>
<email>presnick@qualcomm.com</email>
<uri>http://www.qualcomm.com/~presnick/</uri></address></author>
<date year='2008' month='October' />
<abstract>
<t>This document specifies the Internet 
Message Format (IMF), a syntax for text messages
			that are sent between computer users, within 
the framework of "electronic mail"
			messages. This specification is a revision of 
Request For Comments (RFC) 2822, which
			itself superseded Request For Comments (RFC) 
822, "Standard for the Format of ARPA
			Internet Text Messages", updating it to 
reflect current practice and incorporating
			incremental changes that were specified in 
other RFCs.</t></abstract></front>

<seriesInfo name='RFC' value='5322' />
<format type='TXT' octets='122322' target='http://www.rfc-editor.org/rfc/rfc5322.txt' />
<format type='HTML' octets='213393' target='http://xml.resource.org/public/rfc/html/rfc5322.html' />
<format type='XML' octets='174234' target='http://xml.resource.org/public/rfc/xml/rfc5322.xml' />
</reference>




<reference anchor='MIME'>

<front>
<title abbrev='Internet Message Bodies'>Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</title>
<author initials='N.' surname='Freed' fullname='Ned Freed'>
<organization>Innosoft International, Inc.</organization>
<address>
<postal>
<street>1050 East Garvey Avenue South</street>
<city>West Covina</city>
<region>CA</region>
<code>91790</code>
<country>US</country></postal>
<phone>+1 818 919 3600</phone>
<facsimile>+1 818 919 3614</facsimile>
<email>ned@innosoft.com</email></address></author>
<author initials='N.S.' surname='Borenstein' fullname='Nathaniel S. Borenstein'>
<organization>First Virtual Holdings</organization>
<address>
<postal>
<street>25 Washington Avenue</street>
<city>Morristown</city>
<region>NJ</region>
<code>07960</code>
<country>US</country></postal>
<phone>+1 201 540 8967</phone>
<facsimile>+1 201 993 3032</facsimile>
<email>nsb@nsb.fv.com</email></address></author>
<date year='1996' month='November' />
<abstract>
<t>STD 11, RFC 822, defines a message representation protocol specifying considerable detail about US-ASCII message headers, and leaves the message content, or message body, as flat US-ASCII text.  This set of documents, collectively called the Multipurpose Internet Mail Extensions, or MIME, redefines the format of messages to allow for</t>
<t>(1)   textual message bodies in character sets other than US-ASCII,</t>
<t>(2)   an extensible set of different formats for non-textual message bodies,</t>
<t>(3)   multi-part message bodies, and</t>
<t>(4)   textual header information in character sets other than US-ASCII.</t>
<t>These documents are based on earlier work documented in RFC 934, STD 11, and RFC 1049, but extends and revises them.  Because RFC 822 said so little about message bodies, these documents are largely orthogonal to (rather than a revision of) RFC 822.</t>
<t>This initial document specifies the various headers used to describe the structure of MIME messages. The second document, RFC 2046, defines the general structure of the MIME media typing system and defines an initial set of media types. The third document, RFC 2047, describes extensions to RFC 822 to allow non-US-ASCII text data in Internet mail header fields. The fourth document, RFC 2048, specifies various IANA registration procedures for MIME-related facilities. The fifth and final document, RFC 2049, describes MIME conformance
  criteria as well as providing some illustrative examples of MIME message formats, acknowledgements, and the bibliography.</t>
<t>These documents are revisions of RFCs 1521, 1522, and 1590, which themselves were revisions of RFCs 1341 and 1342.  An appendix in RFC 2049 describes differences and changes from previous versions.</t></abstract></front>

<seriesInfo name='RFC' value='2045' />
<format type='TXT' octets='72932' target='http://www.rfc-editor.org/rfc/rfc2045.txt' />
</reference>




<reference anchor='OPENPGP'>

<front>
<title>OpenPGP Message Format</title>
<author initials='J.' surname='Callas' fullname='J. Callas'>
<organization /></author>
<author initials='L.' surname='Donnerhacke' fullname='L. Donnerhacke'>
<organization /></author>
<author initials='H.' surname='Finney' fullname='H. Finney'>
<organization /></author>
<author initials='D.' surname='Shaw' fullname='D. Shaw'>
<organization /></author>
<author initials='R.' surname='Thayer' fullname='R. Thayer'>
<organization /></author>
<date year='2007' month='November' />
<abstract>
<t>This document is maintained in order to publish all necessary information needed to develop interoperable applications based on the OpenPGP format. It is not a step-by-step cookbook for writing an application. It describes only the format and methods needed to read, check, generate, and write conforming packets crossing any network. It does not deal with storage and implementation questions. It does, however, discuss implementation issues necessary to avoid security flaws.&lt;/t>&lt;t> OpenPGP software uses a combination of strong public-key and symmetric cryptography to provide security services for electronic communications and data storage. These services include confidentiality, key management, authentication, and digital signatures. This document specifies the message formats used in OpenPGP. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4880' />
<format type='TXT' octets='203706' target='http://www.rfc-editor.org/rfc/rfc4880.txt' />
</reference>



<reference anchor='SMIME'>

<front>
<title>Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.2 Message Specification</title>
<author initials='B.' surname='Ramsdell' fullname='B. Ramsdell'>
<organization /></author>
<author initials='S.' surname='Turner' fullname='S. Turner'>
<organization /></author>
<date year='2010' month='January' />
<abstract>
<t>This document defines Secure/Multipurpose Internet Mail Extensions (S/MIME) version 3.2.  S/MIME provides a consistent way to send and receive secure MIME data.  Digital signatures provide authentication, message integrity, and non-repudiation with proof of origin.  Encryption provides data confidentiality.  Compression can be used to reduce data size.  This document obsoletes RFC 3851. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5751' />
<format type='TXT' octets='98638' target='http://www.rfc-editor.org/rfc/rfc5751.txt' />
</reference>



<reference anchor='SMTP'>

<front>
<title>Simple Mail Transfer Protocol</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<date year='2008' month='October' />
<abstract>
<t>This document is a specification of the basic protocol for Internet electronic mail transport.  It consolidates, updates, and clarifies several previous documents, making all or parts of most of them obsolete.  It covers the SMTP extension mechanisms and best practices for the contemporary Internet, but does not provide details about particular extensions.  Although SMTP was designed as a mail transport and delivery protocol, this specification also contains information that is important to its use as a "mail submission" protocol for "split-UA" (User Agent) mail reading systems and mobile environments. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5321' />
<format type='TXT' octets='225929' target='http://www.rfc-editor.org/rfc/rfc5321.txt' />
</reference>




<reference anchor='VBR'>

<front>
<title>Vouch By Reference</title>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'>
<organization /></author>
<author initials='J.' surname='Levine' fullname='J. Levine'>
<organization /></author>
<author initials='A.' surname='Hathcock' fullname='A. Hathcock'>
<organization /></author>
<date year='2009' month='April' />
<abstract>
<t>This document describes the Vouch By Reference (VBR) protocol.  VBR is a protocol for adding third-party certification to email.  It permits independent third parties to certify the owner of a domain name that is associated with received mail. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5518' />
<format type='TXT' octets='23730' target='http://www.rfc-editor.org/rfc/rfc5518.txt' />
</reference>

        </references>


    </back>
</rfc>
