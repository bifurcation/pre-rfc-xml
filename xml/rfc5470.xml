<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc='yes'?>
<?rfc rfcedstyle='yes'?>
<?rfc subcompact='no'?>
<?rfc symrefs='no'?>

<rfc number="5470" category="info">

<front>
<title abbrev="IPFIX Architecture">
Architecture for IP Flow Information Export
</title>

<author initials="G." surname="Sadasivan" fullname="Ganesh Sadasivan">
  <organization>Rohati Systems</organization>
  <address>
    <postal>
      <street>1192 Borregas Ave.</street>
      <city>Sunnyvale</city>
      <region>CA</region>
      <code>94089</code>
      <country>USA</country>
    </postal>
    <email>gsadasiv@rohati.com</email>
  </address>
</author>

<author initials="N." surname="Brownlee" fullname="Nevil Brownlee">
  <organization>CAIDA | The University of Auckland</organization>
  <address>
    <postal>
      <street>Private Bag 92019</street>
      <city>Auckland</city>
      <code>1142</code>
      <country>New Zealand</country>
    </postal>
    <phone>+64 9 373 7599 x88941</phone>
    <email>n.brownlee@auckland.ac.nz</email>
  </address>
</author>

<author initials="B." surname="Claise" fullname="Benoit Claise">
  <organization>Cisco Systems, Inc.</organization>
  <address>
    <postal>
      <street>De Kleetlaan 6a b1</street>
      <city>1831 Diegem</city>
      <country>Belgium</country>
    </postal>
    <phone>+32 2 704 5622</phone>
    <email>bclaise@cisco.com</email>
  </address>
</author>

<author initials="J." surname="Quittek" fullname="Juergen Quittek">
  <organization abbrev="NEC">NEC Laboratories Europe, NEC Europe Ltd.</organization>
  <address>
    <postal>
      <street>Kurfuersten-Anlage 36</street>
      <city>Heidelberg</city>
      <code>69115</code>
      <country>Germany</country>
    </postal>
    <phone>+49 6221 4342-115</phone>
    <email>quittek@nw.neclab.eu</email>
    <uri>http://www.neclab.eu/</uri>
    </address>
</author>

<date month="March" year="2009"/>
<area>Operations and Management</area>
<workgroup>IP Flow Information Export WG (ipfix)</workgroup>

<keyword>Traffic Flow</keyword>
<keyword>Flow Export</keyword>

<note title="">
 <t>
  This document may contain material from IETF Documents or IETF
  Contributions published or made publicly available before November 10,
  2008. The person(s) controlling the copyright in some of this material
  may not have granted the IETF Trust the right to allow modifications
  of such material outside the IETF Standards Process.  Without
  obtaining an adequate license from the person(s) controlling the
  copyright in such materials, this document may not be modified outside
  the IETF Standards Process, and derivative works of it may not be
  created outside the IETF Standards Process, except to format it for
  publication as an RFC or to translate it into languages other than
  English.
 </t>
</note>

<abstract>
<t>
This memo defines the IP Flow Information eXport (IPFIX) architecture
for the selective monitoring of IP Flows, and for the export of
measured IP Flow information from an IPFIX Device to a Collector.
</t>
</abstract>
</front>

<middle>

<section title="Introduction">
<t>
There are several applications, e.g., usage-based accounting, 
traffic profiling, traffic engineering, attack/intrusion detection, 
quality-of-service (QoS) monitoring, that require Flow-based IP traffic measurements. 
It is therefore important to have a standard way of exporting information 
related to IP Flows. This document defines an architecture for IP traffic 
Flow monitoring, measuring, and exporting. It provides a high-level 
description of an IPFIX Device's key components and their functions. 
</t>

<section title="Document Scope">
<t>
This document defines the architecture for IPFIX. Its main objectives 
are to:

<list style="symbols">
<t>Describe the key IPFIX architectural components,
  consisting of (at least) IPFIX Devices and Collectors communicating
  using the IPFIX protocol.</t>

<t>Define the IPFIX architectural requirements, e.g., recovery, security, 
   etc.</t>

<t>Describe the characteristics of the IPFIX protocol.</t>
</list>
</t>
</section>

<section title="IPFIX Documents Overview">
<t>
The IPFIX protocol provides network administrators with access to IP
Flow information.  This document specifies the architecture for the
export of measured IP Flow information from an IPFIX Exporting
Process to a Collecting Process, per the requirements defined in <xref
target="refs.IPFIX-REQS">RFC 3917</xref>.  The IPFIX protocol
document, <xref target="refs.IPFIX-PROTO">RFC 5101</xref>, specifies
how IPFIX data records and templates 
are carried via a congestion-aware transport protocol, from IPFIX
Exporting Process to IPFIX Collecting Process.  IPFIX has a formal
description of IPFIX information elements (fields), their name, type,
and additional semantic information, as specified in <xref
target="refs.IPFIX-INFO">RFC 5102</xref>.  Finally, <xref
target="refs.IPFIX-AS">RFC 5472</xref> describes what type of
applications can use the IPFIX protocol and how they can use the
information provided.  Furthermore, it shows how the IPFIX framework
relates to other architectures and frameworks.
</t>
<t>
Note that the IPFIX system does not provide for remote configuration
of an IPFIX device.  Instead, implementors must provide an
effective way to configure their IPFIX devices.
</t>
  </section>
</section>

<section title="Terminology">
<t>
The definitions of basic IPFIX terms such as IP Traffic Flow,
Exporting Process, Collecting Process, Observation Point, etc., are
semantically identical with those found in the IPFIX requirements
document, <xref target="refs.IPFIX-REQS">RFC 3917</xref>.  Some of
the terms have been expanded for more clarity when defining the
protocol.  Additional definitions required for the architecture have
also been defined. For terms that are defined here and in <xref
target="refs.IPFIX-PROTO">RFC 5101</xref>, the definitions are
equivalent in both documents.
</t>

<list style="hanging">
<t hangText="* Observation Point"/>
<t>
An Observation Point is a location in the network where IP packets can
be observed. Examples include: a line to which a probe is attached, a
shared medium, such as an Ethernet-based LAN, a single port of a
router, or a set of interfaces (physical or logical) of a router.
</t>
<t>
Note that every Observation Point is associated with an Observation
Domain (defined below), and that one Observation Point may be a
superset of several other Observation Points. For example, one
Observation Point can be an entire line card. That would be the
superset of the individual Observation Points at the line card's
interfaces.
</t>

<t hangText="* Observation Domain"/>
<t>
An Observation Domain is the largest set of Observation Points for
which Flow information can be aggregated by a Metering Process.  For
example, a router line card may be an Observation Domain if it is
composed of several interfaces, each of which is an Observation Point.
In the IPFIX Message it generates, the Observation Domain
includes its Observation Domain ID, which is unique per Exporting
Process.  That way, the Collecting Process can identify the
specific Observation Domain from the Exporter that sends the
IPFIX Messages.
Every Observation Point is associated with an Observation Domain.
It is recommended that Observation Domain IDs also be unique per 
IPFIX Device. 
</t>

<t hangText="* IP Traffic Flow or Flow"/>
<t>
There are several definitions of the term 'flow' being used by the
Internet community.  Within the context of IPFIX we use the following
definition:
</t>
<t>
A Flow is defined as a set of IP packets passing an Observation Point
in the network during a certain time interval.  All packets belonging
to a particular Flow have a set of common properties.  Each property
is defined as the result of applying a function to the values of:
</t>

<list style="numbers">
<t>one or more packet header fields (e.g., destination IP address),
  transport header fields (e.g., destination port number), or application
  header fields (e.g., RTP header fields <xref target="refs.RTP-HDRF" />). 
</t>

<t>one or more characteristics of the packet itself (e.g., number of
  MPLS labels)</t>

<t>one or more fields derived from packet treatment (e.g., next hop IP
  address, output interface)</t>
</list>

<t>A packet is defined as belonging to a Flow if it completely satisfies all
the defined properties of the Flow.
</t>
<t>
This definition covers the range from a Flow containing all packets
observed at a network interface to a Flow consisting of just a single
packet between two applications.  It includes packets selected by a 
sampling mechanism.
</t>

<t hangText="* Flow Key"/>
<t>
Each of the fields that:
<list style="numbers">
<t>belongs to the packet header (e.g., destination IP address),</t>
<t>is a property of the packet itself (e.g., packet length),</t>
<t>is derived from packet treatment (e.g., Autonomous System (AS)
  number), and</t>
<t>is used to define a Flow</t>
</list>
is termed a Flow Key.
</t>

<t hangText="* Flow Record"/>
<t>
A Flow Record contains information about a specific Flow that was
observed at an Observation Point. A Flow Record contains measured
properties of the Flow (e.g., the total number of bytes for all the
Flow's packets) and usually characteristic properties of the Flow
(e.g., source IP address).
</t>

<t hangText="* Metering Process"/>
<t>
The Metering Process generates Flow Records.  Inputs to the process
are packet headers and characteristics observed at an Observation
Point, and packet treatment at the Observation Point (for example, the
selected output interface).  
</t>
<t>
The Metering Process consists of a set of functions that includes
packet header capturing, timestamping, sampling, classifying, and
maintaining Flow Records.
</t>
<t>
The maintenance of Flow Records may include creating new records,
updating existing ones, computing Flow statistics, deriving further
Flow properties, detecting Flow expiration, passing Flow Records to
the Exporting Process, and deleting Flow Records.
</t>

<t hangText="* Exporting Process"/>
<t>
The Exporting Process sends Flow Records to one or more Collecting
Processes. The Flow Records are generated by one or more Metering
Processes.
</t>

<t hangText="* Exporter"/>
<t>
A device that hosts one or more Exporting Processes is termed an
Exporter.
</t>

<t hangText="* IPFIX Device"/>
<t>
An IPFIX Device hosts at least one Exporting Process.  It may host 
further Exporting Processes and arbitrary numbers of Observation 
Points and Metering Processes. 
</t>

<t hangText="* Collecting Process"/>
<t>
A Collecting Process receives Flow Records from one or more Exporting
Processes. The Collecting Process might process or store received Flow
Records, but such actions are out of scope for this document.
</t>

<t hangText="* Collector"/>
<t>
A device that hosts one or more Collecting Processes is termed a
Collector.
</t>

<t hangText="* Template"/>
<t>
A Template is an ordered sequence of &lt;type, length> pairs used
to completely specify the structure and semantics of a particular set
of information that needs to be communicated from an IPFIX Device to a
Collector. Each Template is uniquely identifiable by means
of a Template ID.
</t>

<t hangText="* Control Information, Data Stream"/>
<t>
The information that needs to be exported from the IPFIX Device can be
classified into the following categories:
</t>

<list style="hanging">
<t hangText="Control Information"/>
<t>
This includes the Flow definition, selection criteria for packets
within the Flow sent by the Exporting Process, and templates describing
the data to be exported.
Control Information carries all the information needed
for the end-points to understand the IPFIX protocol, and specifically
for the Collector to understand and interpret the data sent
by the sending Exporter.
</t>

<t hangText="Data Stream"/>
<t>
This includes Flow Records carrying the field values for the various
observed Flows at each of the Observation Points.
</t>
</list>

<t hangText="* IPFIX Message"/>
<t>
An IPFIX Message is a message originating at the Exporting Process
that carries the IPFIX records of this Exporting Process and whose
destination is a Collecting Process. An IPFIX Message is
encapsulated at the transport layer.
</t>

<t hangText="* Information Element"/>
<t>   
An Information Element is a protocol and encoding-independent 
description of an attribute that may appear in an IPFIX 
Record.  The IPFIX information model, 
<xref target="refs.IPFIX-INFO">RFC 5102</xref>,
 defines the base 
set of Information Elements for IPFIX.  The type associated with an 
Information Element indicates constraints on what it may contain and 
also determines the valid encoding mechanisms for use in IPFIX. 
</t>
</list>
<!-- end of terminology list -->
</section>

<section title="Examples of Flows">
<t>
Some examples of Flows are listed below.  In the IPv4 examples, we use
interface addresses in three different 26-bit (/26) subnets.  In the IPv6
examples, we use 'mac addr-nn' in the low-order 64 bits to indicate the
IEEE MAC (Media Access Control) address of host interface nn.
</t>
<figure>
<preamble>
Example 1:
Flow Keys define the different fields by which Flows are
distinguished.  The different combination of their field values
creates unique Flows.  If {source IP address, destination IP address,
DSCP} are Flow Keys, then all of these are different Flows:
</preamble>
<artwork>
  1. {192.0.2.1,   192.0.2.65, 4}
  2. {192.0.2.23,  192.0.2.67, 4}
  3. {192.0.2.23,  192.0.2.67, 2}
  4. {192.0.2.129, 192.0.2.67, 4}

  5. {2001:DB8::0:mac-addr-01, 2001:DB8::1:mac-addr-11, 4}
  6. {2001:DB8::0:mac-addr-02, 2001:DB8::1:mac-addr-13, 4}
  7. {2001:DB8::0:mac-addr-02, 2001:DB8::1:mac-addr-13, 2}
  8. {2001:DB8::2:mac-addr-21, 2001:DB8::1:mac-addr-13, 4}
</artwork>
</figure>
<figure>
<preamble>
Example 2:
A mask function can be applied to all the packets 
that pass through an Observation Point, in order to aggregate some 
values. This could be done by defining the set of Flow Keys as {source IP 
address, destination IP address, DSCP} as in Example 1 above, and 
applying functions that mask out the source and destination IP addresses
(least significant 6 bits for IPv4, 64 bits for IPv6).
The eight Flows from Example 1 would now 
be aggregated into six Flows by merging the Flows 1+2 and 5+6 into
single Flows:
</preamble>
<artwork>
  1. {192.0.2.0/26,   192.0.2.64/26, 4}
  2. {192.0.2.0/26,   192.0.2.64/26, 2}
  3. {192.0.2.128/26, 192.0.2.64/26, 4}

  4. {2001:DB8::0/64, 2001:DB8::1/64, 4}
  5. {2001:DB8::0/64, 2001:DB8::1/64, 2}
  6. {2001:DB8::2/64, 2001:DB8::1/64, 4}
</artwork>
</figure>
<t>
Example 3:
A filter defined by some Flow Key values can be applied 
on all packets that pass the Observation Point, in order to select 
only certain Flows. The filter is defined by choosing fixed values 
for specific Keys from the packet.
</t>
<t>
All the packets that go from a customer network 192.0.2.0/26 to 
another customer network 192.0.2.64/26 with DSCP value of 4 define 
a Flow. All other combinations don't define a Flow and are not 
taken into account. The three Flows from Example 2 would now be 
reduced to one Flow by filtering out Flows 2 and 3,
leaving only Flow 1, {192.0.2.0/26, 192.0.2.64/26, 4}.
</t><t>
Similarly, for the IPv6 packets in the examples above, one could
filter out Flows 5 and 6 to leave Flow 4.
</t><t>
The above examples can be thought of as a function F() taking as input 
{source IP address, destination IP address, DSCP}. The function 
selects only the packets that satisfy all three of the following
conditions:
</t>
<list style="numbers">
<t>Mask out the least significant 6 bits of source IP address,
match against 192.0.2.0.</t>
<t>Mask out the least significant 6 bits of destination IP address,
match against 192.0.2.64.</t>
<t>Only accept DSCP value equal to 4.</t>
</list>
<t>
Depending on the values of {source IP address, destination IP 
address, DSCP} of the different observed packets, the Metering 
Process function F() would choose/filter/aggregate different sets of 
packets, which would create different Flows. For example, 
for various combinations of values of {source IP address, 
destination IP address, DSCP}, F(source IP address, destination IP 
address, DSCP) would result in the definition of one or more Flows. 
</t>
</section>

<section title="IPFIX Reference Model">

<figure title="IPFIX Reference Model" anchor="ref_model">
<preamble>
The figure below shows the reference model for IPFIX. This figure
covers the various possible scenarios that can exist in an IPFIX
system.
</preamble>
				<artwork><![CDATA[
                          +----------------+     +----------------+
                          |[*Application 1]| ... |[*Application n]|
                          +--------+-------+     +-------+--------+
                                   ^                     ^
                                   |                     | 
                                   + = = = = -+- = = = = + 
                                              ^
                                              |
+------------------------+            +-------+------------------+
|IPFIX Exporter          |            | Collector(1)             |
|[Exporting Process(es)] |<---------->| [Collecting Process(es)] |
+------------------------+            +--------------------------+
        ....                                  ....
+------------------------+           +---------------------------+
|IPFIX Device(i)         |           | Collector(j)              |
|[Observation Point(s)]  |<--------->| [Collecting Process(es)]  |
|[Metering Process(es)]  |     +---->| [*Application(s)]         |
|[Exporting Process(es)] |     |     +---------------------------+
+------------------------+     .
       ....                    .              ....
+------------------------+     |     +--------------------------+
|IPFIX Device(m)         |     |     | Collector(n)             |
|[Observation Point(s)]  |<----+---->| [Collecting Process(es)] |
|[Metering Process(es)]  |           | [*Application(s)]        |
|[Exporting Process(es)] |           +--------------------------+
+------------------------+
]]></artwork>
				<postamble>
The various functional components are indicated within brackets
[]. The functional components within [*] are not part of the IPFIX
architecture. The interfaces shown by "&lt;----->" are defined by the IPFIX
architecture, but those shown by "&lt;= = = =>" are not.
</postamble>
</figure>

<figure title="IPFIX Device" anchor="device">
<preamble>
The figure below shows a typical IPFIX Device where the IPFIX
components are shown in rectangular boxes.
</preamble>
				<artwork><![CDATA[
        +--------------------------------------------------+
        |                 IPFIX Device                     |
        |                                          +-----+ |
        |        +------- ... ------------+--------->    | |
        |        |                        |        |     | |
        |   +----+----+              +----+----+   |     | |
        |   |Metering |              |Metering |   |  E  | |
        |   |Process 1|              |Process N|   |  x  | |
        |   +---------+              +---------+   |  p  | |
        |        ^                        ^        |  o  | |
        | +------+--------+     +---------+------+ |  r  | |
        | | Obsv Domain 1 |     | Obsv Domain N  | |  t  | |
        | |+-----+-------+|     |+-------+------+| |  i  | |
        | ||Obsv Pt 1..j || ... ||Obsv Pt j+1..M|| |  n  | |
        | |+-------------+|     |+--------------+| |  g  | | Export
Packets | +------^--------+     +---------^------+ |     | | packets
--->----+--------+---------- ... ---------+        |     | |   to 
   In   |                                          |     +---------> 
        |        . . . . .                         |     | |Collector
        |                                          |     | |
        |        +------ ... -------------+--------->    | |
        |        |                        |        |     | |
        |   +----+----+              +----+----+   |  P  | |
        |   |Metering |              |Metering |   |  r  | |
        |   |Process 1|              |Process N|   |  o  | |
        |   +---------+              +---------+   |  c  | |
        |        ^                        ^        |  e  | |
        | +------+--------+     +---------+------+ |  s  | |
        | | Obsv Domain 1 |     | Obsv Domain N  | |  s  | |
        | |+-----+-------+|     |+-------+------+| |     | |
        | ||Obsv Pt 1..k || ... ||Obsv Pt k+1..M|| |     | |
        | |+-------------+|     |+--------------+| |     | |
Packets | +------^--------+     +---------^------+ +-----+ |
--->----+--------+---------- ... ---------+                |
   In   |                                                  |
        +--------------------------------------------------+
]]></artwork>
</figure>
</section>

<section title="IPFIX Functional and Logical Blocks">

<section title="Metering Process">
<t>
Every Observation Point in an IPFIX Device, participating in Flow
measurements, must be associated with at least one Metering Process. 
Every packet coming into an Observation Point goes into each of the 
Metering Processes associated with the Observation Point. Broadly, 
each Metering Process observes the packets that pass 
an Observation Point, does timestamping, and classifies the packets
into Flow(s) based on the selection criteria.
</t>
<t>
The Metering Process is a functional block that manages all
the Flows generated from an Observation Domain.  The typical
functions of a Metering Process may include:
</t>
<list style="symbols">
<t>Maintaining database(s) of all the Flow Records from an Observation 
   Domain.  This includes creating new Flow Records, updating existing ones,
   computing Flow Records statistics, deriving further Flow properties,
   and adding non-Flow-specific information based on the packet treatment 
   (in some cases, fields like AS numbers, router state, etc.)</t>

<t> Maintaining statistics about the Metering Process itself, such as 
Flow Records generated, packets observed, etc. </t>
</list>

<section title="Flow Expiration" anchor="flow_exp">
<t>
A Flow is considered to have expired under the following conditions:
</t>
<list style="numbers">


<t>If no packets belonging to the Flow have been observed for a
certain period of time.  This time period should be configurable at
the Metering Process, with a minimum value of 0 seconds for immediate
expiration.  Note that a zero timeout would report a Flow as a
sequence of single-packet Flows.</t>

<t>If the IPFIX Device experiences resource constraints, a Flow
may be prematurely expired (e.g., lack of memory to store Flow Records).</t>

<t> For long-running Flows, the Metering Process should expire the
Flow on a regular basis or based on some expiration policy.  This
periodicity or expiration policy should be configurable at the
Metering Process. When a long-running Flow is expired, its Flow Record
may still be maintained by the Metering Process so that the Metering
Process does not need to create a new Flow Record for further observed
packets of the same Flow.</t>
</list>
  </section>

<section title="Flow Export">
<t>
The Exporting Process decides when and whether to export an expired 
Flow.  A Flow can be exported because it expired for any of the reasons 
mentioned in <xref target="flow_exp"/>, "Flow Expiration".  For example: the Exporting 
Process exports a portion of the expired Flows every 'x' seconds.
</t>
<t>
For long-lasting Flows, the Exporting Process should export the Flow 
Records on a regular basis or based on some export policy.  This 
periodicity or export policy should be configurable at the Exporting Process.
</t>
  </section>
</section>

<section title="Observation Point">
<t>
A Flow Record can be better analysed if the Observation Point from
which it was measured is known. As such, it is recommended that
IPFIX Devices send this information to Collectors.
In cases where there is a single Observation Point or where the
Observation Point information is not relevant, the Metering Process
may choose not to add the Observation Point information to the Flow
Records.
</t>

</section>
<section title="Selection Criteria for Packets" anchor="sel_crit">
<t>
A Metering Process may define rules so that only certain packets
within an incoming stream of packets are chosen for measurement at an
Observation Point.  This may be done by one of the two methods defined
below or a combination of them, in either order. A combination of each
of these methods can be adopted to select the packets, i.e., one can
define a set of methods {F1, S1, F2, S2, S3} executed in a specified
sequence at an Observation Point to select particular Flows.
</t>
<t>
The figure below shows the operations that may be applied as 
part of a typical Metering Process.
</t>
<figure title="Selection Criteria for Packets" anchor="sel_criteria">
<artwork><![CDATA[
              +---------------------------+
              |  packet header capturing  |
              +---------------------------+
                           |
                           v
              +---------------------------+
              |       timestamping        |
              +---------------------------+
                           |
                           v
         +---------------> +
         |                 |
         |                 v
         |    +----------------------------------------------+
         |    |   sampling Si (1:1 in case of no sampling)   |
         |    +----------------------------------------------+
         |                 |
         |                 v
         |    +----------------------------------------------+
         |    |  filtering Fi (select all when no criteria)  |
         |    +----------------------------------------------+
         |                 |
         |                 v
         +-----------------+
                           |
                           v
              +---------------------------+
              |          Flows            |
              +---------------------------+
]]></artwork>
</figure>
<t>
Note that packets could be selected before or after any IP processing,
i.e., before there is any IP checksum validation, IP filtering, etc., or
after one or more of these steps.  This has an impact on what kinds of
traffic (or erroneous conditions) IPFIX can observe.  It is recommended
that packets are selected after their checksums have been verified.
</t>

<section title="Sampling Functions, Si">
<t>
A sampling function determines which packets within a stream of
incoming packets are selected for measurement, i.e., packets
that satisfy the sampling criteria for this Metering Process.
</t>
<t>
Example:
sample every 100th packet that was received at an Observation Point.
</t><t>
Choosing all the packets is a special case where the sampling rate is
1:1.
</t>
</section>

<section title="Filter Functions, Fi">
<t>
A Filter Function selects only those incoming
packets that satisfy a function on fields defined by the
packet header fields, fields obtained while doing the packet
processing, or properties of the packet itself.
</t>
<t>
Example:
Mask/Match of the fields that define a filter. A filter might be
defined as {Protocol == TCP, Destination Port < 1024}.
</t>
<t>
Several such filters could be used in any sequence to select
packets.
Note that packets selected by a (sequence of) filter functions
may be further classified by other filter functions, i.e., the selected
packets may belong to several Flows, any or all of which are exported.
</t>
  </section>
</section>

<section title="Observation Domain">
<t>
The Observation Domain is a logical block that presents a single
identity for a group of Observation Points within an IPFIX Device.
Each {Observation Point, Metering Process} pair belongs to a
single Observation Domain.  An IPFIX Device could have multiple 
Observation Domains, each of which has a subset of the total set of 
Observation Points in it. Each Observation Domain must carry a unique
ID within the context of an IPFIX Device.
Note that in the case of multiple Observation Domains, a unique ID per
Observation Domain must be transmitted as a parameter to the Exporting
Function. That unique ID is referred to as the IPFIX Observation Domain
ID.
</t>
</section>

<section title="Exporting Process">
<t>
The Exporting Process is the functional block that sends data to
one or more IPFIX Collectors using the IPFIX protocol. 
On one side, the Exporting Process interfaces with Metering Process(es)
to get Flow Records; while on the other side, it talks to a Collecting
Process on the Collector(s).
</t>
<t>
There may be additional rules defined within an Observation 
Domain so that only certain Flow Records are exported. 
This may be done by either one or a combination of Si and Fi, as
described in <xref target="sel_crit"/>, "Selection Criteria for Packets".
</t>
<t>
Example:
Only the Flow Records that meet the following selection criteria are
exported:
</t>
<list style="numbers">
<t>All Flow Records whose destination IP address matches
{192.0.33.5}.</t>

<t>Every other (i.e., sampling rate 1 in 2) Flow Record whose
destination IP address matches {192.0.11.30}.</t>
</list>
</section>

<section title="Collecting Process">
<t>
Collecting Processes use a Flow Record's Template ID to interpret that
Flow Record's Information Elements.  To allow this, an IPFIX Exporter
must ensure that an IPFIX Collector knows the Template ID for each
incoming Flow Record.  To interpret incoming Flow Records, an IPFIX
Collector may also need to know the function F() that was used by the
Metering Process for each Flow.
</t>
<t>
The functions of the Collecting Process
must include:
</t>
<list style="symbols">
<t>Identifying, accepting, and decoding the IPFIX Messages from different
    &lt;Exporting Process, Observation Domain> pairs.</t>

<t>Storing the Control Information and Flow Records received from 
    an IPFIX Device.</t>
</list>
<t>
At a high level, the Collecting Process:
</t>
<list style="numbers">
<t>Receives and stores the Control Information.</t>
<t>Decodes and stores the Flow Records using the Control Information.</t>
</list>
</section>

<section title="Summary">
<figure title="IPFIX Device functional blocks" anchor="blocks">
<preamble>
The figure below shows the functions performed in sequence by 
the various functional blocks in an IPFIX Device.
</preamble>
<artwork><![CDATA[
                 Packet(s) coming into Observation Point(s)
                   |                                   |
                   v                                   v
  +----------------+-------------------------+   +-----+-------+
  |          Metering Process on an          |   |             |
  |             Observation Point            |   |             |
  |                                          |   |             |
  |   packet header capturing                |   |             |
  |        |                                 |...| Metering    |
  |   timestamping                           |   | Process N   |
  |        |                                 |   |             |
  | +----->+                                 |   |             |
  | |      |                                 |   |             |
  | |   sampling Si (1:1 in case of no       |   |             |
  | |      |          sampling)              |   |             |
  | |   filtering Fi (select all when        |   |             |
  | |      |          no criteria)           |   |             |
  | +------+                                 |   |             |
  |        |                                 |   |             |
  |        |        Timing out Flows         |   |             |
  |        |    Handle resource overloads    |   |             |
  +--------|---------------------------------+   +-----|-------+
           |                                           | 
   Flow Records (identified by Observation Domain)  Flow Records 
           |                                           |
           +---------+---------------------------------+
                     |                                  
+--------------------|----------------------------------------------+
|                    |     Exporting Process                        |
|+-------------------|-------------------------------------------+  |
||                   v       IPFIX Protocol                      |  |
||+-----------------------------+  +----------------------------+|  |
|||Rules for                    |  |Functions                   ||  |
||| Picking/sending Templates   |  |-Packetise selected Control ||  |
||| Picking/sending Flow Records|->|  & data Information into   ||  |
||| Encoding Template & data    |  |  IPFIX export packets.     ||  |
||| Selecting Flows to export(*)|  |-Handle export errors       ||  |
||+-----------------------------+  +----------------------------+|  |
|+----------------------------+----------------------------------+  |
|                             |                                     |
|                    exported IPFIX Messages                        |
|                             |                                     |
|                +------------+-----------------+                   |
|                |  Anonymise export packet(*)  |                   |
|                +------------+-----------------+                   |
|                             |                                     |
|                +------------+-----------------+                   |
|                |       Transport  Protocol    |                   |
|                +------------+-----------------+                   |
|                             |                                     |
+-----------------------------+-------------------------------------+
                              |
                              v
                 IPFIX export packet to Collector

(*) indicates that the block is optional.
]]></artwork>
</figure>
</section>
<!-- end of 'summary' section -->
</section>

<!-- end of Functional and Logical Blocks section -->

<section title="Overview of the IPFIX Protocol" anchor="proto_overview">
<t>
An IPFIX Device consists of a set of cooperating processes that
implement the functional blocks described in the previous section.
Alternatively, an IPFIX Device can be viewed simply as a network 
entity that implements the IPFIX protocol.
At the IPFIX Device, the protocol functionality resides in the
Exporting Process. 
The IPFIX Exporting Process gets Flow Records from a Metering Process,
and sends them to the Collector(s).
</t>
<t>
At a high level, an IPFIX Device performs the following tasks:
</t>
<list style="numbers">
<t>Encodes Control Information into Templates.</t>
<t>Encodes packets observed at the Observation Points into Flow 
     Records.</t>
<t>Packetises the selected Templates and Flow Records into 
     IPFIX Messages.</t>
<t>Sends IPFIX Messages
     to the Collector.</t>
</list>
<t>
The IPFIX protocol communicates information from an IPFIX Exporter
to an IPFIX Collector.  That information includes not only Flow Records,
but also information about the Metering Process.  Such information
(referred to as Control Information) includes details of the data
fields in Flow Records.  It may also include statistics from the 
Metering Process, such as the number of packets lost (i.e., not
metered).
</t>
<t>
For details of the IPFIX protocol, please refer to 
<xref target="refs.IPFIX-PROTO">RFC 5101</xref>.
</t>

<section title="Information Model Overview">
<t>
The IP Flow Information eXport (IPFIX) protocol serves for
transmitting information related to measured IP traffic over the
Internet.  The protocol specification in 
<xref target="refs.IPFIX-PROTO">RFC 5101</xref> defines how
Information Elements are transmitted.  For Information Elements, it
specifies the encoding of a set of basic data types.  However, the
list of fields that can be transmitted by the protocol, such as Flow 
attributes (source IP address, number of packets, etc.) and
information about the Metering and Exporting Process (packet
Observation Point, sampling rate, Flow  timeout interval, etc.), is not
specified in 
<xref target="refs.IPFIX-PROTO">RFC 5101</xref>.
Instead, it is defined in the IPFIX information model in
<xref target="refs.IPFIX-INFO">RFC 5102</xref>.
</t>
<t>
The information model provides a complete description of the
properties of every IPFIX Information Element.  It does this by
specifying each element's name, Field Type, data type, etc., and
providing a description of each element.  Element descriptions give
the semantics of the element, i.e., say how it is derived from a Flow or
other information available within an IPFIX Device.
</t>
</section>

<section title="Flow Records">
<t>
The following rules provide guidelines to be followed while encoding
the Flow Records information:
</t>
<t>
A Flow Record contains enough information so that the
Collecting Process can identify the corresponding &lt;Per-Flow Control 
Information, Configuration Control Information>.
</t>
<t>
The Exporting Process encodes a given Information Element (as
specified in <xref target="refs.IPFIX-INFO">RFC 5102</xref>), based
on the encoding standards prescribed by <xref
target="refs.IPFIX-PROTO">RFC 5101</xref>.
</t>
</section>

<section title="Control Information" anchor="control_info">
<t>
The following rules provide guidelines to be followed while encoding
the Control Information:
</t>
<list style="symbols">
<t>Per-Flow Control Information should be encoded such that the
  Collecting Process can capture the structure and semantics of the
  corresponding Flow data for each of the Flow Records exported by the
  IPFIX Device. </t> 

<t>Configuration Control Information is conveyed to a Collector so
  that its Collecting Process can capture the structure and semantics of
  the corresponding configuration data. The configuration data, which is
  also Control Information, should carry additional information on the
  Observation Domain within which the configuration takes effect. </t>
</list>

<t> For example, sampling using the same sampling algorithm, say 1 in
100 packets, is configured on two Observation Points O1 and O2.  The
configuration in this case may be encoded as {ID, observation points
(O1,O2), sampling algorithm, interval (1 in 100)}, where ID is the
Observation Domain ID for the domain containing O1 and O2. The
Observation Domain ID uniquely identifies this configuration, and must
be sent within the Flow Records in order to be able to match the right
configuration control information.</t>

<t>
The Control Information is used by the Collecting Process to:
</t>
<list style="symbols">
<t>Decode and interpret Flow Records.</t>
<t>Understand the state of the Exporting Process.</t>
</list>
<t>
Sending Control Information from the Exporting Process in a 
timely and reliable manner is critical to the proper functioning 
of the IPFIX Collecting Process. The following approaches may be 
taken for the export of Control Information:
</t>
<list style="numbers">
<t>Send all the Control Information pertaining to Flow Records prior
to sending the Flow Records themselves. This includes any incremental
changes to the definition of the Flow Records.</t>

<t>Notify, on a near real-time basis, the state of the IPFIX Device to the 
Collecting Process. This includes all changes such as a configuration 
change that affects the Flow behaviour, changes to Exporting Process 
resources that alter export rates, etc., which the Collector needs to 
be aware of.</t>

<t>Since it is vital that a Collecting Process maintains accurate 
knowledge of the Exporter's state, the export of the Control 
Information should be done such that it reaches the Collector 
reliably. One way to achieve this is to send the Control 
Information over a reliable transport.</t>
</list>
</section>

<section title="Reporting Responsibilities">
<t>
From time to time, an IPFIX Device may not be able to observe all the
packets reaching one of its Observation Points.  This could occur if a
Metering Process finds itself temporarily short of resources.  For
example, it might run out of packet buffers for IPFIX export.
</t>
<t>
In such situations, the IPFIX Device should attempt to count the
number of packet losses that have occurred, and report them to its
Collector(s).  If it is not possible to count losses accurately,
e.g., when transport layer (i.e., non-IPFIX) errors are detected, the
IPFIX Device should report this fact, and perhaps indicate the time
period during which some packets might not have been observed.
</t>
  </section>
</section>
<!-- end of 'protocol overview' section -->

<section title="IPFIX Protocol Details" anchor="proto_details">
<t>
When the IPFIX Working Group was chartered, there were
existing common practices in the area of Flow export, for example,
NetFlow, CRANE (Common Reliable Accounting for Network Element), LFAP
(Light-weight Flow Admission Protocol), RTFM (Real-time Traffic Flow Measurement), etc.  IPFIX's charter required the Working
Group to consider those existing practices, and select 
the one that was the closest fit to the IPFIX requirements in
<xref target="refs.IPFIX-REQS">RFC 3917</xref>.
Additions or modifications would then be
made to the selected protocol to fit it exactly into the IPFIX 
architecture. 
</t>

<section title="The IPFIX Basis Protocol">
<t>
The Working Group went through an extensive evaluation of the
various existing protocols that were available, weighing the
level of compliance with the requirements, and selected one
of the candidates as the basis for the IPFIX protocol.
For more details of the evaluation process, please see 
<xref target="refs.IPFIX-EVAL">RFC 3955</xref>. 
</t>
<t>
In the basis protocol, Flow Records are defined by Templates, where a
Template is an ordered set of the Information Elements appearing in a
Flow Record, together with their field sizes within those records.
</t>
<t>
This approach provides the following advantages: 
</t>
<list style="symbols">
<t>Using the Template mechanism, new fields can be added to IPFIX
Flow Records without changing the structure of the export record
format.</t>

<t>Templates that are sent to the Collecting Process carry
structural information about the exported Flow Record fields. 
Therefore, if the Collector does not understand the semantics
of new fields, it can ignore them, but still interpret the Flow Record.</t>

<t>Because the template mechanism is flexible, it allows the export
of only the required fields from the Flows to the Collecting
Process. This helps to reduce the exported Flow data volume and
possibly provide memory savings at the Exporting Process and
Collecting Process. Sending only the required information can also
reduce network load.</t>
</list>
</section>

<section title="IPFIX Protocol on the Collecting Process"
 anchor="proto_on_collector">
<t>
The Collecting Process is responsible for:
</t>
<list style="numbers">
<t>Receiving and decoding Flow Records from the IPFIX Devices.</t>
<t>Reporting on the loss of Flow Records sent to the Collecting Process
   by an IPFIX Exporting Process.</t>
</list>
<t>
Complete details of the IPFIX protocol are given in 
<xref target="refs.IPFIX-PROTO">RFC 5101</xref>.
</t>
</section>

<section title="Support for Applications" anchor="app_support">
<t>
Applications that use the information collected by IPFIX may be 
Billing or Intrusion Detection sub-systems, etc. These applications
may be an integral part of the Collecting Process, or they may be co-located 
with the Collecting Process. The way by which these applications 
interface with IPFIX systems to get the desired information is 
out of scope for this document.
</t>
  </section>
</section>
<!-- End of Protocol Details -->

<section title="Export Models">
  <section title="Export with Reliable Control Connection">
<t> 
As mentioned in <xref target="refs.IPFIX-REQS">RFC 3917</xref>, an IPFIX Device must be able to transport its Control
Information and Data Stream over a congestion-aware transport
protocol. 
</t>
<t>
If the network in which the IPFIX Device and Collecting
Process are located does not guarantee reliability, at least the
Control Information should be exported over a reliable
transport. 
The Data Stream may be exported over a reliable or unreliable
transport protocol.
</t>
<t>
Possible transport protocols include:
</t>
<list style="symbols">
<t>SCTP: Supports reliable and unreliable transport.</t>
<t>TCP: Provides reliable transport only.</t>
<t>UDP: Provides unreliable transport only.  Network operators
    would need to avoid congestion by keeping traffic within 
    their own administrative domains.  For example, one could 
    use a dedicated network (or Ethernet link) to carry IPFIX
    traffic from Exporter to Collector.
</t>
</list>
  </section>
  <section title="Collector Failure Detection and Recovery">
<t>
The transport connection (in the case of a
connection-oriented protocol) is pre-configured between the IPFIX
Device and the Collector. The IPFIX protocol does not provide any
mechanism for configuring the Exporting and Collecting Processes.
</t>
<t>
Once connected, an IPFIX Collector receives Control Information
and uses that information to interpret Flow Records. The IPFIX
Device should set a keepalive (e.g., the keepalive timeout in the case
of TCP, the HEARTBEAT interval in the case of SCTP) to a sufficiently 
low value so that it can quickly detect a Collector failure.
Note, however, that extremely short keepalive intervals
can incorrectly abort the connection during transient periods of
congestion. They can also cause some level of additional network load
during otherwise idle periods.
</t>
<t>
Collector failure refers to the crash or restart of the Collecting
Process or of the Collector itself.
A Collector failure is detected at the IPFIX Device by the break in
the connection-oriented transport protocol session; depending on the
transport protocol, the connection timeout mechanisms differ. 
On detecting a keepalive timeout in a single Collector scenario, the 
IPFIX Device should stop sending Flow Records to the Collector and 
try to reestablish the transport connection.
If Collecting Process failover is supported by the Exporting Process,
backup session(s) may be opened in advance, and Control Information
sent to the failover Collecting Process.
</t>
<t>
There could be one or more secondary Collectors with priority assigned
to them. The primary Collector crash is detected at the IPFIX Device.
On detecting
loss of connectivity, the IPFIX Device opens a Data Stream with the
secondary Collector of the next highest priority.
If that secondary was not opened in advance, both the Control Information
and Data Stream must be sent to it.
That Collector might then
become the primary, or the Exporting Process might try to reestablish
the original session.
</t>
  </section>
  <section title="Collector Redundancy">
<t>
Configuring redundant Collectors is an alternative to configuring
backup Collectors.  In this model, all Collectors simultaneously
receive the Control Information and Data Streams. Multiple {Control
Information, Data Stream} pairs could be sent, each to a different
Collector, from the same IPFIX Device.
Since the IPFIX protocol requires a congestion-aware transport, achieving
redundancy using multicast is not an option. 
</t>
  </section>
</section>

<section title="IPFIX Flow Collection in Special Situations" 
anchor="special_traffic">
<t>
An IPFIX Device can generate, receive, and/or alter two special types of
traffic, which are listed below.
</t>

<list style="hanging">
<t hangText="Tunnel traffic:"/> 
<t>The IPFIX Device could be the head, midpoint, or end-point of a
tunnel. In such cases, the IPFIX Device could be handling Generic
  Routing Encapsulation (GRE) <xref target="RFC2784"/>, IPinIP
  <xref target="RFC1853"/>, or Layer Two Tunneling Protocol version 3
  <xref target="RFC3931"/> traffic.</t>

<t hangText="VPN traffic:"/>
<t> The IPFIX Device could be a provider-edge device that receives
traffic from customer sites belonging to different Virtual Private
Networks.</t>
</list>

<t>
Similarly, IPFIX could be implemented on devices which perform one 
or more of the following special services:
</t>
<list style="symbols">
<t>Explicitly drop packets. For example, a device that provides
firewall service drops packets based on some administrative policy.</t>

<t>Alter the values of fields used as IPFIX Flow Keys of interest. 
For example, a device that provides NAT service can change the
source and/or destination IP address.</t>
</list>

<t>In cases such as those listed above, there should be clear 
guidelines as to:</t>
<list style="symbols">
<t>How and when to classify the packets as Flows in the IPFIX Device.</t>
<t>If multiple encapsulations are used to define Flows, how to convey
  the same fields (e.g., IP address) in different layers.</t>
<t>How to differentiate Flows based on different private domains.
  For example, overlapping IP addresses in Layer-3 VPNs.</t>
<t>What extra information needs to be exported so that the Collector can
make a clear interpretation of the received Flow Records.</t>
</list>
</section>

<section title="Security Considerations">
<t>
Flow information can be used for various purposes, such as usage-based
accounting, traffic profiling, traffic engineering, and intrusion
detection.  The security requirements may differ significantly for such
applications. To be able to satisfy the security needs of various
IPFIX users, an IPFIX system must provide different levels
of security protection.
</t>
  <section title="Data Security">
<t>
IPFIX data comprises Control Information and Data Streams generated by 
the IPFIX Device.
</t>
<t>
The IPFIX data may exist in both the IPFIX Device and the Collector. In 
addition, the data is also transferred on the wire from the IPFIX Device 
to the Collector when it is exported. To provide security, the data 
should be protected from common network attacks.
</t>
<t>
The protection of IPFIX data within the end system (IPFIX Device and
Collector) is out of scope for this document. It is assumed that the
end system operator will provide adequate security for the IPFIX data.
</t>
<t>
The IPFIX architecture must allow different levels of protection to
the IPFIX data on the wire. Wherever security functions are required,
it is recommended that users should leverage lower layers using either
TLS or DTLS (Datagram Transport Layer Security), if these can successfully satisfy the security
requirement of IPFIX data protection.
</t>
<t>
To protect the data on the wire, three levels of granularity should 
be supported; these are described in the following subsections.
</t>

    <section title="Host-Based Security">
<t>
Security may not be required when the transport between the IPFIX
Device and the Collector is perceived as safe. This option allows the
protocol to run most efficiently without extra overhead, and an IPFIX
system must support it.
</t>
    </section>

    <section title="Authentication-Only">
<t>
Authentication-only protection provides IPFIX users with the assurance
of data integrity and authenticity. The data exchanged between the
IPFIX Device and the Collector is protected by an authentication
signature. Any modification of the IPFIX data will be detected by the
recipient, resulting in the discarding of the received data. However, the
authentication-only option doesn't offer data confidentiality. 
</t>
<t>
The IPFIX user should not use authentication-only when sensitive or
confidential information is being exchanged.  An IPFIX solution should
support this option. The authentication-only option should provide
replay attack protection. Some means to achieve this level of security
are:
</t>
<list style="symbols">
<t>Encapsulating Security Payload (with a null encryption algorithm)</t>
<t>Transport Layer Security (with a null encryption algorithm)</t>
<t>IP Authentication Header</t>
</list>
    </section>

    <section title="Encryption">
<t>
Data encryption provides the best protection for IPFIX data. The 
IPFIX data is encrypted at the sender, and only the intended recipient 
can decrypt and have access to the data. This option must be used 
when the transport between the IPFIX Device and the Collector is unsafe, 
and the IPFIX data needs to be protected. It is recommended that 
the underlying transport layer's security functions be used for this purpose. 
Some means to achieve this level of security are:
</t>
<list style="symbols">
<t>Encapsulating Security Payload</t>
<t>Transport Layer Security Protocol</t>
</list>
<t>
The data encryption option adds overhead to the IPFIX data transfer. 
It may limit the rate that an Exporter can report its Flow Records to the 
Collector, due to the resource requirement for running encryption.
</t>
    </section>
  </section>

  <section title="IPFIX End-Point Authentication">
<t>
It is important to make sure that the IPFIX Device is talking to the 
"right" Collector rather than to a masquerading Collector. The same logic 
also holds true from the Collector's point of view, i.e., it may want to make 
sure it is collecting the Flow Records from the "right" IPFIX Device. 
An IPFIX system should allow the end-point authentication capability so 
that either one-way or mutual authentication can be performed between 
the IPFIX Device and Collector.
</t>
<t>
The IPFIX architecture should use any existing transport protection 
protocols, such as TLS, to fulfil the authentication 
requirement.
</t>
  </section>

<section title="IPFIX Overload">
<t>
An IPFIX Device could become overloaded under various conditions. This
may be because of exhaustion of internal resources used for Flow
generation and/or export.  Such overloading may cause loss of data
from the Exporting Process, either from lack of export bandwidth
(possibly caused by an unusually high number of observed Flows) or
from network congestion in the path from Exporter to Collector.
</t>
<t>
IPFIX Collectors should be able to detect the loss of exported Flow 
Records, and should at least record the number of lost Flow Records.
</t>

  <section title="Denial-of-Service (DoS) Attack Prevention">
<t>
Since one of the potential usages for IPFIX is for intrusion 
detection, it is important for the IPFIX architecture to support some 
kind of DoS resistance.
</t>

    <section title="Network under Attack">
<t>
The network itself may be under attack, resulting in an overwhelming 
number of IPFIX Messages. An IPFIX system should try to capture as much 
information as possible. However, when a large number of IPFIX Messages 
are generated in a short period of time, the IPFIX system may become 
overloaded. 
</t>
    </section>

    <section title="Generic DoS Attack on the IPFIX Device and Collector">
<t>
The IPFIX Device and Collector may be subject to generic DoS attacks,
just as any system on any open network. These types of attacks are not
IPFIX specific. Preventing and responding to such types of attacks are
out of the scope of this document.
</t>
    </section>

    <section title="IPFIX-Specific DoS Attack">
<t>
There are some specific attacks on the IPFIX portion of the IPFIX Device
or Collector:
</t>
<list style="symbols">
<t>The attacker could overwhelm the Collector with spoofed IPFIX Export 
packets. One way to solve this problem is to periodically synchronise
the sequence numbers of the Flow Records between the Exporting and
Collecting Processes.</t>

<t>The attacker could provide false reports to the Collector by 
sending spoofed packets.</t>
</list>
<t>The problems mentioned above can be solved to a large extent if the 
control packets are encrypted both ways, thereby providing more
information that the Collector could use to identify and ignore
spoofed data packets.
</t>
      </section>
    </section>
  </section>
</section>

<section title="IANA Considerations">
<t>
The IPFIX Architecture, as set out in this document, has two sets of
assigned numbers, as outlined in the following subsections.
</t>

  <section title="Numbers Used in the Protocol">
<t>
IPFIX Messages, as described in <xref target="refs.IPFIX-PROTO">
RFC 5101</xref>, use two fields with assigned values.  These are
the IPFIX Version Number, indicating which version of the IPFIX
Protocol was used to export an IPFIX Message, and the IPFIX
Set ID, indicating the type for each set of information
within an IPFIX Message.
</t>
<t>
Values for the IPFIX Version Number and the IPFIX Set ID, together
with the considerations for assigning them, are defined in <xref
target="refs.IPFIX-PROTO">RFC 5101</xref>.
</t>
  </section>

  <section title="Numbers Used in the Information Model">
<t>
Fields of the IPFIX protocol carry information about traffic
measurement.  They are modelled as elements of the IPFIX information
model <xref target="refs.IPFIX-INFO">RFC 5102</xref>.  Each
Information Element describes a field that may appear in an IPFIX
Message.  Within an IPFIX Message, the field type is indicated by
its Field Type.
</t>
<t>
Values for the IPFIX Information Element IDs, together
with the considerations for assigning them, are defined in <xref
target="refs.IPFIX-INFO">RFC 5102</xref>.
</t>
  </section>
</section>

<section title="Acknowledgements">
<t>
The document editors wish to thank all the people contributing to the
discussion of this document on the mailing list, and the design teams
for many valuable comments.  In particular, the following made
significant contributions:
</t>
<figure>
<artwork><![CDATA[
   Tanja Zseby
   Paul Calato
   Dave Plonka
   Jeffrey Meyer
   K.C.Norseth
   Vamsi Valluri
   Cliff Wang
   Ram Gopal
   Jc Martin
   Carter Bullard
   Reinaldo Penno
   Simon Leinen
   Kevin Zhang
   Paul Aitken
   Brian Trammell
   
   Special thanks to Dave Plonka for the multiple thorough reviews.
]]></artwork>
			</figure>
		</section>
	</middle>

<back>
<references title="Normative References">

<!-- RFC 3917 -->
<reference anchor="refs.IPFIX-REQS">
<front>
<title>Requirements for IP Flow Information Export (IPFIX)</title>
<author initials='J.' surname='Quittek' fullname='J. Quittek'>
<organization /></author>
<author initials='T.' surname='Zseby' fullname='T. Zseby'>
<organization /></author>
<author initials='B.' surname='Claise' fullname='B. Claise'>
<organization /></author>
<author initials='S.' surname='Zander' fullname='S. Zander'>
<organization /></author>
<date year='2004' month='October' />
</front>
<seriesInfo name='RFC' value='3917' />
</reference>

<!-- RFC 5102 -->
<reference anchor="refs.IPFIX-INFO">
<front>
<title>Information for Model IP Flow Information Export</title>
<author initials='J.' surname='Quittek' fullname='J. Quittek'>
<organization /></author>
<author initials='S.' surname='Bryant' fullname='S. Bryant'>
<organization /></author>
<author initials='B.' surname='Claise' fullname='B. Claise'>
<organization /></author>
<author initials='P.' surname='Aitken' fullname='P. Aitken'>
<organization /></author>
<author initials='J.' surname='Meyer' fullname='J. Meyer'>
<organization /></author>

<date year='2008' month='January' />
</front>
<seriesInfo name="RFC" value="5102"/>
</reference>

<!-- RFC 5101 -->
<reference anchor="refs.IPFIX-PROTO">
<front>
<title>Specification of the IP Flow Information Export (IPFIX) Protocol for the Exchange of IP Traffic Flow Information</title>
<author initials='B.' surname='Claise' fullname='B. Claise'>
<organization /></author>
<date year='2008' month='January' />
</front>
<seriesInfo name='RFC' value='5101' />
</reference>

<!-- draft-ietf-ipfix-as became RFC 5472 -->
<reference anchor="refs.IPFIX-AS">
<front>
<title>IPFIX Applicability</title>
  <author initials="T." surname="Zseby" fullname="Tanja Zseby"/>
  <author initials="E." surname="Boschi" fullname="Elisa Boschi"/>
  <author initials="N." surname="Brownlee" fullname="Nevil Brownlee"/>
  <author initials="B." surname="Claise" fullname="Benoit Claise"/>
  <date month="March" year="2009"/>
</front>
<seriesInfo name="RFC" value="5472"/>
</reference>

</references>

<references title="Informative References">


<reference anchor="refs.RTP-HDRF">
<front>
<title>RTP: A Transport Protocol for Real-Time Applications</title>
  <author initials="H." surname="Schulzrinne" fullname="Henning Schulzrinne"/>
  <author initials="S." surname="Casner" fullname="Steve Casner"/>
  <author initials="R." surname="Frederick" fullname="Ron Frederick"/>
  <author initials="V." surname="Jacobson" fullname="Van Jacobson"/>
  <date month="July" year="2003"/>
</front>
<seriesInfo name='STD' value='64' />
<seriesInfo name="RFC" value="3550"/>
</reference>

<reference anchor="refs.IPFIX-EVAL">
<front>
<title>Evaluation of Candidate Protocols for IP Flow Information Export (IPFIX)</title>
  <author initials="S." surname="Leinen" fullname="Simon Leinen"/>
  <date month="October" year="2004"/>
</front>
<seriesInfo name="RFC" value="3955"/>
</reference>

<?rfc include="reference.RFC.1853"?>
<?rfc include="reference.RFC.2784"?>
<?rfc include="reference.RFC.3931"?>

</references>

</back>
</rfc>
