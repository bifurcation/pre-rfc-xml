<?xml version="1.0" encoding="US-ASCII"?>

<?xml-stylesheet type='text/xsl' href='lib/rfc2629.xslt' ?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc linkmailto="no"?>
<?rfc editing="no"?>
<?rfc rfcedstyle="yes"?>  
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<!DOCTYPE rfc
  PUBLIC "" "rfc2629.dtd">

<rfc number="7541" category="std" ipr="trust200902" submissionType="IETF" consensus="yes">
    
    <front>
        <title abbrev="HPACK">HPACK: Header Compression for HTTP/2</title>

        <author initials="R." surname="Peon" fullname="Roberto Peon">
            <organization>Google, Inc</organization>
            <address>
                <email>fenix@google.com</email>
            </address>
        </author>

        <author initials="H." surname="Ruellan" fullname="Herve Ruellan">
            <organization>Canon CRF</organization>
            <address>
                <email>herve.ruellan@crf.canon.fr</email>
            </address>
        </author>

        <date month="May" year="2015"/>
        <area>Applications</area>
        <workgroup>HTTPbis Working Group</workgroup>
        <keyword>HTTP</keyword>
        <keyword>Header</keyword>



        <abstract>
            <t>
                This specification defines HPACK, a compression format for
                efficiently representing HTTP header fields, to be used in
                HTTP/2.
            </t>
        </abstract>

    </front>

    <middle>
        <section title="Introduction">
            <t>
                In HTTP/1.1 (see <xref target="RFC7230"/>), header fields are
                not compressed. As web pages have grown to require dozens to
                hundreds of requests, the redundant header fields in these
                requests unnecessarily consume bandwidth, measurably increasing
                latency.
            </t>

            <t>
                <xref target="SPDY">SPDY</xref> initially addressed this
                redundancy by compressing header fields using the <xref target="DEFLATE">DEFLATE</xref> format, which proved very
                effective at efficiently representing the redundant header
                fields.  However, that approach exposed a security risk as
                demonstrated by the CRIME (Compression Ratio Info-leak Made Easy) attack (see <xref target="CRIME"/>).
            </t>

            <t>
                This specification defines HPACK, a new compressor 
                that eliminates redundant header fields, limits
                vulnerability to known security attacks, and has a bounded
                memory requirement for use in constrained environments.
                Potential security concerns for HPACK are described in <xref target="Security"/>.
            </t>

            <t>
                The HPACK format is intentionally simple and inflexible.  Both
                characteristics reduce the risk of interoperability or security
                issues due to implementation error.  No extensibility
                mechanisms are defined; changes to the format are only possible
                by defining a complete replacement.
            </t>

            <section title="Overview">
                <t>
                    The format defined in this specification treats a list of
                    header fields as an ordered collection of name-value pairs
                    that can include duplicate pairs. Names and values are
                    considered to be opaque sequences of octets, and the order
                    of header fields is preserved after being compressed and
                    decompressed.
                </t>
                <t>
                    Encoding is informed by header field tables that map
                    header fields to indexed values. These header field tables
                    can be incrementally updated as new header fields are
                    encoded or decoded.
                </t>
                <t>
                    In the encoded form, a header field is represented either
                    literally or as a reference to a header field in one of
                    the header field tables. Therefore, a list of header fields
                    can be encoded using a mixture of references and literal
                    values.
                </t>
                <t>
                    Literal values are either encoded directly or use a static
                    Huffman code.
                </t>
                <t>
                    The encoder is responsible for deciding which header fields
                    to insert as new entries in the header field tables.  The
                    decoder executes the modifications to the header field
                    tables prescribed by the encoder, reconstructing the list of
                    header fields in the process.  This enables decoders to
                    remain simple and interoperate with a wide variety of
                    encoders.
                </t>
                <t>
                    Examples illustrating the use of these different mechanisms
                    to represent header fields are available in <xref target="examples"/>.
                </t>
            </section>

            <section anchor="conventions" title="Conventions">
                <t>
                    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
                    "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
                    and "OPTIONAL" in this document are to be interpreted as
                    described in <xref target="RFC2119">RFC 2119</xref>.
                </t>
                <t>
                    All numeric values are in network byte order.  Values are
                    unsigned unless otherwise indicated.  Literal values are
                    provided in decimal or hexadecimal as appropriate.
                </t>

            </section>

            <section anchor="encoding.concepts" title="Terminology">
                <t>
                    This specification uses the following terms:
                    <list style="hanging">
                        <t hangText="Header Field:">
                            A name-value pair.  Both the name and value are
                            treated as opaque sequences of octets.
                        </t>
                        <t hangText="Dynamic Table:">
                            The dynamic table (see <xref target="dynamic.table"/>) is a table that
                            associates stored header fields with index values.
                            This table is dynamic and specific to an encoding or
                            decoding context.
                        </t>
                        <t hangText="Static Table:">
                            The static table (see <xref target="static.table"/>)
                            is a table that statically associates header fields
                            that occur frequently
                            with index values.  This table is ordered,
                            read-only, always accessible, and it may be shared
                            amongst all encoding or decoding contexts.
                        </t>
                        <t hangText="Header List:">
                            A header list is an ordered collection of header
                            fields that are encoded jointly and can contain
                            duplicate header fields. A complete list of
                            header fields contained in an HTTP/2 header block
                            is a header list.
                        </t>
                        <t hangText="Header Field Representation:">
                            A header field can be represented in encoded form
                            either as a literal or as an index (see <xref target="header.representation"/>).
                        </t>
                        <t hangText="Header Block:">
                            An ordered list of header field representations,
                            which, when decoded, yields a complete header list.
                        </t>
                    </list>
                </t>
            </section>
        </section>

        <section anchor="header.encoding" title="Compression Process Overview">
            <t>
                This specification does not describe a specific algorithm for an
                encoder.  Instead, it defines precisely how a decoder is
                expected to operate, allowing encoders to produce any encoding
                that this definition permits.
            </t>

            <section anchor="header.list.ordering" title="Header List Ordering">
                <t>
                    HPACK preserves the ordering of header fields inside the
                    header list. An encoder MUST order header field
                    representations in the header block according to their
                    ordering in the original header list. A decoder MUST
                    order header fields in the decoded header list according to
                    their ordering in the header block.
                </t>
            </section>

            <section anchor="encoding.context" title="Encoding and Decoding Contexts">
                <t>
                    To decompress header blocks, a decoder only needs to
                    maintain a dynamic table (see <xref target="dynamic.table"/>) as a decoding context. No
                    other dynamic state is needed.
                </t>
                <t>
                    When used for bidirectional communication, such as in HTTP,
                    the encoding and decoding dynamic tables maintained by an
                    endpoint are completely independent, i.e., the request
                    and response dynamic tables are separate.
                </t>
            </section>

            <section anchor="indexing.tables" title="Indexing Tables">
                <t>
                    HPACK uses two tables for associating header fields to
                    indexes. The static table (see <xref target="static.table"/>) is predefined and contains
                    common header fields (most of them with an empty value). The
                    dynamic table (see <xref target="dynamic.table"/>) is
                    dynamic and can be used by the encoder to index header
                    fields repeated in the encoded header lists.
                </t>
                <t>
                    These two tables are combined into a single address space
                    for defining index values (see <xref target="index.address.space"/>).
                </t>

                <section anchor="static.table" title="Static Table">
                    <t>
                        The static table consists of a predefined static list of
                        header fields. Its entries are defined in <xref target="static.table.definition"/>.
                    </t>
                </section>

                <section anchor="dynamic.table" title="Dynamic Table">
                    <t>
                        The dynamic table consists of a list of header fields
                        maintained in first-in, first-out order.  The first and
                        newest entry in a dynamic table is at the lowest index,
                        and the oldest entry of a dynamic table is at the
                        highest index.
                    </t>
                    <t>
                        The dynamic table is initially empty.  Entries are added
                        as each header block is decompressed.
                    </t>
                    <t>
                        The dynamic table can contain duplicate entries (i.e.,
                        entries with the same name and same value).
                        Therefore, duplicate entries MUST NOT be treated as an
                        error by a decoder.
                    </t>
                    <t>
                        The encoder decides how to update the dynamic table and
                        as such can control how much memory is used by the
                        dynamic table. To limit the memory requirements of the
                        decoder, the dynamic table size is strictly bounded (see
                        <xref target="maximum.table.size"/>).
                    </t>
                    <t>
                        The decoder updates the dynamic table during the
                        processing of a list of header field representations
                        (see <xref target="header.representation.processing"/>).
                    </t>
                </section>

                <section anchor="index.address.space" title="Index Address Space">
                    <t>
                        The static table and the dynamic table are combined into
                        a single index address space.
                    </t>
                    <t>
                        Indices between 1 and the length of the static table
                        (inclusive) refer to elements in the static table (see
                        <xref target="static.table"/>).
                    </t>
                    <t>
                        Indices strictly greater than the length of the static
                        table refer to elements in the dynamic table (see <xref target="dynamic.table"/>).  The length
                        of the static table is subtracted to find the index into
                        the dynamic table.
                    </t>
                    <t>
                        Indices strictly greater than the sum of the lengths of
                        both tables MUST be treated as a decoding error.
                    </t>

                    <figure anchor="Index.Address.Space" title="Index Address Space">
                        <preamble>
                            For a static table size of s and a dynamic table
                            size of k, the following diagram shows the entire
                            valid index address space.
                        </preamble>
                    <artwork type="drawing"><![CDATA[
        <----------  Index Address Space ---------->
        <-- Static  Table -->  <-- Dynamic Table -->
        +---+-----------+---+  +---+-----------+---+
        | 1 |    ...    | s |  |s+1|    ...    |s+k|
        +---+-----------+---+  +---+-----------+---+
                               ^                   |
                               |                   V
                        Insertion Point      Dropping Point
]]></artwork>
                    </figure>
                </section>
            </section>

            <section anchor="header.representation" title="Header Field Representation">
                <t>
                    An encoded header field can be represented either as an
                    index or as a literal.
                </t>
                <t>
                    An indexed representation defines a header field as a
                    reference to an entry in either the static table or the
                    dynamic table (see <xref target="indexed.header.representation"/>).
                </t>
                <t>
                    A literal representation defines a header field by
                    specifying its name and value. The header field name can be
                    represented literally or as a reference to an entry in
                    either the static table or the dynamic table. The header
                    field value is represented literally.
                </t>
                <t>
                    Three different literal representations are defined:
                    <list style="symbols">
                        <t>
                            A literal representation that adds the header field
                            as a new entry at the beginning of the dynamic table
                            (see <xref target="literal.header.with.incremental.indexing"/>).
                        </t>
                        <t>
                            A literal representation that does not add the
                            header field to the dynamic table (see <xref target="literal.header.without.indexing"/>).
                        </t>
                        <t>
                            A literal representation that does not add the
                            header field to the dynamic table, with the
                            additional stipulation that this header field always
                            use a literal representation, in particular when
                            re-encoded by an intermediary (see <xref target="literal.header.never.indexed"/>). This
                            representation is intended for protecting header
                            field values that are not to be put at risk by
                            compressing them (see <xref target="never.indexed.literals"/> for more
                            details).
                        </t>
                    </list>
                </t>
                <t>
                    The selection of one of these literal representations can be
                    guided by security considerations, in order to protect
                    sensitive header field values (see <xref target="compression.based.attacks"/>).
                </t>
                <t>
                    The literal representation of a header field name or of a
                    header field value can encode the sequence of octets either
                    directly or using a static Huffman code (see <xref target="string.literal.representation"/>).
                </t>
            </section>
        </section>

        <section anchor="header.block.decoding" title="Header Block Decoding">
            <section anchor="header.block.processing" title="Header Block Processing">
                <t>
                    A decoder processes a header block sequentially to
                    reconstruct the original header list.
                </t>
                <t>
                    A header block is the concatenation of header field
                    representations. The different possible header field
                    representations are described in <xref target="detailed.format"/>.
                </t>
                <t>
                    Once a header field is decoded and added to the
                    reconstructed header list, the header field cannot be
                    removed. A header field added to the header list can be
                    safely passed to the application.
                </t>

                <t>
                    By passing the resulting header fields to the application,
                    a decoder can be implemented with minimal transitory memory
                    commitment in addition to the memory required for the dynamic table.
                </t>
            </section>

            <section anchor="header.representation.processing" title="Header Field Representation Processing">
                <t>
                    The processing of a header block to obtain a header list is
                    defined in this section.  To ensure that the decoding will
                    successfully produce a header list, a decoder MUST obey the
                    following rules.
                </t>
                <t>
                    All the header field representations contained in a header
                    block are processed in the order in which they appear, as
                    specified below.  Details on the formatting of the various
                    header field representations and some additional processing
                    instructions are found in <xref target="detailed.format"/>.
                </t>
                <t>
                    An <spanx>indexed representation</spanx> entails the
                    following actions:
                    <list style="symbols">
                        <t>
                            The header field corresponding to the referenced
                            entry in either the static table or dynamic table is
                            appended to the decoded header list.
                        </t>
                    </list>
                </t>
                <t>
                    A <spanx>literal representation</spanx> that is <spanx>not
                    added</spanx> to the dynamic table entails the following
                    action:
                    <list style="symbols">
                        <t>
                            The header field is appended to the decoded header
                            list.
                        </t>
                    </list>
                </t>
                <t>
                    A <spanx>literal representation</spanx> that is
                    <spanx>added</spanx> to the dynamic table entails the
                    following actions:
                    <list style="symbols">
                        <t>
                            The header field is appended to the decoded header
                            list.
                        </t>
                        <t>
                            The header field is inserted at the beginning of the
                            dynamic table. This insertion could result in the
                            eviction of previous entries in the dynamic table
                            (see <xref target="entry.addition"/>).
                        </t>
                    </list>
                </t>
            </section>
        </section>

        <section anchor="dynamic.table.management" title="Dynamic Table Management">
            <t>
                To limit the memory requirements on the decoder side, the
                dynamic table is constrained in size.
            </t>

            <section anchor="calculating.table.size" title="Calculating Table Size">
                <t>
                    The size of the dynamic table is the sum of the size of its
                    entries.
                </t>
                <t>
                    The size of an entry is the sum of its name's length in
                    octets (as defined in <xref target="string.literal.representation"/>), its value's
                    length in octets, and 32.
                </t>
                <t>
                    The size of an entry is calculated using the length of its
                    name and value without any Huffman encoding applied.
                </t>
                <t>
                    <list>
                        <t>
                            Note: The additional 32 octets account for an estimated
                            overhead associated with an entry. For example, an
                            entry structure using two 64-bit pointers to
                            reference the name and the value of the entry and
                            two 64-bit integers for counting the number of
                            references to the name and value would have 32
                            octets of overhead.
                        </t>
                    </list>
                </t>
            </section>

            <section anchor="maximum.table.size" title="Maximum Table Size">
                <t>
                    Protocols that use HPACK determine the maximum size that the
                    encoder is permitted to use for the dynamic table.  In
                    HTTP/2, this value is determined by the
                    SETTINGS_HEADER_TABLE_SIZE setting (see Section 6.5.2 of <xref target="HTTP2"/>).
                </t>
                <t>
                    An encoder can choose to use less capacity than this maximum
                    size (see <xref target="encoding.context.update"/>), but the
                    chosen size MUST stay lower than or equal to the maximum set
                    by the protocol.
                </t>


                <t>
                    A change in the maximum size of the dynamic table is
                    signaled via a dynamic table size update (see <xref target="encoding.context.update"/>).  This dynamic table size
                    update MUST occur at the beginning of the first header block
                    following the change to the dynamic table size.  In HTTP/2,
                    this follows a settings acknowledgment (see Section 6.5.3 of <xref target="HTTP2"/>).
                </t>
                <t>
                    Multiple updates to the maximum table size can occur between
                    the transmission of two header blocks.  In the case that this
                    size is changed more than once in this interval, the
                    smallest maximum table size that occurs in that interval
                    MUST be signaled in a dynamic table size update.  The final
                    maximum size is always signaled, resulting in at most two
                    dynamic table size updates.  This ensures that the decoder is
                    able to perform eviction based on reductions in dynamic
                    table size (see <xref target="entry.eviction"/>).
                </t>
                <t>
                    This mechanism can be used to completely clear entries from
                    the dynamic table by setting a maximum size of 0, which can
                    subsequently be restored.
                </t>
            </section>

            <section anchor="entry.eviction" title="Entry Eviction When Dynamic Table Size Changes">
                <t>
                    Whenever the maximum size for the dynamic table is reduced,
                    entries are evicted from the end of the dynamic table until
                    the size of the dynamic table is less than or equal to the
                    maximum size.
                </t>
            </section>

            <section anchor="entry.addition" title="Entry Eviction When Adding New Entries">
                <t>
                    Before a new entry is added to the dynamic table, entries
                    are evicted from the end of the dynamic table until the size
                    of the dynamic table is less than or equal to (maximum size
                    - new entry size) or until the table is empty.
                </t>
                <t>
                    If the size of the new entry is less than or equal to the
                    maximum size, that entry is added to the table.  It is not
                    an error to attempt to add an entry that is larger than the
                    maximum size; an attempt to add an entry larger than the
                    maximum size causes the table to be emptied of all existing
                    entries and results in an empty table.
                </t>
                <t>
                    A new entry can reference the name of an entry in the
                    dynamic table that will be evicted when adding this new
                    entry into the dynamic table. Implementations are cautioned
                    to avoid deleting the referenced name if the referenced
                    entry is evicted from the dynamic table prior to inserting
                    the new entry.
                </t>
            </section>
        </section>

        <section anchor="low-level.representation" title="Primitive Type Representations">
            <t>
                HPACK encoding uses two primitive types: unsigned variable-length integers and strings of octets.
            </t>

            <section anchor="integer.representation" title="Integer Representation">
                <t>
                    Integers are used to represent name indexes, header field
                    indexes, or string lengths. An integer representation can
                    start anywhere within an octet. To allow for optimized
                    processing, an integer representation always finishes at the
                    end of an octet.
                </t>
                <t>
                    An integer is represented in two parts: a prefix that fills
                    the current octet and an optional list of octets that are
                    used if the integer value does not fit within the prefix.
                    The number of bits of the prefix (called N) is a parameter
                    of the integer representation.
                </t>
                <t>
                    If the integer value is small enough, i.e., strictly less
                    than 2^N-1, it is encoded within the N-bit
                    prefix.
                </t>
                <figure anchor="Integer.Value.Encoded.within.the.Prefix.shown.for.N.5" title="Integer Value Encoded within the Prefix (Shown for N = 5)">
                    <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| ? | ? | ? |       Value       |
+---+---+---+-------------------+
]]></artwork>
                </figure>
                <t>
                    Otherwise, all the bits of the prefix are set to 1, and the
                    value, decreased by 2^N-1, is encoded using a
                    list of one or more octets. The most significant bit of each
                    octet is used as a continuation flag: its value is set to 1
                    except for the last octet in the list. The remaining bits of
                    the octets are used to encode the decreased value.
                </t>
                <figure anchor="Integer.Value.Encoded.after.the.Prefix.shown.for.N.5" title="Integer Value Encoded after the Prefix (Shown for N = 5)">
                    <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| ? | ? | ? | 1   1   1   1   1 |
+---+---+---+-------------------+
| 1 |    Value-(2^N-1) LSB      |
+---+---------------------------+
               ...
+---+---------------------------+
| 0 |    Value-(2^N-1) MSB      |
+---+---------------------------+
]]></artwork>
                </figure>
                <t>
                    Decoding the integer value from the list of octets starts by
                    reversing the order of the octets in the list. Then, for
                    each octet, its most significant bit is removed. The
                    remaining bits of the octets are concatenated, and the
                    resulting value is increased by 2^N-1 to
                    obtain the integer value.
                </t>
                <t>
                    The prefix size, N, is always between 1 and 8 bits. An
                    integer starting at an octet boundary will have an 8-bit
                    prefix.
                </t>
                <figure>
                    <preamble>
                        Pseudocode to represent an integer I is as follows:
                    </preamble>
                    <artwork type="inline"><![CDATA[
if I < 2^N - 1, encode I on N bits
else
    encode (2^N - 1) on N bits
    I = I - (2^N - 1)
    while I >= 128
         encode (I % 128 + 128) on 8 bits
         I = I / 128
    encode I on 8 bits
]]></artwork>
                </figure>
                <figure>
                    <preamble>
                        Pseudocode to decode an integer I is as follows:
                    </preamble>
                    <artwork type="inline"><![CDATA[
decode I from the next N bits
if I < 2^N - 1, return I
else
    M = 0
    repeat
        B = next octet
        I = I + (B & 127) * 2^M
        M = M + 7
    while B & 128 == 128
    return I
]]></artwork>
                </figure>
                <t>
                    Examples illustrating the encoding of integers are available
                    in <xref target="integer.representation.examples"/>.
                </t>
                <t>
                    This integer representation allows for values of indefinite
                    size.  It is also possible for an encoder to send a large
                    number of zero values, which can waste octets and could be
                    used to overflow integer values.  Integer encodings that
                    exceed implementation limits -- in value or octet length --
                    MUST be treated as decoding errors.  Different limits can
                    be set for each of the different uses of integers, based on
                    implementation constraints.
                </t>
            </section>

            <section anchor="string.literal.representation" title="String Literal Representation">
                <t>
                    Header field names and header field values can be
                    represented as string literals. A string literal is encoded
                    as a sequence of octets, either by directly encoding the
                    string literal's octets or by using a Huffman code
                    (see <xref target="HUFFMAN"/>).
                </t>
                <figure anchor="String.Literal.Representation" title="String Literal Representation">
                    <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| H |    String Length (7+)     |
+---+---------------------------+
|  String Data (Length octets)  |
+-------------------------------+
]]></artwork>
                </figure>
                <t>
                    A string literal representation contains the following
                    fields:
                    <list style="hanging">
                        <t hangText="H:">
                            A one-bit flag, H, indicating whether or not the
                            octets of the string are Huffman encoded.
                        </t>
                        <t hangText="String Length:">
                            The number of octets used to encode the string
                            literal, encoded as an integer with a 7-bit prefix
                            (see <xref target="integer.representation"/>).
                        </t>
                        <t hangText="String Data:">
                            The encoded data of the string literal. If H is
                            '0', then the encoded data is the raw octets of
                            the string literal. If H is '1', then the
                            encoded data is the Huffman encoding of the
                            string literal.
                        </t>
                    </list>
                </t>
                <t>
                    String literals that use Huffman encoding are encoded with
                    the Huffman code defined in <xref target="huffman.code"/>
                    (see examples for requests in <xref target="request.examples.with.huffman.coding"/> and for
                    responses in <xref target="response.examples.with.huffman.coding"/>). The
                    encoded data is the bitwise concatenation of the codes
                    corresponding to each octet of the string literal.
                </t>
                <t>
                    As the Huffman-encoded data doesn't always end at an octet
                    boundary, some padding is inserted after it, up to the next
                    octet boundary. To prevent this padding from being misinterpreted
                    as part of the string literal, the most significant bits of
                    the code corresponding to the EOS (end-of-string) symbol are
                    used.
                </t>
                <t>
                    Upon decoding, an incomplete code at the end of the
                    encoded data is to be considered as padding and discarded. A
                    padding strictly longer than 7 bits MUST be treated as a
                    decoding error. A padding not corresponding to the most
                    significant bits of the code for the EOS symbol MUST be
                    treated as a decoding error. A Huffman-encoded string
                    literal containing the EOS symbol MUST be treated as a
                    decoding error.
                </t>
            </section>
        </section>

        <section anchor="detailed.format" title="Binary Format">
            <t>
                This section describes the detailed format of each of the
                different header field representations and the dynamic table size update instruction.
            </t>

            <section anchor="indexed.header.representation" title="Indexed Header Field Representation">
                <t>
                    An indexed header field representation identifies an entry
                    in either the static table or the dynamic table (see <xref target="indexing.tables"/>).
                </t>
                <t>
                    An indexed header field representation causes a
                    header field to be added to the decoded header list, as
                    described in <xref target="header.representation.processing"/>.
                </t>

                <figure anchor="Indexed.Header.Field" title="Indexed Header Field">
                    <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 1 |        Index (7+)         |
+---+---------------------------+
]]></artwork>
                </figure>
                <t>
                    An indexed header field starts with the '1' 1-bit pattern,
                    followed by the index of the matching header field,
                    represented as an integer with a 7-bit prefix (see <xref target="integer.representation"/>).
                </t>
                <t>
                    The index value of 0 is not used. It MUST be treated as a
                    decoding error if found in an indexed header field
                    representation.
                </t>
            </section>

            <section anchor="literal.header.representation" title="Literal Header Field Representation">
                <t>
                    A literal header field representation contains a literal
                    header field value.  Header field names are provided either
                    as a literal or by reference to an existing table entry,
                    either from the static table or the dynamic table (see <xref target="indexing.tables"/>).
                </t>

                <t>
                  This specification defines three forms of literal header
                  field representations: with indexing, without indexing,
                  and never indexed.
                </t>

                <section anchor="literal.header.with.incremental.indexing" title="Literal Header Field with Incremental Indexing">
                    <t>
                        A literal header field with incremental indexing
                        representation results in appending a header field to
                        the decoded header list and inserting it as a new entry
                        into the dynamic table.
                    </t>
                    <figure anchor="Literal.Header.Field.with.Incremental.Indexing.Indexed.Name" title="Literal Header Field with Incremental Indexing -- Indexed Name">
                        <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 0 | 1 |      Index (6+)       |
+---+---+-----------------------+
| H |     Value Length (7+)     |
+---+---------------------------+
| Value String (Length octets)  |
+-------------------------------+
]]></artwork>
                    </figure>
                    <figure anchor="Literal.Header.Field.with.Incremental.Indexing.New.Name" title="Literal Header Field with Incremental Indexing -- New Name">
                        <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 0 | 1 |           0           |
+---+---+-----------------------+
| H |     Name Length (7+)      |
+---+---------------------------+
|  Name String (Length octets)  |
+---+---------------------------+
| H |     Value Length (7+)     |
+---+---------------------------+
| Value String (Length octets)  |
+-------------------------------+
]]></artwork>
                    </figure>
                    <t>
                        A literal header field with incremental indexing
                        representation starts with the '01' 2-bit pattern.
                    </t>
                    <t>
                        If the header field name matches the header field name
                        of an entry stored in the static table or the dynamic
                        table, the header field name can be represented using
                        the index of that entry. In this case, the index of the
                        entry is represented as an integer with a 6-bit prefix
                        (see <xref target="integer.representation"/>).  This
                        value is always non-zero.
                    </t>
                    <t>
                        Otherwise, the header field name is represented as a
                        string literal (see <xref target="string.literal.representation"/>). A value
                        0 is used in place of the 6-bit index, followed by the
                        header field name.
                    </t>
                    <t>
                        Either form of header field name representation is
                        followed by the header field value represented as a
                        string literal (see <xref target="string.literal.representation"/>).
                    </t>
                </section>

                <section anchor="literal.header.without.indexing" title="Literal Header Field without Indexing">
                    <t>
                        A literal header field without indexing representation
                        results in appending a header field to the decoded
                        header list without altering the dynamic table.
                    </t>
                    <figure anchor="Literal.Header.Field.without.Indexing.Indexed.Name" title="Literal Header Field without Indexing -- Indexed Name">
                        <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 0 | 0 | 0 | 0 |  Index (4+)   |
+---+---+-----------------------+
| H |     Value Length (7+)     |
+---+---------------------------+
| Value String (Length octets)  |
+-------------------------------+
]]></artwork>
                    </figure>
                    <figure anchor="Literal.Header.Field.without.Indexing.New.Name" title="Literal Header Field without Indexing -- New Name">
                        <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 0 | 0 | 0 | 0 |       0       |
+---+---+-----------------------+
| H |     Name Length (7+)      |
+---+---------------------------+
|  Name String (Length octets)  |
+---+---------------------------+
| H |     Value Length (7+)     |
+---+---------------------------+
| Value String (Length octets)  |
+-------------------------------+
]]></artwork>
                    </figure>
                    <t>
                        A literal header field without indexing representation
                        starts with the '0000' 4-bit pattern.
                    </t>
                    <t>
                        If the header field name matches the header field name
                        of an entry stored in the static table or the dynamic
                        table, the header field name can be represented using
                        the index of that entry. In this case, the index of the
                        entry is represented as an integer with a 4-bit prefix
                        (see <xref target="integer.representation"/>).  This
                        value is always non-zero.
                    </t>
                    <t>
                        Otherwise, the header field name is represented as a
                        string literal (see <xref target="string.literal.representation"/>). A value
                        0 is used in place of the 4-bit index, followed by the
                        header field name.
                    </t>
                    <t>
                        Either form of header field name representation is
                        followed by the header field value represented as a
                        string literal (see <xref target="string.literal.representation"/>).
                    </t>
                </section>

                <section anchor="literal.header.never.indexed" title="Literal Header Field Never Indexed">
                    <t>
                        A literal header field never-indexed representation
                        results in appending a header field to the decoded
                        header list without altering the dynamic table.
                        Intermediaries MUST use the same representation for
                        encoding this header field.
                    </t>
                    <figure anchor="Literal.Header.Field.never.Indexed.Indexed.Name" title="Literal Header Field Never Indexed -- Indexed Name">
                        <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 0 | 0 | 0 | 1 |  Index (4+)   |
+---+---+-----------------------+
| H |     Value Length (7+)     |
+---+---------------------------+
| Value String (Length octets)  |
+-------------------------------+
]]></artwork>
                    </figure>
                    <figure anchor="Literal.Header.Field.never.Indexed.New.Name" title="Literal Header Field Never Indexed -- New Name">
                        <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 0 | 0 | 0 | 1 |       0       |
+---+---+-----------------------+
| H |     Name Length (7+)      |
+---+---------------------------+
|  Name String (Length octets)  |
+---+---------------------------+
| H |     Value Length (7+)     |
+---+---------------------------+
| Value String (Length octets)  |
+-------------------------------+
]]></artwork>
                    </figure>
                    <t>
                        A literal header field never-indexed representation
                        starts with the '0001' 4-bit pattern.
                    </t>
                    <t>
                        When a header field is represented as a literal header
                        field never indexed, it MUST always be encoded with
                        this specific literal representation. In particular,
                        when a peer sends a header field that it received
                        represented as a literal header field never indexed, it
                        MUST use the same representation to forward this header
                        field.
                    </t>
                    <t>
                        This representation is intended for protecting header
                        field values that are not to be put at risk by
                        compressing them (see <xref target="compression.based.attacks"/> for more details).
                    </t>
                    <t>
                        The encoding of the representation is identical to the
                        literal header field without indexing
                        (see <xref target="literal.header.without.indexing"/>).
                    </t>
                </section>
            </section>

            <section anchor="encoding.context.update" title="Dynamic Table Size Update">
                <t>
                    A dynamic table size update signals a change to the size of
                    the dynamic table.
                </t>
                <figure anchor="Maximum.Dynamic.Table.Size.Change" title="Maximum Dynamic Table Size Change">
                    <artwork type="inline"><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 0 | 0 | 1 |   Max size (5+)   |
+---+---------------------------+
]]></artwork>
                </figure>
                <t>
                    A dynamic table size update starts with the '001' 3-bit
                    pattern, followed by the new maximum size, represented as an
                    integer with a 5-bit prefix (see <xref target="integer.representation"/>).
                </t>

                <t>
                    The new maximum size MUST be lower than or equal to the 
                    limit determined by the protocol using HPACK.
                    A value that
                    exceeds this limit MUST be treated as a decoding error. In
                    HTTP/2, this limit is the last value of the
                    SETTINGS_HEADER_TABLE_SIZE parameter (see Section 6.5.2 of <xref target="HTTP2"/>)
                    received from the decoder and acknowledged by the encoder
                    (see Section 6.5.3 of <xref target="HTTP2"/>).
                </t>
                <t>
                    Reducing the maximum size of the dynamic table can cause
                    entries to be evicted (see <xref target="entry.eviction"/>).
                </t>
            </section>
        </section>

        <section anchor="Security" title="Security Considerations">

            <t>
                This section describes potential areas of security concern
                with HPACK:
                <list style="symbols">
                    <t>
                        Use of compression as a length-based oracle for
                        verifying guesses about secrets that are compressed
                        into a shared compression context.
                    </t>
                    <t>
                        Denial of service resulting from exhausting processing
                        or memory capacity at a decoder.
                    </t>
                </list>
            </t>

            <section anchor="compression.based.attacks" title="Probing Dynamic Table State">

                <t>
                    HPACK reduces the length of header field encodings by
                    exploiting the redundancy inherent in protocols like HTTP.
                    The ultimate goal of this is to reduce the amount of data
                    that is required to send HTTP requests or responses.
                </t>
                <t>
                    The compression context used to encode header fields can be
                    probed by an attacker who can both define header fields to
                    be encoded and transmitted and observe the length of those
                    fields once they are encoded. When an attacker can do both,
                    they can adaptively modify requests in order to confirm
                    guesses about the dynamic table state. If a guess is
                    compressed into a shorter length, the attacker can observe
                    the encoded length and infer that the guess was correct.
                </t>
                <t>
                    This is possible even over the Transport Layer Security (TLS)
                    protocol (see <xref target="TLS12"/>), because while
                    TLS provides confidentiality protection for content, it only
                    provides a limited amount of protection for the length of
                    that content.
                    <list>
                        <t>
                            Note: Padding schemes only provide limited protection
                            against an attacker with these capabilities,
                            potentially only forcing an increased number of
                            guesses to learn the length associated with a given
                            guess.  Padding schemes also work directly against
                            compression by increasing the number of bits that
                            are transmitted.
                        </t>
                    </list>
                </t>
                <t>
                    Attacks like <xref target="CRIME">CRIME</xref> demonstrated
                    the existence of these general attacker capabilities.  The
                    specific attack exploited the fact that <xref target="DEFLATE">DEFLATE</xref> removes redundancy based
                    on prefix matching.  This permitted the attacker to confirm
                    guesses a character at a time, reducing an exponential-time
                    attack into a linear-time attack.
                </t>

                <section title="Applicability to HPACK and HTTP">
                    <t>
                        HPACK mitigates but does not completely prevent attacks
                        modeled on <xref target="CRIME">CRIME</xref> by forcing
                        a guess to match an entire header field value rather
                        than individual characters.  Attackers can only learn
                        whether a guess is correct or not, so they are reduced to 
                        brute-force guesses for the header field values.
                    </t>
                    <t>
                        The viability of recovering specific header field values
                        therefore depends on the entropy of values.  As a
                        result, values with high entropy are unlikely to be
                        recovered successfully.  However, values with low
                        entropy remain vulnerable.
                    </t>
                    <t>
                        Attacks of this nature are possible any time that two
                        mutually distrustful entities control requests or
                        responses that are placed onto a single HTTP/2
                        connection.  If the shared HPACK compressor permits one
                        entity to add entries to the dynamic table and the
                        other to access those entries, then the state of the
                        table can be learned.
                    </t>
                    <t>
                        Having requests or responses from mutually distrustful
                        entities occurs when an intermediary either:
                        <list style="symbols">
                            <t>
                                sends requests from multiple clients on a single
                                connection toward an origin server, or
                            </t>
                            <t>
                                takes responses from multiple origin servers and
                                places them on a shared connection toward a
                                client.
                            </t>
                        </list>
                        Web browsers also need to assume that requests made on
                        the same connection by different <xref target="ORIGIN">web origins</xref> are made by mutually
                        distrustful entities.
                    </t>
                </section>

                <section title="Mitigation">
                    <t>
                        Users of HTTP that require confidentiality for header
                        fields can use values with entropy sufficient to make
                        guessing infeasible.  However, this is impractical as a
                        general solution because it forces all users of HTTP to
                        take steps to mitigate attacks.  It would impose new
                        constraints on how HTTP is used.
                    </t>
                    <t>
                        Rather than impose constraints on users of HTTP, an
                        implementation of HPACK can instead constrain how
                        compression is applied in order to limit the potential
                        for dynamic table probing.
                    </t>
                    <t>
                        An ideal solution segregates access to the dynamic table
                        based on the entity that is constructing header fields.
                        Header field values that are added to the table are
                        attributed to an entity, and only the entity that
                        created a particular value can extract that value.
                    </t>
                    <t>
                        To improve compression performance of this option,
                        certain entries might be tagged as being public.  For
                        example, a web browser might make the values of the
                        Accept-Encoding header field available in all requests.
                    </t>
                    <t>
                        An encoder without good knowledge of the provenance of
                        header fields might instead introduce a penalty for
                        a header field with many different values, such that a
                        large number of attempts to guess a header field
                        value results in the header field no longer being compared
                        to the dynamic table entries in future messages,
                        effectively preventing further guesses.
                        <list>
                            <t>
                                Note: Simply removing entries corresponding to the
                                header field from the dynamic table
                                can be ineffectual if the attacker has a
                                reliable way of causing values to be
                                reinstalled.  For example, a request to load an
                                image in a web browser typically includes the
                                Cookie header field (a potentially highly valued
                                target for this sort of attack), and web sites
                                can easily force an image to be loaded, thereby
                                refreshing the entry in the dynamic table.
                            </t>
                        </list>
                    </t>
                    <t>
                        This response might be made inversely proportional to
                        the length of the header field value.  Marking a header
                        field as not using the dynamic table anymore
                        might occur for shorter values more quickly
                        or with higher probability than for longer values.
                    </t>
                </section>

                <section anchor="never.indexed.literals" title="Never-Indexed Literals">
                    <t>
                        Implementations can also choose to protect sensitive
                        header fields by not compressing them and instead
                        encoding their value as literals.
                    </t>
                    <t>
                        Refusing to generate an indexed representation for a
                        header field is only effective if compression is avoided
                        on all hops.  The never-indexed literal (see <xref target="literal.header.never.indexed"/>) can be used
                        to signal to intermediaries that a particular value was
                        intentionally sent as a literal.
                    </t>
                    <t>
                        An intermediary MUST NOT re-encode a value that uses the
                        never-indexed literal representation with another
                        representation that would index it. If HPACK is used
                        for re-encoding, the never-indexed literal
                        representation MUST be used.
                    </t>
                    <t>
                        The choice to use a never-indexed literal representation
                        for a header field depends on several factors. Since
                        HPACK doesn't protect against guessing an entire header
                        field value, short or low-entropy values are more
                        readily recovered by an adversary. Therefore, an encoder
                        might choose not to index values with low entropy.
                    </t>
                    <t>
                        An encoder might also choose not to index values for
                        header fields that are considered to be highly valuable
                        or sensitive to recovery, such as the Cookie or
                        Authorization header fields.
                    </t>
                    <t>
                        On the contrary, an encoder might prefer indexing values
                        for header fields that have little or no value if they
                        were exposed. For instance, a User-Agent header field
                        does not commonly vary between requests and is sent to
                        any server. In that case, confirmation that a particular
                        User-Agent value has been used provides little value.
                    </t>
                    <t>
                        Note that these criteria for deciding to use a never-indexed literal representation will evolve over time as
                        new attacks are discovered.
                    </t>
                </section>
            </section>

            <section title="Static Huffman Encoding">
                <t>
                    There is no currently known attack against a static Huffman
                    encoding. A study has shown that using a static Huffman
                    encoding table created an information leakage; however, this
                    same study concluded that an attacker could not take
                    advantage of this information leakage to recover any
                    meaningful amount of information (see <xref target="PETAL"/>).
                </t>
            </section>

            <section title="Memory Consumption">
                <t>
                    An attacker can try to cause an endpoint to exhaust its
                    memory. HPACK is designed to limit both the peak and state
                    amounts of memory allocated by an endpoint.
                </t>
                <t>
                    The amount of memory used by the compressor is limited by
                    the protocol using HPACK through the definition of the
                    maximum size of the dynamic table.
                    In HTTP/2, this value is controlled by the decoder through
                    the setting parameter SETTINGS_HEADER_TABLE_SIZE (see Section 6.5.2 of <xref target="HTTP2"/>).
                    This limit takes into account both the size of the data
                    stored in the dynamic table, plus a small allowance for
                    overhead.
                </t>
                <t>
                    A decoder can limit the amount of state memory used by
                    setting an appropriate value for the maximum size of the
                    dynamic table. In HTTP/2, this is realized by setting an
                    appropriate value for the SETTINGS_HEADER_TABLE_SIZE
                    parameter.  An encoder can limit the amount of state memory
                    it uses by signaling a lower dynamic table size than the
                    decoder allows (see <xref target="encoding.context.update"/>).
                </t>
                <t>
                    The amount of temporary memory consumed by an encoder or
                    decoder can be limited by processing header fields
                    sequentially.  An implementation does not need to retain a
                    complete list of header fields.  Note, however, that it might
                    be necessary for an application to retain a complete header
                    list for other reasons; even though HPACK does not force
                    this to occur, application constraints might make this
                    necessary.
                </t>
            </section>

            <section title="Implementation Limits">
                <t>
                    An implementation of HPACK needs to ensure that large values
                    for integers, long encoding for integers, or long string
                    literals do not create security weaknesses.
                </t>
                <t>
                    An implementation has to set a limit for the values it
                    accepts for integers, as well as for the encoded length (see
                    <xref target="integer.representation"/>).  In the same way,
                    it has to set a limit to the length it accepts for string
                    literals (see <xref target="string.literal.representation"/>).
                </t>
            </section>

        </section>


    </middle>

    <back>


        <references title="Normative References">

<!-- draft-ietf-httpbis-http2-17 Part of Cluster 243 -->
            <reference anchor="HTTP2" target='http://www.rfc-editor.org/info/rfc7540'>
                <front>
                    <title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
                    <author initials="M." surname="Belshe" fullname="Mike Belshe">
                        <organization>Twist</organization>
                    </author>
                    <author initials="R." surname="Peon" fullname="Roberto Peon">
                        <organization>Google</organization>
                    </author>
                    <author initials="M." surname="Thomson" fullname="Martin Thomson" role="editor">
                        <organization>Mozilla</organization>
                    </author>
                    <date month="May" year="2015"/>
                </front>
                <seriesInfo name="RFC" value="7540"/>
                
            </reference>


    <reference  anchor='RFC7230' target='http://www.rfc-editor.org/info/rfc7230'>
    <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
    <author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
    <author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
    <date year='2014' month='June' />
    </front>
    <seriesInfo name='RFC' value='7230'/>
    <seriesInfo name='DOI' value='10.17487/RFC7230'/>
    <format type='ASCII' octets='205947'/>
    </reference>


    <reference  anchor='RFC2119' target='http://www.rfc-editor.org/info/rfc2119'>
    <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
    <date year='1997' month='March' />
    </front>
    <seriesInfo name='BCP' value='14'/>
    <seriesInfo name='RFC' value='2119'/>
    <seriesInfo name='DOI' value='10.17487/RFC2119'/>
    <format type='ASCII' octets='4723'/>
    </reference>

        </references>

        <references title="Informative References">

<!-- draft-mbelshe-httpbis-spdy-00 EXPIRED replaced by
     draft-ietf-httpbis-http2 (which is RFC 7540 in this cluster) -->
            <reference anchor="SPDY">
                <front>
                    <title>SPDY Protocol</title>
                    <author initials="M." surname="Belshe" fullname="Mike Belshe">
                        <organization>Twist</organization>
                    </author>
                    <author initials="R." surname="Peon" fullname="Roberto Peon">
                        <organization>Google</organization>
                    </author>
                    <date month="February" year="2012"/>
                </front>
              <seriesInfo name='Work in Progress,' value='draft-mbelshe-httpbis-spdy-00' />
            </reference>


    <reference  anchor='TLS12' target='http://www.rfc-editor.org/info/rfc5246'>
    <front>
    <title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
    <author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
    <author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
    <date year='2008' month='August' />
    </front>
    <seriesInfo name='RFC' value='5246'/>
    <seriesInfo name='DOI' value='10.17487/RFC5246'/>
    <format type='ASCII' octets='222395'/>
    </reference>


    <reference  anchor='ORIGIN' target='http://www.rfc-editor.org/info/rfc6454'>
    <front>
    <title>The Web Origin Concept</title>
    <author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
    <date year='2011' month='December' />
    </front>
    <seriesInfo name='RFC' value='6454'/>
    <seriesInfo name='DOI' value='10.17487/RFC6454'/>
    <format type='ASCII' octets='41363'/>
    </reference>


    <reference  anchor='DEFLATE' target='http://www.rfc-editor.org/info/rfc1951'>
    <front>
    <title>DEFLATE Compressed Data Format Specification version 1.3</title>
    <author initials='P.' surname='Deutsch' fullname='P. Deutsch'><organization /></author>
    <date year='1996' month='May' />
    </front>
    <seriesInfo name='RFC' value='1951'/>
    <seriesInfo name='DOI' value='10.17487/RFC1951'/>
    <format type='ASCII, PS, PDF' octets='36944, 57408, 56620'/>
    </reference>



            <reference anchor="CRIME"
		       target="http://en.wikipedia.org/w/index.php?title=CRIME&amp;oldid=660948120">
                <front>
                    <title>CRIME</title>
                    <author>
<organization>Wikipedia</organization>
		    </author>
                    <date month="May" year="2015"/>
                </front>
            </reference>

            <reference anchor="HUFFMAN" target="http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=4051119">
                <front>
                    <title>A Method for the Construction of Minimum-Redundancy
                    Codes</title>
                    <author surname="Huffman" initials="D. A." fullname="David A. Huffman"/>
                    <date month="September" year="1952"/>
                </front>
                <seriesInfo name="Proceedings of the Institute of Radio Engineers," value="Volume 40, Number 9, pp. 1098-1101"/>
            </reference>

            <reference anchor="CANONICAL" target="https://dl.acm.org/citation.cfm?id=363991">
                <front>
                    <title>Generating a canonical prefix encoding</title>
                    <author surname="Schwartz" initials="E. S." fullname="Eugene. S. Schwartz"/>
                    <author surname="Kallick" initials="B." fullname="Bruce Kallick"/>
                    <date month="March" year="1964"/>
                </front>
                <seriesInfo name="Communications of the ACM," value="Volume 7 Issue 3, pp. 166-169"/>
            </reference>

            <reference anchor="PETAL" target="http://www.pdl.cmu.edu/PDL-FTP/associated/CMU-PDL-13-106.pdf">
                <front>
                    <title>PETAL: Preset Encoding Table Information
                    Leakage</title>
                    <author surname="Tan" initials="J." fullname="Jiaqi Tan"/>
                    <author surname="Nahata" initials="J." fullname="Jayvardhan Nahata"/>
                    <date month="April" year="2013"/>
                </front>
            </reference>
        </references>

        <section anchor="static.table.definition" title="Static Table Definition">
            <t>
                The static table (see <xref target="static.table"/>) consists in
                a predefined and unchangeable list of header fields.
            </t>
            <t>
                The static table was created from the most frequent header
                fields used by popular web sites, with the addition of
                HTTP/2-specific pseudo-header fields (see Section 8.1.2.1 of <xref target="HTTP2"/>).
                For header fields with a few frequent
                values, an entry was added for each of these frequent values.
                For other header fields, an entry was added with an empty
                value.
            </t>


            <t>
   <xref target="static.table.entries"/> lists the predefined header fields that make up
   the static table and gives the index of each entry.
            </t>
            <texttable title="Static Table Entries" anchor="static.table.entries">
                <ttcol>Index</ttcol>
                <ttcol>Header Name</ttcol>
                <ttcol>Header Value</ttcol>

                <c>1</c><c>:authority</c><c/>
                <c>2</c><c>:method</c><c>GET</c>
                <c>3</c><c>:method</c><c>POST</c>
                <c>4</c><c>:path</c><c>/</c>
                <c>5</c><c>:path</c><c>/index.html</c>
                <c>6</c><c>:scheme</c><c>http</c>
                <c>7</c><c>:scheme</c><c>https</c>
                <c>8</c><c>:status</c><c>200</c>
                <c>9</c><c>:status</c><c>204</c>
                <c>10</c><c>:status</c><c>206</c>
                <c>11</c><c>:status</c><c>304</c>
                <c>12</c><c>:status</c><c>400</c>
                <c>13</c><c>:status</c><c>404</c>
                <c>14</c><c>:status</c><c>500</c>
                <c>15</c><c>accept-charset</c><c/>
                <c>16</c><c>accept-encoding</c><c>gzip, deflate</c>
                <c>17</c><c>accept-language</c><c/>
                <c>18</c><c>accept-ranges</c><c/>
                <c>19</c><c>accept</c><c/>
                <c>20</c><c>access-control-allow-origin</c><c/>
                <c>21</c><c>age</c><c/>
                <c>22</c><c>allow</c><c/>
                <c>23</c><c>authorization</c><c/>
                <c>24</c><c>cache-control</c><c/>
                <c>25</c><c>content-disposition</c><c/>
                <c>26</c><c>content-encoding</c><c/>
                <c>27</c><c>content-language</c><c/>
                <c>28</c><c>content-length</c><c/>
                <c>29</c><c>content-location</c><c/>
                <c>30</c><c>content-range</c><c/>
                <c>31</c><c>content-type</c><c/>
                <c>32</c><c>cookie</c><c/>
                <c>33</c><c>date</c><c/>
                <c>34</c><c>etag</c><c/>
                <c>35</c><c>expect</c><c/>
                <c>36</c><c>expires</c><c/>
                <c>37</c><c>from</c><c/>
                <c>38</c><c>host</c><c/>
                <c>39</c><c>if-match</c><c/>
                <c>40</c><c>if-modified-since</c><c/>
                <c>41</c><c>if-none-match</c><c/>
                <c>42</c><c>if-range</c><c/>
                <c>43</c><c>if-unmodified-since</c><c/>
                <c>44</c><c>last-modified</c><c/>
                <c>45</c><c>link</c><c/>
                <c>46</c><c>location</c><c/>
                <c>47</c><c>max-forwards</c><c/>
                <c>48</c><c>proxy-authenticate</c><c/>
                <c>49</c><c>proxy-authorization</c><c/>
                <c>50</c><c>range</c><c/>
                <c>51</c><c>referer</c><c/>
                <c>52</c><c>refresh</c><c/>
                <c>53</c><c>retry-after</c><c/>
                <c>54</c><c>server</c><c/>
                <c>55</c><c>set-cookie</c><c/>
                <c>56</c><c>strict-transport-security</c><c/>
                <c>57</c><c>transfer-encoding</c><c/>
                <c>58</c><c>user-agent</c><c/>
                <c>59</c><c>vary</c><c/>
                <c>60</c><c>via</c><c/>
                <c>61</c><c>www-authenticate</c><c/>
            </texttable>
   
        </section>

        <section anchor="huffman.code" title="Huffman Code">
            <t>
                The following Huffman code is used when encoding string literals
                with a Huffman coding (see <xref target="string.literal.representation"/>).
            </t>
            <t>
                This Huffman code was generated from statistics obtained on a
                large sample of HTTP headers. It is a canonical Huffman code
                (see <xref target="CANONICAL"/>) with some tweaking to ensure
                that no symbol has a unique code length.
            </t>
            <t>
                Each row in the table defines the code used to represent a
                symbol:
                <list style="hanging">
                    <t hangText="sym:">
                        The symbol to be represented. It is the decimal value of
                        an octet, possibly prepended with its ASCII
                        representation. A specific symbol, "EOS", is used to
                        indicate the end of a string literal.
                    </t>
                    <t hangText="code as bits:">
                        The Huffman code for the symbol represented as a base-2
                        integer, aligned on the most significant bit (MSB).
                    </t>
                    <t hangText="code as hex:">
                        The Huffman code for the symbol, represented as a
                        hexadecimal integer, aligned on the least significant
                        bit (LSB).
                    </t>
                    <t hangText="len:">
                        The number of bits for the code representing the symbol.
                    </t>
                </list>
            </t>
            <t>
                As an example, the code for the symbol 47 (corresponding to the
                ASCII character "/") consists in the 6 bits "0", "1", "1", "0",
                "0", "0". This corresponds to the value 0x18 (in hexadecimal)
                encoded in 6 bits.
            </t>
            <figure>
                <artwork><![CDATA[
                                                     code
                       code as bits                 as hex   len
     sym              aligned to MSB                aligned   in
                                                    to LSB   bits
    (  0)  |11111111|11000                             1ff8  [13]
    (  1)  |11111111|11111111|1011000                7fffd8  [23]
    (  2)  |11111111|11111111|11111110|0010         fffffe2  [28]
    (  3)  |11111111|11111111|11111110|0011         fffffe3  [28]
    (  4)  |11111111|11111111|11111110|0100         fffffe4  [28]
    (  5)  |11111111|11111111|11111110|0101         fffffe5  [28]
    (  6)  |11111111|11111111|11111110|0110         fffffe6  [28]
    (  7)  |11111111|11111111|11111110|0111         fffffe7  [28]
    (  8)  |11111111|11111111|11111110|1000         fffffe8  [28]
    (  9)  |11111111|11111111|11101010               ffffea  [24]
    ( 10)  |11111111|11111111|11111111|111100      3ffffffc  [30]
    ( 11)  |11111111|11111111|11111110|1001         fffffe9  [28]
    ( 12)  |11111111|11111111|11111110|1010         fffffea  [28]
    ( 13)  |11111111|11111111|11111111|111101      3ffffffd  [30]
    ( 14)  |11111111|11111111|11111110|1011         fffffeb  [28]
    ( 15)  |11111111|11111111|11111110|1100         fffffec  [28]
    ( 16)  |11111111|11111111|11111110|1101         fffffed  [28]
    ( 17)  |11111111|11111111|11111110|1110         fffffee  [28]
    ( 18)  |11111111|11111111|11111110|1111         fffffef  [28]
    ( 19)  |11111111|11111111|11111111|0000         ffffff0  [28]
    ( 20)  |11111111|11111111|11111111|0001         ffffff1  [28]
    ( 21)  |11111111|11111111|11111111|0010         ffffff2  [28]
    ( 22)  |11111111|11111111|11111111|111110      3ffffffe  [30]
    ( 23)  |11111111|11111111|11111111|0011         ffffff3  [28]
    ( 24)  |11111111|11111111|11111111|0100         ffffff4  [28]
    ( 25)  |11111111|11111111|11111111|0101         ffffff5  [28]
    ( 26)  |11111111|11111111|11111111|0110         ffffff6  [28]
    ( 27)  |11111111|11111111|11111111|0111         ffffff7  [28]
    ( 28)  |11111111|11111111|11111111|1000         ffffff8  [28]
    ( 29)  |11111111|11111111|11111111|1001         ffffff9  [28]
    ( 30)  |11111111|11111111|11111111|1010         ffffffa  [28]
    ( 31)  |11111111|11111111|11111111|1011         ffffffb  [28]
' ' ( 32)  |010100                                       14  [ 6]
'!' ( 33)  |11111110|00                                 3f8  [10]
'"' ( 34)  |11111110|01                                 3f9  [10]
'#' ( 35)  |11111111|1010                               ffa  [12]
'$' ( 36)  |11111111|11001                             1ff9  [13]
'%' ( 37)  |010101                                       15  [ 6]
'&' ( 38)  |11111000                                     f8  [ 8]
''' ( 39)  |11111111|010                                7fa  [11]
'(' ( 40)  |11111110|10                                 3fa  [10]
')' ( 41)  |11111110|11                                 3fb  [10]
'*' ( 42)  |11111001                                     f9  [ 8]
'+' ( 43)  |11111111|011                                7fb  [11]
',' ( 44)  |11111010                                     fa  [ 8]
'-' ( 45)  |010110                                       16  [ 6]
'.' ( 46)  |010111                                       17  [ 6]
'/' ( 47)  |011000                                       18  [ 6]
'0' ( 48)  |00000                                         0  [ 5]
'1' ( 49)  |00001                                         1  [ 5]
'2' ( 50)  |00010                                         2  [ 5]
'3' ( 51)  |011001                                       19  [ 6]
'4' ( 52)  |011010                                       1a  [ 6]
'5' ( 53)  |011011                                       1b  [ 6]
'6' ( 54)  |011100                                       1c  [ 6]
'7' ( 55)  |011101                                       1d  [ 6]
'8' ( 56)  |011110                                       1e  [ 6]
'9' ( 57)  |011111                                       1f  [ 6]
':' ( 58)  |1011100                                      5c  [ 7]
';' ( 59)  |11111011                                     fb  [ 8]
'<' ( 60)  |11111111|1111100                           7ffc  [15]
'=' ( 61)  |100000                                       20  [ 6]
'>' ( 62)  |11111111|1011                               ffb  [12]
'?' ( 63)  |11111111|00                                 3fc  [10]
'@' ( 64)  |11111111|11010                             1ffa  [13]
'A' ( 65)  |100001                                       21  [ 6]
'B' ( 66)  |1011101                                      5d  [ 7]
'C' ( 67)  |1011110                                      5e  [ 7]
'D' ( 68)  |1011111                                      5f  [ 7]
'E' ( 69)  |1100000                                      60  [ 7]
'F' ( 70)  |1100001                                      61  [ 7]
'G' ( 71)  |1100010                                      62  [ 7]
'H' ( 72)  |1100011                                      63  [ 7]
'I' ( 73)  |1100100                                      64  [ 7]
'J' ( 74)  |1100101                                      65  [ 7]
'K' ( 75)  |1100110                                      66  [ 7]
'L' ( 76)  |1100111                                      67  [ 7]
'M' ( 77)  |1101000                                      68  [ 7]
'N' ( 78)  |1101001                                      69  [ 7]
'O' ( 79)  |1101010                                      6a  [ 7]
'P' ( 80)  |1101011                                      6b  [ 7]
'Q' ( 81)  |1101100                                      6c  [ 7]
'R' ( 82)  |1101101                                      6d  [ 7]
'S' ( 83)  |1101110                                      6e  [ 7]
'T' ( 84)  |1101111                                      6f  [ 7]
'U' ( 85)  |1110000                                      70  [ 7]
'V' ( 86)  |1110001                                      71  [ 7]
'W' ( 87)  |1110010                                      72  [ 7]
'X' ( 88)  |11111100                                     fc  [ 8]
'Y' ( 89)  |1110011                                      73  [ 7]
'Z' ( 90)  |11111101                                     fd  [ 8]
'[' ( 91)  |11111111|11011                             1ffb  [13]
'\' ( 92)  |11111111|11111110|000                     7fff0  [19]
']' ( 93)  |11111111|11100                             1ffc  [13]
'^' ( 94)  |11111111|111100                            3ffc  [14]
'_' ( 95)  |100010                                       22  [ 6]
'`' ( 96)  |11111111|1111101                           7ffd  [15]
'a' ( 97)  |00011                                         3  [ 5]
'b' ( 98)  |100011                                       23  [ 6]
'c' ( 99)  |00100                                         4  [ 5]
'd' (100)  |100100                                       24  [ 6]
'e' (101)  |00101                                         5  [ 5]
'f' (102)  |100101                                       25  [ 6]
'g' (103)  |100110                                       26  [ 6]
'h' (104)  |100111                                       27  [ 6]
'i' (105)  |00110                                         6  [ 5]
'j' (106)  |1110100                                      74  [ 7]
'k' (107)  |1110101                                      75  [ 7]
'l' (108)  |101000                                       28  [ 6]
'm' (109)  |101001                                       29  [ 6]
'n' (110)  |101010                                       2a  [ 6]
'o' (111)  |00111                                         7  [ 5]
'p' (112)  |101011                                       2b  [ 6]
'q' (113)  |1110110                                      76  [ 7]
'r' (114)  |101100                                       2c  [ 6]
's' (115)  |01000                                         8  [ 5]
't' (116)  |01001                                         9  [ 5]
'u' (117)  |101101                                       2d  [ 6]
'v' (118)  |1110111                                      77  [ 7]
'w' (119)  |1111000                                      78  [ 7]
'x' (120)  |1111001                                      79  [ 7]
'y' (121)  |1111010                                      7a  [ 7]
'z' (122)  |1111011                                      7b  [ 7]
'{' (123)  |11111111|1111110                           7ffe  [15]
'|' (124)  |11111111|100                                7fc  [11]
'}' (125)  |11111111|111101                            3ffd  [14]
'~' (126)  |11111111|11101                             1ffd  [13]
    (127)  |11111111|11111111|11111111|1100         ffffffc  [28]
    (128)  |11111111|11111110|0110                    fffe6  [20]
    (129)  |11111111|11111111|010010                 3fffd2  [22]
    (130)  |11111111|11111110|0111                    fffe7  [20]
    (131)  |11111111|11111110|1000                    fffe8  [20]
    (132)  |11111111|11111111|010011                 3fffd3  [22]
    (133)  |11111111|11111111|010100                 3fffd4  [22]
    (134)  |11111111|11111111|010101                 3fffd5  [22]
    (135)  |11111111|11111111|1011001                7fffd9  [23]
    (136)  |11111111|11111111|010110                 3fffd6  [22]
    (137)  |11111111|11111111|1011010                7fffda  [23]
    (138)  |11111111|11111111|1011011                7fffdb  [23]
    (139)  |11111111|11111111|1011100                7fffdc  [23]
    (140)  |11111111|11111111|1011101                7fffdd  [23]
    (141)  |11111111|11111111|1011110                7fffde  [23]
    (142)  |11111111|11111111|11101011               ffffeb  [24]
    (143)  |11111111|11111111|1011111                7fffdf  [23]
    (144)  |11111111|11111111|11101100               ffffec  [24]
    (145)  |11111111|11111111|11101101               ffffed  [24]
    (146)  |11111111|11111111|010111                 3fffd7  [22]
    (147)  |11111111|11111111|1100000                7fffe0  [23]
    (148)  |11111111|11111111|11101110               ffffee  [24]
    (149)  |11111111|11111111|1100001                7fffe1  [23]
    (150)  |11111111|11111111|1100010                7fffe2  [23]
    (151)  |11111111|11111111|1100011                7fffe3  [23]
    (152)  |11111111|11111111|1100100                7fffe4  [23]
    (153)  |11111111|11111110|11100                  1fffdc  [21]
    (154)  |11111111|11111111|011000                 3fffd8  [22]
    (155)  |11111111|11111111|1100101                7fffe5  [23]
    (156)  |11111111|11111111|011001                 3fffd9  [22]
    (157)  |11111111|11111111|1100110                7fffe6  [23]
    (158)  |11111111|11111111|1100111                7fffe7  [23]
    (159)  |11111111|11111111|11101111               ffffef  [24]
    (160)  |11111111|11111111|011010                 3fffda  [22]
    (161)  |11111111|11111110|11101                  1fffdd  [21]
    (162)  |11111111|11111110|1001                    fffe9  [20]
    (163)  |11111111|11111111|011011                 3fffdb  [22]
    (164)  |11111111|11111111|011100                 3fffdc  [22]
    (165)  |11111111|11111111|1101000                7fffe8  [23]
    (166)  |11111111|11111111|1101001                7fffe9  [23]
    (167)  |11111111|11111110|11110                  1fffde  [21]
    (168)  |11111111|11111111|1101010                7fffea  [23]
    (169)  |11111111|11111111|011101                 3fffdd  [22]
    (170)  |11111111|11111111|011110                 3fffde  [22]
    (171)  |11111111|11111111|11110000               fffff0  [24]
    (172)  |11111111|11111110|11111                  1fffdf  [21]
    (173)  |11111111|11111111|011111                 3fffdf  [22]
    (174)  |11111111|11111111|1101011                7fffeb  [23]
    (175)  |11111111|11111111|1101100                7fffec  [23]
    (176)  |11111111|11111111|00000                  1fffe0  [21]
    (177)  |11111111|11111111|00001                  1fffe1  [21]
    (178)  |11111111|11111111|100000                 3fffe0  [22]
    (179)  |11111111|11111111|00010                  1fffe2  [21]
    (180)  |11111111|11111111|1101101                7fffed  [23]
    (181)  |11111111|11111111|100001                 3fffe1  [22]
    (182)  |11111111|11111111|1101110                7fffee  [23]
    (183)  |11111111|11111111|1101111                7fffef  [23]
    (184)  |11111111|11111110|1010                    fffea  [20]
    (185)  |11111111|11111111|100010                 3fffe2  [22]
    (186)  |11111111|11111111|100011                 3fffe3  [22]
    (187)  |11111111|11111111|100100                 3fffe4  [22]
    (188)  |11111111|11111111|1110000                7ffff0  [23]
    (189)  |11111111|11111111|100101                 3fffe5  [22]
    (190)  |11111111|11111111|100110                 3fffe6  [22]
    (191)  |11111111|11111111|1110001                7ffff1  [23]
    (192)  |11111111|11111111|11111000|00           3ffffe0  [26]
    (193)  |11111111|11111111|11111000|01           3ffffe1  [26]
    (194)  |11111111|11111110|1011                    fffeb  [20]
    (195)  |11111111|11111110|001                     7fff1  [19]
    (196)  |11111111|11111111|100111                 3fffe7  [22]
    (197)  |11111111|11111111|1110010                7ffff2  [23]
    (198)  |11111111|11111111|101000                 3fffe8  [22]
    (199)  |11111111|11111111|11110110|0            1ffffec  [25]
    (200)  |11111111|11111111|11111000|10           3ffffe2  [26]
    (201)  |11111111|11111111|11111000|11           3ffffe3  [26]
    (202)  |11111111|11111111|11111001|00           3ffffe4  [26]
    (203)  |11111111|11111111|11111011|110          7ffffde  [27]
    (204)  |11111111|11111111|11111011|111          7ffffdf  [27]
    (205)  |11111111|11111111|11111001|01           3ffffe5  [26]
    (206)  |11111111|11111111|11110001               fffff1  [24]
    (207)  |11111111|11111111|11110110|1            1ffffed  [25]
    (208)  |11111111|11111110|010                     7fff2  [19]
    (209)  |11111111|11111111|00011                  1fffe3  [21]
    (210)  |11111111|11111111|11111001|10           3ffffe6  [26]
    (211)  |11111111|11111111|11111100|000          7ffffe0  [27]
    (212)  |11111111|11111111|11111100|001          7ffffe1  [27]
    (213)  |11111111|11111111|11111001|11           3ffffe7  [26]
    (214)  |11111111|11111111|11111100|010          7ffffe2  [27]
    (215)  |11111111|11111111|11110010               fffff2  [24]
    (216)  |11111111|11111111|00100                  1fffe4  [21]
    (217)  |11111111|11111111|00101                  1fffe5  [21]
    (218)  |11111111|11111111|11111010|00           3ffffe8  [26]
    (219)  |11111111|11111111|11111010|01           3ffffe9  [26]
    (220)  |11111111|11111111|11111111|1101         ffffffd  [28]
    (221)  |11111111|11111111|11111100|011          7ffffe3  [27]
    (222)  |11111111|11111111|11111100|100          7ffffe4  [27]
    (223)  |11111111|11111111|11111100|101          7ffffe5  [27]
    (224)  |11111111|11111110|1100                    fffec  [20]
    (225)  |11111111|11111111|11110011               fffff3  [24]
    (226)  |11111111|11111110|1101                    fffed  [20]
    (227)  |11111111|11111111|00110                  1fffe6  [21]
    (228)  |11111111|11111111|101001                 3fffe9  [22]
    (229)  |11111111|11111111|00111                  1fffe7  [21]
    (230)  |11111111|11111111|01000                  1fffe8  [21]
    (231)  |11111111|11111111|1110011                7ffff3  [23]
    (232)  |11111111|11111111|101010                 3fffea  [22]
    (233)  |11111111|11111111|101011                 3fffeb  [22]
    (234)  |11111111|11111111|11110111|0            1ffffee  [25]
    (235)  |11111111|11111111|11110111|1            1ffffef  [25]
    (236)  |11111111|11111111|11110100               fffff4  [24]
    (237)  |11111111|11111111|11110101               fffff5  [24]
    (238)  |11111111|11111111|11111010|10           3ffffea  [26]
    (239)  |11111111|11111111|1110100                7ffff4  [23]
    (240)  |11111111|11111111|11111010|11           3ffffeb  [26]
    (241)  |11111111|11111111|11111100|110          7ffffe6  [27]
    (242)  |11111111|11111111|11111011|00           3ffffec  [26]
    (243)  |11111111|11111111|11111011|01           3ffffed  [26]
    (244)  |11111111|11111111|11111100|111          7ffffe7  [27]
    (245)  |11111111|11111111|11111101|000          7ffffe8  [27]
    (246)  |11111111|11111111|11111101|001          7ffffe9  [27]
    (247)  |11111111|11111111|11111101|010          7ffffea  [27]
    (248)  |11111111|11111111|11111101|011          7ffffeb  [27]
    (249)  |11111111|11111111|11111111|1110         ffffffe  [28]
    (250)  |11111111|11111111|11111101|100          7ffffec  [27]
    (251)  |11111111|11111111|11111101|101          7ffffed  [27]
    (252)  |11111111|11111111|11111101|110          7ffffee  [27]
    (253)  |11111111|11111111|11111101|111          7ffffef  [27]
    (254)  |11111111|11111111|11111110|000          7fffff0  [27]
    (255)  |11111111|11111111|11111011|10           3ffffee  [26]
EOS (256)  |11111111|11111111|11111111|111111      3fffffff  [30]
]]></artwork>
            </figure>
        </section>


        <section anchor="examples" title="Examples">


            <t>
   This appendix contains examples covering integer                                                     
   encoding, header field representation, and the encoding of whole                                     
   lists of header fields for both requests and responses, with and                                     
   without Huffman coding. 
            </t>

            <section anchor="integer.representation.examples" title="Integer Representation Examples">
                <t>
                    This section shows the representation of integer values in
                    detail (see <xref target="integer.representation"/>).
                </t>
                <section anchor="integer.representation.example1" title="Example 1: Encoding 10 Using a 5-Bit Prefix">
                    <t>
                        The value 10 is to be encoded with a 5-bit prefix.
                        <list style="symbols">
                            <t>
                                10 is less than 31 (2^5 - 1) and
                                is represented using the 5-bit prefix.
                            </t>
                        </list>
                    </t>
                    <figure>
                        <artwork><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| X | X | X | 0 | 1 | 0 | 1 | 0 |   10 stored on 5 bits
+---+---+---+---+---+---+---+---+
]]></artwork>
                    </figure>
                </section>

                <section anchor="integer.representation.example2" title="Example 2: Encoding 1337 Using a 5-Bit Prefix">

                    <t>                                                                                                                                         
                        The value I=1337 is to be encoded with a 5-bit
			prefix.                                                                                  
                        <list>
                            <t>                                                                                                                                 
                                1337 is greater than 31 (2^5 - 1).                                                                                              
                       
                                <list>
                                    <t>The 5-bit prefix is filled with its max                                                                                  
                                    value (31).</t>
                                </list>
                            </t>
                            <t>I = 1337 - (2^5 - 1) = 1306.                                                                                                     
                                                                                                                                                                

                                <list>
                                    <t>I (1306) is greater than or equal to
				    128,                                                                                
                                    so the while loop body executes:                                                                                               

                                        <list>
                                            <t>I % 128 == 26</t>
                                            <t>26 + 128 == 154</t>
                                            <t>154 is encoded in 8 bits as:                                                                                     
                                            10011010</t>
                                            <t>I is set to 10 (1306 / 128 ==                                                                                    
                                            10)</t>
                                            <t>I is no longer greater than or                                                                                   
                                            equal to 128, so the while loop                                                                                        
                                            terminates.</t>
                                        </list>
                                    </t>
                                    <t>                                                                                                                         
                                        I, now 10, is encoded in 8 bits as:                                                                                     
                                        00001010.                                                                                                               
                                    </t>
                                </list>
                            </t>

                            <t>The process ends.</t>
                        </list>

                    </t>

                    <figure>
                        <artwork><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| X | X | X | 1 | 1 | 1 | 1 | 1 |  Prefix = 31, I = 1306
| 1 | 0 | 0 | 1 | 1 | 0 | 1 | 0 |  1306>=128, encode(154), I=1306/128
| 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 |  10<128, encode(10), done
+---+---+---+---+---+---+---+---+
]]></artwork>
                    </figure>
                </section>

                <section anchor="integer.representation.example3" title="Example 3: Encoding 42 Starting at an Octet Boundary">
                    <t>
                        The value 42 is to be encoded starting at an
                        octet boundary. This implies that a 8-bit prefix is
                        used.
                        <list style="symbols">
                            <t>
                                42 is less than 255 (2^8 - 1) and
                                is represented using the 8-bit prefix.
                            </t>
                        </list>
                    </t>
                    <figure>
                        <artwork><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
| 0 | 0 | 1 | 0 | 1 | 0 | 1 | 0 |   42 stored on 8 bits
+---+---+---+---+---+---+---+---+
]]></artwork>
                    </figure>
                </section>
            </section>

<!-- example-start -->
<section anchor="header.field.representation.examples" title="Header Field Representation Examples">
    <t>
        This section shows several independent representation examples.
    </t>
    <section title="Literal Header Field with Indexing">
        <t>
            The header field representation uses a literal name and a literal
            value. The header field is added to the dynamic table.
        </t>
        <t>
            <figure>
                <preamble>Header list to encode:</preamble>
                <artwork><![CDATA[
custom-key: custom-header]]></artwork>
            </figure>
        </t>
        <t>


            <figure>
                <preamble>Hex dump of encoded data:</preamble>
                <artwork><![CDATA[
400a 6375 7374 6f6d 2d6b 6579 0d63 7573 | @.custom-key.cus
746f 6d2d 6865 6164 6572                | tom-header]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoding process:</preamble>
                <artwork><![CDATA[
40                                      | == Literal indexed ==
0a                                      |   Literal name (len = 10)
6375 7374 6f6d 2d6b 6579                | custom-key
0d                                      |   Literal value (len = 13)
6375 7374 6f6d 2d68 6561 6465 72        | custom-header
                                        | -> custom-key:
                                        |   custom-header]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Dynamic Table (after decoding):</preamble>
                <artwork><![CDATA[
[  1] (s =  55) custom-key: custom-header
      Table size:  55]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoded header list:</preamble>
                <artwork><![CDATA[
custom-key: custom-header]]></artwork>
            </figure>
        </t>
    </section>

    <section title="Literal Header Field without Indexing">
        <t>
            The header field representation uses an indexed name and a literal
            value. The header field is not added to the dynamic table.
        </t>
        <t>
            <figure>
                <preamble>Header list to encode:</preamble>
                <artwork><![CDATA[
:path: /sample/path]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Hex dump of encoded data:</preamble>
                <artwork><![CDATA[
040c 2f73 616d 706c 652f 7061 7468      | ../sample/path]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoding process:</preamble>
                <artwork><![CDATA[
04                                      | == Literal not indexed ==
                                        |   Indexed name (idx = 4)
                                        |     :path
0c                                      |   Literal value (len = 12)
2f73 616d 706c 652f 7061 7468           | /sample/path
                                        | -> :path: /sample/path]]></artwork>
            </figure>
        </t>
        <t>
          Dynamic table (after decoding): empty.
        </t>
        <t>
            <figure>
                <preamble>Decoded header list:</preamble>
                <artwork><![CDATA[
:path: /sample/path]]></artwork>
            </figure>
        </t>
    </section>

    <section title="Literal Header Field Never Indexed">
        <t>
            The header field representation uses a literal name and a literal
            value. The header field is not added to the dynamic table and must
            use the same representation if re-encoded by an intermediary.
        </t>
        <t>
            <figure>
                <preamble>Header list to encode:</preamble>
                <artwork><![CDATA[
password: secret]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Hex dump of encoded data:</preamble>
                <artwork><![CDATA[
1008 7061 7373 776f 7264 0673 6563 7265 | ..password.secre
74                                      | t]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoding process:</preamble>
                <artwork><![CDATA[
10                                      | == Literal never indexed ==
08                                      |   Literal name (len = 8)
7061 7373 776f 7264                     | password
06                                      |   Literal value (len = 6)
7365 6372 6574                          | secret
                                        | -> password: secret]]></artwork>
            </figure>
        </t>
        <t>
          Dynamic table (after decoding): empty.
        </t>
        <t>
            <figure>
                <preamble>Decoded header list:</preamble>
                <artwork><![CDATA[
password: secret]]></artwork>
            </figure>
        </t>
    </section>

    <section title="Indexed Header Field">
        <t>
            The header field representation uses an indexed header field from
            the static table.
        </t>
        <t>
            <figure>
                <preamble>Header list to encode:</preamble>
                <artwork><![CDATA[
:method: GET]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Hex dump of encoded data:</preamble>
                <artwork><![CDATA[
82                                      | .]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoding process:</preamble>
                <artwork><![CDATA[
82                                      | == Indexed - Add ==
                                        |   idx = 2
                                        | -> :method: GET]]></artwork>
            </figure>
        </t>
        <t>
          Dynamic table (after decoding): empty.
        </t>
        <t>
            <figure>
                <preamble>Decoded header list:</preamble>
                <artwork><![CDATA[
:method: GET]]></artwork>
            </figure>
        </t>
    </section>

</section>
<section anchor="request.examples.without.huffman.coding" title="Request Examples without Huffman Coding">
    <t>
        This section shows several consecutive header lists, corresponding to
        HTTP requests, on the same connection.
    </t>
    <section title="First Request">
        <t>
            <figure>
                <preamble>Header list to encode:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: http
:path: /
:authority: www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Hex dump of encoded data:</preamble>
                <artwork><![CDATA[
8286 8441 0f77 7777 2e65 7861 6d70 6c65 | ...A.www.example
2e63 6f6d                               | .com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoding process:</preamble>
                <artwork><![CDATA[
82                                      | == Indexed - Add ==
                                        |   idx = 2
                                        | -> :method: GET
86                                      | == Indexed - Add ==
                                        |   idx = 6
                                        | -> :scheme: http
84                                      | == Indexed - Add ==
                                        |   idx = 4
                                        | -> :path: /
41                                      | == Literal indexed ==
                                        |   Indexed name (idx = 1)
                                        |     :authority
0f                                      |   Literal value (len = 15)
7777 772e 6578 616d 706c 652e 636f 6d   | www.example.com
                                        | -> :authority: 
                                        |   www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Dynamic Table (after decoding):</preamble>
                <artwork><![CDATA[
[  1] (s =  57) :authority: www.example.com
      Table size:  57]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoded header list:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: http
:path: /
:authority: www.example.com]]></artwork>
            </figure>
        </t>
    </section>

    <section title="Second Request">
        <t>
            <figure>
                <preamble>Header list to encode:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: http
:path: /
:authority: www.example.com
cache-control: no-cache]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Hex dump of encoded data:</preamble>
                <artwork><![CDATA[
8286 84be 5808 6e6f 2d63 6163 6865      | ....X.no-cache]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoding process:</preamble>
                <artwork><![CDATA[
82                                      | == Indexed - Add ==
                                        |   idx = 2
                                        | -> :method: GET
86                                      | == Indexed - Add ==
                                        |   idx = 6
                                        | -> :scheme: http
84                                      | == Indexed - Add ==
                                        |   idx = 4
                                        | -> :path: /
be                                      | == Indexed - Add ==
                                        |   idx = 62
                                        | -> :authority:
                                        |   www.example.com
58                                      | == Literal indexed ==
                                        |   Indexed name (idx = 24)
                                        |     cache-control
08                                      |   Literal value (len = 8)
6e6f 2d63 6163 6865                     | no-cache
                                        | -> cache-control: no-cache]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Dynamic Table (after decoding):</preamble>
                <artwork><![CDATA[
[  1] (s =  53) cache-control: no-cache
[  2] (s =  57) :authority: www.example.com
      Table size: 110]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoded header list:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: http
:path: /
:authority: www.example.com
cache-control: no-cache]]></artwork>
            </figure>
        </t>
    </section>

    <section title="Third Request">
        <t>
            <figure>
                <preamble>Header list to encode:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: https
:path: /index.html
:authority: www.example.com
custom-key: custom-value]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Hex dump of encoded data:</preamble>
                <artwork><![CDATA[
8287 85bf 400a 6375 7374 6f6d 2d6b 6579 | ....@.custom-key
0c63 7573 746f 6d2d 7661 6c75 65        | .custom-value]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoding process:</preamble>
                <artwork><![CDATA[
82                                      | == Indexed - Add ==
                                        |   idx = 2
                                        | -> :method: GET
87                                      | == Indexed - Add ==
                                        |   idx = 7
                                        | -> :scheme: https
85                                      | == Indexed - Add ==
                                        |   idx = 5
                                        | -> :path: /index.html
bf                                      | == Indexed - Add ==
                                        |   idx = 63
                                        | -> :authority:
                                        |   www.example.com
40                                      | == Literal indexed ==
0a                                      |   Literal name (len = 10)
6375 7374 6f6d 2d6b 6579                | custom-key
0c                                      |   Literal value (len = 12)
6375 7374 6f6d 2d76 616c 7565           | custom-value
                                        | -> custom-key:
                                        |   custom-value]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Dynamic Table (after decoding):</preamble>
                <artwork><![CDATA[
[  1] (s =  54) custom-key: custom-value
[  2] (s =  53) cache-control: no-cache
[  3] (s =  57) :authority: www.example.com
      Table size: 164]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoded header list:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: https
:path: /index.html
:authority: www.example.com
custom-key: custom-value]]></artwork>
            </figure>
        </t>
    </section>

</section>
<section anchor="request.examples.with.huffman.coding" title="Request Examples with Huffman Coding">
    <t>
        This section shows the same examples as the previous section but uses
        Huffman encoding for the literal values.
    </t>
    <section title="First Request">
        <t>
            <figure>
                <preamble>Header list to encode:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: http
:path: /
:authority: www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Hex dump of encoded data:</preamble>
                <artwork><![CDATA[
8286 8441 8cf1 e3c2 e5f2 3a6b a0ab 90f4 | ...A......:k....
ff                                      | .]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoding process:</preamble>
                <artwork><![CDATA[
82                                      | == Indexed - Add ==
                                        |   idx = 2
                                        | -> :method: GET
86                                      | == Indexed - Add ==
                                        |   idx = 6
                                        | -> :scheme: http
84                                      | == Indexed - Add ==
                                        |   idx = 4
                                        | -> :path: /
41                                      | == Literal indexed ==
                                        |   Indexed name (idx = 1)
                                        |     :authority
8c                                      |   Literal value (len = 12)
                                        |     Huffman encoded:
f1e3 c2e5 f23a 6ba0 ab90 f4ff           | .....:k.....
                                        |     Decoded:
                                        | www.example.com
                                        | -> :authority:
                                        |   www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Dynamic Table (after decoding):</preamble>
                <artwork><![CDATA[
[  1] (s =  57) :authority: www.example.com
      Table size:  57]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoded header list:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: http
:path: /
:authority: www.example.com]]></artwork>
            </figure>
        </t>
    </section>

    <section title="Second Request">
        <t>
            <figure>
                <preamble>Header list to encode:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: http
:path: /
:authority: www.example.com
cache-control: no-cache]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Hex dump of encoded data:</preamble>
                <artwork><![CDATA[
8286 84be 5886 a8eb 1064 9cbf           | ....X....d..]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoding process:</preamble>
                <artwork><![CDATA[
82                                      | == Indexed - Add ==
                                        |   idx = 2
                                        | -> :method: GET
86                                      | == Indexed - Add ==
                                        |   idx = 6
                                        | -> :scheme: http
84                                      | == Indexed - Add ==
                                        |   idx = 4
                                        | -> :path: /
be                                      | == Indexed - Add ==
                                        |   idx = 62
                                        | -> :authority:
                                        |   www.example.com
58                                      | == Literal indexed ==
                                        |   Indexed name (idx = 24)
                                        |     cache-control
86                                      |   Literal value (len = 6)
                                        |     Huffman encoded:
a8eb 1064 9cbf                          | ...d..
                                        |     Decoded:
                                        | no-cache
                                        | -> cache-control: no-cache]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Dynamic Table (after decoding):</preamble>
                <artwork><![CDATA[
[  1] (s =  53) cache-control: no-cache
[  2] (s =  57) :authority: www.example.com
      Table size: 110]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoded header list:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: http
:path: /
:authority: www.example.com
cache-control: no-cache]]></artwork>
            </figure>
        </t>
    </section>

    <section title="Third Request">
        <t>
            <figure>
                <preamble>Header list to encode:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: https
:path: /index.html
:authority: www.example.com
custom-key: custom-value]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Hex dump of encoded data:</preamble>
                <artwork><![CDATA[
8287 85bf 4088 25a8 49e9 5ba9 7d7f 8925 | ....@.%.I.[.}..%
a849 e95b b8e8 b4bf                     | .I.[....]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoding process:</preamble>
                <artwork><![CDATA[
82                                      | == Indexed - Add ==
                                        |   idx = 2
                                        | -> :method: GET
87                                      | == Indexed - Add ==
                                        |   idx = 7
                                        | -> :scheme: https
85                                      | == Indexed - Add ==
                                        |   idx = 5
                                        | -> :path: /index.html
bf                                      | == Indexed - Add ==
                                        |   idx = 63
                                        | -> :authority:
                                        |   www.example.com
40                                      | == Literal indexed ==
88                                      |   Literal name (len = 8)
                                        |     Huffman encoded:
25a8 49e9 5ba9 7d7f                     | %.I.[.}.
                                        |     Decoded:
                                        | custom-key
89                                      |   Literal value (len = 9)
                                        |     Huffman encoded:
25a8 49e9 5bb8 e8b4 bf                  | %.I.[....
                                        |     Decoded:
                                        | custom-value
                                        | -> custom-key:
                                        |   custom-value]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Dynamic Table (after decoding):</preamble>
                <artwork><![CDATA[
[  1] (s =  54) custom-key: custom-value
[  2] (s =  53) cache-control: no-cache
[  3] (s =  57) :authority: www.example.com
      Table size: 164]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoded header list:</preamble>
                <artwork><![CDATA[
:method: GET
:scheme: https
:path: /index.html
:authority: www.example.com
custom-key: custom-value]]></artwork>
            </figure>
        </t>
    </section>

</section>
<section anchor="response.examples.without.huffman.coding" title="Response Examples without Huffman Coding">
    <t>
        This section shows several consecutive header lists, corresponding to
        HTTP responses, on the same connection. The HTTP/2 setting parameter
        SETTINGS_HEADER_TABLE_SIZE is set to the value of 256 octets, causing
        some evictions to occur.
    </t>
    <section title="First Response">
        <t>
            <figure>
                <preamble>Header list to encode:</preamble>
                <artwork><![CDATA[
:status: 302
cache-control: private
date: Mon, 21 Oct 2013 20:13:21 GMT
location: https://www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Hex dump of encoded data:</preamble>
                <artwork><![CDATA[
4803 3330 3258 0770 7269 7661 7465 611d | H.302X.privatea.
4d6f 6e2c 2032 3120 4f63 7420 3230 3133 | Mon, 21 Oct 2013
2032 303a 3133 3a32 3120 474d 546e 1768 |  20:13:21 GMTn.h
7474 7073 3a2f 2f77 7777 2e65 7861 6d70 | ttps://www.examp
6c65 2e63 6f6d                          | le.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoding process:</preamble>
                <artwork><![CDATA[
48                                      | == Literal indexed ==
                                        |   Indexed name (idx = 8)
                                        |     :status
03                                      |   Literal value (len = 3)
3330 32                                 | 302
                                        | -> :status: 302
58                                      | == Literal indexed ==
                                        |   Indexed name (idx = 24)
                                        |     cache-control
07                                      |   Literal value (len = 7)
7072 6976 6174 65                       | private
                                        | -> cache-control: private
61                                      | == Literal indexed ==
                                        |   Indexed name (idx = 33)
                                        |     date
1d                                      |   Literal value (len = 29)
4d6f 6e2c 2032 3120 4f63 7420 3230 3133 | Mon, 21 Oct 2013
2032 303a 3133 3a32 3120 474d 54        |  20:13:21 GMT
                                        | -> date: Mon, 21 Oct 2013
                                        |   20:13:21 GMT
6e                                      | == Literal indexed ==
                                        |   Indexed name (idx = 46)
                                        |     location
17                                      |   Literal value (len = 23)
6874 7470 733a 2f2f 7777 772e 6578 616d | https://www.exam
706c 652e 636f 6d                       | ple.com
                                        | -> location:
                                        |   https://www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Dynamic Table (after decoding):</preamble>
                <artwork><![CDATA[
[  1] (s =  63) location: https://www.example.com
[  2] (s =  65) date: Mon, 21 Oct 2013 20:13:21 GMT
[  3] (s =  52) cache-control: private
[  4] (s =  42) :status: 302
      Table size: 222]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoded header list:</preamble>
                <artwork><![CDATA[
:status: 302
cache-control: private
date: Mon, 21 Oct 2013 20:13:21 GMT
location: https://www.example.com]]></artwork>
            </figure>
        </t>
    </section>

    <section title="Second Response">
        <t>
            The (":status", "302") header field is evicted from the dynamic table
            to free space to allow adding the (":status", "307") header field.
        </t>
        <t>
            <figure>
                <preamble>Header list to encode:</preamble>
                <artwork><![CDATA[
:status: 307
cache-control: private
date: Mon, 21 Oct 2013 20:13:21 GMT
location: https://www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Hex dump of encoded data:</preamble>
                <artwork><![CDATA[
4803 3330 37c1 c0bf                     | H.307...]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoding process:</preamble>
                <artwork><![CDATA[
48                                      | == Literal indexed ==
                                        |   Indexed name (idx = 8)
                                        |     :status
03                                      |   Literal value (len = 3)
3330 37                                 | 307
                                        | - evict: :status: 302
                                        | -> :status: 307
c1                                      | == Indexed - Add ==
                                        |   idx = 65
                                        | -> cache-control: private
c0                                      | == Indexed - Add ==
                                        |   idx = 64
                                        | -> date: Mon, 21 Oct 2013
                                        |   20:13:21 GMT
bf                                      | == Indexed - Add ==
                                        |   idx = 63
                                        | -> location:
                                        |   https://www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Dynamic Table (after decoding):</preamble>
                <artwork><![CDATA[
[  1] (s =  42) :status: 307
[  2] (s =  63) location: https://www.example.com
[  3] (s =  65) date: Mon, 21 Oct 2013 20:13:21 GMT
[  4] (s =  52) cache-control: private
      Table size: 222]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoded header list:</preamble>
                <artwork><![CDATA[
:status: 307
cache-control: private
date: Mon, 21 Oct 2013 20:13:21 GMT
location: https://www.example.com]]></artwork>
            </figure>
        </t>
    </section>

    <section title="Third Response">
        <t>
            Several header fields are evicted from the dynamic table during the
            processing of this header list.
        </t>
        <t>
            <figure>
                <preamble>Header list to encode:</preamble>
                <artwork><![CDATA[
:status: 200
cache-control: private
date: Mon, 21 Oct 2013 20:13:22 GMT
location: https://www.example.com
content-encoding: gzip
set-cookie: foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Hex dump of encoded data:</preamble>
                <artwork><![CDATA[
88c1 611d 4d6f 6e2c 2032 3120 4f63 7420 | ..a.Mon, 21 Oct
3230 3133 2032 303a 3133 3a32 3220 474d | 2013 20:13:22 GM
54c0 5a04 677a 6970 7738 666f 6f3d 4153 | T.Z.gzipw8foo=AS
444a 4b48 514b 425a 584f 5157 454f 5049 | DJKHQKBZXOQWEOPI
5541 5851 5745 4f49 553b 206d 6178 2d61 | UAXQWEOIU; max-a
6765 3d33 3630 303b 2076 6572 7369 6f6e | ge=3600; version
3d31                                    | =1]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoding process:</preamble>
                <artwork><![CDATA[
88                                      | == Indexed - Add ==
                                        |   idx = 8
                                        | -> :status: 200
c1                                      | == Indexed - Add ==
                                        |   idx = 65
                                        | -> cache-control: private
61                                      | == Literal indexed ==
                                        |   Indexed name (idx = 33)
                                        |     date
1d                                      |   Literal value (len = 29)
4d6f 6e2c 2032 3120 4f63 7420 3230 3133 | Mon, 21 Oct 2013
2032 303a 3133 3a32 3220 474d 54        |  20:13:22 GMT
                                        | - evict: cache-control:
                                        |   private
                                        | -> date: Mon, 21 Oct 2013
                                        |   20:13:22 GMT
c0                                      | == Indexed - Add ==
                                        |   idx = 64
                                        | -> location: 
                                        |   https://www.example.com
5a                                      | == Literal indexed ==
                                        |   Indexed name (idx = 26)
                                        |     content-encoding
04                                      |   Literal value (len = 4)
677a 6970                               | gzip
                                        | - evict: date: Mon, 21 Oct 
                                        |    2013 20:13:21 GMT
                                        | -> content-encoding: gzip
77                                      | == Literal indexed ==
                                        |   Indexed name (idx = 55)
                                        |     set-cookie
38                                      |   Literal value (len = 56)
666f 6f3d 4153 444a 4b48 514b 425a 584f | foo=ASDJKHQKBZXO
5157 454f 5049 5541 5851 5745 4f49 553b | QWEOPIUAXQWEOIU;
206d 6178 2d61 6765 3d33 3630 303b 2076 |  max-age=3600; v
6572 7369 6f6e 3d31                     | ersion=1
                                        | - evict: location:
                                        |   https://www.example.com
                                        | - evict: :status: 307
                                        | -> set-cookie: foo=ASDJKHQ
                                        |   KBZXOQWEOPIUAXQWEOIU; ma
                                        |   x-age=3600; version=1]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Dynamic Table (after decoding):</preamble>
                <artwork><![CDATA[
[  1] (s =  98) set-cookie: foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU;
                 max-age=3600; version=1
[  2] (s =  52) content-encoding: gzip
[  3] (s =  65) date: Mon, 21 Oct 2013 20:13:22 GMT
      Table size: 215]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoded header list:</preamble>
                <artwork><![CDATA[
:status: 200
cache-control: private
date: Mon, 21 Oct 2013 20:13:22 GMT
location: https://www.example.com
content-encoding: gzip
set-cookie: foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1]]></artwork>
            </figure>
        </t>
    </section>

</section>
<section anchor="response.examples.with.huffman.coding" title="Response Examples with Huffman Coding">
    <t>
        This section shows the same examples as the previous section but uses
        Huffman encoding for the literal values. The HTTP/2 setting parameter
        SETTINGS_HEADER_TABLE_SIZE is set to the value of 256 octets, causing
        some evictions to occur. The eviction mechanism uses the length of the
        decoded literal values, so the same evictions occur as in the previous
        section.
    </t>
    <section title="First Response">
        <t>
            <figure>
                <preamble>Header list to encode:</preamble>
                <artwork><![CDATA[
:status: 302
cache-control: private
date: Mon, 21 Oct 2013 20:13:21 GMT
location: https://www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Hex dump of encoded data:</preamble>
                <artwork><![CDATA[
4882 6402 5885 aec3 771a 4b61 96d0 7abe | H.d.X...w.Ka..z.
9410 54d4 44a8 2005 9504 0b81 66e0 82a6 | ..T.D. .....f...
2d1b ff6e 919d 29ad 1718 63c7 8f0b 97c8 | -..n..)...c.....
e9ae 82ae 43d3                          | ....C.]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoding process:</preamble>
                <artwork><![CDATA[
48                                      | == Literal indexed ==
                                        |   Indexed name (idx = 8)
                                        |     :status
82                                      |   Literal value (len = 2)
                                        |     Huffman encoded:
6402                                    | d.
                                        |     Decoded:
                                        | 302
                                        | -> :status: 302
58                                      | == Literal indexed ==
                                        |   Indexed name (idx = 24)
                                        |     cache-control
85                                      |   Literal value (len = 5)
                                        |     Huffman encoded:
aec3 771a 4b                            | ..w.K
                                        |     Decoded:
                                        | private
                                        | -> cache-control: private
61                                      | == Literal indexed ==
                                        |   Indexed name (idx = 33)
                                        |     date
96                                      |   Literal value (len = 22)
                                        |     Huffman encoded:
d07a be94 1054 d444 a820 0595 040b 8166 | .z...T.D. .....f
e082 a62d 1bff                          | ...-..
                                        |     Decoded:
                                        | Mon, 21 Oct 2013 20:13:21
                                        | GMT
                                        | -> date: Mon, 21 Oct 2013
                                        |   20:13:21 GMT
6e                                      | == Literal indexed ==
                                        |   Indexed name (idx = 46)
                                        |     location
91                                      |   Literal value (len = 17)
                                        |     Huffman encoded:
9d29 ad17 1863 c78f 0b97 c8e9 ae82 ae43 | .)...c.........C
d3                                      | .
                                        |     Decoded:
                                        | https://www.example.com
                                        | -> location:
                                        |   https://www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Dynamic Table (after decoding):</preamble>
                <artwork><![CDATA[
[  1] (s =  63) location: https://www.example.com
[  2] (s =  65) date: Mon, 21 Oct 2013 20:13:21 GMT
[  3] (s =  52) cache-control: private
[  4] (s =  42) :status: 302
      Table size: 222]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoded header list:</preamble>
                <artwork><![CDATA[
:status: 302
cache-control: private
date: Mon, 21 Oct 2013 20:13:21 GMT
location: https://www.example.com]]></artwork>
            </figure>
        </t>
    </section>

    <section title="Second Response">
        <t>
            The (":status", "302") header field is evicted from the dynamic table
            to free space to allow adding the (":status", "307") header field.
        </t>
        <t>
            <figure>
                <preamble>Header list to encode:</preamble>
                <artwork><![CDATA[
:status: 307
cache-control: private
date: Mon, 21 Oct 2013 20:13:21 GMT
location: https://www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Hex dump of encoded data:</preamble>
                <artwork><![CDATA[
4883 640e ffc1 c0bf                     | H.d.....]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoding process:</preamble>
                <artwork><![CDATA[
48                                      | == Literal indexed ==
                                        |   Indexed name (idx = 8)
                                        |     :status
83                                      |   Literal value (len = 3)
                                        |     Huffman encoded:
640e ff                                 | d..
                                        |     Decoded:
                                        | 307
                                        | - evict: :status: 302
                                        | -> :status: 307
c1                                      | == Indexed - Add ==
                                        |   idx = 65
                                        | -> cache-control: private
c0                                      | == Indexed - Add ==
                                        |   idx = 64
                                        | -> date: Mon, 21 Oct 2013
                                        |   20:13:21 GMT
bf                                      | == Indexed - Add ==
                                        |   idx = 63
                                        | -> location:
                                        |   https://www.example.com]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Dynamic Table (after decoding):</preamble>
                <artwork><![CDATA[
[  1] (s =  42) :status: 307
[  2] (s =  63) location: https://www.example.com
[  3] (s =  65) date: Mon, 21 Oct 2013 20:13:21 GMT
[  4] (s =  52) cache-control: private
      Table size: 222]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoded header list:</preamble>
                <artwork><![CDATA[
:status: 307
cache-control: private
date: Mon, 21 Oct 2013 20:13:21 GMT
location: https://www.example.com]]></artwork>
            </figure>
        </t>
    </section>

    <section title="Third Response">
        <t>
            Several header fields are evicted from the dynamic table during the
            processing of this header list.
        </t>
        <t>
            <figure>
                <preamble>Header list to encode:</preamble>
                <artwork><![CDATA[
:status: 200
cache-control: private
date: Mon, 21 Oct 2013 20:13:22 GMT
location: https://www.example.com
content-encoding: gzip
set-cookie: foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Hex dump of encoded data:</preamble>
                <artwork><![CDATA[
88c1 6196 d07a be94 1054 d444 a820 0595 | ..a..z...T.D. ..
040b 8166 e084 a62d 1bff c05a 839b d9ab | ...f...-...Z....
77ad 94e7 821d d7f2 e6c7 b335 dfdf cd5b | w..........5...[
3960 d5af 2708 7f36 72c1 ab27 0fb5 291f | 9`..'..6r..'..).
9587 3160 65c0 03ed 4ee5 b106 3d50 07   | ..1`e...N...=P.]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoding process:</preamble>
                <artwork><![CDATA[
88                                      | == Indexed - Add ==
                                        |   idx = 8
                                        | -> :status: 200
c1                                      | == Indexed - Add ==
                                        |   idx = 65
                                        | -> cache-control: private
61                                      | == Literal indexed ==
                                        |   Indexed name (idx = 33)
                                        |     date
96                                      |   Literal value (len = 22)
                                        |     Huffman encoded:
d07a be94 1054 d444 a820 0595 040b 8166 | .z...T.D. .....f
e084 a62d 1bff                          | ...-..
                                        |     Decoded:
                                        | Mon, 21 Oct 2013 20:13:22
                                        | GMT
                                        | - evict: cache-control:
                                        |   private
                                        | -> date: Mon, 21 Oct 2013 
                                        |   20:13:22 GMT
c0                                      | == Indexed - Add ==
                                        |   idx = 64
                                        | -> location:
                                        |   https://www.example.com
5a                                      | == Literal indexed ==
                                        |   Indexed name (idx = 26)
                                        |     content-encoding
83                                      |   Literal value (len = 3)
                                        |     Huffman encoded:
9bd9 ab                                 | ...
                                        |     Decoded:
                                        | gzip
                                        | - evict: date: Mon, 21 Oct
                                        |    2013 20:13:21 GMT
                                        | -> content-encoding: gzip
77                                      | == Literal indexed ==
                                        |   Indexed name (idx = 55)
                                        |     set-cookie
ad                                      |   Literal value (len = 45)
                                        |     Huffman encoded:
94e7 821d d7f2 e6c7 b335 dfdf cd5b 3960 | .........5...[9`
d5af 2708 7f36 72c1 ab27 0fb5 291f 9587 | ..'..6r..'..)...
3160 65c0 03ed 4ee5 b106 3d50 07        | 1`e...N...=P.
                                        |     Decoded:
                                        | foo=ASDJKHQKBZXOQWEOPIUAXQ
                                        | WEOIU; max-age=3600; versi
                                        | on=1
                                        | - evict: location:
                                        |   https://www.example.com
                                        | - evict: :status: 307
                                        | -> set-cookie: foo=ASDJKHQ
                                        |   KBZXOQWEOPIUAXQWEOIU; ma
                                        |   x-age=3600; version=1]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Dynamic Table (after decoding):</preamble>
                <artwork><![CDATA[
[  1] (s =  98) set-cookie: foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU;
                 max-age=3600; version=1
[  2] (s =  52) content-encoding: gzip
[  3] (s =  65) date: Mon, 21 Oct 2013 20:13:22 GMT
      Table size: 215]]></artwork>
            </figure>
        </t>
        <t>
            <figure>
                <preamble>Decoded header list:</preamble>
                <artwork><![CDATA[
:status: 200
cache-control: private
date: Mon, 21 Oct 2013 20:13:22 GMT
location: https://www.example.com
content-encoding: gzip
set-cookie: foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1]]></artwork>
            </figure>
        </t>
    </section>

</section>
<!-- example-end -->

        </section>
        <section title="Acknowledgments" numbered="no">
            <t>
                This specification includes substantial input from the following
                individuals:
                <list style="symbols">
                    <t>
                        Mike Bishop, Jeff Pinner, Julian Reschke, and Martin Thomson
                        (substantial editorial contributions).
                    </t>
                    <t>
                        Johnny Graettinger (Huffman code statistics).
                    </t>
                </list>
            </t>
        </section>


    </back>
</rfc>

