<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='../rfc2629xslt/rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc rfcedstyle="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<!DOCTYPE rfc SYSTEM "../rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC '' 
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
<!ENTITY rfc2865 PUBLIC '' 
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2865.xml'>
<!ENTITY rfc3748 PUBLIC '' 
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3748.xml'>
<!ENTITY rfc3579 PUBLIC '' 
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3579.xml'>
<!ENTITY rfc3588 PUBLIC '' 
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3588.xml'>
<!ENTITY rfc4072 PUBLIC '' 
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4072.xml'>
<!ENTITY rfc4107 PUBLIC '' 
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4107.xml'>
<!ENTITY rfc4120 PUBLIC '' 
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4120.xml'>
<!ENTITY rfc4962 PUBLIC '' 
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4962.xml'>
<!ENTITY rfc5169 PUBLIC '' 
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5169.xml'>
<!ENTITY rfc5247 PUBLIC '' 
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5247.xml'>
<!ENTITY rfc5295 PUBLIC '' 
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5295.xml'>
<!ENTITY rfc5296 PUBLIC '' 
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5296.xml'>
]>

<rfc number="5749" category="std"
 ipr="pre5378Trust200902" >
<front> 

<title abbrev="HOKEY Key Distribution"> 
Distribution of EAP-Based Keys for Handover and Re-Authentication 
</title>

  <author role="editor"  initials="K." surname="Hoeper"
    fullname="Katrin Hoeper">
    <organization abbrev="Motorola">
      Motorola, Inc.
    </organization>
    <address>
        <postal>
          <street>1295 E Algonquin Road</street>
          <city>Schaumburg</city>
          <region>IL</region>
          <code>60196</code>
          <country>USA</country>
        </postal>
        <phone>+1 847 576 4714</phone>
        <email>khoeper@motorola.com</email>
      </address>
    </author> 
 <author initials="M. F." surname="Nakhjiri"
    fullname="Madjid F. Nakhjiri ">
    <organization abbrev="Motorola">
      Motorola, Inc.
    </organization>
    <address>
        <postal>
          <street>6450 Sequence Drive</street>
          <city>San Diego</city>
          <region>CA</region>
          <code>92121</code>
          <country>USA</country>
        </postal>
        <email>madjid.nakhjiri@motorola.com</email>
      </address>
    </author>

 <author role="editor" initials="Y." surname="Ohba"
    fullname="Yoshihiro Ohba">
    <organization abbrev="Toshiba">
      Toshiba Corporate Research and Development Center
    </organization>
    <address>
        <postal>
          <street>1 Komukai-Toshiba-cho</street>
          <city>Saiwai-ku, Kawasaki</city>
          <region>Kanagawa</region>
          <code>212-8582</code>
          <country>Japan</country>
        </postal>
        <phone>+81 44 549 2230</phone>
        <email>yoshihiro.ohba@toshiba.co.jp</email>
      </address>
    </author>

<date month="March" year="2010"/>

<keyword>EAP, authentication, mobility, security</keyword>

   <abstract>
     <t>
       This document describes an abstract mechanism for delivering
       root keys from an Extensible Authentication Protocol (EAP)
       server to another network server that requires the keys for
       offering security protected services, such as
       re-authentication, to an EAP peer.  The distributed root key
       can be either a usage-specific root key (USRK), a
       domain-specific root key (DSRK), or a domain-specific
       usage-specific root key (DSUSRK) that has been derived from an
       Extended Master Session Key (EMSK) hierarchy previously
       established between the EAP server and an EAP peer. This
       document defines a template for a key distribution exchange
       (KDE) protocol that can distribute these different types of
       root keys using a AAA (Authentication, Authorization, and
       Accounting) protocol and discusses its security
       requirements. The described protocol template does not specify
       message formats, data encoding, or other implementation
       details. It thus needs to be instantiated with a specific
       protocol (e.g., RADIUS or Diameter) before it can be used.</t>
   </abstract>
 </front>

 <middle>

 <section title="Introduction">
   <t> The Extensible Authentication Protocol (EAP) <xref target='RFC3748'/> is an authentication framework supporting  authentication methods
     that are specified in EAP methods. By definition, any key-generating EAP method derives a Master Session Key (MSK) and an Extended Master
     Session Key (EMSK).
 <xref target='RFC5295'/> reserves the EMSK for the sole purpose of deriving root keys that
   can be used for specific purposes called usages. In particular, <xref target='RFC5295'/> defines
   how to create a usage-specific root key (USRK) for bootstrapping
   security in a specific application,  a domain-specific root key (DSRK) for bootstrapping
   security of a set of services within a domain, and a usage-specific DSRK (DSUSRK) for a specific application within a domain. <xref target='RFC5296'/>
   defines a re-authentication root key (rRK) that is a USRK designated for re-authentication.</t>
   

 <t> The MSK and EMSK may be used to derive further keying material
   for a variety of security mechanisms <xref target='RFC5247'/>.  For
   example, the MSK has been widely used for bootstrapping the
   wireless link security associations between the peer and the
   network attachment points.  However, performance as well as
   security issues arise when using the MSK and the current
   bootstrapping methods in mobile scenarios that require handovers,
   as described in <xref target='RFC5169'/>. To address handover
   latencies and other shortcomings, <xref target='RFC5296'/>
   specifies an EAP re-authentication protocol (ERP) that uses keys
   derived from the EMSK or DSRK to enable efficient
   re-authentications in handover scenarios. Neither
   <xref target='RFC5295'/> nor <xref target='RFC5296'/> specifies how
   root keys are delivered to the network server requiring the
   key. Such a key delivery mechanism is essential because the EMSK
   cannot leave the EAP server (<xref target='RFC5295'/>), but root
   keys are needed by other network servers disjoint with the EAP
   server.  For example, in order to enable an EAP peer to
   re-authenticate to a network during a handover, certain root keys
   need to be made available by the EAP server to the server carrying
   out the re-authentication.</t>

  <t>This document specifies  an abstract mechanism for the delivery of  the EMSK child keys from the 
  server holding the EMSK or a root key to another network server that requests a root key
  for providing protected services (such as re-authentication and other usage and domain-specific services) to EAP peers. In the remainder of this
    document, a server delivering root keys is referred to as a Key Delivering Server (KDS), and a server authorized to request and receive 
    root keys from a KDS is referred to as a Key Requesting Server (KRS). 
    The Key Distribution Exchange (KDE) mechanism defined in this document runs over  a AAA (Authentication, Authorization, and Accounting) protocol,
    e.g., RADIUS (<xref target='RFC2865'/>, <xref target='RFC3579'/>)
    or Diameter <xref target='RFC3588'/>, and has several variants depending
    on the type of key that is requested and delivered (i.e., DRSK, USRK, or DSUSRK). The presented KDE mechanism is a protocol template that 
    must be instantiated for a particular protocol, 
    such as RADIUS or Diameter, to specify the format and encoding of the abstract protocol messages. Only after such an instantiation can the KDE 
    mechanism described in this document be implemented.
    This document also describes security requirements for the secure key delivery over AAA.</t>

 </section>
   
 <section title="Terminology">

   <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
   NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL"
   in this document are to be interpreted as described in <xref
   target='RFC2119'/>.</t> 

<t>The following acronyms are used.</t>
   <list style="hanging">

     <t hangText="AAA"> <vspace blankLines="0" /> Authentication, Authorization and Accounting. AAA protocols with
      EAP support include RADIUS (<xref target='RFC2865'/>, <xref target='RFC3579'/>) and Diameter  <xref target='RFC3588'/>.</t>
    
     <t hangText="USRK"><vspace blankLines="0" />Usage-Specific Root Key. &nbsp;A root key that is derived
     from the EMSK; see <xref target='RFC5295'/>.</t>

     <t hangText="USR-KH"> <vspace blankLines="0" /> USRK Holder. A network server that is authorized to request and receive a USRK from the EAP server.
       The USR-KH can be a AAA server or dedicated service server.</t>

     <t hangText="DSRK"> <vspace blankLines="0" /> Domain-Specific Root Key. &nbsp;A root key that is
     derived from the EMSK; see <xref target='RFC5295'/>.</t>

     <t hangText="DSR-KH"><vspace blankLines="0" /> DSRK Holder. A network server that is authorized to request and receive a DSRK from the EAP server. 
       The most likely implementation of a DSR-KH is a AAA server in a domain, enforcing the policies for the usage of the DSRK within this domain.</t>

     <t hangText="DSUSRK"><vspace blankLines="0" /> Domain-Specific Usage-Specific Root Key.  &nbsp;A
     root key that is derived from the DSRK; see <xref target='RFC5295'/>.</t>

     <t hangText="DSUSR-KH"><vspace blankLines="0" />DSUSRK holder. A network server authorized to request and receive a DSUSRK from the DSR-KH. 
     The most likely implementation of a DSUSR-KH is a AAA server in a domain, responsible for a particular service offered within this domain.</t>

     <t hangText="RK"><vspace blankLines="0" /> Root Key. &nbsp;An EMSK child key, i.e., a USRK, DSRK, or DSUSRK.</t>

     <t hangText="KDS"><vspace blankLines="0" />Key Delivering Server. A network server that holds an EMSK or DSRK and delivers root keys to 
       a KRS requesting root keys. The EAP server (together with the AAA
       server to which it exports the keys for delivery) and the DSR-KH can both act as KDS.</t>

     <t hangText="KRS"><vspace blankLines="0" />Key Requesting Server. A network server that shares an interface with a KDS and is authorized to request root keys from the KDS.
       A USR-KH, DSR-KH, and DSUSR-KH can all act as a KRS.</t>
     
     <t hangText="HOKEY"><vspace blankLines="0" />Handover Keying.</t>

    </list>

   </section>

 <section title="Key Delivery Architecture">
   
   <t> 
     An EAP server carries out normal EAP authentications with EAP peers but is typically not involved in potential handovers and 
     re-authentication attempts by the same EAP peer. Other servers are typically in place to offer these requested services. 
     These servers can be AAA servers or other service network  servers. 
     Whenever EAP-based keying material is used to protect a requested service, the respective keying material has to be 
     available to the server providing the requested service. For example, the first time a peer requests a service from a network server,
     this server acts as a KRS. The KRS requests the root keys needed to derive the keys for protecting the requested service from the respective KDS. 
     In subsequent requests
     from the same peer and as long as the root key has not expired, the KRS can use the same root keys to derive fresh keying material to protect the
     requested service. These kinds of key requests and distributions are necessary because an EMSK cannot leave the EAP
      server (<xref target='RFC5295'/>). Hence, any root key that is directly derived from an EMSK can only be derived by the EAP server itself.
     The EAP server then exports these keys to a server that can distribute the keys to the KRS. In the remainder of this document, 
     the KDS consisting of the EAP server that derives the root keys  together with the AAA server that distributes these keys is denoted EAP/AAA server. 
     Root keys derived from EMSK child keys, such as a DSUSRK, can be requested from the respective root key holder.
     Hence, a KDS can be either the EAP/AAA server or a DSRK holder (DSR-KH), whereas a KRS can be either a USRK holder (USR-KH), a DSR-KH, or a 
     DSUSRK holder (DSUSR-KH).</t>

   <t> The KRS needs to share an interface with the KDS to be able to send all  necessary  input data   to 
     derive the requested key and to receive the requested key.  The provided data includes the Key Derivation Function (KDF) that should be used to
     derive the  requested key.   The KRS uses the received root key to derive further keying material in order to secure its offered services. 
     Every KDS is responsible for storing and protecting the received root key as well as the derivation and distribution of any child key derived 
     from the root key.  An example of a key delivery architecture is illustrated in <xref target='fig:fig1'/> showing the different types of  KRS 
     and their interfaces to the KDS.
      
   </t>
 
   <figure anchor='fig:fig1' title='Example Key Delivery Architecture for the Different KRS and KDS'>
     <artwork>
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |             EAP/AAA server              |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
               /             |             |          \
              /              |             |           \
             /               |             |            \
     +-+-+-+-+-+-+-+   +-+-+-+-+-+-+  +-+-+-+-+-+  +-+-+-+-+-+
     |   USR-KH1   |   |  USR-KH2  |  | DSR-KH1 |  | DSR-KH2 |
     | HOKEY server|   | XYZ server|  |Domain 1 |  | Domain 2|
     +-+-+-+-+-+-+-+   +-+-+-+-+-+-+  +-+-+-+-+-+  +-+-+-+-+-+
	                                  /             |  
                                         /              |
                                        /               |
                                 +-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+
                                 |  DSUSR-KH   |  |  DSUSR-KH2    |
                                 |  Domain 1   |  |   Domain 2    |
                                 |Home domain  |  |Visited domain |
                                 |HOKEY server |  |HOKEY server   |
                                 +-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+
     </artwork>
   </figure>
   
     </section>

   <section title="Key Distribution Exchange (KDE)" anchor='sec-kde'>
  
    <t> In this section, a generic mechanism for a key
    distribution exchange (KDE) over AAA is described in which  a root key (RK) is distributed from a
    KDS to a KRS. It is required that the communication path between the
    KDS  and the KRS  is protected by the use of an
    appropriate AAA transport security mechanism (see <xref
    target='section-security-consideration'/> for security requirements). Here, it is assumed that the KRS and the KDS are separate entities,
     logically if not physically, and the delivery of the
     requested RK is specified accordingly. </t>
      
 
    <t>The key distribution exchange consists of one round-trip, i.e., two messages between the KRS and the KDS, as illustrated in 
      <xref target='fig:fig2'/>. First, the KRS sends a KDE-Request carrying a Key Request Token (KRT). As a response, 
      the KDS sends a KDE-Response carrying a Key Delivery Token (KDT). Both tokens are encapsulated in AAA messages.
       The definition of the AAA attributes depends on the implemented AAA protocol and is 
      out of scope of this document. However, the security requirements for AAA messages carrying KDE messages are discussed in 
      <xref target="section-security-consideration"/>. The contents of KRT and KDT are defined in the following.
    </t>

     <figure anchor='fig:fig2' title='KDE Message Flow'>
       <artwork xml:space="preserve"><![CDATA[
  KRS                                        KDS
--------                                   -------
    |                                          |
    |       KDE-Request: AAA{KRT}              |
    |----------------------------------------->|
    |       KDE-Response: AAA{KDT}             |
    |<-----------------------------------------|
       ]]>
       </artwork>
     </figure>
     
    <list style="hanging">
       <t hangText="KRT : (PID, KT, KL)">
       <vspace blankLines="1"/>KRT  carries
       the identifiers of the peer (PID), the key type (KT)
       and the key label (KL).  The key type specifies which type of root key is requested, e.g., DSRK, USRK and DSUSRK. 
       The encoding rules  for each key type are left to the protocol developers who define the instantiation of the KDE mechanism 
       for a particular protocol.
       For the specification of key labels and the associated IANA registries, please refer to <xref target='RFC5295'/>, which specifies key labels 
       for USRKs and establishes an IANA registry for them. The same specifications can be applied to other root keys.
       </t>

       <t hangText="KDT : (KT, KL, RK, KN_RK, LT_RK)">
       <vspace blankLines="1"/> KDT carries the root key (RK) to be
       distributed to the KRS, as well as the key type (KT) of the key, the key label (KL), the key name (KN_RK), and the lifetime of RK (LT_RK). 
       The key lifetime of each distributed key MUST NOT be greater  than that of its parent key.
       </t>
     </list>
    

     <section title='Context and Scope for Distributed Keys'>

      <t>The key context of each distributed key is determined by the
       sequence of KTs in the key hierarchy. The key scope of each distributed key is determined by the
       sequence of (PID, KT, KL)-tuples in the key hierarchy and the identifier of the KRS.  The
       KDF used to generate the requested keys
       includes context and scope information, thus, binding the key to
       the specific channel <xref target='RFC5295'/>.</t>
    </section>


   <section title="Key Distribution Exchange Scenarios">

     <t> Given the three types of KRS, there are three scenarios for the distribution of the EMSK child keys.
       For all scenarios, the trigger and mechanism
     for key delivery may involve a specific request from an EAP peer and/or
     another intermediary (such as an authenticator).  For simplicity, it is assumed that USR-KHs reside in the same domain as the EAP server.
     </t>

     <list style='hanging'>
       <t hangText='Scenario 1: EAP/AAA server to USR-KH:'>In this
       scenario, the EAP/AAA server delivers a USRK to a USR-KH.
       </t>

       <t hangText='Scenario 2: EAP/AAA server to DSR-KH:'>In this
       scenario, the EAP/AAA server delivers a DSRK to a DSR-KH.
       </t>

       <t hangText="Scenario 3: DSR-KH to DSUSR-KH:">
       In this scenario, a DSR-KH in a specific domain delivers keying
       material to a DSUSR-KH in the same domain.
       </t>
     </list>

     <t>The key distribution exchanges for Scenario 3 can be combined
     with the key distribution exchanges for Scenario 2 into a single
     round-trip exchange as shown in <xref target='fig:fig6'/>.
     Here, KDE-Request and KDE-Response are messages for Scenarios 2, whereas
     KDE-Request' and KDE-Response' are messages for Scenarios 3.
     </t>

     <figure anchor='fig:fig6' title='Combined Message Exchange'> 
     <artwork><![CDATA[
DSUSR-KH                   DSR-KH                    EAP/AAA Server
--------                   ------                     ------------
   |  KDE-Request'(KRT')     |   KDE-Request(KRT)        |
   |------------------------>|-------------------------->|
   |  KDE-Response'(KDT')    |   KDE-Response(KDT)       |
   |<----------------------- |<--------------------------|
   |                         |                           |
]]>
    </artwork>
    </figure>
   </section>
   
 </section>
   
 
<section title='KDE Used in the EAP Re-Authentication Protocol (ERP)'>
   <t>
     This section describes how the presented KDE mechanism should be used to request and deliver the  root keys used for re-authentication
     in the  EAP Re-authentication Protocol (ERP) 
     defined in <xref target='RFC5296'/>. ERP  supports two forms of bootstrapping,
     implicit as well as explicit bootstrapping, and KDE is discussed for both cases in the remainder of this section. 
   </t>     
   <t>
     In implicit bootstrapping, the local EAP Re-authentication (ER) server requests the DSRK from the home AAA server during the initial EAP exchange. 
     Here, the local ER server
     acts as the KRS and the home AAA server as the KDS. In this case, the local ER server
     requesting the DSRK includes a KDE-Request  in the AAA packet encapsulating the
     first EAP-Response message from the peer.  Here, a AAA User-Name attribute is used as the PID. 
     If the EAP exchange is successful, the home AAA server 
     includes a KDE-Response in the AAA message that carries the EAP-Success message.
   </t>
   <t>
     Explicit bootstrapping is initiated by peers that do not know the domain.
     Here, the peer sends an EAP-Initiate message with the bootstrapping flag turned on.
     The local ER server (acting as KRS) includes a KDE-Request message in the AAA message that carries the peer's EAP-Initiate message 
     and sends it to the peer's home AAA server.  Here, a AAA User-Name attribute is used as the PID.
     In its response, the home AAA server (acting as KDS) includes a KDE-Response in the AAA message that carries the EAP-Finish message 
     with the  bootstrapping flag set. 
   </t>
   
 </section>
   

 <section title='Security Considerations' anchor='section-security-consideration'>
   <t>
     This section provides security requirements and a discussion of distributing RK without peer consent.
   </t>

   <section title='Requirements on AAA Key Transport Protocols'>
     <t>
       Any KDE attribute that is exchanged as part of a KDE-Request or KDE-Response MUST be 
       integrity-protected and replay-protected by the underlying AAA protocol that is used to encapsulate the attributes.
       Additionally, a secure key wrap algorithm MUST be used by the AAA protocol to protect the RK in a KDE-Response. Other 
       confidential information as part of the KDE messages
       (e.g., identifiers if privacy is a requirement) SHOULD be encrypted by the underlying AAA protocol.</t>
     
     <t>When there is an
       intermediary, such as a AAA proxy, on the path between the
       KRS and the KDS, there will be a series of
       hop-by-hop security associations along the path.  The use of
       hop-by-hop security associations implies that the intermediary
       on each hop can access the distributed keying material.  Hence,
       the use of hop-by-hop security SHOULD be limited to an
       environment where an intermediary is trusted not to abuse the
       distributed key material. If such a trusted AAA infrastructure does not exist, other means must be applied at a different layer
       to ensure the  end-to-end security (i.e., between KRS and KDS) of the exchanged KDE messages.
       The security requirements for such a protocol are the same as previously outlined for AAA protocols and MUST hold 
       when encapsulated in AAA messages.
     </t>
   </section>

   <section title='Distributing RK without Peer Consent'>
     <t>When a KDE-Request is sent as a result of explicit ERP
     bootstrapping <xref target='RFC5296'/>, cryptographic
     verification of peer consent on distributing an RK  is provided by
     the integrity checksum of the EAP-Initiate message with the
     bootstrapping flag turned on.
     </t>
     <t>On the other hand, when a KDE-Request  is sent as a result of implicit ERP
     bootstrapping <xref target='RFC5296'/>, cryptographic
     verification of peer consent on distributing an RK is not
     provided.  A peer is not involved in the process and, thus, not aware of key delivery requests for root keys derived from its established 
       EAP keying material.
       Hence, a peer has no control where keys derived from its established EAP keying material are distributed.
     A possible consequence of this is that a KRS may
     request and obtain an RK from the home server even if the peer
     does not support ERP. EAP-Initiate/Re-auth-Start messages send to the peer will be silently dropped by the peer causing further waste of resources.
     </t>
   </section>
 </section>

 <section title='Acknowledgments'>
   <t> The editors would like to thank Dan Harkins, Chunqiang Li,
   Rafael Marin Lopez, and Charles Clancy for their valuable comments.
   </t>
 </section>

 <section title='Contributors'>
   <t>
     The following people contributed to this document: Kedar Gaonkar,
     Lakshminath Dondeti, Vidya Narayanan, and Glen Zorn.</t>
  </section>

 </middle>

 <back>
 
 <references title='Normative References'> 
 
  &rfc2119;
  &rfc3748; 
  &rfc5295;
  &rfc5296;

 </references>

 <references title='Informative References'>
  &rfc2865;
  &rfc3579;
 &rfc3588;
  &rfc5247;
  &rfc5169;
 
 </references>

 </back> 
 
 </rfc>
