<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd"
[
  <!ENTITY rfc0952 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.0952.xml'>
  <!ENTITY rfc1123 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1123.xml'>
  <!ENTITY rfc2119 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
  <!ENTITY rfc2781 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2781.xml'>
  <!ENTITY rfc3490 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3490.xml'>
  <!ENTITY rfc3688 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml'>
  <!ENTITY rfc3731 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3731.xml'>

  <!ENTITY W3C.xml PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-xml-20040204.xml'>
  <!ENTITY W3C.xmlschema-1 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-xmlschema-1-20041028.xml'>
  <!ENTITY W3C.xmlschema-2 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-xmlschema-2-20041028.xml'>

]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc rfcedstyle="yes"?>
<?rfc subcompact="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>


<rfc number="4931" obsoletes="3731" category="std" >
  <front>
    <title abbrev="EPP Domain Name Mapping">
    Extensible Provisioning Protocol (EPP) Domain Name Mapping</title>
    <author initials="S." surname="Hollenbeck" fullname="Scott Hollenbeck">
      <organization>VeriSign, Inc.</organization>
      <address>
        <postal>
          <street>21345 Ridgetop Circle</street>
          <city>Dulles</city>
          <region>VA</region>
          <code>20166-6503</code>
          <country>US</country>
        </postal>
        <email>shollenbeck@verisign.com</email>
      </address>
    </author>

    <date year="2007" month="May"/>
    <area>Applications</area>
    <keyword>EPP</keyword>
    <keyword>Extensible Provisioning Protocol</keyword>
    <keyword>XML</keyword>
    <keyword>domain</keyword>
    <keyword>domain name</keyword>

    <abstract>
      <t>This document describes an Extensible Provisioning Protocol (EPP)
      mapping for the provisioning and management of Internet domain names
      stored in a shared central repository.  Specified in XML, the mapping
      defines EPP command syntax and semantics as applied to domain names.
      This document obsoletes RFC 3731.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>This document describes an Internet domain name mapping for version
      1.0 of the Extensible Provisioning Protocol (EPP).  This mapping is
      specified using the Extensible Markup Language (XML) 1.0 as described
      in <xref target="W3C.REC-xml-20040204"/> and XML Schema notation as
      described in <xref target="W3C.REC-xmlschema-1-20041028"/> and
      <xref target="W3C.REC-xmlschema-2-20041028"/>.  This document obsoletes
      RFC 3731 <xref target="RFC3731"/>.</t>

      <t><xref target="RFC4930"/> provides a complete description of EPP command and response
      structures.  A thorough understanding of the base protocol
      specification is necessary to understand the mapping described in
      this document.</t>

      <t>XML is case sensitive.  Unless stated otherwise, XML specifications
      and examples provided in this document MUST be interpreted in the
      character case presented to develop a conforming implementation.</t>

      <section title="Relationship of Domain Objects and Host Objects">
	<t>The EPP mapping for host objects is described in <xref target="RFC4932"/>.  This
	document assumes that domain name objects have a superordinate
	relationship to subordinate host name objects.  For example, domain
	name "example.com" has a superordinate relationship to host name
	"ns1.example.com".  EPP actions (such as object transfers) that do
	not preserve this relationship MUST be explicitly disallowed.</t>

	<t>A host name object can be created in a repository for which no
	superordinate domain name object exists.  For example, host name
	"ns1.example.com" can be created in the ".example" repository so that
	DNS domains in ".example" can be delegated to the host.  Such hosts
	are described as "external" hosts in this specification since the
	name of the host does not belong to the name space of the repository
	in which the host is being used for delegation purposes.</t>

	<t>Whether a host is external or internal relates to the repository in
	which the host is being used for delegation purposes.  Whether
	or not an
	internal host is subordinate relates to a domain within the
	repository.  For example, host ns1.example1.com is a subordinate host
	of domain example1.com, but it is not a subordinate host of domain
	example2.com.  ns1.example1.com can be used as a name server for
	example2.com.  In this case, ns1.example1.com MUST be treated as an
	internal host, subject to the rules governing operations on
	subordinate hosts within the same repository.</t>

	<t>Name server hosts for domain delegation can be specified as either
	references to existing host objects or as domain attributes that
	describe a host machine.  A server operator MUST use one name server
	specification form consistently.  A server operator that announces
	support for host objects in an EPP greeting MUST NOT allow domain
	attributes to describe a name server host machine.  A server operator
	that does not announce support for host objects MUST allow domain
	attributes to describe a name server host machine.  When domain
	attributes are used to describe a name server host machine, IP
	addresses SHOULD be required only as needed to generate DNS glue
	records.</t>

	<t>Name servers are specified within a &lt;domain:ns&gt; element.  This
	element MUST contain one or more &lt;domain:hostObj&gt; elements or one or
	more &lt;domain:hostAttr&gt; elements.  A &lt;domain:hostObj&gt; element contains
	the fully qualified name of a known name server host object.  A
	&lt;domain:hostAttr&gt; element contains the following child elements:</t>

	<t><list style="hanging">
	  <t hangText="-">A &lt;domain:hostName&gt; element that contains the fully qualified name
	  of a host.
	  <vspace blankLines="1"/></t>

	  <t hangText="-">Zero or more OPTIONAL &lt;domain:hostAddr&gt; element that contain the
	  IP addresses to be associated with the host.  Each element MAY
	  contain an "ip" attribute to identify the IP address format.
	  Attribute value "v4" is used to note IPv4 address format.
	  Attribute value "v6" is used to note IPv6 address format.  If the
	  "ip" attribute is not specified, "v4" is the default attribute
	  value.  IP address syntax requirements are described in Section
	  2.5 of the EPP host mapping <xref target="RFC4932"/>.
	  <vspace blankLines="1"/></t>
	</list></t>

	<figure>
	  <artwork>Example host object name server elements for domain example.com:

&lt;domain:ns&gt;
  &lt;domain:hostObj&gt;ns1.example.com&lt;/domain:hostObj&gt;
  &lt;domain:hostObj&gt;ns1.example.net&lt;/domain:hostObj&gt;
&lt;/domain:ns&gt;</artwork>
        </figure>

        <t></t>

	<figure>
	  <artwork>Example host attribute name server elements for domain example.com:

&lt;domain:ns&gt;
  &lt;domain:hostAttr&gt;
    &lt;domain:hostName&gt;ns1.example.com&lt;/domain:hostName&gt;
    &lt;domain:hostAddr
     ip="v4"&gt;192.0.2.2&lt;/domain:hostAddr&gt;
    &lt;domain:hostAddr
     ip="v6"&gt;1080:0:0:0:8:800:200C:417A&lt;/domain:hostAddr&gt;
  &lt;/domain:hostAttr&gt;
  &lt;domain:hostAttr&gt;
    &lt;domain:hostName&gt;ns1.example.net&lt;/domain:hostName&gt;
  &lt;/domain:hostAttr&gt;
&lt;/domain:ns&gt;</artwork>
        </figure>
      </section>

      <section title="Conventions Used in This Document">
	<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
	"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
	document are to be interpreted as described in <xref target="RFC2119"/>.</t>

	<t>In examples, "C:" represents lines sent by a protocol client and "S:"
	represents lines returned by a protocol server.  Indentation and
	white space in examples are provided only to illustrate element
	relationships and are not a REQUIRED feature of this protocol.</t>
      </section>
    </section>

    <section title="Object Attributes">
      <t>An EPP domain object has attributes and associated values that can be
      viewed and modified by the sponsoring client or the server.  This
      section describes each attribute type in detail.  The formal syntax
      for the attribute values described here can be found in the "Formal
      Syntax" section of this document and in the appropriate normative
      references.</t>

      <section title="Domain and Host Names">
	<t>The syntax for domain and host names described in this document MUST
	conform to <xref target="RFC0952"/> as updated by <xref target="RFC1123"/>.  At the time of this
	writing, RFC 3490 <xref target="RFC3490"/> describes a standard to use certain ASCII
	name labels to represent non-ASCII name labels.  These conformance
	requirements might change as a result of progressing work in
	developing standards for internationalized domain names.  A server
	MAY restrict allowable domain names to a particular top-level domain,
	second-level domain, or other domain for which the server is
	authoritative.  The trailing dot required when these names are stored
	in a DNS zone is implicit and MUST NOT be provided when exchanging
	host and domain names.</t>
      </section>

      <section title="Contact and Client Identifiers">
	<t>All EPP contacts are identified by a server-unique identifier.
	Contact identifiers are character strings with a specified minimum
	length, a specified maximum length, and a specified format.  Contact
	identifiers use the "clIDType" client identifier syntax described in
	<xref target="RFC4930"/>.</t>
      </section>

      <section title="Status Values">
	<t>A domain object MUST always have at least one associated status
	value.  Status values can be set only by the client that sponsors a
	domain object and by the server on which the object resides.  A
	client can change the status of a domain object using the EPP
	&lt;update&gt; command.  Each status value MAY be accompanied by a string
	of human-readable text that describes the rationale for the status
	applied to the object.</t>

	<t>A client MUST NOT alter status values set by the server.  A server
	MAY alter or override status values set by a client subject to local
	server policies.  The status of an object MAY change as a result of
	either a client-initiated transform command or an action performed by
	a server operator.</t>

	<t>Status values that can be added or removed by a client are prefixed
	with "client".  Corresponding status values that can be added or
	removed by a server are prefixed with "server".  Status values that
	do not begin with either "client" or "server" are server-managed.</t>

	<t>Status Value Descriptions:</t>

	<t><list style="hanging">
	  <t hangText="-">clientDeleteProhibited, serverDeleteProhibited
	  <vspace blankLines="1"/>
	  Requests to delete the object MUST be rejected.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">clientHold, serverHold
	  <vspace blankLines="1"/>
	  DNS delegation information MUST NOT be published for the object.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">clientRenewProhibited, serverRenewProhibited
	  <vspace blankLines="1"/>
	  Requests to renew the object MUST be rejected.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">clientTransferProhibited, serverTransferProhibited
	  <vspace blankLines="1"/>
	  Requests to transfer the object MUST be rejected.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">clientUpdateProhibited, serverUpdateProhibited
	  <vspace blankLines="1"/>
	  Requests to update the object (other than to remove this status) MUST
	  be rejected.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">inactive
	  <vspace blankLines="1"/>
	  Delegation information has not been associated with the object.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">ok
	  <vspace blankLines="1"/>
	  This is the normal status value for an object that has no pending
	  operations or prohibitions.  This value is set and removed by the
	  server as other status values are added or removed.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">pendingCreate, pendingDelete, pendingRenew, pendingTransfer, pendingUpdate
	  <vspace blankLines="1"/>
	  A transform command has been processed for the object, but the action
	  has not been completed by the server.  Server operators can delay
	  action completion for a variety of reasons, such as to allow for human
	  review or third-party action.  A transform command that is processed,
	  but whose requested action is pending, is noted with response code
	  1001.
	  </t>
	</list></t>

	<t>When the requested action has been completed, the pendingCreate,
	pendingDelete, pendingRenew, pendingTransfer, or pendingUpdate status
	value MUST be removed.  All clients involved in the transaction MUST
	be notified using a service message that the action has been completed
	and that the status of the object has changed.</t>

	<t>"ok" status MUST NOT be combined with any other status.</t>

	<t>"pendingDelete" status MUST NOT be combined with either
	"clientDeleteProhibited" or "serverDeleteProhibited" status.</t>

	<t>"pendingRenew" status MUST NOT be combined with either
	"clientRenewProhibited" or "serverRenewProhibited" status.</t>

	<t>"pendingTransfer" status MUST NOT be combined with either
	"clientTransferProhibited" or "serverTransferProhibited" status.</t>

	<t>"pendingUpdate" status MUST NOT be combined with either
	"clientUpdateProhibited" or "serverUpdateProhibited" status.</t>

	<t>The pendingCreate, pendingDelete, pendingRenew, pendingTransfer, and
	pendingUpdate status values MUST NOT be combined with each other.</t>

	<t>Other status combinations not expressly prohibited MAY be used.</t>
      </section>

      <section title="Dates and Times">
	<t>Date and time attribute values MUST be represented in Universal
	Coordinated Time (UTC) using the Gregorian calendar.  The extended
	date-time form using upper case "T" and "Z" characters defined in
	<xref target="W3C.REC-xmlschema-2-20041028"/> MUST be used to represent
	date-time values as XML Schema does not support truncated date-time forms
	or lower case "T" and "Z" characters.</t>
      </section>

      <section title="Validity Periods">
	<t>A domain name object MAY have a specified validity period.  If server
	policy supports domain object validity periods, the validity period
	is defined when a domain object is created, and it MAY be extended by
	the EPP &lt;renew&gt; or &lt;transfer&gt; commands.  As a matter of server
	policy, this specification does not define actions to be taken upon
	expiration of a domain object's validity period.</t>

	<t>Validity periods are measured in years or months with the appropriate
	units specified using the "unit" attribute.  Valid values for the
	"unit" attribute are "y" for years and "m" for months.  The minimum
	allowable period value is one (1).  The maximum allowable
	value is ninety-nine decimal (99).  A server MAY support a lower
	maximum value.</t>
      </section>

      <section title="Authorization Information">
	<t>Authorization information is associated with domain objects to
	facilitate transfer operations.  Authorization information is
	assigned when a domain object is created, and it might be updated in
	the future.  This specification describes password-based
	authorization information, though other mechanisms are possible.</t>
      </section>

      <section title="Other DNS Resource Record Attributes">
	<t>While the DNS allows many resource record types to be associated with
	a domain, this mapping only explicitly specifies elements that
	describe resource records used for domain delegation and resolution.
	Facilities to provision other domain-related resource record types
	can be developed by extending this mapping.</t>

	<t>The provisioning method described in this mapping separates discrete
	data elements by data type.  This method of data definition allows
	XML Schema processors to perform basic syntax validation tasks,
	reducing ambiguity and the amount of parsing and syntax-checking work
	required of protocol processors.  Provisioning and extension methods
	that aggregate data into opaque strings are possible, but such
	methods SHOULD NOT be used because they impose additional parsing,
	interpretation, and validation requirements on protocol processors.</t>
      </section>
    </section>

    <section title="EPP Command Mapping">
      <t>A detailed description of the EPP syntax and semantics can be found
      in <xref target="RFC4930"/>.  The command mappings described here are specifically
      for use in provisioning and managing Internet domain names via EPP.</t>

    <section title="EPP Query Commands">
      <t>EPP provides three commands to retrieve domain information: &lt;check&gt;
      to determine if a domain object can be provisioned within a
      repository, &lt;info&gt; to retrieve detailed information associated with a
      domain object, and &lt;transfer&gt; to retrieve domain object transfer
      status information.</t>

      <section title="EPP &lt;check&gt; Command">
	<t>The EPP &lt;check&gt; command is used to determine if an object can be
	provisioned within a repository.  It provides a hint that allows a
	client to anticipate the success or failure of provisioning an object
	using the &lt;create&gt; command as object provisioning requirements are
	ultimately a matter of server policy.</t>

	<t>In addition to the standard EPP command elements, the &lt;check&gt; command
	MUST contain a &lt;domain:check&gt; element that identifies the domain
	namespace.  The &lt;domain:check&gt; element contains the following child elements:</t>

	<t><list style="hanging">
	   <t hangText="-">One or more &lt;domain:name&gt; elements that contain the fully
	   qualified names of the domain objects to be queried.
	   <vspace blankLines="1"/>
	   </t>
	</list></t>

	<figure>
	  <artwork>Example &lt;check&gt; command:

C:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
C:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
C:  &lt;command&gt;
C:    &lt;check&gt;
C:      &lt;domain:check
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
C:        &lt;domain:name&gt;example.com&lt;/domain:name&gt;
C:        &lt;domain:name&gt;example.net&lt;/domain:name&gt;
C:        &lt;domain:name&gt;example.org&lt;/domain:name&gt;
C:      &lt;/domain:check&gt;
C:    &lt;/check&gt;
C:    &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
C:  &lt;/command&gt;
C:&lt;/epp&gt;</artwork>
        </figure>

	<t>When a &lt;check&gt; command has been processed successfully, the EPP
	&lt;resData&gt; element MUST contain a child &lt;domain:chkData&gt; element that
	identifies the domain namespace.  The &lt;domain:chkData&gt; element contains
	one or more &lt;domain:cd&gt; elements that contain the following child elements:</t>

	<t><list style="hanging">
	  <t hangText="-">A &lt;domain:name&gt; element that contains the fully qualified name of
	  the queried domain object.  This element MUST contain an "avail"
	  attribute whose value indicates object availability (can it be
	  provisioned or not) at the moment the &lt;check&gt; command was
	  completed.  A value of "1" or "true" means that the object can be
	  provisioned.  A value of "0" or "false" means that the object can
	  not be provisioned.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:reason&gt; element that MAY be provided when an
	  object cannot be provisioned.  If present, this element contains
	  server-specific text to help explain why the object cannot be
	  provisioned.  This text MUST be represented in the response
	  language previously negotiated with the client; an OPTIONAL "lang"
	  attribute MAY be present to identify the language if the
	  negotiated value is something other than the default value of "en"
	  (English).
	  <vspace blankLines="1"/>
	  </t>
	</list></t>

	<figure>
	  <artwork>Example &lt;check&gt; response:

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1000"&gt;
S:      &lt;msg&gt;Command completed successfully&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;resData&gt;
S:      &lt;domain:chkData
S:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
S:        &lt;domain:cd&gt;
S:          &lt;domain:name avail="1"&gt;example.com&lt;/domain:name&gt;
S:        &lt;/domain:cd&gt;
S:        &lt;domain:cd&gt;
S:          &lt;domain:name avail="0"&gt;example.net&lt;/domain:name&gt;
S:          &lt;domain:reason&gt;In use&lt;/domain:reason&gt;
S:        &lt;/domain:cd&gt;
S:        &lt;domain:cd&gt;
S:          &lt;domain:name avail="1"&gt;example.org&lt;/domain:name&gt;
S:        &lt;/domain:cd&gt;
S:      &lt;/domain:chkData&gt;
S:    &lt;/resData&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:      &lt;svTRID&gt;54322-XYZ&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
	</figure>

	<t>An EPP error response MUST be returned if a &lt;check&gt; command cannot
	be processed for any reason.</t>
      </section>

      <section title="EPP &lt;info&gt; Command">
	<t>The EPP &lt;info&gt; command is used to retrieve information associated
	with a domain object.  The response to this command MAY vary
	depending on the identity of the querying client, use of
	authorization information, and server policy towards unauthorized
	clients.  If the querying client is the sponsoring client, all
	available information MUST be returned.  If the querying client is
	not the sponsoring client, but the client provides valid
	authorization information, all available information MUST be
	returned.  If the querying client is not the sponsoring client, and
	the client does not provide valid authorization information, server
	policy determines which OPTIONAL elements are returned.</t>

	<t>In addition to the standard EPP command elements, the &lt;info&gt; command
	MUST contain a &lt;domain:info&gt; element that identifies the domain
	namespace.  The &lt;domain:info&gt; element contains the following child elements:</t>

	<t><list style="hanging">
	  <t hangText="-">A &lt;domain:name&gt; element that contains the fully qualified name of
	  the domain object to be queried.  An OPTIONAL "hosts" attribute is
	  available to control return of information describing hosts
	  related to the domain object.  A value of "all" (the default,
	  which MAY be absent) returns information describing both
	  subordinate and delegated hosts.  A value of "del" returns
	  information describing only delegated hosts.  A value of "sub"
	  returns information describing only subordinate hosts.  A value of
	  "none" returns no information describing delegated or subordinate
	  hosts.
	  <vspace blankLines="1"/></t>

	  <t hangText="-">An OPTIONAL &lt;domain:authInfo&gt; element that contains authorization
	  information associated with the domain object or authorization
	  information associated with the domain object's registrant or
	  associated contacts.  An OPTIONAL "roid" attribute MUST be used to
	  identify the registrant or contact object if and only if the given
	  authInfo is associated with a registrant or contact object, and
	  not the domain object itself.  If this element is not provided or
	  if the authorization information is invalid, server policy
	  determines if the command is rejected or if response information
	  will be returned to the client.
	  <vspace blankLines="1"/>
	  </t>
	</list></t>

	<figure>
	  <artwork>Example &lt;info&gt; command without authorization information:

C:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
C:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
C:  &lt;command&gt;
C:    &lt;info&gt;
C:      &lt;domain:info
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
C:        &lt;domain:name hosts="all"&gt;example.com&lt;/domain:name&gt;
C:      &lt;/domain:info&gt;
C:    &lt;/info&gt;
C:    &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
C:  &lt;/command&gt;
C:&lt;/epp&gt;</artwork>
        </figure>

        <t></t>

	<figure>
	  <artwork>Example &lt;info&gt; command with authorization information:

C:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
C:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
C:  &lt;command&gt;
C:    &lt;info&gt;
C:      &lt;domain:info
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
C:        &lt;domain:name hosts="all"&gt;example.com&lt;/domain:name&gt;
C:        &lt;domain:authInfo&gt;
C:          &lt;domain:pw&gt;2fooBAR&lt;/domain:pw&gt;
C:        &lt;/domain:authInfo&gt;
C:      &lt;/domain:info&gt;
C:    &lt;/info&gt;
C:    &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
C:  &lt;/command&gt;
C:&lt;/epp&gt;</artwork>
        </figure>

	<t>When an &lt;info&gt; command has been processed successfully, the EPP
	&lt;resData&gt; element MUST contain a child &lt;domain:infData&gt; element that
	identifies the domain namespace.  Elements that are not OPTIONAL MUST be returned;
	OPTIONAL elements are returned based on client authorization and server
	policy.  The &lt;domain:infData&gt; element contains the following child
	elements:</t>

        <t><list style="hanging">
	  <t hangText="-">A &lt;domain:name&gt; element that contains the fully qualified name of
	  the domain object.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">A &lt;domain:roid&gt; element that contains the Repository Object
	  IDentifier assigned to the domain object when the object was
	  created.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">Zero or more OPTIONAL &lt;domain:status&gt; elements that contain the
	  current status descriptors associated with the domain.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">If supported by the server, one OPTIONAL &lt;domain:registrant&gt;
	  element and one or more OPTIONAL &lt;domain:contact&gt; elements that
	  contain identifiers for the human or organizational social
	  information objects associated with the domain object.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:ns&gt; element that contains the fully qualified
	  names of the delegated host objects or host attributes (name
	  servers) associated with the domain object.  See Section 1.1 for a
	  description of the elements used to specify host objects or host
	  attributes.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">Zero or more OPTIONAL &lt;domain:host&gt; elements that contain the
	  fully qualified names of the subordinate host objects that exist
	  under this superordinate domain object.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">A &lt;domain:clID&gt; element that contains the identifier of the
	  sponsoring client.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:crID&gt; element that contains the identifier of
	  the client that created the domain object.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:crDate&gt; element that contains the date and
	  time of domain object creation.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:exDate&gt; element that contains the date and
	  time identifying the end of the domain object's registration
	  period.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:upID&gt; element that contains the identifier of
	  the client that last updated the domain object.  This element MUST
	  NOT be present if the domain has never been modified.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:upDate&gt; element that contains the date and
	  time of the most recent domain object modification.  This element
	  MUST NOT be present if the domain object has never been modified.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:trDate&gt; elements that contains the date and
	  time of the most recent successful domain object transfer.  This
	  element MUST NOT be provided if the domain object has never been
	  transferred.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:authInfo&gt; element that contains authorization
	  information associated with the domain object.  This element MUST
	  only be returned if the querying client is the current sponsoring
	  client, or if the client supplied valid authorization information
	  with the command.
	  <vspace blankLines="1"/>
	  </t>
	</list></t>

	<figure>
	  <artwork>Example &lt;info&gt; response for an authorized client:

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1000"&gt;
S:      &lt;msg&gt;Command completed successfully&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;resData&gt;
S:      &lt;domain:infData
S:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
S:        &lt;domain:name&gt;example.com&lt;/domain:name&gt;
S:        &lt;domain:roid&gt;EXAMPLE1-REP&lt;/domain:roid&gt;
S:        &lt;domain:status s="ok"/&gt;
S:        &lt;domain:registrant&gt;jd1234&lt;/domain:registrant&gt;
S:        &lt;domain:contact type="admin"&gt;sh8013&lt;/domain:contact&gt;
S:        &lt;domain:contact type="tech"&gt;sh8013&lt;/domain:contact&gt;
S:        &lt;domain:ns&gt;
S:          &lt;domain:hostObj&gt;ns1.example.com&lt;/domain:hostObj&gt;
S:          &lt;domain:hostObj&gt;ns1.example.net&lt;/domain:hostObj&gt;
S:        &lt;/domain:ns&gt;
S:        &lt;domain:host&gt;ns1.example.com&lt;/domain:host&gt;
S:        &lt;domain:host&gt;ns2.example.com&lt;/domain:host&gt;
S:        &lt;domain:clID&gt;ClientX&lt;/domain:clID&gt;
S:        &lt;domain:crID&gt;ClientY&lt;/domain:crID&gt;
S:        &lt;domain:crDate&gt;1999-04-03T22:00:00.0Z&lt;/domain:crDate&gt;
S:        &lt;domain:upID&gt;ClientX&lt;/domain:upID&gt;
S:        &lt;domain:upDate&gt;1999-12-03T09:00:00.0Z&lt;/domain:upDate&gt;
S:        &lt;domain:exDate&gt;2005-04-03T22:00:00.0Z&lt;/domain:exDate&gt;
S:        &lt;domain:trDate&gt;2000-04-08T09:00:00.0Z&lt;/domain:trDate&gt;
S:        &lt;domain:authInfo&gt;
S:          &lt;domain:pw&gt;2fooBAR&lt;/domain:pw&gt;
S:        &lt;/domain:authInfo&gt;
S:      &lt;/domain:infData&gt;
S:    &lt;/resData&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:      &lt;svTRID&gt;54322-XYZ&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
        </figure>

	<t>A server with a different information return policy MAY provide less
	information in a response.
	<vspace blankLines="1"/></t>

	<figure>
	  <artwork>Example &lt;info&gt; response for an unauthorized client:

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1000"&gt;
S:      &lt;msg&gt;Command completed successfully&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;resData&gt;
S:      &lt;domain:infData
S:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
S:        &lt;domain:name&gt;example.com&lt;/domain:name&gt;
S:        &lt;domain:roid&gt;EXAMPLE1-REP&lt;/domain:roid&gt;
S:        &lt;domain:clID&gt;ClientX&lt;/domain:clID&gt;
S:      &lt;/domain:infData&gt;
S:    &lt;/resData&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:      &lt;svTRID&gt;54322-XYZ&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
        </figure>

	<t>An EPP error response MUST be returned if an &lt;info&gt; command cannot
	be processed for any reason.</t>
      </section>

      <section title="EPP &lt;transfer&gt; Query Command">
	<t>The EPP &lt;transfer&gt; command provides a query operation that allows a
	client to determine real-time status of pending and completed
	transfer requests.  In addition to the standard EPP command elements,
	the &lt;transfer&gt; command MUST contain an "op" attribute with value
	"query", and a &lt;domain:transfer&gt; element that identifies the domain
	namespace.  The &lt;domain:transfer&gt; element contains the following
	child elements:</t>

	<t><list style="hanging">
	  <t hangText="-">A &lt;domain:name&gt; element that contains the fully qualified name of
	  the domain object to be queried.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:authInfo&gt; element that contains authorization
	  information associated with the domain object or authorization
	  information associated with the domain object's registrant or
	  associated contacts.  An OPTIONAL "roid" attribute MUST be used to
	  identify the registrant or contact object if and only if the given
	  authInfo is associated with a registrant or contact object, and
	  not the domain object itself.  If this element is not provided or
	  if the authorization information is invalid, server policy
	  determines if the command is rejected or if response information
	  will be returned to the client.
	  <vspace blankLines="1"/>
	  </t>
	</list></t>

	<figure>
	  <artwork>Example &lt;transfer&gt; query command:

C:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
C:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
C:  &lt;command&gt;
C:    &lt;transfer op="query"&gt;
C:      &lt;domain:transfer
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
C:        &lt;domain:name&gt;example.com&lt;/domain:name&gt;
C:        &lt;domain:authInfo&gt;
C:          &lt;domain:pw roid="JD1234-REP"&gt;2fooBAR&lt;/domain:pw&gt;
C:        &lt;/domain:authInfo&gt;
C:      &lt;/domain:transfer&gt;
C:    &lt;/transfer&gt;
C:    &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
C:  &lt;/command&gt;
C:&lt;/epp&gt;</artwork>
        </figure>

	<t>When a &lt;transfer&gt; query command has been processed successfully, the
	EPP &lt;resData&gt; element MUST contain a child &lt;domain:trnData&gt; element
	that identifies the domain namespace. The &lt;domain:trnData&gt; element contains
	the following child elements:</t>

	<t><list style="hanging">
	  <t hangText="-">A &lt;domain:name&gt; element that contains the fully qualified name of
	  the domain object.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">A &lt;domain:trStatus&gt; element that contains the state of the most
	  recent transfer request.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">A &lt;domain:reID&gt; element that contains the identifier of the client
	  that requested the object transfer.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">A &lt;domain:reDate&gt; element that contains the date and time that the
	  transfer was requested.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">A &lt;domain:acID&gt; element that contains the identifier of the client
	  that SHOULD act upon a PENDING transfer request.  For all other status types, the value
	  identifies the client that took the indicated action.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">A &lt;domain:acDate&gt; element that contains the date and time of a
	  required or completed response.  For a PENDING request, the value
	  identifies the date and time by which a response is required
	  before an automated response action will be taken by the server.
	  For all other status types, the value identifies the date and time
	  when the request was completed.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:exDate&gt; element that contains the end of the
	  domain object's validity period if the &lt;transfer&gt; command caused
	  or causes a change in the validity period.
	  <vspace blankLines="1"/>
	  </t>
	</list></t>

	<figure>
	  <artwork>Example &lt;transfer&gt; query response:

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1000"&gt;
S:      &lt;msg&gt;Command completed successfully&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;resData&gt;
S:      &lt;domain:trnData
S:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
S:        &lt;domain:name&gt;example.com&lt;/domain:name&gt;
S:        &lt;domain:trStatus&gt;pending&lt;/domain:trStatus&gt;
S:        &lt;domain:reID&gt;ClientX&lt;/domain:reID&gt;
S:        &lt;domain:reDate&gt;2000-06-06T22:00:00.0Z&lt;/domain:reDate&gt;
S:        &lt;domain:acID&gt;ClientY&lt;/domain:acID&gt;
S:        &lt;domain:acDate&gt;2000-06-11T22:00:00.0Z&lt;/domain:acDate&gt;
S:        &lt;domain:exDate&gt;2002-09-08T22:00:00.0Z&lt;/domain:exDate&gt;
S:      &lt;/domain:trnData&gt;
S:    &lt;/resData&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:      &lt;svTRID&gt;54322-XYZ&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
        </figure>

	<t>An EPP error response MUST be returned if a &lt;transfer&gt; query command
	cannot be processed for any reason.</t>
      </section>
    </section>

    <section title="EPP Transform Commands">
      <t>EPP provides five commands to transform domain objects: &lt;create&gt; to
      create an instance of a domain object, &lt;delete&gt; to delete an instance
      of a domain object, &lt;renew&gt; to extend the validity period of a domain
      object, &lt;transfer&gt; to manage domain object sponsorship changes, and
      &lt;update&gt; to change information associated with a domain object.</t>

      <t>Transform commands are typically processed and completed in real
      time.  Server operators MAY receive and process transform commands,
      but defer completing the requested action if human or third-party
      review is required before the requested action can be completed.  In
      such situations the server MUST return a 1001 response code to the
      client to note that the command has been received and processed, but
      the requested action is pending.  The server MUST also manage the
      status of the object that is the subject of the command to reflect
      the initiation and completion of the requested action.  Once the
      action has been completed, all clients involved in the transaction
      MUST be notified using a service message that the action has been
      completed and that the status of the object has changed.</t>

      <section title="EPP &lt;create&gt; Command">
	<t>The EPP &lt;create&gt; command provides a transform operation that allows a
	client to create a domain object.  In addition to the standard EPP
	command elements, the &lt;create&gt; command MUST contain a &lt;domain:create&gt;
	element that identifies the domain namespace.  The &lt;domain:create&gt; element
	contains the following child elements:</t>

	<t><list style="hanging">
	  <t hangText="-">A &lt;domain:name&gt; element that contains the fully qualified name of
	  the domain object to be created.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:period&gt; element that contains the initial
	  registration period of the domain object.  A server MAY define a
	  default initial registration period if not specified by the
	  client.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:ns&gt; element that contains the fully qualified
	  names of the delegated host objects or host attributes (name
	  servers) associated with the domain object to provide resolution
	  services for the domain; see Section 1.1 for a description of the
	  elements used to specify host objects or host attributes.  A host
	  object MUST be known to the server before the host object can be
	  associated with a domain object.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:registrant&gt; element that contains the
	  identifier for the human or organizational social information
	  (contact) object to be associated with the domain object as the
	  object registrant.  This object identifier MUST be known to the
	  server before the contact object can be associated with the domain
	  object.  The EPP mapping for contact objects is described in
	  <xref target="RFC4933"/>.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">Zero or more OPTIONAL &lt;domain:contact&gt; elements that contain the
	  identifiers for other contact objects to be associated with the
	  domain object.  Contact object identifiers MUST be known to the
	  server before the contact object can be associated with the domain
	  object.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">A &lt;domain:authInfo&gt; element that contains authorization
	  information to be associated with the domain object.  This mapping
	  includes a password-based authentication mechanism, but the schema
	  allows new mechanisms to be defined in new schemas.
	  <vspace blankLines="1"/>
	  </t>
	</list></t>

	<figure>
	  <artwork>Example &lt;create&gt; command:

C:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
C:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
C:  &lt;command&gt;
C:    &lt;create&gt;
C:      &lt;domain:create
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
C:        &lt;domain:name&gt;example.com&lt;/domain:name&gt;
C:        &lt;domain:period unit="y"&gt;2&lt;/domain:period&gt;
C:        &lt;domain:ns&gt;
C:          &lt;domain:hostObj&gt;ns1.example.com&lt;/domain:hostObj&gt;
C:          &lt;domain:hostObj&gt;ns1.example.net&lt;/domain:hostObj&gt;
C:        &lt;/domain:ns&gt;
C:        &lt;domain:registrant&gt;jd1234&lt;/domain:registrant&gt;
C:        &lt;domain:contact type="admin"&gt;sh8013&lt;/domain:contact&gt;
C:        &lt;domain:contact type="tech"&gt;sh8013&lt;/domain:contact&gt;
C:        &lt;domain:authInfo&gt;
C:          &lt;domain:pw&gt;2fooBAR&lt;/domain:pw&gt;
C:        &lt;/domain:authInfo&gt;
C:      &lt;/domain:create&gt;
C:    &lt;/create&gt;
C:    &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
C:  &lt;/command&gt;
C:&lt;/epp&gt;</artwork>
        </figure>

	<t>When a &lt;create&gt; command has been processed successfully, the EPP
	&lt;resData&gt; element MUST contain a child &lt;domain:creData&gt; element that
	identifies the domain namespace.  The &lt;domain:creData&gt; element contains
	the following child elements:</t>

	<t><list style="hanging">
	  <t hangText="-">A &lt;domain:name&gt; element that contains the fully qualified name of
	  the domain object.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">A &lt;domain:crDate&gt; element that contains the date and time of
	  domain object creation.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:exDate&gt; element that contains the date and
	  time identifying the end of the domain object's registration
	  period.
	  <vspace blankLines="1"/>
	  </t>
	</list></t>

	<figure>
	  <artwork>Example &lt;create&gt; response:

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1000"&gt;
S:      &lt;msg&gt;Command completed successfully&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;resData&gt;
S:      &lt;domain:creData
S:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
S:        &lt;domain:name&gt;example.com&lt;/domain:name&gt;
S:        &lt;domain:crDate&gt;1999-04-03T22:00:00.0Z&lt;/domain:crDate&gt;
S:        &lt;domain:exDate&gt;2001-04-03T22:00:00.0Z&lt;/domain:exDate&gt;
S:      &lt;/domain:creData&gt;
S:    &lt;/resData&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:      &lt;svTRID&gt;54321-XYZ&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
        </figure>

	<t>An EPP error response MUST be returned if a &lt;create&gt; command cannot
	be processed for any reason.</t>
      </section>

      <section title="EPP &lt;delete&gt; Command">
	<t>The EPP &lt;delete&gt; command provides a transform operation that allows a
	client to delete a domain object.  In addition to the standard EPP
	command elements, the &lt;delete&gt; command MUST contain a &lt;domain:delete&gt;
	element that identifies the domain namespace.  The &lt;domain:delete&gt; element
	contains the following child elements:</t>

	<t><list style="hanging">
	  <t hangText="-">A &lt;domain:name&gt; element that contains the fully qualified name of
	  the domain object to be deleted.
	  </t>
	</list></t>

	<t>A domain object SHOULD NOT be deleted if subordinate host objects are
	associated with the domain object.  For example, if domain
	"example.com" exists, and host object "ns1.example.com" also exists,
	then domain "example.com" SHOULD NOT be deleted until host
	"ns1.example.com" has been either deleted or renamed to exist in a
	different superordinate domain.  A server SHOULD notify clients that
	object relationships exist by sending a 2305 error response code when
	a &lt;delete&gt; command is attempted and fails due to existing object
	relationships.  Delegated and subordinate host objects associated
	with a domain object can be determined using the &lt;info&gt; query command
	for the domain object.
	<vspace blankLines="1"/></t>

	<figure>
	  <artwork>Example &lt;delete&gt; command:

C:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
C:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
C:  &lt;command&gt;
C:    &lt;delete&gt;
C:      &lt;domain:delete
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
C:        &lt;domain:name&gt;example.com&lt;/domain:name&gt;
C:      &lt;/domain:delete&gt;
C:    &lt;/delete&gt;
C:    &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
C:  &lt;/command&gt;
C:&lt;/epp&gt;</artwork>
        </figure>

	<t>When a &lt;delete&gt; command has been processed successfully, a server
	MUST respond with an EPP response with no &lt;resData&gt; element.</t>

	<vspace blankLines="1"/>
	<figure>
	  <artwork>Example &lt;delete&gt; response:

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1000"&gt;
S:      &lt;msg&gt;Command completed successfully&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:      &lt;svTRID&gt;54321-XYZ&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
        </figure>

	<t>An EPP error response MUST be returned if a &lt;delete&gt;
	command cannot
	be processed for any reason.</t>
      </section>

      <section title="EPP &lt;renew&gt; Command">
	<t>The EPP &lt;renew&gt; command provides a transform operation that allows a
	client to extend the validity period of a domain object.  In addition
	to the standard EPP command elements, the &lt;renew&gt; command MUST
	contain a &lt;domain:renew&gt; element that identifies the domain namespace.
	The &lt;domain:renew&gt; element contains the following child elements:</t>

	<t><list style="hanging">
	  <t hangText="-">A &lt;domain:name&gt; element that contains the fully qualified name of
	  the domain object whose validity period is to be extended.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">A &lt;domain:curExpDate&gt; element that contains the date on which the
	  current validity period ends.  This value ensures that repeated
	  &lt;renew&gt; commands do not result in multiple unanticipated
	  successful renewals.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:period&gt; element that contains the number of
	  units to be added to the registration period of the domain object.
	  The number of units available MAY be subject to limits imposed by
	  the server.
	  <vspace blankLines="1"/>
	  </t>
	</list></t>

	<figure>
	  <artwork>Example &lt;renew&gt; command:

C:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
C:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
C:  &lt;command&gt;
C:    &lt;renew&gt;
C:      &lt;domain:renew
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
C:        &lt;domain:name&gt;example.com&lt;/domain:name&gt;
C:        &lt;domain:curExpDate&gt;2000-04-03&lt;/domain:curExpDate&gt;
C:        &lt;domain:period unit="y"&gt;5&lt;/domain:period&gt;
C:      &lt;/domain:renew&gt;
C:    &lt;/renew&gt;
C:    &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
C:  &lt;/command&gt;
C:&lt;/epp&gt;</artwork>
        </figure>

	<t>When a &lt;renew&gt; command has been processed successfully, the EPP
	&lt;resData&gt; element MUST contain a child &lt;domain:renData&gt; element that
	identifies the domain namespace.  The &lt;domain:renData&gt; element contains
	the following child elements:</t>

	<t><list style="hanging">
	  <t hangText="-">A &lt;domain:name&gt; element that contains the fully qualified name of
	  the domain object.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:exDate&gt; element that contains the date and
	  time identifying the end of the domain object's registration
	  period.
	  <vspace blankLines="1"/>
	  </t>
	</list></t>

	<figure>
	  <artwork>Example &lt;renew&gt; response:

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1000"&gt;
S:      &lt;msg&gt;Command completed successfully&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;resData&gt;
S:      &lt;domain:renData
S:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
S:        &lt;domain:name&gt;example.com&lt;/domain:name&gt;
S:        &lt;domain:exDate&gt;2005-04-03T22:00:00.0Z&lt;/domain:exDate&gt;
S:      &lt;/domain:renData&gt;
S:    &lt;/resData&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:      &lt;svTRID&gt;54322-XYZ&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
        </figure>

	<t>An EPP error response MUST be returned if a &lt;renew&gt; command cannot
	be processed for any reason.</t>
      </section>

      <section title="EPP &lt;transfer&gt; Command">
	<t>The EPP &lt;transfer&gt; command provides a transform operation that allows
	a client to manage requests to transfer the sponsorship of a domain
	object.  In addition to the standard EPP command elements, the
	&lt;transfer&gt; command MUST contain a &lt;domain:transfer&gt; element that
	identifies the domain namespace.  The &lt;domain:transfer&gt; element contains
	the following child elements:</t>

	<t><list style="hanging">
	  <t hangText="-">A &lt;domain:name&gt; element that contains the fully qualified name of
	  the domain object for which a transfer request is to be created,
	  approved, rejected, or cancelled.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:period&gt; element that contains the number of
	  units to be added to the registration period of the domain object
	  at completion of the transfer process.  This element can only be
	  used when a transfer is requested, and it MUST be ignored if used
	  otherwise.  The number of units available MAY be subject to limits
	  imposed by the server.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">A &lt;domain:authInfo&gt; element that contains authorization
	  information associated with the domain object or authorization
	  information associated with the domain object's registrant or
	  associated contacts.  An OPTIONAL "roid" attribute MUST be used to
	  identify the registrant or contact object if and only if the given
	  authInfo is associated with a registrant or contact object, and
	  not the domain object itself.
	  </t>
	</list></t>

	<t>Every EPP &lt;transfer&gt; command MUST contain an "op" attribute that
	identifies the transfer operation to be performed.  Valid values,
	definitions, and authorizations for all attribute values are defined
	in <xref target="RFC4930"/>.</t>

	<t>Transfer of a domain object MUST implicitly transfer all host objects
	that are subordinate to the domain object.  For example, if domain
	object "example.com" is transferred and host object "ns1.example.com"
	exists, the host object MUST be transferred as part of the
	"example.com" transfer process.  Host objects that are subject to
	transfer when transferring a domain object are listed in the response
	to an EPP &lt;info&gt; command performed on the domain object.
	<vspace blankLines="1"/>
	</t>

	<figure>
	  <artwork>Example &lt;transfer&gt; request command:

C:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
C:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
C:  &lt;command&gt;
C:    &lt;transfer op="request"&gt;
C:      &lt;domain:transfer
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
C:        &lt;domain:name&gt;example.com&lt;/domain:name&gt;
C:        &lt;domain:period unit="y"&gt;1&lt;/domain:period&gt;
C:        &lt;domain:authInfo&gt;
C:          &lt;domain:pw roid="JD1234-REP"&gt;2fooBAR&lt;/domain:pw&gt;
C:        &lt;/domain:authInfo&gt;
C:      &lt;/domain:transfer&gt;
C:    &lt;/transfer&gt;
C:    &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
C:  &lt;/command&gt;
C:&lt;/epp&gt;</artwork>
        </figure>

	<t>When a &lt;transfer&gt; command has been processed successfully, the EPP
	&lt;resData&gt; element MUST contain a child &lt;domain:trnData&gt; element that
	identifies the domain namespace.  The &lt;domain:trnData&gt; element contains
	the same child elements defined for a transfer query response.</t>

	<figure>
	  <artwork>Example &lt;transfer&gt; response:

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1001"&gt;
S:      &lt;msg&gt;Command completed successfully; action pending&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;resData&gt;
S:      &lt;domain:trnData
S:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
S:        &lt;domain:name&gt;example.com&lt;/domain:name&gt;
S:        &lt;domain:trStatus&gt;pending&lt;/domain:trStatus&gt;
S:        &lt;domain:reID&gt;ClientX&lt;/domain:reID&gt;
S:        &lt;domain:reDate&gt;2000-06-08T22:00:00.0Z&lt;/domain:reDate&gt;
S:        &lt;domain:acID&gt;ClientY&lt;/domain:acID&gt;
S:        &lt;domain:acDate&gt;2000-06-13T22:00:00.0Z&lt;/domain:acDate&gt;
S:        &lt;domain:exDate&gt;2002-09-08T22:00:00.0Z&lt;/domain:exDate&gt;
S:      &lt;/domain:trnData&gt;
S:    &lt;/resData&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:      &lt;svTRID&gt;54322-XYZ&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
        </figure>

	<t>An EPP error response MUST be returned if a &lt;transfer&gt; command can
	not be processed for any reason.</t>
      </section>

      <section title="EPP &lt;update&gt; Command">
	<t>The EPP &lt;update&gt; command provides a transform operation that allows a
	client to modify the attributes of a domain object.  In addition to
	the standard EPP command elements, the &lt;update&gt; command MUST contain
	a &lt;domain:update&gt; element that identifies the domain namespace.  The
	&lt;domain:update&gt; element contains the following child elements:</t>

	<t><list style="hanging">
	  <t hangText="-">A &lt;domain:name&gt; element that contains the fully qualified name of
	  the domain object to be updated.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:add&gt; element that contains attribute values to
	  be added to the object.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:rem&gt; element that contains attribute values to
	  be removed from the object.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">An OPTIONAL &lt;domain:chg&gt; element that contains object attribute
	  values to be changed.
	  </t>
	</list></t>

	<t>At least one &lt;domain:add&gt;, &lt;domain:rem&gt;, or &lt;domain:chg&gt; element
	MUST be provided if the command is not being extended.  All of these elements MAY be
	omitted if an &lt;update&gt; extension is present.  The &lt;domain:add&gt; and
	&lt;domain:rem&gt; elements contain the following child elements:</t>

	<t><list style="hanging">
	  <t hangText="-">An OPTIONAL &lt;domain:ns&gt; element that contains the fully qualified
	  names of the delegated host objects or host attributes (name
	  servers) associated with the domain object to provide resolution
	  services for the domain; see Section 1.1 for a description of the
	  elements used to specify host objects or host attributes.  A host
	  object MUST be known to the server before the host object can be
	  associated with a domain object.  If host attributes are used to
	  specify name servers, note that IP address elements are not needed
	  to identify a name server that is being removed.  IP address
	  elements can safely be absent or ignored in this situation.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">Zero or more &lt;domain:contact&gt; elements that contain the
	  identifiers for contact objects to be associated with or removed
	  from the domain object.  Contact object identifiers MUST be known
	  to the server before the contact object can be associated with the
	  domain object.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">Zero or more &lt;domain:status&gt; elements that contain status values
	  to be applied to or removed from the object.  When specifying a
	  value to be removed, only the attribute value is significant;
	  element text is not required to match a value for removal.
	  </t>
	</list></t>

	<t>A &lt;domain:chg&gt; element contains the following child elements:</t>

	<t><list style="hanging">
	  <t hangText="-">A &lt;domain:registrant&gt; element that contains the identifier for the
	  human or organizational social information (contact) object to be
	  associated with the domain object as the object registrant.  This
	  object identifier MUST be known to the server before the contact
	  object can be associated with the domain object.  An empty element
	  can be used to remove registrant information.
	  <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">A &lt;domain:authInfo&gt; element that contains authorization
	  information associated with the domain object.  This mapping
	  includes a password-based authentication mechanism, but the schema
	  allows new mechanisms to be defined in new schemas.  A
	  &lt;domain:null&gt; element can be used within the &lt;domain:authInfo&gt;
	  element to remove authorization information.
	  <vspace blankLines="1"/>
	  </t>
	</list></t>

	<figure>
	  <artwork>Example &lt;update&gt; command:

C:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
C:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
C:  &lt;command&gt;
C:    &lt;update&gt;
C:      &lt;domain:update
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
C:        &lt;domain:name&gt;example.com&lt;/domain:name&gt;
C:        &lt;domain:add&gt;
C:          &lt;domain:ns&gt;
C:            &lt;domain:hostObj&gt;ns2.example.com&lt;/domain:hostObj&gt;
C:          &lt;/domain:ns&gt;
C:          &lt;domain:contact type="tech"&gt;mak21&lt;/domain:contact&gt;
C:          &lt;domain:status s="clientHold"
C:           lang="en"&gt;Payment overdue.&lt;/domain:status&gt;
C:        &lt;/domain:add&gt;
C:        &lt;domain:rem&gt;
C:          &lt;domain:ns&gt;
C:            &lt;domain:hostObj&gt;ns1.example.com&lt;/domain:hostObj&gt;
C:          &lt;/domain:ns&gt;
C:          &lt;domain:contact type="tech"&gt;sh8013&lt;/domain:contact&gt;
C:          &lt;domain:status s="clientUpdateProhibited"/&gt;
C:        &lt;/domain:rem&gt;
C:        &lt;domain:chg&gt;
C:          &lt;domain:registrant&gt;sh8013&lt;/domain:registrant&gt;
C:          &lt;domain:authInfo&gt;
C:            &lt;domain:pw&gt;2BARfoo&lt;/domain:pw&gt;
C:          &lt;/domain:authInfo&gt;
C:        &lt;/domain:chg&gt;
C:      &lt;/domain:update&gt;
C:    &lt;/update&gt;
C:    &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
C:  &lt;/command&gt;
C:&lt;/epp&gt;</artwork>
        </figure>

	<t>When an &lt;update&gt; command has been processed successfully, a server
	MUST respond with an EPP response with no &lt;resData&gt; element.</t>

	<figure>
	  <artwork>Example &lt;update&gt; response:

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1000"&gt;
S:      &lt;msg&gt;Command completed successfully&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:      &lt;svTRID&gt;54321-XYZ&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
        </figure>

	<t>An EPP error response MUST be returned if an &lt;update&gt; command cannot
	be processed for any reason.</t>
      </section>
    </section>

    <section title="Offline Review of Requested Actions">
      <t>Commands are processed by a server in the order they are received
      from a client.  Though an immediate response confirming receipt and
      processing of the command is produced by the server, a server
      operator MAY perform an offline review of requested transform
      commands before completing the requested action.  In such situations,
      the response from the server MUST clearly note that the transform
      command has been received and processed, but the requested action is
      pending.  The status of the corresponding object MUST clearly reflect
      processing of the pending action.  The server MUST notify the client
      when offline processing of the action has been completed.</t>

      <t>Examples describing a &lt;create&gt; command that requires offline review
      are included here.  Note the result code and message returned in
      response to the &lt;create&gt; command.</t>

      <figure>
	<artwork>S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1001"&gt;
S:      &lt;msg&gt;Command completed successfully; action pending&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;resData&gt;
S:      &lt;domain:creData
S:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
S:        &lt;domain:name&gt;example.com&lt;/domain:name&gt;
S:        &lt;domain:crDate&gt;1999-04-03T22:00:00.0Z&lt;/domain:crDate&gt;
S:        &lt;domain:exDate&gt;2001-04-03T22:00:00.0Z&lt;/domain:exDate&gt;
S:      &lt;/domain:creData&gt;
S:    &lt;/resData&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:      &lt;svTRID&gt;54321-XYZ&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
      </figure>

      <t>The status of the domain object after returning this response MUST
      include "pendingCreate".  The server operator reviews the request
      offline, and informs the client of the outcome of the review either by
      queuing a service message for retrieval via the &lt;poll&gt;
      command or by using an out-of-band mechanism to inform the client of
      the request.</t>

      <t>The service message MUST contain text in the &lt;response&gt;, &lt;msgQ&gt;,
      &lt;msg&gt; element that describes the notification.  In addition, the EPP
      &lt;resData&gt; element MUST contain a child &lt;domain:panData&gt; element that
      identifies the domain namespace.  The &lt;domain:panData&gt; element contains
      the following child elements:</t>

      <t><list style="hanging">
	<t hangText="-">A &lt;domain:name&gt; element that contains the fully qualified name of
	the domain object.  The &lt;domain:name&gt; element contains a REQUIRED
	"paResult" attribute.  A positive boolean value indicates that the
	request has been approved and completed.  A negative boolean value
	indicates that the request has been denied and the requested
	action has not been taken.
	<vspace blankLines="1"/>
	</t>

	<t hangText="-">A &lt;domain:paTRID&gt; element that contains the client transaction
	identifier and server transaction identifier returned with the
	original response to process the command.  The client transaction
	identifier is OPTIONAL and will only be returned if the client
	provided an identifier with the original &lt;create&gt; command.
	<vspace blankLines="1"/>
	</t>

	<t hangText="-">A &lt;domain:paDate&gt; element that contains the date and time
	describing when review of the requested action was completed.
	<vspace blankLines="1"/>
	</t>
      </list></t>

      <figure>
	<artwork>Example "review completed" service message:

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1301"&gt;
S:      &lt;msg&gt;Command completed successfully; ack to dequeue&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;msgQ count="5" id="12345"&gt;
S:      &lt;qDate&gt;1999-04-04T22:01:00.0Z&lt;/qDate&gt;
S:      &lt;msg&gt;Pending action completed successfully.&lt;/msg&gt;
S:    &lt;/msgQ&gt;
S:    &lt;resData&gt;
S:      &lt;domain:panData
S:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
S:        &lt;domain:name paResult="1"&gt;example.com&lt;/domain:name&gt;
S:        &lt;domain:paTRID&gt;
S:          &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:          &lt;svTRID&gt;54321-XYZ&lt;/svTRID&gt;
S:        &lt;/domain:paTRID&gt;
S:        &lt;domain:paDate&gt;1999-04-04T22:00:00.0Z&lt;/domain:paDate&gt;
S:      &lt;/domain:panData&gt;
S:    &lt;/resData&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;BCD-23456&lt;/clTRID&gt;
S:      &lt;svTRID&gt;65432-WXY&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
      </figure>
    </section>
  </section>

    <section title="Formal Syntax">
      <t>An EPP object mapping is specified in XML Schema notation.  The
      formal syntax presented here is a complete schema representation of
      the object mapping suitable for automated validation of EPP XML
      instances.  The BEGIN and END tags are not part of the schema; they
      are used to note the beginning and ending of the schema for URI
      registration purposes.
      <vspace blankLines="1"/>
      </t>

      <figure>
	<artwork>BEGIN
&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;schema targetNamespace="urn:ietf:params:xml:ns:domain-1.0"
     xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"
     xmlns:host="urn:ietf:params:xml:ns:host-1.0"
     xmlns:epp="urn:ietf:params:xml:ns:epp-1.0"
     xmlns:eppcom="urn:ietf:params:xml:ns:eppcom-1.0"
     xmlns="http://www.w3.org/2001/XMLSchema"
     elementFormDefault="qualified"&gt;

&lt;!--
Import common element types.
--&gt;
&lt;import namespace="urn:ietf:params:xml:ns:eppcom-1.0"/&gt;
&lt;import namespace="urn:ietf:params:xml:ns:epp-1.0"/&gt;
&lt;import namespace="urn:ietf:params:xml:ns:host-1.0"/&gt;

&lt;annotation&gt;
 &lt;documentation&gt;
   Extensible Provisioning Protocol v1.0
   domain provisioning schema.
 &lt;/documentation&gt;
&lt;/annotation&gt;

&lt;!--
Child elements found in EPP commands.
--&gt;
&lt;element name="check" type="domain:mNameType"/&gt;
&lt;element name="create" type="domain:createType"/&gt;
&lt;element name="delete" type="domain:sNameType"/&gt;
&lt;element name="info" type="domain:infoType"/&gt;
&lt;element name="renew" type="domain:renewType"/&gt;
&lt;element name="transfer" type="domain:transferType"/&gt;
&lt;element name="update" type="domain:updateType"/&gt;
&lt;!--
Child elements of the &lt;create&gt; command.
--&gt;
&lt;complexType name="createType"&gt;
 &lt;sequence&gt;
   &lt;element name="name" type="eppcom:labelType"/&gt;
   &lt;element name="period" type="domain:periodType"
    minOccurs="0"/&gt;
   &lt;element name="ns" type="domain:nsType"
    minOccurs="0"/&gt;
   &lt;element name="registrant" type="eppcom:clIDType"
    minOccurs="0"/&gt;
   &lt;element name="contact" type="domain:contactType"
    minOccurs="0" maxOccurs="unbounded"/&gt;
   &lt;element name="authInfo" type="domain:authInfoType"/&gt;
 &lt;/sequence&gt;
&lt;/complexType&gt;

&lt;complexType name="periodType"&gt;
 &lt;simpleContent&gt;
   &lt;extension base="domain:pLimitType"&gt;
     &lt;attribute name="unit" type="domain:pUnitType"
      use="required"/&gt;
   &lt;/extension&gt;
 &lt;/simpleContent&gt;
&lt;/complexType&gt;

&lt;simpleType name="pLimitType"&gt;
 &lt;restriction base="unsignedShort"&gt;
   &lt;minInclusive value="1"/&gt;
   &lt;maxInclusive value="99"/&gt;
 &lt;/restriction&gt;
&lt;/simpleType&gt;

&lt;simpleType name="pUnitType"&gt;
 &lt;restriction base="token"&gt;
   &lt;enumeration value="y"/&gt;
   &lt;enumeration value="m"/&gt;
 &lt;/restriction&gt;
&lt;/simpleType&gt;

&lt;complexType name="nsType"&gt;
 &lt;choice&gt;
   &lt;element name="hostObj" type="eppcom:labelType"
    maxOccurs="unbounded"/&gt;
   &lt;element name="hostAttr" type="domain:hostAttrType"
    maxOccurs="unbounded"/&gt;
 &lt;/choice&gt;
&lt;/complexType&gt;
&lt;!--
Name servers are either host objects or attributes.
--&gt;

&lt;complexType name="hostAttrType"&gt;
 &lt;sequence&gt;
   &lt;element name="hostName" type="eppcom:labelType"/&gt;
   &lt;element name="hostAddr" type="host:addrType"
    minOccurs="0" maxOccurs="unbounded"/&gt;
 &lt;/sequence&gt;
&lt;/complexType&gt;
&lt;!--
If attributes, addresses are optional and follow the
structure defined in the host mapping.
--&gt;

&lt;complexType name="contactType"&gt;
 &lt;simpleContent&gt;
   &lt;extension base="eppcom:clIDType"&gt;
     &lt;attribute name="type" type="domain:contactAttrType"/&gt;
   &lt;/extension&gt;
 &lt;/simpleContent&gt;
&lt;/complexType&gt;

&lt;simpleType name="contactAttrType"&gt;
 &lt;restriction base="token"&gt;
   &lt;enumeration value="admin"/&gt;
   &lt;enumeration value="billing"/&gt;
   &lt;enumeration value="tech"/&gt;
 &lt;/restriction&gt;
&lt;/simpleType&gt;

&lt;complexType name="authInfoType"&gt;
 &lt;choice&gt;
   &lt;element name="pw" type="eppcom:pwAuthInfoType"/&gt;
   &lt;element name="ext" type="eppcom:extAuthInfoType"/&gt;
 &lt;/choice&gt;
&lt;/complexType&gt;

&lt;!--
Child element of commands that require a single name.
--&gt;
&lt;complexType name="sNameType"&gt;
 &lt;sequence&gt;
   &lt;element name="name" type="eppcom:labelType"/&gt;
 &lt;/sequence&gt;
&lt;/complexType&gt;
&lt;!--
Child element of commands that accept multiple names.
--&gt;
&lt;complexType name="mNameType"&gt;
 &lt;sequence&gt;
   &lt;element name="name" type="eppcom:labelType"
    maxOccurs="unbounded"/&gt;
 &lt;/sequence&gt;
&lt;/complexType&gt;

&lt;!--
Child elements of the &lt;info&gt; command.
--&gt;
&lt;complexType name="infoType"&gt;
 &lt;sequence&gt;
   &lt;element name="name" type="domain:infoNameType"/&gt;
   &lt;element name="authInfo" type="domain:authInfoType"
    minOccurs="0"/&gt;
 &lt;/sequence&gt;
&lt;/complexType&gt;

&lt;complexType name="infoNameType"&gt;
 &lt;simpleContent&gt;
   &lt;extension base = "eppcom:labelType"&gt;
     &lt;attribute name="hosts" type="domain:hostsType"
      default="all"/&gt;
   &lt;/extension&gt;
 &lt;/simpleContent&gt;
&lt;/complexType&gt;

&lt;simpleType name="hostsType"&gt;
 &lt;restriction base="token"&gt;
   &lt;enumeration value="all"/&gt;
   &lt;enumeration value="del"/&gt;
   &lt;enumeration value="none"/&gt;
   &lt;enumeration value="sub"/&gt;
 &lt;/restriction&gt;
&lt;/simpleType&gt;

&lt;!--
Child elements of the &lt;renew&gt; command.
--&gt;
&lt;complexType name="renewType"&gt;
 &lt;sequence&gt;
   &lt;element name="name" type="eppcom:labelType"/&gt;
   &lt;element name="curExpDate" type="date"/&gt;
   &lt;element name="period" type="domain:periodType"
    minOccurs="0"/&gt;
 &lt;/sequence&gt;
&lt;/complexType&gt;

&lt;!--
Child elements of the &lt;transfer&gt; command.
--&gt;
&lt;complexType name="transferType"&gt;
 &lt;sequence&gt;
   &lt;element name="name" type="eppcom:labelType"/&gt;
   &lt;element name="period" type="domain:periodType"
    minOccurs="0"/&gt;
   &lt;element name="authInfo" type="domain:authInfoType"
    minOccurs="0"/&gt;
 &lt;/sequence&gt;
&lt;/complexType&gt;

&lt;!--
Child elements of the &lt;update&gt; command.
--&gt;
&lt;complexType name="updateType"&gt;
 &lt;sequence&gt;
   &lt;element name="name" type="eppcom:labelType"/&gt;
   &lt;element name="add" type="domain:addRemType"
    minOccurs="0"/&gt;
   &lt;element name="rem" type="domain:addRemType"
    minOccurs="0"/&gt;
   &lt;element name="chg" type="domain:chgType"
    minOccurs="0"/&gt;
 &lt;/sequence&gt;
&lt;/complexType&gt;

&lt;!--
Data elements that can be added or removed.
--&gt;
&lt;complexType name="addRemType"&gt;
 &lt;sequence&gt;
   &lt;element name="ns" type="domain:nsType"
    minOccurs="0"/&gt;
   &lt;element name="contact" type="domain:contactType"
    minOccurs="0" maxOccurs="unbounded"/&gt;
   &lt;element name="status" type="domain:statusType"
    minOccurs="0" maxOccurs="11"/&gt;
 &lt;/sequence&gt;
&lt;/complexType&gt;

&lt;!--
Data elements that can be changed.
--&gt;
&lt;complexType name="chgType"&gt;
 &lt;sequence&gt;
   &lt;element name="registrant" type="domain:clIDChgType"
    minOccurs="0"/&gt;
   &lt;element name="authInfo" type="domain:authInfoChgType"
    minOccurs="0"/&gt;
 &lt;/sequence&gt;
&lt;/complexType&gt;

&lt;!--
Allow the registrant value to be nullified by changing the
minLength restriction to "0".
--&gt;
&lt;simpleType name="clIDChgType"&gt;
 &lt;restriction base="token"&gt;
   &lt;minLength value="0"/&gt;
   &lt;maxLength value="16"/&gt;
 &lt;/restriction&gt;
&lt;/simpleType&gt;

&lt;!--
Allow the authInfo value to be nullified by including an
empty element within the choice.
--&gt;
&lt;complexType name="authInfoChgType"&gt;
 &lt;choice&gt;
   &lt;element name="pw" type="eppcom:pwAuthInfoType"/&gt;
   &lt;element name="ext" type="eppcom:extAuthInfoType"/&gt;
   &lt;element name="null"/&gt;
 &lt;/choice&gt;
&lt;/complexType&gt;

&lt;!--
Child response elements.
--&gt;
&lt;element name="chkData" type="domain:chkDataType"/&gt;
&lt;element name="creData" type="domain:creDataType"/&gt;
&lt;element name="infData" type="domain:infDataType"/&gt;
&lt;element name="panData" type="domain:panDataType"/&gt;
&lt;element name="renData" type="domain:renDataType"/&gt;
&lt;element name="trnData" type="domain:trnDataType"/&gt;

&lt;!--
&lt;check&gt; response elements.
--&gt;
&lt;complexType name="chkDataType"&gt;
 &lt;sequence&gt;
   &lt;element name="cd" type="domain:checkType"
    maxOccurs="unbounded"/&gt;
 &lt;/sequence&gt;
&lt;/complexType&gt;

&lt;complexType name="checkType"&gt;
 &lt;sequence&gt;
   &lt;element name="name" type="domain:checkNameType"/&gt;
   &lt;element name="reason" type="eppcom:reasonType"
    minOccurs="0"/&gt;
 &lt;/sequence&gt;
&lt;/complexType&gt;

&lt;complexType name="checkNameType"&gt;
 &lt;simpleContent&gt;
   &lt;extension base="eppcom:labelType"&gt;
     &lt;attribute name="avail" type="boolean"
      use="required"/&gt;
   &lt;/extension&gt;
 &lt;/simpleContent&gt;
&lt;/complexType&gt;

&lt;!--
&lt;create&gt; response elements.
--&gt;
&lt;complexType name="creDataType"&gt;
 &lt;sequence&gt;
   &lt;element name="name" type="eppcom:labelType"/&gt;
   &lt;element name="crDate" type="dateTime"/&gt;
   &lt;element name="exDate" type="dateTime"
    minOccurs="0"/&gt;
 &lt;/sequence&gt;
&lt;/complexType&gt;

&lt;!--
&lt;info&gt; response elements.
--&gt;
&lt;complexType name="infDataType"&gt;
 &lt;sequence&gt;
   &lt;element name="name" type="eppcom:labelType"/&gt;
   &lt;element name="roid" type="eppcom:roidType"/&gt;
   &lt;element name="status" type="domain:statusType"
    minOccurs="0" maxOccurs="11"/&gt;
   &lt;element name="registrant" type="eppcom:clIDType"
    minOccurs="0"/&gt;
   &lt;element name="contact" type="domain:contactType"
    minOccurs="0" maxOccurs="unbounded"/&gt;
   &lt;element name="ns" type="domain:nsType"
    minOccurs="0"/&gt;
   &lt;element name="host" type="eppcom:labelType"
    minOccurs="0" maxOccurs="unbounded"/&gt;
   &lt;element name="clID" type="eppcom:clIDType"/&gt;
   &lt;element name="crID" type="eppcom:clIDType"
    minOccurs="0"/&gt;
   &lt;element name="crDate" type="dateTime"
    minOccurs="0"/&gt;
   &lt;element name="upID" type="eppcom:clIDType"
    minOccurs="0"/&gt;
   &lt;element name="upDate" type="dateTime"
    minOccurs="0"/&gt;
   &lt;element name="exDate" type="dateTime"
    minOccurs="0"/&gt;
   &lt;element name="trDate" type="dateTime"
    minOccurs="0"/&gt;
   &lt;element name="authInfo" type="domain:authInfoType"
    minOccurs="0"/&gt;
 &lt;/sequence&gt;
&lt;/complexType&gt;

&lt;!--
Status is a combination of attributes and an optional
human-readable message that may be expressed in languages other
than English.
--&gt;
&lt;complexType name="statusType"&gt;
 &lt;simpleContent&gt;
   &lt;extension base="normalizedString"&gt;
     &lt;attribute name="s" type="domain:statusValueType"
      use="required"/&gt;
     &lt;attribute name="lang" type="language"
      default="en"/&gt;
   &lt;/extension&gt;
 &lt;/simpleContent&gt;
&lt;/complexType&gt;

&lt;simpleType name="statusValueType"&gt;
 &lt;restriction base="token"&gt;
   &lt;enumeration value="clientDeleteProhibited"/&gt;
   &lt;enumeration value="clientHold"/&gt;
   &lt;enumeration value="clientRenewProhibited"/&gt;
   &lt;enumeration value="clientTransferProhibited"/&gt;
   &lt;enumeration value="clientUpdateProhibited"/&gt;
   &lt;enumeration value="inactive"/&gt;
   &lt;enumeration value="ok"/&gt;
   &lt;enumeration value="pendingCreate"/&gt;
   &lt;enumeration value="pendingDelete"/&gt;
   &lt;enumeration value="pendingRenew"/&gt;
   &lt;enumeration value="pendingTransfer"/&gt;
   &lt;enumeration value="pendingUpdate"/&gt;
   &lt;enumeration value="serverDeleteProhibited"/&gt;
   &lt;enumeration value="serverHold"/&gt;
   &lt;enumeration value="serverRenewProhibited"/&gt;
   &lt;enumeration value="serverTransferProhibited"/&gt;
   &lt;enumeration value="serverUpdateProhibited"/&gt;
 &lt;/restriction&gt;
&lt;/simpleType&gt;

&lt;!--
Pending action notification response elements.
--&gt;
&lt;complexType name="panDataType"&gt;
 &lt;sequence&gt;
   &lt;element name="name" type="domain:paNameType"/&gt;
   &lt;element name="paTRID" type="epp:trIDType"/&gt;
   &lt;element name="paDate" type="dateTime"/&gt;
 &lt;/sequence&gt;
&lt;/complexType&gt;

&lt;complexType name="paNameType"&gt;
 &lt;simpleContent&gt;
   &lt;extension base="eppcom:labelType"&gt;
     &lt;attribute name="paResult" type="boolean"
      use="required"/&gt;
   &lt;/extension&gt;
 &lt;/simpleContent&gt;
&lt;/complexType&gt;

&lt;!--
&lt;renew&gt; response elements.
--&gt;
&lt;complexType name="renDataType"&gt;
&lt;sequence&gt;
 &lt;element name="name" type="eppcom:labelType"/&gt;
 &lt;element name="exDate" type="dateTime"
  minOccurs="0"/&gt;
&lt;/sequence&gt;
&lt;/complexType&gt;

&lt;!--
&lt;transfer&gt; response elements.
--&gt;
&lt;complexType name="trnDataType"&gt;
&lt;sequence&gt;
 &lt;element name="name" type="eppcom:labelType"/&gt;
 &lt;element name="trStatus" type="eppcom:trStatusType"/&gt;
 &lt;element name="reID" type="eppcom:clIDType"/&gt;
 &lt;element name="reDate" type="dateTime"/&gt;
 &lt;element name="acID" type="eppcom:clIDType"/&gt;
 &lt;element name="acDate" type="dateTime"/&gt;
 &lt;element name="exDate" type="dateTime"
  minOccurs="0"/&gt;
&lt;/sequence&gt;
&lt;/complexType&gt;

&lt;!--
End of schema.
--&gt;
&lt;/schema&gt;
END</artwork>
      </figure>
    </section>

    <section title="Internationalization Considerations">
      <t>EPP is represented in XML, which provides native support for encoding
      information using the Unicode character set and its more compact
      representations including UTF-8.  Conformant XML processors recognize
      both UTF-8 and UTF-16 <xref target="RFC2781"/>.  Though XML includes provisions to
      identify and use other character encodings through use of an
      "encoding" attribute in an &lt;?xml?&gt; declaration, use of UTF-8 is
      RECOMMENDED in environments where parser encoding support
      incompatibility exists.</t>

      <t>All date-time values presented via EPP MUST be expressed in Universal
      Coordinated Time using the Gregorian calendar.  XML Schema allows use
      of time zone identifiers to indicate offsets from the zero meridian,
      but this option MUST NOT be used with EPP.  The extended date-time
      form using upper case "T" and "Z" characters defined in <xref target="W3C.REC-xmlschema-2-20041028"/>
      MUST be used to represent date-time values as XML Schema does not
      support truncated date-time forms or lower case "T" and "Z"
      characters.</t>

      <t>This document requires domain and host name syntax as specified in
      <xref target="RFC0952"/> as updated by <xref target="RFC1123"/>.  At the time of this writing, RFC
      3490 <xref target="RFC3490"/> describes a standard to use certain ASCII name labels
      to represent non-ASCII name labels.  These conformance requirements
      might change as a result of progressing work in developing standards
      for internationalized domain names.</t>
    </section>

    <section title="IANA Considerations">
      <t>This document uses URNs to describe XML namespaces and XML schemas
      conforming to a registry mechanism described in <xref target="RFC3688"/>.  Two URI
      assignments have been registered by the IANA.</t>

      <t>Registration request for the domain namespace:</t>

      <t>URI: urn:ietf:params:xml:ns:domain-1.0</t>

      <t>Registrant Contact: See the "Author's Address" section of this
      document.</t>

      <t>XML: None.  Namespace URIs do not represent an XML specification.</t>

      <t>Registration request for the domain XML schema:</t>

      <t>URI: urn:ietf:params:xml:schema:domain-1.0</t>

      <t>Registrant Contact: See the "Author's Address" section of this
      document.</t>

      <t>XML: See the "Formal Syntax" section of this document.</t>
    </section>

    <section title="Security Considerations">
      <t>Authorization information as described in section 2.6 is REQUIRED to
      create a domain object.  This information is used in some query and
      transfer operations as an additional means of determining client
      authorization to perform the command.  Failure to protect
      authorization information from inadvertent disclosure can result in
      unauthorized transfer operations and unauthorized information
      release.  Both client and server MUST ensure that authorization
      information is stored and exchanged with high-grade encryption
      mechanisms to provide privacy services.</t>

      <t>The object mapping described in this document does not provide any
      other security services or introduce any additional considerations
      beyond those described by <xref target="RFC4930"/> and protocol layers used by EPP.</t>
    </section>

    <section title="Acknowledgements">
      <t>This document was originally written as an individual submission
      Internet-Draft.  The PROVREG working group later adopted it as a
      working group document and provided many invaluable comments and
      suggested improvements.  The author wishes to acknowledge the efforts
      of WG chairs Edward Lewis and Jaap Akkerhuis for their process and
      editorial contributions.</t>

      <t>Specific suggestions that have been incorporated into this document
      were provided by Joe Abley, Chris Bason, Eric Brunner-Williams,
      Jordyn Buchanan, Dave Crocker, Ayesha Damaraju, Anthony Eden, Sheer
      El-Showk, Klaus Malorny, Dan Manley, Michael Mealling, Patrick
      Mevzek, Asbjorn Steira, Bruce Tonkin, and Rick Wesson.</t>
    </section>
  </middle>

  <back>

<?rfc rfcedstyle="no"?>

    <references title="Normative References">
      &rfc0952;
      &rfc1123;
      &rfc2119;
      &rfc3688;
      &W3C.xml;
      &W3C.xmlschema-1;
      &W3C.xmlschema-2;

<!--   &I-D.hollenbeck-epp-rfc3730bis; -->
<reference anchor='RFC4930'>
<front>
<title>Extensible Provisioning Protocol (EPP)</title>

<author initials='S' surname='Hollenbeck' fullname='Scott Hollenbeck'>
    <organization />
</author>

<date month='May' year='2007'/>

<abstract><t>This document describes an application layer client-server protocol for the provisioning and management of objects stored in a shared central repository. Specified in XML, the protocol defines generic object management operations and an extensible framework that maps protocol operations to objects. This document includes a protocol specification, an object mapping template, and an XML media type registration. This document obsoletes RFC 3730.</t></abstract>

</front>

<seriesInfo name='RFC' value='4930' />

</reference>

<!--      &I-D.hollenbeck-epp-rfc3732bis; -->
<reference anchor='RFC4932'>
<front>
<title>Extensible Provisioning Protocol (EPP) Host Mapping</title>

<author initials='S' surname='Hollenbeck' fullname='Scott Hollenbeck'>
    <organization />
</author>

<date month='May' year='2007' />

<abstract><t>This document describes an Extensible Provisioning Protocol (EPP) mapping for \
the provisioning and management of Internet host names stored in a shared central repositor\
y. Specified in XML, the mapping defines EPP command syntax and semantics as applied to hos\
t names. This document obsoletes RFC 3732.</t></abstract>

</front>

<seriesInfo name='RFC' value='4932'/>

</reference>


<!--      &I-D.hollenbeck-epp-rfc3733bis; -->

<reference anchor='RFC4933'>
<front>
<title>Extensible Provisioning Protocol (EPP) Contact Mapping</title>

<author initials='S' surname='Hollenbeck' fullname='Scott Hollenbeck'>
    <organization />
</author>

<date month='May' year='2007' />

<abstract><t>This document describes an Extensible Provisioning Protocol (EPP) mapping for \
the provisioning and management of individual or organizational social information identifi\
ers (known as "contacts") stored in a shared central repository. Specified in Extensible Ma\
rkup Language (XML), the mapping defines EPP command syntax and semantics as applied to con\
tacts. This document obsoletes RFC 3733.</t></abstract>

</front>

<seriesInfo name='RFC' value='4933'/>

</reference>
    </references>

    <references title="Informative References">
      &rfc2781;
      &rfc3490;
      &rfc3731;
    </references>

<?rfc rfcedstyle="yes"?>

<?rfc needLines="100"?>
    <section title="Changes from RFC 3731">
      <t><list style="numbers">
        <t>Minor reformatting as a result of converting I-D source format from nroff to XML.
        <vspace blankLines="1"/>
        </t>

        <t>Removed this text from Section 2.3:<vspace blankLines="1"/>
        "With one exception, transform commands MUST be rejected when a
        pendingCreate, pendingDelete, pendingRenew, pendingTransfer, or
        pendingUpdate status is set.  The only exception is that a &lt;transfer&gt;
        command to approve, reject, or cancel a transfer MAY be processed
        while an object is in "pendingTransfer" status."
        <vspace blankLines="1"/>
        </t>

        <t>Changed text in Section 3.1.3 from "A &lt;domain:acID&gt; element that contains the identifier of the client
        that SHOULD act upon the transfer request" to "A &lt;domain:acID&gt; element that contains the identifier of the client
	that SHOULD act upon a PENDING transfer request.  For all other status types, the value identifies the client that took
	the indicated action".
        <vspace blankLines="1"/>
        </t>

        <t>Changed text in Section 3.2.5 (old Section 3.2.1.4) from "At least one &lt;domain:add&gt;, &lt;domain:rem&gt;, or
        &lt;domain:chg&gt; element MUST be provided." to "At least one &lt;domain:add&gt;, &lt;domain:rem&gt;,
        or &lt;domain:chg&gt; element MUST be provided if the command is not being extended.  All of
        these elements MAY be omitted if an &lt;update&gt; extension is present."
        <vspace blankLines="1"/>
        </t>

        <t>Renumbered old Section 3.2.6 to new Section 3.3.
        <vspace blankLines="1"/>
        </t>

        <t>Changed text in Section 3.3 (old Section 3.2.6) from this:
        <vspace blankLines="1"/>
        "The server operator reviews the request
        offline, and informs the client of the outcome of the review by
        queuing a service message for retrieval via the &lt;poll&gt; command."
        <vspace blankLines="1"/>
        to this:
        <vspace blankLines="1"/>
        "The server operator reviews the request
        offline, and informs the client of the outcome of the review either by
        queuing a service message for retrieval via the &lt;poll&gt;
        command or by using an out-of-band mechanism to inform the client of
        the request."
        <vspace blankLines="1"/>
        </t>

        <t>Removed text describing use of the XML Schema schemaLocation attribute.
        This is an optional attribute that doesn't need to be mandated for use in
        EPP.
        <vspace blankLines="1"/>
        </t>

        <t>Removed references to RFC 3339 and replaced them with references to the W3C XML
        Schema specification.
        <vspace blankLines="1"/>
        </t>

        <t>Updated EPP and XML references.</t>
      </list></t>
    </section>
  </back>
</rfc>
