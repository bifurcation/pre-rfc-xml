<?xml version="1.0" encoding="US-ASCII"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="yes"?>


<rfc ipr="pre5378Trust200902" number="8288" submissionType="IETF" consensus="yes" category="std" obsoletes="5988">

  <front>
    <title>Web Linking</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization></organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date month="October" year="2017"/>

    <area>General</area>
    
    <keyword>link relation</keyword>

    <abstract>

<t>This specification defines a model for the relationships between resources on the Web
("links") and the type of those relationships ("link relation types").</t>

<t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t>
    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This specification defines a model for the relationships between resources on the Web
("links") and the type of those relationships ("link relation types").</t>

<t>HTML <xref target="W3C.REC-html5-20141028"/> and Atom <xref target="RFC4287"/> both have well-defined concepts of linking;
<xref target="links"/> generalises this into a framework that encompasses linking in these formats and
(potentially) elsewhere.</t>

<t>Furthermore, <xref target="header"/> defines an HTTP header field for conveying such links.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
"RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as
shown here.</t>


<t>This document uses the Augmented Backus-Naur Form (ABNF) <xref target="RFC5234"/> notation of <xref target="RFC7230"/>, including the
 #rule, and explicitly includes the following rules from it: quoted-string, token, SP (space),
BWS (bad whitespace), OWS (optional whitespace), RWS (required whitespace), LOALPHA, DIGIT.</t>

<t>Additionally, the following rules are included: 
<list style="symbols">
<t>URI and URI-Reference from <xref target="RFC3986"/>,</t>
<t>type-name and subtype-name from <xref target="RFC6838"/>,</t>
<t>media-query-list from <xref target="W3C.REC-css3-mediaqueries-20120619"/>, and</t>
<t>Language-Tag from <xref target="RFC5646"/>.</t>
</list></t>

</section>
<section anchor="conformance-and-error-handling" title="Conformance and Error Handling">

<t>The requirements regarding conformance and error handling highlighted in <xref target="RFC7230"/>, Section 2.5
apply to this document.</t>

</section>
</section>
<section anchor="links" title="Links">

<t>In this specification, a link is a typed connection between two resources and is comprised of:</t>


<t><list style="symbols">
  <t>a link context,</t>
  <t>a link relation type (<xref target="link-relation-types"/>),</t>
  <t>a link target, and</t>
  <t>optionally, target attributes (<xref target="attributes"/>).</t>
</list></t>

<t>A link can be viewed as a statement of the form "link context has a link relation type resource
at link target, which has target attributes".</t>

<t>For example, "https://www.example.com/" has a "canonical" resource at "https://example.com", which
has a "type" of "text/html".</t>

<t>Link contexts and link targets are both Internationalized Resource Identifiers (IRIs) <xref target="RFC3987"/>. However, in the common case, the link
context will also be a URI <xref target="RFC3986"/>, because many protocols (such as HTTP) do not support
dereferencing IRIs. Likewise, the link target will sometimes be converted to a URI (see
<xref target="RFC3987"/>, Section 3.1) in serialisations that do not support IRIs (such as the Link header field
defined in <xref target="header"/>).</t>

<t>This specification does not place restrictions on the cardinality of links; there can be multiple
links to and from a particular target and multiple links of the same or different types between a
given context and target. Likewise, the relative ordering of links in any particular
serialisation, or between serialisations (e.g., the Link header field and in-content links), is not
specified or significant in this specification; applications that wish to consider ordering
significant can do so.</t>

<t>Links are conveyed in link serialisations; they are the "bytes on the wire", and can occur in
various forms. For example, Atom <xref target="RFC4287"/> and HTML <xref target="W3C.REC-html5-20141028"/> both defined
serialisations of links into their respective formats, and <xref target="header"/> defines how to serialise
links in HTTP header fields.</t>

<t>This specification does not define a general syntax for links across different serialisations, nor
does it mandate a specific context for any given link; it is expected that serialisations of links
will specify both aspects.</t>

<t>Finally, links are used by link applications.  Generally, an application will define the link
relation type(s) it uses, along with the serialisation(s) that they might occur within. For
example, the application "Web browsing" looks for the "stylesheet" link relation type in the HTML
link serialisation (and optionally in the Link header field), whereas the application "AtomPub"
uses the "edit" and "edit-media" link relations in the Atom serialisation.</t>

<section anchor="link-relation-types" title="Link Relation Types">

<t>In the simplest case, a link relation type identifies the semantics of a link. For example, a link
with the relation type "copyright" indicates that the current link context has a copyright resource
at the link target.</t>

<t>Link relation types can also be used to indicate that the target resource has particular
attributes, or exhibits particular behaviours; for example, a "service" link implies that the
link target can be used as part of a defined protocol (in this case, a service description).</t>

<t>Relation types are not to be confused with media types <xref target="RFC2046"/>; they do not identify the format
of the representation that results when the link is dereferenced. Rather, they only describe how
the current context is related to another resource.</t>

<t>Relation types SHOULD NOT infer any additional semantics based upon the presence or absence of
another link relation type, or its own cardinality of occurrence. An exception to this is the
combination of the "alternate" and "stylesheet" registered relation types, which has special
meaning in HTML for historical reasons.</t>

<t>There are two kinds of relation types: registered and extension.</t>

<section anchor="registered" title="Registered Relation Types">

<t>Well-defined relation types can be registered as tokens for convenience and/or to promote reuse by
other applications, using the procedure in <xref target="procedure"/>.</t>

<t>Registered relation type names MUST conform to the reg-rel-type rule (see <xref target="header-type"/>) and
MUST be compared character by character in a case-insensitive fashion. They SHOULD be appropriate
to the specificity of the relation type; that is, if the semantics are highly specific to a particular
application, the name should reflect that, so that more general names are available for less-specific
use.</t>

<t>Registered relation types MUST NOT constrain the media type of the link context and MUST NOT
constrain the available representation media types of the link target. However, they can specify
the behaviours and properties of the target resource (e.g., allowable HTTP methods, and request and
response media types that are required be supported).</t>

<t>Historically, registered relation types have been identified with a URI <xref target="RFC3986"/> by prefixing
their names with an application-defined base URI (e.g., see <xref target="atom"/>). This practice is NOT
RECOMMENDED, because the resulting strings will not be considered equivalent to the registered
relation types by other applications. Applications that do use such URIs internally MUST NOT use
them in link serialisations that do not explicitly accommodate them.</t>

<section anchor="procedure" title="Registering Link Relation Types">

<t>The "Link Relations" registry is located at &lt;https://www.iana.org/assignments/link-relations/&gt;.
Registration requests can be made by following the instructions located there or by sending an
email to the &lt;link-relations@ietf.org&gt; mailing list.</t>

<t>Registration requests consist of at least the following information:</t>

<t><list style="symbols">
  <t><spanx style="strong">Relation Name</spanx>: The name of the relation type</t>
  <t><spanx style="strong">Description</spanx>: A short English description of the type's semantics. It SHOULD be stated in
terms of the relationship between the link context and link target.</t>
  <t><spanx style="strong">Reference</spanx>: Reference to the document that specifies the link relation type,
preferably including a URI that can be used to retrieve a copy of the document. An indication of
the relevant section(s) can also be included but is not required.</t>
</list></t>

<t>The expert(s) can define additional fields to be collected in the registry.</t>

<t>General requirements for registered relation types are described in <xref target="registered"/>.</t>

<t>Registrations MUST reference a freely available, stable specification.</t>

<t>Note that relation types can be registered by third parties (including the expert(s)), if the
expert(s) determines that an unregistered relation type is widely deployed and not likely to be
registered in a timely manner otherwise. Such registrations still are subject to the requirements
defined, including the need to reference a specification.</t>

</section>
<section anchor="processing" title="Registration Request Processing">

<t>Relation types are registered using the Specification Required policy (see Section 4.6 of
<xref target="RFC8126"/>), which implies review and approval by a designated expert.</t>

<t>The goal of the registry is to reflect common use of links on the Internet. Therefore, the
expert(s) should be strongly biased towards approving registrations, unless they are abusive,
frivolous, not likely to be used on the Internet, or actively harmful to the Internet and/or the
Web (not merely aesthetically displeasing or architecturally dubious). As stated in
<xref target="registered"/>, the expert(s) can withhold registration of names that are too general for the
proposed application.</t>

<t>The expert(s) will clearly identify any issues that cause a registration to be refused. Advice
about the semantics of a proposed link relation type can be given, but if it does not block
registration, this should be explicitly stated.</t>

<t>When a request is approved, the expert(s) will inform IANA, and the registration will be processed.
The IESG is the final arbiter of any objection.</t>

</section>
</section>
<section anchor="extension-relation-types" title="Extension Relation Types">

<t>Applications that don't wish to register a relation type can use an extension relation type, which
is a URI <xref target="RFC3986"/> that uniquely identifies the relation type. Although the URI can point to a
resource that contains a definition of the semantics of the relation type, clients SHOULD NOT
automatically access that resource to avoid overburdening its server.</t>

<t>The URI used for an extension relation type SHOULD be under the control of the person or party
defining it or be delegated to them.</t>

<t>When extension relation types are compared, they MUST be compared as strings (after converting to
URIs if serialised in a different format) in a case-insensitive fashion, character by character.
Because of this, all-lowercase URIs SHOULD be used for extension relations.</t>

<t>Note that while extension relation types are required to be URIs, a serialisation of links can
specify that they are expressed in another form, as long as they can be converted to URIs.</t>

</section>
</section>
<section anchor="attributes" title="Target Attributes">

<t>Target attributes are a list of key/value pairs that describe the link or its target; for example,
a media type hint.</t>

<t>They can be defined both by individual link relation types and by link serialisations.</t>

<t>This specification does not attempt to coordinate the name of target attributes, their cardinality,
or use. Those creating and maintaining serialisations SHOULD coordinate their target attributes to
avoid conflicts in semantics or syntax and MAY define their own registries of target attributes.</t>

<t>The names of target attributes SHOULD conform to the token rule, but SHOULD NOT include any of the
characters "%", "'", or "*", for portability across serialisations and MUST be compared in a
case-insensitive fashion.</t>

<t>Target attribute definitions SHOULD specify:</t>

<t><list style="symbols">
  <t>The serialisation of their values into Unicode or a subset thereof, to maximise their chances of
portability across link serialisations.</t>
  <t>The semantics and error handling of multiple occurrences of the target attribute on a given link.</t>
</list></t>

<t>This specification does define target attributes for use in the Link HTTP header field in
<xref target="header-attrs"/>.</t>

</section>
</section>
<section anchor="header" title="Link Serialisation in HTTP Headers">

<t>The Link header field provides a means for serialising one or more links into HTTP headers.</t>

<t>The ABNF for the field value is:</t>

<figure><artwork type="abnf2616"><![CDATA[
  Link       = #link-value
  link-value = "<" URI-Reference ">" *( OWS ";" OWS link-param )
  link-param = token BWS [ "=" BWS ( token / quoted-string ) ]
]]></artwork></figure>


<t>Note that any link-param can be generated with values using either the token or the
quoted-string syntax; therefore, recipients MUST be able to parse both forms. In other words,
the following parameters are equivalent:</t>

<figure><artwork><![CDATA[
  x=y
  x="y"
]]></artwork></figure>

<t>Previous definitions of the Link header did not equate the token and quoted-string forms
explicitly; the title parameter was always quoted, and the hreflang parameter was always a
token. Senders wishing to maximize interoperability will send them in those forms.</t>

<t>Individual link-params specify their syntax in terms of the value after any necessary unquoting
(as per <xref target="RFC7230"/>, Section 3.2.6).</t>

<t>This specification establishes the link-params "rel", "anchor", and "rev" (which are part of the
general link model), as well as "hreflang", "media", "title", "title*", and "type" (which are
target attributes defined by the serialisation).</t>

<section anchor="link-target" title="Link Target">

<t>Each link-value conveys one target IRI as a URI-Reference (after conversion to one, if necessary;
see <xref target="RFC3987"/>, Section 3.1) inside angle brackets ("&lt;&gt;"). If the URI-Reference is relative,
parsers MUST resolve it as per <xref target="RFC3986"/>, Section 5. Note that any base IRI appearing in the
message's content is not applied.</t>

</section>
<section anchor="header-context" title="Link Context">

<t>By default, the context of a link conveyed in the Link header field is the URL of the
representation it is associated with, as defined in <xref target="RFC7231"/>, Section 3.1.4.1, and is serialised as a URI.</t>

<t>When present, the anchor parameter overrides this with another URI, such as a fragment of this
resource, or a third resource (i.e., when the anchor value is an absolute URI). If the anchor
parameter's value is a relative URI, parsers MUST resolve it as per <xref target="RFC3986"/>, Section 5. Note
that any base URI from the body's content is not applied.</t>

<t>The ABNF for the <spanx style="verb">anchor</spanx> parameter's value is:</t>

<figure><artwork type="abnf2616"><![CDATA[
  URI-Reference ; Section 4.1 of [RFC3986]
]]></artwork></figure>

<t>Link application can choose to ignore links with an anchor parameter. For example, the
application in use might not allow the link context to be assigned to a different resource. In such
cases, the entire link is to be ignored; link applications MUST NOT process the link
without applying the anchor.</t>

<t>Note that depending on HTTP status code and response headers, the link context might be "anonymous"
(i.e., no link context is available). For example, this is the case on a 404 response to a GET
request.</t>

</section>
<section anchor="header-type" title="Relation Type">

<t>The relation type of a link conveyed in the Link header field is conveyed in the "rel" parameter's
value. The rel parameter MUST be present but MUST NOT appear more than once in a given link-value;
occurrences after the first MUST be ignored by parsers.</t>

<t>The rel parameter can, however, contain multiple link relation types. When this occurs, it
establishes multiple links that share the same context, target, and target attributes.</t>

<t>The "rev" parameter has been used in the past to indicate that the semantics of the relationship
are in the reverse direction. That is, a link from A to B with REL="X" expresses the same
relationship as a link from B to A with REV="X". rev is deprecated by this specification because
it often confuses authors and readers; in most cases, using a separate relation type is preferable.</t>

<t>The ABNF for the rel and rev parameters' values is:</t>

<figure><artwork type="abnf2616"><![CDATA[
  relation-type *( 1*SP relation-type )
]]></artwork></figure>

<t>where:</t>

<figure><artwork type="abnf2616"><![CDATA[
  relation-type  = reg-rel-type / ext-rel-type
  reg-rel-type   = LOALPHA *( LOALPHA / DIGIT / "." / "-" )
  ext-rel-type   = URI ; Section 3 of [RFC3986]
]]></artwork></figure>

<t>Note that extension relation types are REQUIRED to be absolute URIs in Link header fields and MUST
be quoted when they contain characters not allowed in tokens, such as a semicolon (";") or comma
(",") (as these characters are used as delimiters in the header field itself).</t>

</section>
<section anchor="header-attrs" title="Target Attributes">

<t>The Link header field defines several target attributes specific to this serialisation and also
allows extension target attributes. Target attributes are serialised in the Link header field as
parameters (see <xref target="RFC7231"/>, Section 3.1.1.1 for the definition of their syntax).</t>

<section anchor="serialisation-defined-attributes" title="Serialisation-Defined Attributes">

<t>The "hreflang", "media", "title", "title*", and "type" link-params can be translated to
serialisation-defined target attributes for the link.</t>

<t>The "hreflang" attribute, when present, is a hint indicating what the language of the result of
dereferencing the link should be. Note that this is only a hint; for example, it does not override
the Content-Language header field of a HTTP response obtained by actually following the link.
Multiple hreflang attributes on a single link-value indicate that multiple languages are
available from the indicated resource.</t>

<t>The ABNF for the hreflang parameter's value is:</t>

<figure><artwork type="abnf2616"><![CDATA[
  Language-Tag
]]></artwork></figure>

<t>The "media" attribute, when present, is used to indicate intended destination medium or media for
style information (see <xref target="W3C.REC-html5-20141028"/>, Section 4.2.4). Its value MUST be quoted if it
contains a semicolon (";") or comma (","). There MUST NOT be more than one media attribute in
a link-value; occurrences after the first MUST be ignored by parsers.</t>

<t>The ABNF for the media parameter's value is:</t>

<figure><artwork type="abnf2616"><![CDATA[
  media-query-list
]]></artwork></figure>

<t>The "title" attribute, when present, is used to label the destination of a link such that it can be
used as a human-readable identifier (e.g., a menu entry) in the language indicated by the
Content-Language header field (if present). The title attribute MUST NOT appear more than once in
a given link; occurrences after the first MUST be ignored by parsers.</t>

<t>The "title*" link-param can be used to encode this attribute in a different character set and/or
contain language information as per <xref target="RFC8187"/>. The title* link-param MUST
NOT appear more than once in a given link-value; occurrences after the first MUST be ignored by
parsers. If the attribute does not contain language information, its language is indicated by the
Content-Language header field (when present).</t>

<t>If both the title and title* link-params appear in a link, applications SHOULD use the
title* link-param's value for the title attribute.</t>

<t>The "type" attribute, when present, is a hint indicating what the media type of the result of
dereferencing the link should be. Note that this is only a hint; for example, it does not override
the Content-Type header field of a HTTP response obtained by actually following the link. The
type attribute MUST NOT appear more than once in a given link-value; occurrences after the first
MUST be ignored by parsers.</t>

<t>The ABNF for the type parameter's value is:</t>

<figure><artwork type="abnf2616"><![CDATA[
  type-name "/" subtype-name ; see Section 4.2 of [RFC6838]
]]></artwork></figure>

</section>
<section anchor="extension-attributes" title="Extension Attributes">

<t>Other link-params are link-extensions and are to be considered as target attributes.</t>

<t>Such target attributes MAY be defined to use the encoding in <xref target="RFC8187"/> (e.g.,
"example" and "example*"). When both forms are present, they SHOULD be considered to be the same
target attribute; applications SHOULD use the value of the name ending in "*" (after
<xref target="RFC8187"/> decoding) but MAY fall back to the other value if there is an
error in decoding it, or if they do not support decoding.</t>

</section>
</section>
<section anchor="link-header-field-examples" title="Link Header Field Examples">

<t>For example:</t>

<figure><artwork><![CDATA[
Link: <http://example.com/TheBook/chapter2>; rel="previous";
      title="previous chapter"
]]></artwork></figure>

<t>indicates that "chapter2" is previous to this resource in a logical navigation path.</t>

<t>Similarly,</t>

<figure><artwork><![CDATA[
Link: </>; rel="http://example.net/foo"
]]></artwork></figure>

<t>indicates that the root resource ("/") is related to this resource with the extension relation type
"http://example.net/foo".</t>

<t>This link:</t>

<figure><artwork><![CDATA[
Link: </terms>; rel="copyright"; anchor="#foo"
]]></artwork></figure>

<t>indicates that the linked copyright terms only apply to the portion of the document indicated by
the (media type-specific) fragment identifier "foo".</t>

<t>The example below shows an instance of the Link header field encoding multiple links and also the
use of the encoding from RFC 8187 to encode both non-ASCII characters and language information.</t>

<figure><artwork><![CDATA[
Link: </TheBook/chapter2>;
      rel="previous"; title*=UTF-8'de'letztes%20Kapitel,
      </TheBook/chapter4>;
      rel="next"; title*=UTF-8'de'n%c3%a4chstes%20Kapitel
]]></artwork></figure>

<t>Here, both links have titles encoded in UTF-8, both use the German language ("de"), and the second link
contains the Unicode code point U+00E4 ("LATIN SMALL LETTER A WITH DIAERESIS").</t>

<t>Note that link-values can convey multiple links between the same link target and link context; for
example:</t>

<figure><artwork><![CDATA[
Link: <http://example.org/>;
      rel="start http://example.net/relation/other"
]]></artwork></figure>

<t>Here, the link to "http://example.org/" has the registered relation type "start" and the extension
relation type "http://example.net/relation/other".</t>

<t>Finally, this header field:</t>

<figure><artwork><![CDATA[
Link: <https://example.org/>; rel="start",
      <https://example.org/index>; rel="index"
]]></artwork></figure>

<t>is equivalent to these:</t>

<figure><artwork><![CDATA[
Link: <https://example.org/>; rel="start"
Link: <https://example.org/index>; rel="index"
]]></artwork></figure>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="link-http-header-field-registration" title="Link HTTP Header Field Registration">

<t>This specification updates the "Message Headers" registry entry for "Link" in HTTP <xref target="RFC3864"/> to
refer to this document.</t>

<figure><artwork><![CDATA[
Header Field Name: Link
Protocol: http
Status: standard
Reference: RFC 8288
]]></artwork></figure>

</section>
<section anchor="link-relation-type-registry" title="Link Relation Type Registry">

<t>This specification updates the registration procedures for the "Link Relation Types" registry; see
<xref target="procedure"/>. Also, all references to RFC 5988 in that registry have been replaced with references to this document.</t>

<t>IANA will direct any incoming requests regarding the registry to this document and, if defined, the
processes established by the expert(s); typically, this will mean referring them to the registry
Web page.</t>

<t>Note that the expert(s) is allowed (as per <xref target="procedure"/>) to define additional fields to be
collected in the registry.</t>

</section>
<section anchor="link-relation-application-data-registry" title="Link Relation Application Data Registry">

<t>Per this specification, IANA has removed the "Link Relation Application Data" registry, as it has not been used,
and future use is not anticipated.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>The content of the Link header field is not secure, private, or integrity-guaranteed. Use of
Transport Layer Security (TLS) with HTTP <xref target="RFC2818"/> is currently the only end-to-end way to
provide these properties.</t>

<t>Link applications ought to consider the attack vectors opened by automatically following, trusting,
or otherwise using links gathered from HTTP header fields.</t>

<t>For example, Link header fields that use the "anchor" parameter to associate a link's context with
another resource cannot be trusted since they are effectively assertions by a third party that
could be incorrect or malicious. Applications can mitigate this risk by specifying that such links
should be discarded unless some relationship between the resources is established (e.g., they share
the same authority).</t>

<t>Dereferencing links has a number of risks, depending on the application in use. For example, the
Referer header <xref target="RFC7231"/> can expose information about the application's state (including private
information) in its value. Likewise, cookies <xref target="RFC6265"/> are another mechanism that, if
used, can become an attack vector. Applications can mitigate these risks by carefully specifying
how such mechanisms should operate.</t>

<t>The Link header field makes extensive use of IRIs and URIs. See <xref target="RFC3987"/>, Section 8 for security
considerations relating to IRIs. See <xref target="RFC3986"/>, Section 7 for security considerations relating to
URIs. See <xref target="RFC7230"/>, Section 9 for security considerations relating to HTTP header fields.</t>

</section>
<section anchor="internationalisation-considerations" title="Internationalisation Considerations">

<t>Link targets may need to be converted to URIs in order to express them in serialisations that do
not support IRIs. This includes the Link HTTP header field.</t>

<t>Similarly, the anchor parameter of the Link header field does not support IRIs; therefore, IRIs
must be converted to URIs before inclusion there.</t>

<t>Relation types are defined as URIs, not IRIs, to aid in their comparison. It is not expected that
they will be displayed to end users.</t>

<t>Note that registered Relation Names are required to be lowercase ASCII letters.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

<?rfc include="reference.RFC.2119" ?>
<?rfc include="reference.RFC.3864" ?>
<?rfc include="reference.RFC.3986" ?>
<?rfc include="reference.RFC.3987" ?>
<?rfc include="reference.RFC.5234" ?>
<?rfc include="reference.RFC.5646" ?>
<?rfc include="reference.RFC.6838" ?>
<?rfc include="reference.RFC.7230" ?>
<?rfc include="reference.RFC.7231" ?>
<?rfc include="reference.RFC.8126" ?>
<?rfc include="reference.RFC.8174" ?>
<?rfc include="reference.RFC.8187" ?>

<reference anchor="W3C.REC-css3-mediaqueries-20120619"
           target='http://www.w3.org/TR/2012/REC-css3-mediaqueries-20120619'>
<front>
<title>Media Queries</title>
<author initials='F.' surname='Rivoal' fullname='Florian Rivoal'>
    <organization />
</author>
<date month='June' year='2012' />
</front>
<seriesInfo name='W3C Recommendation' value='REC-css3-mediaqueries-20120619' />
</reference>
</references>


    <references title='Informative References'>

<?rfc include="reference.RFC.2046" ?>
<?rfc include="reference.RFC.2818" ?>
<?rfc include="reference.RFC.4287" ?>
<?rfc include="reference.RFC.6265" ?>


<reference anchor="W3C.REC-html5-20141028"
           target='http://www.w3.org/TR/2014/REC-html5-20141028'>
<front>
<title>HTML5</title>
<author initials='I.' surname='Hickson' fullname='Ian Hickson'>
    <organization />
</author>
<author initials='R.' surname='Berjon' fullname='Robin Berjon'>
    <organization />
</author>
<author initials='S.' surname='Faulkner' fullname='Steve Faulkner'>
    <organization />
</author>
<author initials='T.' surname='Leithead' fullname='Travis Leithead'>
    <organization />
</author>
<author initials='E.' surname='Navara' fullname='Erika Doyle Navara'>
    <organization />
</author>
<author initials='T.' surname='O&#39;Connor' fullname='Theresa O&#39;Connor'>
    <organization />
</author>
<author initials='S.' surname='Pfeiffer' fullname='Silvia Pfeiffer'>
    <organization />
</author>
<date month='October' year='2014' />
</front>
<seriesInfo name='W3C Recommendation' value='REC-html5-20141028' />
</reference>
    </references>


<section anchor="notes-on-other-link-serialisations" title="Notes on Other Link Serialisations">

<t>Header fields (<xref target="header"/>) are only one serialisation of links; other specifications have defined
alternative serialisations.</t>

<section anchor="html" title="Link Serialisation in HTML">

<t>HTML motivated the original syntax of the Link header field, and many of the design decisions in
this document are driven by a desire to stay compatible with it.</t>

<t>In HTML, the link element can be mapped to links as specified here by using the "href" attribute
for the target URI, and "rel" to convey the relation type, as in the Link header field. The context
of the link is the URI associated with the entire HTML document. HTML also defines several
attributes on links that can be seen as target attributes, including "media", "hreflang", "type",
and "sizes".</t>

<t>Section 4.8 of HTML5 <xref target="W3C.REC-html5-20141028"/> defines modern HTML links. That document links to
the Microformats Wiki as a registry; over time, the IANA registry ought to mirror its contents and,
ideally, eventually replace it (although that depends on the HTML community).</t>

<t>Surveys of existing HTML content have shown that unregistered link relation types that are not URIs
are (perhaps inevitably) common. Consuming HTML implementations ought not consider such
unregistered short links to be errors, but rather relation types with a local scope (i.e., their
meaning is specific and perhaps private to that document).</t>

<t>Finally, the HTML specification gives a special meaning when the "alternate" relation types
coincide with other relation types in the same link. Such links ought to be serialised in the Link
header field using a single list of relation-types (e.g., rel="alternate stylesheet") to preserve
this relationship.</t>

</section>
<section anchor="atom" title="Link Serialisation in Atom">

<t>Atom <xref target="RFC4287"/> is a link serialisation that conveys links in the atom:link element, with the
"href" attribute indicating the link target and the "rel" attribute containing the relation type.
The context of the link is either a feed locator or an entry ID, depending on where it appears;
generally, feed-level links are obvious candidates for transmission as a Link header field.</t>

<t>When serialising an atom:link into a Link header field, it is necessary to convert link targets (if
used) to URIs.</t>

<t>Atom defines extension relation types in terms of IRIs. This specification redefines them as URIs,
to simplify and reduce errors in their comparison.</t>

<t>Atom allows registered link relation types to be serialised as absolute URIs using a prefix,
"http://www.iana.org/assignments/relation/". This prefix is specific to the Atom serialisation.</t>

<t>Furthermore, link relation types are always compared in a case-sensitive fashion; therefore,
registered link relation types SHOULD be converted to their registered form (usually, lowercase)
when serialised in an Atom document.</t>

<t>Note also that while the Link header field allows multiple relations to be serialised in a single
link, atom:link does not. In this case, a single link-value may map to several atom:link elements.</t>

<t>As with HTML, atom:link defines some attributes that are not explicitly mirrored in the Link header
field syntax, but they can also be used as link-extensions to maintain fidelity.</t>

</section>
</section>
<section anchor="parse" title="Algorithms for Parsing Link Header Fields">

<t>This appendix outlines a set of non-normative algorithms: for parsing the Link header(s) out of a
header set, for parsing a Link header field value, and algorithms for parsing generic parts of the
field value.</t>

<t>These algorithms are more permissive than the ABNF defining the syntax might suggest; the error
handling embodied in them is a reasonable approach, but not one that is required. As such they are
advisory only, and in cases where there is disagreement, the correct behaviour is defined by the
body of this specification.</t>

<section anchor="parse-set" title="Parsing a Header Set for Links">

<t>This algorithm can be used to parse the Link header fields that a HTTP header set contains. Given a
header_set of (string field_name, string field_value) pairs, assuming ASCII encoding, it
returns a list of link objects.</t>

<t><list style="numbers">
  <t>Let field_values be a list containing the members of header_set whose field_name is a
case-insensitive match for "link".</t>
  <t>Let links be an empty list.</t>
  <t>For each field_value in field_values:  <list style="numbers">
      <t>Let value_links be the result of Parsing a Link Field Value (<xref target="parse-fv"/>) from
field_value.</t>
      <t>Append each member of value_links to links.</t>
    </list></t>
  <t>Return links.</t>
</list></t>

</section>
<section anchor="parse-fv" title="Parsing a Link Field Value">

<t>This algorithm parses zero or more comma-separated link-values from a Link header field. Given a
string field_value, assuming ASCII encoding, it returns a list of link objects.</t>

<t><list style="numbers">
  <t>Let links be an empty list.</t>
  <t>While field_value has content: 
 <list style="numbers">
      <t>Consume any leading OWS.</t>
      <t>If the first character is not "&lt;", return links.</t>
      <t>Discard the first character ("&lt;").</t>
      <t>Consume up to but not including the first "&gt;" character or end of field_value and let the
result be target_string.</t>
      <t>If the next character is not "&gt;", return links.</t>
      <t>Discard the leading "&gt;" character.</t>
      <t>Let link_parameters be the result of Parsing Parameters (<xref target="parse-param"/>) from
field_value (consuming zero or more characters of it).</t>
      <t>Let target_uri be the result of relatively resolving (as per <xref target="RFC3986"/>, Section 5.2)
  target_string. Note that any base URI carried in the payload body is NOT used.</t>
      <t>Let relations_string be the second item of the first tuple of link_parameters whose first
item matches the string "rel" or the empty string ("") if it is not present.</t>
      <t>Split relations_string on RWS (removing it in the process) into a list of string
relation_types.</t>
      <t>Let context_string be the second item of the first tuple of link_parameters whose first
item matches the string "anchor". If it is not present, context_string is the URL of
the representation carrying the Link header <xref target="RFC7231"/>, Section 3.1.4.1, serialised as a
URI. Where the URL is anonymous, context_string is null.</t>
      <t>Let context_uri be the result of relatively resolving (as per <xref target="RFC3986"/>, Section 5.2)
  context_string, unless context_string is null, in which case context is null. Note that
any base URI carried in the payload body is NOT used.</t>
      <t>Let target_attributes be an empty list.</t>
      <t>For each tuple (param_name, param_value) of link_parameters:  
    <list style="numbers">
          <t>If param_name matches "rel" or "anchor", skip this tuple.</t>
          <t>If param_name matches "media", "title", "title*", or "type" and target_attributes
already contains a tuple whose first element matches the value of param_name, skip this
tuple.</t>
          <t>Append (param_name, param_value) to target_attributes.</t>
        </list></t>

      <t>Let star_param_names be the set of param_names in the (param_name, param_value) tuples
of link_parameters where the last character of param_name is an asterisk ("*").</t>
      <t>For each star_param_name in star_param_names:  
    <list style="numbers">
          <t>Let base_param_name be star_param_name with the last character removed.</t>
          <t>If the implementation does not choose to support an internationalised form of a parameter
named base_param_name for any reason (including, but not limited to, it being prohibited
by the parameter's specification), remove all tuples from link_parameters whose first
member is star_param_name, and skip to the next star_param_name.</t>

          <t>Remove all tuples from link_parameters whose first member is base_param_name.</t>
          <t>Change the first member of all tuples in link_parameters whose first member is
star_param_name to base_param_name.</t>
        </list></t>
      <t>For each relation_type in relation_types:      
<list style="numbers">
          <t>Case-normalise relation_type to lowercase.</t>
          <t>Append a link object to links with the target target_uri, relation type of
relation_type, context of context_uri, and target attributes target_attributes.</t>
        </list></t>
    </list></t>
  <t>Return links.</t>
</list></t>

</section>
<section anchor="parse-param" title="Parsing Parameters">

<t>This algorithm parses the parameters from a header field value. Given input, an ASCII string, it
returns a list of (string parameter_name, string parameter_value) tuples that it contains.
input is modified to remove the parsed parameters.</t>

<t><list style="numbers">
  <t>Let parameters be an empty list.</t>
  <t>While input has content:  <list style="numbers">
      <t>Consume any leading OWS.</t>
      <t>If the first character is not ";", return parameters.</t>
      <t>Discard the leading ";" character.</t>
      <t>Consume any leading OWS.</t>
      <t>Consume up to but not including the first BWS, "=", ";", or "," character, or up to the end of input, and
let the result be parameter_name.</t>
      <t>Consume any leading BWS.</t>
      <t>If the next character is "=": 
     <list style="numbers">
          <t>Discard the leading "=" character.</t>
          <t>Consume any leading BWS.</t>
          <t>If the next character is DQUOTE, let parameter_value be the result of Parsing a Quoted
String (<xref target="parse-qs"/>) from input (consuming zero or more characters of it).</t>
          <t>Else, consume the contents up to but not including the first ";" or "," character, or up to the end of
input, and let the results be parameter_value.</t>

          <t>If the last character of parameter_name is an asterisk ("*"), decode parameter_value
according to <xref target="RFC8187"/>. Continue processing input if an unrecoverable
error is encountered.</t>

        </list></t>
      <t>Else:      <list style="numbers">
          <t>Let parameter_value be an empty string.</t>
        </list></t>
      <t>Case-normalise parameter_name to lowercase.</t>
      <t>Append (parameter_name, parameter_value) to parameters.</t>
      <t>Consume any leading OWS.</t>
      <t>If the next character is "," or the end of input, stop processing input and return
parameters.</t>
    </list></t>
</list></t>

</section>
<section anchor="parse-qs" title="Parsing a Quoted String">

<t>This algorithm parses a quoted string, as per <xref target="RFC7230"/>, Section 3.2.6. Given input, an ASCII string,
it returns an unquoted string. input is modified to remove the parsed string.</t>

<t><list style="numbers">
  <t>Let output be an empty string.</t>
  <t>If the first character of input is not DQUOTE, return output.</t>
  <t>Discard the first character.</t>
  <t>While input has content:  <list style="numbers">
      <t>If the first character is a backslash ("\"):      <list style="numbers">
          <t>Discard the first character.</t>
          <t>If there is no more input, return output.</t>
          <t>Else, consume the first character and append it to output.</t>
        </list></t>
      <t>Else, if the first character is DQUOTE, discard it and return output.</t>
      <t>Else, consume the first character and append it to output.</t>
    </list></t>
  <t>Return output.</t>
</list></t>

</section>
</section>
<section anchor="changes-from-rfc5988" title="Changes from RFC 5988">

<t>This specification has the following differences from its predecessor, RFC 5988:</t>

<t><list style="symbols">
  <t>The initial relation type registrations were removed, since they've already been registered by
RFC 5988.</t>
  <t>The introduction has been shortened.</t>
  <t>The "Link Relation Application Data" registry has been removed.</t>
  <t>Incorporated errata.</t>
  <t>Updated references.</t>
  <t>Link cardinality was clarified.</t>
  <t>Terminology was changed from "target IRI" and "context IRI" to "link target" and "link context",
respectively.</t>
  <t>Made assigning a URI to registered relation types serialisation specific.</t>
  <t>Removed misleading statement that the Link header field is semantically equivalent to HTML and
Atom links.</t>
  <t>More carefully defined and used "link serialisations" and "link applications."</t>
  <t>Clarified the cardinality of target attributes (generically and for "type").</t>
  <t>Corrected the default link context for the Link header field, to be dependent upon the identity
of the representation (as per RFC&nbsp;7231).</t>
  <t>Defined a suggested parsing algorithm for the Link header.</t>
  <t>The value space of target attributes and their definition has been specified.</t>
  <t>The ABNF has been updated to be compatible with <xref target="RFC7230"/>. In particular, whitespace is now
explicit.</t>
  <t>Some parameters on the HTTP header field can now appear as a token.</t>
  <t>Parameters on the HTTP header can now be valueless.</t>
  <t>Handling of quoted strings is now defined by <xref target="RFC7230"/>.</t>
  <t>The "type" header field parameter now needs to be quoted (as "token" does not allow "/").</t>
</list></t>

</section>


  </back>

</rfc>

