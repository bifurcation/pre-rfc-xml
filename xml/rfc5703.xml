<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type="text/xsl" href="../../rfc2629.xslt"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc1991 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1991.xml'>
  <!ENTITY rfc2045 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2045.xml'>
  <!ENTITY rfc2047 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2047.xml'>
  <!ENTITY rfc2119 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
  <!ENTITY rfc2231 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2231.xml'>
  <!ENTITY rfc3629 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml'>
  <!ENTITY rfc3851 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3851.xml'>
  <!ENTITY rfc4871 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4871.xml'>
  <!ENTITY rfc4880 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4880.xml'>
  <!ENTITY rfc5173 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5173.xml'>
  <!ENTITY rfc5228 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5228.xml'>
  <!ENTITY rfc5229 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5229.xml'>
  <!ENTITY rfc5231 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5231.xml'>
  <!ENTITY rfc5293 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5293.xml'>
  <!ENTITY rfc5322 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5322.xml'>
]>

<?rfc toc="yes"?>
<?rfc sortrefs="no"?>
<?rfc rfcedstyle="yes"?> 
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?> 
<?rfc sortrefs="yes"?>

<rfc number="5703" ipr="pre5378Trust200902" category="std">
<front>
  <title abbrev="Sieve MIME Operations">Sieve Email Filtering: MIME Part Tests, Iteration, Extraction, Replacement, and Enclosure</title>

  <author fullname="Tony Hansen" initials="T." surname="Hansen">
    <organization>AT&amp;T Laboratories</organization>
    <address>
    <postal>
        <street>200 Laurel Ave.</street>
        <city>Middletown</city>
        <region>NJ</region>
        <code>07748</code>
        <country>USA</country>
    </postal>
    <email>tony+sieveloop@maillennium.att.com </email>
    </address>
  </author>
  <author initials="C." surname="Daboo" fullname="Cyrus Daboo">
    <organization abbrev="Apple Inc.">Apple Inc.</organization>
    <address>
      <postal>
        <street>1 Infinite Loop</street>
        <city>Cupertino</city>
        <region>CA</region>
        <code>95014</code>
        <country>USA</country>
      </postal>
      <email>cyrus@daboo.name</email>
      <uri>http://www.apple.com/</uri>
    </address>
  </author>
  <date month="October" year="2009"/>           
  <area>Applications</area>
  <workgroup>Internet Engineering Task Force</workgroup>

  <keyword>Email</keyword>
  <keyword>Electronic Mail</keyword>
  <keyword>Internet Mail</keyword>
  <keyword>Message Filtering</keyword>

<!--[rfced] Please note that throughout the text there are
  inconsistencies in the way parameter names are treated - sometimes
  they appear in quotes. For example: 
  ":subject" parameter vs. :first parameter

Please review these occurrences and let us know how you would like to proceed.
-->

  <abstract>
    <t>
      This document defines extensions to the Sieve email filtering language
      to permit analysis and manipulation of the MIME body parts of an email
      message.
    </t>
  </abstract>

</front>
<middle>
  <section title="Introduction">
    <t>
        MIME messages (<xref target="RFC2045" />) are often complex objects, consisting of many parts and sub-parts.

	This Sieve (<xref target="RFC5228" />) extension defines mechanisms for performing tests on MIME body parts,
	looping through the MIME body parts,
	extracting information from a MIME body part,
	changing the contents of a MIME body part,
	and enclosing the entire message within a wrapper.
    </t>
  </section>
    <section title='Conventions Used in This Document'>
        <t>
            Conventions for notations are as in <xref target='RFC5228' />, Section 1.1.
        </t>
        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
	  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
	  document are to be interpreted as described in <xref target='RFC2119' />.
        </t>
    </section>

  <section title='Sieve Loops: Actions "foreverypart" and "break"'>
    <t>
      The base Sieve language has no looping mechanism.
      Given that messages may contain multiple parts, in order to support
      filters that apply to any and all parts, we introduce a
      new control command: "foreverypart", which is an iterator that
      walks though every MIME part of a message, including nested
      parts, depth first, and applies the commands in the specified block to each of them.
      The iterator will start with the first MIME part (as its current
      context) and will execute a command block (Sieve commands
      enclosed by {...}).
      Upon completion of this command block, the
      iterator advances to the next MIME part (as its current context)
      and executes the same command block again.
    </t>
    <t>
      The iterator can be terminated prematurely by a new Sieve control command, "break".
    </t>
    <t>
      <list style='hanging'>
    <t hangText='Usage:'>
      foreverypart [":name" string] block
    </t>
    <t hangText='Usage:'>
      break [":name" string];
    </t>
      </list>
    </t>
    <t>
      "foreverypart" commands can be nested inside other "foreverypart" commands.
      When this occurs, the nested "foreverypart" iterates over the MIME parts contained
      within the MIME part currently being targeted by the nearest enclosing "foreverypart" command.
      (That is, the inner loop only operates on children of the bodypart currently accessed by the outer loop.)
      If that MIME part is a terminal MIME part (i.e., does not contain other MIME parts),
      then the nested "foreverypart" loop is simply ignored.
    </t>
    <t>
      Sieve implementations MAY limit the number of nested loops that occur within one another;
      however, they MUST support at least one nested loop inside another loop.
    </t>
    <t>
      If a name is given to a "break" command, it terminates the closest enclosing loop with the identical matching name.
      (If a nested "foreverypart" name is the same as a "foreverypart" name in an outer level, the outer level name is hidden.)
      It is an error if there is no enclosing loop with that name.
    </t>
    <t>  If no name is given in a "break" command (i.e., the ":name" parameter is omitted),
      the break command terminates the closest enclosing loop.</t>
  </section>
  <section title="Changes to Sieve Tests">
  <t>
    This specification extends the base Sieve "header", "address", and "exists" tests to support targeting those tests at a specific MIME part or at all MIME parts in the enclosing scope.
  </t>
  <section title='Test "header"' anchor="header_test">
    <t>
      The "header" test is extended with the addition of new ":mime" and ":anychild" tagged arguments and their associated options.
    </t>
    <t>
      <list style='hanging'>
        <t hangText='Usage:'>
          header [":mime"] [":anychild"] [MIMEOPTS]<vspace blankLines="0" />
          [COMPARATOR] [MATCH-TYPE]<vspace blankLines="0" />
          &lt;header-names: string-list&gt; &lt;key-list: string-list&gt;
        </t>

<!-- [rfced] Is the following intended to be ABNF syntax?
If so, please use "=" and add a normative reference to RFC 5234.
-->

        <t>
          The definition of [MIMEOPTS] is:
        </t>
        <t hangText='Syntax:'>
          ":type" / ":subtype" / ":contenttype" /<vspace blankLines="0" />
                  ":param" &lt;param-list: string-list&gt;
        </t>
      </list>
    </t>
    <t>
      When the ":mime" tagged argument is present in the "header" test, it
      will parse the MIME header lines in the message so that tests can be
      performed on specific elements.  The ":anychild" tagged argument may
      only appear when the ":mime" tagged argument is present, and only
      modifies the semantics of the ":mime" tagged argument. That is, presence
      of the ":anychild" in absence of ":mime" is an error.
    </t>
    <t>
      When used outside the context of a "foreverypart" iterator, and
      without an ":anychild" tagged argument, the "header" test will examine
      only the outer top-level <xref target="RFC5322"/> headers of the message.
    </t>
    <t>
      When used inside the context of a "foreverypart" iterator, and
      without an ":anychild" tagged argument, the "header" test will examine
      the headers associated with the current MIME part context from the loop.
    </t>
    <t>
      When used outside the context of a "foreverypart" iterator, and
      with an ":anychild" tagged argument, the "header" test
      will examine all MIME body parts and return true if any of them
      satisfies the test.
    </t>
    <t>
      When used inside the context of a "foreverypart" iterator, and
      with an ":anychild" tagged argument, the "header" test will examine
      the current MIME part context and all its nested MIME body parts,
      returning true if any of them satisfies the test.
    </t>
    <t>
      The "header" test with the ":mime" tagged argument can test various aspects
      of certain structured MIME headers. Implementations SHOULD support
      desegmentation, decoding, and charset translation of parameter values
      encoded according to <xref target='RFC2231'/> as part of this test.
      Additionally, <xref target='RFC2047'/> describes a process whereby
      <xref target='RFC5322'/> headers can be encoded in various ways.
      That encoding is not strictly allowed in MIME parameters; however,
      in practice, it has been used in many email implementations. So, Sieve
      implementations MAY decode <xref target='RFC2047'/>-encoded words in
      parameter values as part of this test.
    </t>
    <t>
      These options are available:

      <list style='hanging' hangIndent="15">
        <t hangText=":type">
          for a "Content-Type" MIME header field, parses and tests the value of the
	  MIME type specified in the header; for a "Content-Disposition" MIME header
	  field, parses and tests the value of the disposition specified in the header;
	  for other MIME headers, uses a blank string for the test.
        </t>
        <t hangText=":subtype">
          for a "Content-Type" MIME header field, parses and tests the value of the
	  MIME subtype specified in the header; for a "Content-Disposition" MIME
	  header field, uses a blank string for the test; for other MIME headers,
	  uses a blank string for the test.
        </t>
        <t hangText=":contenttype">
          for a "Content-Type" MIME header field, parses and tests the combined
	  value of the MIME type and subtype specified in the header; for a
	  "Content-Disposition" MIME header field, behaves the same as the
	  ":type" option; for other MIME headers, uses a blank string for the test.
        </t>
        <t hangText=":param">
          parses the header looking for MIME parameters in the header.
	  The supplied string-list lists the names of any parameters to be tested.
	  If any one named parameter value matches any of the test string values,
	  the test will return true.
        </t>
      </list>
    </t>
    <t>
      When the ":count" option from <xref target='RFC5231'/> is used, the following applies:
    	
      <list style='letters'>
        <t>for ":type", ":subtype", or ":contenttype", return a count of the number of 
	  headers that parsed successfully</t>
    	<t>for ":param", return a count of the number of parameters with the given
	  name that were found</t>
      </list>
    </t>
    <t>Example:</t>
    
    <figure><artwork><![CDATA[
require ["mime", "fileinto"];

if header :mime :type "Content-Type" "image"
{
    fileinto "INBOX.images";
}
    ]]></artwork></figure>
    
    <t>
      In this example, any message that contains a MIME image type part at the top-level is saved to the mailbox "INBOX.images".
    </t>
    
    <t>Example:</t>
    
    <figure><artwork><![CDATA[
require ["mime", "fileinto"];

if header :mime :anychild :contenttype
          "Content-Type" "text/html"
{
    fileinto "INBOX.html";
}
    ]]></artwork></figure>
    
    <t>
      In this example, any message that contains any MIME part with a content-type of "text/html" is saved to the mailbox "INBOX.html".
    </t>

    <t>Example:</t>
    
    <figure><artwork><![CDATA[
require ["mime", "foreverypart", "fileinto"];

foreverypart
{
    if allof (
      header :mime :param "filename" :contains
         "Content-Disposition" "important",
      header :mime :subtype "Content-Type" "pdf",
      size :over "100K")
    {
        fileinto "INBOX.important";
        break;
    }
}
    ]]></artwork></figure>
    
    <t>
      In this example, any message that contains a MIME part that
      has a content-disposition with a filename parameter containing the text
      "important", has a content-subtype of "pdf" and is bigger than 100 Kb
      is saved to the mailbox "INBOX.important".
    </t>
  </section>
  <section title='Test "address"'>
    <t>
      The "address" test is extended with the addition of new ":mime" and ":anychild" tagged arguments
      and their associated options.
    </t>
    <t>
      <list style='hanging'>
        <t hangText='Usage:'>
	  address [":mime"] [":anychild"] [COMPARATOR]<vspace blankLines="0" />
	  [ADDRESS-PART] [MATCH-TYPE]<vspace blankLines="0" />
          &lt;header-list: string-list&gt; &lt;key-list: string-list&gt;
        </t>
      </list>
    </t>
    <t>
      When the ":mime" tagged argument is present in the "address" test,
      it will parse the MIME header lines as if they were standard address
      header lines in a message so that tests can be performed on specific elements.
    </t>
    <t>
      The behavior of the ":anychild" tagged argument and the interaction with the "foreverypart"
      iterator is the same as for the extended "header" test in <xref target="header_test"/>.
    </t>
    <t>
      That is,
      <list>
	<t>the use of "address" when both the ":mime" and ":anychild" tagged arguments are omitted is the test defined
	  in <xref target='RFC5228' />,
	  i.e., it will *only* operate on top-level header fields, whether or not it is inside "foreverypart".
	</t>
	<t>
	  the use of "address" with ":mime" and no ":anychild" operates on the current MIME part only
	  (or on the top-level header fields, if outside "foreverypart").
	</t>
	<t>
	  the use of "address" with ":mime" and ":anychild" operates on the current MIME part and all of its descendants.
	</t>
	</list>
    </t>
    <t>Example:</t>
    
    <figure><artwork><![CDATA[
require ["mime", "fileinto"];

if address :mime :is :all "content-from" "tim@example.com"
{
    fileinto "INBOX.part-from-tim";
}
    ]]></artwork></figure>
    
    <t>
      In this example, any message that contains a MIME Content-From header at the top-level
      matching the text "tim@example.com" is saved to the mailbox "INBOX.part-from-tim".
    </t>
  </section>
  <section title='Test "exists"'>
    <t>
      The "exists" test is extended with the addition of the new ":mime" and ":anychild" tagged arguments and their associated options.
    </t>
    <t>
      <list style='hanging'>
        <t hangText='Usage:'>
	  exists [":mime"] [":anychild"] &lt;header-names: string-list&gt;<vspace blankLines="0" />
        </t>
      </list>
    </t>
    <t>
      When the ":mime" tagged argument is present in the "exists" test,
      the test is extended to check for the existence of MIME headers in MIME parts.
    </t>
    <t>
      The behavior of the ":anychild" tagged argument and the interaction
      with the "foreverypart" iterator is the same
      as for the extended "header" test <xref target="header_test"/>.
    </t>
    <t>
      That is,
      <list>
	<t>the use of "exists" when both the ":mime" and ":anychild" tagged arguments are omitted is the test defined
	  in <xref target='RFC5228' />,
	  i.e., it will *only* operate on top-level header fields, whether or not it is inside "foreverypart".
	</t>
	<t>
	  the use of "exists" with ":mime" and no ":anychild" operates on the current MIME part only
	  (or on the top-level header fields, if outside "foreverypart").
	</t>
	<t>
	  the use of "exists" with ":mime" and ":anychild" operates on the current MIME part and all of its descendants.
	</t>
	</list>
    </t>
    <t>Example:</t>
    
    <figure><artwork><![CDATA[
require ["mime", "fileinto"];

if exists :mime :anychild "content-md5"
{
    fileinto "INBOX.md5";
}
    ]]></artwork></figure>
    
    <t>
      In this example, any message that contains a MIME Content-MD5 header in any MIME part is saved to the mailbox "INBOX.md5".
    </t>
    
  </section>
  </section>
  <section title='Action "replace"'>
    <t>
      <list style='hanging'>
        <t hangText='Usage:'>
	  replace [":mime"] [":subject" string] [":from" string] &lt;replacement: string&gt;
	</t>
      </list>
    </t>
    <t>
      The "replace" command is defined to allow a MIME part to be replaced with the text supplied in the command.
    </t>
    <t>
      When used in the context of a "foreverypart" iterator, the MIME part to be replaced is the "current" MIME part.
      If the current MIME context is a multipart MIME part, the entire multipart MIME part is replaced,
      which would alter the MIME structure of the message by eliminating all of the children of the multipart part.
      (Replacing a non-multipart MIME part within a "foreverypart" loop context does not alter the overall message
      structure.)
      If the MIME structure is altered, the change takes effect immediately:
      the "foreverypart" iterator that is executing does not go into the no-longer existing body parts,
      and subsequent "foreverypart" iterators would use the new message structure.
    </t>
    <t>
      When used outside the context of a "foreverypart" loop, the MIME part to be replaced is the entire message.
    </t>
    <t>
      If the ":mime" parameter is not specified, the replacement string is a text/plain part in UTF-8 <xref target="RFC3629"/>.
    </t>
    <t>
      If the ":mime" parameter is specified, then the replacement string is,
      in fact, a MIME entity as defined in <xref target="RFC2045" />, Section 2.4,
      including both MIME headers and content.
    </t>
    <t>
      If the entire message is being replaced, the optional ":subject" parameter specifies
      a subject line to attach to the message that is generated.
      UTF-8 characters can be used in the string argument; implementations MUST convert the string to
      <xref target="RFC2047" />-encoded words if and only if non-ASCII characters are present.
      If the ":subject" parameter is used,
      implementations MUST preserve any previous Subject header as an Original-Subject header.
      Implementations MUST preserve all other header fields from the original
      message with the exception of those relating to the MIME structure that is being replaced.
    </t>
    <t>
      If the entire message is being replaced, as an indication that the message is no longer as
      created by the original author of the message,
      the optional ":from" parameter may be used to specify
      an alternate address to use in the From field of the message that is generated.
      The string must specify a valid <xref target="RFC5322" /> mailbox-list.
      Implementations SHOULD check the syntax and generate an error when a syntactically
      invalid ":from" parameter is specified.
      Implementations MAY also impose restrictions on what addresses can be specified in a ":from" parameter;
      it is suggested that values that fail such a validity check simply be ignored rather than causing
      the "replace" action to fail.
      If the From header is changed,
      implementations MUST preserve the previous From header as an Original-From header.
    </t>
    <t>
      Implementations that support the "editheader" extension <xref target='RFC5293'/>
      MUST ensure that any Original-Subject or Original-From headers added by the
      system cannot be modified or removed. Implementations MAY prevent the addition
      of Original-Subject and Orignal-From headers via the "editheader" extension.
    </t>
    <t>
      If ":mime" is specified and either ":subject" or ":from" is specified,
      the ":subject:" or ":from" parameter MUST be ignored.
      This SHOULD be flagged as a compilation error.
    </t>
  </section>
  <section title='Action "enclose"'>
    <t>
      <list style='hanging'>
        <t hangText='Usage:'>
          enclose &lt;:subject string&gt; &lt;:headers string-list&gt; string
        </t>
      </list>
    </t>
    <t>
      A new Sieve action command is defined to allow an entire message to be enclosed as an attachment to a new message.
      After enclosure, subsequent actions affecting the message header or content,
      as well as tests operating on the MIME structure or accessing MIME header fields,
      use the newly created message instead of the original message;
      this means that any use of a "replace" action or other similar actions should be executed before the "enclose" action.
    </t>
    <t>
      If multiple "enclose" actions are executed by a script, the message is enclosed multiple times.
      (If a Sieve script desires to choose between different enclosures, or wants to delay the enclosure to the end of the script,
      it can use variables with appropriate tests <xref target="RFC5229" />.)
    </t>
    <t>
      This action does not affect messages that are forwarded via a "redirect" action.
    </t>
    <t>
      Specifically, the original message becomes a multipart/mixed message with two parts:
      a text/plain portion with the string argument as its body,
      and a message/rfc822 portion with the original message enclosed.
      The Content-Type: header field becomes multipart/mixed.
      The optional Subject: header is specified by the ":subject" argument;
      if not present, the subject will be taken from the enclosed message.
      Any headers specified by ":headers" are copied from the old message into the new message.
      If not specified by ":headers", Date: and From: headers should be synthesized
      to reflect the current date and the user running the Sieve action.
    </t>
  </section>
  <section title='Action "extracttext"'>
    <t>
      <list style='hanging'>
        <t hangText='Usage:'>
	  extracttext [MODIFIER] [":first" number] &lt;varname: string&gt;
        </t>
      </list>
    </t>
    <t>
      The "extracttext" action may be used within the context of a "foreverypart"
      loop and is used to store text into a variable as defined by <xref target="RFC5229" />.
      Servers MUST support transcoding of any textual body part into UTF-8 for use with this action.
      This requires decoding any
      transfer encoding as well as transcoding from the indicated character set into UTF-8.
      It stores at most ":first" characters of the transcoded content of the current MIME body part in the variable
      identified by varname.
      If the ":first" parameter is not present, the whole content of the current MIME body part is stored.
      In either case, the actually stored data MAY be truncated
      to conform to implementation specific limit on variable length and/or
      on MIME body part length.
      If the transfer encoding or character set is
      unrecognized by the implementation or recognized but invalid, an
      empty string will result.
    </t>
    <t>
      If "extracttext" is used outside the context of a "foreverypart" loop,
      the action will set the variable identified by varname to the empty string.
      This SHOULD be flagged as a compilation error.
    </t>
    <t>
      Modifiers are applied on the extracted text before it is stored in
      the variable.
    </t>
  </section>

  <section title="Sieve Capability Strings">
    <t>
      A Sieve implementation that defines the "foreverypart" and "break" actions
      will advertise the capability string "foreverypart".
    </t>
    <t>
      A Sieve implementation that defines the ":mime" and ":anychild" tagged
      arguments to the "header", "address", and "exists" commands will advertise
      the capability string "mime".
    </t>
    <t>
      A Sieve implementation that defines the "replace" action will advertise the capability string "replace".
    </t>
    <t>
      A Sieve implementation that defines the "enclose" action will advertise the capability string "enclose".
    </t>
    <t>
      A Sieve implementation that defines the "extracttext" action will advertise the capability string "extracttext".
      Note that to be useful, the "extracttext" action also requires the "variables" <xref target="RFC5229" />
      and "foreverypart" capabilities.
    </t>
  </section>
  <section title="Examples">
    <section title="Example 1">
      <t>
	Consider a Sieve script to replace some of the Windows executable attachments in a
	message. (The actual list of executable types and extensions is considerably
	longer and constantly changing. The tests shown here are an example only.)
	Such a script might look like this:
      </t>
      <figure><artwork>
require [ "foreverypart", "mime", "replace" ];
foreverypart
{
  if anyof (
         header :mime :contenttype :is
           "Content-Type" "application/exe",
         header :mime :param "filename"
           :matches ["Content-Type", "Content-Disposition"] "*.com" )
  {
    replace "Executable attachment removed by user filter";
  }
}
      </artwork></figure>
    </section>
    <section title="Example 2">
      <t>
	Consider a Sieve script to warn the user about some of the executable attachment
	types. (The actual list of executable types and extensions is considerably longer and
	constantly changing. The tests shown here are an example only.) Such a script
	might look like this:
      </t>
      <figure><artwork>
require [ "foreverypart", "mime", "enclose" ];

foreverypart
{
  if header :mime :param "filename"
     :matches ["Content-Type", "Content-Disposition"]
       ["*.com", "*.exe", "*.vbs", "*.scr",
        "*.pif", "*.hta", "*.bat", "*.zip" ]
  {
    # these attachment types are executable
    enclose :subject "Warning" :text
WARNING! The enclosed message contains executable attachments.
These attachment types may contain a computer virus program
that can infect your computer and potentially damage your data.

Before clicking on these message attachments, you should verify
with the sender that this message was sent by them and not a
computer virus.
.
;
    break;
  }
}
        </artwork></figure>
    </section>
    <section title="Example 3">
      <t>
        A Sieve script to extract subject and text out of messages from the boss might look like this:
      </t>
      <figure><artwork>
require ["mime", "variables", "extracttext"];

if header :contains "from" "boss@example.org" 
{
  # :matches is used to get the value of the Subject header
  if header :matches "Subject" "*"
  {
    set "subject" "${1}";
  }

  # extract the first 100 characters of the first text/* part
  foreverypart
  {
    if header :mime :type :is "Content-Type" "text"
    {
      extracttext :first 100 "msgcontent";
      break;
    }
  }

  # if it's not a 'for your information' message
  if not header :contains "subject" "FYI:"
  {
    # do something using ${subject} and ${msgcontent}
    # such as sending a notification using a
    # notification extension
  }
}
      </artwork></figure>
    </section>
  </section>
  <section title="Acknowledgements">
    <t>Comments from members of the MTA Filters Working Group, in particular
    Ned Freed, Kjetil Torgrim Homme, Mark Mallett, Alexey Melnikov, Aaron Stone, and Nigel Swinson are gratefully acknowledged.
    </t>
  </section>
  <section title="Security Considerations">
    <t>The "enclose" action creates an entirely new message, as compared to just redirecting or forwarding the existing message.
       Therefore, any site policies applicable to message submission should be enforced.
    </t>
    <t>
      The looping specification specified here provides easier access to information
      about the message contents, which may also be achieved through other sieve tests.
      This is not believed to raise any additional security
      issues beyond those for the Sieve "envelope" and <xref target="RFC5173">"body"</xref> tests.
    </t>

    <t>
      Any change in message content may interfere with digital signature
      mechanisms that include that content in the signed material.
      In particular, using "replace" makes direct changes to the body content and
      will affect the body hash included in Domain Keys Identified Mail (DKIM)
      signatures <xref target="RFC4871"/>, or the message signature
      used for Secure MIME (S/MIME) <xref target="RFC3851" />,
      Pretty Good Privacy (PGP) <xref target="RFC1991"/> or OpenPGP <xref target="RFC4880"/>.
    </t>

    <t>
      It is not possible to examine the MIME structure of decrypted content
      in a multipart/encrypted MIME part. 
    </t>

    <t>
      When "enclose" is used on a message containing a multipart/signed MIME
      part, the Sieve implementation MUST ensure that the original message is
      copied octet-for-octet to maintain the validity of the digital
      signature.
    </t>

    <t>
       The system MUST be sized and restricted in such a manner that
       even malicious use of MIME part matching does not deny service to
       other users of the host system.
    </t>

    <t>All of the security considerations given in the base Sieve
       specification also apply to these extensions.
    </t>
  </section>
  <section title="IANA Considerations">
    <t>
      The Original-Subject and Original-From headers have been registered in the Permanent Message Header Fields registry.
    </t>
    <t>
      The following templates specify the IANA registrations of the Sieve
      extensions specified in this document.
      This information has been added to the IANA registry of Sieve Extensions
      (currently found at http://www.iana.org).
    </t>

<!--[rfced] Please note that we have shortened the URL for the IANA
registry per Section 5.1 of RFC 5226.  -->

    <section title="foreverypart capability">
    <t>
      To: iana@iana.org<vspace blankLines="0"/>
      Subject: Registration of new Sieve extension
      <vspace blankLines="1" />
        Capability name: foreverypart
      <vspace/>
        Description: adds the "foreverypart" and "break" actions for iterating through MIME parts of a message.
      <vspace blankLines="1" />
        RFC number: RFC 5703
      <vspace/>
        Contact address: The Sieve discussion list &lt;ietf-mta-filters@imc.org&gt;.
    </t>
    </section>
    <section title="mime capability">
    <t>
      To: iana@iana.org<vspace blankLines="0"/>
      Subject: Registration of new Sieve extension
      <vspace blankLines="1" />
        Capability name: mime
      <vspace/>
        Description: adds the ":mime" and ":anychild" tagged arguments to the
	"header", "address", and "exists" tests. Adds the ":type", ":subtype", ":contenttype", and ":param" options when ":mime" is used with the "header" test.
      <vspace blankLines="1" />
        RFC number: RFC 5703
      <vspace/>
        Contact address: The Sieve discussion list &lt;ietf-mta-filters@imc.org&gt;.
    </t>
    </section>
    <section title="replace capability">
    <t>
      To: iana@iana.org<vspace blankLines="0"/>
      Subject: Registration of new Sieve extension
      <vspace blankLines="1" />
        Capability name: replace
      <vspace/>
        Description: adds the "replace" action for replacing a MIME body part of a message.
      <vspace blankLines="1" />
        RFC number: RFC 5703
      <vspace/>
        Contact address: The Sieve discussion list &lt;ietf-mta-filters@imc.org&gt;.
    </t>
    </section>
    <section title="enclose capability">
    <t>
      To: iana@iana.org<vspace blankLines="0"/>
      Subject: Registration of new Sieve extension
      <vspace blankLines="1" />
        Capability name: enclose
      <vspace/>
        Description: adds the "enclose" action for enclosing a message with a wrapper.
      <vspace blankLines="1" />
        RFC number: RFC 5703
      <vspace/>
        Contact address: The Sieve discussion list &lt;ietf-mta-filters@imc.org&gt;.
    </t>
    </section>
    <section title="extracttext capability">
    <t>
      To: iana@iana.org<vspace blankLines="0"/>
      Subject: Registration of new Sieve extension
      <vspace blankLines="1" />
        Capability name: extracttext
      <vspace/>
        Description: adds the "extracttext" action for extracting text from a MIME body part.
      <vspace blankLines="1" />
        RFC number: RFC 5703
      <vspace/>
        Contact address: The Sieve discussion list &lt;ietf-mta-filters@imc.org&gt;.
    </t>
    </section>
  </section>
</middle>
<back>
<!-- references split to informative and normative -->
<references title="Normative References">
    &rfc2045;   <!-- mime part 1 -->
    &rfc2047;   <!-- mime part 3 -->
    &rfc2119;   <!-- keywords -->
    &rfc2231;   <!-- mime parameter encoding -->
    &rfc3629;	<!-- utf-8 -->
    &rfc5173;	<!-- Sieve body extension -->
    &rfc5228;	<!-- sieve -->
    &rfc5229;	<!-- Sieve variables extension -->
    &rfc5231;	<!-- relational -->
    &rfc5293;	<!-- editheader -->
    &rfc5322;   <!-- message format -->
</references>
<references title="Informative References">
    &rfc1991;	<!-- pgp -->
    &rfc3851;	<!-- s/mime -->
    &rfc4871;	<!-- dkim -->
    &rfc4880;	<!-- openpgp -->
</references>

</back>
</rfc>
