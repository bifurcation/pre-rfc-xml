<?xml version="1.0" encoding="US-ASCII" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc rfcedstyle="yes"?>
<?rfc subcompact="no"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc strict="yes"?>

<rfc number="6446" updates="3265" category="std" submissionType="IETF" ipr="pre5378Trust200902">

  <!-- ************************************************************** -->

  <!-- The FRONT section includes the title, date, authors names and -->

  <!-- addresses, abstract etc. Some of the stuff, like TOC, expiration -->

  <!-- date and the rest are automatically generated by the conversion -->

  <!-- tools (e.g., xml2rfc) -->

  <!-- ************************************************************** -->

  <front>
    <title abbrev="Event Rate Control">Session Initiation Protocol (SIP) Event
    Notification Extension for Notification Rate Control</title>

    <author fullname="Aki Niemi" initials="A" surname="Niemi">
      <organization>Nokia</organization>

      <address>
        <postal>
          <street>P.O. Box 407</street>

          <city>NOKIA GROUP</city>

          <region>FIN</region>

          <code>00045</code>

          <country>Finland</country>
        </postal>

        <phone>+358 50 389 1644</phone>

        <email>aki.niemi@nokia.com</email>
      </address>
    </author>

    <author fullname="Krisztian Kiss" initials="K" surname="Kiss">
      <organization>Nokia</organization>

      <address>
        <postal>
          <street>200 South Mathilda Ave</street>

          <city>Sunnyvale</city>

          <region>CA</region>

          <code>94086</code>

          <country>US</country>
        </postal>

        <phone>+1 650 391 5969</phone>

        <email>krisztian.kiss@nokia.com</email>
      </address>
    </author>

    <author fullname="Salvatore Loreto" initials="S" surname="Loreto">
      <organization>Ericsson</organization>

      <address>
        <postal>
          <street>Hirsalantie 11</street>

          <code>02420</code>

          <city>Jorvas</city>

          <country>Finland</country>
        </postal>

        <email>salvatore.loreto@ericsson.com</email>
      </address>
    </author>

    <date month="December" year="2011" />

    <area>General</area>

    <keyword>SIP</keyword>

    <keyword>events</keyword>

    <keyword>rate control</keyword>

    <abstract>
      <t>This document specifies mechanisms for adjusting the rate of Session
      Initiation Protocol (SIP) event notifications. These mechanisms can be
      applied in subscriptions to all SIP event packages. This document
      updates RFC 3265.</t>
    </abstract>
  </front>

  <!-- ************************************************************** -->

  <!-- The MIDDLE section includes the actual draft contents -->

  <!-- ************************************************************** -->

  <middle>
    <!-- Introduction -->

    <section anchor="intro" title="Introduction" toc="default">
      <t>The <xref format="default" pageno="false" target="RFC3265">SIP events
      framework</xref> defines a generic framework for subscriptions to and
      notifications of events related to SIP systems. This framework defines
      the methods SUBSCRIBE and NOTIFY, and introduces the concept of an event
      package, which is a concrete application of the SIP events framework to
      a particular class of events.</t>

      <t>One of the things the SIP events framework mandates is that each
      event package specification defines an absolute maximum on the rate at
      which notifications are allowed to be generated by a single notifier.
      Such a limit is provided in order to reduce network load.</t>

      <t>All of the existing event package specifications include a
recommendation for the maximum notification rate, ranging from once in every five
      seconds <xref format="default" pageno="false" target="RFC3856"></xref>,
      <xref format="default" pageno="false" target="RFC3680"></xref>, <xref
      format="default" pageno="false" target="RFC3857"></xref> to once per
      second <xref format="default" pageno="false"
      target="RFC3842"></xref>.</t>

      <t>Per the SIP events framework, each event package specification is
      allowed to define additional throttle mechanisms that allow the
      subscriber to further limit the rate of event notification. So far, none
      of the event package specifications have defined such a mechanism.</t>

      <t>The <xref format="default" pageno="false" target="RFC4662">resource
      list extension</xref> to the SIP events framework also deals with rate
      limiting of event notifications. The extension allows a subscriber to
      subscribe to a heterogeneous list of resources with a single SUBSCRIBE
      request, rather than having to install a subscription for each resource
      separately. The event list subscription also allows rate limiting, or
      throttling of notifications, by means of the Resource List Server (RLS)
      buffering notifications of resource state changes, and sending them in
      batches. However, the event list mechanism provides no means for the
      subscriber to set the interval for the throttling.</t>

      <t>Some event packages are also interested in specifying an absolute or
      an adaptive minimum rate at which notifications need to be generated by
      a notifier. This helps the subscriber to effectively use different
      trigger criteria within a subscription to eliminate unnecessary
      notifications but at the same time make sure that the current event
      state is periodically received.</t>

      <t>This document defines an extension to the SIP events framework by
      defining the following three Event header field parameters that allow a
      subscriber to set a maximum, a minimum, and an adaptive minimum rate of
      notifications generated by the notifier:</t>

      <t><list style="hanging">
          <t hangText="max-rate:">specifies a maximum number of notifications
          per second.</t>

          <t hangText="min-rate:">specifies a minimum number of notifications
          per second.</t>

          <t hangText="adaptive-min-rate:">specifies an adaptive minimum
          number of notifications per second.</t>
        </list></t>

      <t>These mechanisms are applicable to any event subscription, both
      single event subscription and event list subscription. A notifier
      compliant to this specification will adjust the rate at which it
      generates notifications.</t>
    </section>

    <section title="Definitions and Document Conventions" toc="default">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref format="default"
      pageno="false" target="RFC2119">RFC 2119</xref> and indicate requirement
      levels for compliant implementations. <list style="empty">
          <t>Indented passages such as this one are used in this document to
          provide additional information and clarifying text. They do not
          contain normative protocol behavior.</t>
        </list></t>
    </section>

    <section anchor="overview" title="Overview" toc="default">
      <section anchor="usecase"
               title="Use Case for Limiting the Maximum Rate of Notifications"
               toc="default">
        <t>A presence client in a mobile device contains a list of 100 buddies
        or presentities. In order to decrease the processing and network load
        of watching 100 presentities, the presence client has employed an
        RLS with the list of buddies, and therefore
        only needs a single subscription to the RLS to receive
        notifications of the presence state of the resource list.</t>

        <t>In order to control the buffer policy of the RLS, the presence
        client sets a maximum rate of notifications. The RLS will buffer
        notifications that are generated faster than they are allowed to be
        sent due to the maximum rate and batch all of the buffered state
        changes together in a single notification. The maximum rate applies to
        the overall resource list, which means that there is a hard cap
        imposed by the maximum rate to the number of notifications per second
        that the presence client can expect to receive.</t>

        <t>The presence client can also modify the maximum rate of
        notifications during the lifetime of the subscription. For example, if
        the mobile device detects inactivity from the user for a period of
        time, the presence client can simply pause notifications by choosing a
        "max-rate" parameter that allows only a single notification for the
        remainder of the subscription lifetime. When the user becomes active
        again, the presence client can resume the stream of notifications by
        re-subscribing with a "max-rate" parameter set to the earlier-used
        value. Application of the mechanism defined by <xref format="default"
        pageno="false" target="RFC5839">RFC 5839</xref> can also eliminate the
        transmission of a (full-state) notification carrying the latest
        resource state to the presence client after a subscription
        refresh.</t>
      </section>

      <section anchor="usecase-force"
               title="Use Case for Setting a Minimum Rate for Notifications"
               toc="default">
        <t>A location application is monitoring the movement of a target. In
        order to decrease the processing and network load, the location
        application has made a subscription to a Location Server with a set of
        location filters <xref format="default" pageno="false"
        target="RFC6447"></xref> that specify trigger
        criteria, e.g., to send an update only when the target has moved at
        least n meters. However, the application is also interested in
        receiving the current state periodically, even if the state of the
        target has not changed enough to satisfy any of the trigger criteria,
        e.g., has not moved at least n meters within the period.</t>

        <t>The location application sets a minimum rate of notifications and
        includes it in the subscription sent to the Location Server.&nbsp;The
        "min-rate" parameter indicates the minimum number of notifications per
        second the notifier needs to generate.</t>

        <t>The location application can modify the minimum rate of
        notifications during the lifetime of the subscription. For example,
        when the subscription to the movement of a target is made, the
        notifier may not have the location information available. Thus, the
        first notification might be empty or certain values might be absent.
        An important use case is placing constraints on when complete state
 should be provided after creating the subscription. Once state
 is acquired and the second notification is sent, the subscriber updates
        or changes the "min-rate" parameter to a more sensible value. This
        update can be performed in the response to the notification that
        contains the complete state information.</t>
      </section>

      <section anchor="usecase-Average"
               title="Use Case for Specifying an Adaptive Minimum Rate of Notifications"
               toc="default">
        <t>The minimum rate mechanism introduces a static and instantaneous
        rate control without the functionality to increase or decrease the
        notification rate adaptively. However, there are some applications
        that would work better with an adaptive minimum rate control.</t>

        <t>A location application is monitoring the movement of a target. In
        order to decrease the processing in the application, the location
        application wants to make a subscription that dynamically decreases
        the minimum rate of notifications if the target has sent out several
        notifications recently. However, if there have been only few
        recent notifications by the target, the location application wants the
        minimum rate of notifications to increase.
</t>

        <t>The location application sets an adaptive minimum rate of
        notifications and includes it in the subscription sent to the Location
        Server. The "adaptive-min-rate" parameter value is used by the
        notifier to dynamically calculate the actual maximum time between two
        notifications. In order to dynamically calculate the maximum time, the
        notifier takes into consideration the rate at which notifications have
        been sent recently. In the adaptive minimum rate mechanism, the
        notifier can increase or decrease the notification rate compared to
        the minimum rate mechanism based on the recent number of notifications
        sent out in the last period.
<!-- [rfced] We are having trouble parsing this sentene:

        In the adaptive minimum rate mechanism, the
        notifier can increase or decrease the notification rate compared to
        the minimum rate mechanism based on the recent number of notifications
        sent out in the last period.

Perhaps this could be rephrased as:
   Based on the number of notifications sent out in the previous period, the
   adaptive minimum rate mechanism allows the notifier to increase 
   or decrease the notifification rate set by the minimum rate mechanism.
-->

</t>

        <t>The location application can also modify the "adaptive-min-rate"
        parameter during the lifetime of the subscription.</t>
      </section>

      <section anchor="requirements" title="Requirements" toc="default">
        <t><list style="format REQ%d:">
            <t>The subscriber must be able to set a maximum rate of
            notifications in a specific subscription.</t>

            <t>The subscriber must be able to set a minimum rate of
            notifications in a specific subscription.</t>

            <t>The subscriber must be able to set an adaptive minimum rate of
            notifications in a specific subscription, which adjusts the
            minimum rate of notifications based on a moving average.</t>

            <t>It must be possible to apply the maximum rate, the minimum rate,
            and the adaptive minimum rate mechanisms all together, or in any
            combination, in a specific subscription.</t>

            <t>It must be possible to use any of the different rate control
            mechanisms in subscriptions to any events.</t>

            <t>It must be possible to use any of the different rate control
            mechanisms together with any other event filtering mechanisms.</t>

            <t>The notifier must be allowed to use a policy in which the
            maximum rate, minimum rate, and adaptive minimum rate parameters
            are adjusted from the value given by the subscriber. <list
                style="empty">
                <t>For example, due to congestion, local policy at the
                notifier could temporarily dictate a policy that in effect
                further decreases the maximum rate of notifications. In
                another example, the notifier could increase the subscriber-proposed maximum rate so that at least one notification is
                generated during the remainder of the subscription
                lifetime.</t>
              </list></t>

            <t>The different rate control mechanisms must address corner cases
            for setting the notification rates appropriately. At a minimum,
            the mechanisms must address the situation in which the time between
            two notifications exceeds the subscription duration and
            should provide procedures for avoiding this situation.</t>

            <t>It must be possible to invoke, modify, or remove the different
rate control mechanisms in the course of an active
            subscription.</t>

            <t>The different rate control mechanisms must allow for the
            application of authentication and integrity protection mechanisms
            to subscriptions invoking that mechanism.</t>
          </list></t>
      </section>
    </section>

    <section anchor="general-ops" title="Basic Operations" toc="default">
      <section anchor="gen-ops-sub" title="Subscriber Behavior" toc="default">
        <t>In general, a subscriber generates SUBSCRIBE
        requests and processes NOTIFY requests as described in <xref
        format="default" pageno="false" target="RFC3265">RFC 3265</xref>.</t>

        <t>A subscriber that wants to have a maximum, minimum, or adaptive minimum rate of event notifications in a specific event subscription
        does so by including a "max-rate", "min-rate", or "adaptive-min-rate"
        Event header field parameter(s) as part of the SUBSCRIBE request.</t>

        <t>A subscriber that wants to update a previously agreed event rate
        control parameter does so by including the updated "max-rate",
        "min-rate", or "adaptive-min-rate" Event header field parameter(s) as
        part of a subsequent SUBSCRIBE request or a 2xx response to the NOTIFY
        request. If the subscriber does not include at least one of the
        "max-rate", "min-rate", or "adaptive-min-rate" header field parameters
        in the most recent SUBSCRIBE request in a given dialog, the subscriber
        MUST NOT include an Event header field with any of those parameters in
        a 2xx response to a NOTIFY request in that dialog.</t>
      </section>

      <section title="Notifier Behavior" toc="default">
        <t>In general, a notifier processes SUBSCRIBE
        requests and generates NOTIFY requests as described in <xref
        format="default" pageno="false" target="RFC3265">RFC 3265</xref>.</t>

        <t>A notifier that supports the different rate control mechanisms MUST
        adjust its rate of notification according to the rate control values
        agreed with the subscriber. If the notifier needs to lower the
        subscription expiration value, or if a local policy or other
        implementation-determined constraint at the notifier cannot satisfy
        the rate control request, then the notifier can adjust (i.e., increase
        or decrease) appropriately the subscriber-requested rate control
        values. The notifier MUST reflect back the possibly adjusted rate
        control values in a "max-rate", "min-rate", or "adaptive-min-rate"
        Subscription-State header field parameter of the subsequent NOTIFY
        requests.</t>
      </section>
    </section>

    <section anchor="operation-max"
             title="Operation of the Maximum Rate Mechanism" toc="default">
      <section anchor="negotiation" title="Subscriber Behavior" toc="default">
        <t>A subscriber that wishes to apply a maximum rate to notifications
        in a subscription MUST construct a SUBSCRIBE request that includes the
        "max-rate" Event header field parameter. This parameter specifies the
        requested maximum number of notifications per second. The value of
        this parameter is a positive real number given by a finite decimal
        representation.
<list>
<t>
Note that the grammar in section 9.2 constrains this value to be between
0.0000000001 and 99.9999999999. Zero is not an allowed value.
</t>
</list>
</t>


        <t><list style="empty">
            <t>Note that the witnessed notification rate may not conform to
            the "max-rate" value for a number of reasons. For example, network
            jitter and retransmissions may result in the subscriber receiving
            the notifications more frequently than the "max-rate" value
            recommends.</t>
          </list>A subscriber that wishes to update the previously agreed
        maximum rate of notifications MUST include the updated "max-rate"
        Event header field parameter in a subsequent SUBSCRIBE request or a
        2xx response to the NOTIFY request.</t>

        <t>A subscriber that wishes to remove the maximum rate control from
        notifications MUST indicate so by not including a "max-rate" Event
        header field parameter in a subsequent SUBSCRIBE request or a 2xx
        response to the NOTIFY request.</t>

        <t>There are two main consequences for the subscriber when applying
        the maximum rate mechanism: state transitions may be lost and event
        notifications may be delayed. If either of these side effects
        constitute a problem to the application that utilizes the event
        notifications, developers are instructed not to use the mechanism.</t>
      </section>

      <section title="Notifier Behavior" toc="default">
        <t>A notifier that supports the maximum rate mechanism MUST extract
        the value of the "max-rate" Event header parameter from a SUBSCRIBE
        request or a 2xx response to the NOTIFY request and use it as the
        suggested maximum number of notifications per second. This value can
        be adjusted by the notifier, as defined in <xref format="default"
        pageno="false" target="selectingmax"></xref>.</t>

        <t>A compliant notifier MUST reflect back the possibly adjusted
        maximum rate of notifications in a "max-rate" Subscription-State
        header field parameter of the subsequent NOTIFY requests. The
        indicated "max-rate" value is adopted by the notifier, and the
        notification rate is adjusted accordingly.</t>

        <t>A notifier that does not understand this extension will not reflect
        the "max-rate" Subscription-State header field parameter in the NOTIFY
        requests; the absence of this parameter indicates to the subscriber
        that no rate control is supported by the notifier.</t>

        <t>A compliant notifier MUST NOT generate a notification if the
        interval since the most recent notification is less than the
        reciprocal value of the "max-rate" parameter, except when generating
        the notification either upon receipt of a SUBSCRIBE request, when the
        subscription state is changing from "pending" to "active" state, or
        upon termination of the subscription (the last notification).</t>

        <t>When a local policy dictates a maximum rate for notifications, a
        notifier will not generate notifications more frequently than the
        local policy maximum rate, even if the subscriber is not asking for
        maximum rate control. The notifier MAY inform the subscriber about
        such a local policy maximum rate using the "max-rate" Subscription-State
        header field parameter included in subsequent NOTIFY requests.</t>

        <t>Retransmissions of NOTIFY requests are not affected by the maximum
        rate mechanism, i.e., the maximum rate mechanism only applies to the
        generation of new transactions. In other words, the maximum rate
        mechanism does not in any way break or modify the normal
        retransmission mechanism specified in <xref format="default"
        pageno="false" target="RFC3261">RFC 3261</xref>.</t>
      </section>

      <section anchor="selectingmax" title="Selecting the Maximum Rate"
               toc="default">
        <t>Special care needs to be taken when selecting the maximum rate. For
        example, the maximum rate could potentially set a minimum time value
        between notifications that exceeds the subscription expiration value.
        Such a configuration would effectively quench the notifier, resulting
        in exactly two notifications being generated. If the subscriber
        requests a maximum rate that would result in no notification before
        the subscription expiration, the notifier MUST increase the maximum
        rate and set it to the reciprocal value of the remaining subscription expiration
        time. According to <xref format="default" pageno="false"
        target="RFC3265">RFC 3265</xref>, the notifier may also shorten the
        subscription expiry anytime during an active subscription. If the
        subscription expiry is shortened during an active subscription, the
        notifier MUST also increase the "max-rate" value and set it to the
        reciprocal value of the reduced subscription expiration time.</t>

        <t>In some cases, it makes sense to temporarily pause the notification stream on an
        existing subscription dialog without terminating
        the subscription, e.g., due to inactivity on the application user
        interface. Whenever a subscriber discovers the need to perform the
        notification pause operation, it SHOULD set the maximum rate to the
        reciprocal value of the remaining subscription expiration value. 
<!-- [rfced] We believe the following sentence is a bit awkward.  Please 
consider whether the suggested text correctly conveys the intended meaning.  If 
not, please consider how/if the sentence may be updated.

Original:
        Whenever a subscriber discovers the need to perform the
        notification pause operation, it SHOULD set the maximum rate to the
        reciprocal value of the remaining subscription expiration value.

Suggested:
        Whenever a subscriber needs to pause the notification stream,
        it SHOULD set the maximum rate to the
        reciprocal value of the remaining subscription expiration value.
-->

This
        results in receiving no further notifications until the subscription
        expires or the subscriber sends a SUBSCRIBE request resuming
        notifications.</t>

        <t>The notifier MAY decide to increase or decrease the proposed
        "max-rate" value by the subscriber based on its local policy, static
        configuration, or other implementation-determined constraints. In
        addition, different event packages MAY define other constraints
        for the allowed maximum rate ranges. Such constraints are out of the
        scope of this specification.</t>
      </section>

      <section anchor="model"
               title="The Maximum Rate Mechanism for the Resource List Server"
               toc="default">
        <t>When applied to a <xref format="default" pageno="true"
        target="RFC4662">list subscription</xref>, the maximum rate mechanism
        has some additional considerations. Specifically, the maximum rate
        applies to the aggregate notification stream resulting from the list
        subscription, rather than explicitly controlling the notification of
        each of the implied constituent events. Moreover, the RLS can use the
        maximum rate mechanism on its own to control the rate of the back-end
        subscriptions to avoid overflowing its buffer.</t>

        <t>The notifier is responsible for sending event notifications
        upon state changes of the subscribed resource. We can model the
        notifier as consisting of four components: the event state
        resource(s), the RLS (or any other notifier), a
        notification buffer, and finally the subscriber, or watcher of the
        event state, as shown in <xref format="default" pageno="false"
        target="notifier"></xref>.</t>

        <figure anchor="notifier"
                title="Model for the RLS Supporting Event Rate Control">
          <artwork align="left" alt="" height="" name="" type="" width=""
                   xml:space="preserve"><![CDATA[
                    +--------+
                    | Event  |
     +--------+     |Resource|     +--------+
     | Event  |     +--------+     | Event  |
     |Resource|         |          |Resource|
     +---.=---+         |          +---=----+
           `-..         |         _.--'
               ``-._    |    _.--'
                    +'--'--'-+
                    |Resource|
                    |  List  |
                    | Server |
                    +---.----+
                        |
                        |
                     )--+---(
                     |      |       .--------.
                     |Buffer|<======'max-rate|
                     |      |       `--------'
                     )--.---(
                        |
                        |
                    .---+---.
                    | Event |
                    |Watcher|
                    `-------'
      
      ]]></artwork>
        </figure>

        <t>In short, the RLS reads event state changes from the event state
        resource, either by creating a back-end subscription or by other
        means; it packages them into event notifications and submits them into
        the output buffer. The rate at which this output buffer drains is
        controlled by the subscriber via the maximum rate mechanism. When a
        set of notifications are batched together, the way in which
        overlapping resource state is handled depends on the type of the
        resource state: <list style="empty">
            <t>In theory, there are many buffer policies that the notifier
            could implement. However, we only concentrate on two practical
            buffer policies in this specification, leaving additional ones for
            further study and out of the scope of this specification. These
            two buffer policies depend on the mode in which the notifier is
            operating.</t>
          </list> <list style="hanging">
            <t hangText="Full-state:">Last (most recent) full-state
            notification of each resource is sent out, and all others in the
            buffer are discarded. This policy applies to those event packages
            that carry full-state notifications.</t>

            <t hangText="Partial-state:">The state deltas of each buffered
            partial notification per resource are merged, and the resulting
            notification is sent out. This policy applies to those event
            packages that carry partial-state notifications.</t>
          </list></t>
      </section>

      <section anchor="bufferpolicy" title="Buffer Policy Description"
               toc="default">
        <section anchor="partial" title="Partial-State Notifications"
                 toc="default">
          <t>With partial notifications, the notifier needs to maintain a
          separate buffer for each subscriber since each subscriber may have a
          different value for the maximum rate of notifications. The notifier
          will always need to keep both a copy of the current full state of
          the resource F, as well as the last successfully communicated full
          state view F' of the resource in a specific subscription. The
          construction of a partial notification then involves creating a
          difference of the two states, and generating a notification that
          contains that difference.</t>

          <t>When the maximum rate mechanism is applied to the subscription,
          it is important that F' be replaced with F only when the difference
          of F and F&rsquo; is already included in a partial-state
          notification to the subscriber allowed by the maximum rate
          mechanism. Additionally, the notifier implementation SHOULD check to
          see that the size of an accumulated partial state notification is
          smaller than the full state, and if not, the notifier SHOULD send
          the full-state notification instead.</t>
        </section>

        <section anchor="full" title="Full-State Notifications" toc="default">
          <t>With full-state notifications, the notifier only needs to keep
          the full state of the resource, and when that changes, send the
          resulting notification to the subscriber.</t>

          <t>When the maximum rate mechanism is applied to the subscription,
          the notifier receives the state changes of the resource and
          generates a notification. If there is a pending notification, the
          notifier simply replaces that notification with the new
          notification, discarding the older state.</t>
        </section>
      </section>

      <section anchor="estimates" title="Estimated Bandwidth Savings"
               toc="default">
        <t>It is difficult to estimate the total bandwidth savings accrued by
        using the maximum rate mechanism over a subscription, since such
        estimates will vary depending on the usage scenarios. However, it is
        easy to see that given a subscription where several full-state
        notifications would have normally been sent in any given interval set
        by the "max-rate" parameter, only a single notification is sent during
        the same interval when using the maximum rate mechanism, yielding
        bandwidth savings of several times the notification size.</t>

        <t>With partial-state notifications, drawing estimates is further
        complicated by the fact that the states of consecutive updates may or
        may not overlap. However, even in the worst-case scenario, where each
        partial update is to a different part of the full state, a rate
        controlled notification merging all of these n partial states together
        should at a maximum be the size of a full-state update. In this case,
        the bandwidth savings are approximately n times the size of the header
        fields of the NOTIFY request.</t>

        <t>It is also true that there are several compression schemes
        available that have been designed to save bandwidth in SIP, e.g.,
        <xref format="default" pageno="false" target="RFC3320">SigComp</xref>
        and <xref format="default" pageno="false" target="RFC3943">TLS
        compression</xref>. However, such compression schemes are
        complementary rather than competing mechanisms to the maximum rate
        mechanism. After all, they can both be applied simultaneously.</t>
      </section>
    </section>

    <section anchor="operation-min"
             title="Operation of the Minimum Rate Mechanism" toc="default">
      <section anchor="negotiation-Force" title="Subscriber Behavior"
               toc="default">
        <t>A subscriber that wishes to apply a minimum rate to notifications
        in a subscription MUST construct a SUBSCRIBE request that includes the
        "min-rate" Event header field parameter. This parameter specifies the
        requested minimum number of notifications per second. The value of
        this parameter is a positive real number given by a finite decimal
        representation.
<list>
<t>
Note that the grammar in section 9.2 constrains this value to be between
0.0000000001 and 99.9999999999. Zero is not an allowed value.
</t>
</list>
</t>

        <t>A subscriber that wishes to update the previously agreed minimum
        rate of notifications MUST include the updated "min-rate" Event header
        field parameter in a subsequent SUBSCRIBE request or a 2xx response to
        the NOTIFY request.</t>

        <t>A subscriber that wishes to remove the minimum rate control from
        notifications MUST indicate so by not including a "min-rate" Event
        header field parameter in a subsequent SUBSCRIBE request or a 2xx
        response to the NOTIFY request.</t>

        <t>The main consequence for the subscriber when applying the minimum
        rate mechanism is that it can receive a notification even if nothing
        has changed in the current state of the notifier. However, <xref
        format="default" pageno="false" target="RFC5839">RFC 5839</xref>
        defines a mechanism that allows suppression of a NOTIFY request or a
        NOTIFY request body if the state has not changed.</t>
      </section>

      <section title="Notifier Behavior" toc="default">
        <t>A notifier that supports the minimum rate mechanism MUST extract
        the value of the "min-rate" Event header field parameter from a
        SUBSCRIBE request or a 2xx response to the NOTIFY request and use it
        as the suggested minimum number of notifications per second. This
        value can be adjusted by the notifier, as defined in <xref
        format="default" pageno="false" target="selectingmin"></xref>.</t>

        <t>A compliant notifier MUST reflect back the possibly adjusted
        minimum rate of notifications in a "min-rate" Subscription-State
        header field parameter of the subsequent NOTIFY requests. The
        indicated "min-rate" value is adopted by the notifier, and the
        notification rate is adjusted accordingly.</t>

        <t>A notifier that does not understand this extension will not
        reflect the "min-rate" Subscription-State header field parameter in
        the NOTIFY requests; the absence of this parameter indicates to the
        subscriber that no rate control is supported by the notifier.</t>

        <t>A compliant notifier MUST generate notifications when state changes
        occur or when the time since the most recent notification exceeds the
        reciprocal value of the "min-rate" parameter. Depending on the event
        package and subscriber preferences indicated in the SUBSCRIBE request,
        the NOTIFY request sent as a result of a minimum rate mechanism MUST
        contain either the current full state or the partial state showing the
        difference between the current state and the last successfully
        communicated state. If the subscriber and the notifier support the
        procedures in <xref format="default" pageno="false"
        target="RFC5839">RFC 5839</xref>, the complete NOTIFY request or the
        NOTIFY request body can be suppressed if the state has not changed
        from the previous notification.</t>

        <t>Retransmissions of NOTIFY requests are not affected by the minimum
        rate mechanism, i.e., the minimum rate mechanism only applies to the
        generation of new transactions. In other words, the minimum rate
        mechanism does not in any way break or modify the normal
        retransmission mechanism.</t>
      </section>

      <section anchor="selectingmin" title="Selecting the Minimum Rate"
               toc="default">
        <t>The minimum rate mechanism can be used to generate a lot of
        notifications, creating additional processing load for the notifier.
        Some of the notifications may also be unnecessary possibly repeating
        already known state information to the subscriber. It is difficult to
        provide generic guidelines for the acceptable minimum rate value
        ranges; however, the subscriber SHOULD request the lowest possible
        minimum rate. Different event packages MAY define other
        constraints for the allowed minimum rate values. Such constraints are
        out of the scope of this specification.</t>

        <t>The notifier MAY decide to increase or decrease the proposed
        "min-rate" value by the subscriber based on its local policy, static
        configuration, or other implementation-determined constraints.</t>
      </section>
    </section>

    <section anchor="operation-average"
             title="Operation of the Adaptive Minimum Rate Mechanism"
             toc="default">
      <section anchor="negotiation-Average" title="Subscriber Behavior"
               toc="default">
        <t>A subscriber that wishes to apply an adaptive minimum rate to
        notifications in a subscription MUST construct a SUBSCRIBE request
        that includes the "adaptive-min-rate" Event header field parameter.
        This parameter specifies an adaptive minimum number of notifications
        per second. The value of this parameter is a positive real number
        given by a finite decimal representation.
<list>
<t>
Note that the grammar in section 9.2 constrains this value to be between
0.0000000001 and 99.9999999999. Zero is not an allowed value.
</t>
</list>
</t>

        <t>A subscriber that wishes to update the previously agreed adaptive
        minimum rate of notifications MUST include the updated
        "adaptive-min-rate" Event header field parameter in a subsequent
        SUBSCRIBE request or a 2xx response to the NOTIFY request.</t>

        <t>A subscriber that wishes to remove the adaptive minimum rate
        control from notifications MUST indicate so by not including an
        "adaptive-min-rate" Event header field parameter in a subsequent
        SUBSCRIBE request or a 2xx response to the NOTIFY request.</t>

        <t>The main consequence for the subscriber when applying the adaptive
        minimum rate mechanism is that it can receive a notification, even if
        nothing has changed in the current state of the notifier. However,
        <xref format="default" pageno="false" target="RFC5839">RFC 5839</xref>
        defines a mechanism that allows suppression of a NOTIFY request or a
        NOTIFY request body if the state has not changed.</t>
      </section>

      <section title="Notifier Behavior" toc="default">
        <t>A notifier that supports the adaptive minimum rate mechanism MUST
        extract the value of the "adaptive-min-rate" Event header parameter
        from a SUBSCRIBE request or a 2xx response to the NOTIFY request and
        use it to calculate the actual maximum time between two notifications,
        as defined in <xref format="default" pageno="false"
        target="Calc_timeout"></xref>.</t>

        <t>The "adaptive-min-rate" value can be adjusted by the notifier, as
        defined in <xref format="default" pageno="false"
        target="selectingave"></xref>.</t>

        <t>A compliant notifier MUST reflect back the possibly adjusted
        adaptive minimum rate of notifications in an "adaptive-min-rate"
        Subscription-State header field parameter of the subsequent NOTIFY
        requests. The indicated "adaptive-min-rate" value is adopted by the
        notifier, and the notification rate is adjusted accordingly.</t>

        <t>A notifier that does not understand this extension will not reflect
        the "adaptive-min-rate" Subscription-State header parameter in the
        NOTIFY requests; the absence of this parameter indicates to the
        subscriber that no rate control is supported by the notifier.</t>

        <t>A compliant notifier MUST generate notifications when state changes
        occur or when the time since the most recent notification exceeds the
        value calculated using the formula defined in <xref format="default"
        pageno="false" target="Calc_timeout"></xref>. Depending on the event
        package and subscriber preferences indicated in the SUBSCRIBE request,
        the NOTIFY request sent as a result of a minimum rate mechanism MUST
        contain either the current full state or the partial state showing the
        difference between the current state and the last successfully
        communicated state. If the subscriber and the notifier support the
        procedures in <xref format="default" pageno="false"
        target="RFC5839">RFC 5839</xref>, the complete NOTIFY request or the
        NOTIFY request body can be suppressed if the state has not changed
        from the previous notification.</t>

        <t>The adaptive minimum rate mechanism is implemented as follows:</t>

        <t><list style="format %d)">
            <t>When a subscription is first created, the notifier creates a
            record ("count" parameter) that keeps track of the number of
            notifications that have been sent in the "period". The "count"
            parameter is initialized to contain a history of having sent a
            "period * adaptive-min-rate" number of notifications for the
            "period".</t>

            <t>The "timeout" value is calculated according to the equation
            given in <xref format="default" pageno="false"
            target="Calc_timeout"></xref>.</t>

            <t>If the timeout period passes without a NOTIFY request being
            sent in the subscription, then the current resource state is sent
            (subject to any filtering associated with the subscription).</t>

            <t>Whenever a NOTIFY request is sent (regardless of whether due to
            a "timeout" event or a state change), the notifier updates the
            notification history record stored in the "count" parameter,
            recalculates the value of "timeout", and returns to step 3.</t>
          </list></t>

        <t>Retransmissions of NOTIFY requests are not affected by the timeout,
        i.e., the timeout only applies to the generation of new transactions.
        In other words, the timeout does not in any way break or modify the
        normal retransmission mechanism specified in <xref format="default"
        pageno="false" target="RFC3261">RFC 3261</xref>.</t>
      </section>

      <section anchor="selectingave"
               title="Selecting the Adaptive Minimum Rate" toc="default">
        <t>The adaptive minimum rate mechanism can be used to generate a lot
        of notifications, creating additional processing load for the
        notifier. Some of the notifications may also be unnecessary, possibly
        repeating already known state information to the subscriber. It is
        difficult to provide generic guidelines for the acceptable adaptive
        minimum rate value ranges; however, the subscriber SHOULD request
        the lowest possible adaptive minimum rate value. Different event
        packages MAY define other constraints for the allowed adaptive
        minimum rate values. Such constraints are out of the scope of this
        specification.</t>

        <t>The notifier MAY decide to increase or decrease the proposed
        "adaptive-min-rate" value based on its local policy, static
        configuration, or other implementation-determined constraints.</t>
      </section>

      <section anchor="Calc_timeout" title="Calculating the Timeout"
               toc="default">
        <t>The formula used to vary the absolute pacing in a way that will
        meet the adaptive minimum rate requested over the period is given in
        equation (1): <figure>
            <artwork><![CDATA[
timeout = count / ((adaptive-min-rate ^ 2) * period)              (1)
           
           ]]></artwork>
          </figure></t>

        <t>The output of the formula, "timeout", is the time to the next
        notification, expressed in seconds. The formula has three inputs:</t>

        <t><list style="hanging">
            <t hangText="adaptive-min-rate:">The value of the
            "adaptive-min-rate" parameter conveyed in the Subscription-State
            header field.</t>

            <t hangText="period:">The rolling average period, in seconds. The
            granularity of the values for the "period" parameter is set by
            local policy at the notifier; however, the notifier MUST choose a
            value greater than the reciprocal value of the "adaptive-min-rate"
            parameter. It is also RECOMMENDED that the notifier choose a
            "period" parameter several times larger than reciprocal value of
            the "adaptive-min-rate" parameter in order to maximize the
            effectiveness of equation (1). It is an implementation
            decision whether the notifier uses the same value of the "period"
            parameter for all subscriptions or individual values for each
            subscription.</t>

            <t hangText="count:">The number of notifications that have been
            sent during the last "period" of seconds, not including any
            retransmissions of requests.</t>
          </list></t>

        <t>In case both the maximum rate and the adaptive minimum rate
        mechanisms are used in the same subscription, the formula used to
        dynamically calculate the timeout is given in equation (2):</t>

        <t><figure>
            <artwork><![CDATA[
timeout = MAX[(1/max-rate), count/((adaptive-min-rate ^ 2)*period)] (2)

          ]]></artwork>
          </figure></t>

        <t><list style="hanging">
            <t hangText="max-rate:">The value of the "max-rate" parameter
            conveyed in the Subscription-State header field.</t>
          </list></t>

        <t>The formula in (2) makes sure that for all the possible values of
        the "max-rate" and "adaptive-min-rate" parameters, with
        "adaptive-min-rate" &lt; "max-rate", the timeout never results in a
        lower value than the reciprocal value of the "max-rate" parameter.</t>

        <t>In some situations, it may be beneficial for the notifier to achieve
        an adaptive minimum rate in a different way than the algorithm
        detailed in this document allows. However, the notifier MUST comply
        with any "max-rate" or "min-rate" parameters that have been
        negotiated.</t>
      </section>
    </section>

    <section anchor="usag"
             title="Usage of the Maximum Rate, Minimum Rate, and Adaptive Minimum Rate Mechanisms in a Combination"
             toc="default">
      <t>Applications can subscribe to an event package using all the rate
      control mechanisms individually, or in combination; in fact there is no
      technical incompatibility among them. However, there are some
      combinations of the different rate control mechanisms that make little
      sense to be used together. This section lists all the combinations that
      are possible to insert in a subscription; the ability to use each
      combination in a subscription is also analyzed.</t>

      <t><list style="hanging">
          <t hangText="maximum rate and minimum rate:">This combination allows
          a reduced notification rate, but at the same time assures the
          reception of periodic notifications.</t>

          <t>A subscriber SHOULD choose a "min-rate" value lower than the
          "max-rate" value, otherwise, the notifier MUST adjust the subscriber
          provided "min-rate" value to a value equal to or lower than the
          "max-rate" value.</t>

          <t hangText="maximum rate and adaptive minimum rate:">It works in a
          similar way as the combination above, but with the difference that
          the interval at which notifications are assured changes
          dynamically.</t>

          <t>A subscriber SHOULD choose an "adaptive-min-rate" value lower than
          the "max-rate" value, otherwise, the notifier MUST adjust the
          subscriber provided "adaptive-min-rate" value to a value equal to or
          lower than the "max-rate" value.</t>

          <t hangText="minimum rate and adaptive minimum rate:">When using the
          adaptive minimum rate mechanism, frequent state changes in a short
          period can result in no notifications for a longer period following
          the short period. The addition of the minimum rate mechanism ensures that
          the subscriber always receives notifications after a specified
          interval.</t>

          <t>A subscriber SHOULD choose a "min-rate" value lower than the
          "adaptive-min-rate" value, otherwise, the notifier MUST NOT consider
          the "min-rate" value.</t>

          <t
          hangText="maximum rate, minimum rate, and adaptive minimum rate:">This
          combination makes little sense to be used, although it is not
          forbidden.</t>

          <t hangText="">A subscriber SHOULD choose a "min-rate" and
          "adaptive-min-rate" values lower than the "max-rate" value,
          otherwise, the notifier MUST adjust the subscriber provided
          "min-rate" and "adaptive-min-rate" values to a value equal to or
          lower than the "max-rate" value.</t>

          <t hangText="">A subscriber SHOULD choose a "min-rate" value lower
          than the "adaptive-min-rate" value, otherwise, the notifier MUST NOT
          consider the "min-rate" value.</t>
        </list></t>
    </section>

    <section anchor="syntax" title="Protocol Element Definitions"
             toc="default">
      <t>This section describes the protocol extensions required for the
      different rate control mechanisms.</t>

      <section title="&quot;max-rate&quot;, &quot;min-rate&quot;, and &quot;adaptive-min-rate&quot; Header Field Parameters"
               toc="default">
        <t>The "max-rate", "min-rate", and "adaptive-min-rate" parameters are
        added to the rule definitions of the Event header field and the
        Subscription-State header field in <xref format="default"
        pageno="false" target="RFC3265">RFC 3265</xref> grammar. Usage of this
        parameter is described in Sections <xref format="default" pageno="false"
        target="operation-max" format="counter"></xref>, <xref format="default" pageno="false"
        target="operation-min" format="counter"></xref>, and <xref format="default"
        pageno="false" target="operation-average" format="counter"></xref>.</t>
      </section>

      <section title="Grammar" toc="default">
        <t>This section describes the <xref format="default" pageno="false"
        target="RFC5234">Augmented BNF</xref> definitions for the new header
        field parameters. Note that we derive here from the ruleset present in
        <xref format="default" pageno="false" target="RFC3265">RFC
        3265</xref>, adding additional alternatives to the alternative sets of
        "event-param" and "subexp-params" defined therein.
<!-- [rfced] We suggest an update to the following sentence to avoid 
repitition.  Please consider whether the suggested text correctly conveys the 
intended meaning of the original sentence. 

Original:
   Note that we derive here from the
   ruleset present in RFC 3265 [RFC3265], adding additional alternatives
   to the alternative sets of "event-param" and "subexp-params" defined
   therein.

Suggested:
   Note that the grammar is derived from the ruleset present in RFC 3265
   [RFC3265], with the addition of options for the alternative sets of 
   "event-param" and "subexp-params" defined 
   therein.
-->
</t>

        <figure title="">
          <artwork align="left" alt="" height="" name="" type="" width=""
                   xml:space="preserve"><![CDATA[
   event-param     =  max-rate-param 
                      / min-rate-param 
                      / amin-rate-param
   subexp-params   =  max-rate-param 
                      / min-rate-param 
                      / amin-rate-param
   max-rate-param  =  "max-rate" EQUAL
                      (1*2DIGIT ["." 1*10DIGIT])
   min-rate-param  =  "min-rate" EQUAL
                      (1*2DIGIT ["." 1*10DIGIT])
   amin-rate-param =  "adaptive-min-rate" EQUAL
                      (1*2DIGIT ["." 1*10DIGIT])

]]></artwork>
        </figure>
      </section>

      <section title="Event Header Field Usage in Responses to the NOTIFY Request"
               toc="default">
        <t>This table expands the table described in Section 7.2 of <xref
        format="default" pageno="false" target="RFC3265">RFC 3265</xref>,
        allowing the Event header field to appear in a 2xx response to a
        NOTIFY request. The use of the Event header field in responses other
        than 2xx to NOTIFY requests is undefined and out of scope of this
        specification.</t>

        <figure title="">
          <artwork align="left" alt="" height="" name="" type="" width=""
                   xml:space="preserve"><![CDATA[   
   Header field      where proxy ACK BYE CAN INV OPT REG PRA SUB NOT
   -----------------------------------------------------------------
   Event             2xx          -   -   -   -   -   -   -   -   o

]]></artwork>
        </figure>

        <t>A subscriber that wishes to update the previously agreed value for
        maximum, minimum, or adaptive minimum rate of notifications MUST
        include all desired values for the "max-rate", "min-rate", and
        "adaptive-min-rate" parameters in an Event header field of the 2xx
        response to a NOTIFY request. Any of the other header field parameters
        currently defined for the Event header field by other specifications
        do not have a meaning if the Event header field is included in the 2xx
        response to the NOTIFY request. These header field parameters MUST be
        ignored by the notifier, if present.</t>

        <t>The event type listed in the Event header field of the 2xx response
        to the NOTIFY request MUST match the event type of the Event header
        field in the corresponding NOTIFY request.</t>
      </section>
    </section>

    <section anchor="iana" title="IANA Considerations" toc="default">
      <t>This specification registers three new SIP header field parameters
      in the "Header Field Parameters and Parameter Values" sub-registry of the "Session Initiation Protocol
(SIP) Parameters" registry.</t>

      <figure title="">
        <artwork align="left" alt="" height="" name="" type="" width=""
                 xml:space="preserve"><![CDATA[
                                            Predefined
   Header Field         Parameter Name        Values      Reference
   -------------------- ---------------     ----------    ---------
   Event                max-rate            No            [RFC6446]
   Subscription-State   max-rate            No            [RFC6446]
   Event                min-rate            No            [RFC6446]
   Subscription-State   min-rate            No            [RFC6446]
   Event                adaptive-min-rate   No            [RFC6446]
   Subscription-State   adaptive-min-rate   No            [RFC6446]
       ]]></artwork>
      </figure>

      <t>This specification also updates the reference defining the Event
      header field in the "Header Fields" sub-registry of the "Session
Initiation Protocol (SIP) Parameters" registry.</t>

      <figure title="">
        <artwork align="left" alt="" height="" name="" type="" width=""
                 xml:space="preserve"><![CDATA[
   Header Name  compact   Reference
   -----------  -------   ------------------
   Event          o       [RFC3265][RFC6446]
       ]]></artwork>
      </figure>
    </section>

    <section anchor="security" title="Security Considerations" toc="default">
      <t>Naturally, the security considerations listed in <xref
      format="default" pageno="false" target="RFC3265">RFC 3265</xref>, which
      the rate control mechanisms described in this document extends, apply in
      their entirety. In particular, authentication and message integrity SHOULD be
      applied to subscriptions with this extension.</t>

      <t><xref format="default" pageno="false" target="RFC3265">RFC
      3265</xref> recommends the integrity protection of the Event header
      field of SUBSCRIBE requests. Implementations of this extension SHOULD
      also provide integrity protection for the Event header field included in
      the 2xx response to the NOTIFY request. Without integrity protection, an
      eavesdropper could see and modify the Event header field, or it could
      manipulate the transmission of a 200 (OK) response to the NOTIFY
      request to suppress or flood notifications without the
      subscriber seeing what caused the problem.</t>

      <t>When the maximum rate mechanism involves partial-state notifications,
      the security considerations listed in <xref format="default"
      pageno="false" target="RFC5263">RFC 5263</xref> apply in their entirety.</t>
    </section>

    <section anchor="acknowledgments" title="Acknowledgments" toc="default">
      <t>Thanks to Pekka Pessi, Dean Willis, Eric Burger, Alex Audu, Alexander
      Milinski, Jonathan Rosenberg, Cullen Jennings, Adam Roach, Hisham
      Khartabil, Dale Worley, Martin Thomson, Byron Campen, Alan Johnston,
      Michael Procter, Janet Gunn, and Ari Keranen for support and/or review of
      this work.</t>

      <t>Thanks to Brian Rosen for the idea of the minimum and adaptive
      minimum rate mechanisms, and to Adam Roach for the work on the algorithm
      for the adaptive minimum rate mechanism and other feedback.</t>
    </section>
  </middle>

  <!-- ************************************************************** -->

  <!-- The BACK section includes the rest of the stuff, references,   -->

  <!-- acknowledgements, authors addresIf
       the endpoint receives 5xx responses more than some threshold
       number of times in a row, it SHOULD assume the session has
       failed, and initiate tear-down via the signaling protocol.ses, etc.                      -->

  <!-- ************************************************************** -->

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119" ?>

      <?rfc include="reference.RFC.3265" ?>

      <?rfc include="reference.RFC.3261"?>

      <?rfc include="reference.RFC.4662"?>

<!-- reference.RFC.5234 -->

<reference anchor='RFC5234'>

<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role="editor">
<organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'>
<organization /></author>
<date year='2008' month='January' />
<abstract>
<t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF.  It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='STD' value='68' />
<seriesInfo name='RFC' value='5234' />
<format type='TXT' octets='26359' target='http://www.rfc-editor.org/rfc/rfc5234.txt' />
</reference>



      <?rfc include="reference.RFC.5263"?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.3856" ?>

      <?rfc include="reference.RFC.3857" ?>

      <?rfc include="reference.RFC.3842" ?>

      <?rfc include="reference.RFC.3680" ?>

      <?rfc include="reference.RFC.3320" ?>

      <?rfc include="reference.RFC.3943" ?>

<!-- reference.RFC.5839 -->
<reference anchor='RFC5839'>

<front>
<title>An Extension to Session Initiation Protocol (SIP) Events for Conditional Event Notification</title>
<author initials='A.' surname='Niemi' fullname='A. Niemi'>
<organization /></author>
<author initials='D.' surname='Willis' fullname='D. Willis' role="editor">
<organization /></author>
<date year='2010' month='May' />
<abstract>
<t>The Session Initiation Protocol (SIP) events framework enables receiving asynchronous notification of various events from other SIP user agents.  This framework defines the procedures for creating, refreshing, and terminating subscriptions, as well as fetching and periodic polling of resource state.  These procedures provide no tools to avoid replaying event notifications that have already been received by a user agent.  This memo defines an extension to SIP events that allows the subscriber to condition the subscription request to whether the state has changed since the previous notification was received.  When such a condition is true, either the body of a resulting event notification or the entire notification message is suppressed. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5839' />
<format type='TXT' octets='52999' target='http://www.rfc-editor.org/rfc/rfc5839.txt' />
</reference>



<!-- reference.I-D.ietf-geopriv-loc-filters -->

<reference anchor='RFC6447'>
<front>
<title>Filtering Location Notifications in the Session Initiation Protocol (SIP)</title>

<author initials='R' surname='Mahy' fullname='Rohan Mahy'>
    <organization />
</author>

<author initials='B' surname='Rosen' fullname='Brian Rosen'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<date month='November' year='2011' />

<abstract><t>This document describes filters that limit asynchronous location notifications to compelling events, designed as an extension to RFC 4661, an XML-based format for event notification filtering, and based on RFC 3856, the SIP presence event package.  The resulting location information is conveyed in existing location formats wrapped in the Presence Information Data Format Location Object (PIDF-LO).</t></abstract>

</front>

<seriesInfo name='RFC' value='6447' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-geopriv-loc-filters-11.txt' />
</reference>


    </references>
  </back>
</rfc>
