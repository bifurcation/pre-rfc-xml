<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc rfcedstyle="yes" ?>

<rfc category="info" number="6238" ipr="trust200902" submissionType="IETF" consensus="yes">

  <front>
    <title abbrev="HOTPTimeBased">TOTP: Time-Based One-Time Password Algorithm</title>
    <author fullname="David M'Raihi" initials="D." surname="M'Raihi">
      <organization>Verisign, Inc.</organization>
      <address>
        <postal>
          <street>685 E. Middlefield Road</street>
          <city>Mountain View</city>
          <region>CA</region>
          <code>94043</code>
          <country>USA</country>
        </postal>
        <email>davidietf@gmail.com</email>
      </address>
    </author>
    <author fullname="Salah Machani" initials="S." surname="Machani">
      <organization>Diversinet Corp.</organization>
      <address>
        <postal>
          <street>2225 Sheppard Avenue East, Suite 1801</street>
          <city>Toronto</city>
          <region>Ontario</region>
          <code>M2J 5C2</code>
          <country>Canada</country>
        </postal>
        <email>smachani@diversinet.com</email>
      </address>
    </author>
    <author fullname="Mingliang Pei" initials="M." surname="Pei">
      <organization>Symantec</organization>
      <address>
        <postal>
          <street>510 E. Middlefield Road</street>
          <city>Mountain View</city>
          <region>CA</region>
          <code>94043</code>
          <country>USA</country>
        </postal>
        <email>Mingliang_Pei@symantec.com</email>
      </address>
    </author>
    <author fullname="Johan Rydell" initials="J." surname="Rydell">
      <organization>Portwise, Inc.</organization>
      <address>
        <postal>
          <street>275 Hawthorne Ave., Suite 119</street>
          <city>Palo Alto</city>
          <region>CA</region>
          <code>94301</code>
          <country>USA</country>
        </postal>
        <email>johanietf@gmail.com</email>
      </address>
    </author>    

    <date month="May" year="2011" />

    <abstract>
      <t>This document describes an extension of the One-Time Password (OTP)
      algorithm, namely
      the HMAC-based
      One-Time Password (HOTP) algorithm, as defined in RFC 4226,
      to support the time-based moving factor. The HOTP algorithm specifies
      an event-based OTP algorithm, where the moving factor is an event counter. The present work 
      bases the moving factor on a time value.  A time-based variant of the OTP algorithm 
      provides short-lived OTP values, which are desirable for enhanced security.</t>

      <t>The proposed algorithm can be used across a wide range of network
applications, from 
      remote Virtual Private Network (VPN) access and Wi-Fi network logon
to transaction-oriented Web
      applications. The authors believe that a common and shared algorithm will facilitate adoption of 
      two-factor authentication on the Internet by enabling interoperability across commercial and 
      open-source implementations.</t>
    </abstract>
  </front>

  <middle>

    <section anchor="Section-Introduction" title="Introduction">
      <section title="Scope">
        <t>This document describes an extension of the One-Time Password 
        (OTP) algorithm, namely the HMAC-based One-Time Password (HOTP)
        algorithm, as defined in <xref target="RFC4226"></xref>,
        to support the time-based moving factor.
        </t>
      </section>

      <section title="Background">
        <t>As defined in <xref target="RFC4226"></xref>, the HOTP algorithm
        is based on the HMAC-SHA-1 algorithm 
        (as specified in <xref target="RFC2104"></xref>) and applied to an
        increasing counter value representing the message in the
        HMAC computation.</t>

        <t>Basically, the output of the HMAC-SHA-1 calculation is truncated to obtain user-friendly values:</t>

        <list><t>HOTP(K,C) = Truncate(HMAC-SHA-1(K,C))</t></list>

        <t>where Truncate represents the function that can convert an HMAC-SHA-1 value into an HOTP value. 
        K and C represent the shared secret and counter value;
        see <xref target="RFC4226"></xref> for detailed definitions.</t>

        <t>TOTP is the time-based variant of this algorithm, where a
        value T, derived from a time reference and a time step,
        replaces the counter C in the HOTP computation.</t>

        <t>TOTP implementations MAY use HMAC-SHA-256 or HMAC-SHA-512 functions, based on SHA-256 or
        SHA-512 <xref target="SHA2" /> hash functions, instead of the HMAC-SHA-1 function that
has been specified for the HOTP
        computation in <xref target="RFC4226"></xref>.</t>              
      </section>
    </section>

    <section anchor="terms" title="Notation and Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref target="RFC2119"></xref>.</t>
    </section>

    <section anchor="AlgorithmRequirements" title="Algorithm Requirements">
                
          <t> This section summarizes the requirements taken into account for designing the TOTP algorithm. </t>        

        <list style="hanging" hangIndent="4">
<t hangText="R1:">The prover (e.g., token, soft token) and verifier
(authentication or validation server) MUST know or be able to derive the
current Unix time (i.e., the number of seconds elapsed since midnight UTC of
January 1, 1970) for OTP generation. See <xref target="UT" /> for a more detailed
definition of the
commonly known "Unix time". The precision of the time used by the prover
affects how often the clock synchronization should be done; see Section 6.</t>

        <t hangText="R2:">The prover and verifier MUST either share the same secret or the knowledge of a secret transformation to generate a shared secret. </t>
        <t hangText="R3:">The algorithm MUST use HOTP <xref target="RFC4226"></xref> as a key building block. </t>
        <t hangText="R4:">The prover and verifier MUST use the same time-step value X. </t>
        <t hangText="R5:">There MUST be a unique secret (key) for each prover. </t>
        <t hangText="R6:">The keys SHOULD be randomly generated or derived using key derivation algorithms. </t>
        <t hangText="R7:">The keys MAY be stored in a tamper-resistant device and SHOULD be protected against unauthorized access and usage. </t></list>
      
    </section>

    <section anchor="Section-Time-based-Variant" title="TOTP Algorithm">

        <t>This variant of the HOTP algorithm specifies the calculation of a one-time 
        password value, based on a representation of the counter as a time factor.</t>

        <section anchor="Notations" title="Notations">
         <list style="symbols"><t>X represents the time step in seconds
(default value X = 30&nbsp;seconds) and is a system parameter.</t>

         <t>T0 is the Unix time to start counting time steps (default
value is 0, i.e., the Unix epoch) and is also a system parameter.</t></list>

        </section>

        <section title="Description">
            <t>Basically, we define TOTP as TOTP = HOTP(K, T), where T is
            an integer and represents the number of time steps between 
            the initial counter time T0 and the current Unix time.</t>

            <t>More specifically, T = (Current Unix time - T0) / X, where
             the default floor function is used in the computation.</t>

            <t> For example, with T0 = 0 and Time Step X = 30, T = 1 if the
            current Unix time is 59 seconds, and T = 2 if the current
            Unix time is 60&nbsp;seconds.</t>

            <t>The implementation of this algorithm MUST support a time value
T larger than a 32-bit integer when it is beyond the year 2038. 
            The value of the system parameters X and T0 are pre-established during the provisioning process and communicated 
            between a prover and verifier as part of the provisioning step. The provisioning flow is out of scope of this document;
            refer to <xref target="RFC6030"></xref> for such provisioning container specifications.</t>
        </section>
   
    </section>

    <section anchor="Section-Security" title="Security Considerations">
      <section title="General">
  
    <t> The security and strength of this algorithm depend on the 
    properties of the underlying building block HOTP, which is a 
    construction based on HMAC <xref target="RFC2104"></xref> using
    SHA-1 as the hash function. </t> 
     
    <t> The conclusion of the security analysis detailed in 
    <xref target="RFC4226"></xref> is that, for all practical 
    purposes, the outputs of the dynamic truncation on distinct 
    inputs are uniformly and independently distributed strings. </t>
     
    <t> The analysis demonstrates that the best possible attack against the 
    HOTP function is the brute force attack. </t>

    <t> As indicated in the algorithm requirement section, keys SHOULD be 
    chosen at random or using a cryptographically strong pseudorandom 
    generator properly seeded with a random value. </t> 

    <t> Keys SHOULD be of the length of the HMAC output to facilitate
    interoperability. </t>
    
    <t> We RECOMMEND following the recommendations in 
    <xref target="RFC4086"></xref> for all pseudorandom and 
    random number generations. The pseudorandom numbers used for
    generating the keys SHOULD successfully pass the 
    randomness test specified in <xref target="CN"></xref>, or
    a similar well-recognized test. </t>
     
    <t> All the communications SHOULD take place over a secure 
    channel, e.g., Secure Socket Layer/Transport Layer Security
    (SSL/TLS) <xref target="RFC5246"></xref> or IPsec
    connections <xref target="RFC4301"></xref>.</t>
  
    <t> We also RECOMMEND storing the keys securely in the 
    validation system, and, more specifically, encrypting them using 
    tamper-resistant hardware encryption and exposing them only when 
    required: for example, the key is decrypted when needed to verify 
    an OTP value, and re-encrypted immediately to limit exposure in 
    the RAM to a short period of time. </t>
    
    <t> The key store MUST be in a secure area, to avoid, as much as possible,
    direct attack on the validation system and secrets database. 
    Particularly, access to the key material should be limited to programs 
    and processes required by the validation system only. </t>
     
    </section>

      <section title="Validation and Time-Step Size">
         <t>An OTP generated within the same time step will be the same.  
            When an OTP is received at a validation system, it doesn't 
            know a client's exact timestamp when an OTP was generated. The
            validation system may typically use the timestamp when an OTP is 
            received for OTP comparison. Due to network latency, the gap (as
            measured by T, that is, the number of time steps since T0)
            between the time that the OTP was generated and the time that
            the OTP arrives at the receiving system may be large.
            The receiving time at the validation
            system and the actual OTP generation may not fall within the 
            same time-step window that produced the same OTP. When an OTP
            is generated at the end of a time-step window, the receiving time
            most likely falls into the next time-step window. 
            A validation system SHOULD typically set a policy for an 
            acceptable OTP transmission delay window for validation. 
            The validation system should compare OTPs not only with the 
            receiving timestamp but also the past timestamps that are 
            within the transmission delay. A larger acceptable delay window
            would expose a larger window for attacks. We RECOMMEND that 
            at most one time step is allowed as the network delay. </t>

          <t>The time-step size has an impact on both security and usability.
            A larger time-step size means a larger validity window for an OTP
            to be accepted by a validation system. There are
            implications for using a larger time-step size, as follows:</t>

         <t>First, a larger time-step size exposes a larger window to
            attack. 
When an OTP is generated and exposed to a third party
            before it is consumed, the third party can consume the OTP within
            the time-step window.</t>

         <t>We RECOMMEND a default time-step size of 30 seconds.
         This default value of 30 seconds is selected
         as a balance between security and usability.</t>

         <t>Second, the next different OTP must be generated in the next 
            time-step window. A user must wait until the clock moves to the
            next time-step window from the last submission. The waiting time
            may not be exactly the length of the time step, depending on when
            the last OTP was generated. For example, if the last OTP was 
            generated at the halfway point in a time-step window, the waiting
            time for the next OTP is half the length of the time step.
            In general,
            a larger time-step window means a longer waiting time for
            a user to get the next valid OTP after the last successful
            OTP validation. A too-large window (for example, 10 minutes)
            most probably won't be suitable for typical Internet login 
            use cases; a user may not be able to get the next OTP within
            10 minutes and therefore will have to re-login to the same site
            in 10 minutes.</t>

      <t>Note that a prover may send the same OTP inside a given time-step
 window multiple times to a verifier. 
The verifier MUST NOT accept the
 second attempt of the OTP after the successful validation has been
 issued for the first OTP, which ensures one-time only use of an OTP.</t>
      </section>
     
    </section>

     <section title="Resynchronization">
        <t> Because of possible clock drifts between a client and a validation
            server, we RECOMMEND that the validator be set with a specific
            limit to the number of time steps a prover can be "out of synch" 
            before being rejected.</t>
            
        <t> This limit can be set both forward and backward from the calculated
            time step on receipt of the OTP value. If the time step is
            30&nbsp;seconds 
            as recommended, and the validator is set to only accept two time
            steps 
            backward, then the maximum elapsed time drift would be around 
            89 seconds, i.e., 29 seconds in the calculated time step and
            60 seconds for two backward time steps. </t>
            
     <t> This would mean the validator could perform a validation against
         the current time and then two further validations for each backward
            step (for a total of 3 validations). Upon successful validation,
            the validation server can record the detected clock drift for
            the token in terms of the number of time steps. When a new OTP
            is received after this step, the validator can validate the OTP with
            the current timestamp adjusted with the recorded number of time-step clock 
            drifts for the token.</t>
           
        <t> Also, it is important to note that the longer a prover has not sent 
            an OTP to a validation system, the longer (potentially) the accumulated 
            clock drift between the prover and the verifier. In such cases, the automatic 
            resynchronization described above may not work if the drift exceeds the 
            allowed threshold. Additional authentication measures should be used to
            safely authenticate the prover and explicitly resynchronize the clock drift 
            between the prover and the validator.</t>
     </section>
    
    <section anchor="Section-Acknowledgements" title="Acknowledgements">
      <t>The authors of this document would like to thank the following people
   for their contributions and support to make this a better
   specification: Hannes Tschofenig, Jonathan Tuliani, David Dix, Siddharth Bajaj, 
   Stu Veath, Shuh Chang, Oanh Hoang, John Huang, and Siddhartha Mohapatra.
</t>
    </section>

  </middle>

  <back>
    <references title="Normative References">
      <reference anchor="RFC4226">
        <front>
          <title>HOTP: An HMAC-Based One-Time Password Algorithm</title>
          <author initials="D." surname="M'Raihi">
            <organization>VeriSign</organization>
          </author>
          <author initials="M." surname="Bellare">
            <organization>UCSD</organization>
          </author>
          <author initials="F." surname="Hoornaert">
            <organization>Vasco</organization>
          </author>
          <author initials="D." surname="Naccache">
            <organization>Gemplus</organization>
          </author>
          <author initials="O." surname="Ranen">
            <organization>Aladdin</organization>
          </author>
          <date month="December" year="2005" />
        </front>
        <seriesInfo name="RFC" value="4226" />
      </reference>

      <reference anchor="RFC4086">
        <front>
          <title>Randomness Recommendations for Security</title>
          <author initials="D." surname="Eastlake 3rd">
            <organization>Motorola Lab</organization>
          </author>
          <author initials="J." surname="Schiller">
            <organization>MIT</organization>
          </author>
          <author initials="S." surname="Crocker">
            <organization/>
          </author>
          <date month="June" year="2005" />
        </front>
        <seriesInfo name="BCP" value="106" />
        <seriesInfo name="RFC" value="4086" />
      </reference>
      
      <reference anchor="RFC2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement
          Levels</title>
          <author initials="S." surname="Bradner">
            <organization></organization>
          </author>
          <date month="March" year="1997" />
        </front>
        <seriesInfo name="BCP" value="14" />
        <seriesInfo name="RFC" value="2119" />
      </reference>

      <reference anchor="RFC2104">
        <front>
        <title>HMAC: Keyed-Hashing for Message Authentication</title>
          <author initials="H." surname="Krawczyk">
            <organization>IBM</organization>
          </author>
          <author initials="M." surname="Bellare">
            <organization>UCSD</organization>
          </author>
          <author initials="R." surname="Canetti">
            <organization>IBM</organization>
          </author>
          <date month="February" year="1997" />
        </front>
        <seriesInfo name="RFC" value="2104" />
      </reference>

      <reference anchor="SHA2" target="http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf">
        <front>
        <title>FIPS PUB 180-3: Secure Hash Standard (SHS)</title>
          <author surname="NIST">
          <organization>IBM</organization>
          </author>
          <date month="October" year="2008" />
        </front>
      </reference>
    </references>
    
      <references title="Informative References">
      
      <reference anchor="CN" target="http://www.gemplus.com/smart/rd/publications/pdf/CN99maur.pdf">
        <front>
        <title>An Accurate Evaluation of Maurer's Universal Test</title>
          <author initials="J.S." surname="Coron">
            <organization>University of Luxembourg</organization>
          </author>
          <author initials="D." surname="Naccache">
            <organization>ENS</organization>
          </author>
          <date month="February" year="1999" />
        </front>
        <seriesInfo name="LNCS" value="1556" />
       </reference>

       <reference anchor="RFC4301">
        <front>
          <title>Security Architecture for the Internet Protocol</title>
          <author initials="S." surname="Kent">
            <organization>BBN Technologies</organization>
          </author>
          <author initials="K." surname="Seo">
            <organization>BBN Technologies</organization>
          </author>
          <date month="December" year="2005" />
        </front>
        <seriesInfo name="RFC" value="4301" />
      </reference>

       <reference anchor="RFC5246">
        <front>
          <title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
          <author initials="T." surname="Dierks">
            <organization>Independent</organization>
          </author>
          <author initials="E." surname="Rescorla">
            <organization>ETFM</organization>
          </author>
          <date month="August" year="2008" />
        </front>
        <seriesInfo name="RFC" value="5246" />
      </reference>

       <reference anchor="RFC6030">
        <front>
          <title>Portable Symmetric Key Container (PSKC)</title>
          <author initials="P." surname="Hoyer">
            <organization>ActivIdentity</organization>
          </author>
          <author initials="M." surname="Pei">
            <organization>VeriSign</organization>
          </author>
          <author initials="S." surname="Machani">
            <organization>Diversinet</organization>
          </author>
          <date month="October" year="2010" />
        </front>
        <seriesInfo name="RFC" value="6030" />
      </reference>

       <reference anchor="UT" target="http://en.wikipedia.org/wiki/Unix_time">
        <front>
          <title>Unix time</title>
          <author surname="">
            <organization>Wikipedia</organization>
          </author>
          <date month="February" year="2011" />
        </front>
      </reference>
      
    </references>

    <section anchor="Section-Reference-Impl" title="TOTP Algorithm: Reference
Implementation">

        <figure>
        <artwork><![CDATA[
<CODE BEGINS>

/**    
Copyright (c) 2011 IETF Trust and the persons identified as
authors of the code. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, is permitted pursuant to, and subject to the license
terms contained in, the Simplified BSD License set forth in Section
4.c of the IETF Trust's Legal Provisions Relating to IETF Documents
(http://trustee.ietf.org/license-info).
*/

import java.lang.reflect.UndeclaredThrowableException;
import java.security.GeneralSecurityException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.math.BigInteger;
import java.util.TimeZone;


/**
 * This is an example implementation of the OATH
 * TOTP algorithm. 
 * Visit www.openauthentication.org for more information.
 * 
 * @author Johan Rydell, PortWise, Inc.
 */

public class TOTP {

    private TOTP() {}

    /**
     * This method uses the JCE to provide the crypto algorithm.
     * HMAC computes a Hashed Message Authentication Code with the
     * crypto hash algorithm as a parameter.
     *
     * @param crypto: the crypto algorithm (HmacSHA1, HmacSHA256,
     *                             HmacSHA512)
     * @param keyBytes: the bytes to use for the HMAC key
     * @param text: the message or text to be authenticated
     */

    private static byte[] hmac_sha(String crypto, byte[] keyBytes, 
            byte[] text){
        try {
            Mac hmac;
            hmac = Mac.getInstance(crypto);
            SecretKeySpec macKey =
                new SecretKeySpec(keyBytes, "RAW");
            hmac.init(macKey);
            return hmac.doFinal(text);
        } catch (GeneralSecurityException gse) {
            throw new UndeclaredThrowableException(gse);
        }
    }


    /**
     * This method converts a HEX string to Byte[]
     *
     * @param hex: the HEX string
     * 
     * @return: a byte array
     */

    private static byte[] hexStr2Bytes(String hex){
        // Adding one byte to get the right conversion
        // Values starting with "0" can be converted
        byte[] bArray = new BigInteger("10" + hex,16).toByteArray();    

        // Copy all the REAL bytes, not the "first"
        byte[] ret = new byte[bArray.length - 1];
        for (int i = 0; i < ret.length; i++)
            ret[i] = bArray[i+1];
        return ret;
    }


    private static final int[] DIGITS_POWER
    // 0 1  2   3    4     5      6       7        8                 
    = {1,10,100,1000,10000,100000,1000000,10000000,100000000 };


    /**
     * This method generates a TOTP value for the given
     * set of parameters.
     *
     * @param key: the shared secret, HEX encoded
     * @param time: a value that reflects a time 
     * @param returnDigits: number of digits to return 
     * 
     * @return: a numeric String in base 10 that includes
     *              {@link truncationDigits} digits 
     */

    public static String generateTOTP(String key,
            String time,
            String returnDigits){
        return generateTOTP(key, time, returnDigits, "HmacSHA1");
    }


    /**
     * This method generates a TOTP value for the given
     * set of parameters.
     *
     * @param key: the shared secret, HEX encoded
     * @param time: a value that reflects a time 
     * @param returnDigits: number of digits to return 
     * 
     * @return: a numeric String in base 10 that includes
     *              {@link truncationDigits} digits 
     */

    public static String generateTOTP256(String key,
            String time,
            String returnDigits){
        return generateTOTP(key, time, returnDigits, "HmacSHA256");
    }


    /**
     * This method generates a TOTP value for the given
     * set of parameters.
     *
     * @param key: the shared secret, HEX encoded
     * @param time: a value that reflects a time 
     * @param returnDigits: number of digits to return 
     * 
     * @return: a numeric String in base 10 that includes
     *              {@link truncationDigits} digits 
     */

    public static String generateTOTP512(String key,
            String time,
            String returnDigits){
        return generateTOTP(key, time, returnDigits, "HmacSHA512");
    }


    /**
     * This method generates a TOTP value for the given
     * set of parameters.
     *
     * @param key: the shared secret, HEX encoded
     * @param time: a value that reflects a time 
     * @param returnDigits: number of digits to return 
     * @param crypto: the crypto function to use 
     * 
     * @return: a numeric String in base 10 that includes
     *              {@link truncationDigits} digits 
     */

    public static String generateTOTP(String key,
            String time,
            String returnDigits,
            String crypto){
        int codeDigits = Integer.decode(returnDigits).intValue();
        String result = null;

        // Using the counter
        // First 8 bytes are for the movingFactor
        // Compliant with base RFC 4226 (HOTP)
        while (time.length() < 16 )
            time = "0" + time;

        // Get the HEX in a Byte[]
        byte[] msg = hexStr2Bytes(time);
        byte[] k = hexStr2Bytes(key);

        byte[] hash = hmac_sha(crypto, k, msg);

        // put selected bytes into result int
        int offset = hash[hash.length - 1] & 0xf;

        int binary =
            ((hash[offset] & 0x7f) << 24) | 
            ((hash[offset + 1] & 0xff) << 16) | 
            ((hash[offset + 2] & 0xff) << 8) | 
            (hash[offset + 3] & 0xff);

        int otp = binary % DIGITS_POWER[codeDigits];

        result = Integer.toString(otp);
        while (result.length() < codeDigits) {
            result = "0" + result;
        }
        return result;
    }

    public static void main(String[] args) {
        // Seed for HMAC-SHA1 - 20 bytes
        String seed = "3132333435363738393031323334353637383930";
        // Seed for HMAC-SHA256 - 32 bytes
        String seed32 = "3132333435363738393031323334353637383930" +
        "313233343536373839303132"; 
        // Seed for HMAC-SHA512 - 64 bytes
        String seed64 = "3132333435363738393031323334353637383930" +
        "3132333435363738393031323334353637383930" +
        "3132333435363738393031323334353637383930" +
        "31323334";
        long T0 = 0;
        long X = 30;
        long testTime[] = {59L, 1111111109L, 1111111111L, 
                1234567890L, 2000000000L, 20000000000L};

        String steps = "0";
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        df.setTimeZone(TimeZone.getTimeZone("UTC"));

        try{
            System.out.println(
                    "+---------------+-----------------------+" +
            "------------------+--------+--------+");
            System.out.println(
                    "|  Time(sec)    |   Time (UTC format)   " +
            "| Value of T(Hex)  |  TOTP  | Mode   |");
            System.out.println(
                    "+---------------+-----------------------+" +
            "------------------+--------+--------+");

            for (int i=0; i<testTime.length; i++) {       
                long T = (testTime[i] - T0)/X;
                steps = Long.toHexString(T).toUpperCase();
                while (steps.length() < 16) steps = "0" + steps;
                String fmtTime = String.format("%1$-11s", testTime[i]);
                String utcTime = df.format(new Date(testTime[i]*1000));
                System.out.print("|  " + fmtTime + "  |  " + utcTime +  
                        "  | " + steps + " |");
                System.out.println(generateTOTP(seed, steps, "8", 
                "HmacSHA1") + "| SHA1   |");
                System.out.print("|  " + fmtTime + "  |  " + utcTime +  
                        "  | " + steps + " |");
                System.out.println(generateTOTP(seed32, steps, "8", 
                "HmacSHA256") + "| SHA256 |");
                System.out.print("|  " + fmtTime + "  |  " + utcTime +  
                        "  | " + steps + " |");
                System.out.println(generateTOTP(seed64, steps, "8", 
                "HmacSHA512") + "| SHA512 |");

                System.out.println(
                        "+---------------+-----------------------+" +
                "------------------+--------+--------+");
            }
        }catch (final Exception e){
            System.out.println("Error : " + e);
        }
    }
}

<CODE ENDS>
]]></artwork>
            <postamble/>
    </figure>        
    </section>
    <section anchor="Section-Test-Vectors" title="Test Vectors">
      <t>This section provides test values that can be used for the HOTP
      time-based variant algorithm interoperability test.</t>
      
      <t>The test token shared secret uses the ASCII string value 
      "12345678901234567890". 
      
      With Time Step X = 30, and the Unix epoch as the initial value to count time steps,
      where T0 = 0, the TOTP algorithm will display the following values 
      for specified modes and timestamps.</t>
      
      <texttable anchor="TOTPTable" title="TOTP Table">
          <ttcol align="center">Time (sec)</ttcol>
          <ttcol align="center">UTC Time</ttcol>          
          <ttcol align="center">Value of T (hex)</ttcol>          
          <ttcol align="center">TOTP</ttcol>
          <ttcol align="center">Mode</ttcol>

          <c>59</c>
          <c>1970-01-01 00:00:59</c>
          <c>0000000000000001</c>
          <c>94287082</c>
          <c>SHA1</c>
          
          <c>59</c>
          <c>1970-01-01 00:00:59</c>
          <c>0000000000000001</c>
          <c>46119246</c>
          <c>SHA256</c>
          
          <c>59</c>
          <c>1970-01-01 00:00:59</c>
          <c>0000000000000001</c>
          <c>90693936</c>
          <c>SHA512</c>

          <c>1111111109</c>
          <c>2005-03-18 01:58:29</c>
          <c>00000000023523EC</c>
          <c>07081804</c>
          <c>SHA1</c>

          <c>1111111109</c>
          <c>2005-03-18 01:58:29</c>
          <c>00000000023523EC</c>
          <c>68084774</c>
          <c>SHA256</c>
          
          <c>1111111109</c>
          <c>2005-03-18 01:58:29</c>
          <c>00000000023523EC</c>
          <c>25091201</c>
          <c>SHA512</c>
                    
          <c>1111111111</c>
          <c>2005-03-18 01:58:31</c>
          <c>00000000023523ED</c>
          <c>14050471</c>
          <c>SHA1</c>
          
          <c>1111111111</c>
          <c>2005-03-18 01:58:31</c>
          <c>00000000023523ED</c>
          <c>67062674</c>
          <c>SHA256</c>
          
          <c>1111111111</c>
          <c>2005-03-18 01:58:31</c>
          <c>00000000023523ED</c>
          <c>99943326</c>
          <c>SHA512</c>
          
          <c>1234567890</c>
          <c>2009-02-13 23:31:30</c>
          <c>000000000273EF07</c>
          <c>89005924</c>
          <c>SHA1</c>
         
          <c>1234567890</c>
          <c>2009-02-13 23:31:30</c>
          <c>000000000273EF07</c>
          <c>91819424</c>
          <c>SHA256</c>
          
          <c>1234567890</c>
          <c>2009-02-13 23:31:30</c>
          <c>000000000273EF07</c>
          <c>93441116</c>
          <c>SHA512</c>

          <c>2000000000</c>
          <c>2033-05-18 03:33:20</c>
          <c>0000000003F940AA</c>
          <c>69279037</c>
          <c>SHA1</c>

          <c>2000000000</c>
          <c>2033-05-18 03:33:20</c>
          <c>0000000003F940AA</c>
          <c>90698825</c>
          <c>SHA256</c>

          <c>2000000000</c>
          <c>2033-05-18 03:33:20</c>
          <c>0000000003F940AA</c>
          <c>38618901</c>
          <c>SHA512</c>
          
          <c>20000000000</c>
          <c>2603-10-11 11:33:20</c>
          <c>0000000027BC86AA</c>
          <c>65353130</c>
          <c>SHA1</c>

          <c>20000000000</c>
          <c>2603-10-11 11:33:20</c>
          <c>0000000027BC86AA</c>
          <c>77737706</c>
          <c>SHA256</c>

          <c>20000000000</c>
          <c>2603-10-11 11:33:20</c>
          <c>0000000027BC86AA</c>
          <c>47863826</c>
          <c>SHA512</c>
                                        
        </texttable>
    </section>
</back>
</rfc>
