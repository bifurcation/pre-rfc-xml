<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc0791 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0791.xml">
<!ENTITY rfc0792 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0792.xml">
<!ENTITY rfc0950 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0950.xml">
<!ENTITY rfc0951 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0951.xml">
<!ENTITY rfc1112 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1112.xml">
<!ENTITY rfc1122 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY rfc1550 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1550.xml">
<!ENTITY rfc1710 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1710.xml">
<!ENTITY rfc1256 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1256.xml">
<!ENTITY rfc1661 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1661.xml">
<!ENTITY rfc1191 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1191.xml">
<!ENTITY rfc1752 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1752.xml">
<!ENTITY rfc1883 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1883.xml">
<!ENTITY rfc8200 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8200.xml">
]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="historic" number="8507" submissionType="independent">

<front>
    
<title abbrev="Simple IP (SIP)">Simple Internet Protocol (SIP) Specification</title>

<author fullname="Stephen E. Deering" initials="S"
            surname="Deering">
      <organization>Retired</organization>
      <address>
        <postal>
          <street></street>
          <city>Vancouver</city>
          <region>British Columbia</region>
          <code></code>
          <country>Canada</country>
        </postal>
      </address>
</author>

<author fullname="Robert M. Hinden" initials="R"
        surname="Hinden"
        role="editor">
      <organization>Check Point Software</organization>
      <address>
        <postal>
          <street>959 Skyway Road</street>
          <city>San Carlos</city>
          <region>CA</region>
          <code>94070</code>
          <country>USA</country>
        </postal>
        <email>bob.hinden@gmail.com</email>
      </address>
</author>

<date month="December" year="2018" />

<keyword>IPv6, IPng</keyword>

<abstract>

  <t>This document is published for the historical record.  The Simple
  Internet Protocol was the basis for one of the candidates for the IETF's Next
  Generation (IPng) work that became IPv6.</t>

  <t>The publication date of the original Internet-Draft was November 10,
  1992.  It is presented here substantially unchanged and is neither
  a complete document nor intended to be implementable.</t>

  <t>The paragraph that follows is the Abstract from the original draft.</t>

<!-- Next paragraph is DNE, per Adrian.
     Please also note that per Adrian the Preface is editable, but because
     it is a historical record, all text after the Preface is DNE. -->  
  <t>This document specifies a new version of IP called SIP, the Simple
  Internet Protocol.  It also describes the changes needed to ICMP, IGMP,
  and transport protocols such as TCP and UDP, in order to work with SIP.
  A companion document [SIP-ADDR] describes the addressing and routing
  aspects of SIP, including issues of auto-configuration, host and subnet
  mobility, and multicast.</t>


</abstract>

</front>

<middle>

<section title="Preface " anchor="preface ">


    
  <t>This document is published for the historical record.</t>

   <t>Simple IP (SIP) was the basis for one of the candidates for the
   IETF's Next Generation (IPng) work; see "The Recommendation for the IP
   Next Generation Protocol" <xref target="RFC1752"/>.  The original 1992
   Internet&nbhy;Draft describing SIP is published here as part of the record
   of that work.</t>

   <t>
   SIP evolved into SIP Plus <xref target="RFC1710"/>, which was
   assessed as a candidate for IPng <xref target="RFC1752"/> and led eventually to the
   development of IPv6, first published as <xref target="RFC1883"/>.
   The current specification for IPv6 is <xref target="RFC8200"/>.</t>

  <t>The original Internet-Draft describing the Simple Internet Protocol was
  written by Steve Deering, and the Internet-Draft was posted on
  November 10, 1992.  The contents of this document are unchanged from
  that Internet-Draft, except for clarifications in the Abstract, the
  addition of this section, modifications to the authors' information,
  the updating of references, removal of the IANA considerations, and minor
  formatting changes.</t>

  <t>It should be noted that the original draft was not complete and that
  no attempt has been made to complete it.  This document is not
  intended to be implementable.</t>

  
  </section>
  
  <section title="Introduction" anchor="Intro">

   <t>SIP is a new version of IP.  Its salient differences from IP version 4
   <xref target="RFC0791"/>, subsequently referred to as "IPv4", are:
<list style="symbols">
   
    <t>expansion of addresses to 64 bits,</t>

    <t>simplification of the IP header by eliminating some inessential
      fields, and</t>

    <t>relaxation of length restrictions on optional data, such as
    source-routing information.</t>

   </list></t>

   <t>SIP retains the IP model of globally-unique addresses,
   hierarchically-structured for efficient routing.  Increasing the
   address size from 32 to 64 bits allows more levels of hierarchy to be
   encoded in the addresses, enough to enable efficient routing in an
   internet with tens of thousands of addressable devices in every
   office, every residence, and every vehicle in the world.  Keeping the
   addresses fixed-length and relatively compact facilitates
   high&nbhy;performance router and host implementation, and keeps the
   bandwidth overhead of the SIP headers almost as low as IPv4.</t>

   <t>The elimination of inessential fields also contributes to
   high&nbhy;performance implementation, and to the likelihood of correct
   implementation.  A change in the way that optional data, such as
   source-routing information, is encoded allows for more efficient
   forwarding and less stringent limits on the length of such data.</t>

   <t>Despite these changes, SIP remains very similar to IPv4.  This
   similarity makes it easy to understand SIP (for those who already
   understand IPv4), makes it possible to reuse much of the code and data
   structures from IPv4 in an implementation of SIP (including almost all
   of ICMP and IGMP), and makes it straightforward to translate between
   SIP packets and IPv4 packets for transition purposes
   <xref target="IPAE"/>.</t>

  <t>The subsequent sections of this document specify SIP and its
  associated protocols without much explanation of why the design choices
  were made the way they were.  Appendix A presents the rationale for
  those aspects of SIP that differ from IPv4.</t>

</section>

<section title="Terminology" anchor="Terminology">
  
  <t><list hangIndent="13" style="hanging">

    <t hangText="system">a device that implements SIP.</t>

    <t hangText="router">a system that forwards SIP packets.</t>

    <t hangText="host">any system that is not a router.</t>

    <t hangText="link">a communication facility or medium over which systems
                  can communicate at the link layer, i.e., the layer
                  immediately below SIP.</t>

    <t hangText="interface">a system's attachment point to a link.</t>

    <t hangText="address">a SIP-layer identifier for an interface or a group of
                  interfaces.</t>

    <t hangText="subnet">in the SIP unicast addressing hierarchy, a lowest-level
                  (finest-grain) cluster of addresses, sharing a common
                  address prefix (i.e., high-order address bits).
                  Typically, all interfaces attached to the same link have
                  addresses in the same subnet; however, in some cases,
                  a single link may support more than one subnet, or a
                  single subnet may span more than one link.</t>

    <t hangText="link MTU">the maximum transmission unit, i.e., maximum packet size
                  in octets, that can be conveyed in one piece over a link
                  (where a packet is a SIP header plus payload).</t>

    <t hangText="path MTU">the minimum link MTU of all the links in a path between
                  a source system and a destination system.</t>
    
    <t hangText="packetization layer">any protocol layer above SIP that is responsible for
                  packetizing data to fit within outgoing SIP packets.
                  Typically, transport-layer protocols, such as TCP, are
                  packetization protocols, but there may also be higher-
                  layer packetization protocols, such as protocols
                  implemented on top of UDP.</t>
  </list></t>

</section>

<section title="SIP Header Format" anchor="Header">


  <figure><artwork align="left"><![CDATA[
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Version|                        Reserved                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Payload Length        |  Payload Type |   Hop Limit   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                         Source Address                        +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                      Destination Address                      +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]></artwork></figure>

  <t><list>
  <t><list hangIndent="21" style="hanging">

   <t hangText="Version">4-bit IP version number = decimal 6.
                        &lt;to&nbsp;be&nbsp;confirmed&gt;</t>

   <t hangText="Reserved">28-bit reserved field.  Initialized to zero
                        for transmission; ignored on reception.</t>

   <t hangText="Payload Length">16-bit unsigned integer.  Length of payload,
                        i.e., the rest of the packet following the
                        SIP&nbsp;header, in octets.</t>

   <t hangText="Payload Type">8-bit selector.  Identifies the type of
                        payload, e.g., TCP.</t>

   <t hangText="Hop Limit">8-bit unsigned integer.  Decremented by 1
                        by&nbsp;each system that forwards the packet.
                        The&nbsp;packet is discarded if Hop Limit is
                        decremented to zero.</t>

  <t hangText="Source Address">64 bits.  See "Addresses" section, following.</t>

  <t hangText="Destination Address">64 bits.  See "Addresses" section, following.</t>

  </list></t>
  </list></t>

</section>

<section title="Addresses" anchor="Addresses">

  <section title="Text Representation of Addresses" anchor="Text">

  <t>SIP addresses are 64 bits (8 octets) long.  The text representation
  of a SIP addresses is 16 hexadecimal digits, with a colon between the
  4th and 5th digits, and optional colons between any subsequent pair of
  digits.  Leading zeros must not be dropped.  Examples:</t>

  <t><list>
       <t>0123:4567:89AB:CDEF</t>

       <t>0123:456789ABCDEF</t>

       <t>0123:456789AB:CDE:F</t>
  </list></t>

  <t>Programs that read the text representation of SIP addresses must be
  insensitive to the presence or absence of optional colons.  Programs
  that write the text representation of a SIP address should use the
  first format above (i.e., colons after the 4th, 8th, and 12th digits),
  in the absence of any knowledge of the structure or preferred format of
  the address, such as knowledge of the format in which it was originally
  read.</t>

  <t>The presence of at least one colon in the text representation allows
  SIP addresses to be easily distinguished from both domain names and the
  text representation of IPv4 addresses. </t>

  </section>
  <section title="Unicast Addresses" anchor="Unicast">

  <t>A SIP unicast address is a globally-unique identifier for a single
  interface, i.e., no two interfaces in a SIP internet may have the same
  unicast address.  A single interface may, however, have more than one
  unicast address.</t>

  <t>A system considers its own unicast address(es) to have the following
  structure, where different addresses may have different values for
  n:</t>


  
<t><figure><artwork align="left"><![CDATA[
 |                         n bits                     |  64-n bits |
 +----------------------------------------------------+------------+
 |                     subnet prefix                  |interface ID|
 +----------------------------------------------------+------------+
]]></artwork></figure></t>


<t>To know the length of the subnet prefix, the system is required to
associate with each of its addresses a 'subnet mask' of the following
form:</t>

<t><figure><artwork align="left"><![CDATA[
 |                         n bits                     |  64-n bits |
 +----------------------------------------------------+------------+
 |1111111111111111111111111111111111111111111111111111|000000000000|
 +----------------------------------------------------+------------+
]]></artwork></figure></t>



 <t>A system may have a subnet mask of all-ones, which means that the
 system belongs to a subnet containing exactly one system -- itself.</t>


 <t>A system acquires its subnet mask(s) at the same time, and by the
 same mechanism, as it acquires its address(es), for example, by manual
 configuration or by a dynamic configuration protocol such as BOOTP
 <xref target="RFC0951"/>.
</t>

 <t>Hosts are ignorant of any further structure in a unicast address.</t>


 <t>Routers may acquire, through manual configuration or the operation of
routing protocols, additional masks that identify higher-level clusters
in a hierarchical addressing plan.  For example, the routers within
a single site would typically have a 'site mask', such as the following:</t>

<t><figure><artwork align="left"><![CDATA[
 |                  m bits                 |       64-m bits       |
 +-----------------------------------------+-----------------------+
 |11111111111111111111111111111111111111111|00000000000000000000000|
 +-----------------------------------------+-----------------------+
]]></artwork></figure></t>

<t>by which they could deduce the following structure in the site's
addresses:</t>

<t><figure><artwork align="left"><![CDATA[
 |                  m bits                 |  p bits  | 64-m-p bits|
 +-----------------------------------------+----------+------------+
 |                site prefix              |subnet  ID|interface ID|
 +-----------------------------------------+----------+------------+
]]></artwork></figure></t>


  <t>All knowledge by SIP systems of the structure of unicast addresses is
based on possession of such masks -- there is no "wired-in" knowledge
of unicast address formats.</t>



<t>The SIP Addressing and Routing document <xref target="SIP-ADDR"/>
proposes two hierarchical addressing plans, one based on a hierarchy of
SIP service providers, and one based on a geographic hierarchy.</t> 


</section>
  
<section title="Multicast Addresses" anchor="Multicast">

<t>A SIP multicast address is an identifier for a group of interfaces.
An interface may belong to any number of multicast groups.  Multicast
addresses have the following format:</t>


<figure><artwork align="left"><![CDATA[
 |1|   7   |  4 |  4 |                  48 bits                    |
 +-+-------+----+----+---------------------------------------------+
 |C|1111111|flgs|scop|                  group ID                   |
 +-+-------+----+----+---------------------------------------------+]]></artwork></figure>

  <t>where:</t>

 <t><list>

   <t>C = IPv4 compatibility flag; see <xref target="IPAE"/>.</t>

   <t>1111111 in the rest of the first octet identifies the address as
          being a multicast address.</t>

<t><figure><artwork align="left"><![CDATA[
                               +-+-+-+-+
   flgs is a set of 4 flags:   |0|0|0|T|
                               +-+-+-+-+]]></artwork></figure></t>

  <t><list>

  <t>the high-order 3 flags are reserved, and must be initialized
  to&nbsp;0.</t>

  <t><list hangIndent="6" style="hanging">

   <t hangText="T = 0">indicates a permanently-assigned ("well-known") multicast
          address, assigned by the global internet numbering authority.</t>

    <t hangText="T = 1">indicates a non-permanently-assigned ("transient") multicast
          address.</t>

  </list></t>
  </list></t>

  <t>scop is a 4-bit multicast scope value:</t>

<?rfc subcompact="yes" ?>
   <t><list>
    <t>0  reserved</t>
    <t>1  intra-system scope</t>
    <t>2  intra-link scope</t>
    <t>3  (unassigned)</t>
    <t>4  (unassigned)</t>
    <t>5  intra-site scope</t>
    <t>6  (unassigned)</t>
    <t>7  (unassigned)</t>
    <t>8  intra-metro scope</t>
    <t>9  (unassigned)</t>
    <t>A  (unassigned)</t>
    <t>B  intra-country scope</t>
    <t>C  (unassigned)</t>
    <t>D  (unassigned)</t>
    <t>E  global scope</t>
    <t>F  reserved</t>
  </list></t>
  <?rfc subcompact="no" ?>

  <t>group ID identifies the multicast group, either permanent or
           transient, within the given scope.</t>

 </list></t>


  <t>The "meaning" of a permanently-assigned multicast address is
  independent of the scope value.  For example, if the "NTP servers
  group" is assigned a permanent multicast address with a group ID of 43
  (hex), then:</t>

 <t><list>
  <t>7F01:000000000043 means all NTP servers on the same system as the sender.</t>

  <t>7F02:000000000043 means all NTP servers on the same link as the sender.</t>

  <t>7F05:000000000043 means all NTP servers at the same site as the sender.</t>

  <t>7F0E:000000000043 means all NTP servers in the internet.</t>

  </list></t>


  <t>Non-permanently-assigned multicast addresses are meaningful only within
a given scope.  For example, a group identified by the non&nbhy;permanent,
intra-site multicast address 7F15:000000000043 at one site bears no
relationship to a group using the same address at a different site, nor
to a non-permanent group using the same group ID with different scope,
nor to a permanent group with the same group&nbsp;ID.</t>


 </section>

 <section title="Special Addresses" anchor="Special">

  <t>There are a number of "special purpose" SIP addresses:</t>

  <t><list>

  <t>The Unspecified Address:   0000:0000:0000:0000</t>

  <t><list>

    <t>This address shall never be assigned to any system.  It may be used
    wherever an address appears, to indicate the absence of an address.
    One example of its use is in the Source Address field of a SIP
    packet sent by an initializing host, before it has learned its
    own address.</t>

  </list></t>

  <t>The Loopback Address:   0000:0000:0000:0001</t>

  <t><list>

    <t>This address may be used by a system to send a SIP packet to itself.</t>

  </list></t>

  <t>Anyone Addresses:   &lt;prefix&gt;&lt;zero&gt; </t>

  <t><list>

    <t>Addresses of this form may be used to send to the "nearest" system
    (according the routing protocols' measure of distance) that "knows"
    it has a unicast address prefix of &lt;prefix&gt;.</t>

    <t>Since hosts know only their subnet prefix(es), and no higher&nbhy;level
    prefixes, a host with the following address:</t>

<t><figure><artwork align="left"><![CDATA[
   +-----------------------------------------------+----------------+
   |                subnet prefix = A              |interface ID = B|
   +-----------------------------------------------+----------------+
]]></artwork></figure></t>

   <t>shall recognize only the following Anyone address as identifying
    itself:</t>

<t><figure><artwork align="left"><![CDATA[
   +-----------------------------------------------+----------------+
   |                subnet prefix = A              |0000000000000000|
   +-----------------------------------------------+----------------+
]]></artwork></figure></t>

    <t>An intra-site router that knows that one of its addresses has the
    format:</t>

<t><figure><artwork align="left"><![CDATA[
   +--------------------------------+--------------+----------------+
   |          site prefix = X       |subnet  ID = Y|interface ID = Z|
   +--------------------------------+--------------+----------------+
]]></artwork></figure></t>

    <t>shall accept packets sent to either of the following two Anyone
    addresses as if they had been sent to the router's own address:</t>

<t><figure><artwork align="left"><![CDATA[
   +--------------------------------+-------------------------------+
   |          site prefix = X       |0000000000000000000000000000000|
   +--------------------------------+-------------------------------+
]]></artwork></figure></t>

<t><figure><artwork align="left"><![CDATA[
   +--------------------------------+--------------+----------------+
   |          site prefix = X       |subnet  ID = Y|0000000000000000|
   +--------------------------------+--------------+----------------+
]]></artwork></figure></t>

    <t>Anyone Addresses work as follows:</t>

   <t><list>

      <t>If any system belonging to subnet A sends a packet to subnet A's
      Anyone address, the packet shall be looped-back within the sending
      system itself, since it is the nearest system to itself with the
      subnet A prefix.  If a system outside of subnet A sends a packet to
      subnet A's Anyone address, the packet shall be accepted by the first
      router on subnet A that the packet reaches.</t>

      <t>Similarly, a packet sent to site X's Anyone address from outside of
      site X shall be accepted by the first encountered router belonging
      to site X, i.e., one of site X's boundary routers.  If a higher-level
      prefix P identifies, say, a particular service provider, then a
      packet sent to &lt;P&gt; &lt;zero&gt; from outside of provider P's facilities
      shall be delivered to the nearest entry router into P's facilities.</t>

   </list></t>

    <t>Anyone addresses are most commonly used in conjunction with the SIP
    source routing header, to cause a packet to be routed via one or more
    specified "transit domains", without the need to identify individual
    routers in those domains.</t>

    <t>The value zero is reserved at each level of every unicast address
    hierarchy, to serve as an Anyone address for that level.</t>

  </list></t>

  <t>The Reserved Multicast Address:   7F0s:0000:0000:0000</t>

  <t><list>
    
    <t>This multicast address (with any scope value, s) is reserved, and
    shall never be assigned to any multicast group.</t>

  </list></t>

  <?rfc subcompact="yes" ?>
  <t><list hangIndent="30" style="hanging">
  <t hangText="The All Systems Addresses:">7F01:0000:0000:0001</t>
  <t hangText="">7F02:0000:0000:0001</t>
  </list></t>
  <?rfc subcompact="no" ?>

  <t><list>
    <t>These multicast addresses identify the group of all SIP systems,
    within scope 1 (intra-system) or 2 (intra-link).</t>
  </list></t>

  <?rfc subcompact="yes" ?>
  <t><list hangIndent="30" style="hanging">
  <t hangText="The All Hosts Addresses:">7F01:0000:0000:0002</t>
  <t hangText="">7F02:0000:0000:0002</t>
  </list></t>
  <?rfc subcompact="no" ?>

  <t><list>
  <t>These multicast addresses identify the group of all SIP hosts,
   within scope 1 (intra-system) or 2 (intra-link).</t>
  </list></t>

  <?rfc subcompact="yes" ?>
  <t><list hangIndent="30" style="hanging">
  <t hangText="The All Routers Addresses:">7F01:0000:0000:0003</t>
  <t hangText="">7F02:0000:0000:0003</t>
   </list></t>
  <?rfc subcompact="no" ?>

  <t><list>
  <t>These multicast addresses identify the group of all SIP routers,
   within scope 1 (intra-system) or 2 (intra-link).</t>
  </list></t>

</list></t>

<t>A host is required to recognize the following addresses as identifying
itself: its own unicast addresses, the Anyone addresses with the same
subnet prefixes as its unicast addresses, the Loopback address, the
All Systems and All Hosts addresses, and any other multicast addresses
to which the host belongs.</t>

<t>A router is required to recognize the following addresses as identifying
itself: its own unicast addresses, the Anyone addresses with the same
subnet or higher-level prefixes as its unicast addresses, the Loopback
address, the All Systems and All Routers addresses, and any other multicast
addresses to which the host belongs.</t>

</section>
</section>

<section title="Packet Size Issues" anchor="PacketSize">

<t>SIP requires that every link in the internet have an MTU of 576 octets or
greater.  On any link that cannot convey a 576-octet packet in one piece,
link-specific fragmentation and reassembly must be provided at a layer
below SIP.</t>

 <t><list>
    <t>(Note: this minimum link MTU is NOT the same as the one in IPv4.
    In IPv4, the minimum link MTU is 68 octets [ <xref
    target="RFC0791"/>, page 25 ];
    576 octets is the minimum reassembly buffer size required in an
    IPv4 system, which has nothing to do with link MTUs.)</t>
  </list></t>

<t>From each link to which a system is directly attached, the system must
be able to accept packets as large as that link's MTU.  Links that have a
configurable MTU, such as PPP links <xref target="RFC1661"/>, should be
configured with an MTU of 600 octets or greater.</t>

<t>SIP systems are expected to implement Path MTU Discovery <xref
target="RFC1191"/>, in order to discover and take advantage of paths with
MTU greater than 576 octets.  However, a minimal SIP implementation
(e.g., in a boot ROM) may simply restrict itself to sending packets no
larger than 576 octets, and omit implementation of Path MTU
Discovery.</t>

<t>Path MTU Discovery requires support both in the SIP layer and in the
packetization layers.  A system that supports Path MTU Discovery at the
SIP layer may serve packetization layers that are unable to adapt to
changes of the path MTU.  Such packetization layers must limit themselves
to sending packets no longer than 576 octets, even when sending to
destinations that belong to the same subnet.</t>

<t><list>
    <t>(Note: Unlike IPv4, it is unnecessary in SIP to set a "Don't Fragment"
    flag in the packet header in order to perform Path MTU Discovery; that
    is an implicit attribute of every SIP packet.  Also, those parts of
    the RFC-1191 procedures that involve use of a table of MTU "plateaus"
    do not apply to SIP, because the SIP version of the "Datagram Too Big"
    message always identifies the exact MTU to be used.)</t>
  </list></t>

    
</section>

<section title="Source Routing Header" anchor="SR">

<t>A Payload Type of &lt;TBD&gt; in the immediately preceding header indicates the
presence of this Source Routing header:</t>

  <t><figure><artwork align="left"><![CDATA[
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Reserved                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Num Addrs   |   Next Addr   |  Payload Type |    Reserved   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                           Address[0]                          +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                           Address[1]                          +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                               .                               .
   .                               .                               .
   .                               .                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                     Address[Num Addrs - 1]                    +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure></t>

  <t><list>
  <t><list hangIndent="20" style="hanging">

      <t hangText="Reserved">Initialized to zero for transmission; ignored
                        on reception.</t>
      <t hangText="Num Addrs">Number of addresses in the Source Routing header.</t>
      <t hangText="Next Addr">Index of next address to be processed;
                        initialized to 0 by the originating system.</t>
      <t hangText="Payload Type">Identifies the type of payload following the
                        Source Routing header.</t>
  </list></t>
  </list></t>


<t>A Source Routing header is not examined or processed until it reaches
the system identified in the Destination Address field of the SIP
header.  In that system, dispatching on the Payload Type of the SIP
(or subsequent) header causes the Source Routing module to be invoked,
which performs the following algorithm:</t>

   <t><list style="symbols">

    <t>If Next Addr &lt; Num Addrs, swap the SIP Destination Address and
       Address[Next Addr], increment Next Addr by one, and re-submit the
       packet to the SIP module for forwarding to the next destination.</t>

    <t>If Next Addr = Num Addrs, dispatch to the local protocol module
       identified by the Payload Type field in the Source Routing header.</t>

    <t>If Next Addr &gt; Num Addrs, send an ICMP Parameter Problem message
       to the Source Address, pointing to the Num Addrs field.</t>
   </list></t>

</section>

<section title="Fragmentation Header" anchor="fragmentation">

<t>A Payload Type of &lt;TBD&gt; in the immediately preceding header indicates the
presence of this Fragmentation header:</t>

<t><figure><artwork align="left"><![CDATA[
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         Identification                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |0 0 M|      Fragment Offset    |  Payload Type |    Reserved   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure></t>

  <t><list>
  <t><list hangIndent="20" style="hanging">

   <t hangText="Identification">A value that changes on each packet sent with
                        the same Source Address, Destination Address,
                        and preceding Payload Type.</t>

   <t hangText="M flag">1 = more fragments; 0 = last fragment.</t>

   <t hangText="Fragment Offset">The offset, in 8-octet chunks, of the following
                        payload, relative to the original, unfragmented
                        payload.</t>

   <t hangText="Payload Type">Identifies the type of payload following the
                        Fragmentation header.</t>

   <t hangText="Reserved">Initialized to zero for transmission; ignored
   on reception.</t>
   </list></t>
   </list></t>

<t>The Fragmentation header is NOT intended to support general, SIP&nbhy;layer
fragmentation.  In particular, SIP routers shall not fragment a SIP
packet that is too big for the MTU of its next hop, except in the special
cases described below; in the normal case, such a packet results in an
ICMP Packet Too Big message being sent back to its source, for use by the
source system's Path MTU Discovery algorithm.</t>

<t>The special cases for which the Fragmentation header is intended are the
following:

<list style="symbols">
   <t>A SIP packet that is "tunneled", either by encapsulation within
       another SIP packet or by insertion of a Source Routing header
       en&nbhy;route, may, after the addition of the extra header fields,
       exceed the  MTU of the tunnel's path; if the original packet is
       576&nbsp;octets or less in length, the tunnel entry system cannot
       respond to the source with a Packet Too Big message, and therefore
       must insert a Fragmentation header and fragment the packet to fit
       within the tunnel's MTU.</t>

   <t>An IPv4 fragment that is translated into a SIP packet, or an
       unfragmented IPv4 packet that is translated into too long a SIP
       packet to fit in the remaining path MTU, must include the SIP
       Fragmentation header, so that it may be properly reassembled at
       the destination SIP system.</t>
     </list></t>

<t>Every SIP system must support SIP fragmentation and reassembly, since
any system may be configured to serve as a tunnel entry or exit point,
and any SIP system may be destination of IPv4 fragments.  All SIP systems
must be capable of reassembling, from fragments, a SIP packet of up to
1024 octets in length, including the SIP header; a system may be capable
of assembling packets longer than 1024 octets.</t>

<t>Routers do not examine or process Fragmentation headers of packets that
they forward; only at the destination system is the Fragmentation header
acted upon (i.e., reassembly performed), as a result of dispatching on
the Payload Type of the preceding header.</t>

<t>Fragmentation and reassembly employ the same algorithm as IPv4, with
the following exceptions:

<list style="symbols">
    <t>All headers up to and including the Fragmentation header are
       repeated in each fragment; no headers or data following the
       Fragmentation header are repeated in each fragment.</t>

   <t>the Identification field is increased to 32 bits, to decrease
       the risk of wraparound of that field within the maximum packet
       lifetime over very high-throughput paths.</t>
     </list></t>

<t>The similarity of the algorithm and the field layout to that of IPv4
enables existing IPv4 fragmentation and reassembly code and data
structures to be re-used with little modification.</t>

</section>

<section title="Changes to Other Protocols" anchor="Changes">

<t>Upgrading IPv4 to SIP entails changes to the associated control protocols,
ICMP and IGMP, as well as to the transport layer, above, and possibly to
the link-layer, below.  This section identifies those changes.</t>

<section title="Changes to ICMP" anchor="ICMP">

<t>SIP uses a subset of ICMP [<xref target="RFC0792"/>,
<xref target="RFC0950"/>,
<xref target="RFC1122"/>,
<xref target="RFC1191"/>,
<xref target="RFC1256"/>],
with a few minor changes and some additions.  The presence of an ICMP
header is indicated by a Payload Type of 1.</t>

<t>One change to all ICMP messages is that, when used with SIP, the ICMP
checksum includes a pseudo-header, like TCP and UDP, consisting of the
SIP Source Address, Destination Address, Payload Length, and Payload
Type (see section 8.3).
</t>

<t>There are a set of ICMP messages called "error messages", each of which,
for IPv4, carries the IPv4 header plus 64 bits or more of data from the
packet that invoked the error message.  When used with SIP, ICMP error
messages carry the first 256 octets of the invoking SIP packet, or the
entire invoking packet if it is shorter than 256&nbsp;octets.
</t>

<t>For most of the ICMP message types, the packets retain the same format
and semantics as with IPv4; however, some of the fields are given new
names to match SIP terminology.
</t>

<t>The changes to specific message types are as follows:
</t>


<t><list>
<t>  Destination Unreachable
</t>

   <t><list>
     <t>The following Codes have different names when used with SIP:
     </t>

  <?rfc subcompact="yes" ?>
  <t><list>  
  <t><list hangIndent="5" style="hanging">
       <t hangText="1 -">destination address unreachable (IPv4 "host unreachable")</t>
       <t hangText="7 -">destination address unknown (IPv4 "dest. host unknown")</t>
       <t hangText="2 -">payload type unknown (IPv4 "protocol unreachable")</t>
       <t hangText="4 -">packet too big (IPv4 "fragmentation needed and DF set")</t>
   </list></t>
   </list></t>
  <?rfc subcompact="no" ?>

    <t>The following Codes retain the same names when used with SIP:
    </t>

  <?rfc subcompact="yes" ?>

  <t><list>
  <t><list hangIndent="5" style="hanging">
          <t hangText="3 -">port unreachable</t>
          <t hangText="5 -">source route failed</t>
          <t hangText="8 -">source host isolated</t>
          <t hangText="13 -">communication administratively prohibited</t>
     </list></t>
    </list></t>
  <?rfc subcompact="no" ?>


     <t>The following Codes are not used with SIP:
     </t>
     
  <?rfc subcompact="yes" ?>

    <t><list>
    <t><list hangIndent="5" style="hanging">
         <t hangText="0 -">net unreachable</t>
         <t hangText="6 -">destination network unknown</t>
         <t hangText="9 -">comm. with dest. network administratively prohibited</t>
         <t hangText="10 -">comm. with dest. host administratively prohibited</t>
         <t hangText="11 -">network unreachable for type of service</t>
         <t hangText="12 -">host unreachable for type of service</t>
     </list></t>
     </list></t>

  <?rfc subcompact="no" ?>

      <t>For "packet too big" messages (Code 4), the minimum legal value
      in the Next-Hop MTU field <xref target="RFC1191"/>
      is 576.
      </t>

    </list></t>      

  <t>Time Exceeded
  </t>

   <t><list>  
    <t>The name of Code 0 is changed to "hop limit exceeded in transit".
    </t>
    </list></t>      
    

  <t>Parameter Problem</t>

   <t><list>  

    <t>The Pointer field is extended to 16 bits and moved to the low&nbhy;order
    end of the second 32-bit word, as follows:
    </t>

<t><figure><artwork align="left"><![CDATA[
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |    Type     |      Code     |            Checksum         |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |          Reserved           |            Pointer          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                           |
      |           first 256 octets of the invoking packet         |
      |                                                           |
]]></artwork></figure></t>
  </list></t>      
  <t>Redirect</t>

   <t><list>  
    <t>Only Code 1 is used for SIP, meaning "redirect packets for the
    destination address".
    </t>
    
    <t>The Redirect header is modified for SIP, to accommodate the 64-bit
    address of the "preferred router" and to retain 64-bit alignment,
    as follows:
    </t>
    
<t><figure><artwork align="left"><![CDATA[
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |      Type     |      Code     |            Checksum         |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                            Reserved                         |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                             |
      +                        Preferred Router                     +
      |                                                             |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                             |
      |             first 256 octets of the invoking packet         |
      |                                                             |
]]></artwork></figure></t>

  </list></t>      


  <t>Router Advertisement</t>

  <t><list>

  <t>The format of the Router Advertisement message is changed to:</t>

<t><figure><artwork align="left"><![CDATA[
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     Type      |     Code      |           Checksum          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |   Num Addrs   |Addr Entry Size|           Lifetime          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                             |
      +                       Router Address[0]                     +
      |                                                             |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                      Preference Level[0]                    |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                          Reserved[0]                        |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                             |
      +                       Router Address[1]                     +
      |                                                             |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                      Preference Level[1]                    |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                          Reserved[1]                        |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                               .                             |
      |                               .                             |
      |                               .                             |
]]></artwork></figure></t>

    <t>The value in the Addr Entry Size field is 4, and all of the Reserved
    fields are initialized to zero by senders and ignored by receivers.
    </t>

  </list></t>      
    

  <t>Router Solicitation</t>
  
  <t><list>
    <t>No changes.
    </t>
  </list></t>      
    
  <t>Echo and Echo Reply
  </t>
  
  <t><list>
    <t>No changes.
    </t>
  </list></t>      
    

  <t>The following ICMP message types are not used with SIP:
  </t>
  
  <?rfc subcompact="yes" ?>
   <t><list>
    <t>Source Quench</t>
    <t>Timestamp</t>
    <t>Timestamp Reply</t>
    <t>Information Request</t>
    <t>Information Reply</t>
    <t>Address Mask Request</t>
    <t>Address Mask Reply</t>
  </list></t>
  <?rfc subcompact="no" ?>


 </list></t>


    
</section>

<section title="Changes to IGMP" anchor="IGMP">

<t>SIP uses the Internet Group Management Protocol, IGMP <xref target="RFC1112"/>. 
The presence of an IGMP header is indicated by a Payload Type of 2.</t>

<t>When used with SIP, the IGMP checksum includes a pseudo-header, like TCP
and UDP, consisting of the SIP Source Address, Destination Address,
Payload Length, and Payload Type (see section 8.3).</t>

<t>The format of an IGMP Host Membership Query message becomes:</t>

<t><figure><artwork align="left"><![CDATA[
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |Version| Type  |    Reserved   |           Checksum            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                            Reserved                           |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure></t>

<t>The format of an IGMP Host Membership Report message becomes:</t>

<t><figure><artwork align="left"><![CDATA[
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |Version| Type  |    Reserved   |           Checksum            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                            Reserved                           |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    +                       Multicast Address                       +
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure></t>


<t>For both message types, the Version number remains 1, and the Reserved
fields are set to zero by senders and ignored by receivers.</t>


</section>
<section title="Changes to Transport Protocols" anchor="Transport">
  

<t>The service interface to SIP has some differences from IPv4's service
interface.  Existing transport protocols that use IPv4 must be changed
to operate over SIP's service interface.  The differences from IPv4 are:

<list style="symbols">
  <t>Any addresses passed across the interface are 64 bits long, rather
     than 32 bits.</t>

  <t>The following IPv4 variables are not passed across the interface:
     Precedence, Type-of-Service, Identifier, Don't Fragment Flag</t>

  <t>SIP options have a different format than IPv4 options.  (For SIP,
     "options" are all headers between, and not including, the SIP header
     and the transport header.  The only IPv4 option currently specified
     for SIP is Loose Source Routing.</t>

  <t>ICMP error messages for SIP that are passed up to the transport
     layer carry the first 256 octets of the invoking SIP packet.</t>
   </list></t>

<t>Transport protocols that use IPv4 addresses for their own purposes,
such as identifying connection state or inclusion in a pseudo-header
checksum, must be changed to use 64-bit SIP addresses for those purposes
instead.</t>

<t>For SIP, the pseudo-header checksums of TCP, UDP, ICMP, and IGMP include
the SIP Source Address, Destination Address, Payload Length, and Payload
Type, with the following caveats:

<list style="symbols">
  <t>If the packet contains a Source Routing header, the destination
       address used in the pseudo-header checksum is that of the final
       destination.</t>

  <t>The Payload Length used in the pseudo-header checksum is the
     length of the transport-layer packet, including the transport
     header.</t>

  <t>The Payload Type used in the pseudo-header checksum is the
       Payload Type from the header immediately preceding the transport
       header.</t>

  <t>When added to the pseudo-header checksum, the Payload Type is
       treated as the left octet of a 16-bit word, with zeros in the
       the right octet, when viewed in IP standard octet order.</t>

  <t>If either of the two addresses used in the pseudo-header checksum
       has its high-order bit set to 1, only the low-order 32-bits of
       that address shall be used in the sum.  The high-order bit is
       used to indicate that the addressed system is an IPv4 system,
       and that the low-order 32-bits of the address contain that system's
       IPv4 address <xref target="IPAE"/>.</t>

   </list></t>

<t>The semantics of SIP service differ from IPv4 service in three ways that
may affect some transport protocols:</t>


  <t><list>
  <t><list style="format (%d)">
  <t>SIP does not enforce maximum packet lifetime.  Any transport
       protocol that relies on IPv4 to limit packet lifetime must
       take this change into account, for example, by providing its
       own mechanisms for detecting and discarding obsolete packets.</t>

  <t>SIP does not checksum its own header fields.  Any transport
       protocol that relies on IPv4 to assure the integrity of the
       source and destinations addresses, packet length, and transport
       protocol identifier must take this change into account.  In
       particular, when used with SIP, the UDP checksum is mandatory,
       and ICMP and IGMP are changed to use a pseudo&nbhy;header checksum.</t>

  <t>SIP does not (except in special cases) fragment packets that
       exceed the MTU of their delivery paths.  Therefore, a transport
       protocol must not send packets longer than 576&nbsp;octets unless
       it implements Path MTU Discovery <xref target="RFC1191"/>
       and is capable of
       adapting its transmitted packet size in response to changes of
       the path MTU.</t>
   </list></t>
   </list></t>


</section>
<section title="Changes to Link-Layer Protocols" anchor="Link-Layer">
  

<t>Link-layer media that have an MTU less than 576 must be enhanced
with&nbsp;a link-specific fragmentation and reassembly mechanism, to
support&nbsp;SIP.</t>

<t>For links on which ARP is used by IPv4, the identical ARP protocol is
used for SIP.  The low-order 32-bits of SIP addresses are used wherever
IPv4 addresses would appear; since ARP is used only among systems on
the same subnet, the high-order 32-bits of the SIP addresses may be
inferred from the subnet prefix (assuming the subnet prefix is at
least 32 bits long).  [This is subject to change -- see Appendix B.]</t>

</section>
</section>

<section title="Security Considerations" anchor="Security">

  <t>&lt;to be done&gt; </t>

</section>


<section title="Acknowledgments" anchor="Ack">

    <t>The author acknowledges the many helpful suggestions and the words
    of encouragement from Dave Clark, Dave Crocker, Deborah Estrin, Bob
    Hinden, Christian Huitema, Van Jacobson, Jeff Mogul, Dave Nichols,
    Erik Nordmark, Dave Oran, Craig Partridge, Scott Shenker, Paul
    Tsuchiya, Lixia Zhang, the members of End-to-End Research Group and
    the IPAE Working Group, and the participants in the big-internet and
    sip mailing lists.  He apologizes to those whose names he has not
    explicitly listed.  [If you want to be on the list in the next draft,
    just let him know!]
    </t>
   
    <t>Editor's note:  Steve Deering was employed by the Xerox Palo
    Alto Research Center in Palo Alto, CA  USA when this work was done.</t>


</section>

</middle>

<back>

  <references title="Informative References">

  &rfc0791;
  &rfc0792;
  &rfc0950;
  &rfc0951;
  &rfc1112;
  &rfc1122;
  &rfc1191;
  &rfc1256;
  &rfc1661;
  &rfc1710;
  &rfc1752;
  &rfc1883;
  &rfc8200;

<!-- draft-crocker-ip-encaps (Expired) -->
  <reference anchor="IPAE">
        <front>
            <title>IP Address Encapsulation (IPAE): A Mechanism for Introducing a New IP</title>
            <author initials="D" surname="Crocker" fullname="Dave Crocker">
                <organization />
            </author>
            <author initials="R" surname="Hinden" fullname="Robert Hinden">
                <organization />
            </author>
            <date month="June" year="2002" />
        </front>
   <seriesInfo name="Work in Progress," value="draft-crocker-ip-encaps-01"/>
  </reference>

    <reference anchor="SIP-ADDR">
        <front>
            <title>Simple Internet Protocol (SIP) Addressing and
            Routing</title>
            <author initials="S" surname="Deering" fullname="Stephen Deering">
                <organization />
            </author>
            <date month="November" year="1992" />
        </front>
        <seriesInfo name="Internet" value="Draft" />
    </reference>

  </references>

<section title="SIP Design Rationale" anchor="AppendixA">

<t>&lt;this section still to be done&gt;</t>

<t>Fields present in IPv4, but absent in SIP:</t>

    <t><list>
    <t><list hangIndent="18" style="hanging">

    <?rfc subcompact="yes" ?>

    <t hangText="Header Length">Not needed; SIP header length is fixed.</t>

    <t hangText=" "> </t>

    <t hangText="Precedence &amp;"></t>

    <t hangText="Type of Service">Not used; transport-layer Port fields (or perhaps a
                   to-be-defined value in the Reserved field of the SIP
                   header) may be used for classifying packets at a
                   granularity finer than host-to-host, as required for
                   special handling.</t>

    <?rfc subcompact="no" ?>

    <t hangText="Header Checksum">Not used; transport pseudo-header checksum
                   protects destinations from accepting corrupted
                   packets.</t>
    </list></t>
    </list></t>

<t>Need to justify:</t>

  <?rfc subcompact="yes" ?>
  <t><list>
  <t>change of Total Length -> Payload Length, excluding header</t>

  <t>change of Protocol -> Payload Type</t>

  <t>change of Time to Live -> Hop Limit</t>

  <t>movement of fragmentation fields out of fixed header</t>

  <t>bigger minimum MTU, and reliance on PMTU Discovery</t>

  <?rfc subcompact="no" ?>
  </list></t>

</section>

<section title="Future Directions" anchor="Future">

<t>SIP as specified above is a fully functional replacement for IPv4, with
a number of improvements, particularly in the areas of scalability of
routing and addressing, and performance.  Some additional improvements
are still under consideration:

<list style="symbols">
  <t>ARP may be modified to carry full 64-bit addresses, and to use
     link-layer multicast addresses, rather than broadcast addresses.</t>

  <t>The 28-bit Reserved field in the SIP header may be defined as a
     "Flow ID", or partitioned into a Type of Service field and a
     Flow ID field, for classifying packets deserving of special
     handling, e.g., non-default quality of service or real-time service.
     On the other hand, the transport-layer port fields may be adequate
     for performing any such classification.  (One possibility would be
     simply to remove the port fields from TCP &amp; UDP and append them to
     the SIP header, as in XNS.)</t>

  <t>A new ICMP "destination has moved" message may defined, for
     re&nbhy;routing to mobile hosts or subnets, and to domains that have
     changed their address prefixes.</t>

  <t>An explicit Trace Route message or option may be defined; the current
     IPv4 traceroute scheme will work fine with SIP, but it does not
     work for multicast, for which it has become very apparent that
     management and debugging tools are needed.</t>

  <t>A new Host-to-Router protocol may be specified, encompassing the
     requirements of router discovery, black-hole detection,
     auto-configuration of subnet prefixes, "beaconing" for mobile hosts,
     and, possibly, address resolution.  The OSI End System To Intermediate
     System Protocol may serve as a good model for such a protocol.</t>

  <t>The requirement that SIP addresses be strictly bound to interfaces
     may be relaxed, so that, for example, a system might have fewer
     addresses than interfaces.  There is some experience with this
     approach in the current Internet, with the use of "unnumbered links"
     in routing protocols such as OSPF.</t>

  <t>Authentication and integrity-assurance mechanisms for all clients of
     SIP, including ICMP and IGMP, may be specified, possibly based on
     the Secure Data Network System (SNDS) SP-3 or SP-4 protocol.</t>
   </list></t>

</section>     
  

</back>

</rfc>
