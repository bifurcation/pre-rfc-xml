<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
    <!ENTITY rfc2025 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2025.xml'>
    <!ENTITY rfc0854 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.0854.xml'>
    <!ENTITY rfc1035 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1035.xml'>
    <!ENTITY rfc3008 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3008.xml'>
    <!ENTITY rfc2203 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2203.xml'>
    <!ENTITY rfc2623 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2623.xml'>
    <!ENTITY rfc3530 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3530.xml'>
    <!ENTITY rfc2478 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2478.xml'>
    <!ENTITY rfc2743 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2743.xml'>
    <!ENTITY rfc2744 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2744.xml'>
    <!ENTITY rfc1964 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1964.xml'>
    <!ENTITY rfc2401 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2401.xml'>
    <!ENTITY rfc2408 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2408.xml'>
    <!ENTITY rfc2409 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2409.xml'>
    <!ENTITY rfc4251 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4251.xml'>
    <!ENTITY rfc4301 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4301.xml'>
    <!ENTITY rfc4306 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4306.xml'>
    <!ENTITY rfc5056 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5056.xml'>
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc rfcedstyle="yes" ?>
<?rfc subcompact="no" ?>

<rfc number="5386" category="std">
    <front>
	<title abbrev="BTNS IPsec">Better-Than-Nothing Security: An
	Unauthenticated Mode of IPsec</title>


	<author initials='N.' surname="Williams" fullname='Nicolas
	    Williams'>
	    <organization abbrev="Sun">Sun Microsystems</organization>
	    <address>
		<postal>
		    <street>5300 Riata Trace Ct</street>
		    <city>Austin</city> <region>TX</region>
		    <code>78727</code> <country>US</country>
		</postal>
		<email>Nicolas.Williams@sun.com</email>
	    </address>
	</author>
	<author initials="M." surname="Richardson" fullname="Michael C.
	    Richardson">
	    <organization abbrev="SSW">Sandelman Software
		Works</organization>
	    <address>
		<postal>
		    <street>470 Dawson Avenue</street>
		    <city>Ottawa</city>
		    <region>ON</region>
		    <code>K1Z
			5V7</code>
		    <country>CA</country>
		</postal>
		<email>mcr@sandelman.ottawa.on.ca</email>
		<uri>http://www.sandelman.ottawa.on.ca/</uri>
	    </address>
	</author>
        <date month="November" year="2008"/>
	<area>Security</area>
	<workgroup>NETWORK WORKING GROUP</workgroup>


	<keyword>Internet-Draft</keyword>
	<abstract><t>This document specifies how to use the Internet Key
		Exchange (IKE) protocols, such as IKEv1 and IKEv2, to
		setup "unauthenticated" security associations (SAs) for
		use with the IPsec Encapsulating Security Payload (ESP)
		and the IPsec Authentication Header (AH).  No changes to
                IKEv2 bits-on-the-wire 
		are required, but Peer Authorization Database
		(PAD) and Security Policy Database (SPD) extensions are
		specified.  Unauthenticated IPsec is herein referred to
		by its popular acronym, "BTNS" (Better-Than-Nothing
		Security).</t>
	</abstract>
    </front>

    <middle>
        <section title="Introduction">

	    <t>Here we describe how to establish unauthenticated IPsec
		SAs using IKEv2 <xref target="RFC4306"/> and
		unauthenticated public keys.  No new on-the-wire
		protocol elements are added to IKEv2.</t>

	    <t>The <xref target="RFC4301"/> processing model is
		assumed.</t>

	    <t>This document does not define an opportunistic BTNS mode
		of IPsec whereby nodes may fall back to unprotected IP
		when their peers do not support IKEv2, nor does it
		describe "leap-of-faith" modes or "connection
		latching".</t>

	    <t>See <xref target="RFC5387"/> for
		the applicability and uses of BTNS and definitions of
		these terms.</t>

	    <t>This document describes BTNS in terms of IKEv2 and <xref
		    target="RFC4301"/>'s concepts.  There is no reason
		why the same methods cannot be used with IKEv1 <xref
		    target="RFC2408"/>, <xref target="RFC2409" />, and
		<xref target="RFC2401" />; however, those specifications
		do not include the PAD concepts, and therefore it may
		not be possible to implement BTNS on all compliant
		RFC2401 implementations.</t>

	    <section title="Conventions Used in This Document">
		<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
		    "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
		    and "OPTIONAL" in this document are to be interpreted as
		    described in <xref target="RFC2119"/>.</t>
	    </section>
        </section>

	<section anchor="core" title="BTNS">
	    <t>The IPsec processing model is hereby modified as follows:
		<list style='symbols'>
		    <t>A new ID type is added: 'PUBLICKEY'.  IDs of this
			type have public keys as values.  This ID type
			is not used on the wire.</t>

		    <t>PAD entries that match on PUBLICKEY IDs are
			referred to as "BTNS PAD entries".  All other
			PAD entries are referred to as "non-BTNS PAD
			entries".</t>

		    <t>BTNS PAD entries may match on specific peer
			PUBLICKEY IDs (or public key fingerprints) or
			on all peer public keys.  The latter is referred
			to as the "wildcard BTNS PAD entry".</t>

		    <t>BTNS PAD entries MUST logically (see below)
			follow all other PAD entries (the PAD being an
			ordered list).</t>

		    <t>At most one wildcard BTNS PAD entry may appear in
			the PAD, and, if present, MUST be the last entry
			in the PAD (see below).</t>

		    <t>Any peer that uses an IKEv2 AUTH method involving
			a digital signature (made with a private key to
			a public key cryptosystem) may match a BTNS PAD
			entry, provided that it matches no non-BTNS PAD
			entries.  Suitable AUTH methods as of August
			2007 are: RSA Digital Signature (method #1) and
			DSS Digital Signature (method #3); see <xref
			    target="RFC4306"/>, section 3.8.</t>

		    <t>A BTNS-capable implementation of IPsec will first
			search the PAD for non&nbhy;BTNS entries matching a
			peer's ID.  If no matching non&nbhy;BTNS PAD entries
			are found, then the peer's ID MUST be
			coerced to be of 'PUBLICKEY' type with the
			peer's public key as its value.  The PAD is
			then searched again for matching BTNS PAD
			entries.  This ensures that BTNS PAD entries
			logically follow non&nbhy;BTNS PAD entries.  A single
			PAD search that preserves these semantics is
			allowed.</t>

		    <t>A peer that matches a BTNS PAD entry is referred
			to as a "BTNS peer".  Such a peer is
			"authenticated" by verifying the signature
			in its IKEv2 AUTH payload with the public key
			from the peer's CERT payload.</t>

		    <t>Of course, if no matching PAD entry is found,
			then the IKE SA is rejected as usual.</t>

		    <t>A new flag for SPD entries: 'BTNS_OK'.  Traffic
			to/from peers that match the BTNS PAD entry will
			match only SPD entries that have the BTNS_OK
			flag set.  The SPD may be searched by address or
			by ID (of type PUBLICKEY for BTNS peers), as
			per the IPsec processing model <xref
			    target="RFC4301"/>.  Searching by ID in this
			case requires creation of SPD entries that are
			bound to public key values. This could be used
			to build "leap-of-faith" <xref
			    target="RFC5387"/> behavior (see <xref target="lof" />), for
			example.</t>

		</list>
	    </t>

	    <t>Nodes MUST reject IKE_SA proposals from peers that match
		non&nbhy;BTNS PAD entries but fail to authenticate
		properly.</t>

	    <t>Nodes wishing to be treated as BTNS nodes by their peers
		MUST include bare public key CERT payloads.  Currently
		only bare RSA public key CERT payloads are defined,
		which means that BTNS works only with RSA public keys at
		this time (see "Raw RSA Key" in section 3.6 of <xref
		    target='RFC4306'/>).  Nodes MAY also include any
		number of certificates that bind the same public key.
		These certificates do not need to be pre-shared with
		their peers (e.g., because ephemeral, self-signed).  RSA
		keys for use in BTNS may be generated at any time, but
		connection latching <xref
		    target="ConnLatch"/>
		requires that they remain constant between IKEv2
		exchanges that are used to establish SAs for latched
		connections.</t>

	    <t>To preserve standard IPsec access control semantics:
		
		<list style='symbols'>
		
		    <t>BTNS PAD entries MUST logically follow all
			non-BTNS PAD entries,</t>

		    <t>the wildcard BTNS PAD entry MUST be the last
			entry in the PAD, logically, and</t>

		    <t>the wildcard BTNS PAD entry MUST have ID
			constraints that do not logically overlap those
			of other PAD entries.</t>

		</list>

	    </t>

	    <t>As described above, the logical PAD ordering requirements
		can easily be implemented by searching the PAD twice at
		peer authentication time: once using the peer-asserted
		ID, and if that fails, once using the peer's public key
		as a PUBLICKEY ID.  A single pass implementation that
		meets this requirement is permitted.</t>

	    <t>The BTNS entry ID constraint non-overlap requirement can
		easily be implemented by searching the PAD twice: once
		when BTNS peers authenticate, and again when BTNS peers
		negotiate child SAs.  In the first pass, the PAD is
		searched for a matching PAD entry as described above.  
                In the second, it is searched to make sure that BTNS
		peers' asserted child SA traffic selectors do not
		conflict with non-BTNS PAD entries.  Single pass
		implementations that preserve these semantics are
		feasible.</t>

	</section>

        <section title="Usage Scenarios">
	    <t>In order to explain the above rules, a number of scenarios
		will be examined.  The goal here is to persuade the reader
		that the above rules are both sufficient and
		necessary.</t>

	    <t>This section is informative only.</t>

	    <figure anchor="networkdiagram" title="Reference Network Diagram">
		<preamble>
		    To explain the scenarios, a reference diagram
		    describing an example network will be used. It is
		    as follows:
		</preamble>
		<artwork>
                          [Q]  [R]             
     AS1                   .    .              AS2                 
  [A]----+----[SG-A].......+....+.......[SG-B]-------[B]
                           ......               \
                           ..PI..                ----[btns-B]
                           ......
              [btns-C].....+....+.......[btns-D]
		</artwork>
		<postamble></postamble>
	    </figure>

	    <t>In this diagram, there are eight systems.  Six systems are end-nodes
   (A, B, C, D, Q, and R).  Two are security gateways (SG-A, SG-B)
   protecting networks on which [A] and [B] reside.  Node [Q] is IPsec
   and BTNS capable.  Node [R] is a simple node, with no IPsec or BTNS
   capability.  Nodes [C] and [D] are BTNS capable.</t>

	    <t>Nodes [C] and [Q] have fixed addresses.  Node [D] has a
                non-fixed address.</t>

            <t> We will examine how these various nodes communicate with
                node [SG-A] and/or how [SG-A] rejects communications with some
                such nodes.  In the first example, we examine [SG-A]'s point of
                view. In the second example, we look at [Q]'s point of view.
                In the third example, we look at [C]'s point of view. 
</t>
	    <t>PI is the Public Internet ("The Wild").</t>

	    <section anchor="example_sgA" title="Example #1: A Security Gateway">
		<t>The machine that we will focus on in this example is [SG-A], a
		    firewall device of some kind that we wish to
		    configure to respond to BTNS connections from
		    [C]. </t>

		<t>[SG-A] has the following PAD and SPD entries: 
		    <figure anchor="sgA_pad" title="[SG-A] PAD Table">
			<preamble>
			</preamble>
			<artwork>
                             Child SA
      Rule Remote ID        IDs allowed  SPD Search by
      ---- ---------        -----------  -------------
       1   &lt;B's ID&gt;         &lt;B's network&gt;  by-IP
       2   &lt;Q's ID&gt;         &lt;Q's host&gt;     by-IP
       3   PUBLICKEY:any         ANY       by-IP
			</artwork>
			<postamble>The last entry is the BTNS
			    entry.</postamble>
		    </figure>

		</t>
		<t>Note that [SG-A]'s PAD entry has one and only one
		    wildcard PAD entry: the BTNS catch-all PAD entry as
                    the last entry,
		    as described in <xref target="core"/>.</t>
		<t>&lt;Child SA IDs allowed&gt; and &lt;SPD Search
		    by&gt; are from <xref target="RFC4301"/> Section
		    4.4.3.</t>
		<t>
		    <figure anchor="sgA_spd" title="[SG-A] SPD Table">
			<preamble>
			</preamble>
			<artwork>
      Rule Local Remote Next Layer BTNS  Action
            addr  addr   Protocol   ok     
      ---- ----- ------ ---------- ----  -----------------------
       1   [A]    [R]      ANY      N/A  BYPASS
       2   [A]    [Q]      ANY      no   PROTECT(ESP,tunnel,AES,
                                                     SHA256)
       3   [A]     B-net   ANY      no   PROTECT(ESP,tunnel,AES,
                                                     SHA256)
       4   [A]     ANY     ANY      yes  PROTECT(ESP,transport,
                                                     integr+conf)
			</artwork>
			<postamble></postamble>
		    </figure>
		</t>
		<t>The processing by [SG-A] of SA establishment attempts by various peers is as
		    follows:
		    <list style='symbols'>
			<t>[Q] does not match PAD entry #1 but does match
			    PAD entry #2.  PAD processing stops, then the
			    SPD is searched by [Q]'s ID to find entry #2.
			    CHILD SAs are then allowed that have [SG-A]'s
			    and [Q]'s addresses as the end-point
			    addresses.</t>
			<t>[SG-B] matches PAD entry #1.  PAD processing
			    stops, then the SPD is searched by [SG-B]'s ID
			    to find SPD entry #3.  CHILD SAs are then
			    allowed that have [SG-A]'s address and any
			    addresses from B's network as the end-point
			    addresses.</t>
			<t>[R] does not initiate any IKE SAs; its traffic
			    to [A] is bypassed by SPD entry #1.</t>
			<t>[C] does not match PAD entries #1 or #2 but
			    does match entry #3, the BTNS wildcard PAD
			    entry.  The SPD is searched by [C]'s address,
			    and SPD entry #4 is matched.  CHILD SAs are
			    then allowed that have [SG-A]'s address and [C]'s
			    address as the end-point addresses, provided
			    that [C]'s address is neither [Q]'s nor any of
			    [B]'s (see <xref target="core"/>).  See the
			    last bullet item below.</t>
			<t>A rogue BTNS node attempting to assert [Q]'s or
			    [B]'s addresses will either match the PAD
			    entries for [Q] or [B] and fail to authenticate
			    as [Q] or [B], in which case they are rejected,
			    or they will match PAD entry #3 but will not
			    be allowed to create CHILD SAs with [Q]'s or
			    [B]'s addresses as traffic selectors.</t>
			<t>A rogue BTNS node attempting to establish an
			    SA whereby the rogue node asserts [C]'s
			    address will succeed at establishing such an
			    SA.  Protection for [C] requires additional
			    bindings of [C]'s specific BTNS ID (that is,
			    its public key) to its traffic flows through
			    connection latching and channel binding 
			    or through leap-of-faith, none of which are described
			    here.</t>
		    </list>
		</t>
	    </section>

	    <section title="Example #2: A Mixed End-System ">
                <t>[Q] is an NFSv4 server.</t>
		<t>[Q] is a native IPsec implementation, and its
                    NFSv4 implementation is IPsec-aware.</t>
		<t>[Q] wants to protect all traffic with [A]. [Q] also wants
                    to protect NFSv4 traffic with all peers. Its PAD and
		    SPD are configured as follows:
		    <figure anchor="Q_pad" title="[Q] PAD Table">
			<preamble>
			</preamble>
			<artwork>
                             Child SA
      Rule Remote ID        IDs allowed  SPD Search by
      ---- ---------        -----------  -------------
       1   &lt;[A]'s ID&gt;       &lt;[A]'s address&gt; by-IP
       2   PUBLICKEY:any    ANY             by-IP
			</artwork>
			<postamble>The last entry is the BTNS
			    entry.</postamble>
		    </figure>
		</t>
		<t>
		    <figure anchor="Q_spd" title="[Q] SPD Table">
			<preamble>
			</preamble>
			<artwork>
      Rule Local Remote Next Layer BTNS  Action
            addr  addr   Protocol   ok     
      ---- ----- ------ ---------- ----  -----------------------
       1    [Q]    [A]     ANY      no   PROTECT(ESP,tunnel,AES,
                                                     SHA256)
       2    [Q]    ANY     ANY      yes  PROTECT(ESP,transport,
            with                                      integr+conf)
          port 2049
			</artwork>
			<postamble></postamble>
		    </figure>
		</t>
		<t>The same analysis shown above in <xref
			target="example_sgA"/> applies here with respect
		    to [SG-A], [C], and rogue peers.
                    The second SPD entry permits any BTNS-capable node to
                    negotiate a port-specific SA to port 2049, the port on
                    which NFSv4 runs. 
                    Additionally,
		    [SG-B] is treated as a BTNS peer as it is not known to
		    [Q], and therefore any host behind [SG-B] can access the
		    NFSv4 service on [Q]. As [Q] has no formal
		    relationship with [SG-B], rogues can impersonate
		    [B] (i.e., assert [B]'s addresses).</t>
	    </section>

	    <section title="Example #3: A BTNS-Only System">
		<t>[C] supports only BTNS and wants to use BTNS to protect
		    NFSv4 traffic.  Its PAD and SPD are configured as
		    follows:
		    <figure anchor="C_pad" title="[Q] PAD Table">
			<preamble>
			</preamble>
			<artwork>
                             Child SA
      Rule Remote ID        IDs allowed  SPD Search by
      ---- ---------        -----------  -------------
       1   PUBLICKEY:any    ANY          by-IP
			</artwork>
			<postamble>The last (and only) entry is the BTNS
			    entry.</postamble>
		    </figure>
		</t>
		<t>
		    <figure anchor="C_spd" title="[SG-A] SPD Table">
			<preamble>
			</preamble>
			<artwork>
      Rule Local Remote Next Layer BTNS  Action
            addr  addr   Protocol   ok     
      ---- ----- ------ ---------- ----  -----------------------
       1    [C]    ANY      ANY      yes  PROTECT(ESP,transport,
                  with                               integr+conf)
                  port
                  2049

       2    [C]    ANY      ANY      N/A  BYPASS
			</artwork>
			<postamble></postamble>
		    </figure>
		</t>
                <t>The analysis from <xref target="example_sgA" /> applies as follows:
		    <list style='symbols'>
			<t>Communication with [Q] on port 2049 matches
                            SPD entry number 1. This causes [C] to initiate
                            an IKEv2 exchange with [Q]. The PAD entry on [C]
                            causes it to not care what identity [Q]
                            asserts.  Further authentication (and channel
                            binding) could occur within the NFSv4 protocol.
                        </t>
			<t>Communication with [A], [B], or any other internet
                            machine (including [Q]), occurs in the clear,
                            so long as it is not
                            on port 2049.</t>
			<t>All analysis about rogue BTNS nodes applies, but 
                           they can only assert SAs for port 2049.</t>
                    </list>
                 </t>
	    </section>

	    <section title="Miscellaneous Comments">
		<t>If [SG-A] were not BTNS capable, then it would not have
		    PAD and SPD entries #3 and #4, respectively, in example #1.  Then [C]
		    would be rejected as usual under the standard IPsec
		    model <xref
			target="RFC4301"/>.</t>
		<t>Similarly, if [Q] were not BTNS capable, then it would
		    not have PAD and SPD entries #2 in example #2.  Then [C] would be
		    rejected as usual under the standard IPsec model
		    <xref target="RFC4301"/>.</t>
	    </section>
	</section>

        <section title="Security Considerations">
	    <t>Unauthenticated security association negotiation is
		subject to man-in-the-middle (MITM) attacks
                and should be used with
		care.  Where security infrastructures are lacking, this
		may indeed be better than nothing.</t>
	    <t>Use with applications that bind authentication at
		higher network layers to secure channels at lower layers
		may provide one secure way to use unauthenticated IPsec,
		but this is not specified herein.</t>
	    <t>The BTNS PAD entry must be last and its child SA ID constraints
               must be non-overlapping with any other PAD entry, as
               described in <xref target="core"/>.  This will ensure that no BTNS
               peer can impersonate another IPsec non-BTNS peer. </t>

	    <section title="Connection Latching and Channel Binding">
		<t>BTNS is subject to MITM attacks.  One way to protect
		    against MITM attacks subsequent to initial
		    communications is to use "connection latching" <xref
			target="ConnLatch"/>.
                    In connection latching, upper layer protocols (ULPs) cooperate with IPsec
                    to bind discrete packet flows to
		    sequences of similar SAs. Connection latching requires
                    native IPsec implementations.</t>

		<t>MITMs can be detected by using application-layer
		    authentication frameworks and/or mechanisms, such as
		    the GSS-API <xref target="RFC2743"/>, with channel
		    binding <xref target="RFC5056"/>.  IPsec "channels"
		    are nothing other than latched connections.</t>
	    </section>

	    <section anchor="lof" title="Leap-of-Faith (LoF) for BTNS">
		<t>"Leap of faith" is the term generally used when a  
                    user accepts the assertion that a given key identifies a
		    peer on the first communication (despite a lack of strong
		    evidence for that assertion), and then remembers
                    this association for future communications.
                    Specifically this is a common mode of operation for Secure Shell <xref
			target="RFC4251"/> clients. When a server
		    is encountered for the first time, the Secure Shell
                    client may ask
		    the user whether to accept the server's public key.
                    If so, the client records the server's name (as given by the user)
                    and public key in a database.</t>

		<t>Leap of faith can work in a similar way for BTNS
		    nodes, but it is currently still being designed and
		    specified by the IETF BTNS WG.</t>
	    </section>
        </section>

        <section title="Acknowledgements">
            <t>Thanks to the following reviewer: Stephen Kent.</t>
        </section>
    </middle>

    <back>
	<references title="Normative References">
	    &rfc2119; &rfc4301;
	</references>
	<references title="Informative References">
&rfc2401;
&rfc2408;
&rfc2409;
&rfc2743;
&rfc4251;
&rfc4306;
&rfc5056;

<reference anchor="ConnLatch">
	<front>
<title>IPsec Channels: Connection Latching</title>
	<author initials="N" surname="Williams" fullname="Nicolas Williams">
<organization/>
</author>
<date month="April" day="14" year="2008"/>
</front>
<seriesInfo name="Work in" value="Progress"/>
<format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-btns-connection-latching-07.txt"/>
</reference>

	<reference anchor="RFC5387">
	<front>
	<title>Problem and Applicability Statement for Better-Than-Nothing Security (BTNS)</title>
	<author initials="J" surname="Touch" fullname="Joseph Touch">
<organization/>
</author>
	<author initials="D" surname="Black" fullname="David Black">
<organization/>
</author>
	<author initials="Y" surname="Wang" fullname="Yu-Shun Wang">
<organization/>
</author>
<date month="November" year="2008"/>
</front>
<seriesInfo name="RFC" value="5387"/>

</reference>

        </references>
    </back>

</rfc>
