<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc compact="yes" ?>
<?rfc symrefs="yes"?>
<?rfc subcompact="no" ?>
<?rfc rfcedstyle="yes"?>

<rfc category="std"
     ipr="trust200902"
     number="6525"
     submissionType="IETF"
     consensus="yes">

<front>
<title abbrev="SCTP Stream Reconfiguration">
Stream Control Transmission Protocol (SCTP) Stream Reconfiguration
</title>

<!-- ************** RANDALL STEWART ***************-->
<author initials="R. R." surname="Stewart" fullname="Randall R. Stewart">
<organization>Adara Networks</organization>
<address>
    <postal>
        <street></street>
        <street></street>
        <city>Chapin</city> <region>SC</region>
        <code>29036</code>
        <country>USA</country>
    </postal>
    <email>randall@lakerest.net</email>
</address>
</author>
<!-- ************** MICHAEL TUEXEN *************** -->
<author initials="M." surname="Tuexen" fullname="Michael Tuexen">
<organization abbrev="Muenster Univ. of Appl. Sciences">
              Muenster University of Applied Sciences</organization>
<address>
    <postal>
        <street>Stegerwaldstr. 39</street>
        <city>48565 Steinfurt</city>
        <country>DE</country>
    </postal>
    <email>tuexen@fh-muenster.de</email>
</address>
</author>
<!-- ************** PETER LEI ***************-->
<author initials="P." surname="Lei" fullname="Peter Lei">
<organization>Cisco Systems, Inc.</organization>
<address>
    <postal>
        <street>9501 Technology Blvd.</street>
        <street>West Office Center</street>
        <city>Rosemont</city> <region>IL</region>
        <code>60018</code>
        <country>USA</country>
    </postal>
    <email>peterlei@cisco.com</email>
</address>
</author>

<date month="February" year="2012" />

<abstract>
<t>Many applications that use the Stream Control Transmission Protocol (SCTP) want the ability to "reset" a stream.
The intention of resetting a stream is to set the numbering sequence of
the stream back to 'zero' with a corresponding notification to the application
layer that the reset has been performed. Applications requiring this
feature want it so that they can "reuse" streams for different purposes
but still utilize the stream sequence number so that the application can
track the message flows. Thus, without this feature, a new use of an old
stream would result in message numbers greater than expected, unless
there is a protocol mechanism to "reset the streams back to zero".
This document also includes methods for resetting the transmission sequence
numbers, adding additional streams, and resetting all stream sequence
numbers.</t>
</abstract>
</front>

<middle>
<section title="Introduction">
<t>Many applications that use SCTP as defined in <xref target="RFC4960"/>
want the ability to "reset" a stream.
The intention of resetting a stream is to set the Stream Sequence Numbers
(SSNs)
of the stream back to 'zero' with a corresponding notification to the
application layer that the reset has been performed. Applications requiring
this feature want to "reuse" streams for different purposes but still
utilize the SSN so that the application can track the
message flows. Thus, without this feature, a new use of an old stream
would result in message numbers greater than expected, unless there is a
protocol mechanism to "reset the streams back to zero". This document
also includes methods for resetting the Transmission Sequence Numbers (TSNs),
adding additional streams, and resetting all SSNs.</t>

<t>The sockets API for SCTP defined in <xref target="RFC6458"/>
exposes the sequence numbers used by SCTP for user message transfer.
Therefore, resetting them can be used by application writers. Please
note that the corresponding sequence number for TCP is not exposed
via the sockets API for TCP.</t>
</section>

<section title="Conventions">
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in
<xref target="RFC2119"/>.</t>
</section>

<section title="New Chunk Type">
<t>This section defines the new chunk type that will be used to
reconfigure streams.
<xref target="chunktable"/> illustrates the new chunk type.</t>
<texttable anchor="chunktable">
<ttcol align='left'>Chunk Type</ttcol>
<ttcol align='left'>Chunk Name</ttcol>
<c>130</c> <c>Re-configuration Chunk (RE-CONFIG)</c>
</texttable>
<t>It should be noted that the format of the RE-CONFIG chunk requires
that the receiver ignore the chunk if it is not understood and continue
processing all chunks that follow.
This is accomplished by the use of the upper bits of the chunk type
as described in Section&nbsp;3.2 of <xref target="RFC4960"/>.</t>
<t>All transported integer numbers are in "network byte
order", a.k.a. Big Endian.</t>

<section anchor="chunk"
         title="RE-CONFIG Chunk">

<t>This document adds one new chunk type to SCTP. The chunk has
the following format:</t>

<figure>
<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Type = 130    |  Chunk Flags  |      Chunk Length             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
\                                                               \
/                  Re-configuration Parameter                   /
\                                                               \
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
\                                                               \
/             Re-configuration Parameter (optional)             /
\                                                               \
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>

<t><list style="hanging">
<t hangText="Chunk Type: 1 byte (unsigned integer)">
<vspace blankLines="0"/>
This field holds the IANA-defined chunk type for the RE-CONFIG
chunk. The value of this field is 130.</t>

<t hangText="Chunk Flags: 1 byte (unsigned integer)">
<vspace blankLines="0"/>
This field is set to 0 by the sender and ignored by the receiver.</t>

<t hangText="Chunk Length: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the length of the chunk in bytes, including the Chunk Type,
Chunk Flags, and Chunk Length.</t>

<t hangText="Re-configuration Parameter">
<vspace blankLines="0"/>
This field holds a Re-configuration Request Parameter or a
Re&nbhy;configuration Response Parameter.</t>

</list></t>

<t>Note that each RE-CONFIG chunk holds at least one parameter and
at most two parameters.
Only the following combinations are allowed:
<list style='numbers'>
<t>Outgoing SSN Reset Request Parameter.</t>
<t>Incoming SSN Reset Request Parameter.</t>
<t>Outgoing SSN Reset Request Parameter, Incoming SSN Reset Request Parameter.</t>
<t>SSN/TSN Reset Request Parameter.</t>
<t>Add Outgoing Streams Request Parameter.</t>
<t>Add Incoming Streams Request Parameter.</t>
<t>Add Outgoing Streams Request Parameter, Add Incoming Streams Request Parameter.</t>
<t>Re-configuration Response Parameter.</t>
<t>Re-configuration Response Parameter, Outgoing SSN Reset Request Parameter.</t>

<t>Re-configuration Response Parameter, Re-configuration Response
Parameter.</t>

</list></t>
<t>If a sender transmits an unsupported combination, the receiver SHOULD
send an ERROR chunk with a Protocol Violation cause, as defined in
Section 3.3.10.13 of <xref target="RFC4960"/>).</t>
</section>
</section>

<section title="New Parameter Types">
<t>This section defines the new parameter types that will be used in
the RE-CONFIG chunk.
<xref target="parametertable"/> illustrates the new parameter types.</t>
<texttable anchor="parametertable">
<ttcol align='left'>Parameter Type</ttcol>
<ttcol align='left'>Parameter Name</ttcol>
<c>13</c> <c>Outgoing SSN Reset Request Parameter</c>
<c>14</c> <c>Incoming SSN Reset Request Parameter</c>
<c>15</c> <c>SSN/TSN Reset Request Parameter</c>
<c>16</c> <c>Re-configuration Response Parameter</c>
<c>17</c> <c>Add Outgoing Streams Request Parameter</c>
<c>18</c> <c>Add Incoming Streams Request Parameter</c>
</texttable>
<t>It should be noted that the parameter format requires that the
receiver stop processing the parameter and not process any
further parameters within the chunk if the parameter type is not
recognized.
This is accomplished by the use of the upper bits of the
parameter type as described in Section 3.2.1 of
<xref target="RFC4960"/>.</t>
<t>All transported integer numbers are in "network byte
order", a.k.a. Big Endian.</t>

<section title="Outgoing SSN Reset Request Parameter">

<t>This parameter is used by the sender to request the reset
of some or all outgoing streams.</t>

<figure>
<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Parameter Type = 13       | Parameter Length = 16 + 2 * N |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Re-configuration Request Sequence Number            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Re-configuration Response Sequence Number           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                Sender's Last Assigned TSN                     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Stream Number 1 (optional)   |    Stream Number 2 (optional) |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
/                            ......                             /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Stream Number N-1 (optional) |    Stream Number N (optional) |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>

<t><list style="hanging">

<t hangText="Parameter Type: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the IANA-defined parameter type for the Outgoing
SSN Reset Request Parameter.
The value of this field is 13.</t>

<t hangText="Parameter Length: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the length in bytes of the parameter;
the value MUST be 16 + 2 * N, where N is the number of
stream numbers listed.</t>

<t hangText="Re-configuration Request Sequence Number: 4 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field is used to identify the request. It is a monotonically
increasing number that is initialized to the same value as the
initial TSN.
It is increased by 1 whenever sending a new Re-configuration Request Parameter.</t>

<t hangText="Re-configuration Response Sequence Number: 4 bytes (unsigned integer)">
<vspace blankLines="0"/>
When this Outgoing SSN Reset Request Parameter is sent in response
to an Incoming SSN Reset Request Parameter, this parameter is also an implicit
response to the incoming request. This field then holds the
Re-configuration Request Sequence Number of the incoming request. In other
cases, it holds the next expected Re&nbhy;configuration Request Sequence Number
minus 1.</t>

<t hangText="Sender's Last Assigned TSN: 4 bytes (unsigned integer)">
<vspace blankLines="0"/>
This value holds the next TSN minus 1 -- in other words, the last
TSN that this sender assigned.</t>

<t hangText="Stream Number 1..N: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This optional field, if included, is used to
indicate specific streams that are to be reset. If no streams
are listed, then all streams are to be reset.</t>
</list></t>

<t>This parameter can appear in a RE-CONFIG chunk. This parameter
MUST NOT appear in any other chunk type.</t>
</section>

<section title="Incoming SSN Reset Request Parameter">

<t>This parameter is used by the sender to request that the
peer reset some or all of its outgoing streams.</t>

<figure>
<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Parameter Type = 14       |  Parameter Length = 8 + 2 * N |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Re-configuration Request Sequence Number             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Stream Number 1 (optional)   |    Stream Number 2 (optional) |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
/                            ......                             /
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Stream Number N-1 (optional) |    Stream Number N (optional) |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>

<t><list style="hanging">

<t hangText="Parameter Type: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the IANA-defined parameter type for the Incoming
SSN Reset Request Parameter.
The value of this field is 14.</t>

<t hangText="Parameter Length: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the length in bytes of the parameter; the value MUST
be 8 + 2 * N.</t>

<t hangText="Re-configuration Request Sequence Number: 4 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field is used to identify the request. It is a monotonically
increasing number that is initialized to the same value as the
initial TSN.
It is increased by 1 whenever sending a new Re-configuration Request Parameter.</t>

<t hangText="Stream Number 1..N: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This optional field, if included, is used to
indicate specific streams that are to be reset. If no streams
are listed, then all streams are to be reset.</t>
</list></t>

<t>This parameter can appear in a RE-CONFIG chunk. This parameter
MUST NOT appear in any other chunk type.</t>
</section>

<section title="SSN/TSN Reset Request Parameter">

<t>This parameter is used by the sender to request a reset of the
TSN and SSN numbering of all incoming and outgoing streams.</t>
<figure>
<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Parameter Type = 15       |      Parameter Length = 8     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Re-configuration Request Sequence Number              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>

<t><list style="hanging">

<t hangText="Parameter Type: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the IANA-defined parameter type for the SSN/TSN
Reset Request Parameter.
The value of this field is 15.</t>

<t hangText="Parameter Length: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the length in bytes of the parameter; the value MUST be 8.</t>

<t hangText="Re-configuration Request Sequence Number: 4 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field is used to identify the request. It is a monotonically
increasing number that is initialized to the same value as the
initial TSN.
It is increased by 1 whenever sending a new Re-configuration Request Parameter.</t>

</list>
</t>

<t>This parameter can appear in a RE-CONFIG chunk. This parameter
MUST NOT appear in any other chunk type.</t>
</section>

<section title="Re-configuration Response Parameter">

<t>This parameter is used by the receiver of a Re-configuration Request
Parameter to respond to the request.</t>

<figure>
<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Parameter Type = 16       |      Parameter Length         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Re-configuration Response Sequence Number             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            Result                             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                   Sender's Next TSN (optional)                |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                  Receiver's Next TSN (optional)               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>

<t><list style="hanging">

<t hangText="Parameter Type: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the IANA-defined parameter type for the
Re&nbhy;configuration Response Parameter.
The value of this field is 16.</t>

<t hangText="Parameter Type Length: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the length in bytes of the parameter; the value MUST
be 12 if the optional fields are not present and 20 otherwise.</t>

<t hangText="Re-configuration Response Sequence Number: 4 bytes (unsigned integer)">
<vspace blankLines="0"/>
This value is copied from the request parameter and is used by the receiver of
the Re-configuration Response Parameter to tie the response to the request.</t>

<t hangText="Result: 4 bytes (unsigned integer)">
<vspace blankLines="0"/>
This value describes the result of the processing of the request.
It is encoded as indicated in <xref target="resulttable"/>:</t>
</list></t>
<texttable anchor="resulttable">
<ttcol align='left'>Result</ttcol>
<ttcol align='left'>Description</ttcol>
<c>0</c>          <c>Success - Nothing to do</c>
<c>1</c>          <c>Success - Performed</c>
<c>2</c>          <c>Denied</c>
<c>3</c>          <c>Error - Wrong SSN</c>
<c>4</c>          <c>Error - Request already in progress</c>
<c>5</c>          <c>Error - Bad Sequence Number</c>
<c>6</c>          <c>In progress</c>
</texttable>

<t><list style="hanging">
<t hangText="Sender's Next TSN: 4 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the TSN that the sender of the response will use to
send the next DATA chunk. The field is only applicable in responses
to SSN/TSN reset requests.</t>

<t hangText="Receiver's Next TSN: 4 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the TSN that the receiver of the response must use to
send the next DATA chunk. The field is only applicable in responses
to SSN/TSN reset requests.</t>

</list></t>

<t>Either both optional fields (Sender's Next TSN and Receiver's Next TSN)
MUST be present, or no field.</t>

<t>This parameter can appear in a RE-CONFIG chunk. This parameter
MUST NOT appear in any other chunk type.</t>
</section>

<section title="Add Outgoing Streams Request Parameter">

<t>This parameter is used by the sender to request that an additional
number of outgoing streams (i.e., the receiver's incoming streams) be
added to the association.</t>
<figure>
<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Parameter Type = 17       |      Parameter Length = 12    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Re-configuration Request Sequence Number             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      Number of new streams    |         Reserved              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>

<t><list style="hanging">

<t hangText="Parameter Type: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the IANA-defined parameter type for the Add
Outgoing Streams Request Parameter.
The value of this field is 17.</t>

<t hangText="Parameter Length: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the length in bytes of the parameter; the value MUST be 12.</t>

<t hangText="Re-configuration Request Sequence Number: 4 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field is used to identify the request. It is a monotonically
increasing number that is initialized to the same value as the
initial TSN.
It is increased by 1 whenever sending a new Re-configuration Request Parameter.</t>

<t hangText="Number of new streams: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This value holds the number of additional outgoing streams that the sender
requests be added to the association. Streams are added in
order and are consecutive; e.g., if an association has 4
outgoing streams (0-3) and a request is made to add 3 streams, then
the new streams will be 4, 5, and 6.</t>

<t hangText="Reserved: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field is reserved. It SHOULD be set to 0 by the sender
and ignored by the receiver.</t>
</list>
</t>

<t>This parameter MAY appear in a RE-CONFIG chunk. This parameter
MUST NOT appear in any other chunk type.</t>
</section>

<section title="Add Incoming Streams Request Parameter">

<t>This parameter is used by the sender to request that the peer add
an additional number of outgoing streams (i.e., the sender's incoming streams)
to the association.</t>
<figure>
<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Parameter Type = 18       |      Parameter Length = 12    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Re-configuration Request Sequence Number             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      Number of new streams    |         Reserved              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>

<t><list style="hanging">

<t hangText="Parameter Type: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the IANA-defined parameter type for the Add
Incoming Streams Request Parameter.
The value of this field is 18.</t>

<t hangText="Parameter Length: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field holds the length in bytes of the parameter; the value MUST be 12.</t>

<t hangText="Re-configuration Request Sequence Number: 4 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field is used to identify the request. It is a monotonically
increasing number that is initialized to the same value as the
initial TSN.
It is increased by 1 whenever sending a new Re-configuration Request Parameter.</t>

<t hangText="Number of new streams: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This value holds the number of additional incoming streams that the sender
requests be added to the association. Streams are added in
order and are consecutive; e.g., if an association has 4
outgoing streams (0-3) and a request is made to add 3 streams, then
the new streams will be 4, 5, and 6.</t>

<t hangText="Reserved: 2 bytes (unsigned integer)">
<vspace blankLines="0"/>
This field is reserved. It SHOULD be set to 0 by the sender
and ignored by the receiver.</t>
</list>
</t>

<t>This parameter MAY appear in a RE-CONFIG chunk. This parameter
MUST NOT appear in any other chunk type.</t>
</section>

</section>

<section title="Procedures">

<t>This section defines the procedures used by both the sender and
receiver of a RE-CONFIG chunk.
Various examples of re-configuration scenarios are given in
<xref target="examples"/>.</t>

<t>One important thing to remember about SCTP streams is that they are
uni-directional and there is no correspondence between outgoing and
incoming streams.
The procedures outlined in this section are designed
so that the incoming side will always reset its SSN
first (before the outgoing side), which means the re&nbhy;configuration request
must always originate from the outgoing side. These two issues have important
ramifications upon how an SCTP endpoint might request that its
incoming streams be reset. In effect, it must ask the peer to start an
outgoing reset procedure and once that request is acknowledged let the peer
actually control the reset operation.</t>
<section title="Sender-Side Procedures">

<t>This section describes the procedures related to the sending of
RE&nbhy;CONFIG chunks. A RE-CONFIG chunk is composed of one or two
Type-Length-Value (TLV) parameters.</t>

<section anchor="strrstchunksendproc"
         title="Sender-Side Procedures for the RE-CONFIG Chunk">

<t>The SCTP protocol extension described in this document uses the
Supported Extensions Parameter defined in <xref target="RFC5061"/>
for negotiating the support.</t>

<t>An SCTP endpoint supporting this extension MUST include the
chunk type of the RE-CONFIG chunk in the Supported Extensions
Parameter in either the INIT or INIT-ACK.
Before sending a RE-CONFIG chunk, the sender MUST
ensure that the peer advertised support for the re&nbhy;configuration
extension. If the chunk type of the RE-CONFIG chunk does
not appear in the supported extension's list of chunks,
then the sender MUST NOT send any re-configuration request to
the peer, and any request by the application for such service
SHOULD be responded to with an appropriate error indicating that
the peer SCTP stack does not support the re-configuration extension.</t>

<t>At any given time, there MUST NOT be more than one request
in flight. So, if the Re-configuration Timer is running and the
RE&nbhy;CONFIG chunk contains at least one request parameter,
the chunk MUST be buffered.</t>

<t>After packaging the RE-CONFIG chunk and sending it to the peer,
the sender MUST start the Re-configuration Timer if the RE-CONFIG chunk
contains at least one request parameter. If it contains no request parameters,
the Re-configuration Timer MUST NOT be started. This timer MUST use the same
value as SCTP's data transmission timer (i.e., the retransmission timeout
(RTO) timer)
and MUST use exponential backoff, doubling the value at every expiration.
If the timer expires, besides doubling the value, the sender MUST
retransmit the RE-CONFIG chunk, increment the appropriate
error counts (for both the association and the destination), and perform
threshold management, possibly destroying the association if SCTP
retransmission thresholds are exceeded.</t>
</section>

<section anchor="ostrrstreq"
         title="Sender-Side Procedures for the Outgoing SSN Reset Request Parameter">

<t>When an SCTP sender wants to reset the SSNs of some or all outgoing streams,
it can send an Outgoing SSN Reset Request Parameter, provided that the
Re-configuration Timer is not running.
The following steps must be followed:
<list style='format A%d:'>
<t>The sender MUST stop assigning new SSNs to new user data provided by the
upper layer for the affected streams and queue it.
This is because it is not known whether the receiver of the request will
accept or deny it; moreover, a lost request might cause an out-of-sequence
error in a stream that the receiver is not yet prepared to handle.</t>
<t>The sender MUST assign the next re-configuration request sequence number and
MUST put it into the Re-configuration Request Sequence Number field of the
Outgoing SSN Reset Request Parameter. The next re-configuration
request sequence number MUST then be incremented by 1.</t>
<t>The Sender's Last Assigned TSN MUST be set to the next TSN
the sender assigns minus 1.</t>
<t>If this Outgoing SSN Reset Request Parameter is sent in response to
an Incoming SSN Reset Request Parameter, the stream numbers MUST be copied
from the Incoming SSN Reset Request Parameter to the Outgoing SSN Reset
Request Parameter. The Re-configuration Response Sequence Number of the
Outgoing SSN Reset Request Parameter MUST be the Re-configuration Request
Sequence Number of the Incoming SSN Reset Request Parameter. If this
Outgoing SSN Reset Request Parameter is sent at the request of the upper
layer and the sender requests that all outgoing streams be reset, stream
numbers SHOULD NOT be put into the Outgoing SSN Reset Request Parameter. If
the sender requests that only some outgoing streams be reset, these stream
numbers MUST be placed in the Outgoing SSN Reset Request Parameter.
The Re&nbhy;configuration Response Sequence Number is the next expected
Re-configuration Request Sequence Number of the peer minus 1.</t>

<t>The Outgoing SSN Reset Request Parameter MUST be put into a
RE&nbhy;CONFIG Chunk.
The Outgoing SSN Reset Request Parameter MAY be put together with either
an Incoming SSN Reset Request Parameter or a Re-configuration Response
Parameter, but not with both.
It MUST NOT be put together with any other parameter, as
described in <xref target="chunk"/>.</t>
<t>The RE-CONFIG chunk MUST be sent following the rules given in
<xref target='strrstchunksendproc'/>.</t>
</list></t>

</section>

<section anchor="issnrstproc"
         title="Sender-Side Procedures for the Incoming SSN Reset Request Parameter">
<t>When an SCTP sender wants to reset the SSNs of some or all incoming streams,
it can send an Incoming SSN Reset Request Parameter, provided that the
Re-configuration Timer is not running.
The following steps must be followed:
<list style='format B%d:'>
<t>The sender MUST assign the next re-configuration request sequence number and
MUST put it into the Re-configuration Request Sequence Number field of the
Incoming SSN Reset Request Parameter. After assigning it, the next
re-configuration request sequence number MUST be incremented by 1.</t>
<t>If the sender wants all incoming streams to be reset, stream numbers
SHOULD NOT be put into the Incoming SSN Reset Request Parameter. If the sender
wants only some incoming streams to be reset, these stream numbers MUST be
filled in the Incoming SSN Reset Request Parameter.</t>
<t>The Incoming SSN Reset Request Parameter MUST be put into a RE&nbhy;CONFIG
Chunk. It MAY be put together with an Outgoing SSN Reset Request Parameter
but MUST NOT be put together with any other parameter.</t>
<t>The RE-CONFIG chunk MUST be sent following the rules given in
<xref target='strrstchunksendproc'/>.</t>
</list></t>
<t>When sending an Incoming SSN Reset Request, there is a potential that
the peer has just reset or is in the process of resetting the same streams
via an Outgoing SSN Reset Request. This collision scenario is discussed in
<xref target='rcvinssn'/>.</t>
</section>

<section anchor="tsnrstproc"
         title="Sender-Side Procedures for the SSN/TSN Reset Request Parameter">

<t>When an SCTP sender wants to reset the SSNs and TSNs, it can send an
SSN/TSN Reset Request Parameter, provided that the Re-configuration Timer
is not running.
The following steps must be followed:
<list style='format C%d:'>
<t>The sender MUST assign the next re-configuration request sequence number and
put it into the Re-configuration Request Sequence Number field of the
SSN/TSN Reset Request Parameter. After assigning it, the next re-configuration
request sequence number MUST be incremented by 1.</t>
<t>The sender has either no outstanding TSNs or considers all outstanding
TSNs abandoned.
The sender MUST queue any user data, suspending any new transmissions
and TSN assignment until the reset procedure is finished by the peer
either acknowledging or denying the request.</t>
<t>The SSN/TSN Reset Request Parameter MUST be put into a RE-CONFIG chunk.
There MUST NOT be any other parameter in this chunk.</t>
<t>The RE-CONFIG chunk MUST be sent following the rules given in
<xref target='strrstchunksendproc'/>.</t>
</list></t>
<t>Only one SSN/TSN Reset Request SHOULD be sent within 30 seconds,
which is considered a maximum segment lifetime (the IP MSL).</t>
</section>

<section anchor="stroutadd"
         title="Sender-Side Procedures for the Add Outgoing Streams Request Parameter">
<t>When an SCTP sender wants to increase the number of outbound streams
to which it is able to send, it may add an Add Outgoing Streams Request
Parameter to the RE-CONFIG chunk. Upon sending the request, the sender
MUST await a positive acknowledgment (Success) before using any
additional stream added by this request. Note that new streams are added
adjacent to the previous streams with no gaps. This means that if a
request is made to add 2 streams to an association that already has 5
(0-4), then the new streams, upon successful completion, are streams 5
and 6. A new stream MUST use SSN 0 for its first ordered message.</t>
</section>

<section anchor="strinadd"
         title="Sender-Side Procedures for the Add Incoming Streams Request Parameter">
<t>When an SCTP sender wants to increase the number of inbound streams
to which the peer is able to send, it may add an Add Incoming Streams Request
Parameter to the RE-CONFIG chunk. Note that new streams are added
adjacent to the previous streams with no gaps. This means that if a
request is made to add 2 streams to an association that already has 5
(0-4), then the new streams, upon successful completion, are streams 5
and 6. A new stream MUST use SSN 0 for its first ordered message.</t>
</section>

<section anchor="strrstresp"
         title="Sender-Side Procedures for the Re-configuration Response Parameter">

<t>When an implementation receives a reset request parameter, it must
respond with a Re-configuration Response Parameter in the following manner:

<list style="format D%d:">
<t>The Re-configuration Request Sequence number of the incoming request MUST
be copied to the Re-configuration Response Sequence Number field of the
Re-configuration Response Parameter.</t>
<t>The result of the processing of the incoming request according to
<xref target="resulttable"/> MUST be placed in the Result field of
the Re&nbhy;configuration Response Parameter.</t>
<t>If the incoming request is an SSN/TSN reset request, the Sender's
Next TSN field MUST be filled with the next TSN the sender of this
Re-configuration Response Parameter will assign.
For other requests, the Sender's Next TSN field, which is optional,
MUST NOT be used.</t>
<t>If the incoming request is an SSN/TSN reset request, the Receiver's
Next TSN field MUST be filled with a TSN such that the sender of the
Re-configuration Response Parameter can be sure it can discard received DATA
chunks with smaller TSNs. The value SHOULD be the smallest TSN not
acknowledged by the receiver of the request plus 2^31.
For other requests, the Receiver's Next TSN field, which is optional,
MUST NOT be used.</t>
</list></t>
</section>
</section>

<section title="Receiver-Side Procedures">

<section title="Receiver-Side Procedures for the RE-CONFIG Chunk">
<t>Upon reception of a RE-CONFIG chunk, each parameter within
it SHOULD be processed. If multiple parameters have to be returned, they
MUST be put into one RE_CONFIG chunk. If the received RE-CONFIG
chunk contains at least one request parameter, a selective acknowledgment
(SACK) chunk SHOULD be sent
back and MAY be bundled with the RE&nbhy;CONFIG chunk.
If the received RE-CONFIG chunk contains at least one request and
based on the analysis of the Re-configuration Request Sequence Numbers this
is the last received RE-CONFIG chunk (i.e., a retransmission),
the same RE-CONFIG chunk MUST to be sent back in response, as it was
earlier.</t>
<t>The decision to deny a re-configuration request is an administrative
decision and may be user configurable even after the association
has formed. If for whatever reason the endpoint does not wish to process
a received request parameter, it MUST send a corresponding response parameter
as described in <xref target="strrstresp"/>, with an appropriate
Result field.</t>
<list><t>Implementation Note: It is recommended that a SACK be bundled with any
re-configuration response so that any retransmission processing that
needs to occur can be expedited. A SACK chunk is not required for
this feature to work, but it will in effect help minimize the
delay in completing a re-configuration operation in the face of
any data loss.</t></list>
</section>

<section title="Receiver-Side Procedures for the Outgoing SSN Reset Request Parameter">

<t>In the case that the endpoint is willing to perform a stream reset,
the following steps must be followed:
<list style="format E%d:">
<t>If the Re-configuration Timer is running for the Re&nbhy;configuration
Request Sequence
Number indicated in the Re&nbhy;configuration Response Sequence Number field,
the Re&nbhy;configuration Request Sequence Number MUST be marked as
acknowledged.
If all Re&nbhy;configuration Request Sequence Numbers for which the
Re-configuration Timer is running
are acknowledged, the Re-configuration Timer MUST be stopped.</t>
<t>If the Sender's Last Assigned TSN is greater than
the cumulative acknowledgment point, then the endpoint MUST enter "deferred
reset processing". In this mode, any data arriving with a TSN larger
than the Sender's Last Assigned TSN for the affected stream(s) MUST be
queued locally and held until the cumulative acknowledgment point reaches
the Sender's Last Assigned TSN. When the cumulative acknowledgment point
reaches the last assigned TSN, then proceed to the next step.
If the endpoint enters "deferred reset processing", it MUST put a
Re-configuration Response Parameter into a RE-CONFIG chunk
indicating "In progress" and MUST send the RE-CONFIG chunk.</t>
<t> If no stream numbers are listed in the parameter,
then all incoming streams MUST be reset to 0 as the next expected SSN.
If specific stream numbers are listed, then only these
specific streams MUST be reset to 0, and all other non-listed SSNs
remain unchanged.</t>
<t>Any queued TSNs (queued at step E2) MUST now be released
and processed normally.</t>
<t>A Re-configuration Response Parameter MUST be put into a RE&nbhy;CONFIG
chunk indicating successful processing.</t>
<t>The RE-CONFIG chunk MUST be sent after the incoming RE-CONFIG chunk is
processed completely.</t>
</list></t>
</section>

<section anchor="rcvinssn" title="Receiver-Side Procedures for the Incoming SSN Reset Request Parameter">

<t>In the case that the endpoint is willing to perform a stream reset,
the following steps must be followed:
<list style="format F%d:">
<t>An Outgoing SSN Reset Request Parameter MUST be put into a RE&nbhy;CONFIG
chunk according to <xref target="ostrrstreq"/>.</t>
<t>The RE-CONFIG chunk MUST be sent after the incoming RE-CONFIG chunk is
processed completely.</t>
</list></t>

<t>When a peer endpoint requests an Incoming SSN Reset Request, it is possible
that
the local endpoint has just sent an Outgoing SSN Reset Request on the same
association and
has not yet received a response. In such a case, the local endpoint MUST do the
following:

<list style='symbols'>
<t>If the Outgoing SSN Reset Request Parameter that was just sent completely
overlaps the received Incoming SSN Reset Request Parameter,
respond to the peer with an acknowledgment indicating that there was "Nothing
to do".</t>

<t> Otherwise, process the Incoming SSN Reset Request Parameter normally, responding
to the peer with an acknowledgment. Note that this case includes the situation where
some of the streams requested overlap with the Outgoing SSN Reset Request
that was just sent.
Even in such a situation, the Incoming SSN Reset MUST be processed normally,
even
though this means that (if the endpoint elects to do the stream reset) streams
that are already at SSN 0 will be reset a subsequent time.</t>
</list>
</t>
<t>It is also possible that the Incoming request will arrive after the Outgoing SSN
Reset Request just completed. In such a case, all of the streams being requested will
be already set to 0. If so, the local endpoint SHOULD send back a Re-configuration Response
with the success code "Nothing to do".</t>
<t>Note that in either race condition, the local endpoint could optionally also perform the
reset. This would result in streams that are already at sequence 0 being reset again
to 0, which would cause no harm to the application but will add an extra message to the
network.</t>
</section>
<section title="Receiver-Side Procedures for the SSN/TSN Reset Request Parameter">
<t>In the case that the endpoint is willing to perform an SSN/TSN reset,
the following steps must be followed:
<list style="format G%d:">
<t>Compute an appropriate value for the Receiver's Next TSN -- the TSN
that the peer should use to send the next DATA chunk.
The value SHOULD be the smallest TSN not acknowledged by the receiver
of the request plus 2^31.</t>
<t>Compute an appropriate value for the local endpoint's next TSN, i.e.,
the next TSN assigned by the receiver of the SSN/TSN reset chunk.
The value SHOULD be the highest TSN sent by the receiver of the request
plus 1.</t>
<t>The same processing as though a SACK chunk 
with no gap report and a cumulative TSN ACK of the Sender's Next TSN
minus 1 were received MUST be performed.</t>
<t>The same processing as though a FWD-TSN chunk
(as defined in <xref target="RFC3758"/>) with all streams affected and a
new cumulative TSN ACK of the Receiver's Next TSN minus 1 were received MUST
be performed.</t>

<t>The next expected and outgoing SSNs MUST be reset to 0
for all incoming and outgoing streams.</t>
<t>A Re-configuration Response Parameter MUST be put into a RE&nbhy;CONFIG
chunk indicating successful processing.</t>
<t>The RE-CONFIG chunk MUST be sent after the incoming RE-CONFIG chunk is
processed completely.</t>
</list></t>
</section>

<section anchor="rcvstroutadd"
         title="Receiver-Side Procedures for the Add Outgoing Streams Request Parameter">

<t>When an SCTP endpoint receives a re-configuration request adding
additional streams, it MUST send a response parameter either
acknowledging or denying the request. If the response is successful, the
receiver MUST add the requested number of inbound streams to the
association, initializing the next expected SSN to
0. The SCTP endpoint SHOULD deny the request if the number of streams exceeds
a limit that should be configurable by the application.</t>
</section>

<section anchor="rcvstrinadd"
         title="Receiver-Side Procedures for the Add Incoming Streams Request Parameter">

<t>When an SCTP endpoint receives a re-configuration request adding
additional incoming streams, it MUST either send a response parameter
denying the request or send a corresponding Add Outgoing Streams Request
Parameter, following the rules given in <xref target="stroutadd"/>.
The SCTP endpoint SHOULD deny the request if the number of streams exceeds
a limit that should be configurable by the application.</t>
</section>

<section title="Receiver-Side Procedures for the Re-configuration Response Parameter">

<t>On receipt of a Re-configuration Response Parameter, the following must be
performed:
<list style="format H%d:">
<t>If the Re-configuration Timer is running for the Re-configuration Request
Sequence
Number indicated in the Re-configuration Response Sequence Number field,
the Re&nbhy;configuration Request Sequence Number MUST be marked as
acknowledged.
If all Re&nbhy;configuration Request Sequence Numbers for which the
Re&nbhy;configuration Timer is running are acknowledged,
the Re&nbhy;configuration Timer MUST be stopped.
If the timer was not running for the Re-configuration Request Sequence
Number, the processing of the Re-configuration Response Parameter is complete.</t>
<t>If the Result field indicates "In progress", the timer for the
Re-configuration Request Sequence Number is started again. If the timer runs
out, the RE-CONFIG chunk MUST be retransmitted but the corresponding
error counters MUST NOT be incremented.</t>
<t>If the Result field does not indicate successful processing,
the processing of this response is complete.</t>
<t>If the request was an Outgoing SSN Reset Request, the affected streams
MUST now be reset and all queued data should now be processed. The assigning
of SSNs is allowed again.</t>
<t>If the request was an SSN/TSN Reset Request, new data MUST be sent
from the Receiver's Next TSN, beginning with SSN 0 for
all outgoing streams. All incoming streams MUST be reset to 0 as the
next expected SSN. The peer will send DATA chunks
starting with the Sender's Next TSN.</t>
<t>If the request was to add outgoing streams, the endpoint MUST add
the additional streams to the association.
Note that an implementation may allocate the memory at the
time of the request, but it MUST NOT use the streams until the peer has
responded with a positive acknowledgment.</t>
</list></t>
</section>

</section>
</section>

<section title="Sockets API Considerations">
<t>This section describes how the sockets API defined in
<xref target='RFC6458'/> needs to be extended
to make the features of SCTP re-configuration available to the application.</t>
<t>Please note that this section is informational only.</t>
<section title="Events">

<t>When the SCTP_ASSOC_CHANGE notification is delivered and
both peers support the extension described in this document,
SCTP_ASSOC_SUPPORTS_RE_CONFIG should be listed in the sac_info
field.</t>
<t>The union sctp_notification {} is extended to contain three
new fields: sn_strreset_event, sn_assocreset_event, and sn_strchange_event:
<figure>
<artwork>
union sctp_notification {
  struct sctp_tlv {
    uint16_t sn_type; /* Notification type. */
    uint16_t sn_flags;
    uint32_t sn_length;
  } sn_header;
  ...
  struct sctp_stream_reset_event sn_strreset_event;
  struct sctp_assoc_reset_event sn_assocreset_event;
  struct sctp_stream_change_event sn_strchange_event;
  ...
}
</artwork>
</figure>

The corresponding sn_type values are given in
<xref target="notificationtable"/>.</t>
<texttable anchor="notificationtable">
<ttcol align='left'>sn_type</ttcol>
<ttcol align='left'>valid field in union sctp_notification</ttcol>
<c>SCTP_STREAM_RESET_EVENT</c>  <c>sn_strreset_event</c>
<c>SCTP_ASSOC_RESET_EVENT</c>   <c>sn_assocreset_event</c>
<c>SCTP_STREAM_CHANGE_EVENT</c> <c>sn_strchange_event</c>
</texttable>
<t>These events are delivered when an incoming request was processed
successfully or the processing of an outgoing request has been finished.</t>

<section title="Stream Reset Event">
<t>The event delivered has the following structure:
<figure>
<artwork>
struct sctp_stream_reset_event {
  uint16_t strreset_type;
  uint16_t strreset_flags;
  uint32_t strreset_length;
  sctp_assoc_t strreset_assoc_id;
  uint16_t strreset_stream_list[];
};
</artwork>
</figure>
<list style='hanging'>
<t hangText="strreset_type:">
This field should be SCTP_STREAM_RESET_EVENT.</t>
<t hangText="strreset_flags:">
This field is formed from the bitwise OR of one or more of the following
currently defined flags:
<list style='hanging'>
<t hangText="SCTP_STREAM_RESET_INCOMING_SSN:">
The stream identifiers given in strreset_stream_list[] refer to incoming
streams of the endpoint.</t>
<t hangText="SCTP_STREAM_RESET_OUTGOING_SSN:">
The stream identifiers given in strreset_stream_list[] refer to outgoing
streams of the endpoint.</t>
<t hangText="SCTP_STREAM_RESET_DENIED:">
The corresponding request was denied by the peer.</t>
<t hangText="SCTP_STREAM_RESET_FAILED:">
The corresponding request failed.</t>
</list>
At least one of SCTP_STREAM_RESET_INCOMING_SSN and
SCTP_STREAM_RESET_OUTGOING_SSN is set.
SCTP_STREAM_RESET_DENIED and SCTP_STREAM_RESET_FAILED are mutually exclusive.
If the request was successful, none of these are set.</t>
<t hangText="strreset_length:">
This field is the total length in bytes of the delivered event,
including the header.</t>
<t hangText="strreset_assoc_id:">
This association id field holds the identifier for the association.
All notifications for a given association have the same association identifier.
For one-to-one style sockets, this field is ignored.</t>
<t hangText="strreset_stream_list:">
This is the list of stream identifiers to which this event refers. An empty
list identifies all streams as being reset. Depending on strreset_flags, the
identifiers refer to incoming or outgoing streams, or both.</t>
</list></t>
</section>
<section title="Association Reset Event">
<t>The event delivered has the following structure:
<figure>
<artwork>
struct sctp_assoc_reset_event {
  uint16_t assocreset_type;
  uint16_t assocreset_flags;
  uint32_t assocreset_length;
  sctp_assoc_t assocreset_assoc_id;
  uint32_t assocreset_local_tsn;
  uint32_t assocreset_remote_tsn;
};
</artwork>
</figure>
<list style='hanging'>
<t hangText="assocreset_type:">
This field should be SCTP_ASSOC_RESET_EVENT.</t>
<t hangText="assocreset_flags:">
This field is formed from the bitwise OR of one or more of the following
currently defined flags:
<list style='hanging'>
<t hangText="SCTP_ASSOC_RESET_DENIED:">
The corresponding outgoing request was denied by the peer.</t>
<t hangText="SCTP_ASSOC_RESET_FAILED:">
The corresponding outgoing request failed.</t>
</list>
SCTP_ASSOC_RESET_DENIED and SCTP_ASSOC_RESET_FAILED are mutually exclusive.
If the request was successful, none of these are set.</t>
<t hangText="assocreset_length:">
This field is the total length in bytes of the delivered event,
including the header.</t>
<t hangText="assocreset_assoc_id:">
This association id field holds the identifier for the association.
All notifications for a given association have the same association identifier.
For one-to-one style sockets, this field is ignored.</t>
<t hangText="assocreset_local_tsn:">
This field is the next TSN used by the endpoint.</t>
<t hangText="assocreset_remote_tsn:">
This field is the next TSN used by the peer.</t>
</list></t>
</section>

<section title="Stream Change Event">
<t>The event delivered has the following structure:
<figure>
<artwork>
struct sctp_stream_change_event {
  uint16_t strchange_type;
  uint16_t strchange_flags;
  uint32_t strchange_length;
  sctp_assoc_t strchange_assoc_id;
  uint16_t strchange_instrms;
  uint16_t strchange_outstrms;
};
</artwork>
</figure>
<list style='hanging'>
<t hangText="strchange_type:">
This field should be SCTP_STREAM_CHANGE_EVENT.</t>
<t hangText="strchange_flags:">
This field is formed from the bitwise OR of one or more of the following
currently defined flags:
<list style='hanging'>
<t hangText="SCTP_STREAM_CHANGE_DENIED:">
The corresponding request was denied by the peer.</t>
<t hangText="SCTP_STREAM_CHANGE_FAILED:">
The corresponding request failed.</t>
</list>
SCTP_STREAM_CHANGE_DENIED and SCTP_STREAM_CHANGE_FAILED are mutually exclusive.
If the request was successful, none of these are set.</t>
<t hangText="strchange_length:">
This field is the total length in bytes of the delivered event,
including the header.</t>
<t hangText="strchange_assoc_id:">
This association id field holds the identifier for the association.
All notifications for a given association have the same association identifier.
For one-to-one style sockets, this field is ignored.</t>
<t hangText="strchange_instrms:">
The number of streams that the peer is allowed to use outbound.</t>
<t hangText="strchange_outstrms:">
The number of streams that the endpoint is allowed to use outbound.</t>
</list></t>
</section>
</section>

<section title="Event Subscription">
<t>Subscribing to events as described in <xref target='RFC6458'/>
uses a setsockopt() call with the SCTP_EVENT socket option.
This option takes the following structure, which specifies the association,
the event type (using the same value found in the event type field),
and an on/off boolean.
<figure>
<artwork>
struct sctp_event {
  sctp_assoc_t se_assoc_id;
  uint16_t     se_type;
  uint8_t      se_on;
};
</artwork>
</figure>
The user fills in the se_type field with the same value found in the
strreset_type field, i.e., SCTP_STREAM_RESET_EVENT.
The user will also fill in the se_assoc_id field with either
the association to set this event on (this field is ignored
for one-to-one style sockets) or one of the reserved
constant values defined in <xref target='RFC6458'/>.
Finally, the se_on field is set with a 1 to enable the event
or a 0 to disable the event.</t>
</section>

<section title="Socket Options">
<t><xref target="socketoptiontable"/> describes the new socket options
that make the
re&nbhy;configuration features accessible to the user. They all use
IPPROTO_SCTP as their level.</t>
<t>If a call to setsockopt() is used to issue a re-configuration request
while the Re-configuration timer is running, setsockopt() will return
-1, and error is set to EALREADY.</t>

<texttable anchor="socketoptiontable">
<ttcol align='left'>option name</ttcol>
<ttcol align='left'>data type</ttcol>
<ttcol align='center'>get</ttcol>
<ttcol align='center'>set</ttcol>
<c>SCTP_ENABLE_STREAM_RESET</c> <c>struct sctp_assoc_value</c>   <c>X</c> <c>X</c>
<c>SCTP_RESET_STREAMS</c>       <c>struct sctp_reset_streams</c> <c> </c> <c>X</c>
<c>SCTP_RESET_ASSOC</c>         <c>sctp_assoc_t</c>              <c> </c> <c>X</c>
<c>SCTP_ADD_STREAMS</c>         <c>struct sctp_add_streams</c>   <c> </c> <c>X</c>
</texttable>

<section title="Enable/Disable Stream Reset (SCTP_ENABLE_STREAM_RESET)">
<t>This option allows a user to control whether the SCTP implementation processes
or denies incoming requests in STREAM_RESET chunks.</t>
<t>The default is to deny all incoming requests.</t>
<t>To set or get this option, the user fills in the following
structure:
<figure>
<artwork>
struct sctp_assoc_value {
  sctp_assoc_t assoc_id;
  uint32_t assoc_value;
};
</artwork>
</figure>
<list style="hanging">
<t hangText="assoc_id:">
This parameter is ignored for one-to-one style sockets.
For one-to-many style sockets, this parameter indicates which association the
user is performing an action upon.</t>
<t hangText="assoc_value:">
This field is formed from the bitwise OR of one or more of the following
currently defined flags:
<list style='hanging'>
<t hangText="SCTP_ENABLE_RESET_STREAM_REQ:">
Process received Incoming/Outgoing SSN Reset Requests if this flag is set; deny
them if not.</t>
<t hangText="SCTP_ENABLE_RESET_ASSOC_REQ:">
Process received SSN/TSN Reset Requests if this flag is set; deny them if not.</t>
<t hangText="SCTP_ENABLE_CHANGE_ASSOC_REQ:">
Process received Add Outgoing Streams Requests if this flag is set; deny
them if not.</t>
</list>
The default value is
!(SCTP_ENABLE_RESET_STREAM_REQ|SCTP_ENABLE_RESET_ASSOC_REQ|SCTP_ENABLE_CHANGE_ASSOC_REQ).</t>
</list></t>
<t>Please note that using the option does not have any impact on
subscribing to any related events.</t>
</section>

<section title="Reset Incoming and/or Outgoing Streams (SCTP_RESET_STREAMS)">
<t>This option allows the user to request the reset of incoming and/or outgoing
streams.</t>
<t>To set or get this option, the user fills in the following
structure:
<figure>
<artwork>
struct sctp_reset_streams {
  sctp_assoc_t srs_assoc_id;
  uint16_t srs_flags;
  uint16_t srs_number_streams;
  uint16_t srs_stream_list[];
};
</artwork>
</figure>
<list style="hanging">
<t hangText="srs_assoc_id:">
This parameter is ignored for one-to-one style sockets.
For one-to-many style sockets, this parameter indicates which association the
user is performing an action upon.</t>
<t hangText="srs_flags:">
This parameter describes which class of streams is reset.
It is formed from the bitwise OR of one or more of the following
currently defined flags:
<list style='symbols'>
<t>SCTP_STREAM_RESET_INCOMING</t>
<t>SCTP_STREAM_RESET_OUTGOING</t>
</list></t>
<t hangText="srs_number_streams:">
This parameter is the number of elements in the srs_stream_list. If it
is zero, the operation is performed on all streams.</t>
<t hangText="srs_stream_list:">
This parameter contains a list of stream identifiers the operation is
performed upon. It contains srs_number_streams elements. If it is empty,
the operation is performed on all streams. Depending on srs_flags, the
identifiers refer to incoming or outgoing streams, or both.</t>
</list></t>
</section>

<section title="Reset SSN/TSN (SCTP_RESET_ASSOC)">
<t>This option allows a user to request the reset of the SSN/TSN.</t>
<t>To set this option, the user provides an option_value of type
sctp_assoc_t.</t>
<t>On one-to-one style sockets, the option_value is ignored.
For one-to-many style sockets, the option_value is the
association identifier of the association the action
is to be performed upon.</t>

</section>
<section title="Add Incoming and/or Outgoing Streams (SCTP_ADD_STREAMS)">
<t>This option allows a user to request the addition of a number of
incoming and/or outgoing streams.</t>
<t>To set this option, the user fills in the following
structure:
<figure>
<artwork>
struct sctp_add_streams {
  sctp_assoc_t sas_assoc_id;
  uint16_t sas_instrms;
  uint16_t sas_outstrms;
};
</artwork>
</figure>
<list style="hanging">
<t hangText="sas_assoc_id:">
This parameter is ignored for one-to-one style sockets.
For one-to-many style sockets, this parameter indicates which association the
user is performing an action upon.</t>
<t hangText="sas_instrms:">
This parameter is the number of incoming streams to add.</t>
<t hangText="sas_outstrms:">
This parameter is the number of outgoing streams to add.</t>
</list></t>
<t>An endpoint can limit the number of incoming and outgoing streams by using
the sinit_max_instreams field in the struct sctp_initmsg{}
when issuing an SCTP_INIT socket option,
as defined in <xref target="RFC6458"/>.
An incoming request asking for more streams than allowed will be denied.</t>
</section>
</section>
</section>

<section title="Security Considerations">
<t>The SCTP sockets API as described in
<xref target="RFC6458"/> exposes the sequence numbers of
received DATA chunks to the application. An application might expect them
to be monotonically increasing. When using the re&nbhy;configuration
extension, this
might no longer be true. Therefore, the applications must enable this
extension explicitly before it is used. In addition, applications must
subscribe explicitly to notifications related to the re-configuration
extension before receiving them.</t>
<t>SCTP associations are protected against blind attackers by using
verification tags. This is still valid when using the re&nbhy;configuration
extension. Therefore, this extension does not add any additional
security risk to SCTP in relation to blind attackers.</t>
<t>When both the SSN and TSN are reset, the maximum segment
lifetime is used to avoid TSN wrap-around.</t>

</section>

<section title="IANA Considerations">

<t>This document (RFC 6525) is the reference for all registrations
described in this section.
The changes are described below.</t>

<section title="A New Chunk Type">
<t>A chunk type has been assigned by IANA.
The values given in <xref target="chunktable"/> have been used.
IANA has assigned this value from the pool of chunks with the upper
two bits set to '10'.</t>

<t>This has added a line in the "Chunk Types" registry for SCTP:
<figure>
<artwork>
Chunk Types

ID Value    Chunk Type                                     Reference
-----       ----------                                     ---------
130         Re-configuration Chunk (RE-CONFIG)             [RFC6525]
</artwork>
</figure>
</t>
<t>The registration table as defined in <xref target="RFC6096"/>
for the chunk flags of this chunk type is empty.</t>
</section>

<section title="Six New Chunk Parameter Types">
<t>Six chunk parameter types have been assigned by IANA.
It the values given in <xref target="parametertable"/>
have been used.
IANA has assigned these values from the pool of parameters with the upper
two bits set to '00'.</t>
<t>Six additional lines in the "Chunk Parameter Types"
registry for SCTP have been added:
<figure>
<artwork>
Chunk Parameter Types

ID Value  Chunk Parameter Type                             Reference
--------  ------------------------------------------------ ---------
13        Outgoing SSN Reset Request Parameter             [RFC6525]
14        Incoming SSN Reset Request Parameter             [RFC6525]
15        SSN/TSN Reset Request Parameter                  [RFC6525]
16        Re-configuration Response Parameter              [RFC6525]
17        Add Outgoing Streams Request Parameter           [RFC6525]
18        Add Incoming Streams Request Parameter           [RFC6525]
</artwork>
</figure>
</t>
</section>
</section>

<section anchor="acks"
         title="Acknowledgments">
<t>The authors wish to thank
Paul Aitken,
Gorry Fairhurst,
Tom Petch,
Kacheong Poon,
Irene Ruengeler,
Robin Seggelmann,
Gavin Shearer,
and Vlad Yasevich
for their invaluable comments.</t>
</section>
</middle>

<back>

<references title='Normative References'>
<?rfc include="reference.RFC.2119" ?>
<?rfc include="reference.RFC.3758" ?>

<reference anchor='RFC4960'>
<front>
<title>Stream Control Transmission Protocol</title>
<author initials='R.' surname='Stewart' fullname='R. Stewart' role="editor">
<organization /></author>
<date year='2007' month='September' />
</front>
<seriesInfo name='RFC' value='4960' />
</reference>

<?rfc include="reference.RFC.5061" ?>
<?rfc include="reference.RFC.6096" ?>
</references>

<references title='Informative References'>

<reference anchor="RFC6458">
<front>
<title>Sockets API Extensions for the Stream Control Transmission Protocol (SCTP)</title>
<author initials="R" surname="Stewart" fullname="Randall R. Stewart"/>
<author initials="M" surname="Tuexen" fullname="Michael Tuexen"/>
<author initials="K" surname="Poon" fullname="Kacheong Poon"/>
<author initials="P" surname="Lei" fullname="Peter Lei"/>
<author initials="V" surname="Yasevich" fullname="Vladislav Yasevich"/>
<date month="December" year="2011"/>
</front>
<seriesInfo name="RFC" value="6458"/>
</reference>

</references>

<section anchor="examples"
         title="Examples of the Reconfiguration Procedures">
<t>Please note that this appendix is informational only.</t>
<t>The following message flows between Endpoints E-A and E-Z
illustrate the described procedures. The time
progresses in downward direction.</t>

<t>The following example illustrates E-A resetting
streams 1 and 2 for just its outgoing streams.
<figure>
<artwork>
   E-A                                         E-Z
   ----------[RE-CONFIG(OUT-REQ:X/1,2)]----------&gt;
   &lt;-------------[RE-CONFIG(RESP:X)]--------------
</artwork>
</figure></t>

<t>The following example illustrates E-A resetting
streams 1 and 2 for just its incoming streams.
<figure>
<artwork>
   E-A                                         E-Z
   -----------[RE-CONFIG(IN-REQ:X/1,2)]----------&gt;
   &lt;--------[RE-CONFIG(OUT-REQ:Y,X/1,2)]----------
   -------------[RE-CONFIG(RESP:Y)]--------------&gt;
</artwork>
</figure></t>

<t>The following example illustrates E-A resetting all
streams in both directions.
<figure>
<artwork>
   E-A                                         E-Z
   -----[RE-CONFIG(OUT-REQ:X,Y-1|IN-REQ:X+1)]----&gt;
   &lt;------[RE-CONFIG(RESP:X|OUT-REQ:Y,X+1)]-------
   -------------[RE-CONFIG(RESP:Y)]--------------&gt;
</artwork>
</figure></t>

<t>The following example illustrates E-A requesting that
the streams and TSNs be reset. At completion, E-A has
the new sending TSN (selected by the peer) of B, and E-Z has
the new sending TSN of A (also selected by the peer).
<figure>
<artwork>
   E-A                                         E-Z
   ------------[RE-CONFIG(TSN-REQ:X)]------------&gt;
   &lt;-----[RE-CONFIG(RESP:X/S-TSN=A, R-TSN=B)]-----
</artwork>
</figure></t>

<t>The following example illustrates E-A requesting the
addition of 3 outgoing streams.
<figure>
<artwork>
   E-A                                         E-Z
   --------[RE-CONFIG(ADD_OUT_STRMS:X/3)]--------&gt;
   &lt;-------------[RE-CONFIG(RESP:X)]--------------
</artwork>
</figure></t>

<t>The following example illustrates E-A requesting the
addition of 3 incoming streams.
<figure>
<artwork>
   E-A                                         E-Z
   ---------[RE-CONFIG(ADD_IN_STRMS:X/3)]--------&gt;
   &lt;----[RE-CONFIG(ADD_OUT_STRMS-REQ:Y,X/3)]------
   -------------[RE-CONFIG(RESP:Y)]--------------&gt;
</artwork>
</figure></t>

</section>
</back>
</rfc>
