<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "../rfc2629.dtd">
<?xml-stylesheet href="rfc2629.css" type="text/css"?>
<?rfc symrefs='yes'?>
<?rfc toc='yes'?>
<?rfc compact='yes'?>
<?rfc subcompact='no'?>
<?rfc sortrefs='yes'?>
<?rfc rfcedstyle='yes'?>

<!-- [rfced] Please note that after you have approved the document,
post-xml2rfc changes will be made to the header and boilerplate as
described in RFC 5741.
-->

<rfc number="6068" ipr="pre5378Trust200902" category="std" obsoletes="2368">
<front> 

<title>The 'mailto' URI Scheme</title>

<author initials="M.J." surname="Duerst" fullname='Martin Duerst
   (Note: Please write "Duerst" with u-umlaut wherever possible, for example as "D&amp;#252;rst" in XML and HTML.)'>
  <organization>Aoyama Gakuin University</organization>
  <address>
  <postal>
  <street>5-10-1 Fuchinobe</street>
  <city>Sagamihara</city>
  <region>Kanagawa</region>
  <code>229-8558</code>
  <country>Japan</country>
  </postal>
  <phone>+81 42 759 6329</phone>
  <facsimile>+81 42 759 6495</facsimile>
  <email>duerst@it.aoyama.ac.jp</email>
  <uri>http://www.sw.it.aoyama.ac.jp/D%C3%BCrst/</uri>
  </address>
</author>

<author initials="L." surname="Masinter" fullname="Larry Masinter">
<organization>Adobe Systems Incorporated</organization>
  <address><postal>
  <street>345 Park Ave</street>
  <city>San Jose</city>
  <region>CA</region>
  <code>95110</code>
  <country>USA</country>
  </postal>
  <phone>+1-408-536-3024</phone>
  <email>LMM@acm.org</email>
  <uri>http://larry.masinter.net/</uri>
  </address>
</author>

<author initials="J." surname="Zawinski" fullname="Jamie Zawinski">
     <organization>DNA Lounge</organization>
     <address>
      <postal>
       <street>375 Eleventh Street</street>
       <city>San Francisco</city>
       <region>CA</region>
       <code>94103</code>
       <country>USA</country>
      </postal>
      <email>jwz@jwz.org</email>
     </address>
</author>

<date year="2010" month="October" />

<area>Applications</area>
<keyword>mailto</keyword>
<keyword>Email Address</keyword>
<keyword>URI Scheme</keyword>
<keyword>IRI</keyword>

<abstract>

<t>This document defines the format of Uniform Resource Identifiers
   (URIs) to identify resources that are reached using Internet mail.
   It adds better internationalization and compatibility with
   Internationalized Resource Identifiers (IRIs; RFC 3987) to the previous
   syntax of 'mailto' URIs (RFC 2368).</t>
</abstract>

</front>

<middle>
<section title="Introduction">
<t>The 'mailto' URI scheme is used to identify resources that are reached using Internet mail.
   In its simplest form, a 'mailto' URI contains an Internet mail address.
   For interactions that require message headers or message bodies to be specified,
   the 'mailto' URI scheme also allows providing mail header fields and the message body.</t>

   
<t>This specification extends the previous scheme definition to also
   allow character data to be percent-encoded based on UTF-8 <xref target="STD63"/>, which
   offers a better and more consistent way of dealing with
   non-ASCII characters for internationalization.</t>
<t>This specification
   does not address the needs of the ongoing Email Address
   Internationalization effort (see <xref target="RFC4952"/>).
   In particular, this specification does not include syntax
   for fallback addresses.</t>

   <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      <xref target="RFC2119"></xref>.</t>
   <t>In this document, URIs are enclosed in '&lt;' and '&gt;' as described in
      Appendix C of <xref target="STD66"></xref>.
      Extra whitespace and line breaks are added to
      present long URIs -- they are not part of the actual URI.</t>
   
</section>

<section title="Syntax of a 'mailto' URI" anchor="syntax">
   
<t>The syntax of a 'mailto' URI is described using the 
   ABNF of <xref target="STD68"/>, non-terminal
   definitions from <xref target="RFC5322"/>
   (dot-atom-text, quoted-string), and  non-terminal
   definitions from <xref target="STD66"></xref>
   (unreserved, pct-encoded):
</t>
<figure>
<artwork type="abnf">
   mailtoURI    = "mailto:" [ to ] [ hfields ]
   to           = addr-spec *("," addr-spec )
   hfields      = "?" hfield *( "&amp;" hfield )
   hfield       = hfname "=" hfvalue
   hfname       = *qchar
   hfvalue      = *qchar
   addr-spec    = local-part "@" domain
   local-part   = dot-atom-text / quoted-string
   domain       = dot-atom-text / "[" *dtext-no-obs "]"
   dtext-no-obs = %d33-90 / ; Printable US-ASCII
                  %d94-126  ; characters not including
                            ; "[", "]", or "\"
   qchar        = unreserved / pct-encoded / some-delims
   some-delims  = "!" / "$" / "'" / "(" / ")" / "*"
                / "+" / "," / ";" / ":" / "@"</artwork>
</figure>
<t>&lt;addr-spec> is a mail address as specified in <xref target="RFC5322"
               />, but excluding &lt;comment> from <xref target="RFC5322"
            />. However, the following changes apply:</t>
   <t><list style="numbers">
      <t>A number of characters that can appear in &lt;addr-spec> MUST be percent-encoded. These are the characters that cannot appear in a URI according to <xref
                     target="STD66"
                  /> as well as "%" (because it is used for percent-encoding) and all the characters in gen-delims except "@" and ":" (i.e., "/", "?", "#", "[", and "]"). Of the characters in sub-delims, at least the following also have to be percent-encoded: "&amp;", ";", and "=". Care has to be taken both when encoding as well as when decoding to make sure these operations are applied only once.</t>
      <t>&lt;obs-local-part> and &lt;NO-WS-CTL> as defined in <xref target="RFC5322"
                  /> MUST NOT be used.</t>
      <t>Whitespace and comments within &lt;local-part> and &lt;domain> MUST NOT be used. They would not have any operational semantics.</t>
      <t>Percent-encoding can be used in the &lt;domain> part of an &lt;addr-spec> in order to denote an internationalized domain name. The considerations for &lt;reg-name> in <xref
                     target="STD66"
                     /> apply. In particular, non-ASCII characters MUST first be encoded according to UTF-8 <xref
                     target="STD63"
                     />, and then each octet of the corresponding UTF-8 sequence MUST be percent-encoded
         to be represented as URI characters. URI-producing applications MUST NOT use percent-encoding
         in domain names unless it is used to represent a UTF-8 character sequence.
         When the internationalized domain name is used to compose a message,
         the name MUST be transformed to the Internationalizing Domain Names in Applications (IDNA) encoding <xref
                     target="RFC5891" /> where appropriate. 

URI producers SHOULD
                     provide these domain names in the
                     IDNA encoding, rather than percent-encoded, if they wish to maximize interoperability with legacy 'mailto' URI interpreters.</t>
      <t>Percent-encoding of non-ASCII octets in the &lt;local-part> of an &lt;addr-spec> is reserved for the internationalization of the &lt;local-part>. Non-ASCII characters MUST first be encoded according to UTF-8 <xref
                     target="STD63"
                  />, and then each octet of the corresponding UTF-8 sequence MUST be percent-encoded
         to be represented as URI characters. Any other percent-encoding of non-ASCII characters is prohibited.
         When a &lt;local-part> containing non-ASCII characters will be used to compose a message,
         the &lt;local-part> MUST be transformed to conform to whatever encoding may be defined
         in a future specification for the internationalization of email addresses.</t>
     </list>
   </t>
   
   <t>&lt;hfname> and &lt;hfvalue> are encodings of an <xref target="RFC5322"
               /> header field name and value, respectively. Percent-encoding is needed 
      for the same characters as listed above for &lt;addr-spec>. &lt;hfname> is
      case-insensitive, but &lt;hfvalue> in general is case-sensitive. Note that <xref
               target="RFC5322"
            /> allows all US-ASCII printable characters except ":" in optional header
      field names (Section 3.6.8), which is the reason why &lt;pct-encoded> is part of the
      header field name production. </t>
   
<t>The special &lt;hfname> "body" indicates that the associated &lt;hfvalue> is the body
   of the message. The "body" field value is intended to contain the content for the first
   text/plain body part of the message. The "body" pseudo header field is primarily intended
   for the generation of short text messages for automatic processing (such as "subscribe"
   messages for mailing lists), not for general MIME bodies.
   Except for the encoding of
   characters based on UTF-8 and percent-encoding, no additional encoding
   (such as e.g., base64 or quoted-printable; see <xref target="RFC2045"/>) is used for the
   "body" field value. As a consequence, header fields related to message encoding
   (e.g., Content-Transfer-Encoding) in a 'mailto' URI are irrelevant and MUST be ignored.
   The "body" pseudo header field name has been registered with IANA for this special purpose
   (see <xref target="bodyRegister"/>).</t>
   
   <t>Within 'mailto' URIs, the characters "?", "=", and "&amp;" are reserved, serving as delimiters.
      They have to be escaped (as "%3F", "%3D", and "%26", respectively) when not serving as delimiters.</t>
   
<t>Additional restrictions on what characters are allowed might apply depending on the context
   where the URI is used. Such restrictions can be addressed by context-specific escaping mechanisms.
   For example, because the "&amp;" (ampersand) character is reserved in HTML and XML, any 'mailto'
   URI that contains an ampersand has to be written with an HTML/XML entity ("&amp;amp;") or numeric
   character reference ("&amp;#x26;" or "&amp;#38;").</t>
<t>Non-ASCII characters can be encoded in &lt;hfvalue> as follows:
   <list style="numbers">
      <t>MIME encoded words (as defined in <xref target="RFC2047"
                  />) are permitted in header field values, but not in an &lt;hfvalue> of a "body" &lt;hfname>. Sequences of characters that look like MIME encoded words can appear in an &lt;hfvalue> of a "body" &lt;hfname>, but in that case have no special meaning. Please note that the '=' and '?' characters used as delimiters in MIME encoded words have to be percent-encoded. Also note that the use of MIME encoded words differs slightly for so-called structured and unstructured header fields.</t>
      <t>Non-ASCII characters can be encoded according to UTF-8 <xref target="STD63"
                     />, and then each octet of the corresponding UTF-8 sequence is percent-encoded to be represented as URI characters. When header field values encoded in this way are used to compose a message, the &lt;hfvalue> has to be suitably encoded (transformed into MIME encoded words <xref
                     target="RFC2047"
                     />), except for an &lt;hfvalue> of a "body" &lt;hfname>, which has to be encoded according to <xref
                     target="RFC2045"
                  />. Please note that for MIME encoded words and for bodies in composed email messages, encodings other than UTF-8 MAY be used as long as the characters are properly transcoded.</t>
   </list>
</t>
   <t>Also note that it is syntactically valid to specify both &lt;to> and an &lt;hfname> whose value is "to". That is,</t>
<t>&lt;mailto:addr1@an.example,addr2@an.example></t>
<t>is equivalent to</t>
<t>&lt;mailto:?to=addr1@an.example,addr2@an.example></t>
<t>is equivalent to</t>
   <t>&lt;mailto:addr1@an.example?to=addr2@an.example></t>
   
   <t>However, the latter form is NOT RECOMMENDED because different user agents handle this case
      differently. In particular, some existing
  clients ignore "to" &lt;hfvalue>s.</t>
      <t>Implementations MUST NOT produce two "To:" header fields in a message;
      the "To:" header field may occur at most once in a message (<xref target="RFC5322"/>, Section 3.6).
      Also, creators of 'mailto' URIs MUST NOT include other message header fields multiple times
      if these header fields can only be used once in a message.</t>
   <t>To avoid interoperability problems, creators of 'mailto' URIs SHOULD NOT use the same &lt;hfname> multiple times in the same URI.
       If the same &lt;hfname> appears multiple times in a URI,
      behavior varies widely for different user agents, and for each &lt;hfname>.
      Examples include using only the first or last &lt;hfname>/&lt;hfvalue> pair,
      creating multiple header fields, and combining each &lt;hfvalue> by simple concatenation
      or in a way appropriate for the corresponding header field. </t>
   <t>Note that this specification, like any URI scheme specification, does 
      not define syntax or meaning of a fragment identifier (see <xref target="STD66"/>), because these 
      depend on the type of a retrieved representation. In the currently 
      known usage scenarios, a 'mailto' URI cannot be used to retrieve
      such representations. Therefore, fragment identifiers are meaningless,
      SHOULD NOT be used on 'mailto' URIs, and SHOULD be ignored upon
      resolution. The character "#" in &lt;hfvalue>s MUST be escaped as %23.</t>
</section>
<section title="Semantics and Operations" anchor="semantics">
<t>A 'mailto' URI designates an "Internet resource", which is the mailbox specified in the address. When additional header fields are supplied, the resource designated is the same address but with an additional profile for accessing the resource. While there are Internet resources that can only be accessed via electronic mail, the 'mailto' URI is not intended as a way of retrieving such objects automatically.</t>
<t>The operation of how any URI scheme is resolved is not mandated by the URI specifications. In current practice, resolving URIs such as those in the 'http' URI scheme causes an immediate interaction between client software and a host running an interactive server. The 'mailto' URI has unusual semantics because resolving such a URI does not cause an immediate interaction with a server. Instead, the client creates a message to the designated address with the various header fields set as default. The user can edit the message, send the message unedited, or choose not to send the message.</t>
         <t>The &lt;hfname>/&lt;hfvalue> pairs in a 'mailto' URI, although syntactically equivalent to header fields in a mail message, do not directly correspond to the header fields in a mail message. In particular, the To, Cc, and Bcc &lt;hfvalue>s don't necessarily result in a header field containing the specified value. Mail client software MAY eliminate duplicate addresses. Creators of 'mailto' URIs SHOULD avoid using the same address twice in a 'mailto' URI.</t>
         <t>Originator fields like From and Date, fields related to routing (Apparently-To, Resent-*, etc.),
            trace fields, and MIME header fields (MIME-Version,
            Content-*), when present in the URI, MUST be ignored.


            The mail client MUST create new fields when necessary, as it would for any new message.
            Unrecognized header fields and header fields with values inconsistent with those
            the mail client would normally send SHOULD be treated as
            especially suspect.   For example, there may be header fields that are totally safe but not
  known to the MUA, so the MUA MAY choose to show them to the user.
</t>

</section>
<section title="Unsafe Header Fields">
<t>The user agent interpreting a 'mailto' URI SHOULD NOT create a message
   if any of the header fields are considered dangerous; it MAY also choose to create a message
   with only a subset of the header fields given in the URI. Only a limited set of header fields
   such as Subject and Keywords, as well as Body, are believed to be both safe and useful in the general case.
   In cases where the source of a URI is well known, and/or specific header fields are limited
   to specific well-known values, other header fields MAY be considered safe, too.</t>
<t>The creator of a 'mailto' URI cannot expect the resolver of a URI to understand more than the "subject" header field and "body". Clients that resolve 'mailto' URIs into mail messages MUST be able to correctly create <xref
               target="RFC5322"
            />-compliant mail messages using the "subject" header field and "body".</t>
</section>
   
<section title="Encoding" anchor='encoding'>
<t><xref target="STD66"
            /> requires that many characters in URIs be encoded. This affects the 'mailto' URI scheme for some common characters that might appear in addresses, header fields, or message contents. One such character is space (" ", ASCII hex 20). Note the examples below that use "%20" for space in the message body. Also note that line breaks in the body of a message MUST be encoded with "%0D%0A". Implementations MAY add a final line break to the body of a message even if there is no trailing "%0D%0A" in the body &lt;hfield> of the 'mailto' URI. Line breaks in other &lt;hfield>s SHOULD NOT be used.</t>
   
<t>When creating 'mailto' URIs, any reserved
   characters that are used in the URIs MUST be encoded so that
   properly written URI
   interpreters can read them. Also, client software that reads URIs
   MUST decode strings before creating the mail message so
   that the mail message appears in a form that the recipient software will
   understand. These strings SHOULD be decoded before showing the message to
   the sending user.</t>
   
   <t>Software creating 'mailto' URIs likewise has to be careful to encode
      any reserved characters that are used. 
HTML forms are one kind of software that creates 'mailto' URIs.

      Current implementations encode a space as '+', but this creates problems
      because such a '+' standing for a space cannot be distinguished from a real '+' in a 'mailto' URI.
      When producing 'mailto' URIs, all spaces SHOULD be encoded as %20,
      and '+' characters MAY be encoded as %2B.
      &nbsp;Please note that '+' characters are frequently used as part of an email
      address to indicate a subaddress, as for example in &lt;bill+ietf@example.org&gt;.</t>

   <t>The 'mailto' URI scheme is limited in that it does not provide for
   substitution of variables. Thus, it is impossible to create a 'mailto' URI
   that includes a user's email address in the message body. This
   limitation also prevents 'mailto' URIs that are signed with public keys
   and other such variable information.</t>
</section>
   
<section title="Examples">
<section title="Basic Examples"><t>
   A URI for an ordinary individual mailing address:</t>
<t>
     &lt;mailto:chris@example.com&gt;</t>
<t>
   A URI for a mail response system that requires the name of the file to be sent back
   in the subject:</t>
<t>
     &lt;mailto:infobot@example.com?subject=current-issue&gt;</t>
<t>
   A mail response system that requires a "send" request in the body:</t>
<t>
     &lt;mailto:infobot@example.com?body=send%20current-issue&gt;</t>
<t>
   A similar URI, with two lines with different "send" requests (in
   this case, "send current-issue" and, on the next line, "send index"):</t>
<t>
     &lt;mailto:infobot@example.com?body=send%20current-issue%0D%0Asend%20index&gt;</t>
<t>
   An interesting use of 'mailto' URIs occurs when browsing archives of
   messages. A link can be provided that allows replying to a message and conserving
   threading information. This is done by adding an In&nbhy;Reply&nbhy;To header field containing
   the Message-ID of  the message where the link is added, for example:</t>
<t>
     &lt;mailto:list@example.org?In-Reply-To=%3C3469A91.D10AF4C@example.com%3E&gt;
</t>
<t>
   A request to subscribe to a mailing list:</t>
<t>
     &lt;mailto:majordomo@example.com?body=subscribe%20bamboo-l&gt;</t>
<t>
   A URI that is for a single user and that includes a CC of another user:</t>
<t>
     &lt;mailto:joe@example.com?cc=bob@example.com&amp;body=hello&gt;</t>

<t>
   Note the use of the "&amp;" reserved character above. The following
   example, using "?" twice, is incorrect:</t>
<t>
     &lt;mailto:joe@example.com?cc=bob@example.com?body=hello&gt;   ; WRONG!</t>
<t>
   According to <xref target="RFC5322"/>, the characters "?", "&amp;",
   and even "%" may occur
   in addr-specs. The fact that they are reserved characters is not a problem:
   those characters may appear in 'mailto' URIs --
   they just may not appear in unencoded form. The standard URI encoding
   mechanisms ("%" followed by a two-digit hex number) MUST be used in
   these cases.</t>
<t>
   To indicate the address "gorby%kremvax@example.com" one would use:</t>
<t>
     &lt;mailto:gorby%25kremvax@example.com&gt;</t>
<t>
   To indicate the address "unlikely?address@example.com", and include
   another header field, one would use:</t>
<t>
     &lt;mailto:unlikely%3Faddress@example.com?blat=foop&gt;</t>
<t>
   As described above, the "&amp;" (ampersand) character is reserved in HTML
   and has to be replaced, e.g., with "&amp;amp;". Thus, a URI with an
   internal ampersand might look like:</t>
<t>
   Click  
<vspace/>
&lt;a href="mailto:joe@an.example?cc=bob@an.example&amp;amp;body=hello"<vspace/>
     &gt;mailto:joe@an.example?cc=bob@an.example&amp;amp;body=hello&lt;/a&gt; to
     send a greeting message to Joe and Bob.</t>


<t>When an email address itself
     includes an "&amp;" (ampersand) character, that character has to be percent-encoded.
     For example, the 'mailto' URI to send mail to "Mike&amp;family@example.org"
     is &lt;mailto:Mike%26family@example.org&gt;.</t></section>
<section title="Examples of Complicated Email Addresses">
<t>Following are a few examples of how to treat email addresses
that contain complicated escaping syntax.</t>
<t>Email address: "not@me"@example.org;
corresponding 'mailto' URI:</t>
   <t>&lt;mailto:%22not%40me%22@example.org&gt;.</t>
<t>Email address: "oh\\no"@example.org;
corresponding 'mailto' URI:</t>
   <t>&lt;mailto:%22oh%5C%5Cno%22@example.org&gt;.</t>
   <t>Email address: "\\\"it's\ ugly\\\""@example.org;
   corresponding 'mailto' URI:</t>
   <t>&lt;mailto:%22%5C%5C%5C%22it's%5C%20ugly%5C%5C%5C%22%22@example.org&gt;.</t>
</section>
<section title="Examples Using UTF-8-Based Percent-Encoding">
<t>Sending a mail with the subject "coffee" in French,
i.e., "cafe" where the final e is an e-acute, using UTF-8 and
percent-encoding:</t>
<t>&lt;mailto:user@example.org?subject=caf%C3%A9&gt;</t>
<t>The same subject, this time using an encoded-word
(escaping the "=" and "?" characters used in the encoded-word
syntax, because they are reserved):</t>
<t>&lt;mailto:user@example.org?subject=%3D%3Futf-8%3FQ%3Fcaf%3DC3%3DA9%3F%3D&gt;</t>
<t>The same subject, this time encoded as iso-8859-1:</t>
<t>&lt;mailto:user@example.org?subject=%3D%3Fiso-8859-1%3FQ%3Fcaf%3DE9%3F%3D&gt;</t>
<t>Going back to straight UTF-8 and adding a body with the same value:</t>
<t>&lt;mailto:user@example.org?subject=caf%C3%A9&amp;body=caf%C3%A9&gt;</t>
<figure><preamble>This 'mailto' URI may result in a message looking like this:</preamble><artwork>
   From: sender@example.net
   To: user@example.org
   Subject: =?utf-8?Q?caf=C3=A9?=
   Content-Type: text/plain;charset=utf-8
   Content-Transfer-Encoding: quoted-printable

   caf=C3=A9
</artwork></figure>
<figure>
<preamble>The software sending the email is not restricted to UTF-8, but can use other encodings.
   The following shows the same email using iso&nbhy;8859&nbhy;1 two times:</preamble><artwork>
   From: sender@example.net
   To: user@example.org
   Subject: =?iso-8859-1?Q?caf=E9?=
   Content-Type: text/plain;charset=iso-8859-1
   Content-Transfer-Encoding: quoted-printable

   caf=E9
</artwork>
<postamble>Different content transfer encodings (i.e., "8bit"
or "base64" instead of "quoted-printable")  and different
encodings in encoded words (i.e., "B" instead of "Q") can also be used.</postamble>
</figure>
<t>For more examples of encoding the word coffee
in different languages, see <xref target="RFC2324"></xref>.</t>
<t>The following example uses the Japanese word "natto"
(Unicode characters U+7D0D U+8C46) as a domain name label, sending a mail
to a user at "natto".example.org:</t>
<t>&lt;mailto:user@%E7%B4%8D%E8%B1%86.example.org?subject=Test&amp;body=NATTO&gt;</t>
<t><figure>
<preamble>When constructing the email, the domain name
label is converted to punycode. The resulting message may
look as follows:</preamble><artwork>
   From: sender@example.net
   To: user@xn--99zt52a.example.org
   Subject: Test
   Content-Type: text/plain
   Content-Transfer-Encoding: 7bit

   NATTO
</artwork></figure>
</t></section>
</section>
<section title="Security Considerations"  anchor="security">
<t>The 'mailto' URI scheme can be used to send a message from one user to another,
   and thus can introduce many security concerns. Mail messages can be logged at the
   originating site, the recipient site, and intermediary sites along the delivery path.
   If the messages are not encrypted, they can also be read at any of those sites.</t>
<t>A 'mailto' URI gives a template for a message that can be sent by mail client software.
   The contents of that template may be opaque or difficult to read by the user at the
   time of specifying the URI, as well as being hidden in the user interface
   (for example, a link on an HTML Web page
   might display something other than the content of the corresponding
   'mailto' URI that would be used when clicked).
   Thus, a mail client SHOULD NOT send a message based on a
   'mailto' URI without first disclosing and showing to the user the full message that
   will be sent (including all header fields that were specified by the 'mailto' URI),
   fully decoded, and asking the user for approval to send the message as electronic mail.
   The mail client SHOULD also make it clear that the user is about to send an electronic
   mail message, since the user may not be aware that this is the
   result of a 'mailto' URI.    Users are strongly encouraged to ensure that the 'mailto' URI presented
  to them matches the address included in the "To:" line of the email
  message.
</t>

   <t>Some header fields are inherently unsafe to include in a message generated from a URI. For details, please see <xref
               target="semantics"
            />. In general, the fewer header fields interpreted from the URI, the less likely it is that a sending agent will create an unsafe message.</t>
<t>Examples of problems with sending unapproved mail include:</t>
<t>
<list>
     <t> mail that breaks laws upon delivery, such as making illegal threats;</t>

     <t> mail that identifies the sender as someone interested in breaking laws;</t>

     <t> mail that identifies the sender to an unwanted third party;</t>

     <t> mail that causes a financial charge to be incurred by the sender;</t>

     <t> mail that causes an action on the recipient machine that causes
       damage that might be attributed to the sender.</t>
</list>
</t>
   <t>Programs that interpret 'mailto' URIs SHOULD ensure that the SMTP envelope return path address, which is given as an argument to the SMTP MAIL FROM command, is set and correct, and that the resulting email is a complete, workable message.</t>
   <t>'mailto' URIs on public Web pages expose mail addresses for harvesting. This applies to all mail addresses that are part of the 'mailto' URI, including the addresses in a "bcc" &lt;hfvalue>. Those addresses will not be sent to the recipients in the 'to' field and in the "to" and "cc" &lt;hfvalue>s, but will still be publicly visible in the URI. Addresses in a "bcc" &lt;hfvalue> may also leak to other addresses in the same &lt;hfvalue> or become known otherwise, depending on the mail user agent used.</t>
   <t>Programs manipulating 'mailto' URIs have to take great care to not
      inadvertently double-escape or double-unescape 'mailto' URIs, and
      to make sure that escaping and unescaping conventions relating to URIs
      and relating to mail addresses are applied in the right order.</t>
   <t>Implementations parsing 'mailto' URIs must take care to sanity
   check
      'mailto' URIs in order to avoid buffer overflows and problems resulting
      from them (e.g., execution of code specified by the attacker).</t>
   <t>The security considerations of <xref target="STD66"/>,
   <xref target="RFC5890"/>, <xref target="RFC5891"/>,
   and <xref target="RFC3987"/> also apply. Implementers and users are advised to check them carefully.</t>
</section>
   
<section title="IANA Considerations">
   <section title="Update of the Registration of the 'mailto' URI Scheme" anchor="registryTemplate">

   <figure>
      <preamble>This document changes the definition of the 'mailto' URI
scheme; the registry of URI schemes has been updated to refer to this
document rather than its predecessor, <xref target="RFC2368"/>.
The registration template is as follows:</preamble><artwork>
URI scheme name:
   'mailto'

Status:
   permanent

URI scheme syntax:
   See the syntax section of RFC 6068.

URI scheme semantics:
   See the semantics section of RFC 6068.

Encoding considerations:
   See the syntax and encoding sections of RFC 6068.
            
Applications/protocols that use this URI scheme name:
   The 'mailto' URI scheme is widely used since the start of the Web.

Interoperability considerations:
   Interoperability for 'mailto' URIs with UTF-8-based percent-encoding
   might be somewhat lower than interoperability for 'mailto' URIs with
   US-ASCII only.

Security considerations:
   See the security considerations section of RFC 6068.
            
Contact:
   IETF

Author/Change controller:
   IETF

References:
   RFC 6068
 </artwork></figure>
</section>

<section title="Registration of the Body Header Field" anchor="bodyRegister">
<figure>
<preamble>IANA has registered the
Body header field in the Message Header Fields Registry
(<xref target="RFC3864"/>) as follows:</preamble><artwork>
Header field name:
   Body

Applicable protocol:
   None.  This registration is made to assure that this header field
   name is not used at all, in order to not create any problems for
   'mailto' URIs.

Status:
   reserved

Author/Change controller:
   IETF

Specification document(s):
   RFC 6068

Related information:
   none</artwork></figure>
      
</section>  
</section>
<section title="Main Changes from RFC 2368">
   <t>The main changes from RFC 2368 are as follows:</t>
   <t>
      <list style="symbols">
         <t>Changed syntax from RFC 2822 &lt;mailbox> to <xref target="RFC5322"
                  /> &lt;addr-spec>.</t>
         <t>Allowed UTF-8-based percent-encoding for domain names and in &lt;hfvalue>.</t>
         <t>Nailed down percent-encoding in &lt;local-part> to be
         based on UTF-8, reserved for if and when there is a specification for
the internationalization of email addresses.</t>

         <t>Removed prohibition against "Bcc:" header fields, but added a warning
            about their visibility and harvesting for spam.</t>
         <t>Added clarifications for escaping.</t>
      </list>
   </t>
</section>

<section title="Acknowledgments">
<t>
   This document was derived from <xref target="RFC2368"/>; the
   acknowledgments from that specification still apply.
   In addition, we thank Paul Hoffman for his work on
   <xref target="RFC2368"/>.</t>
<t>Valuable input on this document was received from (in no particular order):
   Alexey Melnikov, Paul Hoffman, Charles Lindsey, Tim Kindberg, Frank Ellermann,
   Etan Wexler, Michael Haardt, Michael Anthony Puls&nbsp;II, Eliot Lear, Dave Crocker,
   Dan Harkins, Nevil Brownlee, John Klensin, Alfred Hoenes, Ned Freed, Sean Turner,
   Peter Saint-Andre, Adrian Farrel, Avshalom Houri, Robert Sparks, and many others.</t>
</section>
</middle>

<back>

<references title="Normative References">

<reference anchor="RFC2045"><front><title>Multipurpose Internet Mail Extensions
                            (MIME) Part One:
                   Format of Internet Message Bodies</title>
<author initials="N." surname="Freed" fullname="Ned Freed"><organization/></author>
<author initials="N." surname="Borenstein" fullname="Nathaniel Borenstein"><organization/>
</author>
<date month="November" year="1996"/></front>
<seriesInfo name="RFC" value="2045"/>
</reference>

<reference anchor="RFC2047">
<front>
<title>MIME Part Three: Message Header Extensions for Non-ASCII Text</title>
<author initials="K." surname="Moore" fullname="Keith Moore"><organization/></author>
<date year="1996" month="November"/>
</front>
<seriesInfo name="RFC" value="2047"/>
</reference>

<reference anchor="RFC2119">
<front>
<title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials="S." surname="Bradner" fullname="Scott Bradner"><organization/></author>
<date month="March" year="1997"/>
<area>General</area>
<keyword>keyword</keyword>
</front>
<seriesInfo name="BCP" value="14"/>
<seriesInfo name="RFC" value="2119"/>
</reference>

<reference anchor='RFC5890'>

<front>
<title>Internationalized Domain Names for Applications (IDNA): Definitions and
Document Framework</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<date year='2010' month='August' />
</front>

<seriesInfo name='RFC' value='5890' />
<format type='TXT' octets='54245'
target='http://www.rfc-editor.org/rfc/rfc5890.txt' />
</reference>

<reference anchor='RFC5891'>

<front>
<title>Internationalized Domain Names in Applications (IDNA): Protocol</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<date year='2010' month='August' />
</front>

<seriesInfo name='RFC' value='5891' />
<format type='TXT' octets='38105'
target='http://www.rfc-editor.org/rfc/rfc5891.txt' />
</reference>


<reference anchor="RFC3987">
<front>
<title>Internationalized Resource Identifiers (IRIs)</title>
<author initials="M.J." surname="Duerst" fullname="Martin Duerst"><organization/></author>
<author initials="M.L." surname="Suignard" fullname="Michel Suignard"><organization/></author>
<date year="2005" month="January"/>
<note title="Note to RFC Editor:"><t> Please update this reference to a reference to the RFC
   version of draft-duerst-iri-bis.</t></note></front>
<seriesInfo name="RFC" value="3987"/>
</reference>



<reference anchor="STD63">
<front>
<title abbrev="UTF-8">UTF-8, a transformation format of ISO 10646</title>
<author initials="F." surname="Yergeau" fullname="Francois Yergeau"><organization/></author>
<date month="November" year="2003"/>
</front>
<seriesInfo name="STD" value="63"/>
<seriesInfo name="RFC" value="3629"/>

</reference><reference anchor="RFC3864">
  <front>
  <title>Registration Procedures for Message Header Fields</title>
  <author initials="G." surname="Klyne" fullname="G. Klyne"><organization/></author>
  <author initials="M." surname="Nottingham" fullname="M. Nottingham"><organization/></author>
  <author initials="J." surname="Mogul" fullname="J. Mogul"><organization/></author>
  <date year="2004" month="September"/>
  </front>
  <seriesInfo name="BCP" value="90"/>  
  <seriesInfo name="RFC" value="3864"/>
</reference>

<reference anchor="STD66">
<front>
<title abbrev="URI Generic Syntax">Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee"><organization/></author>
<author initials="R.T." surname="Fielding" fullname="Roy T. Fielding"><organization/></author>
<author initials="L." surname="Masinter" fullname="Larry Masinter"><organization/></author>
<date month="January" year="2005"/>
</front>
<seriesInfo name="STD" value="66"/>
<seriesInfo name="RFC" value="3986"/>
</reference>

<reference anchor="STD68">
<front>
<title abbrev="ABNF">Augmented BNF for Syntax Specifications: ABNF</title>
<author initials="D." surname="Crocker" fullname="Dave Crocker"><organization/></author>
<author initials="P." surname="Overell" fullname="Paul Overell"><organization/></author>
<date month="January" year="2008"/></front>
<seriesInfo name="STD" value="68"/><seriesInfo name="RFC" value="5234"/>
</reference>

<reference anchor="RFC5322">
<front>
<title>Internet Message Format</title>
<author initials="P." surname="Resnik" fullname="Pete Resnik"><organization/></author>
<date year="2008" month="October"/>
</front>
<seriesInfo name="RFC" value="5322"/>
</reference></references>

<references title="Informative References">

<reference anchor="RFC2324"><front><title>Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0)</title>
   <author initials="L." surname="Masinter" fullname="Larry Masinter"><organization></organization></author>
   <date day="1" month="April" year="1998"/></front><seriesInfo name="RFC" value="2324"/>
</reference>

<reference anchor="RFC2368">
<front>
<title>The mailto URL scheme</title>
<author initials="P." surname="Hoffman" fullname="Paul Hoffman"><organization/></author>
<author initials="L." surname="Masinter" fullname="Larry Masinter"><organization/></author>
<author initials="J." surname="Zawinski" fullname="Jamie Zawinski"><organization/></author>
<date year="1998" month="July"/>
</front>
<seriesInfo name="RFC" value="2368"/>
</reference>

<reference anchor="RFC4952">
<front><title>Overview and Framework for Internationalized Email</title>
   <author initials="J." surname="Klensin" fullname="John Klensin"><organization/></author>
   <author initials="Y." surname="Ko" fullname="YangWoo Ko"><organization/></author>
   <date month="July" year="2007"/></front>
   <seriesInfo name="RFC" value="4952"/>
</reference>

</references>


</back>
</rfc>
