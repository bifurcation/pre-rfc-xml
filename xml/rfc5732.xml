<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd"
[
  <!ENTITY rfc0791 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.0791.xml'>
  <!ENTITY rfc0952 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.0952.xml'>
  <!ENTITY rfc1034 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1034.xml'>
  <!ENTITY rfc1035 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1035.xml'>
  <!ENTITY rfc1123 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1123.xml'>
  <!ENTITY rfc2119 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
  <!ENTITY rfc2781 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2781.xml'>
  <!ENTITY rfc2874 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2874.xml'>
  <!ENTITY rfc3490 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3490.xml'>
  <!ENTITY rfc3596 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3596.xml'>
  <!ENTITY rfc3688 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml'>
  <!ENTITY rfc4291 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4291.xml'>
  <!ENTITY rfc4932 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4932.xml'>
   
  <!ENTITY W3C.xml PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-xml-20040204.xml'>
  <!ENTITY W3C.xmlschema-1 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-xmlschema-1-20041028.xml'>
  <!ENTITY W3C.xmlschema-2 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-xmlschema-2-20041028.xml'>

]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc rfcedstyle="yes"?>
<?rfc subcompact="no"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc category="std" number="5732" obsoletes="4932" seriesNo="69">
  <front>
    <title abbrev="EPP Host Mapping">
    Extensible Provisioning Protocol (EPP) Host Mapping</title>
    <author initials="S." surname="Hollenbeck" fullname="Scott Hollenbeck">
      <organization>VeriSign, Inc.</organization>
      <address>
        <postal>
          <street>21345 Ridgetop Circle</street>
          <city>Dulles</city>
          <region>VA</region>
          <code>20166-6503</code>
          <country>US</country>
        </postal>
        <email>shollenbeck@verisign.com</email>
      </address>
    </author>

    <date year="2009" month="September"/>
    <area>Applications</area>
    <keyword>EPP</keyword>
    <keyword>Extensible Provisioning Protocol</keyword>
    <keyword>XML</keyword>
    <keyword>host</keyword>

    <abstract>
      <t>This document describes an Extensible Provisioning Protocol (EPP)
      mapping for the provisioning and management of Internet host names
      stored in a shared central repository.  Specified in XML, the mapping
      defines EPP command syntax and semantics as applied to host names.
      This document obsoletes RFC 4932.</t>
    </abstract>

  </front>

<!-- [rfced] We note the presence of an XML schema, which is listed as
a Code Component on
(http://trustee.ietf.org/docs/Code-Components-List-4-23-09.txt).

The Legal Provisions Relating to IETF Documents
requires that all code components include the BSD license  (see
section 4 of the IETF Trust Legal Provisions Relating to IETF
Documents - http://trustee.ietf.org/license-info/).

There has been a request to the Trust to update the IETF Trust Legal
Provisions Relating to IETF Documents so that the BSD license is not
required.  The Trust distributed text for community review, but has
not yet made the update to the IETF Trust Legal Provisions Relating to
IETF Documents. So there are currently 3 options for your document.
You may choose to:

1. include the BSD license with the code,

2. copy the code into a new section (e.g., Appendix) and include the
license there (this is recommended if you have code snippets in
multiple places), or

3. wait to see what happens with the requested change to the
Trust Legal Provisions (TLP).

Please let us know how you would like to proceed.
-->

  <middle>
    <section title="Introduction">
      <t>This document describes an Internet host name mapping for version 1.0
      of the Extensible Provisioning Protocol (EPP).  This mapping is
      specified using the Extensible Markup Language (XML) 1.0 as described
      in <xref target="W3C.REC-xml-20040204"/> and XML Schema notation as
      described in <xref target="W3C.REC-xmlschema-1-20041028"/> and
      <xref target="W3C.REC-xmlschema-2-20041028"/>.  This document
      obsoletes RFC 4932 <xref target="RFC4932"/>.</t>

      <t><xref target="RFC5730"/> provides a
      complete description of EPP command and response
      structures.  A thorough understanding of the base protocol
      specification is necessary to understand the mapping described in
      this document.</t>

      <t>XML is case sensitive.  Unless stated otherwise, XML specifications
      and examples provided in this document MUST be interpreted in the
      character case presented to develop a conforming implementation.</t>

      <section title="Relationship of Host Objects and Domain Objects">
	<t>This document assumes that host name objects have a subordinate
	relationship to a superordinate domain name object.  For example,
	host name "ns1.example.com" has a subordinate relationship to domain
	name "example.com".  EPP actions (such as object transfers) that do
	not preserve this relationship MUST be explicitly disallowed.</t>

	<t>A host name object can be created in a repository for which no
	superordinate domain name object exists.  For example, host name
	"ns1.example.com" can be created in the ".example" repository so that
	DNS domains in ".example" can be delegated to the host.  Such hosts
	are described as "external" hosts in this specification since the
	name of the host does not belong to the namespace of the repository
	in which the host is being used for delegation purposes.</t>

	<t>Whether a host is external or internal relates to the repository in
	which the host is being used for delegation purposes.  An
	internal host is subordinate if the name of the host belongs
	to the domain within the repository in which the host is being used for
   delegation purposes.  For example, host ns1.example1.com is a subordinate host
	of domain example1.com, but it is not a subordinate host of domain
	example2.com.  ns1.example1.com can be used as a name server for
	example2.com.  In this case, ns1.example1.com MUST be treated as an
	internal host, subject to the rules governing operations on
	subordinate hosts within the same repository.</t>
      </section>

      <section title="Conventions Used in This Document">
	<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
	"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
	document are to be interpreted as described in <xref target="RFC2119"/>.</t>

	<t>In examples, "C:" represents lines sent by a protocol client and "S:"
	represents lines returned by a protocol server.  Indentation and
	white space in examples are provided only to illustrate element
	relationships and are not a REQUIRED feature of this protocol.</t>
      </section>
    </section>

    <section title="Object Attributes">
      <t>An EPP host object has attributes and associated values that can be
      viewed and modified by the sponsoring client or the server.  This
      section describes each attribute type in detail.  The formal syntax
      for the attribute values described here can be found in the "Formal
      Syntax" section of this document and in the appropriate normative
      references.</t>

      <section title="Host Names">
	<t>The syntax for host names described in this document MUST conform to
	<xref target="RFC0952"/> as updated by <xref target="RFC1123"/>.  At the
	time of this writing, RFC 3490 <xref target="RFC3490"/> describes a
	standard to use certain ASCII name labels to represent non-ASCII name
	labels.  These conformance requirements might change in the future as a
	result of progressing work in developing standards for internationalized
	host names.</t>
      </section>

      <section title="Client Identifiers">
	<t>All EPP clients are identified by a server-unique identifier.  Client
	identifiers conform to the "clIDType" syntax described in
	<xref target="RFC5730"/>.</t>
      </section>

      <section title="Status Values">
	<t>A host object MUST always have at least one associated status value.
	Status values MAY be set only by the client that sponsors a host
	object and by the server on which the object resides.  A client can
	change the status of a host object using the EPP &lt;update&gt; command.
	Each status value MAY be accompanied by a string of human-readable
	text that describes the rationale for the status applied to the
	object.</t>

	<t>A client MUST NOT alter status values set by the server.  A server
	MAY alter or override status values set by a client, subject to local
	server policies.  The status of an object MAY change as a result of
	either a client-initiated transform command or an action performed by
	a server operator.</t>

	<t>Status values that can be added or removed by a client are prefixed
	with "client".  Corresponding status values that can be added or
	removed by a server are prefixed with "server".  Status values that
	do not begin with either "client" or "server" are server-managed.</t>

	<t>Status Value Descriptions:</t>

	<t><list style="hanging">
	  <t hangText="-">clientDeleteProhibited, serverDeleteProhibited
          <vspace blankLines="1"/>
          Requests to delete the object MUST be rejected.
          <vspace blankLines="1"/>
	  </t>

	  <t hangText="-">clientUpdateProhibited, serverUpdateProhibited
          <vspace blankLines="1"/>
          Requests to update the object (other than to remove this status) MUST
          be rejected.
          <vspace blankLines="1"/>
          </t>

          <t hangText="-">linked
          <vspace blankLines="1"/>
          The host object has at least one active association with another
          object, such as a domain object.  Servers SHOULD provide services to
          determine existing object associations.
          <vspace blankLines="1"/>
          </t>

          <t hangText="-">ok
          <vspace blankLines="1"/>
          This is the normal status value for an object that has no pending
          operations or prohibitions.  This value is set and removed by the
          server as other status values are added or removed.
          <vspace blankLines="1"/>
          </t>

          <t hangText="-">pendingCreate, pendingDelete, pendingTransfer, pendingUpdate
          <vspace blankLines="1"/>
          A transform command has been processed for the object (or in the case
          of a &lt;transfer&gt; command, for the host object's superordinate domain
          object), but the action has not been completed by the server.  Server
          operators can delay action completion for a variety of reasons, such
          as to allow for human review or third-party action.  A transform
          command that is processed, but whose requested action is pending, is
          noted with response code 1001.
          </t>
	</list></t>

	<t>When the requested action has been completed, the pendingCreate,
	pendingDelete, pendingTransfer, or pendingUpdate status value MUST be
	removed.  All clients involved in the transaction MUST be notified
	using a service message that the action has been completed and that
	the status of the object has changed.</t>

	<t>"ok" status MAY only be combined with "linked" status.</t>

	<t>"linked" status MAY be combined with any status.</t>

	<t>"pendingDelete" status MUST NOT be combined with either
	"clientDeleteProhibited" or "serverDeleteProhibited" status.</t>

	<t>"pendingUpdate" status MUST NOT be combined with either
	"clientUpdateProhibited" or "serverUpdateProhibited" status.</t>

	<t>The pendingCreate, pendingDelete, pendingTransfer, and pendingUpdate
	status values MUST NOT be combined with each other.</t>

	<t>Other status combinations not expressly prohibited MAY be used.</t>
      </section>

      <section title="Dates and Times">
	<t>Date and time attribute values MUST be represented in Universal
	Coordinated Time (UTC) using the Gregorian calendar.  The extended
	date-time form using upper case "T" and "Z" characters defined in
	<xref target="W3C.REC-xmlschema-2-20041028"/> MUST be used to represent
	date-time values, as XML Schema does not support truncated date-time forms
	or lower case "T" and "Z" characters.</t>
      </section>

      <section title="IP Addresses">
	<t>The syntax for IPv4 addresses described in this document MUST conform
	to <xref target="RFC0791"/>.  The syntax for IPv6 addresses described in this
	document MUST conform to <xref target="RFC4291"/>.  Practical considerations for
	publishing IPv6 address information in zone files are documented in
	<xref target="RFC2874"/> and <xref target="RFC3596"/>.
	A server MAY reject IP addresses that have not been allocated for public use by IANA.
	When a host object is provisioned for use as a DNS name server, IP
	addresses SHOULD be required only as needed to generate DNS glue
	records.</t>
      </section>
    </section>

    <section title="EPP Command Mapping">
      <t>A detailed description of the EPP syntax and semantics can be found
      in <xref target="RFC5730"/>.  The command mappings described here are specifically
      for use in provisioning and managing Internet host names via EPP.</t>

      <section title="EPP Query Commands">
	<t>EPP provides two commands to retrieve host information: &lt;check&gt; to
	determine if a host object can be provisioned within a repository,
	and &lt;info&gt; to retrieve detailed information associated with a host
	object.</t>

        <section title="EPP &lt;check&gt; Command">
	  <t>The EPP &lt;check&gt; command is used to determine if an object can be
	  provisioned within a repository.  It provides a hint that allows a
	  client to anticipate the success or failure of provisioning an object
	  using the &lt;create&gt; command, as object-provisioning requirements are
	  ultimately a matter of server policy.</t>

	  <t>In addition to the standard EPP command elements, the &lt;check&gt; command
	  MUST contain a &lt;host:check&gt; element that identifies the host
	  namespace.  The &lt;host:check&gt; element contains the following child elements:</t>

	  <t><list style="hanging">
	    <t hangText="-">One or more &lt;host:name&gt; elements that contain the fully qualified
            names of the host objects to be queried.
	    </t>
	  </list></t>

          <figure>
            <artwork>Example &lt;check&gt; command:

C:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
C:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
C:  &lt;command&gt;
C:    &lt;check&gt;
C:      &lt;host:check
C:       xmlns:host="urn:ietf:params:xml:ns:host-1.0"&gt;
C:        &lt;host:name&gt;ns1.example.com&lt;/host:name&gt;
C:        &lt;host:name&gt;ns2.example.com&lt;/host:name&gt;
C:        &lt;host:name&gt;ns3.example.com&lt;/host:name&gt;
C:      &lt;/host:check&gt;
C:    &lt;/check&gt;
C:    &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
C:  &lt;/command&gt;
C:&lt;/epp&gt;</artwork>
          </figure>

	  <t>When a &lt;check&gt; command has been processed successfully, the EPP
	  &lt;resData&gt; element MUST contain a child &lt;host:chkData&gt; element that
	  identifies the host namespace.  The &lt;host:chkData&gt; element contains
	  one or more &lt;host:cd&gt; elements that contain the following child elements:</t>

	  <t><list style="hanging">
	    <t hangText="-">A &lt;host:name&gt; element that contains the fully qualified name of
            the queried host object.  This element MUST contain an "avail"
            attribute whose value indicates object availability (can it be
            provisioned or not) at the moment the &lt;check&gt; command was
            completed.  A value of "1" or "true" means that the object can be
            provisioned.  A value of "0" or "false" means that the object cannot
            be provisioned.
            </t>

            <t hangText="-">An OPTIONAL &lt;host:reason&gt; element that MAY be provided when an
            object cannot be provisioned.  If present, this element contains
            server-specific text to help explain why the object cannot be
            provisioned.  This text MUST be represented in the response
            language previously negotiated with the client; an OPTIONAL "lang"
            attribute MAY be present to identify the language if the
            negotiated value is something other than the default value of "en"
            (English).
            </t>
	  </list></t>

          <figure>
            <artwork>Example &lt;check&gt; response:

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1000"&gt;
S:      &lt;msg&gt;Command completed successfully&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;resData&gt;
S:      &lt;host:chkData
S:       xmlns:host="urn:ietf:params:xml:ns:host-1.0"&gt;
S:        &lt;host:cd&gt;
S:          &lt;host:name avail="1"&gt;ns1.example.com&lt;/host:name&gt;
S:        &lt;/host:cd&gt;
S:        &lt;host:cd&gt;
S:          &lt;host:name avail="0"&gt;ns2.example2.com&lt;/host:name&gt;
S:          &lt;host:reason&gt;In use&lt;/host:reason&gt;
S:        &lt;/host:cd&gt;
S:        &lt;host:cd&gt;
S:          &lt;host:name avail="1"&gt;ns3.example3.com&lt;/host:name&gt;
S:        &lt;/host:cd&gt;
S:      &lt;/host:chkData&gt;
S:    &lt;/resData&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:      &lt;svTRID&gt;54322-XYZ&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
          </figure>

          <t>An EPP error response MUST be returned if a &lt;check&gt; command cannot
          be processed for any reason.</t>
        </section>

        <section title="EPP &lt;info&gt; Command">
	  <t>The EPP &lt;info&gt; command is used to retrieve information associated
	  with a host object.  In addition to the standard EPP command
	  elements, the &lt;info&gt; command MUST contain a &lt;host:info&gt; element that
	  identifies the host namespace.  The &lt;host:info&gt; element contains the
	  following child elements:</t>

	  <t><list style="hanging">
	    <t hangText="-">A &lt;host:name&gt; element that contains the fully qualified name of
            the host object for which information is requested.
            </t>
	  </list></t>

          <figure>
            <artwork>Example &lt;info&gt; command:

C:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
C:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
C:  &lt;command&gt;
C:    &lt;info&gt;
C:      &lt;host:info
C:       xmlns:host="urn:ietf:params:xml:ns:host-1.0"&gt;
C:        &lt;host:name&gt;ns1.example.com&lt;/host:name&gt;
C:      &lt;/host:info&gt;
C:    &lt;/info&gt;
C:    &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
C:  &lt;/command&gt;
C:&lt;/epp&gt;</artwork>
          </figure>

	  <t>When an &lt;info&gt; command has been processed successfully, the EPP
	  &lt;resData&gt; element MUST contain a child &lt;host:infData&gt; element that
	  identifies the host namespace.  The &lt;host:infData&gt; element contains the
	  following child elements:</t>

	  <t><list style="hanging">
	    <t hangText="-">A &lt;host:name&gt; element that contains the fully qualified name of
            the host object.
            </t>

            <t hangText="-">A &lt;host:roid&gt; element that contains the Repository Object
            IDentifier assigned to the host object when the object was created.
            </t>

            <t hangText="-">One or more &lt;host:status&gt; elements
            that describe the status of the  host object.
            </t>

            <t hangText="-">Zero or more &lt;host:addr&gt; elements that contain the IP addresses
            associated with the host object.
            </t>

            <t hangText="-">A &lt;host:clID&gt; element that contains the identifier of the
            sponsoring client.
            </t>

            <t hangText="-">A &lt;host:crID&gt; element that contains the identifier of the client
            that created the host object.
            </t>

            <t hangText="-">A &lt;host:crDate&gt; element that
            contains the date and time of host-object creation.
            </t>

            <t hangText="-">A &lt;host:upID&gt; element that contains the identifier of the client
            that last updated the host object.  This element MUST NOT be
            present if the host object has never been modified.
            </t>

            <t hangText="-">A &lt;host:upDate&gt; element that
            contains the date and time of the
            most recent host-object modification.  This element MUST NOT be
            present if the host object has never been modified.
            </t>

            <t hangText="-">A &lt;host:trDate&gt; element that
            contains the date and time of the
            most recent successful host-object transfer.  This element MUST
            NOT be provided if the host object has never been transferred.
            Note that host objects MUST NOT be transferred directly; host
            objects MUST be transferred implicitly when the host object's
            superordinate domain object is transferred.  Host objects that are
            subject to transfer when transferring a domain object are listed
            in the response to an EPP &lt;info&gt; command performed on the domain
            object.
            </t>
          </list></t>

          <figure>
            <artwork>Example &lt;info&gt; response:

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1000"&gt;
S:      &lt;msg&gt;Command completed successfully&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;resData&gt;
S:      &lt;host:infData
S:       xmlns:host="urn:ietf:params:xml:ns:host-1.0"&gt;
S:        &lt;host:name&gt;ns1.example.com&lt;/host:name&gt;
S:        &lt;host:roid&gt;NS1_EXAMPLE1-REP&lt;/host:roid&gt;
S:        &lt;host:status s="linked"/&gt;
S:        &lt;host:status s="clientUpdateProhibited"/&gt;
S:        &lt;host:addr ip="v4"&gt;192.0.2.2&lt;/host:addr&gt;
S:        &lt;host:addr ip="v4"&gt;192.0.2.29&lt;/host:addr&gt;
S:        &lt;host:addr ip="v6"&gt;1080:0:0:0:8:800:200C:417A&lt;/host:addr&gt;
S:        &lt;host:clID&gt;ClientY&lt;/host:clID&gt;
S:        &lt;host:crID&gt;ClientX&lt;/host:crID&gt;
S:        &lt;host:crDate&gt;1999-04-03T22:00:00.0Z&lt;/host:crDate&gt;
S:        &lt;host:upID&gt;ClientX&lt;/host:upID&gt;
S:        &lt;host:upDate&gt;1999-12-03T09:00:00.0Z&lt;/host:upDate&gt;
S:        &lt;host:trDate&gt;2000-04-08T09:00:00.0Z&lt;/host:trDate&gt;
S:      &lt;/host:infData&gt;
S:    &lt;/resData&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:      &lt;svTRID&gt;54322-XYZ&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
          </figure>

	  <t>An EPP error response MUST be returned if an &lt;info&gt; command cannot
	  be processed for any reason.</t>
	</section>

        <section title="EPP &lt;transfer&gt; Query Command">
	  <t>Transfer semantics do not directly apply to host objects, so there is
	  no mapping defined for the EPP &lt;transfer&gt; query command.</t>
	</section>
      </section>

      <section title="EPP Transform Commands" anchor="transforms">
	<t>EPP provides three commands to transform host objects: &lt;create&gt; to
	create an instance of a host object, &lt;delete&gt; to delete an instance
	of a host object, and &lt;update&gt; to change information associated with
	a host object.  This document does not define host-object mappings
	for the EPP &lt;renew&gt; and &lt;transfer&gt; commands.</t>

	<t>Transform commands are typically processed and completed in real
	time.  Server operators MAY receive and process transform commands
	but defer completing the requested action if human or third-party
	review is required before the requested action can be completed.  In
	such situations, the server MUST return a 1001 response code to the
	client to note that the command has been received and
	processed but that the requested action is pending.  The server MUST also manage the
	status of the object that is the subject of the command to reflect
	the initiation and completion of the requested action.  Once the
	action has been completed, all clients involved in the transaction
	MUST be notified using a service message that the action has been
	completed and that the status of the object has changed.  Other notification
        methods MAY be used in addition to the required service message.</t>
      
        <t>Server operators SHOULD confirm that a client is authorized to perform
        a transform command on a given object.  Any attempt to transform an object by
        an unauthorized client MUST be rejected, and the server MUST return a 2201 response
        code to the client to note that the client lacks privileges to execute the requested
        command.</t>

        <section title="EPP &lt;create&gt; Command">
	  <t>The EPP &lt;create&gt; command provides a transform operation that allows a
	  client to create a host object.  In addition to the standard EPP
	  command elements, the &lt;create&gt; command MUST contain a &lt;host:create&gt;
	  element that identifies the host namespace.  The &lt;host:create&gt; element
	  contains the following child elements:</t>

	  <t><list style="hanging">
	    <t hangText="-">A &lt;host:name&gt; element that contains the fully qualified name of
            the host object to be created.
           </t>

           <t hangText="-">Zero or more &lt;host:addr&gt; elements that contain the IP addresses to
           be associated with the host.  Each element MAY contain an "ip"
           attribute to identify the IP address format.  Attribute value "v4"
           is used to note IPv4 address format.  Attribute value "v6" is used
           to note IPv6 address format.  If the "ip" attribute is not
           specified, "v4" is the default attribute value.
           </t>
	  </list></t>

	  <t>Hosts can be provisioned for use as name servers in the Domain Name
	  System (DNS), described in <xref target="RFC1034"/> and <xref target="RFC1035"/>.  Hosts
	  provisioned as name servers might be subject to server-operator
	  policies that require or prohibit specification of IP addresses,
	  depending on the name of the host and the namespace in which the
	  server will be used as a name server.  When provisioned for use as a
	  name server, IP addresses are REQUIRED only as needed to produce DNS
	  glue records.  For example, if the server is authoritative for the
	  "com" namespace and the name of the server is "ns1.example.net", the
	  server is not required to produce DNS glue records for the name
	  server, and IP addresses for the server are not required by the DNS.</t>

	  <t>If the host name exists in a namespace for which the server is
	  authoritative, then the superordinate domain of the host MUST be
	  known to the server before the host object can be created.</t>

          <figure>
            <artwork>Example &lt;create&gt; command:

C:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
C:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
C:  &lt;command&gt;
C:    &lt;create&gt;
C:      &lt;host:create
C:       xmlns:host="urn:ietf:params:xml:ns:host-1.0"&gt;
C:        &lt;host:name&gt;ns1.example.com&lt;/host:name&gt;
C:        &lt;host:addr ip="v4"&gt;192.0.2.2&lt;/host:addr&gt;
C:        &lt;host:addr ip="v4"&gt;192.0.2.29&lt;/host:addr&gt;
C:        &lt;host:addr ip="v6"&gt;1080:0:0:0:8:800:200C:417A&lt;/host:addr&gt;
C:      &lt;/host:create&gt;
C:    &lt;/create&gt;
C:    &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
C:  &lt;/command&gt;
C:&lt;/epp&gt;</artwork>
          </figure>

	  <t>When a &lt;create&gt; command has been processed successfully, the EPP
	  &lt;resData&gt; element MUST contain a child &lt;host:creData&gt; element that
	  identifies the host namespace.  The &lt;host:creData&gt; element contains the
	  following child elements:</t>

	  <t><list style="hanging">
	    <t hangText="-">A &lt;host:name&gt; element that contains the fully qualified name of
            the host object.
            </t>

            <t hangText="-">A &lt;host:crDate&gt; element that
            contains the date and time of host-object creation.
            </t>
	  </list></t>

          <figure>
            <artwork>Example &lt;create&gt; response:

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1000"&gt;
S:      &lt;msg&gt;Command completed successfully&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;resData&gt;
S:      &lt;host:creData
S:       xmlns:host="urn:ietf:params:xml:ns:host-1.0"&gt;
S:        &lt;host:name&gt;ns1.example.com&lt;/host:name&gt;
S:        &lt;host:crDate&gt;1999-04-03T22:00:00.0Z&lt;/host:crDate&gt;
S:      &lt;/host:creData&gt;
S:    &lt;/resData&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:      &lt;svTRID&gt;54322-XYZ&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
          </figure>

	  <t>An EPP error response MUST be returned if a &lt;create&gt; command cannot
	  be processed for any reason.</t>
	</section>

        <section title="EPP &lt;delete&gt; Command">
	  <t>The EPP &lt;delete&gt; command provides a transform operation that allows a
	  client to delete a host object.  In addition to the standard EPP
	  command elements, the &lt;delete&gt; command MUST contain a &lt;host:delete&gt;
	  element that identifies the host namespace.  The &lt;host:delete&gt; element
	  contains the following child elements:</t>

	  <t><list style="hanging">
	    <t hangText="-">A &lt;host:name&gt; element that contains the fully qualified name of
            the host object to be deleted.
            </t>
	  </list></t>

	  <t>A host name object SHOULD NOT be deleted if the host object is
	  associated with any other object.  For example, if the host object is
	  associated with a domain object, the host object SHOULD NOT be deleted
	  until the existing association has been broken.  Deleting a host object
	  without first breaking existing associations can cause DNS resolution
	  failure for domain objects that refer to the deleted host object.</t>

          <figure>
            <artwork>Example &lt;delete&gt; command:

C:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
C:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
C:  &lt;command&gt;
C:    &lt;delete&gt;
C:      &lt;host:delete
C:       xmlns:host="urn:ietf:params:xml:ns:host-1.0"&gt;
C:        &lt;host:name&gt;ns1.example.com&lt;/host:name&gt;
C:      &lt;/host:delete&gt;
C:    &lt;/delete&gt;
C:    &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
C:  &lt;/command&gt;
C:&lt;/epp&gt;</artwork>
          </figure>

	  <t>When a &lt;delete&gt; command has been processed successfully, a server
	  MUST respond with an EPP response with no &lt;resData&gt; element.</t>

          <figure>
            <artwork>Example &lt;delete&gt; response:

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1000"&gt;
S:      &lt;msg&gt;Command completed successfully&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:      &lt;svTRID&gt;54321-XYZ&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
          </figure>

	  <t>An EPP error response MUST be returned if a &lt;delete&gt; command cannot
	  be processed for any reason.</t>
	</section>

        <section title="EPP &lt;renew&gt; Command">
	  <t>Renewal semantics do not apply to host objects, so there is no
	  mapping defined for the EPP &lt;renew&gt; command.</t>
	</section>

        <section title="EPP &lt;transfer&gt; Command">
	  <t>Transfer semantics do not directly apply to host objects, so there is
	  no mapping defined for the EPP &lt;transfer&gt; command.  Host objects are
	  subordinate to an existing superordinate domain object and, as such,
	  they are subject to transfer when a domain object is transferred.</t>
	</section>

        <section title="EPP &lt;update&gt; Command">
	  <t>The EPP &lt;update&gt; command provides a transform operation that allows a
	  client to modify the attributes of a host object.  In addition to the
	  standard EPP command elements, the &lt;update&gt; command MUST contain a
	  &lt;host:update&gt; element that identifies the host namespace.  The
	  &lt;host:update&gt; element contains the following child elements:</t>

	  <t><list style="hanging">
	    <t hangText="-">A &lt;host:name&gt; element that contains the fully qualified name of
            the host object to be updated.
            </t>

            <t hangText="-">An OPTIONAL &lt;host:add&gt; element that contains attribute values to
            be added to the object.
            </t>

            <t hangText="-">An OPTIONAL &lt;host:rem&gt; element that contains attribute values to
            be removed from the object.
            </t>

            <t hangText="-">An OPTIONAL &lt;host:chg&gt; element that contains object attribute
            values to be changed.
            </t>
	  </list></t>

	  <t>At least one &lt;host:add&gt;, &lt;host:rem&gt;, or &lt;host:chg&gt; element
          MUST be provided if the command is not being extended.  All of these elements MAY be
          omitted if an &lt;update&gt; extension is present.  The &lt;host:add&gt; and
          &lt;host:rem&gt; elements contain the following child elements:</t>

          <t><list style="hanging">
            <t hangText="-">One or more &lt;host:addr&gt; elements that contain IP addresses to be
            associated with or removed from the host object.  IP address
            restrictions described in the &lt;create&gt; command mapping apply here
            as well.
            </t>

            <t hangText="-">One or more &lt;host:status&gt; elements that contain status values to
            be associated with or removed from the object.  When specifying a
            value to be removed, only the attribute value is significant;
            element text is not required to match a value for removal.
            </t>
          </list></t>

	  <t>A &lt;host:chg&gt; element contains the following child elements:</t>

	  <t><list style="hanging">
	    <t hangText="-">A &lt;host:name&gt; element that contains a new fully qualified host
            name by which the host object will be known.
            </t>
	  </list></t>

	  <t>Host name changes MAY require the addition or removal of IP addresses
	  to be accepted by the server.  IP address association MAY be subject
	  to server policies for provisioning hosts as name servers.</t>

	  <t>Host name changes can have an impact on associated objects that refer
	  to the host object.  A host name change SHOULD NOT require additional
	  updates of associated objects to preserve existing associations, with
	  one exception:  changing an external host object that has
	  associations with objects that are sponsored by a different client.
	  Attempts to update such hosts directly MUST fail with EPP error code
	  2305. The change can be provisioned by creating a new external host
	  with a new name and any needed new attributes, and subsequently
	  updating the other objects sponsored by the client.</t>

          <figure>
            <artwork>Example &lt;update&gt; command:

C:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
C:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
C:  &lt;command&gt;
C:    &lt;update&gt;
C:      &lt;host:update
C:       xmlns:host="urn:ietf:params:xml:ns:host-1.0"&gt;
C:        &lt;host:name&gt;ns1.example.com&lt;/host:name&gt;
C:        &lt;host:add&gt;
C:          &lt;host:addr ip="v4"&gt;192.0.2.22&lt;/host:addr&gt;
C:          &lt;host:status s="clientUpdateProhibited"/&gt;
C:        &lt;/host:add&gt;
C:        &lt;host:rem&gt;
C:          &lt;host:addr ip="v6"&gt;1080:0:0:0:8:800:200C:417A&lt;/host:addr&gt;
C:        &lt;/host:rem&gt;
C:        &lt;host:chg&gt;
C:          &lt;host:name&gt;ns2.example.com&lt;/host:name&gt;
C:        &lt;/host:chg&gt;
C:      &lt;/host:update&gt;
C:    &lt;/update&gt;
C:    &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
C:  &lt;/command&gt;
C:&lt;/epp&gt;</artwork>
          </figure>

	  <t>When an &lt;update&gt; command has been processed successfully, a server
	  MUST respond with an EPP response with no &lt;resData&gt; element.</t>

          <figure>
            <artwork>Example &lt;update&gt; response:

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1000"&gt;
S:      &lt;msg&gt;Command completed successfully&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:      &lt;svTRID&gt;54321-XYZ&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
          </figure>

	  <t>An EPP error response MUST be returned if an &lt;update&gt; command could
	  not be processed for any reason.</t>
	</section>
      </section>

      <section title="Offline Review of Requested Actions">
	<t>Commands are processed by a server in the order they are received
	from a client.  Though an immediate response confirming receipt and
	processing of the command is produced by the server, a server
	operator MAY perform an offline review of requested transform
	commands before completing the requested action.  In such situations,
	the response from the server MUST clearly note that the transform
	command has been received and processed, but the requested action is
	pending.  The status of the corresponding object MUST clearly reflect
	processing of the pending action.  The server MUST notify the client
	when offline processing of the action has been completed.</t>

	<t>Examples describing a &lt;create&gt; command that requires offline review
	are included here.  Note the result code and message returned in
	response to the &lt;create&gt; command.</t>

        <figure>
          <artwork>S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1001"&gt;
S:      &lt;msg&gt;Command completed successfully; action pending&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;resData&gt;
S:      &lt;host:creData
S:       xmlns:host="urn:ietf:params:xml:ns:host-1.0"&gt;
S:        &lt;host:name&gt;ns1.example.com&lt;/host:name&gt;
S:        &lt;host:crDate&gt;1999-04-03T22:00:00.0Z&lt;/host:crDate&gt;
S:      &lt;/host:creData&gt;
S:    &lt;/resData&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:      &lt;svTRID&gt;54322-XYZ&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
        </figure>

	<t>The status of the host object after returning this response MUST
	include "pendingCreate".  The server operator reviews the request
        offline and informs the client of the outcome of the review either by
        queuing a service message for retrieval via the &lt;poll&gt;
        command or by using an out-of-band mechanism to inform the client of
        the request.</t>

	<t>The service message MUST contain text that describes the notification
in the child &lt;msg&gt; element of the response &lt;msgQ&gt; element.
In addition, the EPP &lt;resData&gt; element MUST contain a child
	  &lt;host:panData&gt; element that identifies the host
	  namespace.  The &lt;host:panData&gt; element contains the
	  following child elements:</t>

	<t><list style="hanging">
	  <t hangText="-">A &lt;host:name&gt; element that contains the fully qualified name of
          the host object.  The &lt;host:name&gt; element contains a REQUIRED
          "paResult" attribute.  A positive boolean value indicates that the
          request has been approved and completed.  A negative boolean value
          indicates that the request has been denied and the requested
          action has not been taken.
          </t>

          <t hangText="-">A &lt;host:paTRID&gt; element that contains the client transaction
          identifier and server transaction identifier returned with the
          original response to process the command.  The client transaction
          identifier is OPTIONAL and will only be returned if the client
          provided an identifier with the original &lt;create&gt; command.
          </t>

          <t hangText="-">A &lt;host:paDate&gt; element that contains the date and time describing
          when review of the requested action was completed.
          </t>
	</list></t>

        <figure>
          <artwork>Example "review completed" service message:

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:  &lt;response&gt;
S:    &lt;result code="1301"&gt;
S:      &lt;msg&gt;Command completed successfully; ack to dequeue&lt;/msg&gt;
S:    &lt;/result&gt;
S:    &lt;msgQ count="5" id="12345"&gt;
S:      &lt;qDate&gt;1999-04-04T22:01:00.0Z&lt;/qDate&gt;
S:      &lt;msg&gt;Pending action completed successfully.&lt;/msg&gt;
S:    &lt;/msgQ&gt;
S:    &lt;resData&gt;
S:      &lt;host:panData
S:       xmlns:host="urn:ietf:params:xml:ns:host-1.0"&gt;
S:        &lt;host:name paResult="1"&gt;ns1.example.com&lt;/host:name&gt;
S:        &lt;host:paTRID&gt;
S:          &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:          &lt;svTRID&gt;54322-XYZ&lt;/svTRID&gt;
S:        &lt;/host:paTRID&gt;
S:        &lt;host:paDate&gt;1999-04-04T22:00:00.0Z&lt;/host:paDate&gt;
S:      &lt;/host:panData&gt;
S:    &lt;/resData&gt;
S:    &lt;trID&gt;
S:      &lt;clTRID&gt;BCD-23456&lt;/clTRID&gt;
S:      &lt;svTRID&gt;65432-WXY&lt;/svTRID&gt;
S:    &lt;/trID&gt;
S:  &lt;/response&gt;
S:&lt;/epp&gt;</artwork>
        </figure>
      </section>
    </section>

    <section title="Formal Syntax">
      <t>An EPP object mapping is specified in XML Schema notation.  The
      formal syntax presented here is a complete schema representation of
      the object mapping suitable for automated validation of EPP XML
      instances.  The BEGIN and END tags are not part of the schema; they
      are used to note the beginning and ending of the schema for URI
      registration purposes.</t>

  <t>Copyright (c) 2009 IETF Trust and the persons identified as
      authors of the code. All rights reserved.</t>
      
      <t>Redistribution and use in source and binary forms, with or without modification, are permitted provided
      that the following conditions are met:</t>
      
      <t><list style = "symbols">
        <t>Redistributions of source code must retain the above copyright notice, this list of conditions and the
        following disclaimer.</t>
        <t>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
        the following disclaimer in the documentation and/or other materials provided with the distribution.</t>
        <t>Neither the name of Internet Society, IETF or IETF Trust, nor the names of specific contributors, may
        be used to endorse or promote products derived from this software without specific prior written
        permission.</t>
      </list></t>
      
      <t>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
      IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
      THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
      PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
      CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
      EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
      PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
      PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
      LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
      SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</t>
<vspace blankLines="1"/>
      <figure>
        <artwork>BEGIN
&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;schema targetNamespace="urn:ietf:params:xml:ns:host-1.0"
       xmlns:host="urn:ietf:params:xml:ns:host-1.0"
       xmlns:epp="urn:ietf:params:xml:ns:epp-1.0"
       xmlns:eppcom="urn:ietf:params:xml:ns:eppcom-1.0"
       xmlns="http://www.w3.org/2001/XMLSchema"
       elementFormDefault="qualified"&gt;

&lt;!--
Import common element types.
--&gt;
 &lt;import namespace="urn:ietf:params:xml:ns:eppcom-1.0"/&gt;
 &lt;import namespace="urn:ietf:params:xml:ns:epp-1.0"/&gt;

 &lt;annotation&gt;
   &lt;documentation&gt;
     Extensible Provisioning Protocol v1.0
     host provisioning schema.
   &lt;/documentation&gt;
 &lt;/annotation&gt;

&lt;!--
Child elements found in EPP commands.
--&gt;
 &lt;element name="check" type="host:mNameType"/&gt;
 &lt;element name="create" type="host:createType"/&gt;
 &lt;element name="delete" type="host:sNameType"/&gt;
 &lt;element name="info" type="host:sNameType"/&gt;
 &lt;element name="update" type="host:updateType"/&gt;

&lt;!--
Child elements of the &lt;create&gt; command.
--&gt;
 &lt;complexType name="createType"&gt;
   &lt;sequence&gt;
     &lt;element name="name" type="eppcom:labelType"/&gt;
     &lt;element name="addr" type="host:addrType"
      minOccurs="0" maxOccurs="unbounded"/&gt;
   &lt;/sequence&gt;
 &lt;/complexType&gt;

 &lt;complexType name="addrType"&gt;
   &lt;simpleContent&gt;
     &lt;extension base="host:addrStringType"&gt;
       &lt;attribute name="ip" type="host:ipType"
	default="v4"/&gt;
     &lt;/extension&gt;
   &lt;/simpleContent&gt;
 &lt;/complexType&gt;

 &lt;simpleType name="addrStringType"&gt;
   &lt;restriction base="token"&gt;
     &lt;minLength value="3"/&gt;
     &lt;maxLength value="45"/&gt;
   &lt;/restriction&gt;
 &lt;/simpleType&gt;

 &lt;simpleType name="ipType"&gt;
   &lt;restriction base="token"&gt;
     &lt;enumeration value="v4"/&gt;
     &lt;enumeration value="v6"/&gt;
   &lt;/restriction&gt;
 &lt;/simpleType&gt;

&lt;!--
Child elements of the &lt;delete&gt; and &lt;info&gt; commands.
--&gt;
 &lt;complexType name="sNameType"&gt;
   &lt;sequence&gt;
     &lt;element name="name" type="eppcom:labelType"/&gt;
   &lt;/sequence&gt;
 &lt;/complexType&gt;

&lt;!--
Child element of commands that accept multiple names.
--&gt;
 &lt;complexType name="mNameType"&gt;
   &lt;sequence&gt;
     &lt;element name="name" type="eppcom:labelType"
      maxOccurs="unbounded"/&gt;
   &lt;/sequence&gt;
 &lt;/complexType&gt;
&lt;!--
Child elements of the &lt;update&gt; command.
--&gt;
 &lt;complexType name="updateType"&gt;
   &lt;sequence&gt;
     &lt;element name="name" type="eppcom:labelType"/&gt;
     &lt;element name="add" type="host:addRemType"
      minOccurs="0"/&gt;
     &lt;element name="rem" type="host:addRemType"
      minOccurs="0"/&gt;
     &lt;element name="chg" type="host:chgType"
      minOccurs="0"/&gt;
   &lt;/sequence&gt;
 &lt;/complexType&gt;

&lt;!--
Data elements that can be added or removed.
--&gt;
 &lt;complexType name="addRemType"&gt;
   &lt;sequence&gt;
     &lt;element name="addr" type="host:addrType"
      minOccurs="0" maxOccurs="unbounded"/&gt;
     &lt;element name="status" type="host:statusType"
      minOccurs="0" maxOccurs="7"/&gt;
   &lt;/sequence&gt;
 &lt;/complexType&gt;

&lt;!--
Data elements that can be changed.
--&gt;
 &lt;complexType name="chgType"&gt;
   &lt;sequence&gt;
     &lt;element name="name" type="eppcom:labelType"/&gt;
   &lt;/sequence&gt;
 &lt;/complexType&gt;

&lt;!--
Child response elements.
--&gt;
 &lt;element name="chkData" type="host:chkDataType"/&gt;
 &lt;element name="creData" type="host:creDataType"/&gt;
 &lt;element name="infData" type="host:infDataType"/&gt;
 &lt;element name="panData" type="host:panDataType"/&gt;

&lt;!--
&lt;check&gt; response elements.
--&gt;
 &lt;complexType name="chkDataType"&gt;
   &lt;sequence&gt;
     &lt;element name="cd" type="host:checkType"
      maxOccurs="unbounded"/&gt;
   &lt;/sequence&gt;
 &lt;/complexType&gt;

 &lt;complexType name="checkType"&gt;
   &lt;sequence&gt;
     &lt;element name="name" type="host:checkNameType"/&gt;
     &lt;element name="reason" type="eppcom:reasonType"
      minOccurs="0"/&gt;
   &lt;/sequence&gt;
 &lt;/complexType&gt;

 &lt;complexType name="checkNameType"&gt;
   &lt;simpleContent&gt;
     &lt;extension base="eppcom:labelType"&gt;
       &lt;attribute name="avail" type="boolean"
	use="required"/&gt;
     &lt;/extension&gt;
   &lt;/simpleContent&gt;
 &lt;/complexType&gt;

&lt;!--
&lt;create&gt; response elements.
--&gt;
 &lt;complexType name="creDataType"&gt;
   &lt;sequence&gt;
     &lt;element name="name" type="eppcom:labelType"/&gt;
     &lt;element name="crDate" type="dateTime"/&gt;
   &lt;/sequence&gt;
 &lt;/complexType&gt;

&lt;!--
&lt;info&gt; response elements.
--&gt;
 &lt;complexType name="infDataType"&gt;
   &lt;sequence&gt;
     &lt;element name="name" type="eppcom:labelType"/&gt;
     &lt;element name="roid" type="eppcom:roidType"/&gt;
     &lt;element name="status" type="host:statusType"
      maxOccurs="7"/&gt;
     &lt;element name="addr" type="host:addrType"
      minOccurs="0" maxOccurs="unbounded"/&gt;
     &lt;element name="clID" type="eppcom:clIDType"/&gt;
     &lt;element name="crID" type="eppcom:clIDType"/&gt;
     &lt;element name="crDate" type="dateTime"/&gt;
     &lt;element name="upID" type="eppcom:clIDType"
      minOccurs="0"/&gt;
     &lt;element name="upDate" type="dateTime"
      minOccurs="0"/&gt;
     &lt;element name="trDate" type="dateTime"
      minOccurs="0"/&gt;
   &lt;/sequence&gt;
 &lt;/complexType&gt;

&lt;!--
Status is a combination of attributes and an optional human-readable
message that may be expressed in languages other than English.
--&gt;
 &lt;complexType name="statusType"&gt;
   &lt;simpleContent&gt;
     &lt;extension base="normalizedString"&gt;
       &lt;attribute name="s" type="host:statusValueType"
	use="required"/&gt;
       &lt;attribute name="lang" type="language"
	default="en"/&gt;
     &lt;/extension&gt;
   &lt;/simpleContent&gt;
 &lt;/complexType&gt;

 &lt;simpleType name="statusValueType"&gt;
   &lt;restriction base="token"&gt;
     &lt;enumeration value="clientDeleteProhibited"/&gt;
     &lt;enumeration value="clientUpdateProhibited"/&gt;
     &lt;enumeration value="linked"/&gt;
     &lt;enumeration value="ok"/&gt;
     &lt;enumeration value="pendingCreate"/&gt;
     &lt;enumeration value="pendingDelete"/&gt;
     &lt;enumeration value="pendingTransfer"/&gt;
     &lt;enumeration value="pendingUpdate"/&gt;
     &lt;enumeration value="serverDeleteProhibited"/&gt;
     &lt;enumeration value="serverUpdateProhibited"/&gt;
   &lt;/restriction&gt;
 &lt;/simpleType&gt;

&lt;!--
Pending action notification response elements.
--&gt;
 &lt;complexType name="panDataType"&gt;
   &lt;sequence&gt;
     &lt;element name="name" type="host:paNameType"/&gt;
     &lt;element name="paTRID" type="epp:trIDType"/&gt;
     &lt;element name="paDate" type="dateTime"/&gt;
   &lt;/sequence&gt;
 &lt;/complexType&gt;
 &lt;complexType name="paNameType"&gt;
   &lt;simpleContent&gt;
     &lt;extension base="eppcom:labelType"&gt;
       &lt;attribute name="paResult" type="boolean"
	use="required"/&gt;
     &lt;/extension&gt;
   &lt;/simpleContent&gt;
 &lt;/complexType&gt;

&lt;!--
End of schema.
--&gt;
&lt;/schema&gt;
END</artwork>
      </figure>
    </section>

    <section title="Internationalization Considerations">
      <t>EPP is represented in XML, which provides native support for encoding
      information using the Unicode character set and its more compact
      representations including UTF-8.  Conformant XML processors recognize
      both UTF-8 and UTF-16 <xref target="RFC2781"/>.  Though XML includes provisions to
      identify and use other character encodings through use of an
      "encoding" attribute in an &lt;?xml?&gt; declaration, use of UTF-8 is
      RECOMMENDED in environments where parser encoding support
      incompatibility exists.</t>

      <t>All date-time values presented via EPP MUST be expressed in Universal
      Coordinated Time using the Gregorian calendar.  XML Schema allows use
      of time zone identifiers to indicate offsets from the zero meridian,
      but this option MUST NOT be used with EPP.  The extended date-time
      form using upper case "T" and "Z" characters defined in
      <xref target="W3C.REC-xmlschema-2-20041028"/>
      MUST be used to represent date-time values, as XML Schema does not
      support truncated date-time forms or lower case "T" and "Z"
      characters.</t>

      <t>The syntax for domain and host names described in this document MUST
	conform to <xref target="RFC0952"/> and
	<xref target="RFC1123"/>. At the time of this writing, RFC 3490
      <xref target="RFC3490"/> describes a standard to use certain ASCII name labels to
      represent non-ASCII name labels.  These conformance requirements
      might change as a result of progressing work in developing standards
      for internationalized host names.</t>
    </section>

    <section title="IANA Considerations">
      <t>This document uses URNs to describe XML namespaces and XML schemas
      conforming to a registry mechanism described in <xref target="RFC3688"/>.  Two URI
      assignments have been registered by the IANA.</t>

      <t>Registration request for the host namespace:</t>
<list>
      <t>URI: urn:ietf:params:xml:ns:host-1.0</t>

      <t>Registrant Contact: See the "Author's Address" section of this
      document.</t>

      <t>XML: None.  Namespace URIs do not represent an XML specification.</t></list>

      <t>Registration request for the host XML schema:</t>
<list>
      <t>URI: urn:ietf:params:xml:schema:host-1.0</t>

      <t>Registrant Contact: See the "Author's Address" section of this
      document.</t>

      <t>XML: See the "Formal Syntax" section of this document.</t></list>
    </section>

    <section title="Security Considerations">
      <t>The object mapping described in this document does not provide any
      security services or introduce any additional considerations beyond
      those described by <xref target="RFC5730"/>
      or those caused by the protocol layers used by EPP.</t>

    </section>

    <section title="Acknowledgements">
      <t>RFC 3732 is a product of the PROVREG working group, which suggested
improvements and provided many invaluable comments. The author wishes
to acknowledge the efforts of WG chairs Edward Lewis and Jaap
Akkerhuis for their process and editorial contributions.  RFC 4932 and
this document are individual submissions, based on the work done in
RFC 3732.</t>
  
      <t>Specific suggestions that have been incorporated into this document
      were provided by Chris Bason, Jordyn Buchanan, Dave Crocker, Anthony
      Eden, Sheer El-Showk, Klaus Malorny, Dan Manley, Michael Mealling,
      Patrick Mevzek, and Rick Wesson.</t>
    </section>
  </middle>

  <back>

<?rfc rfcedstyle="no"?>

    <references title="Normative References">
      &rfc0791;
      &rfc0952;
      &rfc1034;
      &rfc1035;
      &rfc1123;
      &rfc2119;
      &rfc3688;
      &rfc4291;
      &W3C.xml;
      &W3C.xmlschema-1;
      &W3C.xmlschema-2;
      
<reference anchor="RFC5730">
	<front>
<title>Extensible Provisioning Protocol (EPP)</title>
	<author initials="S" surname="Hollenbeck" fullname="Scott Hollenbeck">
<organization/>
</author>
<date month="September" year="2009"/>
</front>
<seriesInfo name="STD" value="69"/>
<seriesInfo name="RFC" value="5730"/>
</reference>

    </references>

    <references title="Informative References">
      &rfc2781;
      &rfc2874;
      &rfc3490;
      &rfc3596;
      &rfc4932;
    </references>

<?rfc rfcedstyle="yes"?>

<?rfc needLines="100"?>
    <section title="Changes from RFC 4932">
          <t><list style="numbers">
            <t>Changed "This document obsoletes RFC 3732" to "This
            document obsoletes RFC 4932".</t>


            <t>Replaced references to RFC 1886 with references to 3596.</t>
            <t>Removed references to RFC 3152 since both it and 1886 have been obsoleted by 3596.</t>
            <t>Replaced references to RFC 3732 with references to
            4932.</t>
            <t>Replaced references to RFC 4930 with references to 5730.</t>
            <t>Added "Other notification methods MAY be used in addition to the required service message" in <xref target="transforms"/>.</t>
            <t>Added 2201 response code text in <xref target="transforms"/>.</t>
            <t>Added BSD license text to XML schema section.</t>
          </list></t>
    </section>
    

    

  </back>
</rfc>
