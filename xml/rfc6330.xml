<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>
<?rfc toc="yes" ?>
<?rfc tocdepth="3"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>

<rfc number="6330" category="std" submissionType="IETF"
     ipr="trust200902" >
  <front>
    <title abbrev="RaptorQ FEC Scheme">RaptorQ Forward Error
    Correction Scheme for Object Delivery</title>


    <author fullname="Michael Luby" initials="M." surname="Luby">
      <organization>Qualcomm Incorporated</organization>

      <address>
        <postal>
          <street>3165 Kifer Road</street>

          <city>Santa Clara</city>

          <region>CA</region>

          <code>95051</code>

          <country>U.S.A.</country>
        </postal>

        <email>luby@qualcomm.com</email>
      </address>
    </author>

    <author fullname="Amin Shokrollahi" initials="A." surname="Shokrollahi">
      <organization>EPFL</organization>

      <address>
        <postal>
          <street>Laboratoire d'algorithmique</street>

          <street>Station 14</street>

          <street>Batiment BC</street>

          <city>Lausanne</city>

          <code>1015</code>

          <country>Switzerland</country>
        </postal>

        <email>amin.shokrollahi@epfl.ch</email>
      </address>
    </author>

    <author fullname="Mark Watson" initials="M." surname="Watson">
      <organization>Netflix Inc.</organization>

      <address>
        <postal>
          <street>100 Winchester Circle</street>

          <city>Los Gatos</city>

          <region>CA</region>

          <code>95032</code>

          <country>U.S.A.</country>
        </postal>

        <email>watsonm@netflix.com</email>
      </address>
    </author>

    <author fullname="Thomas Stockhammer" initials="T." surname="Stockhammer">
      <organization>Nomor Research</organization>

      <address>
        <postal>
          <street>Brecherspitzstrasse 8</street>

          <city>Munich</city>

          <code>81541</code>

          <country>Germany</country>
        </postal>

        <email>stockhammer@nomor.de</email>
      </address>
    </author>

    <author fullname="Lorenz Minder" initials="L." surname="Minder">
      <organization>Qualcomm Incorporated</organization>

      <address>
        <postal>
          <street>3165 Kifer Road</street>

          <city>Santa Clara</city>

          <region>CA</region>

          <code>95051</code>

          <country>U.S.A.</country>
        </postal>

        <email>lminder@qualcomm.com</email>
      </address>
    </author>

    <date month="August" year="2011" />

    <area>Transport</area>

    <workgroup>Reliable Multicast Transport</workgroup>

<keyword>FEC code, fountain code, systematic code, AL FEC code, Sub-blocking, FEC object delivery</keyword>

    <abstract>
      <t>This document describes a Fully-Specified Forward
      Error Correction (FEC) scheme, corresponding
      to FEC Encoding ID 6, for the RaptorQ FEC code and its application to reliable delivery of data
      objects.</t>

      <t>RaptorQ codes are a new family of codes that provide superior
      flexibility, support for larger source block sizes, and better coding
      efficiency than Raptor codes in RFC 5053. RaptorQ is also a fountain
      code, i.e., as many encoding symbols as needed can be generated on the fly by the
      encoder from the source symbols of a source block of data.

The decoder is able to recover the source block from almost any set of encoding
symbols of sufficient cardinality -- in most cases, a set of cardinality equal to
the number of source symbols is sufficient; in rare cases, a set of cardinality
slightly more than the number of source symbols is required.
</t>

      <t>The RaptorQ code described here is a systematic code, meaning that
      all the source symbols are among the encoding symbols that can be
      generated.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="sec_introduction" title="Introduction">
      <t>This document specifies an FEC scheme for the RaptorQ forward error
      correction code for object delivery applications. The concept of an FEC
      scheme is defined in <xref target="RFC5052">RFC 5052</xref>, and this
      document follows the format prescribed there and uses the terminology of
      that document. The RaptorQ code described herein is a next generation of
      the Raptor code described in <xref target="RFC5053">RFC 5053</xref>. The
      RaptorQ code provides superior reliability, better coding efficiency,
      and support for larger source block sizes than the Raptor code of <xref
      target="RFC5053">RFC 5053</xref>. 

 These improvements simplify the usage of the RaptorQ code in an
 object delivery Content Delivery Protocol compared to RFC 5053
 <xref target="RFC5053">RFC 5053</xref>. A detailed mathematical design and analysis of the RaptorQ
 code together with extensive simulation results are provided in
 <xref target="RaptorCodes"/>.
</t>

      <t>The RaptorQ FEC scheme is a Fully-Specified FEC scheme corresponding
      to FEC Encoding ID 6.</t>

      <t>RaptorQ is a fountain code, i.e., as many encoding symbols as needed
      can be generated on the fly by the encoder from the source symbols of a
      block. 

The decoder is able to recover the source block from almost any set of encoding
symbols of cardinality only slightly larger than the number of source symbols.
</t>

      <t>The code described in this document is a systematic code; that is, the original unmodified source symbols, as well as a number of repair symbols, can be sent from sender to receiver. For more background on
      the use of Forward Error Correction codes in reliable multicast, see
      <xref target="RFC3453"></xref>.</t>
    </section>

    <section anchor="sec_req" title="Requirements Notation">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref>.</t>
    </section>

    <section anchor="sec_fac" title="Formats and Codes">
      <section title="Introduction">
        <t>The octet order of all fields is network byte order, i.e.,
        big-endian.</t>
      </section>

      <section anchor="sec_fec_payload_ids" title="FEC Payload IDs">
        <t>The FEC Payload ID MUST be a 4-octet field defined as follows:
        <figure anchor="fecpayload" title="FEC Payload ID Format">
            <artwork><![CDATA[
     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |     SBN       |               Encoding Symbol ID              |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>
          </figure></t>

        <t><list style="symbols">
            <t>Source Block Number (SBN): 8-bit unsigned integer. A
            non-negative integer identifier for the source block that the
            encoding symbols within the packet relate to.</t>

            <t>Encoding Symbol ID (ESI): 24-bit unsigned integer. A
            non-negative integer identifier for the encoding symbols within
            the packet.</t>
          </list></t>

        <t>The interpretation of the Source Block Number and Encoding Symbol
        Identifier is defined in <xref target="procedures"></xref>.</t>
      </section>

      <section anchor="sec_fec_oti"
               title="FEC Object Transmission Information">
        <section anchor="sec_fec_oti_man" title="Mandatory">
          <t>The value of the FEC Encoding ID MUST be 6, as assigned by IANA
          (see <xref target="IANA"></xref>).</t>
        </section>

        <section anchor="sec_fec_oti_com" title="Common">
          <t>The Common FEC Object Transmission Information elements used by
          this FEC scheme are: <list style="symbols">
              <t>Transfer Length (F): 40-bit unsigned integer. A
              non-negative integer that is at most 946270874880. This is the
              transfer length of the object in units of octets.</t>

              <t>Symbol Size (T): 16-bit unsigned integer. A positive
              integer that is less than 2^^16. This is the size of a symbol in
              units of octets.</t>
            </list></t>

          <t>The encoded Common FEC Object Transmission Information
          (OTI) format is
          shown in <xref target="CommonFOTIfigure"></xref>. <figure
              anchor="CommonFOTIfigure"
              title="Encoded Common FEC OTI for RaptorQ FEC Scheme">
              <artwork><![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      Transfer Length (F)                      |
   +               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |               |    Reserved   |           Symbol Size (T)     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>
            </figure></t>

          <t><list style="empty">
              <t>NOTE: The limit of 946270874880 on the transfer length is a
              consequence of the limitation on the symbol size to 2^^16-1, the
              limitation on the number of symbols in a source block to 56403,
              and the limitation on the number of source blocks to 2^^8.</t>
            </list></t>
        </section>

        <section title="Scheme-Specific">
          <t>The following parameters are carried in the Scheme-Specific FEC
          Object Transmission Information element for this FEC scheme: <list
              style="symbols">
              <t>The number of source blocks (Z): 8-bit unsigned
              integer.</t>

              <t>The number of sub-blocks (N): 16-bit unsigned integer.</t>

              <t>A symbol alignment parameter (Al): 8-bit unsigned
              integer.</t>
            </list></t>

          <t>These parameters are all positive integers. The encoded
          Scheme-specific Object Transmission Information is a 4-octet field
          consisting of the parameters Z, N, and Al as shown in <xref
          target="OTIfigure"></xref>. <figure anchor="OTIfigure"
              title="Encoded Scheme-Specific FEC Object Transmission Information">
              <artwork><![CDATA[
     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |       Z       |              N                |       Al      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
]]></artwork>
            </figure></t>

          <t>The encoded FEC Object Transmission Information is a 12-octet
          field consisting of the concatenation of the encoded Common FEC
          Object Transmission Information and the encoded Scheme-specific FEC
          Object Transmission Information.</t>

          <t>These three parameters define the source block partitioning as
          described in <xref target="partitioning"></xref>.</t>
        </section>
      </section>
    </section>

    <section anchor="procedures" title="Procedures">
      <section title="Introduction">
        <t>For any undefined symbols or functions used in this section, in
        particular the functions "ceil" and "floor",
        refer to <xref target="definitions"></xref>.</t>
      </section>

      <section title="Content Delivery Protocol Requirements">
        <t>This section describes the information exchange between the RaptorQ
        FEC scheme and any Content Delivery Protocol (CDP) that makes use of
        the RaptorQ FEC scheme for object delivery.</t>

        <t>The RaptorQ encoder scheme and RaptorQ decoder scheme for object
        delivery require the following information from the CDP: <list
            style="symbols">
            <t>F: the transfer length of the object, in octets</t>

            <t>Al: the symbol alignment parameter</t>

            <t>T: the symbol size in octets, which MUST be a multiple of
            Al</t>

            <t>Z: the number of source blocks</t>

            <t>N: the number of sub-blocks in each source block</t>
          </list></t>

        <t>The RaptorQ encoder scheme for object delivery additionally
        requires: 

<?rfc text-list-symbols="-"?>
	  <list style="symbols">
            <t>the object to be encoded, which is F octets long</t>
          </list></t>

        <t>The RaptorQ encoder scheme supplies the CDP with the following
        information for each packet to be sent: 

<?rfc text-list-symbols="o*+-"?>
<list style="symbols">
            <t>Source Block Number (SBN)</t>

            <t>Encoding Symbol ID (ESI)</t>

            <t>Encoding symbol(s)</t>
          </list></t>

        <t>The CDP MUST communicate this information to the receiver.</t>
      </section>

      <section anchor="recommend"
               title="Example Parameter Derivation Algorithm">
        <t>This section provides recommendations for the derivation of the
        three transport parameters, T, Z, and N. &nbsp;This recommendation is based
        on the following input parameters: <list style="symbols">
            <t>F: the transfer length of the object, in octets</t>

            <t>WS: the maximum size block that is decodable in working memory,
            in octets</t>

            <t>P': the maximum payload size in octets, which is assumed to be a
            multiple of Al</t>

            <t>Al: the symbol alignment parameter, in octets</t>

            <t>SS: a parameter where the desired lower bound on the sub-symbol
            size is SS*Al</t>

            <t>K'_max: the maximum number of source symbols per source block.
            <list style="empty">
                <t>Note: <xref target="symbols"></xref> defines K'_max to be
                56403.</t>
              </list></t>
          </list></t>

        <t>Based on the above inputs, the transport parameters T, Z, and N are
        calculated as follows:</t>

        <t>Let

	  <list style="symbols">
            <t>T = P'</t>

            <t>Kt = ceil(F/T)</t>

            <t>N_max = floor(T/(SS*Al))</t>

            <t>for all n=1, ..., N_max<list style="symbols">
                <t>KL(n) is the maximum K' value in <xref
                target="table_systematic_indices"></xref> in <xref
                target="systematic"></xref> such that<list style="empty">
                    <t>K' &lt;= WS/(Al*(ceil(T/(Al*n))))</t>
                  </list></t>
              </list></t>

            <t>Z = ceil(Kt/KL(N_max))</t>

            <t>N is the minimum n=1, ..., N_max such that ceil(Kt/Z) &lt;=
            KL(n)</t>
          </list></t>

        <t>It is RECOMMENDED that each packet contains exactly one symbol.
        However, receivers SHALL support the reception of packets that contain
        multiple symbols.</t>

        <t>The value Kt is the total number of symbols required to represent
        the source data of the object.</t>

        <t>The algorithm above and that defined in <xref
        target="partitioning"></xref> ensure that the sub-symbol sizes are a
        multiple of the symbol alignment parameter, Al. This is useful because
        the sum operations used for encoding and decoding are generally
        performed several octets at a time, for example, at least 4 octets at a
        time on a 32-bit processor. Thus, the encoding and decoding can be
        performed faster if the sub-symbol sizes are a multiple of this number
        of octets.</t>

        <t>The recommended setting for the input parameter Al is 4.</t>

        <t>The parameter WS can be used to generate encoded data that can be
        decoded efficiently with limited working memory at the decoder. Note
        that the actual maximum decoder memory requirement for a given value
        of WS depends on the implementation, but it is possible to implement
        decoding using working memory only slightly larger than WS.</t>
      </section>

      <section anchor="sec_objectdelivery" title="Object Delivery">
        <section title="Source Block Construction">
          <section title="General">
            <t>In order to apply the RaptorQ encoder to a source object, the
            object may be broken into Z &gt;= 1 blocks, known as source
            blocks. The RaptorQ encoder is applied independently to each
            source block. Each source block is identified by a unique Source
            Block Number (SBN), where the first source block has SBN zero, the
            second has SBN one, etc. Each source block is divided into a
            number, K, of source symbols of size T octets each. Each source
            symbol is identified by a unique Encoding Symbol Identifier (ESI),
            where the first source symbol of a source block has ESI zero, the
            second has ESI one, etc.</t>

            <t>Each source block with K source symbols is divided into N &gt;=
            1 sub-blocks, which are small enough to be decoded in the working
            memory. Each sub-block is divided into K sub-symbols of size
            T'.</t>

            <t>Note that the value of K is not necessarily the same for each
            source block of an object, and the value of T' may not necessarily
            be the same for each sub-block of a source block. However, the
            symbol size T is the same for all source blocks of an object, and
            the number of symbols K is the same for every sub-block of a
            source block. Exact partitioning of the object into source blocks
            and sub-blocks is described in <xref target="partitioning"></xref>
            below.</t>
          </section>

          <section anchor="partitioning"
                   title="Source Block and Sub-Block Partitioning">
            <t>The construction of source blocks and sub-blocks is determined
            based on five input parameters -- F, Al, T, Z, and N -- and a function
            Partition[]. The five input parameters are defined as follows:
            <list style="symbols">
                <t>F: the transfer length of the object, in octets</t>

                <t>Al: a symbol alignment parameter, in octets</t>

                <t>T: the symbol size, in octets, which MUST be a multiple of
                Al</t>

                <t>Z: the number of source blocks</t>

                <t>N: the number of sub-blocks in each source block</t>
              </list></t>

            <t>These parameters MUST be set so that ceil(ceil(F/T)/Z) &lt;=
            K'_max. Recommendations for derivation of these parameters are
            provided in <xref target="recommend"></xref>.</t>

            <t>The function Partition[I,J] derives parameters for partitioning
            a block of size I into J approximately equal-sized
            blocks. 
            More specifically, it partitions I into JL blocks of length IL and JS
            blocks of length IS. The output of Partition[I, J]
            is the sequence (IL, IS, JL, JS), where IL = ceil(I/J), IS =
            floor(I/J), JL = I - IS * J, and JS = J - JL.</t>

            <t>The source object MUST be partitioned into source blocks and
            sub-blocks as follows:</t>

            <t>Let <list style="symbols">
                <t>Kt = ceil(F/T),</t>

                <t>(KL, KS, ZL, ZS) = Partition[Kt, Z],</t>

                <t>(TL, TS, NL, NS) = Partition[T/Al, N].</t>
              </list></t>

            <t>Then, the object MUST be partitioned into Z = ZL + ZS
            contiguous source blocks, the first ZL source blocks each having
            KL*T octets, i.e., KL source symbols of T octets each, and the
            remaining ZS source blocks each having KS*T octets, i.e., KS source
            symbols of T octets each.</t>

            <t>If Kt*T &gt; F, then, for encoding purposes, the last symbol of
            the last source block MUST be padded at the end with Kt*T-F zero
            octets.</t>

            <t>Next, each source block with K source symbols MUST be divided
            into N = NL + NS contiguous sub-blocks, the first NL sub-blocks
            each consisting of K contiguous sub-symbols of size of TL*Al
            octets and the remaining NS sub-blocks each consisting of K
            contiguous sub-symbols of size of TS*Al octets. The symbol
            alignment parameter Al ensures that sub-symbols are always a
            multiple of Al octets.</t>

            <t>Finally, the mth symbol of a source block consists of the
            concatenation of the mth sub-symbol from each of the N
            sub-blocks. Note that this implies that when N &gt; 1, a
            symbol is NOT a contiguous portion of the object.</t>
          </section>
        </section>

        <section anchor="encodingpackets" title="Encoding Packet Construction">
          <t>Each encoding packet contains the following information: <list
              style="symbols">
              <t>Source Block Number (SBN)</t>

              <t>Encoding Symbol ID (ESI)</t>

              <t>encoding symbol(s)</t>
            </list></t>

          <t>Each source block is encoded independently of the others. Each
          encoding packet contains encoding symbols generated from the one
          source block identified by the SBN carried in the encoding packet.
          Source blocks are numbered consecutively from zero.</t>

          <t>Encoding Symbol ID values from 0 to K-1 identify the source
          symbols of a source block in sequential order, where K is the number
          of source symbols in the source block. Encoding Symbol IDs K onwards
          identify repair symbols generated from the source symbols using the
          RaptorQ encoder.</t>

          <t>Each encoding packet either contains only source symbols (source
          packet) or contains only repair symbols (repair packet). A packet
          may contain any number of symbols from the same source block. In the
          case that the last source symbol in a source packet includes padding
          octets added for FEC encoding purposes, then these octets need not be
          included in the packet. Otherwise, each packet MUST contain only
          whole symbols.</t>

          <t>The Encoding Symbol ID, X, carried in each source packet is the
          Encoding Symbol ID of the first source symbol carried in that
          packet. The subsequent source symbols in the packet have Encoding
          Symbol IDs X+1 to X+G-1 in sequential order, where G is the number
          of symbols in the packet.</t>

          <t>Similarly, the Encoding Symbol ID, X, placed into a repair packet
          is the Encoding Symbol ID of the first repair symbol in the repair
          packet, and the subsequent repair symbols in the packet have Encoding
          Symbol IDs X+1 to X+G-1 in sequential order, where G is the number
          of symbols in the packet.</t>

          <t>Note that it is not necessary for the receiver to know the total
          number of repair packets.</t>
        </section>

        <section anchor="sec_example_receiver"
                 title="Example Receiver Recovery Strategies">
          <t>A receiver can use the received encoding symbols for each source
          block of an object to recover the source symbols for that source
          block independently of all other source blocks.</t>

          <t>If there is one sub-block per source block, i.e., N = 1, then the
          portion of the data in the original object in its original order
          associated with a source block consists of the concatenation of the
          source symbols of a source block in consecutive ESI order.</t>

          <t>If there are multiple sub-blocks per source block, i.e., if N
          &gt; 1, then the portion of the data in the original object in its
          original order associated with a source block consists of the
          concatenation of the sub-blocks associated with the source block,
          where sub-symbols within each sub-block are in consecutive ESI
          order. In this case, there are different receiver source block
          recovery strategies worth considering depending on the available
          amount of Random Access Memory (RAM) at the receiver, as outlined
          below.</t>

          <t>One strategy is to recover the source symbols of a source block
          using the decoding procedures applied to the received symbols for
          the source block to recover the source symbols as described in <xref
          target="codespecification"></xref>, and then to reorder the
          sub-symbols of the source symbols so that all consecutive
          sub-symbols of the first sub-block are first, followed by all
          consecutive sub-symbols of the second sub-block, etc., followed by
          all consecutive sub-symbols of the Nth sub-block. This strategy is
          especially applicable if the receiver has enough RAM to decode an
          entire source block.</t>

          <t>Another strategy is to separately recover the sub-blocks of a
          source block. For example, a receiver may demultiplex and store
          sub-symbols associated with each sub-block separately as packets
          containing encoding symbols arrive, and then use the stored
          sub-symbols received for a sub-block to recover that sub-block using
          the decoding procedures described in <xref
          target="codespecification"></xref>. This strategy is especially
          applicable if the receiver has enough RAM to decode only one
          sub-block at a time.</t>
        </section>
      </section>
    </section>

    <section anchor="codespecification" title="RaptorQ FEC Code Specification">
      <section anchor="definitions" title="Background">
        <t>For the purpose of the RaptorQ FEC code specification in this
        section, the following definitions, symbols, and abbreviations apply. A
        basic understanding of linear algebra, matrix operations, and finite
        fields is assumed in this section. In particular, matrix
        multiplication and matrix inversion operations over a mixture of the
        finite fields GF[2] and GF[256] are used. A basic familiarity with
        sparse linear equations, and efficient implementations of algorithms
        that take advantage of sparse linear equations, is also quite
        beneficial to an implementer of this specification.</t>

        <section title="Definitions">
          <t><list style="symbols">
              <t>Source block: a block of K source symbols that are
              considered together for RaptorQ encoding and decoding
              purposes.</t>

              <t>Extended Source Block: a block of K' source symbols, where K'
              &gt;= K, constructed from a source block and zero or more padding
              symbols.</t>

              <t>Symbol: a unit of data. The size, in octets, of a symbol is
              known as the symbol size. The symbol size is always a positive
              integer.</t>

              <t>Source symbol: the smallest unit of data used during the
              encoding process. All source symbols within a source block have
              the same size.</t>

              <t>Padding symbol: a symbol with all zero bits that is added to
              the source block to form the extended source block.</t>

              <t>Encoding symbol: a symbol that can be sent as part of the
              encoding of a source block. The encoding symbols of a source
              block consist of the source symbols of the source block and the
              repair symbols generated from the source block. Repair symbols
              generated from a source block have the same size as the source
              symbols of that source block.</t>

              <t>Repair symbol: the encoding symbols of a source block that
              are not source symbols. The repair symbols are generated based
              on the source symbols of a source block.</t>

              <t>Intermediate symbols: symbols generated from the source
              symbols using an inverse encoding process based on pre-coding
              relationships. The repair symbols are then generated directly
              from the intermediate symbols. The encoding symbols do not
              include the intermediate symbols, i.e., intermediate symbols are
              not sent as part of the encoding of a source block. The
              intermediate symbols are partitioned into LT symbols and PI
              symbols for the purposes of the encoding process.</t>

              <t>LT symbols: a process similar to that described in <xref
              target="LTCodes"></xref> is used to generate part of the
              contribution to each generated encoding symbol from the portion
              of the intermediate symbols designated as LT symbols.</t>

              <t>PI symbols: a process even simpler than that described in
              <xref target="LTCodes"></xref> is used to generate the other
              part of the contribution to each generated encoding symbol from
              the portion of the intermediate symbols designated as PI
              symbols. In the decoding algorithm suggested in <xref
              target="decoder"></xref>, the PI symbols are inactivated at the
              start, i.e., are placed into the matrix U at the beginning of
              the first phase of the decoding algorithm. Because the symbols
              corresponding to the columns of U are sometimes called the
              "inactivated" symbols, and since the PI symbols are
              inactivated at the beginning, they are considered "permanently
              inactivated".</t>

              <t>HDPC symbols: there is a small subset of the intermediate
              symbols that are HDPC symbols. Each HDPC symbol has a pre-coding
              relationship with a large fraction of the other intermediate
              symbols. HDPC means "High Density Parity Check".</t>

              <t>LDPC symbols: there is a moderate-sized subset of the
              intermediate symbols that are LDPC symbols. Each LDPC symbol has
              a pre-coding relationship with a small fraction of the other
              intermediate symbols. LDPC means "Low Density Parity
              Check".</t>

              <t>Systematic code: a code in which all source symbols are
              included as part of the encoding symbols of a source block. The
              RaptorQ code as described herein is a systematic code.</t>

              <t>Encoding Symbol ID (ESI): information that uniquely
              identifies each encoding symbol associated with a source block
              for sending and receiving purposes.</t>

              <t>Internal Symbol ID (ISI): information that uniquely
              identifies each symbol associated with an extended source block
              for encoding and decoding purposes.</t>

              <t>Arithmetic operations on octets and symbols and matrices: the
              operations that are used to produce encoding symbols from source
              symbols and vice versa. See <xref target="gf256"></xref>.</t>
            </list></t>
        </section>

        <section anchor="symbols" title="Symbols">
          <t><list hangIndent="5" style="hanging">
              <t
              hangText="i, j, u, v, h, d, a, b, d1, a1, b1, v, m, x, y ">represent
              values or variables of one type or another, depending on the
              context.</t>

              <t hangText="X">denotes a non-negative integer value that is
              either an ISI value or an ESI value, depending on the
              context.</t>

              <t hangText="ceil(x)">denotes the smallest integer that is
              greater than or equal to x, where x is a real value.</t>

              <t hangText="floor(x)">denotes the largest integer that is less
              than or equal to x, where x is a real value.</t>

              <t hangText="min(x,y)">denotes the minimum value of the values x
              and y, and in general the minimum value of all the argument
              values.</t>

              <t hangText="max(x,y)">denotes the maximum value of the values x
              and y, and in general the maximum value of all the argument
              values.</t>

              <t hangText="i % j">denotes i modulo j.</t>

              <t hangText="i + j">denotes the sum of i and j. If i and j are
              octets or symbols, this designates the arithmetic on
              octets or symbols, respectively, as defined in <xref
              target="gf256"></xref>. If i and j are integers, then it denotes
              the usual integer addition.</t>

              <t hangText="i * j">denotes the product of i and j. If i and j
              are octets, this designates the arithmetic on octets, as defined
              in <xref target="gf256"></xref>. If i is an octet and j is a
              symbol, this denotes the multiplication of a symbol by an octet,
              as also defined in <xref target="gf256"></xref>. Finally, if i
              and j are integers, i * j denotes the usual product of
              integers.</t>

              <t hangText="a ^^ b">denotes the operation a raised to the power
              b. If a is an octet and b is a non-negative integer, this is
              understood to mean a*a*...*a (b terms), with '*'
              being the octet product as defined in <xref
              target="gf256"></xref>.</t>

              <t hangText="u ^ v">denotes, for equal-length bit strings u and
              v, the bitwise exclusive-or of u and v.</t>

              <t hangText="Transpose[A]">denotes the transposed matrix of
              matrix A. &nbsp;In this specification, all matrices have entries that
              are octets.</t>

              <t hangText="A^^-1">denotes the inverse matrix of matrix A. &nbsp;In
              this specification, all the matrices have octets as entries, so
              it is understood that the operations of the matrix entries are
              to be done as stated in <xref target="gf256"></xref> and A^^-1
              is the matrix inverse of A with respect to octet arithmetic.</t>

              <t hangText="K">denotes the number of symbols in a single source
              block.</t>

              <t hangText="K'">denotes the number of source plus padding
              symbols in an extended source block. For the majority of this
              specification, the padding symbols are considered to be
              additional source symbols.</t>

              <t hangText="K'_max">denotes the maximum number of source
              symbols that can be in a single source block. Set to 56403.</t>

              <t hangText="L">denotes the number of intermediate symbols for a
              single extended source block.</t>

              <t hangText="S">denotes the number of LDPC symbols for a single
              extended source block. These are LT symbols. For each value of
              K' shown in <xref
              target="table_systematic_indices"></xref> in <xref
              target="systematic"></xref>, the corresponding value of S is a
              prime number.</t>

              <t hangText="H">denotes the number of HDPC symbols for a single
              extended source block. These are PI symbols.</t>

              <t hangText="B">denotes the number of intermediate symbols that
              are LT symbols excluding the LDPC symbols.</t>

              <t hangText="W">denotes the number of intermediate symbols that
              are LT symbols. For each value of K' in <xref
              target="table_systematic_indices"></xref> shown in <xref
              target="systematic"></xref>, the corresponding value of W is a
              prime number.</t>

              <t hangText="P">denotes the number of intermediate symbols that
              are PI symbols. These contain all HDPC symbols.</t>

              <t hangText="P1">denotes the smallest prime number greater than
              or equal to P.</t>

              <t hangText="U">denotes the number of non-HDPC intermediate
              symbols that are PI symbols.</t>

              <t hangText="C">denotes an array of intermediate symbols, C[0],
              C[1], C[2], ..., C[L-1].</t>

              <t hangText="C'">denotes an array of the symbols of the extended
              source block, where C'[0], C'[1], C'[2], ..., C'[K-1] are
              the source symbols of the source block and C'[K],
              C'[K+1], ..., C'[K'-1] are padding symbols.</t>

              <t hangText="V0, V1, V2, V3">denote four arrays of 32-bit
              unsigned integers, V0[0], V0[1], ..., V0[255]; V1[0],
              V1[1], ..., V1[255]; V2[0], V2[1], ..., V2[255]; and
              V3[0], V3[1], ..., V3[255] as shown in <xref
              target="random"></xref>.</t>

              <t hangText="Rand[y, i, m]">denotes a pseudo-random number
              generator.</t>

              <t hangText="Deg[v]">denotes a degree generator.</t>

              <t hangText="Enc[K', C ,(d, a, b, d1, a1, b1)]">denotes an
              encoding symbol generator.</t>

              <t hangText="Tuple[K', X]">denotes a tuple generator
              function.</t>

              <t hangText="T">denotes the symbol size in octets.</t>

              <t hangText="J(K')">denotes the systematic index associated with
              K'.</t>

              <t hangText="G">denotes any generator matrix.</t>

              <t hangText="I_S">denotes the S x S identity matrix.</t>
            </list></t>
        </section>
      </section>

      <section title="Overview">
        <t>This section defines the systematic RaptorQ FEC code.</t>

        <t>Symbols are the fundamental data units of the encoding and decoding
        process. For each source block, all symbols are the same size, referred
        to as the symbol size T. &nbsp;The atomic operations performed on symbols
        for both encoding and decoding are the arithmetic operations defined
        in <xref target="gf256"></xref>.</t>

        <t>The basic encoder is described in <xref target="encoder"></xref>.
        The encoder first derives a block of intermediate symbols from the
        source symbols of a source block. This intermediate block has the
        property that both source and repair symbols can be generated from it
        using the same process. The encoder produces repair symbols from the
        intermediate block using an efficient process, where each such repair
        symbol is the exclusive-or of a small number of intermediate symbols
        from the block. Source symbols can also be reproduced from the
        intermediate block using the same process. The encoding symbols are
        the combination of the source and repair symbols.</t>

        <t>An example of a decoder is described in <xref
        target="decoder"></xref>. The process for producing source and repair
        symbols from the intermediate block is designed so that the
        intermediate block can be recovered from any sufficiently large set of
        encoding symbols, independent of the mix of source and repair symbols
        in the set. Once the intermediate block is recovered, missing source
        symbols of the source block can be recovered using the encoding
        process.</t>

        <t>Requirements for a RaptorQ-compliant decoder are provided in <xref
        target="sec_dec_req"></xref>. A number of decoding algorithms are
        possible to achieve these requirements. An efficient decoding
        algorithm to achieve these requirements is provided in <xref
        target="decoder"></xref>.</t>

        <t>The construction of the intermediate and repair symbols is based in
        part on a pseudo-random number generator described in <xref
        target="encoder"></xref>. This generator is based on a fixed set of
        1024 random numbers that must be available to both sender and
        receiver. These numbers are provided in <xref target="random"></xref>.
        Encoding and decoding operations for RaptorQ use operations on octets.
        <xref target="gf256"></xref> describes how to perform these
        operations.</t>

        <t>Finally, the construction of the intermediate symbols from the
        source symbols is governed by "systematic indices", values
        of which are provided in <xref target="systematic"></xref> for
        specific extended source block sizes between 6 and K'_max = 56403
        source symbols. Thus, the RaptorQ code supports source blocks with
        between 1 and 56403 source symbols.</t>
      </section>

      <section anchor="encoder" title="Systematic RaptorQ Encoder">
        <section title="Introduction">
          <t>For a given source block of K source symbols, for encoding and
          decoding purposes, the source block is augmented with K'-K additional
          padding symbols, where K' is the smallest value that is at least K
          in the systematic index <xref
          target="table_systematic_indices"></xref> of <xref
          target="systematic"></xref>. The reason for padding out a source
          block to a multiple of K' is to enable faster encoding and decoding
          and to minimize the amount of table information that needs to be
          stored in the encoder and decoder.</t>

          <t>For purposes of transmitting and receiving data, the value of K
          is used to determine the number of source symbols in a source block,
          and thus K needs to be known at the sender and the receiver. In this
          case, the sender and receiver can compute K' from K and the K'-K
          padding symbols can be automatically added to the source block
          without any additional communication. The encoding symbol ID (ESI)
          is used by a sender and receiver to identify the encoding symbols of
          a source block, where the encoding symbols of a source block consist
          of the source symbols and the repair symbols associated with the
          source block. For a source block with K source symbols, the ESIs for
          the source symbols are 0, 1, 2, ..., K-1, and the ESIs for the
          repair symbols are K, K+1, K+2, .... Using the ESI for
          identifying encoding symbols in transport ensures that the ESI
          values continue consecutively between the source and repair
          symbols.</t>

          <t>For purposes of encoding and decoding data, the value of K'
          derived from K is used as the number of source symbols of the
          extended source block upon which encoding and decoding operations
          are performed, where the K' source symbols consist of the original K
          source symbols and an additional K'-K padding symbols. The Internal
          Symbol ID (ISI) is used by the encoder and decoder to identify the
          symbols associated with the extended source block, i.e., for
          generating encoding symbols and for decoding. For a source block
          with K original source symbols, the ISIs for the original source
          symbols are 0, 1, 2, ..., K-1, the ISIs for the K'-K padding
          symbols are K, K+1, K+2, ..., K'-1, and the ISIs for the repair
          symbols are K', K'+1, K'+2, .... 
   Using the ISI for 
   encoding and decoding allows the padding symbols of the extended
   source block to be treated the same way as other source symbols of
   the extended source block.  Also, it ensures that a given prefix of
   repair symbols are generated in a consistent way for a given number
   K' of source symbols in the extended source block, independent of K.
</t>

          <t>The relationship between the ESIs and the ISIs is simple: the
          ESIs and the ISIs for the original K source symbols are the same,
          the K'-K padding symbols have an ISI but do not have a corresponding
          ESI (since they are symbols that are neither sent nor received), and
          a repair symbol ISI is simply the repair symbol ESI plus K'-K. 

   The translation between ESIs (used to identify encoding symbols sent and
   received) and the corresponding ISIs (used for encoding and decoding),
   as well as determining the proper padding of the extended source
   block with padding symbols (used for encoding and decoding), is the
   internal responsibility of the RaptorQ encoder/decoder.
</t>
        </section>

        <section title="Encoding Overview">
          <t>The systematic RaptorQ encoder is used to generate any number of
          repair symbols from a source block that consists of K source symbols
          placed into an extended source block C'. <xref
          target="fig_encoding_overview"></xref> shows the encoding
          overview.</t>

          <t>The first step of encoding is to construct an extended source
          block by adding zero or more padding symbols such that the total
          number of symbols, K', is one of the values listed in <xref
          target="systematic"></xref>. Each padding symbol consists of T
          octets where the value of each octet is zero. K' MUST be selected as
          the smallest value of K' from the table of <xref
          target="systematic"></xref> that is greater than or equal to K.</t>

          <t><figure align="center" anchor="fig_encoding_overview"
              title="Encoding Overview">
              <artwork><![CDATA[
      -----------------------------------------------------------+
      |                                                          |
      |    +-----------+    +--------------+    +-------------+  |
   C' |    |           | C' | Intermediate | C  |             |  |
  ----+--->|  Padding  |--->|    Symbol    |--->|   Encoding  |--+-->
   K  |    |           | K' |  Generation  | L  |             |  |
      |    +-----------+    +--------------+    +-------------+  |
      |           |                             (d,a,b, ^        |
      |           |                            d1,a1,b1)|        |
      |           |                              +------------+  |
      |           |              K'              |   Tuple    |  |
      |           +----------------------------->|            |  |
      |                                          | Generation |  |
      |                                          +------------+  |
      |                                                 ^        |
      +-------------------------------------------------+--------+
                                                        | 
                                                      ISI X
]]></artwork>
            </figure>Let C'[0], ..., C'[K-1] denote the K source
          symbols.</t>

          <t>Let C'[K], ..., C'[K'-1] denote the K'-K padding symbols,
          which are all set to zero bits. Then, C'[0], ..., C'[K'-1] are
          the symbols of the extended source block upon which encoding and
          decoding are performed.</t>

          <t>In the remainder of this description, these padding symbols will
          be considered as additional source symbols and referred to as such.
          However, these padding symbols are not part of the encoding symbols,
          i.e., they are not sent as part of the encoding. At a receiver, the
          value of K' can be computed based on K, then the receiver can insert
          K'-K padding symbols at the end of a source block of K' source
          symbols and recover the remaining K source symbols of the source
          block from received encoding symbols.</t>

          <t>The second step of encoding is to generate a number, L &gt; K',
          of intermediate symbols from the K' source symbols. In this step, K'
          source tuples (d[0], a[0], b[0], d1[0], a1[0], b1[0]), ...,
          (d[K'-1], a[K'-1], b[K'-1], d1[K'-1], a1[K'-1], b1[K'-1]) are
          generated using the Tuple[] generator as described in <xref
          target="triplegenerator"></xref>. The K' source tuples and the ISIs
          associated with the K' source symbols are used to determine L
          intermediate symbols C[0], ..., C[L-1] from the source symbols
          using an inverse encoding process. This process can be realized by a
          RaptorQ decoding process.</t>

          <t>Certain "pre-coding relationships" must hold within
          the L intermediate symbols. <xref target="precoding"></xref>
          describes these relationships. <xref
          target="intermediatesymbols"></xref> describes how the intermediate
          symbols are generated from the source symbols.</t>

          <t>Once the intermediate symbols have been generated, repair symbols
          can be produced. For a repair symbol with ISI X &gt; K', the tuple of
          non-negative integers (d, a, b, d1, a1, b1) can be generated, using
          the Tuple[] generator as described in <xref
          target="triplegenerator"></xref>. Then, the (d, a, b, d1, a1,
          b1) tuple and the ISI X are used to generate the corresponding repair
          symbol from the intermediate symbols using the Enc[] generator
          described in <xref target="ltenc"></xref>. The corresponding ESI for
          this repair symbol is then X-(K'-K). Note that source symbols
          of the extended source block can also be generated using the same
          process, i.e., for any X &lt; K', the symbol generated using this
          process has the same value as C'[X].</t>
        </section>

        <section title="First Encoding Step: Intermediate Symbol Generation">
          <section title="General">
            <t>This encoding step is a pre-coding step to generate the L
            intermediate symbols C[0], ..., C[L-1] from the source
            symbols C'[0], ..., C'[K'-1], where L &gt; K' is defined in
            <xref target="precoding"></xref>. The intermediate symbols are
            uniquely defined by two sets of constraints: <list style="numbers">
                <t>The intermediate symbols are related to the source symbols
                by a set of source symbol tuples and by the ISIs of the source
                symbols. The generation of the source symbol tuples is defined
                in <xref target="sourcetriples"></xref> using the Tuple[]
                generator as described in <xref
                target="triplegenerator"></xref>.</t>

                <t>A number of pre-coding relationships hold within the
                intermediate symbols themselves. These are defined in <xref
                target="precoding"></xref>.</t>
              </list></t>

            <t>The generation of the L intermediate symbols is then defined in
            <xref target="intermediatesymbols"></xref>.</t>
          </section>

          <section anchor="sourcetriples" title="Source Symbol Tuples">
            <t>Each of the K' source symbols is associated with a source
            symbol tuple (d[X], a[X], b[X], d1[X], a1[X], b1[X]) for 0 &lt;= X
            &lt; K'. The source symbol tuples are determined using the
            Tuple[]
            generator defined in <xref target="triplegenerator"></xref> as:
            <list style="empty">
                <t>For each X, 0 &lt;= X &lt; K' <list style="empty">
                    <t>(d[X], a[X], b[X], d1[X], a1[X], b1[X]) = Tuple[K,
                    X]</t>
                  </list></t>
              </list></t>
          </section>

          <section anchor="precoding" title="Pre-Coding Relationships">
            <t>The pre-coding relationships amongst the L intermediate symbols
            are defined by requiring that a set of S+H linear combinations of
            the intermediate symbols evaluate to zero. There are S LDPC and H
            HDPC symbols, and thus L = K'+S+H. &nbsp;Another partition of the
            L intermediate symbols is into two sets, one set of W LT symbols
            and another set of P PI symbols, and thus it is also the case that
            L = W+P. &nbsp;The P PI symbols are treated differently than the W LT
            symbols in the encoding process. The P PI symbols consist of the H
            HDPC symbols together with a set of U = P-H of the other K'
            intermediate symbols. The W LT symbols consist of the S LDPC
            symbols together with W-S of the other K' intermediate
            symbols. The values of these parameters are determined from K' as
            described below, where H(K'), S(K'), and W(K')
            are derived from <xref target="table_systematic_indices"></xref>
            in <xref target="systematic"></xref>.</t>

            <t>Let <list style="symbols">
                <t>S = S(K')</t>

                <t>H = H(K')</t>

                <t>W = W(K')</t>

                <t>L = K' + S + H</t>

                <t>P = L - W</t>

                <t>P1 denote the smallest prime number greater than or equal
                to P.</t>

                <t>U = P - H</t>

                <t>B = W - S</t>

                <t>C[0], ..., C[B-1] denote the intermediate symbols that are
                LT symbols but not LDPC symbols.</t>

                <t>C[B], ..., C[B+S-1] denote the S LDPC symbols that are also
                LT symbols.</t>

                <t>C[W], ..., C[W+U-1] denote the intermediate symbols that
                are PI symbols but not HDPC symbols.</t>

                <t>C[L-H], ..., C[L-1] denote the H HDPC symbols that are also
                PI symbols.</t>
              </list></t>

            <t>The first set of pre-coding relations, called LDPC relations,
            is described below and requires that at the end of this process
            the set of symbols D[0] , ..., D[S-1] are all zero: <list
                style="symbols">
                <t>Initialize the symbols D[0] = C[B], ..., D[S-1] =
                C[B+S-1].</t>

                <t>For i = 0, ..., B-1 do<list style="symbols">
                    <t>a = 1 + floor(i/S)</t>

                    <t>b = i % S</t>

                    <t>D[b] = D[b] + C[i]</t>

                    <t>b = (b + a) % S</t>

                    <t>D[b] = D[b] + C[i]</t>

                    <t>b = (b + a) % S</t>

                    <t>D[b] = D[b] + C[i]</t>
                  </list></t>

                <t>For i = 0, ..., S-1 do<list style="symbols">
                    <t>a = i % P</t>

                    <t>b = (i+1) % P</t>

                    <t>D[i] = D[i] + C[W+a] + C[W+b]</t>
                  </list></t>
              </list></t>

            <t>Recall that the addition of symbols is to be carried out as
            specified in <xref target="gf256"></xref>.</t>

            <t>Note that the LDPC relations as defined in the algorithm above
            are linear, so there exists an S x B matrix G_LDPC,1 and an S x P
            matrix G_LDPC,2 such that</t>

            <t><list style="empty">
                <t>G_LDPC,1 * Transpose[(C[0], ..., C[B-1])] + G_LDPC,2 *
                Transpose(C[W], ..., C[W+P-1]) + Transpose[(C[B], ...,
                C[B+S-1])] = 0</t>
              </list>(The matrix G_LDPC,1 is defined by the first loop in the
            above algorithm, and G_LDPC,2 can be deduced from the second
            loop.)</t>

            <t>The second set of relations among the intermediate symbols
            C[0], ..., C[L-1] are the HDPC relations and they are defined as
            follows:</t>

            <t>Let</t>

            <t><list style="symbols">
                <t>alpha denote the octet represented by integer 2 as defined
                in <xref target="gf256"></xref>.</t>

                <t>MT denote an H x (K' + S) matrix of octets, where for
                j=0, ..., K'+S-2, the entry MT[i,j] is the octet represented
                by the integer 1 if i= Rand[j+1,6,H] or i = (Rand[j+1,6,H] +
                Rand[j+1,7,H-1] + 1) % H, and MT[i,j] is the zero element for
                all other values of i, and for j=K'+S-1, MT[i,j] = alpha^^i
                for i=0, ..., H-1.</t>

                <t>GAMMA denote a (K'+S) x (K'+S) matrix of octets,
                where<list style="empty">
                    <t>GAMMA[i,j] = <list style="empty">
                        <t>alpha ^^ (i-j) for i &gt;= j,</t>

                        <t>0 otherwise.</t>
                      </list></t>
                  </list></t>
              </list>Then, the relationship between the first K'+S intermediate
            symbols C[0], ..., C[K'+S-1] and the H HDPC symbols C[K'+S], ...,
            C[K'+S+H-1] is given by:<list style="empty">
                <t>Transpose[C[K'+S], ..., C[K'+S+H-1]] + MT * GAMMA *
                Transpose[C[0], ..., C[K'+S-1]] = 0,</t>
              </list></t>

            <t>where '*' represents standard matrix multiplication utilizing
            the octet multiplication to define the multiplication between a
            matrix of octets and a matrix of symbols (in particular, the column
            vector of symbols), and '+' denotes addition over octet
            vectors.</t>
          </section>

          <section anchor="intermediatesymbols" title="Intermediate Symbols">
            <section anchor="intermediatesymbolsdefinition" title="Definition">
              <t>Given the K' source symbols C'[0], C'[1], ..., C'[K'-1]
              the L intermediate symbols C[0], C[1], ..., C[L-1] are the
              uniquely defined symbol values that satisfy the following
              conditions: <list style="numbers">
                  <t>The K' source symbols C'[0], C'[1], ..., C'[K'-1]
                  satisfy the K' constraints <list style="empty">
                      <t>C'[X] = Enc[K', (C[0], ..., C[L-1]), (d[X], a[X],
                      b[X], d1[X], a1[X], b1[X])], for all X, 0 &lt;= X &lt;
                      K',</t>
                    </list>where (d[X], a[X], b[X], d1[X], a1[X], b1[X])) =
                  Tuple[K',X], Tuple[] is defined in <xref
                  target="triplegenerator"></xref>, and Enc[] is described in
                  <xref target="ltenc"></xref>.</t>

                  <t>The L intermediate symbols C[0], C[1], ..., C[L-1]
                  satisfy the pre-coding relationships defined in <xref
                  target="precoding"></xref>.</t>
                </list></t>
            </section>

            <section anchor="intermediateexample"
                     title="Example Method for Calculation of Intermediate Symbols">
              <t>This section describes a possible method for calculation of
              the L intermediate symbols C[0], C[1], ..., C[L-1]
              satisfying the constraints in <xref
              target="intermediatesymbolsdefinition"></xref>.</t>

              <t>The L intermediate symbols can be calculated as follows:</t>

              <t>Let <list style="symbols">
                  <t>C denote the column vector of the L intermediate symbols,
                  C[0], C[1], ..., C[L-1].</t>

                  <t>D denote the column vector consisting of S+H zero symbols
                  followed by the K' source symbols C'[0], C'[1], ...,
                  C'[K'-1].</t>
                </list></t>

              <t>Then, the above constraints define an L x L matrix A of octets
              such that: <list style="empty">
                  <t>A*C = D</t>
                </list></t>

              <t>The matrix A can be constructed as follows:</t>

              <t>Let<list style="symbols">
                  <t>G_LDPC,1 and G_LDPC,2 be S x B and S x P
                  matrices as defined in <xref target="precoding"></xref>.</t>

                  <t>G_HDPC be the H x (K'+S) matrix such that <list
                      style="empty">
                      <t>G_HDPC * Transpose(C[0], ..., C[K'+S-1]) =
                      Transpose(C[K'+S], ..., C[L-1]),</t>

                      <t>i.e., G_HDPC = MT*GAMMA</t>
                    </list></t>

                  <t>I_S be the S x S identity matrix</t>

                  <t>I_H be the H x H identity matrix</t>

                  <t>G_ENC be the K' x L matrix such that <list style="empty">
                      <t>G_ENC * Transpose[(C[0], ..., C[L-1])] =
                      Transpose[(C'[0],C'[1], ...,C'[K'-1])],</t>

                      <t>i.e., G_ENC[i,j] = 1 if and only if C[j] is included
                      in the symbols that are summed to produce Enc[K',
                      (C[0], ..., C[L-1]), (d[i], a[i], b[i], d1[i], a1[i],
                      b1[i])] and G_ENC[i,j] = 0 otherwise.</t>
                    </list></t>
                </list></t>

              <t>Then <list style="symbols">
                  <t>The first S rows of A are equal to G_LDPC,1 | I_S |
                  G_LDPC,2.</t>

                  <t>The next H rows of A are equal to G_HDPC | I_H.</t>

                  <t>The remaining K' rows of A are equal to G_ENC.</t>
                </list></t>

              <t>The matrix A is depicted in <xref
              target="MatrixA" /> below: 

<figure anchor="MatrixA" title="The Matrix A">
                  <artwork><![CDATA[
              B               S         U         H
   +-----------------------+-------+------------------+
   |                       |       |                  |
 S |        G_LDPC,1       |  I_S  |      G_LDPC,2    |
   |                       |       |                  |
   +-----------------------+-------+----------+-------+
   |                                          |       |
 H |                G_HDPC                    |  I_H  |
   |                                          |       |
   +------------------------------------------+-------+
   |                                                  |
   |                                                  |
K' |                      G_ENC                       |
   |                                                  |
   |                                                  |
   +--------------------------------------------------+	
	]]></artwork>
                </figure></t>

              <t>The intermediate symbols can then be calculated as: <list
                  style="empty">
                  <t>C = (A^^-1)*D</t>
                </list></t>

              <t>The source tuples are generated such that for any K' matrix A
              has full rank and is therefore invertible. This calculation can
              be realized by applying a RaptorQ decoding process to the K'
              source symbols C'[0], C'[1], ..., C'[K'-1] to produce the L
              intermediate symbols C[0], C[1], ..., C[L-1].</t>

              <t>To efficiently generate the intermediate symbols from the
              source symbols, it is recommended that an efficient decoder
              implementation such as that described in <xref
              target="decoder"></xref> be used.</t>
            </section>
          </section>
        </section>

        <section title="Second Encoding Step: Encoding">
          <t>In the second encoding step, the repair symbol with ISI X (X &gt;=
          K') is generated by applying the generator Enc[K', (C[0],
          C[1], ..., C[L-1]), (d, a, b, d1, a1, b1)] defined in <xref
          target="ltenc"></xref> to the L intermediate symbols C[0], C[1], ...,
          C[L-1] using the tuple (d, a, b, d1, a1, b1)=Tuple[K',X].</t>
        </section>

        <section anchor="generators" title="Generators">
          <section anchor="randomgenerator" title="Random Number Generator">
            <t>The random number generator Rand[y, i, m] is defined as
            follows, where y is a non-negative integer, i is a non-negative
            integer less than 256, and m is a positive integer, and the value
            produced is an integer between 0 and m-1. Let V0, V1, V2, and V3 be
            the arrays provided in <xref target="random"></xref>.</t>

            <t>Let</t>

            <t><list style="symbols">
                <t>x0 = (y + i) mod 2^^8</t>

                <t>x1 = (floor(y / 2^^8) + i) mod 2^^8</t>

                <t>x2 = (floor(y / 2^^16) + i) mod 2^^8</t>

                <t>x3 = (floor(y / 2^^24) + i) mod 2^^8</t>
              </list>Then <list style="empty">
                <t>Rand[y, i, m] = (V0[x0] ^ V1[x1] ^ V2[x2] ^ V3[x3]) % m</t>
              </list></t>
          </section>

          <section anchor="degreegenerator" title="Degree Generator">
            <t>The degree generator Deg[v] is defined as follows, where v is a
            non-negative integer that is less than 2^^20 = 1048576. Given v,
            find index d in <xref target="degreedistribution"></xref> such
            that f[d-1] &lt;= v &lt; f[d], and set Deg[v] = min(d, W-2). 
            Recall that W is derived from K' as described in <xref
            target="precoding"></xref>.</t>

            <t></t>

            <texttable align="center" anchor="degreedistribution" style="all"
                       title="Defines the Degree Distribution for Encoding Symbols">
              <ttcol>Index d</ttcol>

              <ttcol>f[d]</ttcol>

              <ttcol>Index d</ttcol>

              <ttcol>f[d]</ttcol>

              <c>0</c>

              <c>0</c>

              <c>1</c>

              <c>5243</c>

              <c>2</c>

              <c>529531</c>

              <c>3</c>

              <c>704294</c>

              <c>4</c>

              <c>791675</c>

              <c>5</c>

              <c>844104</c>

              <c>6</c>

              <c>879057</c>

              <c>7</c>

              <c>904023</c>

              <c>8</c>

              <c>922747</c>

              <c>9</c>

              <c>937311</c>

              <c>10</c>

              <c>948962</c>

              <c>11</c>

              <c>958494</c>

              <c>12</c>

              <c>966438</c>

              <c>13</c>

              <c>973160</c>

              <c>14</c>

              <c>978921</c>

              <c>15</c>

              <c>983914</c>

              <c>16</c>

              <c>988283</c>

              <c>17</c>

              <c>992138</c>

              <c>18</c>

              <c>995565</c>

              <c>19</c>

              <c>998631</c>

              <c>20</c>

              <c>1001391</c>

              <c>21</c>

              <c>1003887</c>

              <c>22</c>

              <c>1006157</c>

              <c>23</c>

              <c>1008229</c>

              <c>24</c>

              <c>1010129</c>

              <c>25</c>

              <c>1011876</c>

              <c>26</c>

              <c>1013490</c>

              <c>27</c>

              <c>1014983</c>

              <c>28</c>

              <c>1016370</c>

              <c>29</c>

              <c>1017662</c>

              <c>30</c>

              <c>1048576</c>

              <c></c>

              <c></c>
            </texttable>
          </section>

          <section anchor="ltenc" title="Encoding Symbol Generator">
            <t>The encoding symbol generator Enc[K', (C[0], C[1], ..., C[L-1]),
            (d, a, b, d1, a1, b1)] takes the following inputs: <list
                style="symbols">
                <t>K' is the number of source symbols for the extended source
                block. Let L, W, B, S, P, and P1 be derived from K' as
                described in <xref target="precoding"></xref>.</t>

                <t>(C[0], C[1], ..., C[L-1]) is the array of L
                intermediate symbols (sub-symbols) generated as described in
                <xref target="intermediatesymbols"></xref>.</t>

                <t>(d, a, b, d1, a1, b1) is a source tuple determined from ISI
                X using the Tuple[] generator defined in <xref
                target="triplegenerator"></xref>, whereby <list
                    style="symbols">
                    <t>d is a positive integer denoting an encoding symbol LT
                    degree</t>

                    <t>a is a positive integer between 1 and W-1 inclusive</t>

                    <t>b is a non-negative integer between 0 and W-1
                    inclusive</t>

                    <t>d1 is a positive integer that has value either 2 or 3
                    denoting an encoding symbol PI degree</t>

                    <t>a1 is a positive integer between 1 and P1-1
                    inclusive</t>

                    <t>b1 is a non-negative integer between 0 and P1-1
                    inclusive</t>
                  </list></t>
              </list></t>

            <t>The encoding symbol generator produces a single encoding symbol
            as output (referred to as result), according to the following
            algorithm: <list style="symbols">
                <t>result = C[b]</t>

                <t>For j = 1, ..., d-1 do <list style="symbols">
                    <t>b = (b + a) % W</t>

                    <t>result = result + C[b]</t>
                  </list></t>

                <t>While (b1 &gt;= P) do b1 = (b1+a1) % P1</t>

                <t>result = result + C[W+b1]</t>

                <t>For j = 1, ..., d1-1 do <list style="symbols">
                    <t>b1 = (b1 + a1) % P1</t>

                    <t>While (b1 &gt;= P) do b1 = (b1+a1) % P1</t>

                    <t>result = result + C[W+b1]</t>
                  </list></t>

                <t>Return result</t>
              </list></t>
          </section>

          <section anchor="triplegenerator" title="Tuple Generator">
            <t>The tuple generator Tuple[K',X] takes the following inputs:
            <list style="symbols">
                <t>K': the number of source symbols in the extended source
                block</t>

                <t>X: an ISI</t>
              </list></t>

            <t>Let <list style="symbols">
                <t>L be determined from K' as described in <xref
                target="precoding"></xref></t>

                <t>J = J(K') be the systematic index associated with K', as
                defined in <xref target="table_systematic_indices"></xref>
                in <xref target="systematic"></xref></t>
              </list></t>

            <t>The output of the tuple generator is a tuple, (d, a, b, d1, a1,
            b1), determined as follows: <list style="symbols">
                <t>A = 53591 + J*997</t>

                <t>if (A % 2 == 0) { A = A + 1 }</t>

                <t>B = 10267*(J+1)</t>

                <t>y = (B + X*A) % 2^^32</t>

                <t>v = Rand[y, 0, 2^^20]</t>

                <t>d = Deg[v]</t>

                <t>a = 1 + Rand[y, 1, W-1]</t>

                <t>b = Rand[y, 2, W]</t>

                <t>If (d &lt; 4) { d1 = 2 + Rand[X, 3, 2] } else { d1 = 2 }</t>

                <t>a1 = 1 + Rand[X, 4, P1-1]</t>

                <t>b1 = Rand[X, 5, P1]</t>
              </list></t>
          </section>
        </section>
      </section>

      <section anchor="decoder" title="Example FEC Decoder">
        <section title="General">
          <t>This section describes an efficient decoding algorithm for the
          RaptorQ code introduced in this specification. Note that each
          received encoding symbol is a known linear combination of the
          intermediate symbols. So, each received encoding symbol provides a
          linear equation among the intermediate symbols, which, together with
          the known linear pre-coding relationships amongst the intermediate
          symbols, gives a system of linear equations. Thus, any algorithm for
          solving systems of linear equations can successfully decode the
          intermediate symbols and hence the source symbols. However, the
          algorithm chosen has a major effect on the computational efficiency
          of the decoding.</t>
        </section>

        <section title="Decoding an Extended Source Block">
          <section anchor="decodegeneral" title="General">
            <t>It is assumed that the decoder knows the structure of the
            source block it is to decode, including the symbol size, T, and
            the number K of symbols in the source block and the number K' of
            source symbols in the extended source block.</t>

            <t>From the algorithms described in <xref
            target="encoder"></xref>, the RaptorQ decoder can calculate the
            total number L = K'+S+H of intermediate symbols and determine how
            they were generated from the extended source block to be decoded.
            In this description, it is assumed that the received encoding
            symbols for the extended source block to be decoded are passed to
            the decoder. Furthermore, for each such encoding symbol, it is
            assumed that the number and set of intermediate symbols whose sum
            is equal to the encoding symbol are passed to the decoder. In the
            case of source symbols, including padding symbols, the source
            symbol tuples described in <xref target="sourcetriples"></xref>
            indicate the number and set of intermediate symbols that sum to
            give each source symbol.</t>

            <t>Let N &gt;= K' be the number of received encoding symbols to be
            used for decoding, including padding symbols for an extended
            source block, and let M = S+H+N. &nbsp;Then, with the notation of <xref
            target="intermediateexample"></xref>, we have A*C = D.</t>

            <t>Decoding an extended source block is equivalent to decoding C
            from known A and D. &nbsp;It is clear that C can be decoded if and only
            if the rank of A is L. &nbsp;Once C has been decoded, missing source
            symbols can be obtained by using the source symbol tuples to
            determine the number and set of intermediate symbols that must be
            summed to obtain each missing source symbol.</t>

            <t>The first step in decoding C is to form a decoding schedule. In
            this step, A is converted using Gaussian elimination (using row
            operations and row and column reorderings) and after discarding M
            - L rows, into the L x L identity matrix. The decoding
            schedule consists of the sequence of row operations and row and
            column reorderings during the Gaussian elimination
            process, and it
            only depends on A and not on D. The decoding of C from D can take
            place concurrently with the forming of the decoding schedule, or
            the decoding can take place afterwards based on the decoding
            schedule.</t>

            <t>The correspondence between the decoding schedule and the
            decoding of C is as follows. Let c[0] = 0, c[1] = 1, ..., c[L-1] =
            L-1 and d[0] = 0, d[1] = 1, ..., d[M-1] = M-1 initially. <list
                style="symbols">
                <t>Each time a multiple, beta, of row i of A is added to row
                i' in the decoding schedule, then in the decoding process the
                symbol beta*D[d[i]] is added to symbol D[d[i']].</t>

                <t>Each time a row i of A is multiplied by an octet beta, then
                in the decoding process the symbol D[d[i]] is also multiplied
                by beta.</t>

                <t>Each time row i is exchanged with row i' in the decoding
                schedule, then in the decoding process the value of d[i] is
                exchanged with the value of d[i'].</t>

                <t>Each time column j is exchanged with column j' in the
                decoding schedule, then in the decoding process the value of
                c[j] is exchanged with the value of c[j'].</t>
              </list></t>

            <t>From this correspondence, it is clear that the total number of
            operations on symbols in the decoding of the extended source block
            is the number of row operations (not exchanges) in the Gaussian
            elimination. Since A is the L x L identity matrix after the
            Gaussian elimination and after discarding the last M - L rows, it
            is clear at the end of successful decoding that the L symbols
            D[d[0]], D[d[1]], ..., D[d[L-1]] are the values of the L symbols
            C[c[0]], C[c[1]], ..., C[c[L-1]].</t>

            <t>The order in which Gaussian elimination is performed to form
            the decoding schedule has no bearing on whether or not the
            decoding is successful. However, the speed of the decoding depends
            heavily on the order in which Gaussian elimination is performed.
            (Furthermore, maintaining a sparse representation of A is crucial,
            although this is not described here.)  The remainder of this
            section describes an order in which Gaussian elimination could be
            performed that is relatively efficient.</t>
          </section>

          <section title="First Phase">
            <t>In the first phase of the Gaussian elimination, the matrix A is
            conceptually partitioned into submatrices and, additionally, a
            matrix X is created. This matrix has as many rows and columns as
            A, and it will be a lower triangular matrix throughout the first
            phase. At the beginning of this phase, the matrix A is copied into
            the matrix X. The submatrix sizes are parameterized by
            non-negative integers i and u, which are initialized to 0 and P,
            the number of PI symbols, respectively. The submatrices of A are:
            <list style="numbers">
                <t>The submatrix I defined by the intersection of the first i
                rows and first i columns. This is the identity matrix at the
                end of each step in the phase.</t>

                <t>The submatrix defined by the intersection of the first i
                rows and all but the first i columns and last u columns. All
                entries of this submatrix are zero.</t>

                <t>The submatrix defined by the intersection of the first i
                columns and all but the first i rows. All entries of this
                submatrix are zero.</t>

                <t>The submatrix U defined by the intersection of all the rows
                and the last u columns.</t>

                <t>The submatrix V formed by the intersection of all but the
                first i columns and the last u columns and all but the first i
                rows.</t>
              </list><xref target="matrixA"></xref> illustrates the
            submatrices of A. &nbsp;At the beginning of the first phase, V consists
            of the first L-P columns of A, and U consists of the last P columns
            corresponding to the PI symbols. In each step, a row of A is
            chosen. <figure anchor="matrixA"
                title="Submatrices of A in the First Phase">
                <artwork><![CDATA[
+-----------+-----------------+---------+
|           |                 |         |
|     I     |    All Zeros    |        
|           |                 |         | 	
+-----------+-----------------+    U    |
|           |                 |         |
|           |                 |         |
| All Zeros |       V         |         |
|           |                 |         |
|           |                 |         |
+-----------+-----------------+---------+
	]]></artwork>
              </figure></t>

            <t>The following graph defined by the structure of V is used in
            determining which row of A is chosen. The columns that intersect V
            are the nodes in the graph, and the rows that have exactly 2
            nonzero entries in V and are not HDPC rows are the edges of the
            graph that connect the two columns (nodes) in the positions of the
            two ones. A component in this graph is a maximal set of nodes
            (columns) and edges (rows) such that there is a path between each
            pair of nodes/edges in the graph. The size of a component is the
            number of nodes (columns) in the component.</t>

            <t>There are at most L steps in the first phase. The phase ends
            successfully when i + u = L, i.e., when V and the all zeros
            submatrix above V have disappeared, and A consists of I, the all
            zeros submatrix below I, and U. &nbsp;The phase ends unsuccessfully in
            decoding failure if at some step before V disappears there is no
            nonzero row in V to choose in that step. In each step, a row of A
            is chosen as follows: <list style="symbols">
                <t>If all entries of V are zero, then no row is chosen and
                decoding fails.</t>

                <t>Let r be the minimum integer such that at least one row of
                A has exactly r nonzeros in V. <list style="symbols">
                    <t>If r != 2, then choose a row with exactly r nonzeros
                    in V with minimum original degree among all such rows,
                    except that HDPC rows should not be chosen until all
                    non-HDPC rows have been processed.</t>

                    <t>If r = 2 and there is a row with exactly 2 ones in V,
                    then choose any row with exactly 2 ones in V that is part
                    of a maximum size component in the graph described above
                    that is defined by V.</t>

                    <t>If r = 2 and there is no row with exactly 2 ones in V,
                    then choose any row with exactly 2 nonzeros in V.</t>
                  </list></t>
              </list></t>

            <t>After the row is chosen in this step, the first row of A that
            intersects V is exchanged with the chosen row so that the chosen
            row is the first row that intersects V. &nbsp;The columns of A among
            those that intersect V are reordered so that one of the r
            nonzeros in the chosen row appears in the first column of V and
            so that the remaining r-1 nonzeros appear in the last columns of
            V. &nbsp;The same row and column operations are also performed on the
            matrix X. &nbsp;Then, an appropriate multiple of the chosen row is added
            to all the other rows of A below the chosen row that have a
            nonzero entry in the first column of V. &nbsp;Specifically, if a row
            below the chosen row has entry beta in the first column of V, and
            the chosen row has entry alpha in the first column of V, then
            beta/alpha multiplied by the chosen row is added to this row to
            leave a zero value in the first column of V. &nbsp;Finally, i is
            incremented by 1 and u is incremented by r-1, which completes the
            step.</t>

            <t>Note that efficiency can be improved if the row operations
            identified above are not actually performed until the affected row
            is itself chosen during the decoding process. This avoids
            processing of row operations for rows that are not eventually
            used in the decoding process, and in particular this avoids those rows
            for which beta!=1 until they are actually required. Furthermore,
            the row operations required for the HDPC rows may be performed for
            all such rows in one process, by using the algorithm described in
            <xref target="precoding"></xref>.</t>
          </section>

          <section title="Second Phase">
            <t>At this point, all the entries of X outside the first i rows
            and i columns are discarded, so that X has lower triangular form.
            The last i rows and columns of X are discarded, so that X now has
            i rows and i columns. The submatrix U is further partitioned into the
            first i rows, U_upper, and the remaining M - i rows,
            U_lower. Gaussian elimination is performed in the second phase on
            U_lower either to determine that its rank is less than u (decoding
            failure) or to convert it into a matrix where the first u rows is
            the identity matrix (success of the second phase). Call this u x
            u identity matrix I_u. The M - L rows of A that intersect
            U_lower - I_u are discarded. After this phase, A has L rows
            and L columns.</t>
          </section>

          <section title="Third Phase">
            <t>After the second phase, the only portion of A that needs to be
            zeroed out to finish converting A into the L x L identity matrix
            is U_upper. The number of rows i of the submatrix U_upper is
            generally much larger than the number of columns u of U_upper.
            Moreover, at this time, the matrix U_upper is typically dense,
            i.e., the number of nonzero entries of this matrix is large. To
            reduce this matrix to a sparse form, the sequence of operations
            performed to obtain the matrix U_lower needs to be inverted. To
            this end, the matrix X is multiplied with the submatrix of A
            consisting of the first i rows of A. &nbsp;After this operation, the
            submatrix of A consisting of the intersection of the first i rows
            and columns equals to X, whereas the matrix U_upper is transformed
            to a sparse form.</t>
          </section>

          <section title="Fourth Phase">
            <t>For each of the first i rows of U_upper, do the following: if
            the row has a nonzero entry at position j, and if the value of
            that nonzero entry is b, then add to this row b times row j of
            I_u. After this step, the submatrix of A consisting of the
            intersection of the first i rows and columns is equal to X, the
            submatrix U_upper consists of zeros, the submatrix consisting of
            the intersection of the last u rows and the first i columns
            consists of zeros, and the submatrix consisting of the last u rows
            and columns is the matrix I_u.</t>
          </section>

          <section title="Fifth Phase">
            <t>For j from 1 to i, perform the following operations:</t>

            <t><list style="numbers">
                <t>If A[j,j] is not one, then divide row j of A by A[j,j].</t>

                <t>For l from 1 to j-1, if A[j,l] is nonzero, then add A[j,l]
                multiplied with row l of A to row j of A.</t>
              </list>After this phase, A is the L x L identity matrix and a
            complete decoding schedule has been successfully formed. Then, the
            corresponding decoding consisting of summing known encoding
            symbols can be executed to recover the intermediate symbols based
            on the decoding schedule. The tuples associated with all source
            symbols are computed according to <xref
            target="sourcetriples"></xref>. The tuples for received source
            symbols are used in the decoding. The tuples for missing source
            symbols are used to determine which intermediate symbols need to
            be summed to recover the missing source symbols.</t>
          </section>
        </section>
      </section>

      <section anchor="random" title="Random Numbers">
        <t>The four arrays V0, V1, V2, and V3 used in <xref
        target="randomgenerator"></xref> are provided below. There are 256
        entries in each of the four arrays. The indexing into each array
        starts at 0, and the entries are 32-bit unsigned integers.</t>

        <section title="The Table V0">
          <t>
	    <figure><artwork>
   251291136, 3952231631, 3370958628, 4070167936, 123631495,
   3351110283, 3218676425, 2011642291, 774603218, 2402805061,
   1004366930, 1843948209, 428891132, 3746331984, 1591258008,
   3067016507, 1433388735, 504005498, 2032657933, 3419319784,
   2805686246, 3102436986, 3808671154, 2501582075, 3978944421,
   246043949, 4016898363, 649743608, 1974987508, 2651273766,
   2357956801, 689605112, 715807172, 2722736134, 191939188,
   3535520147, 3277019569, 1470435941, 3763101702, 3232409631,
   122701163, 3920852693, 782246947, 372121310, 2995604341,
   2045698575, 2332962102, 4005368743, 218596347, 3415381967,
   4207612806, 861117671, 3676575285, 2581671944, 3312220480,
   681232419, 307306866, 4112503940, 1158111502, 709227802,
   2724140433, 4201101115, 4215970289, 4048876515, 3031661061,
   1909085522, 510985033, 1361682810, 129243379, 3142379587, 
   2569842483, 3033268270, 1658118006, 932109358, 1982290045,
   2983082771, 3007670818, 3448104768, 683749698, 778296777,
   1399125101, 1939403708, 1692176003, 3868299200, 1422476658,
   593093658, 1878973865, 2526292949, 1591602827, 3986158854,
   3964389521, 2695031039, 1942050155, 424618399, 1347204291,
   2669179716, 2434425874, 2540801947, 1384069776, 4123580443,
   1523670218, 2708475297, 1046771089, 2229796016, 1255426612,
   4213663089, 1521339547, 3041843489, 420130494, 10677091,
   515623176, 3457502702, 2115821274, 2720124766, 3242576090,
   854310108, 425973987, 325832382, 1796851292, 2462744411,
   1976681690, 1408671665, 1228817808, 3917210003, 263976645,
   2593736473, 2471651269, 4291353919, 650792940, 1191583883,
   3046561335, 2466530435, 2545983082, 969168436, 2019348792,
   2268075521, 1169345068, 3250240009, 3963499681, 2560755113,
   911182396, 760842409, 3569308693, 2687243553, 381854665,
   2613828404, 2761078866, 1456668111, 883760091, 3294951678,
   1604598575, 1985308198, 1014570543, 2724959607, 3062518035,
   3115293053, 138853680, 4160398285, 3322241130, 2068983570,
   2247491078, 3669524410, 1575146607, 828029864, 3732001371,
   3422026452, 3370954177, 4006626915, 543812220, 1243116171,
   3928372514, 2791443445, 4081325272, 2280435605, 885616073,
   616452097, 3188863436, 2780382310, 2340014831, 1208439576,
   258356309, 3837963200, 2075009450, 3214181212, 3303882142,
   880813252, 1355575717, 207231484, 2420803184, 358923368,
   1617557768, 3272161958, 1771154147, 2842106362, 1751209208,
   1421030790, 658316681, 194065839, 3241510581, 38625260,
   301875395, 4176141739, 297312930, 2137802113, 1502984205,
   3669376622, 3728477036, 234652930, 2213589897, 2734638932,
   1129721478, 3187422815, 2859178611, 3284308411, 3819792700,
   3557526733, 451874476, 1740576081, 3592838701, 1709429513,
   3702918379, 3533351328, 1641660745, 179350258, 2380520112,
   3936163904, 3685256204, 3156252216, 1854258901, 2861641019,
   3176611298, 834787554, 331353807, 517858103, 3010168884,
   4012642001, 2217188075, 3756943137, 3077882590, 2054995199,
   3081443129, 3895398812, 1141097543, 2376261053, 2626898255,
   2554703076, 401233789, 1460049922, 678083952, 1064990737,
   940909784, 1673396780, 528881783, 1712547446, 3629685652,
   1358307511
	    </artwork></figure>
	  </t>
        </section>

        <section title="The Table V1">
          <t>
	    <figure><artwork>
   807385413, 2043073223, 3336749796, 1302105833, 2278607931,
   541015020, 1684564270, 372709334, 3508252125, 1768346005,
   1270451292, 2603029534, 2049387273, 3891424859, 2152948345,
   4114760273, 915180310, 3754787998, 700503826, 2131559305,
   1308908630, 224437350, 4065424007, 3638665944, 1679385496,
   3431345226, 1779595665, 3068494238, 1424062773, 1033448464,
   4050396853, 3302235057, 420600373, 2868446243, 311689386,
   259047959, 4057180909, 1575367248, 4151214153, 110249784,
   3006865921, 4293710613, 3501256572, 998007483, 499288295,
   1205710710, 2997199489, 640417429, 3044194711, 486690751,
   2686640734, 2394526209, 2521660077, 49993987, 3843885867,
   4201106668, 415906198, 19296841, 2402488407, 2137119134,
   1744097284, 579965637, 2037662632, 852173610, 2681403713,
   1047144830, 2982173936, 910285038, 4187576520, 2589870048,
   989448887, 3292758024, 506322719, 176010738, 1865471968,
   2619324712, 564829442, 1996870325, 339697593, 4071072948,
   3618966336, 2111320126, 1093955153, 957978696, 892010560,
   1854601078, 1873407527, 2498544695, 2694156259, 1927339682,
   1650555729, 183933047, 3061444337, 2067387204, 228962564,
   3904109414, 1595995433, 1780701372, 2463145963, 307281463,
   3237929991, 3852995239, 2398693510, 3754138664, 522074127,
   146352474, 4104915256, 3029415884, 3545667983, 332038910,
   976628269, 3123492423, 3041418372, 2258059298, 2139377204,
   3243642973, 3226247917, 3674004636, 2698992189, 3453843574,
   1963216666, 3509855005, 2358481858, 747331248, 1957348676,
   1097574450, 2435697214, 3870972145, 1888833893, 2914085525,
   4161315584, 1273113343, 3269644828, 3681293816, 412536684,
   1156034077, 3823026442, 1066971017, 3598330293, 1979273937,
   2079029895, 1195045909, 1071986421, 2712821515, 3377754595,
   2184151095, 750918864, 2585729879, 4249895712, 1832579367,
   1192240192, 946734366, 31230688, 3174399083, 3549375728,
   1642430184, 1904857554, 861877404, 3277825584, 4267074718,
   3122860549, 666423581, 644189126, 226475395, 307789415,
   1196105631, 3191691839, 782852669, 1608507813, 1847685900,
   4069766876, 3931548641, 2526471011, 766865139, 2115084288,
   4259411376, 3323683436, 568512177, 3736601419, 1800276898,
   4012458395, 1823982, 27980198, 2023839966, 869505096,
   431161506, 1024804023, 1853869307, 3393537983, 1500703614,
   3019471560, 1351086955, 3096933631, 3034634988, 2544598006,
   1230942551, 3362230798, 159984793, 491590373, 3993872886,
   3681855622, 903593547, 3535062472, 1799803217, 772984149,
   895863112, 1899036275, 4187322100, 101856048, 234650315,
   3183125617, 3190039692, 525584357, 1286834489, 455810374,
   1869181575, 922673938, 3877430102, 3422391938, 1414347295,
   1971054608, 3061798054, 830555096, 2822905141, 167033190,
   1079139428, 4210126723, 3593797804, 429192890, 372093950,
   1779187770, 3312189287, 204349348, 452421568, 2800540462,
   3733109044, 1235082423, 1765319556, 3174729780, 3762994475,
   3171962488, 442160826, 198349622, 45942637, 1324086311, 
   2901868599, 678860040, 3812229107, 19936821, 1119590141,
   3640121682, 3545931032, 2102949142, 2828208598, 3603378023,
   4135048896
	    </artwork></figure>
	  </t>
        </section>

        <section title="The Table V2">
          <t>
	    <figure><artwork>
   1629829892, 282540176, 2794583710, 496504798, 2990494426,
   3070701851, 2575963183, 4094823972, 2775723650, 4079480416,
   176028725, 2246241423, 3732217647, 2196843075, 1306949278,
   4170992780, 4039345809, 3209664269, 3387499533, 293063229,
   3660290503, 2648440860, 2531406539, 3537879412, 773374739,
   4184691853, 1804207821, 3347126643, 3479377103, 3970515774,
   1891731298, 2368003842, 3537588307, 2969158410, 4230745262,
   831906319, 2935838131, 264029468, 120852739, 3200326460,
   355445271, 2296305141, 1566296040, 1760127056, 20073893,
   3427103620, 2866979760, 2359075957, 2025314291, 1725696734,
   3346087406, 2690756527, 99815156, 4248519977, 2253762642,
   3274144518, 598024568, 3299672435, 556579346, 4121041856,
   2896948975, 3620123492, 918453629, 3249461198, 2231414958,
   3803272287, 3657597946, 2588911389, 242262274, 1725007475,
   2026427718, 46776484, 2873281403, 2919275846, 3177933051,
   1918859160, 2517854537, 1857818511, 3234262050, 479353687,
   200201308, 2801945841, 1621715769, 483977159, 423502325,
   3689396064, 1850168397, 3359959416, 3459831930, 841488699,
   3570506095, 930267420, 1564520841, 2505122797, 593824107,
   1116572080, 819179184, 3139123629, 1414339336, 1076360795,
   512403845, 177759256, 1701060666, 2239736419, 515179302,
   2935012727, 3821357612, 1376520851, 2700745271, 966853647,
   1041862223, 715860553, 171592961, 1607044257, 1227236688,
   3647136358, 1417559141, 4087067551, 2241705880, 4194136288,
   1439041934, 20464430, 119668151, 2021257232, 2551262694,
   1381539058, 4082839035, 498179069, 311508499, 3580908637,
   2889149671, 142719814, 1232184754, 3356662582, 2973775623,
   1469897084, 1728205304, 1415793613, 50111003, 3133413359,
   4074115275, 2710540611, 2700083070, 2457757663, 2612845330,
   3775943755, 2469309260, 2560142753, 3020996369, 1691667711,
   4219602776, 1687672168, 1017921622, 2307642321, 368711460,
   3282925988, 213208029, 4150757489, 3443211944, 2846101972,
   4106826684, 4272438675, 2199416468, 3710621281, 497564971,
   285138276, 765042313, 916220877, 3402623607, 2768784621,
   1722849097, 3386397442, 487920061, 3569027007, 3424544196,
   217781973, 2356938519, 3252429414, 145109750, 2692588106,
   2454747135, 1299493354, 4120241887, 2088917094, 932304329,
   1442609203, 952586974, 3509186750, 753369054, 854421006,
   1954046388, 2708927882, 4047539230, 3048925996, 1667505809,
   805166441, 1182069088, 4265546268, 4215029527, 3374748959,
   373532666, 2454243090, 2371530493, 3651087521, 2619878153,
   1651809518, 1553646893, 1227452842, 703887512, 3696674163,
   2552507603, 2635912901, 895130484, 3287782244, 3098973502,
   990078774, 3780326506, 2290845203, 41729428, 1949580860,
   2283959805, 1036946170, 1694887523, 4880696, 466000198,
   2765355283, 3318686998, 1266458025, 3919578154, 3545413527,
   2627009988, 3744680394, 1696890173, 3250684705, 4142417708,
   915739411, 3308488877, 1289361460, 2942552331, 1169105979,
   3342228712, 698560958, 1356041230, 2401944293, 107705232,
   3701895363, 903928723, 3646581385, 844950914, 1944371367,
   3863894844, 2946773319, 1972431613, 1706989237, 29917467,
   3497665928
	    </artwork></figure>
	  </t>
        </section>

        <section title="The Table V3">
          <t>
	    <figure><artwork>
   1191369816, 744902811, 2539772235, 3213192037, 3286061266,
   1200571165, 2463281260, 754888894, 714651270, 1968220972,
   3628497775, 1277626456, 1493398934, 364289757, 2055487592,
   3913468088, 2930259465, 902504567, 3967050355, 2056499403,
   692132390, 186386657, 832834706, 859795816, 1283120926,
   2253183716, 3003475205, 1755803552, 2239315142, 4271056352,
   2184848469, 769228092, 1249230754, 1193269205, 2660094102,
   642979613, 1687087994, 2726106182, 446402913, 4122186606,
   3771347282, 37667136, 192775425, 3578702187, 1952659096,
   3989584400, 3069013882, 2900516158, 4045316336, 3057163251,
   1702104819, 4116613420, 3575472384, 2674023117, 1409126723,
   3215095429, 1430726429, 2544497368, 1029565676, 1855801827,
   4262184627, 1854326881, 2906728593, 3277836557, 2787697002,
   2787333385, 3105430738, 2477073192, 748038573, 1088396515,
   1611204853, 201964005, 3745818380, 3654683549, 3816120877,
   3915783622, 2563198722, 1181149055, 33158084, 3723047845,
   3790270906, 3832415204, 2959617497, 372900708, 1286738499,
   1932439099, 3677748309, 2454711182, 2757856469, 2134027055,
   2780052465, 3190347618, 3758510138, 3626329451, 1120743107,
   1623585693, 1389834102, 2719230375, 3038609003, 462617590,
   260254189, 3706349764, 2556762744, 2874272296, 2502399286,
   4216263978, 2683431180, 2168560535, 3561507175, 668095726,
   680412330, 3726693946, 4180630637, 3335170953, 942140968,
   2711851085, 2059233412, 4265696278, 3204373534, 232855056,
   881788313, 2258252172, 2043595984, 3758795150, 3615341325,
   2138837681, 1351208537, 2923692473, 3402482785, 2105383425,
   2346772751, 499245323, 3417846006, 2366116814, 2543090583,
   1828551634, 3148696244, 3853884867, 1364737681, 2200687771,
   2689775688, 232720625, 4071657318, 2671968983, 3531415031,
   1212852141, 867923311, 3740109711, 1923146533, 3237071777,
   3100729255, 3247856816, 906742566, 4047640575, 4007211572,
   3495700105, 1171285262, 2835682655, 1634301229, 3115169925,
   2289874706, 2252450179, 944880097, 371933491, 1649074501,
   2208617414, 2524305981, 2496569844, 2667037160, 1257550794,
   3399219045, 3194894295, 1643249887, 342911473, 891025733,
   3146861835, 3789181526, 938847812, 1854580183, 2112653794,
   2960702988, 1238603378, 2205280635, 1666784014, 2520274614,
   3355493726, 2310872278, 3153920489, 2745882591, 1200203158,
   3033612415, 2311650167, 1048129133, 4206710184, 4209176741,
   2640950279, 2096382177, 4116899089, 3631017851, 4104488173,
   1857650503, 3801102932, 445806934, 3055654640, 897898279,
   3234007399, 1325494930, 2982247189, 1619020475, 2720040856,
   885096170, 3485255499, 2983202469, 3891011124, 546522756,
   1524439205, 2644317889, 2170076800, 2969618716, 961183518,
   1081831074, 1037015347, 3289016286, 2331748669, 620887395,
   303042654, 3990027945, 1562756376, 3413341792, 2059647769,
   2823844432, 674595301, 2457639984, 4076754716, 2447737904,
   1583323324, 625627134, 3076006391, 345777990, 1684954145,
   879227329, 3436182180, 1522273219, 3802543817, 1456017040,
   1897819847, 2970081129, 1382576028, 3820044861, 1044428167,
   612252599, 3340478395, 2150613904, 3397625662, 3573635640,
   3432275192
	    </artwork></figure>
	  </t>
        </section>
      </section>

      <section anchor="systematic"
               title="Systematic Indices and Other Parameters">
        <t><xref target="table_systematic_indices"></xref> below specifies the
        supported values of K'. The table also specifies for each
        supported value of K' the systematic index J(K'), the number
        H(K') of HDPC symbols, the number S(K') of LDPC symbols,
        and the number W(K') of LT symbols. For each value of K',
        the corresponding values of S(K') and W(K') are prime
        numbers.</t>

        <t>The systematic index J(K') is designed to have the property that
        the set of source symbol tuples (d[0], a[0], b[0], d1[0], a1[0],
        b1[0]), ..., (d[K'-1], a[K'-1], b[K'-1], d1[K'-1],
        a1[K'-1], b1[K'-1]) are such that the L intermediate
        symbols are uniquely defined, i.e., the matrix A in <xref
        target="matrixA"></xref> has full rank and is therefore
        invertible.</t>

        <texttable align="center" anchor="table_systematic_indices"
                   style="all" title="Systematic Indices and Other Parameters">
          <ttcol>K'</ttcol>

          <ttcol>J(K')</ttcol>

          <ttcol>S(K')</ttcol>

          <ttcol>H(K')</ttcol>

          <ttcol>W(K')</ttcol>

          <c>10</c>

          <c>254</c>

          <c>7</c>

          <c>10</c>

          <c>17</c>

          <c>12</c>

          <c>630</c>

          <c>7</c>

          <c>10</c>

          <c>19</c>

          <c>18</c>

          <c>682</c>

          <c>11</c>

          <c>10</c>

          <c>29</c>

          <c>20</c>

          <c>293</c>

          <c>11</c>

          <c>10</c>

          <c>31</c>

          <c>26</c>

          <c>80</c>

          <c>11</c>

          <c>10</c>

          <c>37</c>

          <c>30</c>

          <c>566</c>

          <c>11</c>

          <c>10</c>

          <c>41</c>

          <c>32</c>

          <c>860</c>

          <c>11</c>

          <c>10</c>

          <c>43</c>

          <c>36</c>

          <c>267</c>

          <c>11</c>

          <c>10</c>

          <c>47</c>

          <c>42</c>

          <c>822</c>

          <c>11</c>

          <c>10</c>

          <c>53</c>

          <c>46</c>

          <c>506</c>

          <c>13</c>

          <c>10</c>

          <c>59</c>

          <c>48</c>

          <c>589</c>

          <c>13</c>

          <c>10</c>

          <c>61</c>

          <c>49</c>

          <c>87</c>

          <c>13</c>

          <c>10</c>

          <c>61</c>

          <c>55</c>

          <c>520</c>

          <c>13</c>

          <c>10</c>

          <c>67</c>

          <c>60</c>

          <c>159</c>

          <c>13</c>

          <c>10</c>

          <c>71</c>

          <c>62</c>

          <c>235</c>

          <c>13</c>

          <c>10</c>

          <c>73</c>

          <c>69</c>

          <c>157</c>

          <c>13</c>

          <c>10</c>

          <c>79</c>

          <c>75</c>

          <c>502</c>

          <c>17</c>

          <c>10</c>

          <c>89</c>

          <c>84</c>

          <c>334</c>

          <c>17</c>

          <c>10</c>

          <c>97</c>

          <c>88</c>

          <c>583</c>

          <c>17</c>

          <c>10</c>

          <c>101</c>

          <c>91</c>

          <c>66</c>

          <c>17</c>

          <c>10</c>

          <c>103</c>

          <c>95</c>

          <c>352</c>

          <c>17</c>

          <c>10</c>

          <c>107</c>

          <c>97</c>

          <c>365</c>

          <c>17</c>

          <c>10</c>

          <c>109</c>

          <c>101</c>

          <c>562</c>

          <c>17</c>

          <c>10</c>

          <c>113</c>

          <c>114</c>

          <c>5</c>

          <c>19</c>

          <c>10</c>

          <c>127</c>

          <c>119</c>

          <c>603</c>

          <c>19</c>

          <c>10</c>

          <c>131</c>

          <c>125</c>

          <c>721</c>

          <c>19</c>

          <c>10</c>

          <c>137</c>

          <c>127</c>

          <c>28</c>

          <c>19</c>

          <c>10</c>

          <c>139</c>

          <c>138</c>

          <c>660</c>

          <c>19</c>

          <c>10</c>

          <c>149</c>

          <c>140</c>

          <c>829</c>

          <c>19</c>

          <c>10</c>

          <c>151</c>

          <c>149</c>

          <c>900</c>

          <c>23</c>

          <c>10</c>

          <c>163</c>

          <c>153</c>

          <c>930</c>

          <c>23</c>

          <c>10</c>

          <c>167</c>

          <c>160</c>

          <c>814</c>

          <c>23</c>

          <c>10</c>

          <c>173</c>

          <c>166</c>

          <c>661</c>

          <c>23</c>

          <c>10</c>

          <c>179</c>

          <c>168</c>

          <c>693</c>

          <c>23</c>

          <c>10</c>

          <c>181</c>

          <c>179</c>

          <c>780</c>

          <c>23</c>

          <c>10</c>

          <c>191</c>

          <c>181</c>

          <c>605</c>

          <c>23</c>

          <c>10</c>

          <c>193</c>

          <c>185</c>

          <c>551</c>

          <c>23</c>

          <c>10</c>

          <c>197</c>

          <c>187</c>

          <c>777</c>

          <c>23</c>

          <c>10</c>

          <c>199</c>

          <c>200</c>

          <c>491</c>

          <c>23</c>

          <c>10</c>

          <c>211</c>

          <c>213</c>

          <c>396</c>

          <c>23</c>

          <c>10</c>

          <c>223</c>

          <c>217</c>

          <c>764</c>

          <c>29</c>

          <c>10</c>

          <c>233</c>

          <c>225</c>

          <c>843</c>

          <c>29</c>

          <c>10</c>

          <c>241</c>

          <c>236</c>

          <c>646</c>

          <c>29</c>

          <c>10</c>

          <c>251</c>

          <c>242</c>

          <c>557</c>

          <c>29</c>

          <c>10</c>

          <c>257</c>

          <c>248</c>

          <c>608</c>

          <c>29</c>

          <c>10</c>

          <c>263</c>

          <c>257</c>

          <c>265</c>

          <c>29</c>

          <c>10</c>

          <c>271</c>

          <c>263</c>

          <c>505</c>

          <c>29</c>

          <c>10</c>

          <c>277</c>

          <c>269</c>

          <c>722</c>

          <c>29</c>

          <c>10</c>

          <c>283</c>

          <c>280</c>

          <c>263</c>

          <c>29</c>

          <c>10</c>

          <c>293</c>

          <c>295</c>

          <c>999</c>

          <c>29</c>

          <c>10</c>

          <c>307</c>

          <c>301</c>

          <c>874</c>

          <c>29</c>

          <c>10</c>

          <c>313</c>

          <c>305</c>

          <c>160</c>

          <c>29</c>

          <c>10</c>

          <c>317</c>

          <c>324</c>

          <c>575</c>

          <c>31</c>

          <c>10</c>

          <c>337</c>

          <c>337</c>

          <c>210</c>

          <c>31</c>

          <c>10</c>

          <c>349</c>

          <c>341</c>

          <c>513</c>

          <c>31</c>

          <c>10</c>

          <c>353</c>

          <c>347</c>

          <c>503</c>

          <c>31</c>

          <c>10</c>

          <c>359</c>

          <c>355</c>

          <c>558</c>

          <c>31</c>

          <c>10</c>

          <c>367</c>

          <c>362</c>

          <c>932</c>

          <c>31</c>

          <c>10</c>

          <c>373</c>

          <c>368</c>

          <c>404</c>

          <c>31</c>

          <c>10</c>

          <c>379</c>

          <c>372</c>

          <c>520</c>

          <c>37</c>

          <c>10</c>

          <c>389</c>

          <c>380</c>

          <c>846</c>

          <c>37</c>

          <c>10</c>

          <c>397</c>

          <c>385</c>

          <c>485</c>

          <c>37</c>

          <c>10</c>

          <c>401</c>

          <c>393</c>

          <c>728</c>

          <c>37</c>

          <c>10</c>

          <c>409</c>

          <c>405</c>

          <c>554</c>

          <c>37</c>

          <c>10</c>

          <c>421</c>

          <c>418</c>

          <c>471</c>

          <c>37</c>

          <c>10</c>

          <c>433</c>

          <c>428</c>

          <c>641</c>

          <c>37</c>

          <c>10</c>

          <c>443</c>

          <c>434</c>

          <c>732</c>

          <c>37</c>

          <c>10</c>

          <c>449</c>

          <c>447</c>

          <c>193</c>

          <c>37</c>

          <c>10</c>

          <c>461</c>

          <c>453</c>

          <c>934</c>

          <c>37</c>

          <c>10</c>

          <c>467</c>

          <c>466</c>

          <c>864</c>

          <c>37</c>

          <c>10</c>

          <c>479</c>

          <c>478</c>

          <c>790</c>

          <c>37</c>

          <c>10</c>

          <c>491</c>

          <c>486</c>

          <c>912</c>

          <c>37</c>

          <c>10</c>

          <c>499</c>

          <c>491</c>

          <c>617</c>

          <c>37</c>

          <c>10</c>

          <c>503</c>

          <c>497</c>

          <c>587</c>

          <c>37</c>

          <c>10</c>

          <c>509</c>

          <c>511</c>

          <c>800</c>

          <c>37</c>

          <c>10</c>

          <c>523</c>

          <c>526</c>

          <c>923</c>

          <c>41</c>

          <c>10</c>

          <c>541</c>

          <c>532</c>

          <c>998</c>

          <c>41</c>

          <c>10</c>

          <c>547</c>

          <c>542</c>

          <c>92</c>

          <c>41</c>

          <c>10</c>

          <c>557</c>

          <c>549</c>

          <c>497</c>

          <c>41</c>

          <c>10</c>

          <c>563</c>

          <c>557</c>

          <c>559</c>

          <c>41</c>

          <c>10</c>

          <c>571</c>

          <c>563</c>

          <c>667</c>

          <c>41</c>

          <c>10</c>

          <c>577</c>

          <c>573</c>

          <c>912</c>

          <c>41</c>

          <c>10</c>

          <c>587</c>

          <c>580</c>

          <c>262</c>

          <c>41</c>

          <c>10</c>

          <c>593</c>

          <c>588</c>

          <c>152</c>

          <c>41</c>

          <c>10</c>

          <c>601</c>

          <c>594</c>

          <c>526</c>

          <c>41</c>

          <c>10</c>

          <c>607</c>

          <c>600</c>

          <c>268</c>

          <c>41</c>

          <c>10</c>

          <c>613</c>

          <c>606</c>

          <c>212</c>

          <c>41</c>

          <c>10</c>

          <c>619</c>

          <c>619</c>

          <c>45</c>

          <c>41</c>

          <c>10</c>

          <c>631</c>

          <c>633</c>

          <c>898</c>

          <c>43</c>

          <c>10</c>

          <c>647</c>

          <c>640</c>

          <c>527</c>

          <c>43</c>

          <c>10</c>

          <c>653</c>

          <c>648</c>

          <c>558</c>

          <c>43</c>

          <c>10</c>

          <c>661</c>

          <c>666</c>

          <c>460</c>

          <c>47</c>

          <c>10</c>

          <c>683</c>

          <c>675</c>

          <c>5</c>

          <c>47</c>

          <c>10</c>

          <c>691</c>

          <c>685</c>

          <c>895</c>

          <c>47</c>

          <c>10</c>

          <c>701</c>

          <c>693</c>

          <c>996</c>

          <c>47</c>

          <c>10</c>

          <c>709</c>

          <c>703</c>

          <c>282</c>

          <c>47</c>

          <c>10</c>

          <c>719</c>

          <c>718</c>

          <c>513</c>

          <c>47</c>

          <c>10</c>

          <c>733</c>

          <c>728</c>

          <c>865</c>

          <c>47</c>

          <c>10</c>

          <c>743</c>

          <c>736</c>

          <c>870</c>

          <c>47</c>

          <c>10</c>

          <c>751</c>

          <c>747</c>

          <c>239</c>

          <c>47</c>

          <c>10</c>

          <c>761</c>

          <c>759</c>

          <c>452</c>

          <c>47</c>

          <c>10</c>

          <c>773</c>

          <c>778</c>

          <c>862</c>

          <c>53</c>

          <c>10</c>

          <c>797</c>

          <c>792</c>

          <c>852</c>

          <c>53</c>

          <c>10</c>

          <c>811</c>

          <c>802</c>

          <c>643</c>

          <c>53</c>

          <c>10</c>

          <c>821</c>

          <c>811</c>

          <c>543</c>

          <c>53</c>

          <c>10</c>

          <c>829</c>

          <c>821</c>

          <c>447</c>

          <c>53</c>

          <c>10</c>

          <c>839</c>

          <c>835</c>

          <c>321</c>

          <c>53</c>

          <c>10</c>

          <c>853</c>

          <c>845</c>

          <c>287</c>

          <c>53</c>

          <c>10</c>

          <c>863</c>

          <c>860</c>

          <c>12</c>

          <c>53</c>

          <c>10</c>

          <c>877</c>

          <c>870</c>

          <c>251</c>

          <c>53</c>

          <c>10</c>

          <c>887</c>

          <c>891</c>

          <c>30</c>

          <c>53</c>

          <c>10</c>

          <c>907</c>

          <c>903</c>

          <c>621</c>

          <c>53</c>

          <c>10</c>

          <c>919</c>

          <c>913</c>

          <c>555</c>

          <c>53</c>

          <c>10</c>

          <c>929</c>

          <c>926</c>

          <c>127</c>

          <c>53</c>

          <c>10</c>

          <c>941</c>

          <c>938</c>

          <c>400</c>

          <c>53</c>

          <c>10</c>

          <c>953</c>

          <c>950</c>

          <c>91</c>

          <c>59</c>

          <c>10</c>

          <c>971</c>

          <c>963</c>

          <c>916</c>

          <c>59</c>

          <c>10</c>

          <c>983</c>

          <c>977</c>

          <c>935</c>

          <c>59</c>

          <c>10</c>

          <c>997</c>

          <c>989</c>

          <c>691</c>

          <c>59</c>

          <c>10</c>

          <c>1009</c>

          <c>1002</c>

          <c>299</c>

          <c>59</c>

          <c>10</c>

          <c>1021</c>

          <c>1020</c>

          <c>282</c>

          <c>59</c>

          <c>10</c>

          <c>1039</c>

          <c>1032</c>

          <c>824</c>

          <c>59</c>

          <c>10</c>

          <c>1051</c>

          <c>1050</c>

          <c>536</c>

          <c>59</c>

          <c>11</c>

          <c>1069</c>

          <c>1074</c>

          <c>596</c>

          <c>59</c>

          <c>11</c>

          <c>1093</c>

          <c>1085</c>

          <c>28</c>

          <c>59</c>

          <c>11</c>

          <c>1103</c>

          <c>1099</c>

          <c>947</c>

          <c>59</c>

          <c>11</c>

          <c>1117</c>

          <c>1111</c>

          <c>162</c>

          <c>59</c>

          <c>11</c>

          <c>1129</c>

          <c>1136</c>

          <c>536</c>

          <c>59</c>

          <c>11</c>

          <c>1153</c>

          <c>1152</c>

          <c>1000</c>

          <c>61</c>

          <c>11</c>

          <c>1171</c>

          <c>1169</c>

          <c>251</c>

          <c>61</c>

          <c>11</c>

          <c>1187</c>

          <c>1183</c>

          <c>673</c>

          <c>61</c>

          <c>11</c>

          <c>1201</c>

          <c>1205</c>

          <c>559</c>

          <c>61</c>

          <c>11</c>

          <c>1223</c>

          <c>1220</c>

          <c>923</c>

          <c>61</c>

          <c>11</c>

          <c>1237</c>

          <c>1236</c>

          <c>81</c>

          <c>67</c>

          <c>11</c>

          <c>1259</c>

          <c>1255</c>

          <c>478</c>

          <c>67</c>

          <c>11</c>

          <c>1277</c>

          <c>1269</c>

          <c>198</c>

          <c>67</c>

          <c>11</c>

          <c>1291</c>

          <c>1285</c>

          <c>137</c>

          <c>67</c>

          <c>11</c>

          <c>1307</c>

          <c>1306</c>

          <c>75</c>

          <c>67</c>

          <c>11</c>

          <c>1327</c>

          <c>1347</c>

          <c>29</c>

          <c>67</c>

          <c>11</c>

          <c>1367</c>

          <c>1361</c>

          <c>231</c>

          <c>67</c>

          <c>11</c>

          <c>1381</c>

          <c>1389</c>

          <c>532</c>

          <c>67</c>

          <c>11</c>

          <c>1409</c>

          <c>1404</c>

          <c>58</c>

          <c>67</c>

          <c>11</c>

          <c>1423</c>

          <c>1420</c>

          <c>60</c>

          <c>67</c>

          <c>11</c>

          <c>1439</c>

          <c>1436</c>

          <c>964</c>

          <c>71</c>

          <c>11</c>

          <c>1459</c>

          <c>1461</c>

          <c>624</c>

          <c>71</c>

          <c>11</c>

          <c>1483</c>

          <c>1477</c>

          <c>502</c>

          <c>71</c>

          <c>11</c>

          <c>1499</c>

          <c>1502</c>

          <c>636</c>

          <c>71</c>

          <c>11</c>

          <c>1523</c>

          <c>1522</c>

          <c>986</c>

          <c>71</c>

          <c>11</c>

          <c>1543</c>

          <c>1539</c>

          <c>950</c>

          <c>71</c>

          <c>11</c>

          <c>1559</c>

          <c>1561</c>

          <c>735</c>

          <c>73</c>

          <c>11</c>

          <c>1583</c>

          <c>1579</c>

          <c>866</c>

          <c>73</c>

          <c>11</c>

          <c>1601</c>

          <c>1600</c>

          <c>203</c>

          <c>73</c>

          <c>11</c>

          <c>1621</c>

          <c>1616</c>

          <c>83</c>

          <c>73</c>

          <c>11</c>

          <c>1637</c>

          <c>1649</c>

          <c>14</c>

          <c>73</c>

          <c>11</c>

          <c>1669</c>

          <c>1673</c>

          <c>522</c>

          <c>79</c>

          <c>11</c>

          <c>1699</c>

          <c>1698</c>

          <c>226</c>

          <c>79</c>

          <c>11</c>

          <c>1723</c>

          <c>1716</c>

          <c>282</c>

          <c>79</c>

          <c>11</c>

          <c>1741</c>

          <c>1734</c>

          <c>88</c>

          <c>79</c>

          <c>11</c>

          <c>1759</c>

          <c>1759</c>

          <c>636</c>

          <c>79</c>

          <c>11</c>

          <c>1783</c>

          <c>1777</c>

          <c>860</c>

          <c>79</c>

          <c>11</c>

          <c>1801</c>

          <c>1800</c>

          <c>324</c>

          <c>79</c>

          <c>11</c>

          <c>1823</c>

          <c>1824</c>

          <c>424</c>

          <c>79</c>

          <c>11</c>

          <c>1847</c>

          <c>1844</c>

          <c>999</c>

          <c>79</c>

          <c>11</c>

          <c>1867</c>

          <c>1863</c>

          <c>682</c>

          <c>83</c>

          <c>11</c>

          <c>1889</c>

          <c>1887</c>

          <c>814</c>

          <c>83</c>

          <c>11</c>

          <c>1913</c>

          <c>1906</c>

          <c>979</c>

          <c>83</c>

          <c>11</c>

          <c>1931</c>

          <c>1926</c>

          <c>538</c>

          <c>83</c>

          <c>11</c>

          <c>1951</c>

          <c>1954</c>

          <c>278</c>

          <c>83</c>

          <c>11</c>

          <c>1979</c>

          <c>1979</c>

          <c>580</c>

          <c>83</c>

          <c>11</c>

          <c>2003</c>

          <c>2005</c>

          <c>773</c>

          <c>83</c>

          <c>11</c>

          <c>2029</c>

          <c>2040</c>

          <c>911</c>

          <c>89</c>

          <c>11</c>

          <c>2069</c>

          <c>2070</c>

          <c>506</c>

          <c>89</c>

          <c>11</c>

          <c>2099</c>

          <c>2103</c>

          <c>628</c>

          <c>89</c>

          <c>11</c>

          <c>2131</c>

          <c>2125</c>

          <c>282</c>

          <c>89</c>

          <c>11</c>

          <c>2153</c>

          <c>2152</c>

          <c>309</c>

          <c>89</c>

          <c>11</c>

          <c>2179</c>

          <c>2195</c>

          <c>858</c>

          <c>89</c>

          <c>11</c>

          <c>2221</c>

          <c>2217</c>

          <c>442</c>

          <c>89</c>

          <c>11</c>

          <c>2243</c>

          <c>2247</c>

          <c>654</c>

          <c>89</c>

          <c>11</c>

          <c>2273</c>

          <c>2278</c>

          <c>82</c>

          <c>97</c>

          <c>11</c>

          <c>2311</c>

          <c>2315</c>

          <c>428</c>

          <c>97</c>

          <c>11</c>

          <c>2347</c>

          <c>2339</c>

          <c>442</c>

          <c>97</c>

          <c>11</c>

          <c>2371</c>

          <c>2367</c>

          <c>283</c>

          <c>97</c>

          <c>11</c>

          <c>2399</c>

          <c>2392</c>

          <c>538</c>

          <c>97</c>

          <c>11</c>

          <c>2423</c>

          <c>2416</c>

          <c>189</c>

          <c>97</c>

          <c>11</c>

          <c>2447</c>

          <c>2447</c>

          <c>438</c>

          <c>97</c>

          <c>11</c>

          <c>2477</c>

          <c>2473</c>

          <c>912</c>

          <c>97</c>

          <c>11</c>

          <c>2503</c>

          <c>2502</c>

          <c>1</c>

          <c>97</c>

          <c>11</c>

          <c>2531</c>

          <c>2528</c>

          <c>167</c>

          <c>97</c>

          <c>11</c>

          <c>2557</c>

          <c>2565</c>

          <c>272</c>

          <c>97</c>

          <c>11</c>

          <c>2593</c>

          <c>2601</c>

          <c>209</c>

          <c>101</c>

          <c>11</c>

          <c>2633</c>

          <c>2640</c>

          <c>927</c>

          <c>101</c>

          <c>11</c>

          <c>2671</c>

          <c>2668</c>

          <c>386</c>

          <c>101</c>

          <c>11</c>

          <c>2699</c>

          <c>2701</c>

          <c>653</c>

          <c>101</c>

          <c>11</c>

          <c>2731</c>

          <c>2737</c>

          <c>669</c>

          <c>101</c>

          <c>11</c>

          <c>2767</c>

          <c>2772</c>

          <c>431</c>

          <c>101</c>

          <c>11</c>

          <c>2801</c>

          <c>2802</c>

          <c>793</c>

          <c>103</c>

          <c>11</c>

          <c>2833</c>

          <c>2831</c>

          <c>588</c>

          <c>103</c>

          <c>11</c>

          <c>2861</c>

          <c>2875</c>

          <c>777</c>

          <c>107</c>

          <c>11</c>

          <c>2909</c>

          <c>2906</c>

          <c>939</c>

          <c>107</c>

          <c>11</c>

          <c>2939</c>

          <c>2938</c>

          <c>864</c>

          <c>107</c>

          <c>11</c>

          <c>2971</c>

          <c>2979</c>

          <c>627</c>

          <c>107</c>

          <c>11</c>

          <c>3011</c>

          <c>3015</c>

          <c>265</c>

          <c>109</c>

          <c>11</c>

          <c>3049</c>

          <c>3056</c>

          <c>976</c>

          <c>109</c>

          <c>11</c>

          <c>3089</c>

          <c>3101</c>

          <c>988</c>

          <c>113</c>

          <c>11</c>

          <c>3137</c>

          <c>3151</c>

          <c>507</c>

          <c>113</c>

          <c>11</c>

          <c>3187</c>

          <c>3186</c>

          <c>640</c>

          <c>113</c>

          <c>11</c>

          <c>3221</c>

          <c>3224</c>

          <c>15</c>

          <c>113</c>

          <c>11</c>

          <c>3259</c>

          <c>3265</c>

          <c>667</c>

          <c>113</c>

          <c>11</c>

          <c>3299</c>

          <c>3299</c>

          <c>24</c>

          <c>127</c>

          <c>11</c>

          <c>3347</c>

          <c>3344</c>

          <c>877</c>

          <c>127</c>

          <c>11</c>

          <c>3391</c>

          <c>3387</c>

          <c>240</c>

          <c>127</c>

          <c>11</c>

          <c>3433</c>

          <c>3423</c>

          <c>720</c>

          <c>127</c>

          <c>11</c>

          <c>3469</c>

          <c>3466</c>

          <c>93</c>

          <c>127</c>

          <c>11</c>

          <c>3511</c>

          <c>3502</c>

          <c>919</c>

          <c>127</c>

          <c>11</c>

          <c>3547</c>

          <c>3539</c>

          <c>635</c>

          <c>127</c>

          <c>11</c>

          <c>3583</c>

          <c>3579</c>

          <c>174</c>

          <c>127</c>

          <c>11</c>

          <c>3623</c>

          <c>3616</c>

          <c>647</c>

          <c>127</c>

          <c>11</c>

          <c>3659</c>

          <c>3658</c>

          <c>820</c>

          <c>127</c>

          <c>11</c>

          <c>3701</c>

          <c>3697</c>

          <c>56</c>

          <c>127</c>

          <c>11</c>

          <c>3739</c>

          <c>3751</c>

          <c>485</c>

          <c>127</c>

          <c>11</c>

          <c>3793</c>

          <c>3792</c>

          <c>210</c>

          <c>127</c>

          <c>11</c>

          <c>3833</c>

          <c>3840</c>

          <c>124</c>

          <c>127</c>

          <c>11</c>

          <c>3881</c>

          <c>3883</c>

          <c>546</c>

          <c>127</c>

          <c>11</c>

          <c>3923</c>

          <c>3924</c>

          <c>954</c>

          <c>131</c>

          <c>11</c>

          <c>3967</c>

          <c>3970</c>

          <c>262</c>

          <c>131</c>

          <c>11</c>

          <c>4013</c>

          <c>4015</c>

          <c>927</c>

          <c>131</c>

          <c>11</c>

          <c>4057</c>

          <c>4069</c>

          <c>957</c>

          <c>131</c>

          <c>11</c>

          <c>4111</c>

          <c>4112</c>

          <c>726</c>

          <c>137</c>

          <c>11</c>

          <c>4159</c>

          <c>4165</c>

          <c>583</c>

          <c>137</c>

          <c>11</c>

          <c>4211</c>

          <c>4207</c>

          <c>782</c>

          <c>137</c>

          <c>11</c>

          <c>4253</c>

          <c>4252</c>

          <c>37</c>

          <c>137</c>

          <c>11</c>

          <c>4297</c>

          <c>4318</c>

          <c>758</c>

          <c>137</c>

          <c>11</c>

          <c>4363</c>

          <c>4365</c>

          <c>777</c>

          <c>137</c>

          <c>11</c>

          <c>4409</c>

          <c>4418</c>

          <c>104</c>

          <c>139</c>

          <c>11</c>

          <c>4463</c>

          <c>4468</c>

          <c>476</c>

          <c>139</c>

          <c>11</c>

          <c>4513</c>

          <c>4513</c>

          <c>113</c>

          <c>149</c>

          <c>11</c>

          <c>4567</c>

          <c>4567</c>

          <c>313</c>

          <c>149</c>

          <c>11</c>

          <c>4621</c>

          <c>4626</c>

          <c>102</c>

          <c>149</c>

          <c>11</c>

          <c>4679</c>

          <c>4681</c>

          <c>501</c>

          <c>149</c>

          <c>11</c>

          <c>4733</c>

          <c>4731</c>

          <c>332</c>

          <c>149</c>

          <c>11</c>

          <c>4783</c>

          <c>4780</c>

          <c>786</c>

          <c>149</c>

          <c>11</c>

          <c>4831</c>

          <c>4838</c>

          <c>99</c>

          <c>149</c>

          <c>11</c>

          <c>4889</c>

          <c>4901</c>

          <c>658</c>

          <c>149</c>

          <c>11</c>

          <c>4951</c>

          <c>4954</c>

          <c>794</c>

          <c>149</c>

          <c>11</c>

          <c>5003</c>

          <c>5008</c>

          <c>37</c>

          <c>151</c>

          <c>11</c>

          <c>5059</c>

          <c>5063</c>

          <c>471</c>

          <c>151</c>

          <c>11</c>

          <c>5113</c>

          <c>5116</c>

          <c>94</c>

          <c>157</c>

          <c>11</c>

          <c>5171</c>

          <c>5172</c>

          <c>873</c>

          <c>157</c>

          <c>11</c>

          <c>5227</c>

          <c>5225</c>

          <c>918</c>

          <c>157</c>

          <c>11</c>

          <c>5279</c>

          <c>5279</c>

          <c>945</c>

          <c>157</c>

          <c>11</c>

          <c>5333</c>

          <c>5334</c>

          <c>211</c>

          <c>157</c>

          <c>11</c>

          <c>5387</c>

          <c>5391</c>

          <c>341</c>

          <c>157</c>

          <c>11</c>

          <c>5443</c>

          <c>5449</c>

          <c>11</c>

          <c>163</c>

          <c>11</c>

          <c>5507</c>

          <c>5506</c>

          <c>578</c>

          <c>163</c>

          <c>11</c>

          <c>5563</c>

          <c>5566</c>

          <c>494</c>

          <c>163</c>

          <c>11</c>

          <c>5623</c>

          <c>5637</c>

          <c>694</c>

          <c>163</c>

          <c>11</c>

          <c>5693</c>

          <c>5694</c>

          <c>252</c>

          <c>163</c>

          <c>11</c>

          <c>5749</c>

          <c>5763</c>

          <c>451</c>

          <c>167</c>

          <c>11</c>

          <c>5821</c>

          <c>5823</c>

          <c>83</c>

          <c>167</c>

          <c>11</c>

          <c>5881</c>

          <c>5896</c>

          <c>689</c>

          <c>167</c>

          <c>11</c>

          <c>5953</c>

          <c>5975</c>

          <c>488</c>

          <c>173</c>

          <c>11</c>

          <c>6037</c>

          <c>6039</c>

          <c>214</c>

          <c>173</c>

          <c>11</c>

          <c>6101</c>

          <c>6102</c>

          <c>17</c>

          <c>173</c>

          <c>11</c>

          <c>6163</c>

          <c>6169</c>

          <c>469</c>

          <c>173</c>

          <c>11</c>

          <c>6229</c>

          <c>6233</c>

          <c>263</c>

          <c>179</c>

          <c>11</c>

          <c>6299</c>

          <c>6296</c>

          <c>309</c>

          <c>179</c>

          <c>11</c>

          <c>6361</c>

          <c>6363</c>

          <c>984</c>

          <c>179</c>

          <c>11</c>

          <c>6427</c>

          <c>6427</c>

          <c>123</c>

          <c>179</c>

          <c>11</c>

          <c>6491</c>

          <c>6518</c>

          <c>360</c>

          <c>179</c>

          <c>11</c>

          <c>6581</c>

          <c>6589</c>

          <c>863</c>

          <c>181</c>

          <c>11</c>

          <c>6653</c>

          <c>6655</c>

          <c>122</c>

          <c>181</c>

          <c>11</c>

          <c>6719</c>

          <c>6730</c>

          <c>522</c>

          <c>191</c>

          <c>11</c>

          <c>6803</c>

          <c>6799</c>

          <c>539</c>

          <c>191</c>

          <c>11</c>

          <c>6871</c>

          <c>6878</c>

          <c>181</c>

          <c>191</c>

          <c>11</c>

          <c>6949</c>

          <c>6956</c>

          <c>64</c>

          <c>191</c>

          <c>11</c>

          <c>7027</c>

          <c>7033</c>

          <c>387</c>

          <c>191</c>

          <c>11</c>

          <c>7103</c>

          <c>7108</c>

          <c>967</c>

          <c>191</c>

          <c>11</c>

          <c>7177</c>

          <c>7185</c>

          <c>843</c>

          <c>191</c>

          <c>11</c>

          <c>7253</c>

          <c>7281</c>

          <c>999</c>

          <c>193</c>

          <c>11</c>

          <c>7351</c>

          <c>7360</c>

          <c>76</c>

          <c>197</c>

          <c>11</c>

          <c>7433</c>

          <c>7445</c>

          <c>142</c>

          <c>197</c>

          <c>11</c>

          <c>7517</c>

          <c>7520</c>

          <c>599</c>

          <c>197</c>

          <c>11</c>

          <c>7591</c>

          <c>7596</c>

          <c>576</c>

          <c>199</c>

          <c>11</c>

          <c>7669</c>

          <c>7675</c>

          <c>176</c>

          <c>211</c>

          <c>11</c>

          <c>7759</c>

          <c>7770</c>

          <c>392</c>

          <c>211</c>

          <c>11</c>

          <c>7853</c>

          <c>7855</c>

          <c>332</c>

          <c>211</c>

          <c>11</c>

          <c>7937</c>

          <c>7935</c>

          <c>291</c>

          <c>211</c>

          <c>11</c>

          <c>8017</c>

          <c>8030</c>

          <c>913</c>

          <c>211</c>

          <c>11</c>

          <c>8111</c>

          <c>8111</c>

          <c>608</c>

          <c>211</c>

          <c>11</c>

          <c>8191</c>

          <c>8194</c>

          <c>212</c>

          <c>211</c>

          <c>11</c>

          <c>8273</c>

          <c>8290</c>

          <c>696</c>

          <c>211</c>

          <c>11</c>

          <c>8369</c>

          <c>8377</c>

          <c>931</c>

          <c>223</c>

          <c>11</c>

          <c>8467</c>

          <c>8474</c>

          <c>326</c>

          <c>223</c>

          <c>11</c>

          <c>8563</c>

          <c>8559</c>

          <c>228</c>

          <c>223</c>

          <c>11</c>

          <c>8647</c>

          <c>8654</c>

          <c>706</c>

          <c>223</c>

          <c>11</c>

          <c>8741</c>

          <c>8744</c>

          <c>144</c>

          <c>223</c>

          <c>11</c>

          <c>8831</c>

          <c>8837</c>

          <c>83</c>

          <c>223</c>

          <c>11</c>

          <c>8923</c>

          <c>8928</c>

          <c>743</c>

          <c>223</c>

          <c>11</c>

          <c>9013</c>

          <c>9019</c>

          <c>187</c>

          <c>223</c>

          <c>11</c>

          <c>9103</c>

          <c>9111</c>

          <c>654</c>

          <c>227</c>

          <c>11</c>

          <c>9199</c>

          <c>9206</c>

          <c>359</c>

          <c>227</c>

          <c>11</c>

          <c>9293</c>

          <c>9303</c>

          <c>493</c>

          <c>229</c>

          <c>11</c>

          <c>9391</c>

          <c>9400</c>

          <c>369</c>

          <c>233</c>

          <c>11</c>

          <c>9491</c>

          <c>9497</c>

          <c>981</c>

          <c>233</c>

          <c>11</c>

          <c>9587</c>

          <c>9601</c>

          <c>276</c>

          <c>239</c>

          <c>11</c>

          <c>9697</c>

          <c>9708</c>

          <c>647</c>

          <c>239</c>

          <c>11</c>

          <c>9803</c>

          <c>9813</c>

          <c>389</c>

          <c>239</c>

          <c>11</c>

          <c>9907</c>

          <c>9916</c>

          <c>80</c>

          <c>239</c>

          <c>11</c>

          <c>10009</c>

          <c>10017</c>

          <c>396</c>

          <c>241</c>

          <c>11</c>

          <c>10111</c>

          <c>10120</c>

          <c>580</c>

          <c>251</c>

          <c>11</c>

          <c>10223</c>

          <c>10241</c>

          <c>873</c>

          <c>251</c>

          <c>11</c>

          <c>10343</c>

          <c>10351</c>

          <c>15</c>

          <c>251</c>

          <c>11</c>

          <c>10453</c>

          <c>10458</c>

          <c>976</c>

          <c>251</c>

          <c>11</c>

          <c>10559</c>

          <c>10567</c>

          <c>584</c>

          <c>251</c>

          <c>11</c>

          <c>10667</c>

          <c>10676</c>

          <c>267</c>

          <c>257</c>

          <c>11</c>

          <c>10781</c>

          <c>10787</c>

          <c>876</c>

          <c>257</c>

          <c>11</c>

          <c>10891</c>

          <c>10899</c>

          <c>642</c>

          <c>257</c>

          <c>12</c>

          <c>11003</c>

          <c>11015</c>

          <c>794</c>

          <c>257</c>

          <c>12</c>

          <c>11119</c>

          <c>11130</c>

          <c>78</c>

          <c>263</c>

          <c>12</c>

          <c>11239</c>

          <c>11245</c>

          <c>736</c>

          <c>263</c>

          <c>12</c>

          <c>11353</c>

          <c>11358</c>

          <c>882</c>

          <c>269</c>

          <c>12</c>

          <c>11471</c>

          <c>11475</c>

          <c>251</c>

          <c>269</c>

          <c>12</c>

          <c>11587</c>

          <c>11590</c>

          <c>434</c>

          <c>269</c>

          <c>12</c>

          <c>11701</c>

          <c>11711</c>

          <c>204</c>

          <c>269</c>

          <c>12</c>

          <c>11821</c>

          <c>11829</c>

          <c>256</c>

          <c>271</c>

          <c>12</c>

          <c>11941</c>

          <c>11956</c>

          <c>106</c>

          <c>277</c>

          <c>12</c>

          <c>12073</c>

          <c>12087</c>

          <c>375</c>

          <c>277</c>

          <c>12</c>

          <c>12203</c>

          <c>12208</c>

          <c>148</c>

          <c>277</c>

          <c>12</c>

          <c>12323</c>

          <c>12333</c>

          <c>496</c>

          <c>281</c>

          <c>12</c>

          <c>12451</c>

          <c>12460</c>

          <c>88</c>

          <c>281</c>

          <c>12</c>

          <c>12577</c>

          <c>12593</c>

          <c>826</c>

          <c>293</c>

          <c>12</c>

          <c>12721</c>

          <c>12726</c>

          <c>71</c>

          <c>293</c>

          <c>12</c>

          <c>12853</c>

          <c>12857</c>

          <c>925</c>

          <c>293</c>

          <c>12</c>

          <c>12983</c>

          <c>13002</c>

          <c>760</c>

          <c>293</c>

          <c>12</c>

          <c>13127</c>

          <c>13143</c>

          <c>130</c>

          <c>293</c>

          <c>12</c>

          <c>13267</c>

          <c>13284</c>

          <c>641</c>

          <c>307</c>

          <c>12</c>

          <c>13421</c>

          <c>13417</c>

          <c>400</c>

          <c>307</c>

          <c>12</c>

          <c>13553</c>

          <c>13558</c>

          <c>480</c>

          <c>307</c>

          <c>12</c>

          <c>13693</c>

          <c>13695</c>

          <c>76</c>

          <c>307</c>

          <c>12</c>

          <c>13829</c>

          <c>13833</c>

          <c>665</c>

          <c>307</c>

          <c>12</c>

          <c>13967</c>

          <c>13974</c>

          <c>910</c>

          <c>307</c>

          <c>12</c>

          <c>14107</c>

          <c>14115</c>

          <c>467</c>

          <c>311</c>

          <c>12</c>

          <c>14251</c>

          <c>14272</c>

          <c>964</c>

          <c>311</c>

          <c>12</c>

          <c>14407</c>

          <c>14415</c>

          <c>625</c>

          <c>313</c>

          <c>12</c>

          <c>14551</c>

          <c>14560</c>

          <c>362</c>

          <c>317</c>

          <c>12</c>

          <c>14699</c>

          <c>14713</c>

          <c>759</c>

          <c>317</c>

          <c>12</c>

          <c>14851</c>

          <c>14862</c>

          <c>728</c>

          <c>331</c>

          <c>12</c>

          <c>15013</c>

          <c>15011</c>

          <c>343</c>

          <c>331</c>

          <c>12</c>

          <c>15161</c>

          <c>15170</c>

          <c>113</c>

          <c>331</c>

          <c>12</c>

          <c>15319</c>

          <c>15325</c>

          <c>137</c>

          <c>331</c>

          <c>12</c>

          <c>15473</c>

          <c>15496</c>

          <c>308</c>

          <c>331</c>

          <c>12</c>

          <c>15643</c>

          <c>15651</c>

          <c>800</c>

          <c>337</c>

          <c>12</c>

          <c>15803</c>

          <c>15808</c>

          <c>177</c>

          <c>337</c>

          <c>12</c>

          <c>15959</c>

          <c>15977</c>

          <c>961</c>

          <c>337</c>

          <c>12</c>

          <c>16127</c>

          <c>16161</c>

          <c>958</c>

          <c>347</c>

          <c>12</c>

          <c>16319</c>

          <c>16336</c>

          <c>72</c>

          <c>347</c>

          <c>12</c>

          <c>16493</c>

          <c>16505</c>

          <c>732</c>

          <c>347</c>

          <c>12</c>

          <c>16661</c>

          <c>16674</c>

          <c>145</c>

          <c>349</c>

          <c>12</c>

          <c>16831</c>

          <c>16851</c>

          <c>577</c>

          <c>353</c>

          <c>12</c>

          <c>17011</c>

          <c>17024</c>

          <c>305</c>

          <c>353</c>

          <c>12</c>

          <c>17183</c>

          <c>17195</c>

          <c>50</c>

          <c>359</c>

          <c>12</c>

          <c>17359</c>

          <c>17376</c>

          <c>351</c>

          <c>359</c>

          <c>12</c>

          <c>17539</c>

          <c>17559</c>

          <c>175</c>

          <c>367</c>

          <c>12</c>

          <c>17729</c>

          <c>17742</c>

          <c>727</c>

          <c>367</c>

          <c>12</c>

          <c>17911</c>

          <c>17929</c>

          <c>902</c>

          <c>367</c>

          <c>12</c>

          <c>18097</c>

          <c>18116</c>

          <c>409</c>

          <c>373</c>

          <c>12</c>

          <c>18289</c>

          <c>18309</c>

          <c>776</c>

          <c>373</c>

          <c>12</c>

          <c>18481</c>

          <c>18503</c>

          <c>586</c>

          <c>379</c>

          <c>12</c>

          <c>18679</c>

          <c>18694</c>

          <c>451</c>

          <c>379</c>

          <c>12</c>

          <c>18869</c>

          <c>18909</c>

          <c>287</c>

          <c>383</c>

          <c>12</c>

          <c>19087</c>

          <c>19126</c>

          <c>246</c>

          <c>389</c>

          <c>12</c>

          <c>19309</c>

          <c>19325</c>

          <c>222</c>

          <c>389</c>

          <c>12</c>

          <c>19507</c>

          <c>19539</c>

          <c>563</c>

          <c>397</c>

          <c>12</c>

          <c>19727</c>

          <c>19740</c>

          <c>839</c>

          <c>397</c>

          <c>12</c>

          <c>19927</c>

          <c>19939</c>

          <c>897</c>

          <c>401</c>

          <c>12</c>

          <c>20129</c>

          <c>20152</c>

          <c>409</c>

          <c>401</c>

          <c>12</c>

          <c>20341</c>

          <c>20355</c>

          <c>618</c>

          <c>409</c>

          <c>12</c>

          <c>20551</c>

          <c>20564</c>

          <c>439</c>

          <c>409</c>

          <c>12</c>

          <c>20759</c>

          <c>20778</c>

          <c>95</c>

          <c>419</c>

          <c>13</c>

          <c>20983</c>

          <c>20988</c>

          <c>448</c>

          <c>419</c>

          <c>13</c>

          <c>21191</c>

          <c>21199</c>

          <c>133</c>

          <c>419</c>

          <c>13</c>

          <c>21401</c>

          <c>21412</c>

          <c>938</c>

          <c>419</c>

          <c>13</c>

          <c>21613</c>

          <c>21629</c>

          <c>423</c>

          <c>431</c>

          <c>13</c>

          <c>21841</c>

          <c>21852</c>

          <c>90</c>

          <c>431</c>

          <c>13</c>

          <c>22063</c>

          <c>22073</c>

          <c>640</c>

          <c>431</c>

          <c>13</c>

          <c>22283</c>

          <c>22301</c>

          <c>922</c>

          <c>433</c>

          <c>13</c>

          <c>22511</c>

          <c>22536</c>

          <c>250</c>

          <c>439</c>

          <c>13</c>

          <c>22751</c>

          <c>22779</c>

          <c>367</c>

          <c>439</c>

          <c>13</c>

          <c>22993</c>

          <c>23010</c>

          <c>447</c>

          <c>443</c>

          <c>13</c>

          <c>23227</c>

          <c>23252</c>

          <c>559</c>

          <c>449</c>

          <c>13</c>

          <c>23473</c>

          <c>23491</c>

          <c>121</c>

          <c>457</c>

          <c>13</c>

          <c>23719</c>

          <c>23730</c>

          <c>623</c>

          <c>457</c>

          <c>13</c>

          <c>23957</c>

          <c>23971</c>

          <c>450</c>

          <c>457</c>

          <c>13</c>

          <c>24197</c>

          <c>24215</c>

          <c>253</c>

          <c>461</c>

          <c>13</c>

          <c>24443</c>

          <c>24476</c>

          <c>106</c>

          <c>467</c>

          <c>13</c>

          <c>24709</c>

          <c>24721</c>

          <c>863</c>

          <c>467</c>

          <c>13</c>

          <c>24953</c>

          <c>24976</c>

          <c>148</c>

          <c>479</c>

          <c>13</c>

          <c>25219</c>

          <c>25230</c>

          <c>427</c>

          <c>479</c>

          <c>13</c>

          <c>25471</c>

          <c>25493</c>

          <c>138</c>

          <c>479</c>

          <c>13</c>

          <c>25733</c>

          <c>25756</c>

          <c>794</c>

          <c>487</c>

          <c>13</c>

          <c>26003</c>

          <c>26022</c>

          <c>247</c>

          <c>487</c>

          <c>13</c>

          <c>26267</c>

          <c>26291</c>

          <c>562</c>

          <c>491</c>

          <c>13</c>

          <c>26539</c>

          <c>26566</c>

          <c>53</c>

          <c>499</c>

          <c>13</c>

          <c>26821</c>

          <c>26838</c>

          <c>135</c>

          <c>499</c>

          <c>13</c>

          <c>27091</c>

          <c>27111</c>

          <c>21</c>

          <c>503</c>

          <c>13</c>

          <c>27367</c>

          <c>27392</c>

          <c>201</c>

          <c>509</c>

          <c>13</c>

          <c>27653</c>

          <c>27682</c>

          <c>169</c>

          <c>521</c>

          <c>13</c>

          <c>27953</c>

          <c>27959</c>

          <c>70</c>

          <c>521</c>

          <c>13</c>

          <c>28229</c>

          <c>28248</c>

          <c>386</c>

          <c>521</c>

          <c>13</c>

          <c>28517</c>

          <c>28548</c>

          <c>226</c>

          <c>523</c>

          <c>13</c>

          <c>28817</c>

          <c>28845</c>

          <c>3</c>

          <c>541</c>

          <c>13</c>

          <c>29131</c>

          <c>29138</c>

          <c>769</c>

          <c>541</c>

          <c>13</c>

          <c>29423</c>

          <c>29434</c>

          <c>590</c>

          <c>541</c>

          <c>13</c>

          <c>29717</c>

          <c>29731</c>

          <c>672</c>

          <c>541</c>

          <c>13</c>

          <c>30013</c>

          <c>30037</c>

          <c>713</c>

          <c>547</c>

          <c>13</c>

          <c>30323</c>

          <c>30346</c>

          <c>967</c>

          <c>547</c>

          <c>13</c>

          <c>30631</c>

          <c>30654</c>

          <c>368</c>

          <c>557</c>

          <c>14</c>

          <c>30949</c>

          <c>30974</c>

          <c>348</c>

          <c>557</c>

          <c>14</c>

          <c>31267</c>

          <c>31285</c>

          <c>119</c>

          <c>563</c>

          <c>14</c>

          <c>31583</c>

          <c>31605</c>

          <c>503</c>

          <c>569</c>

          <c>14</c>

          <c>31907</c>

          <c>31948</c>

          <c>181</c>

          <c>571</c>

          <c>14</c>

          <c>32251</c>

          <c>32272</c>

          <c>394</c>

          <c>577</c>

          <c>14</c>

          <c>32579</c>

          <c>32601</c>

          <c>189</c>

          <c>587</c>

          <c>14</c>

          <c>32917</c>

          <c>32932</c>

          <c>210</c>

          <c>587</c>

          <c>14</c>

          <c>33247</c>

          <c>33282</c>

          <c>62</c>

          <c>593</c>

          <c>14</c>

          <c>33601</c>

          <c>33623</c>

          <c>273</c>

          <c>593</c>

          <c>14</c>

          <c>33941</c>

          <c>33961</c>

          <c>554</c>

          <c>599</c>

          <c>14</c>

          <c>34283</c>

          <c>34302</c>

          <c>936</c>

          <c>607</c>

          <c>14</c>

          <c>34631</c>

          <c>34654</c>

          <c>483</c>

          <c>607</c>

          <c>14</c>

          <c>34981</c>

          <c>35031</c>

          <c>397</c>

          <c>613</c>

          <c>14</c>

          <c>35363</c>

          <c>35395</c>

          <c>241</c>

          <c>619</c>

          <c>14</c>

          <c>35731</c>

          <c>35750</c>

          <c>500</c>

          <c>631</c>

          <c>14</c>

          <c>36097</c>

          <c>36112</c>

          <c>12</c>

          <c>631</c>

          <c>14</c>

          <c>36457</c>

          <c>36479</c>

          <c>958</c>

          <c>641</c>

          <c>14</c>

          <c>36833</c>

          <c>36849</c>

          <c>524</c>

          <c>641</c>

          <c>14</c>

          <c>37201</c>

          <c>37227</c>

          <c>8</c>

          <c>643</c>

          <c>14</c>

          <c>37579</c>

          <c>37606</c>

          <c>100</c>

          <c>653</c>

          <c>14</c>

          <c>37967</c>

          <c>37992</c>

          <c>339</c>

          <c>653</c>

          <c>14</c>

          <c>38351</c>

          <c>38385</c>

          <c>804</c>

          <c>659</c>

          <c>14</c>

          <c>38749</c>

          <c>38787</c>

          <c>510</c>

          <c>673</c>

          <c>14</c>

          <c>39163</c>

          <c>39176</c>

          <c>18</c>

          <c>673</c>

          <c>14</c>

          <c>39551</c>

          <c>39576</c>

          <c>412</c>

          <c>677</c>

          <c>14</c>

          <c>39953</c>

          <c>39980</c>

          <c>394</c>

          <c>683</c>

          <c>14</c>

          <c>40361</c>

          <c>40398</c>

          <c>830</c>

          <c>691</c>

          <c>15</c>

          <c>40787</c>

          <c>40816</c>

          <c>535</c>

          <c>701</c>

          <c>15</c>

          <c>41213</c>

          <c>41226</c>

          <c>199</c>

          <c>701</c>

          <c>15</c>

          <c>41621</c>

          <c>41641</c>

          <c>27</c>

          <c>709</c>

          <c>15</c>

          <c>42043</c>

          <c>42067</c>

          <c>298</c>

          <c>709</c>

          <c>15</c>

          <c>42467</c>

          <c>42490</c>

          <c>368</c>

          <c>719</c>

          <c>15</c>

          <c>42899</c>

          <c>42916</c>

          <c>755</c>

          <c>727</c>

          <c>15</c>

          <c>43331</c>

          <c>43388</c>

          <c>379</c>

          <c>727</c>

          <c>15</c>

          <c>43801</c>

          <c>43840</c>

          <c>73</c>

          <c>733</c>

          <c>15</c>

          <c>44257</c>

          <c>44279</c>

          <c>387</c>

          <c>739</c>

          <c>15</c>

          <c>44701</c>

          <c>44729</c>

          <c>457</c>

          <c>751</c>

          <c>15</c>

          <c>45161</c>

          <c>45183</c>

          <c>761</c>

          <c>751</c>

          <c>15</c>

          <c>45613</c>

          <c>45638</c>

          <c>855</c>

          <c>757</c>

          <c>15</c>

          <c>46073</c>

          <c>46104</c>

          <c>370</c>

          <c>769</c>

          <c>15</c>

          <c>46549</c>

          <c>46574</c>

          <c>261</c>

          <c>769</c>

          <c>15</c>

          <c>47017</c>

          <c>47047</c>

          <c>299</c>

          <c>787</c>

          <c>15</c>

          <c>47507</c>

          <c>47523</c>

          <c>920</c>

          <c>787</c>

          <c>15</c>

          <c>47981</c>

          <c>48007</c>

          <c>269</c>

          <c>787</c>

          <c>15</c>

          <c>48463</c>

          <c>48489</c>

          <c>862</c>

          <c>797</c>

          <c>15</c>

          <c>48953</c>

          <c>48976</c>

          <c>349</c>

          <c>809</c>

          <c>15</c>

          <c>49451</c>

          <c>49470</c>

          <c>103</c>

          <c>809</c>

          <c>15</c>

          <c>49943</c>

          <c>49978</c>

          <c>115</c>

          <c>821</c>

          <c>15</c>

          <c>50461</c>

          <c>50511</c>

          <c>93</c>

          <c>821</c>

          <c>16</c>

          <c>50993</c>

          <c>51017</c>

          <c>982</c>

          <c>827</c>

          <c>16</c>

          <c>51503</c>

          <c>51530</c>

          <c>432</c>

          <c>839</c>

          <c>16</c>

          <c>52027</c>

          <c>52062</c>

          <c>340</c>

          <c>853</c>

          <c>16</c>

          <c>52571</c>

          <c>52586</c>

          <c>173</c>

          <c>853</c>

          <c>16</c>

          <c>53093</c>

          <c>53114</c>

          <c>421</c>

          <c>857</c>

          <c>16</c>

          <c>53623</c>

          <c>53650</c>

          <c>330</c>

          <c>863</c>

          <c>16</c>

          <c>54163</c>

          <c>54188</c>

          <c>624</c>

          <c>877</c>

          <c>16</c>

          <c>54713</c>

          <c>54735</c>

          <c>233</c>

          <c>877</c>

          <c>16</c>

          <c>55259</c>

          <c>55289</c>

          <c>362</c>

          <c>883</c>

          <c>16</c>

          <c>55817</c>

          <c>55843</c>

          <c>963</c>

          <c>907</c>

          <c>16</c>

          <c>56393</c>

          <c>56403</c>

          <c>471</c>

          <c>907</c>

          <c>16</c>

          <c>56951</c>
        </texttable>
      </section>

      <section anchor="gf256"
               title="Operating with Octets, Symbols, and Matrices">
        <section title="General">
          <t>The remainder of this section describes the arithmetic
          operations that are used to generate encoding symbols from source
          symbols and to generate source symbols from encoding symbols.
          Mathematically, octets can be thought of as elements of a finite
          field, i.e., the finite field GF(256) with 256 elements, and thus
          the addition and multiplication operations and identity elements and
          inverses over both operations are defined. Matrix operations and
          symbol operations are defined based on the arithmetic operations on
          octets. This allows a full implementation of these arithmetic
          operations without having to understand the underlying mathematics
          of finite fields.</t>
        </section>

        <section title="Arithmetic Operations on Octets">
          <t>Octets are mapped to non-negative integers in the range 0 through
          255 in the usual way: A single octet of data from a symbol,
          B[7],B[6],B[5],B[4],B[3],B[2],B[1],B[0], where B[7] is the highest
          order bit and B[0] is the lowest order bit, is mapped to the integer
          i=B[7]*128+B[6]*64+B[5]*32+B[4]*16+B[3]*8+B[2]*4+B[1]*2+B[0].</t>

          <t>The addition of two octets u and v is defined as the exclusive-or operation,
          i.e.,</t>

          <t><list style="empty">
              <t>u + v = u ^ v.</t>
            </list>Subtraction is defined in the same way, so we also have</t>

          <t><list style="empty">
              <t>u - v = u ^ v.</t>
            </list></t>

          <t>The zero element (additive identity) is the octet represented by
          the integer 0. The additive inverse of u is simply u, i.e., <list
              style="empty">
              <t>u + u = 0.</t>
            </list>The multiplication of two octets is defined with the help
          of two tables OCT_EXP and OCT_LOG, which are given in <xref
          target="sec_oct_exp"></xref> and <xref target="sec_oct_log"></xref>,
          respectively. The table OCT_LOG maps octets (other than the zero
          element) to non-negative integers, and OCT_EXP maps non-negative
          integers to octets. For two octets u and v, we define</t>

          <t><list style="empty">
              <t>u * v = <list style="empty">
                  <t>0, if either u or v are 0,</t>

                  <t>OCT_EXP[OCT_LOG[u] + OCT_LOG[v]] otherwise.</t>
                </list></t>
            </list>Note that the '+' on the right-hand side of the
          above is the usual integer addition, since its arguments are
          ordinary integers.</t>

          <t>The division u / v of two octets u and v, and where v != 0, is
          defined as follows:</t>

          <t><list style="empty">
              <t>u / v = <list style="empty">
                  <t>0, if u == 0,</t>

                  <t>OCT_EXP[OCT_LOG[u] - OCT_LOG[v] + 255] otherwise.</t>
                </list></t>
            </list></t>

          <t>The one element (multiplicative identity) is the octet
          represented by the integer 1. For an octet u that is not the zero
          element, i.e., the multiplicative inverse of u is <list
              style="empty">
              <t>OCT_EXP[255 - OCT_LOG[u]].</t>
            </list>The octet denoted by alpha is the octet with the integer
          representation 2. If i is a non-negative integer 0 &lt;= i &lt; 256,
          we have<list style="empty">
              <t>alpha^^i = OCT_EXP[i].</t>
            </list></t>
        </section>

        <section anchor="sec_oct_exp" title="The Table OCT_EXP" toc="default">
          <t>The table OCT_EXP contains 510 octets. The indexing starts at 0
          and ranges to 509, and the entries are the octets with the
          following positive integer representation:</t>

          <t>1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38,
          76, 152, 45, 90, 180, 117, 234, 201, 143, 3, 6, 12, 24, 48, 96, 192,
          157, 39, 78, 156, 37, 74, 148, 53, 106, 212, 181, 119, 238, 193,
          159, 35, 70, 140, 5, 10, 20, 40, 80, 160, 93, 186, 105, 210, 185,
          111, 222, 161, 95, 190, 97, 194, 153, 47, 94, 188, 101, 202, 137,
          15, 30, 60, 120, 240, 253, 231, 211, 187, 107, 214, 177, 127, 254,
          225, 223, 163, 91, 182, 113, 226, 217, 175, 67, 134, 17, 34, 68,
          136, 13, 26, 52, 104, 208, 189, 103, 206, 129, 31, 62, 124, 248,
          237, 199, 147, 59, 118, 236, 197, 151, 51, 102, 204, 133, 23, 46,
          92, 184, 109, 218, 169, 79, 158, 33, 66, 132, 21, 42, 84, 168, 77,
          154, 41, 82, 164, 85, 170, 73, 146, 57, 114, 228, 213, 183, 115,
          230, 209, 191, 99, 198, 145, 63, 126, 252, 229, 215, 179, 123, 246,
          241, 255, 227, 219, 171, 75, 150, 49, 98, 196, 149, 55, 110, 220,
          165, 87, 174, 65, 130, 25, 50, 100, 200, 141, 7, 14, 28, 56, 112,
          224, 221, 167, 83, 166, 81, 162, 89, 178, 121, 242, 249, 239, 195,
          155, 43, 86, 172, 69, 138, 9, 18, 36, 72, 144, 61, 122, 244, 245,
          247, 243, 251, 235, 203, 139, 11, 22, 44, 88, 176, 125, 250, 233,
          207, 131, 27, 54, 108, 216, 173, 71, 142, 1, 2, 4, 8, 16, 32, 64,
          128, 29, 58, 116, 232, 205, 135, 19, 38, 76, 152, 45, 90, 180, 117,
          234, 201, 143, 3, 6, 12, 24, 48, 96, 192, 157, 39, 78, 156, 37, 74,
          148, 53, 106, 212, 181, 119, 238, 193, 159, 35, 70, 140, 5, 10, 20,
          40, 80, 160, 93, 186, 105, 210, 185, 111, 222, 161, 95, 190, 97,
          194, 153, 47, 94, 188, 101, 202, 137, 15, 30, 60, 120, 240, 253,
          231, 211, 187, 107, 214, 177, 127, 254, 225, 223, 163, 91, 182, 113,
          226, 217, 175, 67, 134, 17, 34, 68, 136, 13, 26, 52, 104, 208, 189,
          103, 206, 129, 31, 62, 124, 248, 237, 199, 147, 59, 118, 236, 197,
          151, 51, 102, 204, 133, 23, 46, 92, 184, 109, 218, 169, 79, 158, 33,
          66, 132, 21, 42, 84, 168, 77, 154, 41, 82, 164, 85, 170, 73, 146,
          57, 114, 228, 213, 183, 115, 230, 209, 191, 99, 198, 145, 63, 126,
          252, 229, 215, 179, 123, 246, 241, 255, 227, 219, 171, 75, 150, 49,
          98, 196, 149, 55, 110, 220, 165, 87, 174, 65, 130, 25, 50, 100, 200,
          141, 7, 14, 28, 56, 112, 224, 221, 167, 83, 166, 81, 162, 89, 178,
          121, 242, 249, 239, 195, 155, 43, 86, 172, 69, 138, 9, 18, 36, 72,
          144, 61, 122, 244, 245, 247, 243, 251, 235, 203, 139, 11, 22, 44,
          88, 176, 125, 250, 233, 207, 131, 27, 54, 108, 216, 173, 71, 142</t>
        </section>

        <section anchor="sec_oct_log" title="The Table OCT_LOG" toc="default">
          <t>The table OCT_LOG contains 255 non-negative integers. The table
          is indexed by octets interpreted as integers. The octet
          corresponding to the zero element, which is represented by the
          integer 0, is excluded as an index, and thus indexing starts at 1
          and ranges up to 255, and the entries are the following:</t>

          <t>0, 1, 25, 2, 50, 26, 198, 3, 223, 51, 238, 27, 104, 199, 75, 4,
          100, 224, 14, 52, 141, 239, 129, 28, 193, 105, 248, 200, 8, 76, 113,
          5, 138, 101, 47, 225, 36, 15, 33, 53, 147, 142, 218, 240, 18, 130,
          69, 29, 181, 194, 125, 106, 39, 249, 185, 201, 154, 9, 120, 77, 228,
          114, 166, 6, 191, 139, 98, 102, 221, 48, 253, 226, 152, 37, 179, 16,
          145, 34, 136, 54, 208, 148, 206, 143, 150, 219, 189, 241, 210, 19,
          92, 131, 56, 70, 64, 30, 66, 182, 163, 195, 72, 126, 110, 107, 58,
          40, 84, 250, 133, 186, 61, 202, 94, 155, 159, 10, 21, 121, 43, 78,
          212, 229, 172, 115, 243, 167, 87, 7, 112, 192, 247, 140, 128, 99,
          13, 103, 74, 222, 237, 49, 197, 254, 24, 227, 165, 153, 119, 38,
          184, 180, 124, 17, 68, 146, 217, 35, 32, 137, 46, 55, 63, 209, 91,
          149, 188, 207, 205, 144, 135, 151, 178, 220, 252, 190, 97, 242, 86,
          211, 171, 20, 42, 93, 158, 132, 60, 57, 83, 71, 109, 65, 162, 31,
          45, 67, 216, 183, 123, 164, 118, 196, 23, 73, 236, 127, 12, 111,
          246, 108, 161, 59, 82, 41, 157, 85, 170, 251, 96, 134, 177, 187,
          204, 62, 90, 203, 89, 95, 176, 156, 169, 160, 81, 11, 245, 22, 235,
          122, 117, 44, 215, 79, 174, 213, 233, 230, 231, 173, 232, 116, 214,
          244, 234, 168, 80, 88, 175</t>
        </section>

        <section title="Operations on Symbols">
          <t>Operations on symbols have the same semantics as operations on
          vectors of octets of length T in this specification. Thus, if U and
          V are two symbols formed by the octets u[0], ..., u[T-1] and v[0],
          ..., v[T-1], respectively, the sum of symbols U + V is defined to be
          the component-wise sum of octets, i.e., equal to the symbol D formed
          by the octets d[0], ..., d[T-1], such that <list style="empty">
              <t>d[i] = u[i] + v[i], 0 &lt;= i &lt; T.</t>
            </list>Furthermore, if beta is an octet, the product beta*U is
          defined to be the symbol D obtained by multiplying each octet of U
          by beta, i.e., <list style="empty">
              <t>d[i] = beta*u[i], 0 &lt;= i &lt; T.</t>
            </list></t>
        </section>

        <section title="Operations on Matrices">
          <t>All matrices in this specification have entries that are octets,
          and thus matrix operations and definitions are defined in terms of
          the underlying octet arithmetic, e.g., operations on a matrix,
          matrix rank, and matrix inversion.</t>
        </section>
      </section>

      <section anchor="sec_dec_req"
               title="Requirements for a Compliant Decoder">
        <t>If a RaptorQ-compliant decoder receives a mathematically sufficient
        set of encoding symbols generated according to the encoder
        specification in <xref target="encoder"></xref> for reconstruction of
        a source block, then such a decoder SHOULD recover the entire source
        block.</t>

        <t>A RaptorQ-compliant decoder SHALL have the following recovery
        properties for source blocks with K' source symbols for all
        values of K' in <xref target="table_systematic_indices"></xref>
        of <xref target="systematic"></xref>.</t>

        <t><list style="numbers">
            <t>If the decoder receives K' encoding symbols generated
            according to the encoder specification in <xref
            target="encoder"></xref> with corresponding ESIs chosen
            independently and uniformly at random from the range of possible
            ESIs, then on average the decoder will fail to recover the entire
            source block at most 1 out of 100 times.</t>

            <t>If the decoder receives K'+1 encoding symbols generated
            according to the encoder specification in <xref
            target="encoder"></xref> with corresponding ESIs chosen
            independently and uniformly at random from the range of possible
            ESIs, then on average the decoder will fail to recover the entire
            source block at most 1 out of 10,000 times.</t>

            <t>If the decoder receives K'+2 encoding symbols generated
            according to the encoder specification in <xref
            target="encoder"></xref> with corresponding ESIs chosen
            independently and uniformly at random from the range of possible
            ESIs, then on average the decoder will fail to recover the entire
            source block at most 1 out of 1,000,000 times.</t>
          </list>Note that the Example FEC Decoder specified in <xref
        target="decoder"></xref> fulfills both requirements, i.e.,<list
            style="numbers">
            <t>it can reconstruct a source block as long as it receives a
            mathematically sufficient set of encoding symbols generated
            according to the encoder specification in <xref
            target="encoder"></xref>, and</t>

            <t>it fulfills the mandatory recovery properties from above.</t>
          </list></t>
      </section>
    </section>

    <section title="Security Considerations">
      <t>Data delivery can be subject to denial-of-service attacks by
      attackers that send corrupted packets that are accepted as legitimate
      by receivers. 
   This is particularly a concern for multicast delivery because a
   corrupted packet may be injected into the session close to the root
   of the multicast tree, in which case the corrupted packet will
   arrive at many receivers.  The use of even one corrupted packet
   containing encoding data may result in the decoding of an object
   that is completely corrupted and unusable.
 It is thus RECOMMENDED that
      source authentication and integrity checking are applied to decoded
      objects before delivering objects to an application. For example, a
      SHA-256 hash <xref target="FIPS.180-3.2008"></xref> of an object may be
      appended before transmission, and the SHA-256 hash is computed and
      checked after the object is decoded but before it is delivered to an
      application. Source authentication SHOULD be provided, for example, by
      including a digital signature verifiable by the receiver computed on top
      of the hash value. It is also RECOMMENDED that a packet authentication
      protocol such as TESLA <xref target="RFC4082"></xref> be used to detect
      and discard corrupted packets upon arrival. This method may also be used
      to provide source authentication. Furthermore, it is RECOMMENDED that
      Reverse Path Forwarding checks be enabled in all network routers and
      switches along the path from the sender to receivers to limit the
      possibility of a bad agent successfully injecting a corrupted packet
      into the multicast tree data path.</t>

      <t>Another security concern is that some FEC information may be obtained
      by receivers out-of-band in a session description, and if the session
      description is forged or corrupted, then the receivers will not use the
      correct protocol for decoding content from received packets. To avoid
      these problems, it is RECOMMENDED that measures be taken to prevent
      receivers from accepting incorrect session descriptions, e.g., by using
      source authentication to ensure that receivers only accept legitimate
      session descriptions from authorized senders.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>Values of FEC Encoding IDs and FEC Instance IDs are subject to IANA
      registration. For general guidelines on IANA considerations as they
      apply to this document, see <xref target="RFC5052"></xref>. IANA 
      has assigned the value 6 under the ietf:rmt:fec:encoding registry
      to "RaptorQ Code" as the Fully-Specified FEC Encoding ID value
      associated with this specification.</t>
    </section>

    <section title="Acknowledgements">
      <t>Thanks are due to Ranganathan (Ranga) Krishnan. Ranga Krishnan has
      been very supportive in finding and resolving implementation details and
      in finding the systematic indices. In addition, Habeeb Mohiuddin
      Mohammed and Antonios Pitarokoilis, both from the Munich University of
      Technology (TUM), and Alan Shinsato have done two independent
      implementations of the RaptorQ encoder/decoder that have helped to
      clarify and to resolve issues with this specification.</t>
    </section>
  </middle>

  <back>

<?rfc rfcedstyle="no"?>
    <references title="Normative References">
      <reference anchor="RFC2119">
        <front>
          <title abbrev="RFC Key Words">Key words for use in RFCs to Indicate
          Requirement Levels</title>

          <author fullname="Scott Bradner" initials="S." surname="Bradner">
          </author>

          <date month="March" year="1997" />

          <abstract>
            <t>In many standards track documents several words are used to
            signify the requirements in the specification. These words are
            often capitalized. This document defines these words as they
            should be interpreted in IETF documents. Authors who follow these
            guidelines should incorporate this phrase near the beginning of
            their document: <list>
                <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
                "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
                "OPTIONAL" in this document are to be interpreted as described
                in RFC 2119.</t>
              </list></t>

            <t>Note that the force of these words is modified by the
            requirement level of the document in which they are used.</t>
          </abstract>
        </front>

        <seriesInfo name="BCP" value="14" />

        <seriesInfo name="RFC" value="2119" />
      </reference>

      <reference anchor="RFC4082">
        <front>
          <title>Timed Efficient Stream Loss-Tolerant Authentication (TESLA):
          Multicast Source Authentication Transform Introduction</title>

          <author fullname="A. Perrig" initials="A." surname="Perrig">
            <organization></organization>
          </author>

          <author fullname="D. Song" initials="D." surname="Song">
            <organization></organization>
          </author>

          <author fullname="R. Canetti" initials="R." surname="Canetti">
            <organization></organization>
          </author>

          <author fullname="J.D. Tygar" initials="J.D." surname="Tygar">
            <organization></organization>
          </author>

          <author fullname="B. Briscoe" initials="B." surname="Briscoe">
            <organization></organization>
          </author>

          <date month="June" year="2005" />

          <abstract>
            <t>This document introduces Timed Efficient Stream Loss-tolerant
            Authentication (TESLA). TESLA allows all receivers to check the
            integrity and authenticate the source of each packet in multicast
            or broadcast data streams. TESLA requires no trust between
            receivers, uses low-cost operations per packet at both sender and
            receiver, can tolerate any level of loss without retransmissions,
            and requires no per-receiver state at the sender. TESLA can
            protect receivers against denial of service attacks in certain
            circumstances. Each receiver must be loosely time-synchronized
            with the source in order to verify messages, but otherwise
            receivers do not have to send any messages. TESLA alone cannot
            support non-repudiation of the data source to third
            parties.&lt;/t&gt;&lt;t&gt; This informational document is
            intended to assist in writing standardizable and secure
            specifications for protocols based on TESLA in different contexts.
            This memo provides information for the Internet community.</t>
          </abstract>
        </front>

        <seriesInfo name="RFC" value="4082" />

        <format octets="54316" target="ftp://ftp.isi.edu/in-notes/rfc4082.txt"
                type="TXT" />
      </reference>

      <reference anchor="FIPS.180-3.2008">
        <front>
          <title>Secure Hash Standard</title>
	  <author>
            <organization>National Institute of Standards and Technology</organization>
          </author>

        <date day="1" month="October" year="2008" />

        </front>
	
        <seriesInfo name="FIPS PUB"
                    value="180-3" />
	
        <format target="http://www.itl.nist.gov/fipspubs/fip180-1.htm"
                type="HTML" />
      </reference>

      <reference anchor="RFC5052">
        <front>
          <title>Forward Error Correction (FEC) Building Block</title>

          <author fullname="M. Watson" initials="M." surname="Watson">
            <organization></organization>
          </author>

          <author fullname="M. Luby" initials="M." surname="Luby">
            <organization></organization>
          </author>

          <author fullname="L. Vicisano" initials="L." surname="Vicisano">
            <organization></organization>
          </author>

          <date month="August" year="2007" />

          <abstract>
            <t>This document describes how to use Forward Error Correction
            (FEC) codes to efficiently provide and/or augment reliability for
            bulk data transfer over IP multicast. This document defines a
            framework for the definition of the information that needs to be
            communicated in order to use an FEC code for bulk data transfer,
            in addition to the encoded data itself, and for definition of
            formats and codes for communication of that information. Both
            information communicated with the encoded data itself and
            information that needs to be communicated 'out-of-band' are
            considered. The procedures for specifying new FEC codes, defining
            the information communication requirements associated with those
            codes and registering them with the Internet Assigned Numbers
            Authority (IANA) are also described. The requirements on Content
            Delivery Protocols that wish to use FEC codes defined within this
            framework are also defined. The companion document titled "The Use
            of Forward Error Correction (FEC) in Reliable Multicast" describes
            some applications of FEC codes for delivering content. This
            document obsoletes RFC 3452. [STANDARDS TRACK]</t>
          </abstract>
        </front>

        <seriesInfo name="RFC" value="5052" />

        <format octets="57754" target="ftp://ftp.isi.edu/in-notes/rfc5052.txt"
                type="TXT" />
      </reference>
    </references>

    <references title="Informative References">

      <reference anchor="RaptorCodes">
	<front>
          <title>Raptor Codes</title>
	  
          <author fullname="A. Shokrollahi" initials="A."
                  surname="Shokrollahi">
            <organization></organization>
          </author>
	  
          <author fullname="M. Luby" initials="M." surname="Luby">
            <organization></organization>
          </author>
	  
          <date year="2011" />
	</front>
	<seriesInfo name="Foundations and Trends in Communications and
			  Information Theory:" value="Vol. 6: No. 3-4" />
	<seriesInfo name="pp." value="213-322"/>
      </reference>
      
      <reference anchor="RFC3453">
        <front>
          <title>The Use of Forward Error Correction (FEC) in Reliable
          Multicast</title>

          <author fullname="M. Luby" initials="M." surname="Luby">
            <organization></organization>
          </author>

          <author fullname="L. Vicisano" initials="L." surname="Vicisano">
            <organization></organization>
          </author>

          <author fullname="J. Gemmell" initials="J." surname="Gemmell">
            <organization></organization>
          </author>

          <author fullname="L. Rizzo" initials="L." surname="Rizzo">
            <organization></organization>
          </author>

          <author fullname="M. Handley" initials="M." surname="Handley">
            <organization></organization>
          </author>

          <author fullname="J. Crowcroft" initials="J." surname="Crowcroft">
            <organization></organization>
          </author>

          <date month="December" year="2002" />

          <abstract>
            <t>This memo describes the use of Forward Error Correction (FEC)
            codes to efficiently provide and/or augment reliability for
            one-to-many reliable data transport using IP multicast. One of the
            key properties of FEC codes in this context is the ability to use
            the same packets containing FEC data to simultaneously repair
            different packet loss patterns at multiple receivers. Different
            classes of FEC codes and some of their basic properties are
            described and terminology relevant to implementing FEC in a
            reliable multicast protocol is introduced. Examples are provided
            of possible abstract formats for packets carrying FEC. This memo
            provides information for the Internet community.</t>
          </abstract>
        </front>

        <seriesInfo name="RFC" value="3453" />

        <format octets="46853"
                target="ftp://ftp.rfc-editor.org/in-notes/rfc3453.txt"
                type="TXT" />
      </reference>

      <reference anchor="RFC5053">
        <front>
          <title>Raptor Forward Error Correction Scheme for Object
          Delivery</title>

          <author fullname="M. Luby" initials="M." surname="Luby">
            <organization></organization>
          </author>

          <author fullname="A. Shokrollahi" initials="A."
                  surname="Shokrollahi">
            <organization></organization>
          </author>

          <author fullname="M. Watson" initials="M." surname="Watson">
            <organization></organization>
          </author>

          <author fullname="T. Stockhammer" initials="T."
                  surname="Stockhammer">
            <organization></organization>
          </author>

          <date month="October" year="2007" />

          <abstract>
            <t>This document describes a Fully-Specified Forward Error
            Correction (FEC) scheme, corresponding to FEC Encoding ID 1, for
            the Raptor forward error correction code and its application to
            reliable delivery of data objects.&lt;/t&gt;&lt;t&gt; Raptor is a
            fountain code, i.e., as many encoding symbols as needed can be
            generated by the encoder on-the-fly from the source symbols of a
            source block of data. The decoder is able to recover the source
            block from any set of encoding symbols only slightly more in
            number than the number of source symbols.&lt;/t&gt;&lt;t&gt; The
            Raptor code described here is a systematic code, meaning that all
            the source symbols are among the encoding symbols that can be
            generated. [STANDARDS TRACK]</t>
          </abstract>
        </front>

        <seriesInfo name="RFC" value="5053" />

        <format octets="113743"
                target="ftp://ftp.rfc-editor.org/in-notes/rfc5053.txt"
                type="TXT" />
      </reference>

      <reference anchor="LTCodes">
        <front>
          <title>LT codes</title>

          <author fullname="Michael Luby" initials="M." surname="Luby">
            <organization></organization>
          </author>

          <date day="1" month="November" year="2002" />

          <abstract>
            <t>IEEE Transactions on Information Theory, Special issue devoted
            to coding theory, Vol. 42, No. 6, November 1996.</t>
          </abstract>
        </front>

        <seriesInfo name="Annual IEEE Symposium on Foundations of
        Computer Science," value="pp. 271-280" />
      </reference>

    </references>
<?rfc rfcedstyle="yes"?>

  </back>
</rfc>
