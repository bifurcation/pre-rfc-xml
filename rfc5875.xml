<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc sortrefs="yes"?>
<?rfc linkmailto="yes"?>
<?rfc strict="no"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>
<rfc number="5875" category="std" ipr="pre5378Trust200902">

 <!-- [rfced] Please note that after you have approved the document,
post-xml2rfc changes will be made to update the header and
boilerplate as described in RFC 5741.
-->

  <front>
    <title abbrev="XCAP Diff Event">An Extensible Markup Language (XML)
    Configuration Access Protocol (XCAP) Diff Event Package</title>

    <author fullname="Jari Urpalainen" initials="J." surname="Urpalainen">
      <organization>Nokia</organization>

      <address>
        <postal>
          <street>Itamerenkatu 11-13</street>

          <code>00180</code>

          <city>Helsinki</city>

          <country>Finland</country>
        </postal>

        <phone>+358 7180 37686</phone>

        <email>jari.urpalainen@nokia.com</email>
      </address>
    </author>

    <author fullname="Dean Willis" initials="D. W." surname="Willis" role="editor">
      <organization>Softarmor Systems LLC</organization>

      <address>
        <postal>
          <street>3100 Independence Pk #311-164</street>

          <code>75075</code>

          <city>Plano, TX</city>

          <country>USA</country>
        </postal>

        <phone>+1 214 504 19876</phone>

        <email>dean.willis@softarmor.com</email>
      </address>
    </author>

    <date month="May" year="2010"/>

    <area>RAI</area>

    <workgroup>SIP</workgroup>

<!--[rfced] Please insert any keywords (beyond those that appear in the title) for use on http://www.rfc-editor.org/rfcsearch.html. -->

    <abstract>
      <t>This document describes an "xcap-diff" SIP (Session Initiation
      Protocol) event package for the SIP Event Notification Framework, which
      clients can use to receive notifications of changes to Extensible Markup
      Language (XML) Configuration Access Protocol (XCAP) resources. The
      initial synchronization information exchange and document updates are
      based on the XCAP Diff format.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>The SIP events framework <xref target="RFC3265"/> describes
      subscription and notification conventions for the Session Initiation
      Protocol (SIP) <xref target="RFC3261"/>. The Extensible Markup
      Language (XML) <xref target="W3C.REC-xml-20060816" /> Configuration
      Access Protocol (XCAP) <xref target="RFC4825"/> allows a client to
      read, write, and modify XML-formatted application usage data stored on an
      XCAP server.</t>

      <t>While XCAP allows authorized users or devices to modify the same XML
      document, XCAP does not provide an effective mechanism (beyond polling)
      to keep resources synchronized between a server and a client. This memo
      defines an "xcap-diff" event package that, together with the SIP event
      notification framework <xref target="RFC3265"/> and the XCAP diff
      format <xref target="RFC5874"/>, allows a user
      to subscribe to changes in an XML document, and to receive notifications
      whenever the XML document changes.</t>

      <t>There are three basic features that this event package enables:</t>

      <t>First, a client can subscribe to a list of XCAP documents' URLs in a
      collection located on an XCAP server. This allows a subscriber to
      compare server resources with its local resources using the URLs and the
      strong entity tag (ETag) values of XCAP documents, which are shown in
      the XCAP diff format, and to synchronize them.</t>

      <t>Second, this event package can signal a change in those documents in
      one of three ways. The first mode only indicates the event type and does
      not include document contents, so the subscriber uses HTTP <xref
      target="RFC2616" /> to retrieve the updated document. The
      second mode includes document content changes in notification
      messages, using the XML-Patch-Ops <xref target="RFC5261" />
      format with minimal notification size. The third mode also includes
      document content changes in notification messages with the same XML-Patch-Ops 
      format, but is more verbose, and shows the full HTTP version history.</t>

      <t>Third, the client can subscribe to specific XML elements or
      attributes (XCAP components) showing their existing
      contents in the resulting XCAP diff format notification messages. If the
      requested component does not exist but is later created, the notifier
      sends a notification with the component's content. The notifier also
      sends notifications when the subscribed XCAP components are removed, for
      example, after a successful HTTP DELETE request.</t>
    </section>

    <section anchor="Terminology" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in RFC 2119, BCP 14 <xref
      target="RFC2119" /> and indicate requirement levels for compliant
      implementations.</t>
    </section>

    <section anchor="Definitions" title="Definitions">
      <t>The following terms are used in this document:</t>

      <t><list style="hanging">
          <t hangText="XCAP component:">An XML element or an attribute, which
          can be updated, removed, or retrieved with XCAP.</t>

          <t hangText="Aggregating:">An XCAP client can update only a single
          XCAP component at a time using HTTP. However, a notifier may be able
          to aggregate a series of these modifications into a single
          notification using XML-Patch-Ops semantics encoded in the XCAP diff
          format.</t>
        </list></t>

      <t>This document reuses terminology mostly defined in XCAP <xref
      target="RFC4825" /> and some in WebDAV <xref
      target="RFC4918" />.</t>
    </section>

    <section anchor="Package" title="XCAP Diff Event Package">
      <section anchor="Requirements"
               title="Overview of Operation with Basic Requirements">
        <t>To receive "xcap-diff" event package features, the subscriber
        indicates its interest in certain resources by including a URI list in
        the subscription body to the notifier. Each URL in this list MUST be an
        HTTP URL that identifies a collection, an XCAP document, or an XCAP
        component. Collection URLs MUST have a trailing forward slash "/",
        following the conventions of WebDAV <xref target="RFC4918"/>. 
		A collection selection includes all documents in that
        collection and recursively all documents in sub-collections. The URL
        of an XCAP component consists of the document URL with the XCAP Node
        Selector added. Although the XCAP Node Selector allows all in-scope
namespaces of an element to be requested, the client MUST NOT subscribe to
namespaces. 
</t>

        <t>The notifier MUST support XCAP component subscriptions. The
        notifier sends the first notification in response to the subscription,
        and this first notification MUST contain the URLs of the documents and
        XCAP component contents that are part of the subscription. The subsequent notifications MAY contain patches to
        these documents. The subscriber can specify how the notifier will
        signal the changes of documents by using the 'diff-processing' event
        package parameter, covered in <xref target="diff-processing-parameter" />. Note that the existence of the "diff-processing" parameter or its value has no influence on XCAP component subscriptions.</t>
      </section>

      <section anchor="event-name" title="Event Package Name">
        <t>The name of this event package is "xcap-diff". As specified in
        <xref target="RFC3265" />, this value appears in the
        Event header field present in SUBSCRIBE and NOTIFY requests.</t>
      </section>

      <section anchor="diff-processing-parameter"
               title="'diff-processing' Event Package Parameter">


        <t>With the aid of the optional "diff-processing" Event header field
        parameter, the subscriber indicates a preference as to how the
        notifier SHOULD indicate change notifications of documents. The
        possible values are "no-patching", "xcap-patching", and "aggregate".
        All three modes provide information that allows the subscriber to
        synchronize its local cache, but only the "xcap-patching" mode
        provides intermediate states of the version history. The notifier
        SHOULD use the indicated mode if it understands it (as doing so optimizes
        network traffic within the capabilities of the receiver).
  
         <list style="hanging">
            <t>The "no-patching" value means that the notifier indicates only
            the document and the event type (creation, modification, and
            removal) in the notification. The notification does not
            necessarily indicate the full HTTP ETag change history.
            Notifiers MUST support the "no-patching" mode as a
            base-line for interoperability. The other, more complex modes are
            optional. </t>

            <t>The "xcap-patching" value means that the notifier includes all
            updated XCAP component contents and entity tag (ETag) changes made by XCAP clients (via HTTP). The
            client receives the full (HTTP) ETag change history of a document.
            </t>

            <t>The "aggregate" value means that the notifier MAY aggregate
            several individual XCAP component updates into a single XCAP diff
            &lt;document&gt; element. The policy for determining whether or
            not to apply aggregation or to determine how many updates to
            aggregate is locally determined. 
	    </t>
	    <t>	
            The notifier SHOULD support the "xcap-patching" and
            "aggregate" modes, and thus implement XML-Patch-Ops <xref
            target="RFC5261" /> diff-generation, because this
            can greatly reduce the required number of notifications and overall transmissions.</t>

            
          </list> If the subscription does not contain the "diff-processing"
        header field parameter, the notifier MUST default to the
        "no-patching" mode.</t>

        <t><list style="hanging">
            <t>Note: To see the difference between "xcap-patching" and
            "aggregate" modes, consider a document that has versions "a", "b",
            and "c" with corresponding ETag values "1", "2", and "3". The
            "xcap-patching" mode will include first the change from version
            "a" to "b" with the versions' corresponding "1" and "2" ETags and
            then the change from version "b" to "c" with their "2" and "3"
            ETags. The "aggregate" mode optimizes the change and indicates
            only a single aggregated change from "a" to "c" with the old "1"
            and new "3" ETags. If these changes are closely related, that is,
            the same element has been updated many times, the bandwidth
            savings are larger.</t>
          </list></t>

        
        <t>This "diff-processing" parameter is a subscriber hint to the
        notifier. The notifier may respond using a simpler mode, but not a
        more complex one. Notifier selection of a mode is covered in <xref
        target="notgen" />. During re-subscriptions, the subscriber MAY
        change the diff-processing parameter.</t>

        <t>The formal grammar <xref target="RFC5234" /> of the
        "diff-processing" parameter is:</t>

        <t><figure>
            <artwork>
     diff-processing = "diff-processing" EQUAL (
       "no-patching" /
       "xcap-patching" /
       "aggregate" /
       token )
			</artwork>
          </figure> where EQUAL and token are defined in RFC 3261 <xref
        target="RFC3261" />.</t>
      </section>

      <section anchor="subbody" title="SUBSCRIBE Bodies">
        

        <t>The URI list is described by the XCAP resource list format
        <xref target="RFC4826" />, and is included
        as a body of the initial SUBSCRIBE request. Only a simple subset of
        that format is required, a flat list of XCAP request URIs. The "uri"
        attribute of the &lt;entry&gt; element contains these URI values. The
        subscriber MUST NOT use hierarchical lists or &lt;entry-ref&gt;
        references, etc. (though in the future, semantics may be expanded
        thanks to the functionality in the resource list format). In
        subsequent SUBSCRIBE requests, such as those used for refreshing the
        expiration timer, the subscribed URI list MAY change, in which case
        the notifier MUST use the new list.</t>

        <t>The SUBSCRIBE request MAY contain an Accept header field. If no
        such header field is present, it has a default value of
        "application/xcap-diff+xml". If the header field is present, it MUST
        include "application/xcap-diff+xml", and MAY include any other
        types.</t>

        <t>The SUBSCRIBE request MAY contain the Suppress-If-Match header
        field <xref target="RFC5839" />, which directs
        the notifier to suppress either the body of a subsequent notification
        or the entire notification if the ETag value matches.</t>

        <t>If the SUBSCRIBE body contains elements or attributes that the
        notifier doesn't understand, the notifier MUST ignore them.</t>

        <t>Subscribers need to appropriately populate the Request-URI of the
        SUBSCRIBE request, typically set to the URI of the notifier. This
        document does not constrain that URI. It is assumed that the
        subscriber is provisioned with or has learned the URI of the notifier
        of this event package.</t>

        

        <t>The XCAP server will usually be co-located with the SIP notifier,
        so the subscriber MAY use relative XCAP Request-URIs. Because relative
        Request-URIs are allowed, the notifier MUST know how to resolve these
        against the correct XCAP Root URI value.</t>

        <figure anchor="Figure" title="Example subscription body">
          <preamble><xref target="Figure"></xref> shows a SUBSCRIBE request
          and body covering several XCAP resources: a "resource-list"
          document, a specific element (XCAP component) in a "rls-services" document, and a
          collection in "pidf-manipulation" application usage. The
          "Content-Type" header of this SUBSCRIBE request is
          "application/resource-lists+xml".</preamble>

          <artwork>

SUBSCRIBE sip:tests@xcap.example.com SIP/2.0
...
Accept: application/xcap-diff+xml
Event: xcap-diff; diff-processing=aggregate
Content-Type: application/resource-lists+xml
Content-Length: [XXX]
Expires: 4200

<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<resource-lists xmlns="urn:ietf:params:xml:ns:resource-lists">
 <list>
  <entry uri="resource-lists/users/sip:joe@example.com/index"/>
  <entry uri="rls-services/users/sip:joe@example.com/index/
~~/*/service%5b@uri='sip:marketing@example.com'%5d"/>
  <entry uri="pidf-manipulation/"/>
 </list>
</resource-lists>	
]]>       
					</artwork>
        </figure>

<t>
When subscribing to XCAP components, namespace prefixes of XCAP Node Selectors
MUST be properly resolved to namespace URIs. Section 6.4 of RFC 4825 <xref target="RFC4825" /> describes the conventions when using prefixes in XCAP Node Selectors. 
If only XCAP Default Document Namespace is used, just like in the previous example (where a &lt;service> element is selected),
the query component of the "uri" value is not required.
</t>

      </section>

      <section anchor="duration" title="Subscription Duration">
      

        <t>The default expiration time for subscriptions within this package
        is 3600 seconds. As per RFC 3265 <xref target="RFC3265" />, the
        subscriber MAY specify an alternative expiration timer in the Expires
        header field.</t>
      </section>

      <section anchor="notbody" title="NOTIFY Bodies">
       

        <t>The format of the NOTIFY message body either is the default of
        "application/xcap-diff+xml" or is a format listed in the Accept header
        field of the SUBSCRIBE.</t>

        <t>In this event package, notification messages contain an XCAP diff
        document <xref target="RFC5874"/>.</t>

        

        <t>The XCAP diff format <xref
        target="RFC5874"></xref> can include the subscribed XCAP component contents. For
        documents, the format can also include corresponding URIs, ETag
        values, and patching instructions from version "a" to "b". Removal
        events (of documents, elements, or attributes) can be identified too.
        Except for collection selections, the "sel" selector values of the
        XCAP diff format MUST be octet-by-octet equivalent to the relevant
        "uri" parameter values of the &lt;entry&gt; element of the
        "resource-list" document.</t>

<t>
With XCAP component subscriptions, XCAP Node Selectors can contain namespace prefixes. 
A notifier MUST then resolve these prefixes to namespace URIs according to RFC 4825 <xref target="RFC4825"/> conventions.
In other words, notifiers MUST be aware of XCAP Default Document Namespaces for Application Usages when
they locate unprefixed qualified XCAP elements. Note that the namespace resolving rules of Patch operation elements &lt;add&gt;, &lt;replace&gt;, and &lt;remove&gt; are described in Section 4.2.1 of <xref target="RFC5261"/>.
</t> 

      </section>

      <section anchor="notgen" title="Notifier Generation of NOTIFY Requests">

        <t>During the initial subscription, or if the URI list changes in
        SUBSCRIBE refresh requests, the notifier MUST resolve the requested
        XCAP resources and their privileges. If there are superfluous resource
        selections in the requested URI list, the notifier SHOULD NOT provide
        overlapping similar responses for these resources. A resource for
        which an authenticated user does not have a read privilege MUST NOT be
        included in the XCAP diff format. Note that an XCAP component that
        could not be located with XCAP semantics does not produce an error.
        Instead, the request remains in a "pending" state, that is, waiting
        for this resource to be created (or read access granted if XCAP Application Usages utilize dynamic access control lists).
        Subscriptions to collections have a similar property: once a new
        document is created into the subscribed collection, the creation of a
        new resource is signaled with the next NOTIFY request.</t>

        <t>After the notifier knows the list of authorized XCAP resources, it
        generates the first NOTIFY, which contains URI references to all
        subscribed, existing documents for which the subscriber has read
        privileges, and typically XCAP component(s) of existing content.</t>

        <t>After sending the initial notification, the notifier selects a
        diff-processing mode for reporting changes. If the subscriber
        suggested a mode in the "diff-processing" parameter of the SUBSCRIBE,
        the notifier MAY use that requested mode or MAY fall back to a simpler
        operational mode, but the notifier MUST NOT use a more complex mode
        than the one chosen by the subscriber. From least to most complex, the
        order of the modes is the following: "no-patching", "xcap-patching",
        "aggregate". Thus, the notifier may respond to an "aggregate" request
        using any mode, but cannot reply to an "xcap-patching" subscription
        using the "aggregate" mode. Naturally, the notifier MUST handle a
        "no-patching" request with the "no-patching" mode.</t>


        <t>In all modes, the notifier MUST maintain the chronological order of
        XCAP changes. If several changes to a given resource are presented in
        a single notification, the chronological update order MUST be
        preserved in the XML document order of the notification body.
        Chronological order is preserved to simplify the required subscriber implementation logic.</t>

        

        <t>While the "aggregate" mode uses bandwidth most efficiently, it
        introduces other challenges. The initial synchronization might fail
        with rapidly changing resources, because the "aggregate" mode messages
        might not include the full version history of a document and the base
        XCAP protocol does not support version history retrievals of
        documents. When new documents are created in subscribed collections
        and the notifier is aggregating patches, the same issue can occur. In
        a corner case (such as when the XML prolog changes), the notifier may not be able to provide patches with
        the XML-Patch-Ops <xref target="RFC5261" /> semantics.
        </t> 
	<t>
        If the notifier has to temporarily disable diff generation
        and send only the URI references of some changed documents to the
        subscriber, it MUST continue with the "xcap-patching" mode afterwards
        for these resources, if the initial subscription also started with the
        "xcap-patching" mode. 
 
        <list style="hanging"><t>
        Note: The diff-generation may be disabled when the NOTIFY body becomes impractically large or an intermediate error
        has happened. As the subscriber loses track of the 
	patching operations, it must refresh to a "known good" state by
        downloading current documents. Once it has done so, it can re-subscribe, 
	for example, with the "aggregate" mode.</t></list>
        </t>  
         

        <t>In the "aggregate" mode, the notifier chooses how long to wait for
        multiple patches to combine and how this combination is done.</t>

       

        <t>In the "xcap-patching" mode, the notifier MAY try to optimize the
        diff-generation, for example, by eliminating redundant information
        since some XCAP clients will probably not have completely
        optimized their HTTP PUT request.</t>

        <t><list style="hanging">

            <t>Note: It is straightforward to change the XCAP client's change
            requests: PUT and DELETE (sent via HTTP) to use XML-Patch-Ops semantics. While
            XCAP does not support patching of all XML node types -- for
            example, namespace declarations cannot be added separately --
            efficient utilization of XML-Patch-Ops can sometimes significantly reduce
            the bandwidth requirements at the expense of extra processing.
</t>
          </list></t>

        <t>After the notifier has reported the existence of an XCAP component,
        it MUST also report its removal consistently. For example, the removal
        of the parent element of the subscribed element requires the same
        signaling since the subscribed element ceases to exist. To signal the
        removal of an XCAP component, the notifier sets the Boolean "exist"
        attribute value of the &lt;element&gt; or &lt;attribute&gt; elements
        to false. Even with rapidly changing resources, the
        notifier MUST signal only the latest state: e.g., whether or not the XCAP
        component exists.</t>

        <t>When the notifier receives a re-subscription, it MUST re-send the
        current full XML diff content unless the subscriber has requested a
        conditional subscription <xref
        target="RFC5839"></xref> by using the header field
        Suppress-If-Match: [ETag value]. With a conditional re-subscription,
        the notifier MUST also inspect the subscription body when determining
        the current subscription state. Since the subscription is based on a
        list of XCAP request URIs, it is RECOMMENDED that the notifier does not
        consider the order of these URIs when determining the equivalence to
        "stored" previous states. If a match to the previous state is not
        found, the NOTIFY message MUST contain the full XML diff state
        (similar to the initial notification). The notifiers SHOULD implement
        the conditional subscription handling with this event package.</t>


        <t>During re-subscriptions, the subscriber may change the value of the
        diff-processing parameter. The value change influences only subsequent
        notifications, not the notification (if generated) followed
        immediately after the (re-)SUBSCRIBE request.</t>

        <t>Event packages like this require reliable transfer of NOTIFY
        messages. This means that all messages MUST successfully be
        transferred or the document will become out of sync, and then patches
        will most likely fail (or worse, have unintended consequences). This
        "xcap-diff" event package requires, similar to Partial-PIDF-Notify RFC
        5263 <xref target="RFC5263"></xref>, that a notifier MUST NOT send a
        new NOTIFY request to the same dialog unless a successful 200-response
        has been received for the last sent NOTIFY request. If the NOTIFY
        request fails due to a timeout, the notifier MUST remove the
        subscription.</t>

        <t><list style="hanging">
  

            <t>Note: This requirement ensures that out-of-order events will
            not happen or that the dialog will terminate after non-resolvable
            NOTIFY request failures. In addition, some of the probable NOTIFY
            error responses (for example, 401, 407, 413) can possibly be
            handled gracefully without tearing down the dialog.</t>
          </list></t>

        <t>If, for example, the subscriber has selected too many elements to
        which to subscribe, such that the notification body would be
        impractically large (that is, an intermediate NOTIFY failure), the
        notifier MAY discard the &lt;element&gt; element content. The
        existence of elements is then indicated with an empty &lt;element&gt;
        element, and the content is not shown for those resources. In other
        words, the &lt;element&gt; element does not have a child element
        that would show the subscribed "full" element content. </t>

        
      </section>

      <section anchor="subproc"
               title="Subscriber Processing of NOTIFY Requests">

        <t>The first NOTIFY request will usually contain references to HTTP
        resources including their strong ETag values. If the subscriber does
        not have similar locally cached versions, it will typically start an
        unconditional HTTP GET request for those resources. During this HTTP
        retrieval time, the subscriber MAY also receive patches to these
        documents if it has requested them and if the documents are changing
        rapidly. 
        It can happen that the version retrieved by HTTP is not the same than
what is indicated in the initial notification.  
        A subscriber can then chain the modification list for each document,
and locate the position where the previous ETag value is equal to that
retrieved via HTTP. If an ETag match is not found from the first change, a
subscriber MUST omit all changes up to the point where it is the same. From
that change onwards, the subscriber applies all reported patches. If the
version received via HTTP is newer than any received via the notifications,

	the subscriber may not find an equivalent match of an ETag value from			
	the chain of patches. This can happen since notifications are	 	 
	reported after HTTP changes and preferably at some minimum intervals.
Also, document removals can be reported in notifications and/or HTTP retrievals may fail because of unexisting resources (rapidly changing). 
In any case, the subscriber can re-fetch the possible out-of-sync document, wait for subsequent notifications
        or refresh the subscription (with "xcap-patching"), and repeat the described "sync" algorithm
        until a "full" sync is achieved. 
		</t>


  

        <t>If the notifier aggregates patches, the previous modification list may not contain the ETag value retrieved by HTTP simply because of aggregation optimizations. A similar out-of-sync cycle can happen when new (subscribed) documents are created that change rapidly. To avoid such difficulties, the subscriber MAY start the subscription with the "xcap-patching" mode, and then refresh the
        subscription with the "aggregate" mode after the initial sync is achieved. Naturally, the subscriber can revert back to the "xcap-patching" mode from "aggregate" at any time and vice versa.
        </t> 

        <t>If the subscriber has received a "full" sync and it has detected
        that some of the resources are being served with the "xcap-patching"
        mode while others are in the "aggregate" mode, it SHOULD refresh the
        subscription to the "aggregate" mode.</t>

        <t>The notifier MAY at any time temporarily use the "no-patching" mode
        for some resources so that the subscriber receives only URI references
        of modifications. When the notifier is acting in this mode, several
        cycles MAY be needed before an initial "full" sync is achieved. As the
        notifier MAY change modes in the middle of a dialog, the subscriber is
        always responsible for taking appropriate actions. Also, as the last
        resort, the subscriber MAY always disable the usage of diff-processing
        by setting the "diff-processing" parameter to "no-patching".</t>

        <t>If a diff format cannot be applied due to patch processing and/or
        programming errors (for a list, see Section 5.1 of <xref
        target="RFC5261"></xref>), the subscriber SHOULD refresh the
        subscription and disable patching by setting the "diff-processing"
        parameter to "no-patching". The subscriber SHOULD NOT reply with a
        non-200 response since the notifier cannot make corrections.</t>

        <t>During unconditional re-subscriptions, the subscriber MUST stamp
        the received state of all previous resources as stale. However, if a
        conditional <xref target="RFC5839"></xref>
        re-subscription is successful, the subscriber MUST preserve the
        current state of resources unless the subscribed URI list has changed.
        That is, the subscriber MUST fetch the resource's state, for example,
        from some local cache.</t>
      </section>

      <section anchor="fork" title="Handling of Forked Requests">
        <t>This specification allows only a single dialog to be constructed
        from an initial SUBSCRIBE request. If the subscriber receives forked
        responses to a SUBSCRIBE, the subscriber MUST apply the procedures in
        Section 4.4.9 of RFC 3265 <xref target="RFC3265"></xref> for handling
        non-allowed forked requests.</t>
      </section>

      <section anchor="notrate" title="Rate of Notifications">
        <t>Notifiers of an "xcap-diff" event package SHOULD NOT generate
        notifications for a single subscription at a rate of more than once
        every five seconds.</t>
      </section>

      <section anchor="agents" title="State Agents">
        <t>State agents play no role in this package.</t>
      </section>
    </section>

    <section anchor="Example" title="An Initial Example NOTIFY Document">

      <t><xref target="Figureb"></xref> shows an example initial XCAP diff
      format document provided by the first NOTIFY request to the SUBSCRIBE
      example in <xref target="Figure"></xref>. The following is an example
      Event header field for this SUBSCRIBE request:</t>

      <t>Event: xcap-diff; diff-processing=aggregate</t>

      <t>The subscriber requests that the notifier "aggregate" XCAP component
      updates and anticipates that the subsequent notifications will contain
      aggregated patches to these documents.</t>

      <t><vspace blankLines="0" /> <figure anchor="Figureb"
          title="An example initial XCAP diff format document">
          <artwork>

<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<d:xcap-diff xmlns:d="urn:ietf:params:xml:ns:xcap-diff"
             xmlns:s="urn:ietf:params:xml:ns:rls-services"
           xcap-root="http://xcap.example.com/root/">

 <d:document new-etag="7ahggs"
           sel="resource-lists/users/sip:joe@example.com/index"/>

 <d:document new-etag="30376adf"
           sel="pidf-manipulation/users/sip:joe@example.com/index"/>

 <d:element sel="rls-services/users/sip:joe@example.com/index/
~~/*/service%5b@uri='sip:marketing@example.com'%5d"
          xmlns:rl="urn:ietf:params:xml:ns:resource-lists"
    ><s:service uri="sip:marketing@example.com">
      <s:list name="marketing">
        <rl:entry uri="sip:joe@example.com"/>
        <rl:entry uri="sip:sudhir@example.com"/>
      </s:list>
      <s:packages>
        <s:package>presence</s:package>
      </s:packages>
    </s:service></d:element>
 
</d:xcap-diff>
]]>
				</artwork>
        </figure> Note that the resource-list "index" document included only
      the new ETag value, as the document existed during the subscription
      time. In the "pidf-manipulation" collection, there is only a single
      document for which the user has read privileges. The &lt;service&gt;
      element exists within the rls-services "index" document and its content
      is shown. Note also that the &lt;service&gt; element was located using the Default Document Namespace (no prefix in XCAP Node Selector value) although it has an "s" prefix in the source document.</t>
    </section>

    <section anchor="IANA-Considerations" title="IANA Considerations">
      <t>IANA has added a new event package to the
      SIP Event Types Namespace registry as follows:</t>

      <figure>
        <artwork>
  Package Name    Type        Contact                      Reference
  -------------   --------    -------                      ---------
  xcap-diff       package     IETF Real-time Applications  [RFC&rfc.number;]
                              &lt;rai@ietf.org&gt;
		</artwork>
      </figure>

    </section>

    <section anchor="Security" title="Security Considerations">
      <t>This document defines a new SIP event package for the SIP event
      notification framework specified in RFC 3265 <xref
      target="RFC3265"></xref>. As such, all the security considerations of
      RFC 3265 apply. The configuration data can contain sensitive
      information, and both the client and the server need to authenticate
      each other. The notifiers MUST authenticate the "xcap-diff" event
      package subscriber using the normal SIP authentication mechanisms, for
      example, Digest as defined in Section 22 of RFC 3261 <xref
      target="RFC3261"></xref>. The notifiers MUST be aware of XCAP User
      Identitiers (XUI) and how to map the authenticated SIP identities
      unambiguously with XUIs.
</t>

      <t>Since XCAP <xref target="RFC4825"></xref> provides a basic
      authorization policy for resources and since notifications contain
      content similar to XCAP resources, the security considerations of XCAP
      also apply. The notifiers MUST obey the XCAP authorization rules when
      signalling resource changes. In practice, this means following the read
      privilege rules of XCAP resources.</t>

      <t>Denial-of-service attacks against notifiers deserve special mention.
      The following can cause denial of service due to intensive processing:
      subscriptions to a long list of URIs, "pending" subscriptions to
      non-existent documents or XCAP components, and diff-generation
      algorithms that try to optimize the required bandwidth usage to
      extremes.</t>

      <t>The mechanism used for conveying xcap-diff event information MUST
      ensure integrity and SHOULD ensure confidentially of the information. An
      end-to-end SIP encryption mechanism, such as S/MIME described in Section
      26.2.4 of RFC 3261 <xref target="RFC3261"></xref>, SHOULD be used. If
      that is not available, it is RECOMMENDED that TLS <xref
      target="RFC5246"></xref> be used between elements to provide hop-by-hop
      authentication and encryption mechanisms described in Sections 26.2.2
      ("SIPS URI Scheme") and 26.3.2.2 ("Interdomain Requests") of RFC
      3261 <xref target="RFC3261"></xref>.</t>
    </section>

    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>The author would like to thank Jonathan Rosenberg for his valuable
      comments and for providing the initial event package, and Aki Niemi, Pekka
      Pessi, Miguel Garcia, Pavel Dostal, Krisztian Kiss, Anders Lindgren,
      Sofie Lassborn, Keith Drage, Stephen Hinton, Byron Campen, Avshalom
      Houri, Ben Campbell, Paul Kyzivat, Spencer Dawkins, Pasi Eronen, and
      Chris Newman for their valuable comments. Lisa Dusseault critiqued 
	  the document during IESG review, raising numerous issues that resulted
	  in improved document quality. Further, technical writer A. Jean Mahoney 
	  devoted countless hours to integrating Lisa's comments and cleaning up 
	  the technical English usage.</t>
    </section>
  </middle>

  <back>
<?rfc rfcedstyle="no" ?>
    <references title="Normative References">
      <?rfc include='reference.RFC.2616'?>

      <?rfc include='reference.RFC.3261'?>

      <?rfc include='reference.RFC.3265'?>

      <?rfc include='reference.RFC.5234'?>

      <?rfc include='reference.RFC.2119'?>

      <?rfc include='reference.RFC.4825'?>

      <?rfc include='reference.RFC.4826'?>

      <?rfc include='reference.RFC.5246'?>

      <?rfc include="reference.RFC.5261"?>

<!--      <?rfc include="reference.I-D.ietf-simple-xcap-diff"?> -->
<reference anchor='RFC5874'>
<front>
<title>An Extensible Markup Language (XML) Document Format for Indicating a Change in XML Configuration Access Protocol (XCAP) Resources</title>

<author initials='J' surname='Rosenberg' fullname='Jonathan Rosenberg'>
    <organization />
</author>

<author initials='J' surname='Urpalainen' fullname='Jari Urpalainen'>
    <organization />
</author>

<date month='May' year='2010' />

<abstract><t>This specification defines a document format that can be used to indicate that a change has occurred in a document managed by the Extensible Markup Language (XML) Configuration Access Protocol (XCAP).  This format reports which document has changed and its former and new entity tags.  It can report the differences between versions of the document, using an XML patch format.  It can report existing element and attribute content when versions of an XCAP server document change.  XCAP diff documents can be delivered to diff clients using a number of means, including a Session Initiation Protocol (SIP) event package.</t></abstract>

</front>

<seriesInfo name='RFC' value='5874' />

</reference>


<!--      <?rfc include='reference.I-D.ietf-sipcore-subnot-etags'?> -->

      <?rfc include="reference.RFC.5839"?>

    </references>

    <references title="Informative References">
      <?rfc include='reference.W3C.REC-xml-20060816'?>

      <?rfc include='reference.RFC.4918'?>

      <?rfc include='reference.RFC.5263'?>
<?rfc rfcedstyle="yes" ?>
    </references>

    <section anchor="appendix" title="Informative Examples">
      <t>These examples illustrate the basic features of the xcap-diff event
      package. Only the relevant header fields are shown. Note also that the
      SIP request URIs of these examples don't correspond to reality.</t>

      <section title="Initial Documents on an XCAP Server">
        <t>The following documents exist on an XCAP server (xcap.example.com)
        with an imaginary "tests" application usage (there's no Default
        Document Namespace defined in this imaginary application usage).</t>

        <t>http://xcap.example.com/tests/users/sip:joe@example.com/index: <!--<vspace blankLines="0"/>-->
        <figure>
            <artwork>
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<doc>
  <note>This is a sample document</note>
</doc>
]]>
			</artwork>
          </figure></t>

        <t>and then</t>

        <t>http://xcap.example.com/tests/users/sip:john@example.com/index:
        <!--<vspace blankLines="0"/>--> <figure>
            <artwork>
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<doc>
  <note>This is another sample document</note>
</doc>
]]>
			</artwork>
          </figure></t>
      </section>

      <section title="An Initial Subscription">
        <t>The following demonstrates the listing of collection contents and
        it shows only resources where the user has read privileges. The user
        Joe, whose XUI is "sip:joe@example.com", sends an initial
        subscription: <figure>
            <artwork>

SUBSCRIBE sip:tests@xcap.example.com SIP/2.0
...
Accept: application/xcap-diff+xml
Event: xcap-diff; diff-processing=aggregate
Content-Type: application/resource-lists+xml
Content-Length: [XXX]

<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<resource-lists xmlns="urn:ietf:params:xml:ns:resource-lists">
 <list>
  <entry uri="tests/users/sip:joe@example.com/"/>
 </list>
</resource-lists>	
]]>
			</artwork>
          </figure></t>

        <t>In addition to the 200 (OK) response, the notifier sends the first
        NOTIFY: <figure>
            <artwork>

NOTIFY sip:joe@userhost.example.com SIP/2.0
... 
Event: xcap-diff
Content-Type: application/xcap-diff+xml
Content-Length: [XXX]

<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xcap-diff xmlns="urn:ietf:params:xml:ns:xcap-diff"
           xcap-root="http://xcap.example.com/">

 <document new-etag="7ahggs"
           sel="tests/users/sip:joe@example.com/index"/>

</xcap-diff>
]]>
			</artwork>
          </figure> The subscriber learns that the document on this "tests"
        application usage is equivalent to its locally cached version, so it
        does not act. If the local version had been different, the subscriber
        would most likely re-fetch the document.</t>

        <t>If the subscriber had requested the "tests/users/" collection, the
        notification body would have been the same since Joe has no read
        privileges to John's resources (XCAP default behavior).</t>

        <t>If the Expires header field had a value "0", the request would be
        similar to the PROPFIND method of WebDAV. The syntax and responses
        differ, however.</t>
      </section>

      <section title="A Document Addition into a Collection">
        <t>Let's say that Joe adds a new document to his collection, using
        either the same client or another client running on a different
        device. He does an HTTP PUT to his application usage collection:
        <figure>
            <artwork>

PUT /tests/users/sip:joe@example.com/another_document HTTP/1.1
Host: xcap.example.com
....
Content-Type: application/xml
Content-Length: [XXX]

<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<doc>
  <note>This is another sample document</note>
</doc>
]]>
			</artwork>
          </figure> This HTTP PUT request results in the XCAP client receiving
        a strong HTTP ETag "terteer" for this new document.</t>

        <t>Then the subscriber receives a notification afterwards:</t>

        <figure>
          <artwork>

NOTIFY sip:joe@userhost.example.com SIP/2.0
... 
Event: xcap-diff
Content-Type: application/xcap-diff+xml
Content-Length: [XXX]

<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xcap-diff xmlns="urn:ietf:params:xml:ns:xcap-diff"
           xcap-root="http://xcap.example.com/">

 <document new-etag="terteer"
           sel="tests/users/sip:joe@example.com/another_document"/>

</xcap-diff>
]]>
		</artwork>
        </figure>

        <t>Note that the result is "additive"; it doesn't indicate the already
        indicated "index" document. Only the initial (or refreshed)
        notification contains all document URI references.</t>

        <t>If Joe's client both modifies the documents and refreshes the
        subscriptions, it would typically ignore this notification, since its
        modifications had caused the notification. If the client that received
        this NOTIFY hadn't submitted the document change, it would probably
        fetch this new document.</t>

        <t>If Joe's client refreshes the subscription with the same request
        body as in the initial subscription, the result will include these two
        documents: "index" and "another_document" with their ETags.</t>
      </section>

      <section title="A Series of XCAP Component Modifications">
        <t>Now Joe's client uses its XCAP patching capability by doing the
        following: <figure>
            <artwork>

PUT /tests/users/sip:joe@example.com/index/~~/doc/foo HTTP/1.1
Host: xcap.example.com
....
Content-Type: application/xcap-el+xml
Content-Length: [XXX]
  
<![CDATA[
<foo>this is a new element</foo>
]]>
						</artwork>
          </figure> Since the insertion of the element is successful, Joe's
        client receives the new HTTP ETag "fgherhryt3" of the updated "index"
        document.</t>

        <t>Immediately thereafter, Joe's client issues another HTTP request
        (this request could even be pipe-lined): <figure>
            <artwork>

PUT /tests/users/sip:joe@example.com/index/~~/doc/bar HTTP/1.1
Host: xcap.example.com
....
Content-Type: application/xcap-el+xml
Content-Length: [XXX]

<![CDATA[
<bar>this is a bar element
</bar>
]]>
			</artwork>
          </figure> The reported new HTTP ETag of "index" is now
        "dgdgdfgrrr".</t>

        <t>And Joe's client issues yet another HTTP request: <figure>
            <artwork>

PUT /tests/users/sip:joe@example.com/index/~~/doc/foobar HTTP/1.1
Host: xcap.example.com
....
Content-Type: application/xcap-el+xml
Content-Length: [XXX]

<![CDATA[
<foobar>this is a foobar element</foobar>
]]>
			</artwork>

          </figure> The reported new ETag of "index" is now "63hjjsll".</t>

        <t>After awhile, Joe's client receives a notification with an embedded
        patch since it has requested "aggregate" diff-processing and the
        notifier is capable of producing them: <figure>
            <artwork>

NOTIFY sip:joe@userhost.example.com SIP/2.0
... 
Event: xcap-diff
Content-Type: application/xcap-diff+xml
Content-Length: [XXX]

<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<d:xcap-diff xmlns:d="urn:ietf:params:xml:ns:xcap-diff"
             xcap-root="http://xcap.example.com/">

 <d:document previous-etag="7ahggs3"
             sel="tests/users/sip:joe@example.com/index"
             new-etag="63hjjsll">
  <d:add sel="*"
    ><foo>this is a new element</foo><bar>this is a bar element
</bar><foobar>this is a foobar element</foobar></d:add>
 </d:document>							
	
</d:xcap-diff>
]]>
						</artwork>
          </figure> Joe's client applies this patch to the locally cached
        "index" document, detects the ETag update, and stores the last ETag
        value. Note how several XCAP component modifications were
        aggregated.</t>

        <t>Note also that, if Joe's client did not have a locally cached
        version of the reference document, it would have needed to do an HTTP
        GET request after the initial notification. If the ETag of the
        received resource by HTTP did not match either the previous or new
        ETag of this aggregated patch, an out-of-sync condition would be
        probable. This issue is not typical, but it can happen. To resolve the
        issue, the client could re-fetch the "index" document and/or wait for
        subsequent notifications to detect a match. A better and simpler way
        to avoid the issue is to refresh the subscription with the
        "xcap-patching" mode and later refresh with the "aggregate" mode.</t>

        <t>Alternatively, if the notifier's operational mode been
        "xcap-patching", the NOTIFY could have been the following: <figure>
            <artwork>

NOTIFY sip:joe@userhost.example.com SIP/2.0
... 
Event: xcap-diff
Content-Type: application/xcap-diff+xml
Content-Length: [XXX]

<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<d:xcap-diff xmlns:d="urn:ietf:params:xml:ns:xcap-diff"
           xcap-root="http://xcap.example.com/">

 <d:document previous-etag="7ahggs"
             sel="tests/users/sip:joe@example.com/index"
             new-etag="fgherhryt3">
   <d:add sel="*"
    ><foo>this is a new element</foo></d:add></d:document>	
					
 <d:document previous-etag="fgherhryt3"
             sel="tests/users/sip:joe@example.com/index"
             new-etag="dgdgdfgrrr">
   <d:add sel="*"
    ><bar>this is a bar element
</bar></d:add></d:document>						

 <d:document previous-etag="dgdgdfgrrr"
             sel="tests/users/sip:joe@example.com/index"
             new-etag="63hjjsll">
   <d:add sel="*"
    ><foobar>this is a foobar element</foobar></d:add></d:document>						
	
</d:xcap-diff>
]]>
</artwork>
          </figure> If the client had to re-fetch the "index" document after
        the initial notification, it could have skipped some or all of these
        patches, depending on whether the HTTP ETag matched some of these
        ETags in the chain of patches. If the HTTP ETag did not match and the
        received HTTP version is a newer version indicated in later
        notification(s), the sync may then be achieved since the notifier
        provided the full change history in the "xcap-patching" mode.</t>

        <t>Last, the notifier could (temporarily) fall back to the
        "no-patching" mode, which allows the notifier to keep the dialog alive
        when there are too many updates: <figure>
            <artwork>

NOTIFY sip:joe@userhost.example.com SIP/2.0
... 
Event: xcap-diff
Content-Type: application/xcap-diff+xml
Content-Length: [XXX]

<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xcap-diff xmlns="urn:ietf:params:xml:ns:xcap-diff"
           xcap-root="http://xcap.example.com/">

 <document previous-etag="7ahggs3"
           sel="tests/users/sip:joe@example.com/index"
           new-etag="63hjjsll"/>
					
 </xcap-diff>
]]>
						</artwork>
          </figure> At any time, the notifier may fall back to the
        "no-patching" mode for some or all of the subscribed documents.</t>
      </section>

      <section title="An XCAP Component Subscription">
        <t>The user Joe sends an initial subscription for the "id" attribute
        of a &lt;doc&gt; element. The "index" document exists, but the
        &lt;doc&gt; root element does not contain the "id" attribute at the
        time of the subscription. <figure>
            <artwork>

SUBSCRIBE sip:tests@xcap.example.com SIP/2.0
...
Accept: application/xcap-diff+xml
Event: xcap-diff
Content-Type: application/resource-lists+xml
Content-Length: [XXX]

<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<resource-lists xmlns="urn:ietf:params:xml:ns:resource-lists">
 <list>
  <entry uri="tests/users/sip:joe@example.com/index/~~/doc/@id"/>
 </list>
</resource-lists>	
]]>
		</artwork>
          </figure></t>

        <t>The first NOTIFY looks like the following since there is nothing to
        indicate: <figure>
            <artwork>

NOTIFY sip:joe@userhost.example.com SIP/2.0
... 
Event: xcap-diff
Content-Type: application/xcap-diff+xml
Content-Length: [XXX]

<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xcap-diff xmlns="urn:ietf:params:xml:ns:xcap-diff"
           xcap-root="http://xcap.example.com/"/>
]]>
		</artwork>
          </figure> Note that if the "index" document hadn't existed, the
        first NOTIFY request would have been the same. The XCAP diff document
        format doesn't indicate reasons for non-existing resources.</t>

        <t>Afterwards, Joe's client updates the whole document root element
        including the attribute "id" (not a typical XCAP operation or a
        preferred one, just an illustration here): <figure>
            <artwork>

PUT /tests/users/sip:joe@example.com/index/~~/doc HTTP/1.1
Host: xcap.example.com
....
Content-Type: application/xcap-el+xml
Content-Length: [XXX]
	
<![CDATA[
<doc id="bar">This is a new root element</doc>
]]>
						</artwork>
          </figure> The new HTTP ETag of the "index" document is now
        "dwawrrtyy".</t>

        <t>Then Joe's client gets a notification: <figure>
            <artwork>

NOTIFY sip:joe@userhost.example.com SIP/2.0
... 
Event: xcap-diff
Content-Type: application/xcap-diff+xml
Content-Length: [XXX]

<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xcap-diff xmlns="urn:ietf:params:xml:ns:xcap-diff"
           xcap-root="http://xcap.example.com/">

 <attribute sel="tests/users/sip:joe@example.com/index/~~/doc/@id"
  >bar</attribute>
	
</xcap-diff>
]]>
		</artwork>
          </figure> Note that the HTTP ETag value of the new document is not
        shown, as it is irrelevant for this use-case.</t>

        <t>Then Joe's client removes the "id" attribute: <figure>
            <artwork>
							
DELETE /tests/users/sip:joe@example.com/index/~~/doc/@id HTTP/1.1
Host: xcap.example.com
....
Content-Length: 0

			</artwork>
          </figure></t>

        <t>And the subscriber gets a notification: <figure>
            <artwork>

NOTIFY sip:joe@userhost.example.com SIP/2.0
... 
Event: xcap-diff
Content-Type: application/xcap-diff+xml
Content-Length: [XXX]

<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xcap-diff xmlns="urn:ietf:params:xml:ns:xcap-diff"
           xcap-root="http://xcap.example.com/">

 <attribute sel="tests/users/sip:joe@example.com/index/~~/doc/@id"
  exists="0"/>
	
</xcap-diff>
]]>
		</artwork>
          </figure> The notification indicates that the subscribed attribute
        was removed from the document. Naturally, attributes are "removed" if
        the element where they belong is removed, for example, by an HTTP
        DELETE request. The component selections indicate only the existence
        of attributes or elements.</t>
      </section>

      <section title="A Conditional Subscription">
        <t>The last example is a conditional subscription where a full refresh
        can be avoided when there are no changes in resources. Joe's client
        sends an initial subscription: <figure>
            <artwork>

SUBSCRIBE sip:tests@xcap.example.com SIP/2.0
...
Accept: application/xcap-diff+xml
Event: xcap-diff; diff-processing=xcap-patching
Content-Type: application/resource-lists+xml
Content-Length: [XXX]

<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<resource-lists xmlns="urn:ietf:params:xml:ns:resource-lists">
 <list>
  <entry uri="tests/users/sip:joe@example.com/"/>
 </list>
</resource-lists>	
]]>
		</artwork>
          </figure></t>

        <t>Since there are now two documents in the repository, the first
        NOTIFY looks like the following: <figure>
            <artwork>

NOTIFY sip:joe@userhost.example.com SIP/2.0
... 
Event: xcap-diff
SIP-ETag: xggfefe54
Content-Type: application/xcap-diff+xml
Content-Length: [XXX]

<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xcap-diff xmlns="urn:ietf:params:xml:ns:xcap-diff"
           xcap-root="http://xcap.example.com/">

 <document new-etag="63hjjsll"
           sel="tests/users/sip:joe@example.com/index"/>

 <document new-etag="terteer"
           sel="tests/users/sip:joe@example.com/another_document"/>

</xcap-diff>
]]>
		</artwork>
          </figure></t>

        <t>Note that the NOTIFY request contains the SIP-ETag "xggfefe54".
        This SIP-ETag is placed in the Suppress-If-Match header field of the
        conditional subscription. The "diff-processing" mode also is changed
        (or is requested to change): <figure>
            <artwork>

SUBSCRIBE sip:tests@xcap.example.com SIP/2.0
...
Suppress-If-Match: xggfefe54
Accept: application/xcap-diff+xml
Event: xcap-diff; diff-processing=aggregate
Content-Type: application/resource-lists+xml
Content-Length: [XXX]

<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<resource-lists xmlns="urn:ietf:params:xml:ns:resource-lists">
 <list>
  <entry uri="tests/users/sip:joe@example.com/"/>
 </list>
</resource-lists>	
]]>
		</artwork>
          </figure> If the notifier finds a match to the previous stored state
        when it evaluates this request, it responds with 204 (No
        Notification). If there are no reportable changes as per <xref
        target="RFC5839"></xref>, NOTIFY request generation
        is suppressed. When the notifier can aggregate several modifications,
        this re-subscription enables the processing of that mode thereafter.
        Indeed, the re-subscription may be quite process-intensive, especially
        when there are a large number of relevant reported resources.</t>
      </section>
    </section>
  </back>
</rfc>
