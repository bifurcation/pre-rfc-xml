<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
]>


<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<?rfc strict="yes" ?>

<?rfc toc="yes"?>
<?rfc tocdepth="2"?>

<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>

<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>


<rfc number="8522" category="info" submissionType="independent" ipr="trust200902">


<front>
  <title>Looking Glass Command Set</title>

  <author initials="M." surname="Stubbig" fullname="Markus Stubbig">
    <organization>Independent</organization>
    <address>
      <postal>
        <street></street>
        <country>Germany</country>
      </postal>
      <email>stubbig.ietf@gmail.com</email>
    </address>
  </author>

  <date month="February" year="2019" />

  <keyword>Looking Glass</keyword>

  <abstract>
    <t>This document introduces a command set standard to the web-based "Network Looking Glass" software. Its purpose is to provide application programmers uniform access to the Looking Glass service and to analyze a standardized response.</t>

    <t>The interface is supposed to provide the same level of information as web-based interfaces, but in a computer-readable format.</t>
  </abstract>
</front>

<middle>
  <section title="Introduction">
    <t>Many Internet service providers (ISPs) and Internet exchange points (IXPs) offer a complimentary web-based service to their customers and the general public that gives insights to the backbone routing table, BGP neighbor information, or offered routes. This service is known as a "Network Looking Glass". Because they utilize a web-based interface, it is hard to automate access to the services and make that automation transferable between different service implementations.</t>

    <t>This document describes a common command set to provide application programmers uniform access to Looking Glass services.</t>

    <t>The commands are intended to provide the same level of information as available via web-based interfaces, but to do so in a computer-readable format. The intention is that multiple implementers of Looking Glass services can provide access through these commands so that an application can make use of the different implementations.</t>


    <t>The command set is split into the following categories: mandatory to support, optional, and additional. The commands are extensible for new features and for value-add by implementations.</t>

    <t>The Looking Glass command set is described as a language-independent
    concept. Consequently, any programming language that satisfies the
    commands listed in the following sections is acceptable.</t> 

    <t>This work is not the output of the IETF and is presented in the hope that Looking Glass implementers will offer a common programmable interface.</t>

    <section title="Background">
      <t>The requirement of a uniform access to a Looking Glass service
      becomes important when multiple Looking Glasses are part of a monitoring
      system. Implementing a web client and HTTP parser for every kind of web-based Looking Glass is a time-consuming workaround. However, the Looking Glass command set is a much more viable, compatible, and scalable solution.</t>
    </section>

    <section title="Syntax Notation">
      <t>This specification uses the JavaScript Object Notation (JSON) of <xref target="RFC8259"></xref> arranged as <xref target="A">JSend-compliant</xref> responses.</t>
    </section>

    <section title="Examples">
      <t>All URLs in this documentation use the reserved sample domain of
      "example.net" as defined in Section 6.5 of <xref target="RFC6761"></xref>.</t>
      <t>The URLs further use the fixed <xref target="RFC5785"></xref> prefix of ".well-known/looking-glass" to prevent a collision in the domain's namespace.</t>
      <t>IPv4 addresses use the documentation block of 192.0.2.0/24 <xref
      target="RFC5737"></xref> and IPv6 addresses reside in the reserved
      prefix of 2001:DB8::/32 <xref target="RFC3849"></xref>. BGP Autonomous
      System (AS) numbers are chosen from the private AS range defined in <xref target="RFC6996"></xref>.</t>
      <t>The examples skip some required parameters for reasons of simplicity.</t>
    </section>
  </section>

  <section anchor="operation" title="Operation">
    <t>A client issues a query using the HTTP GET method to request specific resources from the server. The resource is a URI and can be informational or a command execution. The client must present all necessary parameters for the server to execute the command on the selected router. Every call is stateless and independent of the previous one.</t>

    <t>The path component of the resource URI must use the prefix of ".well-known/looking-glass" (see <xref target="iana-well-known"></xref>) to stay namespace neutral.</t>

    <t>The "call" is a request from the client that specifies a predefined
    operation ("function") that the server will execute on a selected
    router. The "command" is a task executed on the router and initiated by
    the server on behalf of the client. The type and scope of all commands are
    defined and limited by the server. The client must not be able to execute
    random commands on the targeting router. There must not be any direct
    communication between the client and the router.</t> 

    <t>After the execution of the command on the selected router has finished, the server replies to the client if the operation has either succeeded, failed, or timed out. The response is sent to the client in JSON format. The communication protocol used between the server and router is not specified by this document; any method (e.g., Telnet, SSH, NETCONF, serial console) is acceptable.</t>

    <t>All parameters and their values are case insensitive.</t>


    <section title="Method Parameters">
      <t>Method parameters are mandatory components of the URI and are placed in the "path" section in terms of <xref target="RFC7320"></xref>. Basically, the method parameters specify the call and determine which command the client wants to be executed on the selected router.</t> 
    </section>

    <section title="Query Parameters">
      <t>Query parameters are optional components of the URI and are placed in the "query" section in terms of <xref target="RFC7320"></xref>. Generally, the query parameters are additional instructions for the requested command.</t>

      <t><list style="hanging" hangIndent="3">
        <t hangText="protocol">
          <vspace/>Restrict the command and method parameters to use the
	  specified protocol and version. Protocol is selected as "Address
	  Family Identifier" <xref target="IANA-AFN"></xref> <xref
	  target="RFC4760"></xref> and optionally as "Subsequent Address
	  Family Identifier" <xref target="IANA-SAFI"></xref> separated by a comma.

          <vspace/>Default value is 1,1  (IP version 4, unicast).
          <vspace/>JSON datatype is String.
          <vspace/>Examples:
          <list style='symbols'>
            <t>protocol=2,1  (IP version 6, unicast)</t>
            <t>protocol=26   (MPLS, no SAFI used)</t>
          </list>
        </t>

        <t hangText="router">
          <vspace/>Run the command on the router identified by its name. This is not necessarily the router's hostname as long as the Looking Glass software recognizes it.
          <vspace/>Default value is the first router in the list of available routers.
          <vspace/>JSON datatype is String.
          <vspace/>Example: router=rbgn06.example.net
        </t>

        <t hangText="routerindex">
          <vspace/>Run the command on this router identified by its position in the list of available routers.
          <vspace/>Default value is "0".
          <vspace/>JSON datatype is Number.
          <vspace/>Example: routerindex=8
        </t>

        <t hangText="random">
          <vspace/>Append a random string to prevent the client (or an intermediate proxy) from caching the response. The server must ignore its value.
          <vspace/>No default value.
          <vspace/>JSON datatype is String.
          <vspace/>Example: random=517A93B50
        </t>

        <t hangText="vrf">
          <vspace/>Run the command from the selected routing table. This parameter is valid only on routers that support "Virtual Routing and Forwarding" (VRF).
          <vspace/>No default value.
          <vspace/>JSON datatype is String.
          <vspace/>Example: vrf=mgmt
        </t>

        <t hangText="runtime">
          <vspace/>Stop executing the command after the runtime limit (in seconds) is exceeded. A value of 0 disables the limit.
          <vspace/>Default value is "30".
          <vspace/>JSON datatype is Number.
          <vspace/>Example: runtime=60
        </t>

        <t hangText="format">
          <vspace/>Request the server to provide the output (if any) in the
	  selected format. Specify multiple formats separated by a comma in descending order of preference. See <xref target="router-details"></xref> for more details.
          <vspace/>Default value is "text/plain" (raw/unformatted output).
          <vspace/>JSON datatype is String.
          <vspace/>Example: format=application/yang,text/plain
        </t>
      </list></t>
    </section>

    <section title="Response">
      <t>The HTTP response header contains an appropriate HTTP status code as defined in <xref target="RFC7231"></xref> with the Content-Type set to "application/json".</t>

      <t>The HTTP body contains details and error descriptions. The response
      text must comply with the JSON syntax specification JSend, which is
      briefly explained in <xref target="A"></xref>. Consequently, every
      response must contain a "status" field of either "success", "fail", or
      "error" as explained in the following sections.</t>

      <section title="Success" anchor="response_success">
        <t>A successful response must set the "status" field to "success". It must also contain a "data" object including the following information:</t>
        <t><list style="hanging" hangIndent="3">
          <t hangText="performed_at">
            <vspace blankLines="0" />
            Combined date and time in UTC <xref target="iso8601">ISO
	  8601</xref> indicating when the operation finished. This information
	  must be present.</t> 
          <t hangText="runtime">
            <vspace blankLines="0" />
            Amount of seconds (wallclock) used to run the command. This information must be present.</t>
          <t hangText="router">
            <vspace blankLines="0" />
            Name of the router that executed the command. This information may be present.</t>
          <t hangText="output">
            <vspace blankLines="0" />
            Output of the command in a format that was requested by the
	  client; it otherwise defaults to raw output as it appeared on the router's
	  command-line interface (CLI). It might even be blank if the command did not produce any output. This information should be present.</t>
          <t hangText="format">
            <vspace blankLines="0" />
            Selected output format by the server. The client might request multiple formats so that the "Looking Glass" server has to choose the best option and tell the client which format was selected. This information should be present (defaults to "text/plain" if missing).
          </t>
       </list></t>

       <t>Adding more information to the response is permitted and must be placed inside the "data" object.</t>
       <t>The HTTP status code should be 200.</t>

       <t>
         <figure>
           <preamble>Example:</preamble>
           <artwork align="left"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
{
  "status" : "success",
  "data" : {
    "router" : "route-server.lookingglass.example.net"
    "performed_at" : "2014-10-15T17:15:34Z",
    "runtime" : 2.63,
    "output" : [
      "full raw output from the observing router..."
    ],
    "format" : "text/plain"
  }
}]]></artwork>
          </figure>
        </t>
      </section>

      <section title="Fail">
        <t>A status of "fail" indicates that the selected command was executed
	on the router but failed to succeed. The response message must set the
	"status" field to "fail" and must contain the "data" object with
	command-specific content listed in <xref target="response_success"/>.</t>

        <t>The HTTP status code should be 200.</t>
        <t>
          <figure>
           <preamble>Example:</preamble>
           <artwork align="left"><![CDATA[
HTTP/2.0 200 OK
{
  "status" : "fail",
  "data" : {
    "performed_at" : "2014-10-18T20:04:37Z",
    "runtime" : 10.37,
    "output" : [
      "Sending 5, 100-byte ICMP Echos to 192.0.2.5",
      ".....",
      "Success rate is 0 percent (0/5)"
    ],
    "format" : "text/plain",
    "router" : "route-server.lookingglass.example.net"
  }
}
]]></artwork>
          </figure>
        </t>
      </section>

      <section title="Error">
        <t>The status "error" represents either that the command timed out or
	that an error occurred in processing the request. The response message
	must set the "status" field to "error" and must contain the "message"
	key, which keeps a meaningful message, explaining what went wrong.</t>
        <t>The response may contain the "data" key with required values listed
	in <xref target="response_success"/>. It may also include a "code"
	field that carries a numeric code corresponding to the error.</t> 

        <t>The HTTP status code should be 400 in case of a client-side error, 500 in case of a server-side error, or 502 for errors occurring on the target router. Code 504 should be used when a command timed out.</t>

        <t>
          <figure>
           <preamble>Example:</preamble>
           <artwork align="left"><![CDATA[
HTTP/1.1 400 Bad Request
{
  "status" : "error",
  "message" : "Unrecognized host or address."
}
]]></artwork>
          </figure>
        </t>
      </section>
    </section>
  </section>

  <section title="Functions">
    <t>The Looking Glass command set provides functions that are either mandatory to support or optional to implement. The same principle applies to the web-based Looking Glass.</t>
    <t>It is not possible for any function to modify the server's state. Therefore, all HTTP methods are GET operations.</t>
    <t>Variables are templated and expanded in accordance with <xref target="RFC6570"></xref>.</t>

    <section title="Diagnostic Commands">
      <section title="Ping">
        <t>Send echo messages to validate the reachability of a remote host and measure round-trip time. The host can be a name or address.</t>
        <t>Implementation of the ping command is mandatory.</t>
        <t>Syntax:
	https://example.net/.well-known/looking-glass/v1/ping/{host}</t>
        <t>
          <figure>
           <preamble>Example query:</preamble>
           <artwork align="left"><![CDATA[
GET /.well-known/looking-glass/v1/ping/2001:DB8::35?protocol=2,1
Host: example.net
]]></artwork>
          </figure>
        </t>
        <t>
          <figure>
            <preamble>Example response:</preamble>
            <artwork align="left"><![CDATA[
HTTP/1.1 200 OK
{
  "status" : "success",
  "data" : {
    "min" : 40,
    "avg" : 41,
    "max" : 44,
    "rate" : 100,
    "output" : [
      "Sending 5, 100-byte ICMP Echos to 2001:DB8::35",
      "!!!!!",
      "Success rate is 100 percent (5/5)"
    ],
    "format" : "text/plain",
    "performed_at" : "2014-10-04T14:40:58Z",
    "runtime" : 0.77,
    "router" : "c2951.lab.lg.example.net"
  }
}
]]></artwork>
          </figure>
        </t>
      </section>

      <section title="Traceroute">
        <t>Trace the path from the executing router to the destination host and list all intermediate hops. The host can be a name or address.</t>
        <t>Implementation of the traceroute command is optional.</t>
        <t>Syntax:
	https://example.net/.well-known/looking-glass/v1/traceroute/{host}
	</t>
        <t>
          <figure>
            <preamble>Example query:</preamble>
            <artwork align="left"><![CDATA[
GET /.well-known/looking-glass/v1/traceroute/192.0.2.8?routerindex=5
Host: example.net
]]></artwork>
          </figure>
        </t>
        <t>
          <figure>
            <preamble>Example response:</preamble>
            <artwork align="left"><![CDATA[
HTTP/1.1 200 OK
{
  "status": "success",
  "data": {
    "output": [
      "Tracing the route to 192.0.2.8",
      "",
      "  1 198.51.100.77 28 msec 28 msec 20 msec",
      "  2 203.0.113.130 52 msec 40 msec 40 msec",
      "  3 192.0.2.8 72 msec 76 msec 68 msec"
    ],
    "format": "text/plain",
    "performed_at": "2018-06-10T12:09:31Z",
    "runtime": 4.21,
    "router": "c7206.lab.lg.example.net"
  }
}
]]></artwork>
          </figure>
        </t>
      </section>
    </section>

    <section title="Informational Commands">
      <section title="show route">
        <t>Retrieve information about a specific subnet from the routing table.</t>
        <t>Implementation of the "show route" command is mandatory.</t>
        <t>Syntax: https://example.net/.well-known/looking-glass/v1/show/route/{addr}</t>
        <t>
          <figure>
            <preamble>Example query:</preamble>

            <artwork align="left"><![CDATA[
GET /.well-known/looking-glass/v1/show/      [multiline]
        route/2001:DB8::/48?protocol=2,1
Host: example.net
]]></artwork>
          </figure>
        </t>
        <t>
          <figure>
            <preamble>Example response:</preamble>
            <artwork align="left"><![CDATA[
HTTP/1.1 200 OK
{
  "status": "success",
  "data": {
    "output": [
      "S   2001:DB8::/48 [1/0]",
      "     via FE80::C007:CFF:FED9:17, FastEthernet0/0"
    ],
    "format": "text/plain",
    "performed_at": "2018-06-11T17:13:39Z",
    "runtime": 1.39,
    "router": "c2951.lab.lg.example.net"
  }
}
]]></artwork>
          </figure>
        </t>
      </section>

      <section title="show bgp">

        <t>Display a matching record from the BGP routing table. This should
	include networks, next hop, and may include metric, local preference,
	path list, weight, etc.</t>
        <t>Implementation of the "show bgp" command is optional.</t>
        <t>Syntax:
	https://example.net/.well-known/looking-glass/v1/show/bgp/{addr}</t>
        <t>
          <figure>
            <preamble>Example query:</preamble>
            <artwork align="left"><![CDATA[
GET /.well-known/looking-glass/v1/show/bgp/192.0.2.0/24
Host: example.net
]]></artwork>
          </figure>
        </t>
        <t>
          <figure>
            <preamble>Example response:</preamble>
            <artwork align="left"><![CDATA[
HTTP/1.1 200 OK
{
  "status": "success",
  "data": {
    "output": [
      "BGP routing table entry for 192.0.2.0/24, version 2",
      "Paths: (2 available, best #2, table default)",
      "  Advertised to update-groups:",
      "     1",
      "  Refresh Epoch 1",
      "  Local",
      "    192.0.2.226 from 192.0.2.226 (192.0.2.226)",
      "      Origin IGP, metric 0, localpref 100, valid, internal",
      "[...]"
    ],
    "format": "text/plain",
    "performed_at": "2018-06-11T21:47:17Z",
    "runtime": 2.03,
    "router": "c2951.lab.lg.example.net"
  }
}
]]></artwork>
          </figure>
        </t>
      </section>

      <section title="show bgp summary">

        <t>Print a summary of BGP neighbor status. This may include the
	neighbor BGP ID, autonomous system number, duration of peering, number
	of received prefixes, etc.</t> 
        <t>Implementation of the "show bgp summary" command is optional.</t>
        <t>Syntax: https://example.net/.well-known/looking-glass/v1/show/bgp/summary</t>
        <t>
          <figure>
            <preamble>Example:</preamble>

            <artwork align="left"><![CDATA[
GET /.well-known/looking-glass/v1/show/bgp/summary?     [multiline]
       protocol=2&routerindex=3
Host: example.net
]]></artwork>
          </figure>
        </t>
        <t>
          <figure>
            <preamble>Example response:</preamble>
            <artwork align="left"><![CDATA[
HTTP/1.1 200 OK
{
  "status": "success",
  "data": {
    "output": [
      "BGP router identifier 192.0.2.18, local AS number 64501",
      "BGP table version is 85298, main routing table version 85298",
      "50440 network entries using 867568 bytes of memory",
      "[...]",
      "Neighbor        V       AS MsgRcvd MsgSent   TblVer  Up/Down",
      "2001:DB8:91::24 4    64500  481098  919095   85298   41w5d"
    ],
    "format": "text/plain",
    "performed_at": "2018-06-11T21:59:21Z",
    "runtime": 1.91,
    "router": "c2951.lab.lg.example.net"
  }
}
]]></artwork>
          </figure>
        </t>
      </section>

      <section title="show bgp neighbors">
        
        <t>Provide detailed information on BGP neighbor connections. Available details may include neighbor BGP ID, advertised networks, learned networks, autonomous system number, capabilities, protocol, statistics, etc.</t>
        <t>Implementation of the "show bgp neighbors" command is optional.</t>
        <t>Syntax: https://example.net/.well-known/looking-glass/v1/show/bgp/neighbors/{addr}</t>
        <t>
          <figure>
            <preamble>Example query:</preamble>
            <artwork align="left"><![CDATA[
GET /.well-known/looking-glass/v1/show/bgp/neighbors/192.0.2.226
Host: example.net
]]></artwork>
          </figure>
        </t>
        <t>
          <figure>
            <preamble>Example response:</preamble>
            <artwork align="left"><![CDATA[
HTTP/1.1 200 OK
{
  "status": "success",
  "data": {
    "output": [
      "BGP neighbor is 192.0.2.226, remote AS 64500, internal link",
      "  BGP version 4, remote router ID 198.51.100.31",
      "  BGP state = Established, up for 01:24:06",
      "[...]"
    ],
    "format": "text/plain",
    "performed_at": "2018-06-11T21:41:17Z",
    "runtime": 1.87,
    "router": "c2951.lab.lg.example.net"
  }
}
]]></artwork>
          </figure>
        </t>
      </section>
    </section>

    <section title="Organizational Commands">
      <t>The following organizational commands must be included in the implementation.</t>

      <section title="router list">
        <t>Provides a full list of routers that are available for command execution. This list includes the router ID and its name. It is equivalent to the common "router" HTML drop-down form element and contains the same information.</t>
        <t>Syntax: https://example.net/.well-known/looking-glass/v1/routers</t>
        <t>
          <figure>
            <preamble>Example response:</preamble>
            <artwork align="left">
{
  "status" : "success",
  "data" : {
    "routers" : [
      "route-server.lookingglass.example.net",
      "customer-edge.lookingglass.example.net",
      "provider-edge.lookingglass.example.net"
    ],
    "performed_at" : "2014-10-19T20:07:01Z",
    "runtime" : 0.73
  }
}
</artwork>
          </figure>
        </t>
      </section>

      <section anchor="router-details" title="router details">
        <t>Lists additional information about the selected router specified by
	its router index. The response must contain the router's hostname and
	router index. The response may contain more details like output
	format, country code, city, administrative contact, vendor, and
	model.</t> 
        <t>Available output formats are specified by Internet media type as of
	<xref target="RFC6838"></xref> and listed in <xref
	target="IANA-MT"></xref>. If the routers support multiple formats,
	they are separated by a comma.</t> 

        <t>The router might provide output formats that are not yet registered or listed in <xref target="IANA-MT"></xref>. For example, output in NETCONF format could use "text/x.netconf". <xref target="RFC6838"></xref> provides a tree for unregistered subtypes.</t>
        <t>A missing output format defaults to "text/plain", which is a copy of the raw command-line output.</t>
        <t>Syntax:
	https://example.net/.well-known/looking-glass/v1/routers/{number}</t> 
        <t>
          <figure>
            <preamble>Example query:</preamble>
            <artwork align="left"><![CDATA[
GET /.well-known/looking-glass/v1/routers/1
Host: example.net
]]></artwork>
          </figure>
        </t>
        <t>
          <figure>
            <preamble>Example response:</preamble>
            <artwork align="left"><![CDATA[
{
  "status" : "success",
  "data" : {
    "id" : 1,
    "name" : "customer-edge.lookingglass.example.net",
    "format" : "text/plain,text/x.netconf",
    "country" : "de",
    "autonomous_system" : 64512
  }
}
]]></artwork>
          </figure>
        </t>
      </section>

      <section title="commands" anchor="commands">
        <t>Provides a full list of commands that are available for
	execution. The list includes mandatory to support, optional, and additional
	(<xref target="commands_extensible"/>) commands. It is equivalent to
	the "command" HTML drop-down or radio-button form element and contains
	the same information.</t> 
        <t>The list is formatted as a "commands" array containing one object
	per command. This object contains informative strings about the
	current command: href, arguments, description, and command.</t> 
        <t>Syntax:
	https://example.net/.well-known/looking-glass/v1/cmd</t> 
        <t>
          <figure>
            <preamble>Example response:</preamble>
            <artwork align="left"><![CDATA[
{
  "status" : "success",
  "data" : {
    "commands" : [
      {
        "href" : "https://example.net/.well-known/     [multiline]
                          looking-glass/v1/show/route",
        "arguments" : "{addr}",
        "description" : "Print records from IP routing table",
        "command" : "show route"
      },
      {
        "href" : "https://example.net/.well-known/     [multiline]
                          looking-glass/v1/traceroute",
        "arguments" : "{addr}",
        "description" : "Trace route to destination host",
        "command" : "traceroute"
      }
    ]
  }
}
]]></artwork>
          </figure>
        </t>
      </section>
    </section>


    <section title="Extensible Commands" anchor="commands_extensible">
      <t>The list of commands discussed in <xref target="commands"/> may be expanded as long as the principles of this document are observed.</t>
      <t>For example, a Looking Glass provider may not be offering BGP-related commands because of an OSPF-based network.</t>
      <t>
        <figure>
        <preamble>The sample command might be:</preamble>
          <artwork align="left"><![CDATA[
GET /.well-known/looking-glass/v1/show/ospf/database
Host: example.net
]]></artwork>
        </figure>
      </t>
    </section>
  </section>



  <section title="Miscellaneous">
    <t>The network traffic sent by a "Looking Glass" is not appropriate when measuring Service Level Agreements or validating Quality of Service settings.</t>
    <t>If a monitoring system uses the Looking Glass command set for reachability checks, it should not rely on the HTTP status codes but on the "status" message field inside the HTTP body.</t>
  </section>


  <section anchor="IANA" title="IANA Considerations">
    <section anchor="iana-well-known" title="Well-Known URIs Registry">
      <t>This specification registers a Well-Known URI <xref target="RFC5785"></xref>:</t>

      <t>URI Suffix: looking-glass</t>

      <t>Change Controller: M.&nbsp;Stubbig</t>

      <t>Reference : This document, <xref target="operation"></xref></t>
    </section>
  </section>


  <section title="Security Considerations">
    <t>The use of HTTPS is required to ensure a high level of security, privacy, and confidentiality during transit.</t>

    <section title="Abuse Potential">
      <t>The main goal of the Looking Glass command set is the automated usage
      of the Looking Glass service. This allows the scripting of API calls,
      which could be used as a Distributed Denial of Service (DDoS) attack. It
      is recommended that implementers of the Looking Glass API take steps to
      mitigate the above described abuse. The strategy can include blocking or
      rate-limiting by client IP address or target IP network.</t>
    </section>

    <section title="Authentication">
      <t>Authentication is not a requirement because the current Looking Glass web services are usable without authentication. Requests to the proposed API service may be authenticated by any method. The decision is up to the implementer's security requirements.</t>
    </section>

    <section title="Minimal Information">
      <t>Some of the described commands provide a detailed insight into the
      provider's network. It is therefore up to the implementer's security
      policy to dismiss commands that are marked as "optional" or to restrict commands that are marked as "mandatory".</t>
    </section> 
  </section>
</middle>



<back>
  <references title='Normative References'>
    <?rfc include="reference.RFC.4760"?>
    <?rfc include="reference.RFC.5785"?>
    <?rfc include="reference.RFC.6570"?>
    <?rfc include="reference.RFC.8259"?>
    <?rfc include="reference.RFC.7231"?>

    <reference anchor="JSend" target="https://labs.omniti.com/labs/jsend">
      <front>
        <title>JSend</title>
        <author>
          <organization>OmniTI Labs</organization>
        </author>
        <date year="2014" />
      </front>
    </reference>

    <reference anchor="IANA-AFN" target="https://www.iana.org/assignments/address-family-numbers/">
      <front>
        <title>Address Family Numbers</title>
        <author>
          <organization>IANA</organization>
        </author>
        <date/>
      </front>
    </reference>

    <reference anchor="IANA-SAFI" target="https://www.iana.org/assignments/safi-namespace/">
      <front>
        <title>Subsequent Address Family Identifiers (SAFI) Parameters</title>
        <author>
          <organization>IANA</organization>
        </author>
        <date />
      </front>
    </reference>

    <reference anchor="IANA-MT" target="https://www.iana.org/assignments/media-types/">
      <front>
        <title>Media Types</title>
        <author>
          <organization>IANA</organization>
        </author>
        <date />
      </front>
    </reference>
  </references>

  <references title='Informative References'>
    <?rfc include="reference.RFC.3849"?>
    <?rfc include="reference.RFC.5737"?>
    <?rfc include="reference.RFC.6761"?>
    <?rfc include="reference.RFC.6838"?>
    <?rfc include="reference.RFC.6996"?>
    <?rfc include="reference.RFC.7320"?>



    <reference anchor="iso8601">
      <front>
        <title>Data elements and interchange formats - Information
               interchange - Representation of dates and times</title>
        <author>
          <organization>International Organization for Standardization</organization>
        </author>
        <date month="December" year="2004"/>
      </front>
    </reference>
  </references>

  <section title="JSend" anchor="A">
    <t>According to <xref target="JSend"></xref>:
<list><t>JSend is a specification that lays down some rules for how JSON
responses from web servers should be formatted. JSend focuses on
application-level (as opposed to protocol- or transport-level) messaging which
makes it ideal for use in REST-style applications and APIs.</t></list>
</t>
    <t>A basic JSend-compliant response must contain a "status" key and should contain "data", "message", and "code" keys dependent on the status value. The following table lists the required and optional keys.</t>
    <texttable anchor="jsend_keys" title="Type and Keys in JSend Response">
      <ttcol align="left">Type</ttcol>
      <ttcol align="left">Required keys</ttcol>
      <ttcol align="left">Optional keys</ttcol>

      <c>success</c>
      <c>status, data</c>
      <c></c>

      <c>fail</c>
      <c>status, data</c>
      <c></c>

      <c>error</c>
      <c>status, message</c>
      <c>code, data</c>
    </texttable>
  </section>
</back>

</rfc>
