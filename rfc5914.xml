<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc2119 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
  <!ENTITY rfc5280 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml'>
  <!ENTITY rfc3629 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml'>
  <!ENTITY rfc3852 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3852.xml'>
  <!ENTITY rfc4108 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4108.xml'>
  <!ENTITY rfc5646 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5646.xml'>
]>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc subcompact="no"?>

<rfc number="5914" ipr="pre5378Trust200902" category="std">
  <front>
    <title abbrev="TAF">Trust Anchor Format</title>
    <author initials="R.H." surname="Housley" fullname="Russ Housley">
      <organization>Vigil Security, LLC</organization>
      <address>
        <postal>
          <street>918 Spring Knoll Drive</street>
          <city>Herndon</city>
          <region>VA</region>
          <code>20170</code>
        </postal>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="S.A." surname="Ashmore" fullname="Sam Ashmore">
      <organization>National Security Agency</organization>
      <address>
        <postal>
          <street>Suite 6751</street>
          <street>9800 Savage Road</street>
          <city>Fort Meade</city>
          <region>MD</region>
          <code>20755</code>
        </postal>
        <email>srashmo@radium.ncsc.mil</email>
      </address>
    </author>
    <author initials="C.W." surname="Wallace" fullname="Carl Wallace">
      <organization>Cygnacom Solutions</organization>
      <address>
        <postal>
          <street>Suite 5400</street>
          <street>7925 Jones Branch Drive</street>
          <city>McLean</city>
          <region>VA</region>
          <code>22102</code>
        </postal>
        <email>cwallace@cygnacom.com</email>
      </address>
    </author>
    <date month="June" year="2010" />
    <area>Security</area>

<keyword>PKI</keyword>
<keyword>certificate</keyword>
<keyword>public key</keyword>

    <abstract>
      <t>
        This document describes a structure for representing trust anchor information.  A trust anchor is an authoritative entity represented by a public key and associated data.  The public key is used to verify digital signatures, and the associated data is used to constrain the types of information or actions for which the trust anchor is authoritative.  The structures defined in this document are intended to satisfy the format-related requirements defined in Trust Anchor Management Requirements.
      </t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <t>
        Trust anchors are widely used to verify digital signatures and validate certification paths <xref target="RFC5280"/><xref target="X.509"/>.  They are required when validating certification paths.  Though widely used, there is no standard format for representing trust anchor information.  This document describes the TrustAnchorInfo structure.  This structure is intended to satisfy the format-related requirements expressed in Trust Anchor Management Requirements <xref target="TA-MGMT-REQS"/> and is expressed using ASN.1 <xref target="X.680"/>.  It can provide a more compact alternative to X.509 certificates for exchanging trust anchor information and provides a means of associating additional or alternative constraints with certificates without breaking the signature on the certificate.</t>
      <section title="Terminology">
        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
          document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.
        </t>
      </section>
    </section>
    <section title="Trust Anchor Information Syntax">
      <t>This section describes the TrustAnchorInfo structure.</t>
        <figure>
          <artwork>
            <![CDATA[
TrustAnchorInfo ::= SEQUENCE {
   version   TrustAnchorInfoVersion DEFAULT v1,
   pubKey    SubjectPublicKeyInfo,
   keyId     KeyIdentifier,
   taTitle   TrustAnchorTitle OPTIONAL,
   certPath  CertPathControls OPTIONAL,
   exts      [1] EXPLICIT Extensions   OPTIONAL,
   taTitleLangTag   [2] UTF8String OPTIONAL }

TrustAnchorInfoVersion ::= INTEGER { v1(1) }

 ]]>
 </artwork>
</figure>
        <section title="Version">
          <t>
            version identifies the version of TrustAnchorInfo.  Future updates to this document may include changes to the TrustAnchorInfo structure, in which case the version number should be incremented.  However, the default value, v1, cannot be changed.
          </t>
        </section>
        <section title="Public Key">
      <t>
        pubKey identifies the public key and algorithm associated with the trust anchor using the SubjectPublicKeyInfo structure <xref target="RFC5280"/>.  The SubjectPublicKeyInfo structure contains the algorithm identifier followed by the public key itself.  The algorithm field is an AlgorithmIdentifier, which contains an object identifier and OPTIONAL parameters.  The object identifier names the public key algorithm and indicates the syntax of the parameters, if present, as well as the format of the public key.  The public key is encoded as a BIT STRING.  
      </t>
        </section>
      <section title="Key Identifier">
        <t>
          keyId contains the public key identifier of the trust anchor public key.  See Section 4.2.1.2 of <xref target="RFC5280"/> for a description of common key identifier calculation methods.
        </t>
      </section>  
          <section title="Trust Anchor Title">
            <figure>
              <artwork>
                <![CDATA[

 TrustAnchorTitle ::= UTF8String (SIZE (1..64))

]]>
              </artwork>
            </figure>
            <t>
              taTitle is OPTIONAL.  When it is present, it provides a
              human-readable name for the trust anchor.  The text is
              encoded in UTF-8 <xref target="RFC3629"/>, which
              accommodates most of the world's writing systems.  The
              taTitleLangTag field identifies the language used to
              express the taTitle.  When taTitleLangTag is absent,
              English ("en" language tag) is used.  The value of the taTitleLangTag should be a language tag as described in <xref target="RFC5646"/>.
            </t>
          </section>
          <section title="Certification Path Controls">
<figure>
<artwork>
 <![CDATA[
 CertPathControls ::= SEQUENCE {
   taName           Name,
   certificate      [0] Certificate OPTIONAL,
   policySet        [1] CertificatePolicies OPTIONAL,
   policyFlags      [2] CertPolicyFlags OPTIONAL,
   nameConstr       [3] NameConstraints OPTIONAL,
   pathLenConstraint[4] INTEGER (0..MAX) OPTIONAL}
 ]]>
 </artwork>
</figure>
      <t>
        certPath is OPTIONAL.  When it is present, it provides the controls needed to initialize an X.509 certification path validation algorithm implementation (see Section 6 of <xref target="RFC5280"/>).  When absent, the trust anchor cannot be used to validate the signature on an X.509 certificate.  
      </t>
      <t>taName provides the X.500 distinguished name associated with the trust anchor, and this distinguished name is used to construct and validate an X.509 certification path.  The name MUST NOT be an empty sequence.</t>
      <t>
        certificate provides an OPTIONAL X.509 certificate, which can be used in some environments to represent the trust anchor in certification path development and validation.  If the certificate is present, the subject name in the certificate MUST exactly match the X.500 distinguished name provided in the taName field, the public key MUST exactly match the public key in the pubKey field, and the subjectKeyIdentifier extension, if present, MUST exactly match the key identifier in the keyId field.  The complete description of the syntax and semantics of the Certificate are provided in <xref target="RFC5280"/>.  Constraints defined in the policySet, policyFlags, nameConstr, pathLenConstraint, and exts fields within TrustAnchorInfo replace values contained in a certificate or provide values for extensions not present in the certificate.  Values defined in these TrustAnchorInfo fields are always enforced.  Extensions included in a certificate are enforced only if there is no corresponding value in the TrustAnchorInfo.  Correspondence between extensions within certificate and TrustAnchorInfo fields is defined as follows:
      </t>
      <t>
      <list style="symbols">
        <t>an id-ce-certificatePolicies certificate extension corresponds to the CertPathControls.policySet field.</t>
        <t>an id-ce-policyConstraints certificate extension corresponds to the CertPolicyFlags.inhibitPolicyMapping and CertPolicyFlags.requireExplicitPolicy fields.</t>
        <t>an id-ce-inhibitAnyPolicy certificate extension corresponds to the CertPolicyFlags.inhibitAnyPolicy field.</t>
        <t>an id-ce-nameConstraints certificate extension corresponds to the CertPathControls.nameConstr field.</t>
        <t>the pathLenConstraint field of an id-ce-basicConstraints certificate extension corresponds to the CertPathControls.pathLenConstraint field (the presence of a CertPathControls structure corresponds to a TRUE value in the cA field of a BasicConstraints extension).</t>
        <t>any other certificate extension corresponds to the same type of extension in the TrustAnchorInfo.exts field.</t>
      </list>
      </t>
        <figure>
 <artwork>
   <![CDATA[
 CertificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation

 PolicyInformation ::= SEQUENCE {
   policyIdentifier  CertPolicyId,
   policyQualifiers  SEQUENCE SIZE (1..MAX) OF
                           PolicyQualifierInfo OPTIONAL }

 CertPolicyId ::= OBJECT IDENTIFIER
 ]]>
</artwork>
</figure>
      <t>
        policySet is OPTIONAL.  When present, it contains a sequence of certificate policy identifiers to be provided as inputs to the certification path validation algorithm.  When absent, the special value any-policy is provided as the input to the certification path validation algorithm.  The complete description of the syntax and semantics of the CertificatePolicies are provided in <xref target="RFC5280"/>, including the syntax for PolicyInformation.  In this context, the OPTIONAL policyQualifiers structure MUST NOT be included.
      </t>

      <figure>
<artwork>
 <![CDATA[
 CertPolicyFlags ::= BIT STRING {
   inhibitPolicyMapping   (0),
   requireExplicitPolicy  (1),
   inhibitAnyPolicy       (2) }
 ]]>
</artwork>
</figure>
      <t>
        policyFlags is OPTIONAL.  When present, three Boolean values for input to the certification path validation algorithm are provided in a BIT STRING.  When absent, the input to the certification path validation algorithm is { FALSE, FALSE, FALSE }, which represents the most liberal setting for these flags.  The three bits are used as follows:

        <list>
          <t>
            inhibitPolicyMapping indicates if policy mapping is allowed in the certification path.  When set to TRUE, policy mapping is not permitted.  This value represents the initial-policy-mapping-inhibit input value to the certification path validation algorithm described in Section 6.1.1 of <xref target="RFC5280"/>.
          </t>
          <t>
            requireExplicitPolicy indicates if the certification path MUST be valid for at least one of the certificate policies in the policySet.  When set to TRUE, all certificates in the certification path MUST contain an acceptable policy identifier in the certificate policies extension.  This value represents the initial-explicit-policy input value to the certification path validation algorithm described in Section 6.1.1 of <xref target="RFC5280"/>.  An acceptable policy identifier is a member of the policySet or the identifier of a policy that is declared to be equivalent through policy mapping.  This bit MUST be set to FALSE if policySet is absent.
          </t>
          <t>
            inhibitAnyPolicy indicates whether the special anyPolicy policy identifier, with the value { 2 5 29 32 0 }, is considered an explicit match for other certificate policies.  This value represents the initial-any-policy-inhibit input value to the certification path validation algorithm described in Section 6.1.1 of <xref target="RFC5280"/>.
          </t>
        </list>
      </t>
      <figure>
<artwork>
 <![CDATA[
 NameConstraints ::= SEQUENCE {
   permittedSubtrees  [0] GeneralSubtrees OPTIONAL,
   excludedSubtrees   [1] GeneralSubtrees OPTIONAL }

 GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree

 GeneralSubtree ::= SEQUENCE {
   base     GeneralName,
   minimum  [0] BaseDistance DEFAULT 0,
   maximum  [1] BaseDistance OPTIONAL }

 BaseDistance ::= INTEGER (0..MAX)
 ]]>
          </artwork>
        </figure>

      <t>
        nameConstr is OPTIONAL.  It has the same syntax and semantics
        as the Name Constraints certificate extension
        <xref target="RFC5280"/>, which includes a list of permitted
        names and a list of excluded names.  The definition of
        GeneralName can be found in <xref target="RFC5280"/>.  When it
        is present, constraints are provided on names (including
        alternative names) that might appear in subsequent X.509
        certificates in a certification path.  This field is used to
        set the initial-permitted-subtrees and
        initial-excluded-subtrees input values to the certification
        path validation algorithm described in Section 6.1.1 of <xref target="RFC5280"/>.  When this field is absent, the initial-permitted-subtrees variable is unbounded and the initial-excluded-subtrees variable is empty.

      </t>
            <t>
              The pathLenConstraint field gives the
              maximum number of non-self-issued intermediate certificates that may
              follow this certificate in a valid certification path.  (Note: The
              last certificate in the certification path is not an intermediate
              certificate and is not included in this limit.  Usually, the last
              certificate is an end entity certificate, but it can be a CA
              certificate.)  A pathLenConstraint of zero indicates that no non-self-issued intermediate certification authority (CA) certificates may follow in a valid
              certification path.  Where it appears, the pathLenConstraint field
              MUST be greater than or equal to zero.  Where pathLenConstraint does
              not appear, no limit is imposed.
            </t>

            <t>When the trust anchor is used to validate a certification path, CertPathControls provides limitations on certification paths that will successfully validate.  An application that is validating a certification path SHOULD NOT ignore these limitations, but the application can impose additional limitations to ensure that the validated certification path is appropriate for the intended application context.  As input to the certification path validation algorithm, an application MAY:</t>
      <t>
        <list style="symbols">
          <t>Provide a subset of the certification policies provided in the policySet;</t>
          <t>Provide a TRUE value, if appropriate, for any of the flags in the policyFlags;</t>
          <t>Provide a subset of the permitted names provided in the nameConstr;</t>
          <t>Provide additional excluded names to the ones that are provided in the nameConstr;</t>
          <t>Provide a smaller value for pathLenConstraint.</t>
        </list>
      </t>
          </section>
          <section title="Extensions">
            <t>exts is OPTIONAL.  When it is present, it can be used to associate additional information with the trust anchor using the standard Extensions structure.  Extensions that are anticipated to be widely used have been included in the CertPathControls structure to avoid overhead associated with use of the Extensions structure.  To avoid duplication with the CertPathControls field, the following types of extensions MUST NOT appear in the exts field and are ignored if they do appear: id-ce-certificatePolicies, id-ce-policyConstraints, id-ce-inhibitAnyPolicy, or id-ce-nameConstraints.</t>
          </section>
      </section>
    <section title="Trust Anchor List">
      <t>TrustAnchorInfo allows for the representation of a single
	trust anchor.  In many cases, it is convenient to represent a
	collection of trust anchors.  The TrustAnchorList structure is
	defined for this purpose.  TrustAnchorList is defined as a
	sequence of one or more TrustAnchorChoice objects.
	TrustAnchorChoice provides three options for representing a
	trust anchor.  The certificate option allows for the use of a
	certificate with no additional associated constraints.  The
	tbsCert option allows for associating constraints by removing
	a signature on a certificate and changing the extensions
	field.  


The taInfo option allows for use of the TrustAnchorInfo structure defined in this document.</t>
      <figure>
        <artwork>
          <![CDATA[
TrustAnchorList ::= SEQUENCE SIZE (1..MAX) OF TrustAnchorChoice

TrustAnchorChoice ::= CHOICE {
   certificate  Certificate,
   tbsCert      [1] EXPLICIT TBSCertificate,
   taInfo       [2] EXPLICIT TrustAnchorInfo }

 trust-anchor-list PKCS7-CONTENT-TYPE ::=
    { TrustAnchorList IDENTIFIED BY id-ct-trustAnchorList } 
    ]]>
        </artwork>
        </figure>
      <t>
        The TrustAnchorList structure can be protected using the
        SignedData structure defined in the Cryptographic Message
        Syntax (CMS) <xref target="RFC3852"/>.  The id-ct-trustAnchorList object identifier has been defined to represent TrustAnchorList payloads with CMS structures.</t>
      </section>
    <section title="Security Considerations">
      <t>Compromise of a trust anchor private key permits unauthorized parties to masquerade as the trust anchor, with potentially severe consequences.  Where TA-based constraints are enforced, the unauthorized holder of the trust anchor private key will be limited by the certification path controls associated with the trust anchor, as expressed in the certPath and exts fields.  For example, name constraints in the trust anchor will determine the name space that will be accepted in certificates that are validated using the compromised trust anchor.  Reliance on an inappropriate or incorrect trust anchor public key has similar potentially severe consequences.</t>
      <t>The compromise of a CA's private key leads to the same type of problems as the compromise of a trust anchor private key.  The unauthorized holder of the CA private key will be limited by the certification path controls associated with the trust anchor, as expressed in the certPath field or as an extension.</t>
      <t>Usage of a certificate independent of the TrustAnchorInfo structure that envelopes it must be carefully managed to avoid violating constraints expressed in the TrustAnchorInfo.  When enveloping a certificate in a TrustAnchorInfo structure, values included in the certificate should be evaluated to ensure there is no confusion or conflict with values in the TrustAnchorInfo structure.</t>
    </section>

  </middle>
  <back>
    <references title="Normative References">
      &rfc2119;&rfc5280;&rfc3629;&rfc3852;&rfc5646;

<!-- ietf-pkix-new-asn1 = RFC 5912 -->
<reference anchor='RFC5912'>
<front>
<title>New ASN.1 Modules for the Public Key Infrastructure Using X.509 (PKIX)</title>

<author initials='P' surname='Hoffman' fullname='Paul Hoffman'>
    <organization />
</author>

<author initials='J' surname='Schaad' fullname='Jim Schaad'>
    <organization />
</author>

<date month='June' year='2010' />

</front>

<seriesInfo name='RFC' value='5912' />

</reference>


      <reference anchor="X.680">
        <front>
          <title>
            ITU-T Recommendation X.680: Information Technology - Abstract Syntax Notation One
          </title>
          <author>
            <organization></organization>
          </author>
          <date year="2002" />
        </front>
      </reference>
    </references>

    <references title="Informative References">

<!-- draft-ietf-pkix-ta-mgmt-reqs -->
      <reference anchor="TA-MGMT-REQS">
        <front>
          <title>Trust Anchor Management Requirements</title>
          <author initials="R.R." surname="Reddy" fullname="Raksha Reddy">
            <organization/>
          </author>
          <author initials="C.W." surname="Wallace" fullname="Carl Wallace">
            <organization/>
          </author>
          <date month="March" year="2010" />
        </front>
        <seriesInfo name="Work in" value="Progress"/>
      </reference>

      <reference anchor="X.509">
        <front>
          <title>
            ITU-T Recommendation X.509 -
            The Directory - Authentication Framework
          </title>
          <author>
            <organization></organization>
          </author>
          <date year="2000" />
        </front>
      </reference>
    </references>
    <section title="ASN.1 Modules">
      <section title="ASN.1 Module Using 2002 Syntax" anchor="asn1_2002">
        <t>
         <xref target="asn1_2002"/> provides the normative ASN.1 definitions for the structures described in this specification using ASN.1 as defined in <xref target="X.680"/>.  It includes definitions imported from <xref target="RFC5280"/> and <xref target="RFC5912"/>.
      </t>

        <figure>
          <artwork>
            <![CDATA[
TrustAnchorInfoModule
{ joint-iso-ccitt(2) country(16) us(840) organization(1)
   gov(101) dod(2) infosec(1) modules(0) 33 }

DEFINITIONS IMPLICIT TAGS ::=
BEGIN

IMPORTS
Certificate, Name, SubjectPublicKeyInfo, TBSCertificate
FROM PKIX1Explicit-2009 -- from [RFC5912]
    {iso(1) identified-organization(3) dod(6) internet(1) security(5)
    mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-explicit-02(51)}
CertificatePolicies, KeyIdentifier, NameConstraints
FROM PKIX1Implicit-2009 -- from [RFC5912]
    {iso(1) identified-organization(3) dod(6) internet(1) security(5)
    mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-implicit-02(59)}
Extensions{}
FROM PKIX-CommonTypes-2009 -- from [RFC5912]
    { iso(1) identified-organization(3) dod(6) internet(1)
    security(5) mechanisms(5) pkix(7) id-mod(0)
    id-mod-pkixCommon-02(57) }         ;

TrustAnchorInfo ::= SEQUENCE {
   version   TrustAnchorInfoVersion DEFAULT v1,
   pubKey    SubjectPublicKeyInfo,
   keyId     KeyIdentifier,
   taTitle   TrustAnchorTitle OPTIONAL,
   certPath  CertPathControls OPTIONAL,
   exts      [1] EXPLICIT Extensions {{...}}   OPTIONAL,
   taTitleLangTag   [2] UTF8String OPTIONAL }

TrustAnchorInfoVersion ::= INTEGER { v1(1) }

TrustAnchorTitle ::= UTF8String (SIZE (1..64))

CertPathControls ::= SEQUENCE {
  taName           Name,
  certificate      [0] Certificate OPTIONAL,
  policySet        [1] CertificatePolicies OPTIONAL,
  policyFlags      [2] CertPolicyFlags OPTIONAL,
  nameConstr       [3] NameConstraints OPTIONAL,
  pathLenConstraint[4] INTEGER (0..MAX) OPTIONAL}

CertPolicyFlags ::= BIT STRING {
  inhibitPolicyMapping    (0),
  requireExplicitPolicy   (1),
  inhibitAnyPolicy        (2) }

TrustAnchorList ::= SEQUENCE SIZE (1..MAX) OF TrustAnchorChoice

TrustAnchorChoice ::= CHOICE {
  certificate  Certificate,
  tbsCert      [1] EXPLICIT TBSCertificate,
  taInfo       [2] EXPLICIT TrustAnchorInfo }

id-ct-trustAnchorList      OBJECT IDENTIFIER ::= { iso(1) 
    member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9) 
    id-smime(16) id-ct(1) 34 }

PKCS7-CONTENT-TYPE ::= TYPE-IDENTIFIER

trust-anchor-list PKCS7-CONTENT-TYPE ::=
    { TrustAnchorList IDENTIFIED BY id-ct-trustAnchorList }

    
END
          ]]>
          </artwork>
        </figure>
      </section>
        <section title="ASN.1 Module Using 1988 Syntax" anchor="asn1_1988">>
          <t>
            <xref target="asn1_1988"/> provides the normative ASN.1 definitions for the structures described in this specification using ASN.1 as defined in <xref target="X.680"/>.
          </t>
          <section title="ASN.1 Module">
            <figure>
              <artwork>
                <![CDATA[
TrustAnchorInfoModule-88
    { joint-iso-ccitt(2) country(16) us(840) organization(1)
      gov(101) dod(2) infosec(1) modules(0) 37 }

DEFINITIONS IMPLICIT TAGS ::=
BEGIN

IMPORTS
Certificate, Name, Extensions,
SubjectPublicKeyInfo, TBSCertificate
   FROM PKIX1Explicit88 -- from [RFC5280]
        { iso(1) identified-organization(3) dod(6) internet(1)
          security(5) mechanisms(5) pkix(7) id-mod(0)
          id-pkix1-explicit(18) }
CertificatePolicies, KeyIdentifier, NameConstraints
   FROM PKIX1Implicit88 -- [RFC5280]
        { iso(1) identified-organization(3) dod(6) internet(1)
          security(5) mechanisms(5) pkix(7) id-mod(0)
          id-pkix1-implicit(19) }
 ;

TrustAnchorInfo ::= SEQUENCE {
   version   TrustAnchorInfoVersion DEFAULT v1,
   pubKey    SubjectPublicKeyInfo,
   keyId     KeyIdentifier,
   taTitle   TrustAnchorTitle OPTIONAL,
   certPath  CertPathControls OPTIONAL,
   exts      [1] EXPLICIT Extensions   OPTIONAL,
   taTitleLangTag   [2] UTF8String OPTIONAL }

TrustAnchorInfoVersion ::= INTEGER { v1(1) }

TrustAnchorTitle ::= UTF8String (SIZE (1..64))

CertPathControls ::= SEQUENCE {
  taName           Name,
  certificate      [0] Certificate OPTIONAL,
  policySet        [1] CertificatePolicies OPTIONAL,
  policyFlags      [2] CertPolicyFlags OPTIONAL,
  nameConstr       [3] NameConstraints OPTIONAL,
  pathLenConstraint[4] INTEGER (0..MAX) OPTIONAL}

CertPolicyFlags ::= BIT STRING {
  inhibitPolicyMapping    (0),
  requireExplicitPolicy   (1),
  inhibitAnyPolicy        (2) }

TrustAnchorList ::= SEQUENCE SIZE (1..MAX) OF TrustAnchorChoice

TrustAnchorChoice ::= CHOICE {
  certificate  Certificate,
  tbsCert      [1] EXPLICIT TBSCertificate,
  taInfo       [2] EXPLICIT TrustAnchorInfo }

id-ct-trustAnchorList      OBJECT IDENTIFIER ::= { iso(1) 
    member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9) 
    id-smime(16) id-ct(1) 34 }
    
END
          ]]>
              </artwork>
            </figure>
          </section>
        </section>
    </section>
  </back>
</rfc>
