<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc strict="yes" ?>
<?rfc comments="no" ?>
<?rfc inline="no" ?>
<?rfc editing="no" ?>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc rfcedstyle="yes" ?>
<rfc submissionType="IETF" category="std" consensus="yes" number="6873" ipr="trust200902">
  <front>
    <title abbrev="Format for SIP CLF">Format for the Session Initiation
    Protocol (SIP) Common Log Format (CLF)</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <author fullname="Gonzalo Salgueiro" initials="G" surname="Salgueiro">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street>7200-12 Kit Creek Road</street>

          <city>Research Triangle Park</city>

          <region>NC</region>

          <code>27709</code>

          <country>US</country>
        </postal>

        <email>gsalguei@cisco.com</email>
      </address>
    </author>

    <author fullname="Vijay Gurbani" initials="V" surname="Gurbani">
      <organization>Bell Labs, Alcatel-Lucent</organization>

      <address>
        <postal>
          <street>1960 Lucent Lane</street>

          <street>Rm 9C-533</street>

          <city>Naperville</city>

          <region>IL</region>

          <code>60563</code>

          <country>US</country>
        </postal>

        <email>vkg@bell-labs.com</email>
      </address>
    </author>

    <author fullname="Adam Roach" initials="A" surname="B. Roach">
      <organization>Mozilla</organization>

      <address>
        <postal>
          <street></street>

          <street></street>

          <city>Dallas</city>

          <region>TX</region>

          <code></code>

          <country>US</country>
        </postal>

        <email>adam@nostrum.com</email>
      </address>
    </author>

    <date month="February" year="2012" />


    <area>Real Time Applications and Infrastructure</area>

    <workgroup>SIPCLF</workgroup>



    <abstract>
      <t>The SIPCLF working group has defined a Common Log Format (CLF) framework for
      Session Initiation Protocol (SIP) servers. This CLF mimics
      the successful event logging format found in well-known web
      servers like Apache and web proxies like Squid. This document proposes
      an indexed text encoding format for the SIP CLF that
      retains the key advantages of a text-based format while significantly
      increasing processing performance over a purely text-based
      implementation. This file format adheres to the SIP CLF information model and
      provides an effective encoding scheme for all mandatory and optional
      fields that appear in a SIP CLF record.</t>
    </abstract>

  </front>

  <middle>
    <section anchor="Introduction" title="Introduction">
      <t>The extensive list of benefits and the widespread adoption of the
      Apache Common Log Format (CLF) has prompted the development of an
      analogous event logging mechanism for the Session
      Initiation Protocol (SIP) <xref target="RFC3261"></xref>. Implementing a
      logging scheme for SIP is a considerable challenge. In part, this is due 
      to the fact that the behavior of a SIP entity is more complex as
      compared to an HTTP entity. Additionally, there are shortcomings to the
      purely text-based HTTP CLF that need to be addressed in
      order to allow for real-time inspection of SIP log files <xref
      target="RFC6872"></xref>. Experience
      with Apache CLF has shown that dealing with large
      quantities of log data can be very processor intensive, as doing so
      necessarily requires reading and parsing every byte in the log file(s)
      of interest.</t>

      <t>An implementation-independent framework for the SIP CLF has been
      defined in <xref target="RFC6872"></xref>.
      This memo describes an indexed text file format for logging SIP messages
      received and sent by SIP clients, servers, and proxies that adheres to
      the information model presented in Section 8 of <xref
      target="RFC6872"></xref>. This document
      defines a format that is no more difficult to generate by logging
      entities than standard (i.e., non-indexed) text log formats, while being radically faster to process. In particular, the format is optimized for both rapidly scanning through log records and quickly locating commonly accessed data fields.</t>

      <t>Further, the format proposed by this document retains the key
      advantage of being human readable and able to be processed using the
      various Unix text processing tools, such as sed, awk, perl, cut, and
      grep.</t>
    </section>

    <section anchor="Terminology" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref>.</t>
      
      <t>"SHOULD", "SHOULD NOT", "RECOMMENDED", and "NOT RECOMMENDED" are appropriate when valid exceptions to a general requirement are known to exist or appear to exist, and it is infeasible or impractical to enumerate all of them.  However, they should not be interpreted as permitting implementers to fail to implement the general requirement when such failure would result in interoperability failure.</t>

      <t><xref target="RFC3261"></xref> defines additional terms used in this
      document that are specific to the SIP domain such as "proxy";
      "registrar"; "redirect server"; "user agent server" or "UAS"; "user
      agent client" or "UAC"; "back-to-back user agent" or "B2BUA"; "dialog";
      "transaction"; "server transaction".</t>

      <t>This document uses the term "SIP Server" that is defined to include
      the following SIP entities: user agent server, registrar, redirect
      server, a SIP proxy in the role of user agent server, and a B2BUA in the
      role of a user agent server.</t>

      <t>The reader is expected to be familiar with the terminology and
      concepts defined in <xref
      target="RFC6872"></xref>.</t>
    </section>

    <section anchor="Document_Conventions" title="Document Conventions">
      <t>This document defines the logging syntax for the SIP CLF. This syntax
      is demonstrated through the use of various examples. The formatting
      described here does not permit these examples to be unambiguously
      rendered due to the constraints imposed by the formatting rules for
      RFCs. To avoid ambiguity and to meet the RFC layout requirements, this document uses the &lt;allOneLine/&gt; markup convention established in <xref target="RFC4475"></xref>.</t>

      <t>For the sake of clarity and completeness, the entire text defining
      this markup convention from Section 2.1 of <xref
      target="RFC4475"></xref> is quoted below:</t>

      <t><list style="empty">
          <t>Several of these examples contain unfolded lines longer than 72
          characters. These are captured between &lt;allOneLine/&gt; tags. The
          single unfolded line is reconstructed by directly concatenating all
          lines appearing between the tags (discarding any line feeds or
          carriage returns). There will be no whitespace at the end of lines.
          Any whitespace appearing at a fold-point will appear at the
          beginning of a line.</t>

          <?rfc subcompact="yes" ?>

          <t></t>

          <t>The following represent the same string of bits:</t>

          <t><list style="empty">
              <t>Header-name: first value, reallylongsecondvalue, third
              value</t>

              <t></t>

              <t>&lt;allOneLine&gt;</t>

              <t>Header-name: first value,</t>

              <t>&nbsp;reallylongsecondvalue</t>

              <t>, third value</t>

              <t>&lt;/allOneLine&gt;</t>

              <t></t>

              <t>&lt;allOneLine&gt;</t>

              <t>Header-name: first value,</t>

              <t>&nbsp;reallylong</t>

              <t>second</t>

              <t>value,</t>

              <t>&nbsp;third value</t>

              <t>&lt;/allOneLine&gt;</t>
            </list></t>

          <?rfc subcompact="no" ?>

          <t>Note that this is NOT SIP header-line folding, where different
          strings of bits have equivalent meaning.</t>
        </list></t>

      <t>The IP addresses used in the examples in this document correspond
      to the documentation address block 192.0.2.0/24 (TEST-NET-1) as
      described in <xref target="RFC5737"></xref>.</t>
    </section>

    <section anchor="Format" title="Format">
       
      <t>The CLF for the Session Initiation Protocol <xref
      target="RFC6872"></xref> defines an information model
      to which this logging format adheres, and Section 8.1 of that document 
      defines all the mandatory information model elements.</t>

      <t><figure align="left" anchor="common_log_format"
          title="SIP Common Log Format">
          <preamble>This document defines the format of SIP CLF records as follows:</preamble>

          <artwork align="center"><![CDATA[
        
0          7 8        15 16       23 24         31
+-----------+-----------+-----------+-----------+
|  Version  |           Record Length           | 0 - 3
+-----------+-----------+-----------+-----------+
|       Record Length (cont)        |    0x2C   | 4 - 7
+-----------+-----------+-----------+-----------+
|              CSeq Pointer (Hex)               | 8 - 11
+-----------+-----------+-----------+-----------+
|      Response Status-Code Pointer (Hex)       | 12 - 15
+-----------+-----------+-----------+-----------+
|              R-URI Pointer (Hex)              | 16 - 19
+-----------+-----------+-----------+-----------+
|   Destination IP address:port Pointer (Hex)   | 20 - 23
+-----------+-----------+-----------+-----------+
|     Source IP address:port Pointer (Hex)      | 24 - 27
+-----------+-----------+-----------+-----------+
|             To URI Pointer (Hex)              | 28 - 31
+-----------+-----------+-----------+-----------+
|             To Tag Pointer (Hex)              | 32 - 35
+-----------+-----------+-----------+-----------+
|            From URI Pointer (Hex)             | 36 - 39
+-----------+-----------+-----------+-----------+
|            From Tag Pointer (Hex)             | 40 - 43
+-----------+-----------+-----------+-----------+
|             Call-Id Pointer (Hex)             | 44 - 47
+-----------+-----------+-----------+-----------+
|           Server-Txn Pointer (Hex)            | 48 - 51
+-----------+-----------+-----------+-----------+
|           Client-Txn Pointer (Hex)            | 52 - 55
+-----------+-----------+-----------+-----------+
|      Optional Fields Start Pointer (Hex)      | 56 - 59
+-----------+-----------+-----------+-----------+
|    0x0A   |                                   | 60 - 63
+-----------+                                   +
|                   Timestamp                   | 64 - 67
+                                   +-----------+
|                                   |    0x2E   | 68 - 71
+-----------+-----------+-----------+-----------+
|         Fractional Seconds        |    0x09   | 72 - 75
+-----------+-----------+-----------+-----------+
|                  Flags Field                  | 76 - 79
+-----------+-----------+-----------+-----------+
|Flag (cont)|    0x09   |                       | 80 - 83
|-----------+-----------+                       | 
|                                               |
|                                               |  
|      Mandatory Fields (variable length)       |   
|                                               |  
|                                               | 
+-----------+-----------+-----------+-----------+
|    0x09   |          Tag          |    0x40   |\
+-----------+-----------+-----------+-----------+ \
|                   Vendor-ID                   |  \
+-----------+-----------+-----------+-----------+   \
|                Vendor-ID (cont)               |    \   Repeated
+-----------+-----------+-----------+-----------+     \  as many
|     0x2C  |            Length (Hex)           |      > times as
+-----------+-----------+-----------+-----------+     /  necessary
| Len (cont)|    0x2C   |    BEB    |    0x2C   |    /
+-----------+-----------+-----------------------|   /
|                                               |  /
|            Value (variable length)            | /
|                                               |/
+-----------+-----------+-----------+-----------+
|    0x0A   |                                    
+-----------+        
        ]]></artwork>

          <postamble></postamble>
        </figure></t>

      <t>The format presented in <xref target="common_log_format"></xref> is
      for a single SIP CLF log entry. While there is no actual subdivision in
      practice, this format can be logically subdivided into the following
      three distinct components: <list style="numbers">

          <t>Index Pointers: The first 60 bytes of this format. This
          portion is metadata, primarily composed of a list of pointers that
          indicate the beginning of both the variable-length mandatory and
          optional fields that are logged as part of this record. These
          pointers are implemented as a mechanism to improve processing of
          these records and to allow a reader to expeditiously skip directly to
          the desired field without unnecessarily going through the entire
          record. This logical subdivision within the SIP CLF format will be
          referenced in this document with the &lt;IndexPointers&gt; tag. A 0x0A (LF character) delimits &lt;IndexPointers&gt; from the next logical grouping.</t>

          <t>Mandatory Fields: The next logical grouping in this format is
          a  Tab-delimited (0x09) listing of the mandatory fields as described in
          Section 8.1 of <xref
          target="RFC6872"></xref> and in the order
          listed in &lt;IndexPointers&gt;. This logical subdivision within the
          SIP CLF format will be referenced in this document with the
          &lt;MandatoryFields&gt; tag.</t>

          <t>Optional Fields: The last logical component MAY be present as
          it is an OPTIONAL extension to the SIP CLF format. Its purpose is to
          provide flexibility to the developer of this SIP CLF to log any
          desired fields not included in &lt;MandatoryFields&gt;. This
          includes SIP bodies and any vendor-specific extensions. This logical
          subdivision within the SIP CLF format will be referenced in this
          document with the &lt;OptionalFields&gt; tag.</t>
        </list></t>

      <t><figure align="left" anchor="CLF_logical_structure"
          title="Logical Structure of the SIP CLF Record">
          <preamble>This logical structure of the SIP CLF record format can be
          graphically represented as shown in <xref
          target="CLF_logical_structure"></xref> below:</preamble>

          <artwork align="center"><![CDATA[
        
        <IndexPointers>
        <MandatoryFields>
        <OptionalFields>
        
        ]]></artwork>

          <postamble></postamble>
        </figure></t>

      <t>Note that Figures <xref target="common_log_format" format="counter"></xref> and <xref
      target="CLF_logical_structure" format="counter"></xref> plus the terminating line-feed (0x0A) at the end of the SIP CLF record are different representations of the same format but are functionally equivalent. The representation of this format is a two-line record where the &lt;IndexPointers&gt; metadata is on one line and the actual data like &lt;MandatoryFields&gt; and &lt;OptionalFields&gt; (if present) is on another.</t>

      <t>In the following sections note that indications of "hexadecimal encoded" indicate values that are always unsigned and are to be written out in human-readable base-16 numbers using the UTF-8 characters 0x30 through 0x39 ('0' through '9') and 0x41 through 0x46 ('A' through 'F'). Similarly, indications of "decimal encoded" indicate that the value is to be written out in human-readable base-10 numbers using the UTF-8 characters 0x30 through 0x39 ('0' through '9'). In both encodings, numbers always take up the number of bytes indicated and are padded on the left with UTF-8 '0' (zero) characters to fill the entire space.</t>

      <section anchor="IndexPointers" title="Index Pointers">
        <t><figure align="left" anchor="index_pointers" title="Index Pointers">
            <preamble>The &lt;IndexPointers&gt; portion of the SIP CLF record
            (shown in <xref target="index_pointers"></xref>) is a 60-byte
            header that indicates metadata about the record.</preamble>

            <artwork align="center"><![CDATA[
        
     0          7 8        15 16       23 24         31
     +-----------+-----------+-----------+-----------+
     |  Version  |           Record Length           | 0 - 3
     +-----------+-----------+-----------+-----------+
     |       Record Length (cont)        |    0x2C   | 4 - 7
     +-----------+-----------+-----------+-----------+
     |              CSeq Pointer (Hex)               | 8 - 11
     +-----------+-----------+-----------+-----------+
     |      Response Status-Code Pointer (Hex)       | 12 - 15
     +-----------+-----------+-----------+-----------+
     |              R-URI Pointer (Hex)              | 16 - 19
     +-----------+-----------+-----------+-----------+
     |   Destination IP address:port Pointer (Hex)   | 20 - 23
     +-----------+-----------+-----------+-----------+
     |     Source IP address:port Pointer (Hex)      | 24 - 27
     +-----------+-----------+-----------+-----------+
     |             To URI Pointer (Hex)              | 28 - 31
     +-----------+-----------+-----------+-----------+
     |             To Tag Pointer (Hex)              | 32 - 35
     +-----------+-----------+-----------+-----------+
     |            From URI Pointer (Hex)             | 36 - 39
     +-----------+-----------+-----------+-----------+
     |            From Tag Pointer (Hex)             | 40 - 43
     +-----------+-----------+-----------+-----------+
     |             Call-Id Pointer (Hex)             | 44 - 47
     +-----------+-----------+-----------+-----------+
     |           Server-Txn Pointer (Hex)            | 48 - 51
     +-----------+-----------+-----------+-----------+
     |           Client-Txn Pointer (Hex)            | 52 - 55
     +-----------+-----------+-----------+-----------+
     |      Optional Fields Start Pointer (Hex)      | 56 - 59
     +-----------+-----------+-----------+-----------+        
        
        ]]></artwork>

            <postamble></postamble>
          </figure></t>

        <t>The fields that make up &lt;IndexPointers&gt; are described
        below:</t>

        <t><list style="hanging">
            <t hangText="Version (1 byte):">UTF-8 encoded version for the SIP CLF record. Range of valid values for the Version is from 'A' (0x41) to 'Z' (0x5A). This document uses a Version value of "0x41" ('A').</t>
            
            <t>The value of the SIP CLF Version MUST be incremented for any new SIP CLF specification that changes any part of the SIP CLF record format.  The SIP CLF Version values are IANA-assigned (<xref target="IANA_Version"></xref>) via the Standards Action method described in <xref target="RFC5226"></xref>.</t>
            
            <t>Since the version is specified per record, it is possible that a SIP CLF log file could contain records with different versions. Under normal operating conditions, this is an unlikely occurrence and SHOULD be avoided if possible.</t>

            <t hangText="Record Length (6 bytes):">Hexadecimal encoded total
            length of this log record, beginning with the "Version" octet and ending with the terminating line-feed.</t>
          </list> <?rfc subcompact="no" ?></t>

        <t>Bytes 8 through 55 contain hexadecimal encoded pointers that point
        to the starting location of each of the variable-length mandatory
        fields. Bytes 56 through 59 contain a hexadecimal encoded pointer that points to the starting location of the optional fields portion of the SIP CLF record. Note that there are no delimiters between these pointer values -- they are packed together as a single, 52-character hexadecimal encoded string. The "Pointer" fields indicate absolute byte values within the record, and are therefore &gt;=82. They point to the start of the corresponding value within the &lt;MandatoryFields&gt; portion. A description of each of the mandatory fields that these pointer values point to can be found in <xref target="MandatoryFields"></xref>.</t>
        
        <t><list style="hanging">
            <t hangText="Optional Fields Start Pointer:">This final pointer
            indicates the location within the SIP CLF record where the
            OPTIONAL group of &lt;OptionalFields&gt; begin, if present. The
            "Optional Fields Start Pointer" points to the UTF-8 Tab (0x09)
            character for the first entry in the &lt;OptionalFields&gt;
            portion. If the OPTIONAL group of &lt;OptionalFields&gt; are not
            implemented, then the "Optional Fields Start Pointer" field MUST
            point to the terminating line-feed (0x0A) at the end of the SIP
            CLF record.</t>
          </list></t>

      </section>

      <section anchor="MandatoryFields" title="Mandatory Fields">
        <t><figure align="left" anchor="mandatory_fields"
            title="Mandatory Fields">
            <preamble>The &lt;MandatoryFields&gt; portion of the SIP CLF
            record is shown below:</preamble>

            <artwork align="center"><![CDATA[
        
     0          7 8        15 16       23 24         31
     +-----------+-----------+-----------+-----------+
     |    0x0A   |                                   | 60 - 63
     +-----------+                                   +
     |                   Timestamp                   | 64 - 67
     +                                   +-----------+
     |                                   |    0x2E   | 68 - 71
     +-----------+-----------+-----------+-----------+
     |         Fractional Seconds        |    0x09   | 72 - 75
     +-----------+-----------+-----------+-----------+
     |                  Flags Field                  | 76 - 79
     +-----------+-----------+-----------+-----------+
     |Flag (cont)|    0x09   |                       | 80 - 83
     |-----------+-----------+                       | 
     |                                               |
     |                                               |  
     |      Mandatory Fields (variable length)       |   
     |                                               |  
     |                                               | 
     +-----------+-----------+-----------+-----------+
        
        ]]></artwork>

            <postamble></postamble>
          </figure></t>

        <t>Following the pointers in &lt;IndexPointers&gt;, two fixed-length
        fields are encoded to specify the exact time of the log entry. As
        before, all fields are completely filled, pre-pending values with '0'
        characters as necessary.</t>

        <t><list style="hanging">
            <t hangText="Timestamp (10 bytes):">Decimal encoded date and time of the 
            request or response represented as the number of seconds since the Unix
            epoch (i.e., seconds since midnight, January 1st, 1970, GMT).</t>

            <t hangText="Fractional Seconds (3 bytes):">Decimal encoded fractional seconds
            portion of the Timestamp field to millisecond accuracy.</t>
            
            <t>The combined Timestamp and Fractional Seconds fields are represented in the log file as a UTF-8 encoded string representing the date and time of the request or response represented as the number of seconds and milliseconds since the Unix epoch.  The number of milliseconds is separated by a "." (UTF-8 character 0x2E) from the number of seconds.</t>

            <t hangText="Flags Field (5 bytes):"></t>

            <?rfc subcompact="yes" ?>

            <t><list style="hanging">
                <t hangText="byte 1 - ">Request/Response Flag</t>

                <t><list style="hanging">
                    <t hangText="R = Request"></t>

                    <t hangText="r = Response"></t>
                  </list> <?rfc subcompact="no" ?></t>

                <t hangText="byte 2 - ">Retransmission Flag</t>

                <?rfc subcompact="yes" ?>

                <t><list style="hanging">
                    <t hangText="O = Original transmission"></t>

                    <t hangText="D = Duplicate transmission"></t>

                    <t
                    hangText="S = Server is stateless [i.e., retransmissions are not detected]"></t>
                  </list> <?rfc subcompact="no" ?></t>

                <t hangText="byte 3 - ">Sent/Received Flag</t>

                <?rfc subcompact="yes" ?>

                <t><list style="hanging">
                    <t hangText="S = Sent message"></t>

                    <t hangText="R = Received message"></t>
                  </list> <?rfc subcompact="no" ?></t>

                <t hangText="byte 4 - ">Transport Flag</t>
                
                <t>The Transport Flag values are IANA-assigned (<xref target="IANA_Transport"></xref>) via the IETF Review method described in <xref target="RFC5226"></xref>. Currently, registered values are:</t>

                <?rfc subcompact="yes" ?>

                <t><list style="hanging">
                    <t hangText="U = UDP"></t>

                    <t hangText="T = TCP"></t>

                    <t hangText="S = SCTP"></t>
                  </list> <?rfc subcompact="no" ?></t>

                <t hangText="byte 5 - ">Encryption Flag</t>

                <?rfc subcompact="yes" ?>

                <t><list style="hanging">
                    <t hangText="E = Encrypted message (TLS, DTLS, etc.)"></t>

                    <t hangText="U = Unencrypted message"></t>
                  </list> <?rfc subcompact="no" ?></t>
              </list></t>
          </list></t>

        <t>After the "Timestamp", "Fractional Seconds", and the "Flags" fields
        are the values for the mandatory fields specified in Section
        8.1 of <xref target="RFC6872"></xref>, which
        are described below:</t>

        <t><list style="hanging">
            <t hangText="CSeq:">The Command Sequence header field, including
            the CSeq number and method name.</t>

            <t hangText="Response Status-Code:">Set to the value of the SIP
            response status code for responses. Set to a single UTF-8 dash
            (0x2D) for requests.</t>

            <t hangText="R-URI:">The Request-URI in the start line (mandatory
            in request), including any URI parameters.</t>

            <t hangText="Destination IP address:port:">The IP address of the downstream 
            server and the port number, separated by a single ':'. IPv4 addresses are 
            represented in "dotted decimal" notation as per <xref 
            target="RFC1166"></xref>. IPv6 addresses are represented using the hexadecimal 
            notation detailed in Section 4 of <xref target="RFC5952"></xref> (or the 
            special-case mixed hexadecimal and decimal notation detailed in Section 5 of 
            <xref target="RFC5952"></xref>) and enclosed in square brackets ('[' and 
            ']').</t>

            <t hangText="Source IP address:port:">  The IP address 
            of the upstream client and the port number over which the SIP message was 
            received, separated by a single ':'. IPv4 addresses are represented in "dotted 
            decimal" notation as per <xref target="RFC1166"></xref>. IPv6 addresses are 
            represented using the hexadecimal notation detailed in Section 4 of <xref 
            target="RFC5952"></xref> (or the special-case mixed hexadecimal and decimal 
            notation detailed in Section 5 of <xref target="RFC5952"></xref>) and enclosed 
            in square brackets ('[' and ']').</t>

            <t hangText="To URI:">Value of the URI in the To header field.</t>

            <t hangText="To Tag:">Value of the tag parameter (if present) in
            the To header field.</t>


            <t hangText="From URI:">Value of the URI in the From header
            field.</t>

            <t hangText="From Tag:">Value of the tag parameter (if present) in the From
            header field.</t>


          </list></t>

        <t><list style="hanging">
            <t hangText="Call-Id:">The value of the Call-ID header field.</t>

            <t hangText="Server transaction identification code (Server-Txn):"> 
            The transaction identifier associated with the server transaction.
            Implementations can reuse the server transaction identifier (the
            topmost branch-id of the incoming request, with or without the
            magic cookie), or they could generate a unique identification
            string for a server transaction (this identifier needs to be
            locally unique to the server only).  This identifier is used to
            correlate ACKs and CANCELs to an INVITE transaction; it is also
            used to aid in tracking forking. (See Section 9 of <xref
            target="RFC6872"></xref> for usage.)</t>

            <t hangText="Client transaction identification code (Client-Txn):">
            This field is used to associate client transactions with a server
            transaction for forking proxies or B2BUAs. Upon forking,
            implementations can reuse the value they inserted into the topmost
            Via header's branch parameter, or they can generate a unique
            identification string for the client transaction. (See Section 9
            of <xref target="RFC6872"></xref> for
            usage.)</t>
            
            <t>Note: The definitions of the Server-Txn and Client-Txn are taken directly from <xref target="RFC6872"></xref> and are provided here only as a convenience to the implementer. The definitions specified in <xref target="RFC6872"></xref> should be considered authoritative in the event of a conflict.</t>
          </list></t>

        <t>This data MUST appear in the order listed in &lt;IndexPointers&gt;,
        and each field MUST be present. Fields are subject the maximum SIP CLF
        field size of 4096 bytes as detailed in Section 8 of <xref
        target="RFC6872"></xref>.</t>
</section>

<section anchor="EncodingRules" title="SIP CLF Encoding and Character Escaping Requirements">
        
        <t>The mandatory fields in a SIP CLF record are separated
        by a single UTF-8 Tab character (0x09). Any Tab characters present in
        the data to be written will be replaced by a UTF-8 space character
        (0x20) prior to being logged.</t>
        
        <t>The decision to replace tabs with spaces was based on there being no 
        standardized use of tabs in SIP headers to convey any other meaning than 
        whitespace.  Tabs may appear in message bodies, and in the event that the bodies 
        are logged, the conversion to space may cause problems when reconstructing the 
        body from the corresponding log entry.  Two consequences of the decision to 
        replace Tab with a space character are: (a) it will become impossible to 
        reconstruct a signature over the logged field that matches the signature over 
        fields in the original SIP message, and (b) any future SIP header fields that 
        include tabs with a different semantic meaning than simply signifying whitespace 
        will lose this meaning when logged.  Finally, the tabs-to-spaces substitution 
        MUST occur when logging mandatory fields and optional SIP Header Field or 
        Reason-Phrase (Tag=00); it MUST also occur when optionally logging either the 
        entire message (Tag=02) or simply a SIP body (Tag=01) as described in <xref 
        target="OptionalFields"></xref>.</t>
        
        <t>An element will not always have an appropriate value to provide for one of 
        these fields, even when the field is required to appear in the SIP CLF record. In 
        such circumstances, when a given mandatory field from <xref 
        target="MandatoryFields"></xref> and specified in Section 8.1 of <xref 
        target="RFC6872"></xref>) is not present, then that empty 
        field MUST be encoded as a single horizontal dash ("-"). In the event that a field 
        failed to parse, it MUST be encoded as a single question mark ("?"). If these 
        characters are part of a sequence of other characters, then there is no ambiguity. 
        If the field being logged contains only one character, and that character is the 
        literal "-", the implementation SHOULD insert an escaped %2D for that field in the 
        SIP CLF record. Similarly, if the field contains only one character, and that 
        character is the literal "?", the implementation SHOULD insert an escaped %3F for 
        that field in the SIP CLF record.</t>
        
        <t>The terminating carriage return line feed (CRLF) after a given header field 
        value MUST NOT be logged. Since a bare CRLF sequence is not permitted within a SIP 
        header field value, mandatory fields MUST NOT contain a CRLF when logged and 
        consequently no escaping mechanism is required for it.</t>        
        
        <t>Clearly, a SIP parser could not possibly successfully parse a SIP CLF record in 
        its entirety given the SIP CLF format described in this document. It is possible 
        to parse individual fields in the SIP CLF record if they are extracted and given 
        to a SIP parser that would normally parse those sequence of strings. It should be 
        noted that any field value that is modified by the escaping mechanisms defined in 
        this document before logging ('-','?', and CRLF) is likely no longer well-formed 
        SIP and will fail when given to such a parser.</t>
        
        <t>The intent of logging using SIP CLF is not to faithfully recreate the bit-exact 
        SIP message being logged.  In fact, the formatting rules, encoding, and character 
        escaping requirements preclude this and may introduce information loss relative to 
        the original SIP message.  A log reader should never unescape anything in the SIP 
        CLF record since they are intended to be machine processed using text tools such 
        as grep and awk.  The human user behind the log reader may be required to infer 
        more semantics about any differences between the original SIP message and its SIP 
        CLF representation.</t>
        
      </section>

      <section anchor="OptionalFields" title="Optional Fields">
        <t><figure align="left" anchor="optional_fields"
            title="Optional Fields">
            <preamble>The &lt;OptionalFields&gt; portion of the SIP CLF record
            is shown below:</preamble>

            <artwork align="center"><![CDATA[          
0          7 8        15 16       23 24         31
+-----------+-----------+-----------+-----------+
|    0x09   |          Tag          |    0x40   |\
+-----------+-----------+-----------+-----------+ \
|                   Vendor-ID                   |  \
+-----------+-----------+-----------+-----------+   \
|                Vendor-ID (cont)               |    \   Repeated
+-----------+-----------+-----------+-----------+     \  as many
|     0x2C  |            Length (Hex)           |      > times as
+-----------+-----------+-----------+-----------+     /  necessary
| Len (cont)|    0x2C   |    BEB    |    0x2C   |    /
+-----------+-----------+-----------------------|   /
|                                               |  /
|            Value (variable length)            | /
|                                               |/
+-----------+-----------+-----------+-----------+
        ]]></artwork>
            <postamble></postamble>
          </figure></t>

        <t>Optional fields are those SIP message elements that are not a part
        of the mandatory fields list detailed in Section 8.1 of <xref
        target="RFC6872"></xref>. After the
        &lt;MandatoryFields&gt; section, there is an OPTIONAL
        &lt;OptionalFields&gt; group (shown in <xref
        target="optional_fields"></xref>) that MAY appear zero or more times.
        This &lt;OptionalFields&gt; group provides extensibility to the SIP
        CLF. It allows SIP CLF implementers the flexibility to extend the
        logging capability of this indexed text representation beyond just the
        mandatory log elements described in Section 8.1 of <xref
        target="RFC6872"></xref>.</t>

        <t>Logging any optional SIP elements MUST be done according to the
        format shown in <xref target="optional_fields"></xref>. The location
        of the start of &lt;OptionalFields&gt; within the SIP CLF record is
        indicated by the "Optional Fields Start Pointer" field in
        &lt;IndexPointers&gt;. After the initial Tab delimiter byte (0x09)
        shown in <xref target="optional_fields"></xref>, the optional field
        being logged is generally represented by the notation:</t>

        <t><list hangIndent="22" style="hanging">
            <t>Tag@Vendor-ID,Length,BEB,Value</t>
          </list></t>

        <t>The optional field identifier (Tag@Vendor-ID) is composed of a two-
        byte Tag and an eight-byte Vendor-ID (both decimal encoded) separated
        by an "@" character (0x40). This uniquely identifies the optional
        field being logged. The format for this identifier is loosely modeled
        after the private use option used by the syslog protocol <xref
        target="RFC5424"></xref> (Note: this is the second format detailed in
        Section 6.3.2 of <xref target="RFC5424"></xref>). It makes use of the
        Private Enterprise Number (PEN), which provides an identifier through
        a globally unique name space <xref target="PEN"></xref>. This syntax
        provides the necessary extensibility to SIP CLF to allow logging of
        any SIP header, body, as well as any vendor-specified SIP element.</t>
        
        <t>The Base64 Encoded Byte (BEB) is a boolean that is used to indicate whether or not the 
optional element being logged is Base64 encoded.  The Value field for the optional element being logged MUST be Base64 encoded if it has any characters that are 'unprintable'.  For the purposes of this document, we define 'unprintable' to mean a string of octets that: (a) contains an octet with a value in the range of 0 to 31, inclusive; (b) contains an octet with a value of 127; or (c) contains any series of octets greater than or equal to 128 that do not form a valid UTF-8 sequence, as specified by <xref target="UNICODE"></xref>.  If the optional element being logged is Base64 encoded, then BEB=0x01; if it is not Base64 encoded, then BEB=0x00.</t> 

        <t>Optional fields are logged according to the following two syntax
        rules:</t>

        <t><list counter="my_count" style="format (%d)">
            <t>Vendor-ID = 00000000</t>
          </list></t>

        <t><list style="empty">
            <t>A Vendor-ID of zero is used to log the entire SIP message,
            message body, Reason-Phrase, or any SIP header fields that are not
            a part of the mandatory fields list detailed in Section 8.1 of
            <xref target="RFC6872"></xref>. The
            following Tag values are used to identify which of these optional
            elements are being logged:</t>

            <?rfc subcompact="no" ?>

            <t><list style="hanging">
                <t
                hangText="Tag = 00 - Log SIP Header Field or Reason-Phrase"></t>

                <t>When logging a SIP Header Field (Tag=00), the associated
                "Value" field MUST be populated by the entire header field
                being logged. That is, the field-name, the associated colon
                (":"), and the field-value. This mechanism provides the
                capability to optionally log any SIP header field by
                identifying the field being logged within the "Value"
                field.</t>

                <t>Because the Reason-Phrase in a response is part of the
                Status-Line and is not identified with a field-name, it is a
                special case. In this instance, the associated "Value"
                field MUST be populated by the name "Reason-Phrase" followed
                by a colon (":") and a single space (SP) between the colon and
                the logged Reason-Phrase value.</t>

                <t>The corresponding "Length" field includes the length of the
                entire "Value" field. This includes the field-name, the colon,
                and any linear whitespace (LWS) separator.  For Tag=00, the BEB is set according to whether the SIP Header Field value contains any 'unprintable' characters.  If it does not, the BEB=00; if it does, the BEB=01. If BEB=01, then only the field-value MUST be Base64 encoded; the field-name, the associated colon, and any LWS separator MUST retain their original encoding.</t>


                
                <t>If an optional field occurs more than once in a SIP message
                (e.g., Contact, Route, Record-Route, etc.), then each occurrence
                MUST be logged with the same Tag value (i.e., Tag=00) as a distinct optional field entry in the SIP CLF record. These repeated optionally logged header fields MUST preserve the ordinal position of the repeated header fields in the SIP header.  For example, a SIP header containing two Via header fields with the following ordinal positions within the SIP header: V1,V2. If optionally logging these header fields, they would occur as the following entries in the SIP CLF record. (Note: For the sake of brevity, this example only shows how these optional header fields would be logged and omits the remainder of the SIP CLF record):</t>

       			<t><figure><artwork align="center"><![CDATA[          
   00@00000000,len_V1,00,Via: V1     00@00000000,len_V2,00,Via: V2
        		]]></artwork></figure></t>
        		
				<t>The terminating carriage return line feed (CRLF) after a given header 
				field value MUST NOT be logged. Since a bare CRLF sequence is not 
				permitted within a SIP header field value, optional SIP header fields 
				logged with Tag=00 MUST NOT contain a CRLF when logged and consequently no 
				escaping mechanism is required for it.</t>
        				
                <t hangText="Tag = 01 - Log message body"></t>

                <t>SIP message bodies of all types can be optionally logged using Tag=01.  If the message body is logged it MUST adhere to the maximum size limitation of 4096 bytes for a SIP CLF field, as detailed in Section 8 of <xref target="RFC6872"></xref>. Unlike with Tag=00, there can only be a single entry in the SIP CLF record with Tag=01. When optionally logging the message body, if the maximum SIP CLF field size of 4096 bytes is exceeded, the message body being logged MUST be truncated to meet these size limitations.</t>

                <t>When logging a message body (Tag=01), the associated "Value" field is populated with the Content-Type itself plus the SIP message body separated with a space. In this manner, everything about the SIP message body is self-described using a single tag as compared to enumerating a separate tag for each body type. Additionally, the corresponding "Length" field includes the SIP message body, the length of the embedded Content-Type, and the space separator between the MIME type and the body content.</t> 
                
                <t>For an optionally logged message body (Tag=01), the BEB is set according to whether the message body contains any 'unprintable' characters. If it does not, the BEB=00; if it does, the BEB=01. If BEB=01, then the message body that follows is entirely Base64 encoded except the prepended Content-Type as described in the previous paragraph.</t>
                
                <t>If an optionally logged SIP message body contains any CRLFs, they MUST be escaped by using the URI encoded equivalent value of "%0D%0A". This escaping mechanism applies to all body types.  So we don't make any distinction in treatment between the various possible body types.  If a logged message body has BEB=01, then it MUST be Base64 encoded prior to any character escaping.  Thus, if a binary body (like an image) is logged, it will be Base64 encoded first and that Base64 character stream could never include the CRLF escape sequence of "%0D%0A" because "%" is not a valid Base64 character.</t>

                <t hangText="Tag = 02 - Log entire SIP message"></t>

                <t>The entire SIP message (i.e., SIP header and message body) can be optionally logged using a Tag=02. Logging the entire SIP message MUST conform to the maximum size limitation of 4096 bytes for a SIP CLF field, as detailed in Section 8 of <xref target="RFC6872"></xref>. Unlike with Tag=00, there can only be a single entry in the SIP CLF record with Tag=02. When optionally logging the entire SIP message if the maximum SIP CLF field size of 4096 bytes is exceeded the entire SIP message being logged MUST be truncated to meet these size limitations.</t>
                
                <t>When optionally logging an entire SIP message (Tag=02), the BEB is set according to whether the message body portion contains any 'unprintable' characters. If it does not, the BEB=00; if it does, the BEB=01. If BEB=01, then the entire SIP message is Base64 encoded (not just the message body). Note that unlike the case of Tag=01, when logging an entire SIP message (Tag=02) with 'unprintable' characters (BEB=01), the Content-Type would not be known prior to decode.</t>
                
                <t>All instances of CRLFs, whether they appear in the SIP headers or the SIP message body, MUST be escaped by using the URI encoded equivalent value of "%0D%0A".  If a logged SIP message has BEB=01 then it MUST be Base64 encoded prior to any character escaping.</t>

              </list></t>
          </list></t>

        <?rfc subcompact="no" ?>

        <t><list counter="my_count" style="format (%d)">
            <t>Vendor-ID = PEN</t>
          </list></t>

        <t><list style="empty">
            <t>A Vendor-ID set to a vendor's own private enterprise number
            from the complete current list of private enterprise numbers
            maintained by IANA <xref target="PEN"></xref> is used to log any
            other vendor-specified optional element of a SIP header or body.
            The value of the Tag is set at the discretion of the
            implementer:</t>

            <?rfc subcompact="yes" ?>

            <t><list hangIndent="10" style="hanging">
                <t hangText="Tag = Vendor-specified tag"></t>
              </list></t>
          </list></t>

        <?rfc subcompact="no" ?>

        <t>The definition of the various values of the optional field identifier (Tag@Vendor-ID) are the basis of how optional elements are logged in the SIP CLF. For the sake of completeness, the remaining fields in the format shown in <xref
        target="optional_fields"></xref> are also defined below:</t>

        <t><list style="hanging">
            <t hangText="Length Field (4 bytes):">Indicates the length of only the "Value" field of this optionally logged element (as shown in <xref target="optional_fields"></xref>), hexadecimal encoded. This length corresponds to the length of the "Value" field only and MUST NOT include any of the other elements shown in <xref target="optional_fields"></xref>.</t>          
            
            <t hangText="Base64 Encoded Byte (BEB) Field (1 byte):">Indicates whether or not the subsequent Value Field of the optionally logged element is Base64 encoded.  The Value field for the optional element being logged MUST be Base64 encoded if it contains any character that is deemed 'unprintable' according to the definition given previously in this section.  If the optional element being logged is Base64 encoded, then BEB=0x01; if it is not Base64 encoded, then BEB=0x00.</t>
            
            <t hangText="Value Field (0 to 4096 bytes):">Contains the actual
            value of this optional field. As with the mandatory fields, UTF-8
            Tab characters (0x09) are replaced with UTF-8 space characters
            (0x20).</t>
          </list></t>

        <t>The following are examples of optionally logged SIP elements using
        the syntax described in this section. All these examples only show the
        &lt;OptionalFields&gt; portion of the SIP CLF record. The mandatory
        &lt;IndexPointers&gt; and &lt;MandatoryFields&gt; portions of the SIP
        CLF are intentionally omitted for the sake of brevity. Note that all
        of these examples of optionally logged fields begin with a leading Tab
        delimiter byte (0x09) that is not apparent here.</t>

        <t><list counter="counter" style="format (%d)">
            <t>Contact header field logged as an optional field: <figure>
                <artwork><![CDATA[
    	
        Consider the SIP response:

        SIP/2.0 180 Ringing
        <allOneLine>
        Via: SIP/2.0/UDP host.example.com;
        branch=z9hG4bKnashds8;received=192.0.2.1
        </allOneLine>
        To: Bob <sip:bob@example.com>;tag=a6c85cf
        From: Alice <sip:alice@example.com>;tag=1928301774
        Call-ID: a84b4c76e66710
        Contact: <sip:bob@192.0.2.4>
        CSeq: 314159 INVITE
        Content-Length: 0
		
		]]></artwork>
              </figure>The Contact header field would be logged as an optional field in the following manner: <figure>
                <artwork><![CDATA[
    	
        00@00000000,001C,00,Contact: <sip:bob@192.0.2.4>
        
		]]></artwork>
              </figure></t>

            <t>Reason-Phrase logged as an optional field: <figure>
                <artwork><![CDATA[
    	
     For the same SIP response the Reason-Phrase would be logged as 
     an optional field in the following manner:
    	
    	
        00@00000000,0016,00,Reason-Phrase: Ringing
        
		]]></artwork>
              </figure></t>

            <t>SDP body to be logged as an optional field: <figure>
                <artwork><![CDATA[
    	
        v=0
        o=alice 2890844526 2890844526 IN IP4 host.example.com
        s=-
        c=IN IP4 host.example.com
        t=0 0
        m=audio 49170 RTP/AVP 0 8 97
		
		]]></artwork>
              </figure> This body has a Content-Type of application/sdp and has
            a length of 123 bytes including all the line-feeds. When logging
            this body the "Value" field is composed of the Content-Type and
            the body separated by a space, which gives it a combined length of
            139 (0x008B) bytes. This SIP body would be logged as an optional
            field in the following manner: <figure>
                <artwork><![CDATA[
    	
        <allOneLine>
        01@00000000,008B,00,application/sdp v=0%0D%0Ao=alice 2890844526
        2890844526 IN IP4 host.example.com%0D%0As=-%0D%0A
        c=IN IP4 host.example.com%0D%0At=0 0%0D%0A
        m=audio 49170 RTP/AVP 0 8 97%0D%0A
        </allOneLine>
		
		]]></artwork>
              </figure> Note that the body is actually logged on a single line
            and is thus captured between &lt;allOneLine/&gt; tags. The
            line-feeds are escaped using %0D%0A to delimit the various lines in
            the message body.</t>
            
            <t>binary body to be logged as an optional field: <figure>
                <artwork><![CDATA[
    	
    	
        The second body part of the multipart/mime SIP message shown in 
        Section 3.1.1.11 of RFC 4475 is a binary encoded body 
        (represented in hex) and if logged would have BEB=01 and would 
        require Base64 encoding.  That binary body would produce six 
        lines of output after being Base64 encoded.  Subsequent escaping 
        of the CRLF characters would produce an optionally logged body 
        that would look like the following: 
		
    	
        <allOneLine>
        01@00000000,0216,01,multipart/mixed;boundary=7a9cbec02ceef655 MI
        IBUgYJKoZIhvcNAQcCoIIBQzCCAT8CAQExCTAHBgUrDgMCGjALBgkqhkiG9w0BBw
        ExggEgMIIB%0D%0AHAIBATB8MHAxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxp
        Zm9ybmlhMREwDwYDVQQHEwhTYW4g%0D%0ASm9zZTEOMAwGA1UEChMFc2lwaXQxKT
        AnBgNVBAsTIFNpcGl0IFRlc3QgQ2VydGlmaWNhdGUgQXV0%0D%0AaG9yaXR5AggB
        lQBxAjMBEzAHBgUrDgMCGjANBgkqhkiG9w0BAQEFAASBgI70ZvlI8FIt0uWXjp2V
        %0D%0Aquny/hWgZllxYpLo2iqo2DUKaM7/rjy9K/8Wdd3VZI5ZPdZHKPJiIPfpQX
        SeMw2aFe2r25PRDEIQ%0D%0ALntyidKcwMmuLvvHwM/5Fy87An5PwCfhVG3ktqo6
        uz5mzMtd1sZLg4MUnLjm/xgtlE/le2W8mdAF%0D%0A
        </allOneLine>
		
		]]></artwork>
              </figure> Note that the body is actually logged on a single line
            and is thus captured between &lt;allOneLine/&gt; tags. The
            line-feeds are escaped using %0D%0A to delimit the various lines in
            the Base64 encoded binary body.</t>

            <t>Codec information from the SDP body logged as an optional
            field: <figure>
                <artwork><![CDATA[
    	
        Consider the SIP message:

        INVITE sip:bob@example.com SIP/2.0
        Via: SIP/2.0/UDP host.example.com;branch=z9hG4bKnashds8
        To: Bob <bob@example.com>
        From: Alice <alice@example.com>;tag=1928301774
        Call-ID: a84b4c76e66710
        CSeq: 314159 INVITE
        Max-Forwards: 70
        Date: Thu, 21 Feb 2002 13:02:03 GMT
        Contact: <sip:alice@host.example.com>
        Content-Type: application/sdp
        Content-Length: 147

        v=0
        o=UserA 2890844526 2890844526 IN IP4 example.com
        s=Session SDP
        c=IN IP4 host.example.com
        t=0 0
        m=audio 49172 RTP/AVP 0
        a=rtpmap:0 PCMU/8000
		
		]]></artwork>
              </figure> A vendor may choose to log a SIP message element such
            as the codec information from the SDP body. This vendor-specified
            SIP element would be logged as an optional field in the following
            manner: <figure>
                <artwork><![CDATA[
    	
        03@00032473,0014,00,a=rtpmap:0 PCMU/8000
        
		]]></artwork>
              </figure></t>

            <t>N-th message received from a particular peer logged as an
            optional field: <figure>
                <artwork><![CDATA[
    	
     Perhaps a vendor wants to log that this message is the n-th 
     message received from a peering partner.  To do so for the SIP 
     message shown above, the vendor would log this information as:
     
    	
        07@00032473,0016,00,1877 example.com
        
		]]></artwork>
              </figure>Which would signify that this is the 1,877th message from the peering partner example.com. Note that the previous two examples showing an optionally logged vendor-specified SIP element use a Vendor-ID with a Private Enterprise Number of 32473. This value has been reserved by IANA to be used as an example PEN in documentation according to <xref target="RFC5612"></xref>.</t>
          </list></t>
      </section>
    </section>

    <section anchor="Example_Record" title="Example SIP CLF Record">
      <t>The following SIP message is an INVITE request sent by a SIP client:
      <figure>
          <artwork><![CDATA[
    
    INVITE sip:192.0.2.10 SIP/2.0
    To: <sip:192.0.2.10>
    Call-ID: DL70dff590c1-1079051554@example.com
    <allOneLine>
    From: "Alice" <sip:1001@example.com:5060>;
    tag=DL88360fa5fc;epid=0x34619b0
    </allOneLine>
    CSeq: 1 INVITE
    Max-Forwards: 70
    Date: Thu, 21 Feb 2012 15:02:03 GMT
    <allOneLine>
    Via: SIP/2.0/TCP 192.0.2.200:5060;
    branch=z9hG4bK-1f6be070c4-DL
    </allOneLine>
    Contact: "1001" <sip:1001@192.0.2.200:5060>
    Content-Type: application/sdp
    Content-Length: 418

    v=0
    o=1001 1456139204 0 IN IP4 192.0.2.200
    s=Session SDP
    c=IN IP4 192.0.2.200
    b=AS:2048
    t=0 0
    m=audio 13756 RTP/AVP 0 101
    a=rtpmap:0 PCMU/8000
	
	]]></artwork>
        </figure> Shown below is approximately how this message would appear
      as a single record in a SIP CLF logging file if encoded according to the
      syntax described in this document. Due to RFC conventions, this log entry has been split into five lines, instead of the two lines that actually appear in a log file; and the Tab characters have been padded out using spaces to simulate their appearance in a text terminal.
      <figure>
          <artwork><![CDATA[
    
    A000100,0053005C005E006D007D008F009E00A000BA00C700EB00F70100
    <allOneLine>
    1328821153.010    RORUU    1 INVITE    -    sip:192.0.2.10    
    192.0.2.10:5060    192.0.2.200:56485    sip:192.0.2.10    -    
    sip:1001@example.com:5060    DL88360fa5fc    
    DL70dff590c1-1079051554@example.com    S1781761-88    C67651-11
    </allOneLine>    

	]]></artwork>
        </figure>A bit-exact version of the actual log entry is provided here, Base64 encoded.

		<figure>
        <artwork align="left"><![CDATA[
    
    begin-base64 644 clf_record
    QTAwMDEwMCwwMDUzMDA1QzAwNUUwMDZEMDA3RDAwOEYwMDlFMDBBMDAwQkEwMEM3MDBF
    QjAwRjcwMTAwCjEzMjg4MjExNTMuMDEwCVJPUlVVCTEgSU5WSVRFCS0Jc2lwOjE5Mi4w
    LjIuMTAJMTkyLjAuMi4xMDo1MDYwCTE5Mi4wLjIuMjAwOjU2NDg1CXNpcDoxOTIuMC4y
    LjEwCS0Jc2lwOjEwMDFAZXhhbXBsZS5jb206NTA2MAlETDg4MzYwZmE1ZmMJREw3MGRm
    ZjU5MGMxLTEwNzkwNTE1NTRAZXhhbXBsZS5jb20JUzE3ODE3NjEtODgJQzY3NjUxLTEx
    Cg==
    ====
	
	]]></artwork>
        </figure>To recover the unencoded file, the Base64 text above may be passed as input to the following perl script (the output should be redirected to a file).
		<figure>
          <artwork><![CDATA[
<CODE BEGINS>

#!/usr/bin/perl
use strict;
my $bdata = "";
use MIME::Base64;
while(<>)
{
      if (/begin-base64 644 clf_record/ .. /-- ==== --/)
      {
          if ( m/^\s*[^\s]+\s*$/)
          {
            $bdata = $bdata . $_;
          }
       }
}
print decode_base64($bdata);

<CODE ENDS>
	
	]]></artwork>
        </figure></t>
    </section>

    <section anchor="Text_Tool_Considerations"
             title="Text Tool Considerations">
      <t>This format has been designed to allow text tools to easily process
      logs without needing to understand the indexing format. Index lines may
      be rapidly discarded by checking the first character of the line: index
      lines will always start with an alphabetical character, while field
      lines will start with a numerical character.</t>

      <t>Within a field line, script tools can quickly split fields at the Tab
      characters. The first 12 fields are positional, and the meaning of any
      subsequent fields can be determined by checking the first four
      characters of the field. Alternately, these non-positional fields can be
      located using a regular expression. For example, the "Contact value" in
      a request can be found by searching for the perl regex
      /\t0000,....,([^\t]*)/.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>This document does not introduce any new security considerations
      beyond those discussed in <xref
      target="RFC6872"></xref>.</t>
      
      <t>In the interest of protecting the sensitive information contained in a SIP CLF file, <xref target="RFC6872"></xref> notes that values might need to be obfuscated for privacy reasons when SIP CLF files are exchanged between domains. If a Base64 encoded string contains the non-obfuscated value, then that would also need to be obfuscated before Base64 encoding.</t>
    </section>


    <section anchor="Operational_Guidance" title="Operational Guidance">
      <t>SIP CLF log files will take up a substantive amount of disk space
      depending on traffic volume at a processing entity and the amount of
      information being logged. As such, any enterprise using SIP CLF should
      establish operational procedures for file rollovers as appropriate to
      the needs of the organization.</t>

      <t>Listing such operational guidelines in this document is out of scope
      for this work.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
    
    <t>This specification establishes a new "Session Initiation Protocol (SIP) Common Log Format (CLF) Parameters" registry, which contains two new sub-registries: "SIP CLF Version Values" and "SIP CLF Transport Flag Values". Initial entries are defined by this specification for both sub-registries.  Addition of any new sub-registry to the "Session Initiation Protocol (SIP) Common Log Format (CLF) Parameters" registry is to be done using the IETF Review registration policy detailed in <xref target="RFC5226"></xref>.</t>
    
      <section anchor="IANA_Version" title="SIP CLF Version">

      <t>This document defines the SIP CLF "Version" field in <xref target="IndexPointers"></xref>. IANA has created a registry of Version values entitled "SIP CLF Version Values". Version numbers MUST be incremented for any new SIP CLF protocol specification that changes any part of the SIP CLF record format. Changes include addition or removal of fields or a change of syntax or semantics of existing fields.</t>
      
      <t>Version numbers must be registered via the Standards Action method described in <xref target="RFC5226"></xref>.  IANA has registered the Versions shown in <xref target="version_table"></xref> below.</t>
      
      <texttable anchor="version_table" title="IANA-Registered SIP CLF Version Values">
      <ttcol align="center">Version</ttcol>
      <ttcol align="center">FORMAT</ttcol>
      <ttcol align="center">Reference</ttcol>
      <c>0x41 ('A')</c><c>Defined in [RFC6873]</c><c>[RFC6873]</c>
      <postamble></postamble>
      </texttable>

	  </section>
	  
	  <section anchor="IANA_Transport" title="SIP CLF Transport Flag">

      <t>This document defines the SIP CLF "Transport Flag" as fourth byte in the Flags field of the SIP CLF record. The format and values of the Transport Flag are described in <xref target="MandatoryFields"></xref>. IANA has created a registry of SIP CLF Transport Flag values titled "SIP CLF Transport Flag Values".</t>
      
      <t>SIP CLF Transport Flag values must be registered via the IETF Review method described in <xref target="RFC5226"></xref>.  IANA has registered the Transport Flag values shown in <xref target="transport_table"></xref> below.</t>
      
      <texttable anchor="transport_table" title="IANA-Registered SIP CLF Transport Flag">
      <ttcol align="center">Value</ttcol>
      <ttcol align="center">Transport Protocol</ttcol>
      <ttcol align="center">Reference</ttcol>
      <c>U</c><c>UDP</c><c>[RFC6873]</c>
      <c>T</c><c>TCP</c><c>[RFC6873]</c>
      <c>S</c><c>SCTP</c><c>[RFC6873]</c>
      <postamble></postamble>
      </texttable>

	</section>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgments">
      <t>The authors of this document would like to acknowledge and thank Peter Musgrave (the chair of the SIPCLF working group) and Robert Sparks (the assigned Area Director) for their support, guidance, and continued invaluable feedback.</t>

      <t>This work benefited from the discussions and invaluable input by the
      various members of the SIPCLF working group. These include Brian
      Trammell, Eric Burger, Cullen Jennings, Benoit Claise, Saverio
      Niccolini, and Dan Burnett. Special thanks to Hadriel Kaplan, Chris Lonvick,
      Paul E. Jones, John Elwell, Claudio Allocchio, and Joe Clarke for their constructive comments, suggestions, and reviews that were critical to the formulation and refinement of this document.</t>

      <t>Thanks to Anders Nygren for his early implementation, insight, and
      reviews of the SIP CLF format.</t>
      

    </section>
  </middle>

  <back>
    <references title="Normative References">

<!--      <?rfc include="reference.I-D.ietf-sipclf-problem-statement" ?>; Companion Document  -->



<reference anchor='RFC6872'>
<front>
<title>The Common Log Format (CLF) for the Session Initiation Protocol (SIP): Framework and Information Model</title>

<author initials='V' surname='Gurbani' fullname='Vijay Gurbani'>
    <organization />
</author>

<author initials='E' surname='Burger' fullname='Eric Burger'>
    <organization />
</author>

<author initials='T' surname='Anjali' fullname='Tricha Anjali'>
    <organization />
</author>

<author initials='H' surname='Abdelnur' fullname='Humberto Abdelnur'>
    <organization />
</author>

<author initials='O' surname='Festor' fullname='Olivier Festor'>
    <organization />
</author>

<date month='February' year='2013' />

<abstract><t>Well-known web servers such as Apache and web proxies like Squid support event logging using a common log format.  The logs produced using these de-facto standard formats are invaluable to system administrators for trouble-shooting a server and tool writers to craft tools that mine the log files and produce reports and trends. Furthermore, these log files can also be used to train anomaly detection systems and feed events into a security event management system.  The Session Initiation Protocol (SIP) does not have a common log format, and as a result, each server supports a distinct log format that makes it unnecessarily complex to produce tools to do trend analysis and security detection.  This document describes a framework, including requirements and analysis of existing approaches, and specifies an information model for development of a SIP common log file format that can be used uniformly by user agents, proxies, registrars, redirect servers as well as back-to-back user agents.</t></abstract>

</front>

<seriesInfo name='RFC' value='6872' />

</reference>


      <?rfc include="reference.RFC.2119" ?>

      <?rfc include="reference.RFC.3261" ?>

    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.1166" ?>
    
      <?rfc include="reference.RFC.4475" ?>
      
      <?rfc include="reference.RFC.5226" ?>
      
      <?rfc include="reference.RFC.5424" ?>

      <?rfc include="reference.RFC.5612" ?>

      <?rfc include="reference.RFC.5737" ?>

      <?rfc include="reference.RFC.5952" ?>

 
      <reference anchor="PEN" target="http://www.iana.org/assignments/enterprise-numbers">
        <front>
          <title>Private Enterprise Numbers</title>

          <author fullname="" initials="" surname="IANA">
            <organization>IANA</organization>
          </author>

          <date month="" year="2009" />
        </front>

      </reference>
      
      <reference anchor="UNICODE" target="http://www.unicode.org/versions/Unicode6.2.0/">
		<front>
               
			<title>The Unicode Standard, Version 6.2.0
        	</title>
			<author>
                 <organization>The Unicode Consortium</organization>
                </author>
			
			<date month="" year="2012"/>
		</front>

        <seriesInfo name="(Mountain View, CA:"
                    value="ISBN 978-1-936213-07-8)" />
    	</reference>

    </references>
  </back>
</rfc>
