<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "http://xml.resource.org/authoring/rfc2629.dtd"
[

]>
<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc category="std" number="7480" ipr="trust200902" submissionType="IETF" consensus="yes">
    <front>
        <title abbrev="RDAP over HTTP">
            HTTP Usage in the Registration Data Access Protocol (RDAP)
        </title>
        <author fullname="Andrew Lee Newton" initials="A.L." surname="Newton">
            <organization abbrev="ARIN">American Registry for Internet Numbers</organization>
            <address>
                <postal>
                    <street>3635 Concorde Parkway</street>
                    <city>Chantilly</city>
                    <region>VA</region>
                    <country>United States</country>
                    <code>20151</code>
                </postal>
                <email>andy@arin.net</email>
                <uri>http://www.arin.net</uri>
            </address>
        </author>
        
        <author fullname="Byron J. Ellacott" initials="B.J." surname="Ellacott">
            <organization abbrev="APNIC">Asia Pacific Network Information Centre</organization>
            <address>
                <postal>
                    <street>6 Cordelia Street</street>
                    <city>South Brisbane</city>
                    <country>Australia</country>
                    <code>QLD 4101</code>
                </postal>
                <email>bje@apnic.net</email>
                <uri>http://www.apnic.net</uri>
            </address>
        </author>        
        
        <author initials="N." surname="Kong" fullname="Ning Kong">
            <organization abbrev="CNNIC">
                China Internet Network Information Center
            </organization>
            <address>
                <postal>
                    <street>4 South 4th Street, Zhongguancun, Haidian District </street>
                    <country>China</country>
                    <code>100190</code> <city>Beijing</city>
                </postal>
                <phone>+86 10 5881 3147</phone>
                <email>nkong@cnnic.cn</email>
            </address>
        </author>
        
        <date month='March' year='2015'/>

        <abstract>
            <t>
                This document is one of a collection that together describes the
                Registration Data Access Protocol (RDAP).  It describes
                how RDAP is transported using the Hypertext Transfer Protocol (HTTP).
                RDAP is a successor protocol to the very old WHOIS protocol.
                The purpose of this document is to clarify the use of standard HTTP
                mechanisms for this application.
            </t>
        </abstract>
    </front>
    <middle>
        <section title="Introduction">
            <t>
                This document describes the usage of the Hypertext Transfer
		Protocol (HTTP) 
                <xref target="RFC7230"></xref> for the Registration Data Access
		Protocol (RDAP).  
                The goal of this document is to tie
                together usage patterns of HTTP into a common profile applicable to
                the various types of directory services serving registration data
                using practices informed by the Representational State Transfer <xref target="REST">(REST)</xref>
                architectural style.  By giving the various directory services
                common behavior, a single client is better able to retrieve data from
                directory services adhering to this behavior.
            </t>
            <t>
                Registration data expected to be presented by this service is
                Internet resource registration data -- registration of domain names
                and Internet number resources.  This data is typically provided by
                <xref target="RFC3912">WHOIS</xref> services, but the WHOIS protocol is
                insufficient to modern registration data service requirements. A
                replacement protocol is expected to retain the simple transactional
                nature of WHOIS, while providing a specification for queries and
                responses, redirection to authoritative sources, support for
                Internationalized Domain Names (IDNs) <xref target="RFC5890"/>, and
                support for localized registration data such as addresses and
                organization or person names.
            </t>
            <t>
                In designing these common usage patterns, this document introduces
                considerations for a simple use of HTTP.  Where complexity may reside,
                it is the goal of this document to place it upon the server and to keep
                the client as simple as possible.  A client implementation should be
                possible using common operating system scripting tools (e.g., bash and wget).
            </t>
            <t>
                This is the basic usage pattern for this protocol:
                <list style="numbers">
                    <t>
                        A client determines an appropriate server to query along with
                        the appropriate base Uniform Resource Locator (URL) to use in such queries.
                        <xref target="RFC7484"></xref> describes one method to determine the
                        server and the base URL. See <xref target="bootstrapping_redirection"></xref> for more information.                        
                    </t>
                    <t>
                        A client issues an HTTP (or HTTPS) query using GET <xref target="RFC7231"></xref>.  As an example, a query URL for
                    the network registration 192.0.2.0 might be 
                    <list style="none">
                        <t>http://example.com/rdap/ip/192.0.2.0</t>
                    </list>
                    <xref target="RFC7482"></xref> details the various queries used in RDAP.
                    </t>
                    <t>
                        If the receiving server has the information for the query, it examines
                    the Accept header field of the query and returns a 200 response with a response
                    entity appropriate for the requested format.
                    <xref target="RFC7483"></xref> details a response in JavaScript Object Notation 
                        (JSON).
                    </t>
                    <t>If the receiving server does not have the information for the query but does
                    have knowledge of where the information can be found, it will return a
                    redirection response (3xx) with the Location header field containing an HTTP(S) URL
                    pointing to the information or another server known to 
                    have knowledge of the location of the information. The client is expected to requery 
                    using that HTTP URL.</t>
                    <t>If the receiving server does not have the information being requested and
                    does not have knowledge of where the information can be found, it returns
                    a 404 response.</t>
                    <t>If the receiving server will not answer a request for policy reasons, it will
                    return an error response (4xx) indicating the reason for giving no answer.</t>
                </list>
            </t>
            <t>
                It is not the intent of this document to redefine the 
                meaning and semantics of HTTP.  The purpose of this document is to clarify the use
                of standard HTTP mechanisms for this application.
            </t>
        </section>
        <section title="Terminology">
            <t>
                The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;,
                &quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;,
                &quot;RECOMMENDED&quot;, &quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document
                are to be interpreted as described in <xref target="RFC2119"/>.
            </t>
            <t>
                As is noted in <xref target="SAC-051">"Security and Stability Advisory Committee (SSAC)
                    Report on WHOIS Terminology and Structure"</xref>,
                the term "WHOIS" is overloaded, often referring to a protocol, a service, and data.
                In accordance with <xref target="SAC-051"></xref>, this document describes the base
                behavior for an RDAP.
                <xref target="SAC-051"></xref> describes a protocol profile of RDAP for Domain Name
                Registries (DNRs), the Domain Name Registration Data Access Protocol (DNRD-AP).
            </t>
            <t>
                In this document, an RDAP client is an HTTP user agent performing an RDAP query, and
                an RDAP server is an HTTP server providing an RDAP response.  RDAP query and response
                formats are described in <xref target="RFC7482"></xref> and
                <xref target="RFC7483"></xref>, while
                this document describes how RDAP clients and servers use HTTP to exchange queries and
                responses. <xref target="RFC7481"></xref> describes security
                considerations for RDAP.
            </t>
        </section>
        <section title="Design Intents">
            <t>
                There are a few design criteria this document attempts to meet.
            </t>
            <t>
                First, each query is meant to require only one path of execution to obtain an
                answer. A response may contain an answer, no answer, or a redirect, and
                clients are not expected to fork multiple paths of execution to make a query.
            </t>
            <t>
                Second, the semantics of the request/response allow for future and/or non-standard 
                response formats.  In this document, only a <xref target="RFC7159">JSON</xref> 
                response media type is noted, with the response contents to be described separately
                (see <xref target="RFC7483"></xref>).  
                This document only describes how RDAP is transported using HTTP with this format.
            </t>
            <t> 
            	Third, this protocol is intended to be able to make use of the range of mechanisms
                available for use with HTTP.  HTTP offers a number of mechanisms not described further
                in this document.  Operators are able to make use of these mechanisms according to
                their local policy, including cache control, authorization, compression, and
                redirection.  HTTP also benefits from widespread investment in scalability,
                reliability, and performance, as well as widespread programmer understanding of client
                behaviors for web services styled after <xref target="REST">REST</xref>, 
                reducing the cost to deploy Registration Data
                Directory Services and clients. This protocol is forward compatible with HTTP 2.0.
            </t>
        </section>
        <section title="Queries">
            <section title="HTTP Methods" anchor="http_methods">
                <t>
                    Clients use the GET method to retrieve a response body and use the
                    HEAD method to determine existence of data on the server. Clients
                    SHOULD use either the HTTP GET or HEAD methods (see <xref target="RFC7231"></xref>).
                    Servers are under
                    no obligation to support other HTTP methods; therefore,
                    clients using other methods will likely not interoperate
                    properly.
                </t>
                <t>
                    Clients and servers MUST support HTTPS to support security services.
                </t>
            </section>
            <section title="Accept Header" anchor="accept_header">
                <t>
                    To indicate to servers that an RDAP response is desired, clients
                    include an Accept header field with an RDAP-specific JSON media type,
                    the generic JSON media type, or both. Servers receiving an RDAP
                    request return an entity with a Content-Type header containing
                    the RDAP-specific JSON media type.
                </t>
                <t>
                    This specification does not define the responses a server returns to
                    a request with any other media types in the Accept header field, or with no
                    Accept header field.  One possibility would be to return a response in
                    a media type suitable for rendering in a web browser.
                </t>
            </section>
            <section title="Query Parameters" anchor="parameters">
                <t>
                    Servers MUST ignore unknown query parameters.  Use of unknown query
                    parameters for cache busting is described in <xref target="cache-busting"></xref>.
                </t>
            </section>        
            
        </section>
        <section title="Types of HTTP Response" anchor="http_responses">
            <t>
                This section describes the various types of responses a server may send to a client.  
                While no standard HTTP response code is forbidden in usage, 
                this section defines the minimal set of response codes in common use
                by servers that a client will need to understand.
                While some clients may be constructed with simple
                tooling that does not account for all of these response codes, a more robust
                client accounting for these codes will likely provide a better user experience.
                It is expected that
                usage of response codes and types for this application not defined here will be 
                described in subsequent documents. 
            </t>
            <section title="Positive Answers">
                <t>
                    If a server has the information requested by the client and wishes to respond 
                    to the client with the information according to its policies, it returns that 
                    answer in the body of a 200 (OK) response (see <xref target="RFC7231"></xref>).
                </t>
            </section>
            <section title="Redirects">
                <t> 
                    If a server wishes to inform a client that the answer to a given query can be found 
                    elsewhere, it returns either a 301 (Moved Permanently) response code to indicate a permanent move or a 
                    302 (Found), 303 (See Other), or 307 (Temporary Redirect) response code to 
                    indicate a non-permanent redirection, and it includes 
                    an HTTP(S) URL in the Location header field (see <xref target="RFC7231"></xref>).  
                    The client is expected to issue a 
                    subsequent request to satisfy the original query using the given URL without any 
                    processing of the URL.  In other words, the server is to hand back a complete URL, and 
                    the client should not have to transform the URL to follow it. 

                    Servers are under
                    no obligation to return a URL conformant to <xref target="RFC7482"></xref>.
                </t>
                <t>
                    For this application, such an example of a permanent move might be a Top-Level Domain
                    (TLD) operator informing a client the information being sought can be found with
                    another TLD operator (i.e., a query for the domain bar in foo.example is found at
                    http://foo.example/domain/bar).
                </t>
                <t>
                    For example, if the client uses
                    <list>
                        <t>http://serv1.example.com/weirds/domain/example.com</t>
                    </list>
                    the server redirecting to
                    <list>
                        <t>https://serv2.example.net/weirds2/</t>
                    </list> would set the 
                    Location: field to the value
                    <list>
                        <t>https://serv2.example.net/weirds2/domain/example.com</t>
                    </list>
                </t>
            </section>
            <section title="Negative Answers">
                <t>
                    If a server wishes to respond that it has an empty result set
                    (that is, no data appropriately satisfying the query),
                    it returns a 404 (Not Found) response code.  Optionally, it MAY include additional
                    information regarding the negative answer in the HTTP entity body.
                </t>
                <t>
                    If a server wishes to inform the client that information about the query
                    is available, but cannot include the information in the response to the
                    client for policy reasons, the server MUST respond with an appropriate
                    response code out of HTTP's 4xx range.  A client
                    MAY retry the query if that is appropriate for the
                    respective response code.
                </t>
            </section>
            <section title="Malformed Queries">
                <t>
                    If a server receives a query that it cannot interpret as an RDAP query, it 
                    returns a 400 (Bad Request) response code.  Optionally, it MAY include additional information 
                    regarding this negative answer in the HTTP entity body.
                </t>
            </section>
            <section title="Rate Limits" anchor="rate-limits">
                <t>
                    Some servers apply rate limits to deter address scraping and other
                    abuses.  When a server declines to answer a query due to rate limits,
                    it returns a 429 (Too Many Requests) response code as described in <xref target="RFC6585"></xref>.  
                    A client that receives a 429 response SHOULD decrease its query rate
                    and honor the Retry-After header field if one is present. 
                    Servers may place stricter limits upon clients that do not honor the Retry-After header.
                    Optionally, the server MAY include additional
                    information regarding the rate limiting in the HTTP entity body.
                </t>
                <t>
                    Note that this is not a defense against denial-of-service (DoS) attacks,
                    since a malicious client could ignore the code and continue to send
                    queries at a high rate.  A server might use another response code if
                    it did not wish to reveal to a client that rate limiting is the reason
                    for the denial of a reply.
                </t>
            </section>
            <section title="Cross-Origin Resource Sharing (CORS)" anchor="cors">
                <t>
                    When responding to queries, it is RECOMMENDED that servers use the
                    Access-Control-Allow-Origin header field, as specified by <xref target="W3C.REC-cors-20140116"/>.
                    A value of "*" is suitable when RDAP is used for public resources.
                </t>
                <t>
                    This header (often called the CORS header) helps in-browser web applications
                    by lifting the "same-origin" restriction (i.e., a browser may load RDAP client
                    code from one web server but query others for RDAP data).
                </t>
                <t>
                    By default, browsers do not send cookies when cross origin requests are
                    allowed. Setting the Access-Control-Allow-Credentials header field to "true"
                    will send cookies. Use of the Access&nbhy;Control&nbhy;Allow&nbhy;Credentials header field is
                    NOT RECOMMENDED.
                </t>
            </section>
        </section>         

        <section title="Extensibility" anchor="extensibility">
            <t>
                For extensibility purposes, this document defines an IANA registry for prefixes
                used in <xref target="RFC7159">JSON</xref> data serialization and URI path 
                segments (see <xref target="iana_considerations"></xref>).
            </t>
            <t>
                Prefixes and identifiers SHOULD only consist of the alphabetic US-ASCII characters 
                A through Z in
                both uppercase and lowercase, the numerical digits 0 through 9, and the underscore 
                character, and they SHOULD NOT begin with
                an underscore character, numerical digit, or the characters "xml".  The following
                describes the production of JSON names in <xref target="RFC5234">ABNF</xref>.</t>
            <figure title="ABNF for JSON Names" anchor="json_name_abnf">

                <artwork>

  name = ALPHA *( ALPHA / DIGIT / "_" )

                </artwork>
            </figure>
            
            <t> This restriction is a union
                of the Ruby programming language identifier syntax and the XML element name
                syntax and has two purposes.  First, client implementers using modern programming
                languages such as Ruby or Java can use libraries that automatically promote JSON
                names to first-order object attributes or members.  
                Second, a clean mapping between JSON and XML is easy to accomplish using these
                rules. 
            </t>
        </section>

        <section title="Security Considerations" anchor="security_considerations">
            <t>
                This document does not pose strong security requirements to the RDAP
                protocol.  However, it does not restrict against the use of security
                mechanisms offered by the HTTP protocol. It does require that RDAP clients
                and servers MUST support HTTPS.
            </t>

            <t>
                This document makes recommendations for server implementations against
                DoS (<xref target="rate-limits"/>) and interoperability with existing
                security mechanisms in HTTP clients (<xref target="cors"/>).
            </t>

            <t>
                Additional security considerations to the RDAP protocol are
                covered in <xref target="RFC7481"></xref>.
            </t>
        </section>
        
        <section title="IANA Considerations" anchor="iana_considerations">
            <section title="RDAP Extensions Registry">
                <t>
                     IANA has created a new category in the protocol
                    registries labeled "Registration Data Access Protocol (RDAP)", and within that
                    category, has established a URL-referenceable, stand-alone registry labeled
                    "RDAP Extensions".
                    The
                    purpose of this registry is to ensure uniqueness of extension identifiers.
                    The extension identifier is used as a prefix in JSON names and as a prefix
                    of path segments in RDAP URLs.
                </t>
                <t>
                    The production rule for these identifiers is specified in <xref target="extensibility"/>.
                </t>
                <t>
                    In accordance with <xref target="RFC5226"></xref>, the IANA policy for assigning new values, shall
                    be Specification Required: values and their meanings must be documented in
                    an RFC or in some other permanent and readily available reference, in
                    sufficient detail that interoperability between independent implementations
                    is possible.
                </t>
                <t>
                    The following is a template for an RDAP extension registration:
                    <list style="empty">
                        <t>Extension identifier: the identifier of the extension</t>
                        <t>Registry operator: the name of the registry operator</t>
                        <t>Published specification: RFC number, bibliographical reference, or URL
                        to a permanent and readily available specification</t>
                        <t>Person &amp; email address to contact for further information: 
                            The names and email addresses of individuals to contact regarding this registry entry
                        </t>
                        <t>Intended usage: brief reasons for this registry entry (as defined by
                        <xref target="RFC5226"></xref>).</t>
                    </list>
                </t>
                <t>
                    The following is an example of a registration in the RDAP extension registry:
                    <list style="empty">
                        <t>Extension identifier: lunarNic</t>
                        <t>Registry operator: The Registry of the Moon, LLC</t>
                        <t>Published specification: http://www.example/moon_apis/rdap</t>
                        <t>Person &amp; email address to contact for further information: 
                            Professor Bernardo de la Paz &lt;berny@moon.example&gt;
                        </t>
                        <t>Intended usage: COMMON</t>
                    </list>
                </t>            
            </section>
        </section>
        <section title="Internationalization Considerations">
            <section title="URIs and IRIs">
                <t>                  
                    Clients can use <xref target="RFC3987">Internationalized Resource Identifiers (IRIs)</xref> 
                    for internal use as they see fit 
                    but MUST transform them to <xref target="RFC3986">URIs</xref> for interaction with 
                    RDAP servers.  RDAP servers MUST use URIs in all responses, and again clients can 
                    transform these URIs to IRIs for internal use as they see fit.
                </t>
            </section>
            <section title="Language Identifiers in Queries and Responses"
                anchor="language_identifiers_in_queries_and_responses">
                <t>
                    Under most scenarios, clients requesting data will not signal
                    that the data be returned in a particular language or script.
                    On the other hand, when servers return data and have knowledge
                    that the data is in a language or script, the data SHOULD be
                    annotated with language identifiers whenever they are available,
                    thus allowing clients to process and display the data accordingly.
                </t>
                <t>
                    <xref target="RFC7483"></xref> provides such a mechanism.
                </t>
            </section>
            <section title="Language Identifiers in HTTP Headers" anchor="language_identifiers_in_http_headers">
                <t>
                    Given the description of the use of language identifiers in
                    <xref target="language_identifiers_in_queries_and_responses"></xref>,
                    unless otherwise specified, servers SHOULD ignore the
                    <xref target="RFC7231">HTTP</xref> Accept-Language header field when
                    formulating HTTP entity responses, so that clients do not conflate
                    the Accept-Language header with the 'lang' values in the entity
                    body.
                </t>
                <t>
                    However, servers MAY return language identifiers in the
                    Content-Language header field so as to inform clients of the
                    intended language of HTTP layer messages.
                </t>
            </section>
        </section>
    </middle>
    <back>
        <references title="Normative References">
          
<?rfc include="reference.RFC.2119" ?>
<?rfc include="reference.RFC.3986" ?>
<?rfc include="reference.RFC.3987" ?>
<?rfc include="reference.RFC.5226" ?>
<?rfc include="reference.RFC.6585" ?>
<?rfc include="reference.RFC.7230" ?>
<?rfc include="reference.RFC.7231" ?>

      
            <reference anchor='W3C.REC-cors-20140116'
                target='http://www.w3.org/TR/2014/REC-cors-20140116/'>
                <front>
                    <title>Cross-Origin Resource Sharing</title>
                    <author initials='A.' surname='Kesteren' fullname='Anne van Kesteren'>
                        <organization />
                    </author>         
                    <date month='January' year='2014' />
                </front>
                <seriesInfo name='W3C Recommendation,' value='REC-cors-20140116' />
            </reference>  

<!--I-D.ietf-weirds-rdap-query-->
<reference anchor='RFC7482' target='http://www.rfc-editor.org/info/rfc7482'>
<front>
<title>Registration Data Access Protocol (RDAP) Query Format</title>
<author initials='A' surname='Newton' fullname='Andrew Newton'>
    <organization />
</author>
<author initials='S' surname='Hollenbeck' fullname='Scott Hollenbeck'>
    <organization />
</author>
<date month='February' year='2015' />
</front>
<seriesInfo name='RFC' value='7482' />
</reference>

<!--I-D.ietf-weirds-json-response-->
<reference anchor='RFC7483' target='http://www.rfc-editor.org/info/rfc7483'>
<front>
<title>JSON Responses for the Registration Data Access Protocol (RDAP)</title>
<author initials='A' surname='Newton' fullname='Andrew Newton'>
    <organization />
</author>
<author initials='S' surname='Hollenbeck' fullname='Scott Hollenbeck'>
    <organization />
</author>
<date month='February' year='2015' />
</front>
<seriesInfo name='RFC' value='7483' />
</reference>

<!--I-D.ietf-weirds-rdap-sec-->
<reference anchor='RFC7481' target='http://www.rfc-editor.org/info/rfc7481'>
<front>
<title>Security Services for the Registration Data Access Protocol (RDAP)</title>
<author initials='S' surname='Hollenbeck' fullname='Scott Hollenbeck'>
    <organization />
</author>
<author initials='N' surname='Kong' fullname='Ning Kong'>
    <organization />
</author>
<date month='February' year='2015' />
</front>
<seriesInfo name='RFC' value='7481' />
</reference>

<!--I-D.ietf-weirds-bootstrap-->
<reference anchor='RFC7484' target='http://www.rfc-editor.org/info/rfc7484'>
<front>
<title>Finding the Authoritative Registration Data (RDAP) Service</title>
<author initials='M' surname='Blanchet' fullname='Marc Blanchet'>
    <organization />
</author>
<date month='February' year='2015' />
</front>
<seriesInfo name='RFC' value='7484' />
</reference>

        </references>
        <references title="Informative References">
            <reference anchor="SAC-051">
                <front>
                    <title>SSAC Report on Domain Name WHOIS Terminology and Structure</title>
                    <author initials="D." surname="Piscitello" role="editor" />
                    <date month="September" year="2011"/>
                </front>
              <seriesInfo name="A report from the ICANN" value="Security and Stability Advisory Committee (SSAC)" />
            </reference>
<?rfc include="reference.RFC.3912" ?>
<?rfc include="reference.RFC.5234" ?>
<?rfc include="reference.RFC.5890" ?>
<?rfc include="reference.RFC.7159" ?>
        
            <reference anchor="REST">
                <front>
                    <title>Principled Design of the Modern Web Architecture</title>
                    <author initials="R." surname="Fielding" fullname="Roy Fielding"></author>
                    <author initials="R." surname="Taylor" fullname="Richard Fielding"></author>
                    <date month="May" year="2002" />
                </front>
                <seriesInfo name="ACM Transactions on Internet Technology," value="Vol. 2, No. 2" />
            </reference>

            <reference anchor="lacnic-joint-whois" target="ftp://anonymous@ftp.registro.br/pub/gter/gter20/02&nbhy;jwhois&nbhy;lacnic.pdf">
                <front>
                    <title>Joint Whois</title>
                    <author>
                        <organization>LACNIC</organization>
                    </author>
                    <date month="December" year="2005" />
                </front>
            </reference>  
        </references>

        <section title="Protocol Example" anchor="protocol-example">
            <t>
                To demonstrate typical behavior of an RDAP client and server, the following
                is an example of an exchange, including a redirect.  The data in the response
                has been elided for brevity, as the data format is not described in this
                document. The media type used here is described in <xref target="RFC7483"></xref>.
            </t>
            <figure>
                <preamble>
                    An example of an RDAP client and server exchange:
                </preamble>
                <artwork>
  Client:
      &lt;TCP connect to rdap.example.com port 80&gt;
      GET /rdap/ip/203.0.113.0/24 HTTP/1.1
      Host: rdap.example.com
      Accept: application/rdap+json

  rdap.example.com:
      HTTP/1.1 301 Moved Permanently
      Location: http://rdap-ip.example.com/rdap/ip/203.0.113.0/24
      Content-Length: 0
      Content-Type: application/rdap+json
      &lt;TCP disconnect&gt;

  Client:
      &lt;TCP connect to rdap-ip.example.com port 80&gt;
      GET /rdap/ip/203.0.113.0/24 HTTP/1.1
      Host:  rdap-ip.example.com
      Accept: application/rdap+json

  rdap-ip.example.com:
      HTTP/1.1 200 OK
      Content-Type: application/rdap+json
      Content-Length: 9001

      { ... }
      &lt;TCP disconnect&gt;

                </artwork>
            </figure>
        </section>
        <section title="Cache Busting" anchor="cache-busting">
            <t>
                Some <xref target="RFC7230">HTTP</xref> cache infrastructures do not adhere to caching standards
                adequately and could cache responses longer than is intended by the server.  To overcome these
                issues, clients can use an ad hoc and improbably used query parameter with a random value of their
                choosing.  As <xref target="parameters"></xref> instructs servers to ignore unknown parameters,
                this is compatible with the RDAP definition.
            </t>
            <figure>
                <preamble>
                    An example of using an unknown query parameter to bust caches:
                </preamble>
                <artwork>
  http://example.com/ip/192.0.2.0?__fuhgetaboutit=xyz123                    
                </artwork>
            </figure>
            <t>
                Use of an unknown parameter to overcome misbehaving caches is not part of any specification
                and is offered here for informational purposes.
            </t>            
        </section>
        <section title="Bootstrapping and Redirection" anchor="bootstrapping_redirection">
            <t>
                The traditional deployment model of WHOIS <xref target="RFC3912"></xref>
                does not provide a mechanism for determining the authoritative source
                for information.
             </t>
            <t>
                Some approaches have been implemented in the
                past, most notably the Joint WHOIS <xref target="lacnic-joint-whois"></xref> initiative.
                However, among other shortcomings, Joint WHOIS is implemented using
                proxies and server-side referrals.
            </t>       
            <t> 
                These issues are solved in RDAP using HTTP redirects and bootstrapping.
                Bootstrapping is discussed in <xref target="RFC7484"></xref>. In
                constrained environments, the processes outlined in <xref target="RFC7484"></xref>
                may not be viable, and there may be the need for servers acting as a "redirector".
            </t>
            <t>
                Redirector servers issue HTTP redirects to clients using a redirection table
                informed by <xref target="RFC7484"></xref>.
                <xref target="redir_example"></xref> diagrams a client using a redirector
                for bootstrapping.
            </t>
            <figure title="Querying RDAP Data for 23.1.1.1" align="center" anchor="redir_example">
                <artwork xml:space="preserve"><![CDATA[
                                   REDIRECTOR       ARIN
                                   RDAP             RDAP
                                     .               .
                                     |               |
     Q: 23.1.1.1? -----------------> |               |
                                     |               |
        <---------- HTTP 301 --------|               |
               ('Try ARIN RDAP')     |               |
                                     |               |
                                                     |
       Q: 23.1.1.1? -------------------------------> |
                                                     |
          <---------- HTTP 200 --------------------- |
                 (JSON response is returned)         |
                                                     |
                                                     |
                                                     .
            ]]></artwork>

            </figure>
            <t>
                In some cases, particularly sub-delegations made between Regional Internet Registries (RIRs)
                known as "ERX space" and transfers of networks, multiple HTTP
                redirects will be issued. <xref target="mim_redirector_example"></xref>
                shows such a scenario.
            </t>
            <figure title="Querying RDAP Data for Data That Has Been Transferred" align="center" anchor="mim_redirector_example">
                <artwork xml:space="preserve"><![CDATA[
                       REDIRECTOR  LACNIC           ARIN
                       RDAP        RDAP             RDAP
                         .           .               .
     Q: 23.1.1.1? ---->  |           |               |
                         |           |               |
       <-- HTTP 301 ---  |           |               |
      ('Try LACNIC')     |           |               |
                         |           |               |
                         |           |               |
     Q: 23.1.1.1? -----------------> |               |
                                     |               |
        <---------- HTTP 301 --------|               |
               ('Try ARIN RDAP')     |               |
                                     |               |
                                                     |
       Q: 23.1.1.1? -------------------------------> |
                                                     |
          <---------- HTTP 200 --------------------- |
                 (JSON response is returned)         |
                                                     |
                                                     |
                                                     .
            ]]></artwork>

            </figure>
        </section>

          <section title="Acknowledgements">
            <t>
                John Levine provided text to tighten up the Accept header field usage and the
                text for the section on 429 responses.
            </t>
            <t>
                Marc Blanchet provided some clarifying text regarding the use of URLs
                with redirects, as well as very useful feedback during Working Group Last Call (WGLC).
            </t>
            <t>
                Normative language reviews were provided by Murray S.&nbsp;Kucherawy, Andrew Sullivan,
                Tom Harrison, Ed Lewis, and Alexander Mayrhofer.
            </t>
            <t>
                Jean-Phillipe Dionne provided text for the Security Considerations section.
            </t>
            <t>
                The concept of the redirector server informatively discussed in 
                <xref target="bootstrapping_redirection"></xref> was documented by 
                Carlos M. Martinez and Gerardo Rada of LACNIC and Linlin Zhou of CNNIC
                and subsequently incorporated into this document.
            </t>
            <t>
                This document is the work product of the IETF's WEIRDS working group, of
                which Olaf Kolkman and Murray Kucherawy were chairs.
            </t>

        </section>
    </back>
</rfc>
