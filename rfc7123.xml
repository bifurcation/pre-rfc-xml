<?xml version="1.0" encoding="US-ASCII"?>
 <!DOCTYPE rfc SYSTEM "rfc2629.dtd">

 <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

 <?rfc rfcedstyle="yes"?>
 <?rfc compact="yes"?>
 <?rfc subcompact="no"?>
 <?rfc toc="yes" ?>
 <?rfc tocdepth="2"?>
 <?rfc symrefs="yes" ?>
 <rfc 
	 ipr="trust200902"
	 category="info"
	 number="7123"
	 consensus="yes"
	 submissionType="IETF">
   <front>
     <title abbrev="Sec. Impl. of IPv6 on IPv4 Networks">Security Implications of IPv6 on IPv4 Networks</title>


 <author fullname="Fernando Gont" initials="F." surname="Gont">
	 <organization abbrev="SI6 Networks/UTN-FRH">SI6 Networks / UTN-FRH</organization>

	 <address>

	     <postal>    
			 <street>Evaristo Carriego 2644</street>
		 <code>1706</code><city>Haedo</city>
		 <region>Provincia de Buenos Aires</region>
		 <country>Argentina</country>
	     </postal>
	     <phone>+54 11 4650 8472</phone>

	     <email>fgont@si6networks.com</email>
		 <uri>http://www.si6networks.com</uri>
	 </address>
     </author>

	 <author initials="W." surname="Liu" fullname="Will (Shucheng) Liu ">
       <organization>Huawei Technologies</organization>
       <address>
	 <postal>
	   <street>Bantian, Longgang District</street>
	   <city>Shenzhen</city>
	   <code>518129</code>
	   <country>P.R. China</country>
	 </postal>
	 <email>liushucheng@huawei.com</email>
       </address>
     </author>


     <date month="February" year="2014" />
     <area>Operations and Management</area>
     <workgroup>opsec wg</workgroup>


 <keyword>attacks</keyword>

     <abstract>
     <t>
 This document discusses the security implications of native IPv6 support and IPv6 transition/coexistence technologies on "IPv4-only" networks and describes possible mitigations for the aforementioned issues.</t>
     </abstract>
   </front>

   <middle>
 <section title="Introduction" anchor="intro"> 
 <t>Most general-purpose operating systems implement and enable native IPv6 <xref target="RFC2460"/> support and a number of transition/coexistence technologies by default. Support of IPv6 by all nodes is intended to become best current practice <xref target="RFC6540"/>. Some enterprise networks might, however, choose to delay active use of IPv6.</t>


 <t>This document describes operational practices to prevent security exposure in enterprise networks resulting from unplanned use of IPv6 on such
 networks. This document is only applicable to enterprise networks: networks
 where the network operator is not providing a general-purpose internet, but
 rather a business-specific network. The solutions proposed here are not practical for home networks, nor are they appropriate for provider networks such as ISPs, mobile providers, WiFi hotspot providers, or any other public internet service.
 </t>


 <t>In scenarios in which IPv6-enabled devices are deployed on enterprise networks that are intended to be IPv4-only, native IPv6 support and/or IPv6 transition/coexistence technologies could be leveraged by local or remote attackers for a number of (illegitimate) purposes. For example,

 <list style="symbols">
 <t>A Network Intrusion Detection System (NIDS) might be prepared to detect attack patterns for IPv4 traffic, but might be unable to detect the same attack patterns when a transition/coexistence technology is leveraged for that purpose.</t>
 <t>An IPv4 firewall might enforce a specific security policy in IPv4, but might be unable to enforce the same policy in IPv6.</t>
 <t>A NIDS or firewall might support both IPv4 and IPv6, but might not be configured to enforce on IPv6 traffic the same controls/policies it enforces on IPv4 traffic.</t>
 <t>Some transition/coexistence mechanisms could cause an internal host with otherwise limited IPv4 connectivity to become globally reachable over IPv6, therefore resulting in increased (and possibly unexpected) host exposure.
 <list style="hanging">
 <t>NOTE: Some transition/coexistence mechanisms (notably Teredo) are designed to traverse Network Address Port Translation (NAPT) <xref target="RFC2663"/> devices, allowing incoming IPv6 connections from the Internet to hosts behind the organizational firewall or NAPT (which in many deployments provides a minimum level of protection by only allowing those instances of communication that have been initiated from the internal network).
 </t>
 </list>
 </t>

 <t>IPv6 support could, either inadvertently or as a result of a deliberate attack, result in Virtual Private Network (VPN) traffic leaks if IPv6-unaware VPN software is employed by dual-stacked hosts <xref target="VPN-LEAKS"/>.
 </t>
 </list>
 </t>

 <t>In general, most of the aforementioned security implications can be mitigated by enforcing security controls on native IPv6 traffic and on IPv4-tunneled IPv6 traffic. Among such controls, is the enforcement of filtering policies to block undesirable traffic. While IPv6 widespread/global IPv6 deployment has been slower than expected, it is nevertheless happening; and thus, filtering IPv6 traffic (whether native or transition/coexistence) to mitigate IPv6 security implications on IPv4 networks should (generally) only be considered as a temporary measure until IPv6 is deployed.
 <list style="hanging">
 <t>NOTE: The aforementioned security controls should contemplate not only network-based solutions, but also host-based solutions (such as, e.g., personal firewalls).</t>
 </list>
 </t>

 </section>


 <section title="Security Implications of Native IPv6 Support" anchor="native-ipv6">
 <t>
 Most popular operating systems include IPv6 support that is enabled by default. This means that even if a network is expected to be IPv4-only, much of its infrastructure is nevertheless likely to be IPv6-enabled. For example, hosts are likely to have at least link-local IPv6 connectivity, which might be exploited by attackers with access to the local network.

 </t>

 <t>
 Additionally, unless appropriate measures are taken, an attacker with access to an "IPv4-only" local network could impersonate a local router and cause local hosts to enable their 'non-link-local' IPv6 connectivity (e.g., by sending Router Advertisement messages), possibly circumventing security controls that were enforced only on IPv4 communications.

 <list style="hanging">
 <t>NOTE: <xref target="THC-IPV6"/> and <xref target="IPv6-Toolkit"/> include tools that implement this attack vector (along with many others). <xref target="Waters2011"/> provides an example of how this could be achieved using publicly available tools. 
 </t>
 </list>
 </t>

 <t>Native IPv6 support could also possibly lead to VPN-traffic leakages when hosts employ VPN software that, not only does not support IPv6, but does nothing about IPv6 traffic. <xref target="VPN-LEAKS"/> describes this issue, along with possible mitigations.
 </t>

 <t>In general, networks should enforce on native IPv6 traffic the same security policies currently enforced on IPv4 traffic. However, in those networks in which IPv6 has not yet been deployed and enforcing the aforementioned policies is deemed as infeasible, a network administrator might mitigate IPv6-based attack vectors by means of appropriate packet filtering.
 </t>

 <section title="Filtering Native IPv6 Traffic" anchor="filtering-ipv6">
 <t>Some layer-2 devices might have the ability to selectively filter packets
 based on the type of layer-2 payload. When such functionality is available,
 IPv6 traffic could be blocked at those layer-2 devices by blocking, for
 example, Ethernet frames with the Protocol Type field set to 0x86dd <xref
 target="IANA-ETHER"/>. We note, however, that blocking IPv6 at layer-2 might
 create problems that are difficult to diagnose, inclusive of intentional or
 incidental use of link-local addressing (as in Multicast DNS/DNS-based Service
 Discovery <xref target="RFC6762"/> <xref target="RFC6763"/>); sites that
 enforce such a filtering policy should keep that possibility in mind when debugging the network.</t>

 <t>Attacks based on Stateless Address Autoconfiguration (SLAAC) <xref target="RFC3756"/> can be mitigated with technologies such as Router
 Advertisement Guard (RA-Guard) <xref target="RFC6105"/> <xref
 target="RA-GRD-IMP"/>. In a similar way, DHCPv6-based attacks can be mitigated
 with technologies such as DHCPv6-Shield <xref target="SHIELD"/>. However,
 both RA-Guard and DHCPv6-Shield are incapable of mitigating attack vectors that employ IPv6 link-local addresses, since configuration of such addresses does not rely on Router Advertisement messages or DHCPv6-server messages.</t>

 <t>Administrators considering the filtering of native IPv6 traffic at layer-3 devices are urged to pay attention to the general considerations for IPv6 traffic filtering discussed in <xref target="advice-filtering"/>.
 <list style="hanging">
 <t>NOTE: If native IPv6 traffic is filtered at layer-2, local IPv6 nodes would only get to configure IPv6 link-local addresses.</t>
 </list>
 </t>

 <t>
 In order to mitigate attacks based on native IPv6 traffic, IPv6 security controls should be enforced on both IPv4 and IPv6 networks. The aforementioned controls might include: deploying IPv6-enabled NIDS, implementing IPv6 firewalling, etc.

 <list style="hanging">
 <t>NOTE: In some very specific scenarios (e.g., military operations networks) in which only IPv4 service might be desired, a network administrator might want to disable IPv6 support in all the communicating devices.</t>
 </list>
 </t>

 </section>
 </section>


 <section title="Security Implications of Tunneling Mechanisms" anchor="tunnel-implications">

 <t>
 Unless properly managed, tunneling mechanisms might result in negative security implications. For example, they might increase host exposure, might be leveraged to evade security controls, might contain protocol-based vulnerabilities, and/or the corresponding code might contain bugs with security implications.

 <list style="hanging">
 <t>NOTE: <xref target="RFC6169"/> describes the security implications of tunneling mechanisms in detail. Of the plethora of tunneling mechanisms that have so far been standardized
 and widely implemented, the so-called "automatic tunneling" mechanisms (such as
 Teredo, Intra-Site Automatic Tunnel Addressing Protocol (ISATAP), and 6to4) are of particular interest from a security standpoint, since they might be employed without prior consent or action of the user or network administrator.</t>
 </list>
 </t>
 <t>
 Tunneling mechanisms should be a concern not only to network administrators that have consciously deployed them, but also to those who have not deployed them, as these mechanisms might be leveraged to bypass their security policies.


 <list style="hanging">
 <t>NOTE: <xref target="CERT2009"/> contains some examples of how tunnels can be leveraged to bypass firewall rules.
 </t>
 </list>
 </t>

 <t>
 The aforementioned issues could be mitigated by applying the common security practice of only allowing traffic deemed as "necessary" (i.e., the so-called "default deny" policy). Thus, when such policy is enforced, IPv6 transition/coexistence traffic would be blocked by default and would only be allowed as a result of an explicit decision.

 <list style="hanging">
 <t>
 NOTE: It should be noted that this type of policy is usually enforced on a network that is the target of such traffic (such as an enterprise network). IPv6 transition traffic should generally never be filtered, e.g., by an ISP when it is transit traffic.
 </t>
 </list>
 </t>

 <t>
 In those scenarios in which transition/coexistence traffic is meant to be blocked, it is highly recommended that, in addition to the enforcement of filtering policies at the organizational perimeter, the corresponding transition/coexistence mechanisms be disabled on each node connected to the organizational network. This would not only prevent security breaches resulting from accidental use of these mechanisms, but would also disable this functionality altogether, possibly mitigating vulnerabilities that might be present in the host implementation of these transition/coexistence mechanisms.
 </t>


 <t>
 IPv6-in-IPv4 tunneling mechanisms (such as 6to4 or configured tunnels) can generally be blocked by dropping IPv4 packets that contain a Protocol field set to 41. Security devices such as NIDS might also include signatures that detect such transition/coexistence traffic.
 </t>
 <t>Administrators considering the filtering of transition/coexistence traffic are urged to pay attention to the general considerations for IPv6 traffic filtering discussed in <xref target="advice-filtering"/>.
 </t>

 <t>
 We note that this document only covers standardized IPv6 tunneling mechanisms;
it does not aim to cover non-standard tunneling mechanisms
 or tunneling based on IPsec <xref target="RFC4301"/> or 
on SSL/TLS <xref target="RFC5246"/> <xref target="RFC6101"/>.
 </t>

 <section title="Filtering 6in4" anchor="filtering-6in4">
 <t>
 Probably the most basic type of tunnel employed for connecting IPv6 "islands" is the so-called "6in4", in which IPv6 packets are encapsulated within IPv4 packets. These tunnels typically result from manual configuration at the two tunnel endpoints.
 </t>
 <t>6in4 tunnels can be blocked by blocking IPv4 packets with a Protocol field of 41.</t>

 </section>

 <section title="Filtering 6over4" anchor="filtering-6over4">
 <t>
 <xref target="RFC2529"/> specifies a mechanism known as 6over4 or
 'IPv6 over IPv4' (or colloquially as 'virtual Ethernet'), which
 comprises a set of mechanisms and policies to allow isolated IPv6
 hosts located on physical links with no directly connected IPv6 router to become fully functional IPv6 hosts by using an IPv4 domain that supports IPv4 multicast as their virtual local link.
 <list style="hanging">
 <t>
 NOTE: This transition technology has never been widely deployed because of the low level of deployment of multicast in most networks.</t>
 </list>
 </t>

 <t>
 6over4 encapsulates IPv6 packets in IPv4 packets with their Protocol field set to 41. As a result, simply filtering all IPv4 packets that have a Protocol field equal to 41 will filter 6over4 (along with many other transition technologies).
 </t>
 <t>
 A more selective filtering could be enforced such that 6over4 traffic is filtered while other transition traffic is still allowed. Such a filtering policy would block all IPv4 packets that have their Protocol field set to 41, and that have a Destination Address that belongs to the prefix 239.0.0.0/8.
 </t>
 <t>
 This filtering policy basically blocks 6over4 Neighbor Discovery traffic directed to multicast addresses, thus preventing SLAAC, address resolution, etc. Additionally, it would prevent the 6over4 multicast addresses from being leveraged for the purpose of network reconnaissance.
 </t>
 </section>

 <section title="Filtering 6rd" anchor="filtering-6rd">
 <t>6rd builds upon the mechanisms of 6to4 to enable the rapid deployment of IPv6 on IPv4 infrastructures, while avoiding some downsides of 6to4. Usage of 6rd was originally documented in <xref target="RFC5569"/>, and the mechanism was generalized to other access technologies and formally standardized in <xref target="RFC5969"/>.</t>

 <t>6rd can be blocked by blocking IPv4 packets with the Protocol field set to 41.</t>
 </section>


 <section title="Filtering 6to4" anchor="filtering-6to4">

 <t>6to4 <xref target="RFC3056"/> is an address assignment and router-to-router, host-to-router, and router-to-host automatic tunneling mechanism that is meant to provide IPv6 connectivity between IPv6 sites and hosts across the IPv4 Internet.
 <list style="hanging">
 <t>NOTE: The security considerations for 6to4 are discussed in detail in <xref target="RFC3964"/>. <xref target="RFC6343"/> provides advice to network operators about 6to4 (some of which relates to security mitigations).
 </t>
 </list>
 </t>
 <t>
 As discussed in <xref target="tunnel-implications"/>, all IPv6-in-IPv4 traffic, including 6to4, could be easily blocked by filtering IPv4 packets that contain their Protocol field set to 41. This is the most effective way of filtering such traffic.
 </t>

 <t>
 If 6to4 traffic is meant to be filtered while other IPv6-in-IPv4 traffic is allowed, then more finer-grained filtering rules could be applied. For example, 6to4 traffic could be filtered by applying filtering rules such as:

 <list style="symbols">
 <t>
 Filter outgoing IPv4 packets that have the Destination Address set to an address that belongs to the prefix 192.88.99.0/24.
 </t>
 <t>
 Filter incoming IPv4 packets that have the Source Address set to an address that belongs to the prefix 192.88.99.0/24.
 <list style="hanging">
 <t>NOTE: These rules assume that the corresponding nodes employ the "Anycast Prefix for 6to4 Relay Routers" <xref target="RFC3068"/>. It has been suggested that 6to4 relays send their packets with their IPv4 Source Address set to 192.88.99.1.
 </t>
 </list>
 </t>

 <t>
 Filter outgoing IPv4 packets that have the Destination Address set to the IPv4 address of well-known 6to4 relays.</t>
 <t>
 Filter incoming IPv4 packets that have the Source Address set to the IPv4 address of well-known 6to4 relays.
 </t>
 </list>

 <list style="hanging">
 <t>
 These last two filtering policies will generally be unnecessary, and possibly infeasible to enforce (given the number of potential 6to4 relays, and the fact that many relays might remain unknown to the network administrator). If anything, they should be applied with the additional requirement that such IPv4 packets have their Protocol field set to 41 to avoid the case where other services available at the same IPv4 address as a 6to4 relay are mistakenly made inaccessible.</t>
 </list>
 </t>

 <t>If the filtering device has capabilities to inspect the payload of IPv4 packets, then the following filtering rules could be enforced:

 <list style="symbols">
 <t>
 Filter outgoing IPv4 packets that have their Protocol field set to 41, and that have an IPv6 Source Address (embedded in the IPv4 payload) that belongs to the prefix 2002::/16.
 </t>
 <t>
 Filter incoming IPv4 packets that have their Protocol field set to 41, and that have an IPv6 Destination address (embedded in the IPv4 payload) that belongs to the prefix 2002::/16.
 </t>
 </list>
 </t>


 </section>

 <section title="Filtering ISATAP" anchor="filtering-isatap">

 <t>ISATAP <xref target="RFC5214"/> is an Intra-site tunneling protocol, and thus it is generally expected that such traffic will not traverse the organizational firewall of an IPv4-only network. Nevertheless, ISATAP can be easily blocked by blocking IPv4 packets with a Protocol field of 41.
 </t>
 <t>
 The most popular operating system that includes an implementation of ISATAP in the default installation is Microsoft Windows. Microsoft Windows obtains the ISATAP router address by resolving the domain name isatap.&lt;localdomain&gt; to DNS A resource records. Additionally, it tries to learn the ISATAP router address by employing Link-Local Multicast Name Resolution (LLMNR) <xref target="RFC4795"/> to resolve the name "isatap". As a result, blocking ISATAP by preventing hosts from successfully performing name resolution for the aforementioned names and/or by filtering packets with specific IPv4 destination addresses is both difficult and undesirable.
 </t>
 </section>

 <section title="Filtering Teredo" anchor="filtering-teredo">
 <t>
 Teredo <xref target="RFC4380"/> is an address assignment and automatic tunneling technology that provides IPv6 connectivity to dual-stack nodes that are behind one or more Network Address Port Translation (NAPT) <xref target="RFC2663"/> devices, by encapsulating IPv6 packets in IPv4-based UDP datagrams. Teredo is meant to be a 'last-resort' IPv6 connectivity technology, to be used only when other technologies such as 6to4 cannot be deployed (e.g., because the edge device has not been assigned a public IPv4 address).
 </t>


 <t>
 As noted in <xref target="RFC4380"/>, in order for a Teredo client to configure its Teredo IPv6 address, it must contact a Teredo server through the Teredo service port (UDP port number 3544).
 </t>

 <t>
 To prevent the Teredo initialization process from succeeding, and hence prevent the use of Teredo, an organizational firewall could filter outgoing UDP packets with a Destination Port of 3544.
 <list style="hanging">
 <t>
 NOTE: It is clear that such a filtering policy does not prevent an attacker from running its own Teredo server in the public Internet, using a non-standard UDP port for the Teredo service port (i.e., a port number other than 3544).
 </t>
 </list>
 </t>


<t>If the filtering device has capabilities to inspect the payload of IPv4 packets, the following (additional) filtering policy could be enforced:

<list style="symbols">
<t>
Filter outgoing IPv4/UDP packets that embed an IPv6 packet with the "Version" field set to 6, and an IPv6 Source Address that belongs to the prefix 2001::/32.
</t>


<t>
Filter incoming IPv4/UDP packets that embed an IPv6 packet with the "Version" field set to 6, and an IPv6 Destination Address that belongs to the prefix 2001::/32.
</t>
</list>
<list style="hanging">
<t>NOTE: These two filtering rules could, at least in theory, result in false positives. Additionally, they would generally require the filtering device to reassemble fragments prior to enforcing filtering rules, since the information required to enforce them might be missing in the received fragments (which should be expected if Teredo is being employed for malicious purposes).
</t>
</list>
</t>

<t>
The most popular operating system that includes an implementation of Teredo in
the default installation is Microsoft Windows. Microsoft Windows obtains the
Teredo server addresses (primary and secondary) by resolving the domain name
teredo.ipv6.microsoft.com into DNS A records. 

A network administrator might want to prevent Microsoft Windows hosts
from obtaining Teredo service by filtering, at the organizational firewall, outgoing UDP datagrams (i.e., IPv4 packets with the Protocol field set to 17) that contain in the IPv4 Destination Address any of the IPv4 addresses that the domain name teredo.ipv6.microsoft.com maps to (or the IPv4 address of any well-known Teredo server). Additionally, the firewall would filter incoming UDP datagrams from any of the IPv4 addresses to which the domain names of well-known Teredo servers (such as teredo.ipv6.microsoft.com) resolve.
<list style="hanging">
<t>
NOTE: As these IPv4 addresses might change over time, an administrator should obtain these addresses when implementing the filtering policy, and should also be prepared to keep this list up to date. The corresponding addresses can be easily obtained from a UNIX host by issuing the command 'dig teredo.ipv6.microsoft.com a' (without quotes), where dig(1) is a free-software tool (part of the "dnsutils" package) produced by the Internet Software Consortium (ISC).</t>
</list>
</t>
<t>
It should be noted that even with all these filtering policies in
place, a node in the internal network might still be able to
communicate with some Teredo clients. That is, it could configure an
IPv6 address itself (without even contacting a Teredo server), and it might send Teredo traffic to those peers for which intervention of the host's Teredo server is not required (e.g., Teredo clients behind a cone NAT).
</t>
</section>


<section title="Filtering Tunnel Broker with Tunnel Setup Protocol (TSP)" anchor="filtering-tsp">
<t>
The tunnel broker model enables dynamic configuration of tunnels between a tunnel client and a tunnel server. The tunnel broker provides a control channel for creating, deleting, or updating a tunnel between the tunnel client and the tunnel server. Additionally, the tunnel broker may register the user's IPv6 address and name in the DNS. Once the tunnel is configured, data can flow between the tunnel client and the tunnel server. <xref target="RFC3053"/> describes the tunnel broker model, while <xref target="RFC5572"/> specifies the Tunnel Setup Protocol (TSP), which can be used by clients to communicate with the Tunnel Broker.
</t>
<t>
TSP can use either TCP or UDP as the transport protocol. In both cases, TSP uses port number 3653, which has been assigned by the IANA for this purpose. As a result, TSP (the Tunnel Broker control channel) can be blocked by blocking TCP and UDP packets originating from the local network and destined to UDP port 3653 or TCP port 3653. Additionally, the data channel can be blocked by blocking UDP packets originated from the local network and destined to UDP port 3653, and IPv4 packets with a Protocol field set to 41.
</t>

</section>

<section title="Filtering AYIYA" anchor="filtering-ayiya">
<t>AYIYA ("Anything In Anything") <xref target="AYIYA"/> allows the tunneling of packets across Network Address Port Translation (NAPT) <xref target="RFC2663"/> devices. While the specification of this tunneling mechanism was never published as an RFC, it is nevertheless widely deployed <xref target="SixXS-stats"/>.</t>
<t>
AYIYA can be blocked by blocking TCP and UDP packets originating from the local network and destined to UDP port 5072 or TCP port 5072.
</t>
</section>

</section>


<section title="Additional Considerations when Filtering IPv6 Traffic" anchor="advice-filtering">
<t>
IPv6 deployments in the Internet are continually increasing, and some hosts default to preferring IPv6 connectivity whenever it is available. This is likely to cause IPv6-capable hosts to attempt to reach an ever-increasing number of popular destinations via IPv6, even if this IPv6 connectivity relies on a transition technology over an "IPv4-only" network.</t>

<t>A large source of IPv6 brokenness today comes from nodes that believe that they have functional IPv6 connectivity, but the path to their destination fails somewhere upstream <xref target="Anderson2010"/> <xref target="Anderson2011"/> <xref target="Huston2010b"/> <xref target="Huston2012"/>. Upstream filtering of transition technologies or situations where a misconfigured node attempts to "provide" native IPv6 service on a given network without proper upstream IPv6 connectivity may result in hosts attempting to reach remote nodes via IPv6, and depending on the absence or presence and specific implementation details of "Happy Eyeballs" <xref target="RFC6555"/>, there might be a non-trivial timeout period before the host falls back to IPv4 <xref target="Huston2010a"/> <xref target="Huston2012"/>.</t>

<t>For this reason, networks attempting to prevent IPv6 traffic from traversing their devices should consider configuring their local recursive DNS servers to respond to queries for AAAA DNS records with a DNS RCODE of 0 (NOERROR) <xref target="RFC1035"/> or to silently ignore such queries, and should even consider filtering AAAA records at the network ingress point to prevent the internal hosts from attempting their own DNS resolution. This will ensure that hosts that are on an "IPv4-only" network will only receive DNS A records, and they will be unlikely to attempt to use (likely broken) IPv6 connectivity to reach their desired destinations.</t>

<t>We note that in scenarios where DNSSEC <xref target="RFC4033"/> is deployed, stripping AAAA records from DNS responses would lead to DNS responses elicited by queries with the DO and CD bits set <xref target="RFC4035"/> to be considered invalid, and hence discarded. This situation is similar to that of DNS64 <xref target="RFC6147"/> in the presence of DNSSEC and should be considered a drawback associated with this approach.
</t>

<t>Additionally, it should be noted that when filtering IPv6 traffic, it is good practice to signal the packet drop to the source node, such that it is able to react to the packet drop in a more appropriate and timely way. For example, a firewall could signal the packet drop by means of an ICMPv6 error message (or TCP <xref target="RFC0793"/> RST segment if appropriate), such that the source node can, e.g., quickly react as described in <xref target="RFC5461"/>. For obvious reasons, if the traffic being filtered is IPv6 transition/coexistence traffic, the signaling packet should be sent by means of the corresponding IPv6 transition/coexistence technology.
</t>
</section>

    <section title="Security Considerations">
<t>
This document discusses the security implications of IPv6 on IPv4 networks and describes a number of techniques to mitigate the aforementioned issues. In general, the possible mitigations boil down to enforcing on native IPv6 and IPv6 transition/coexistence traffic the same security policies currently enforced for IPv4 traffic and/or blocking the aforementioned traffic when it is deemed as undesirable.
</t>
    </section>

    <section title="Acknowledgements">
<t>The authors would like to thank Wes George, who contributed most of the text that comprises <xref target="advice-filtering"/> of this document.</t>
<t>The authors would like to thank (in alphabetical order) Ran Atkinson, Brian Carpenter, Stephen Farrell, Guillermo Gont, Joel Jaeggli, Panos Kampanakis, Warren Kumari, Ted Lemon, David Malone, Joseph Salowey, Arturo Servin, Donald Smith, Tina Tsou, and Eric Vyncke for providing valuable comments on earlier versions of this document.</t>

<t>This document is based on the results of the project "Security Assessment of the Internet Protocol version 6 (IPv6)" <xref target="CPNI-IPv6"/>, carried out by Fernando Gont on behalf of the UK Centre for the Protection of National Infrastructure (CPNI). Fernando Gont would like to thank the UK CPNI for their continued support.</t>

    </section>


  </middle>

  <back>


  <references title="Normative References">
	<?rfc include="reference.RFC.1035" ?>
	<?rfc include="reference.RFC.2460" ?>
	<?rfc include="reference.RFC.2529" ?>
	<?rfc include="reference.RFC.3053" ?>
	<?rfc include="reference.RFC.3056" ?>
	<?rfc include="reference.RFC.3068" ?>
	<?rfc include="reference.RFC.4033" ?>
	<?rfc include="reference.RFC.4035" ?>
	<?rfc include="reference.RFC.4380" ?>
	<?rfc include="reference.RFC.4795" ?>
	<?rfc include="reference.RFC.5214" ?>
	<?rfc include="reference.RFC.5569" ?>
	<?rfc include="reference.RFC.5969" ?>
	<?rfc include="reference.RFC.5572" ?>
	<?rfc include="reference.RFC.6147" ?>
  </references>

  <references title="Informative References">
	<?rfc include="reference.RFC.0793" ?>
	<?rfc include="reference.RFC.2663" ?>
	<?rfc include="reference.RFC.3756" ?>
	<?rfc include="reference.RFC.3964" ?>
	<?rfc include="reference.RFC.4301" ?>
	<?rfc include="reference.RFC.5246" ?>
	<?rfc include="reference.RFC.5461" ?>
	<?rfc include="reference.RFC.6101" ?>
	<?rfc include="reference.RFC.6105" ?>
	<?rfc include="reference.RFC.6169" ?>
	<?rfc include="reference.RFC.6343" ?>
	<?rfc include="reference.RFC.6540" ?>
	<?rfc include="reference.RFC.6555" ?>
	<?rfc include="reference.RFC.6762" ?>
	<?rfc include="reference.RFC.6763" ?>

<!--draft-ietf-v6ops-ra-guard-implementation: in AUTH48 (RFC-to-be 7113)-->
<reference
  anchor="RA-GRD-IMP"><front><title>Implementation
Advice for IPv6 Router Advertisement Guard (RA-Guard)</title><author
							       initials="F"
							       surname="Gont"
							       fullname="Fernando
							       Gont"><organization/></author><date
											       month="November"
											       day="14"
											       year="2012"/><abstract><t>The
IPv6 Router Advertisement Guard (RA-Guard) mechanism is commonly employed to
mitigate attack vectors based on forged ICMPv6 Router Advertisement messages.
Many existing IPv6 deployments rely on RA- Guard as the first line of defense
against the aforementioned attack vectors.  However, some implementations of
RA-Guard have been found to be prone to circumvention by employing IPv6
Extension Headers. This document describes the evasion techniques that affect
the aforementioned implementations, and formally updates RFC 6105, such that
the aforementioned RA-Guard evasion vectors are
eliminated.</t></abstract></front><seriesInfo name="Work in"
				    value="Progress"/><format
											   type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-v6ops-ra-guard-implementation-07.txt"/></reference>
	
<!--I-D exists draft-ietf-opsec-vpn-leakages-02-->

<reference anchor="VPN-LEAKS"><front><title>Virtual Private
Network (VPN) traffic leakages in dual-stack hosts/ networks</title><author
								      initials="F"
								      surname="Gont"
								      fullname="Fernando
								      Gont"><organization/></author><date
												      month="August"
												      day="22"
												      year="2013"/><abstract><t>The
subtle way in which the IPv6 and IPv4 protocols coexist in typical networks,
together with the lack of proper IPv6 support in popular Virtual Private
Network (VPN) products, may inadvertently result in VPN traffic leaks.  That
is, traffic meant to be transferred over a VPN connection may leak out of such
connection and be transferred in the clear from the local network to the final
destination.  This document discusses some scenarios in which such VPN leakages
may occur, either as a side effect of enabling IPv6 on a local network, or as a
result of a deliberate attack from a local attacker.  Additionally, it
discusses possible mitigations for the aforementioned
issue.</t></abstract></front><seriesInfo name="Work in"
			       value="Progress"/><format
									   type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-opsec-vpn-leakages-02.txt"/></reference>

<!-- draft-gont-opsec-dhcpv6-shield-01:
replaced by draft-ietf-opsec-dhcpv6-shield-01 -->

<reference anchor="SHIELD"><front><title>DHCPv6-Shield:
Protecting Against Rogue DHCPv6 Servers</title><author initials="F"
						 surname="Gont"
						 fullname="Fernando
						 Gont"><organization/></author>
<author initials="W" surname="Liu" fullname="Will Liu">
  <organization/>
</author>
<author initials="G" surname="Van de Velde" fullname="Gunter Van de Velde">
  <organization/>
</author>

<date month="October" day="22" year="2013"/>
</front><seriesInfo
								     name="Work in"
								     value="Progress"/>
</reference>

<!-- Expired draft-massar-v6ops-ayiya-02-->
<reference anchor="AYIYA"><front><title>AYIYA: Anything In
Anything</title><author initials="J" surname="Massar" fullname="Jeroen
		  Massar"><organization/></author><date month="July" day="8"
						    year="2004"/><abstract><t>This
document defines a tunneling protocol that can be encapsulated in any other
protocol. Using authentication tokens multiple tunnels can be created from
behind the same NAT. The tokens allow one to identify the sender of the packet
thus making it possible to automatically switch over the endpoint. This
protocol is intended as an alternative to the proto-41 protocol in use for
tunneling IPv6 over IPv4 packets over the internet. Due to the authentication
this protocol is especially useful for dynamic non-24/7 endnodes which are
located behind NATs and want to use for instance a IPv6 Tunnel Broker. The
protocol can carry any payload and thus is not limited to only IPv6 over IPv4
but can also be used for IPv4 over IPv6 and many other combinations of
protocols.</t></abstract></front><seriesInfo name="Work in"
				   value="Progress"/>
</reference>

    <reference anchor="IANA-ETHER" target="http://www.iana.org/assignments/ethernet-numbers">
  <front>
  <title>Ethernet Numbers</title>
  <author><organization>IANA</organization>
  </author>
  <date />
  </front>
  </reference>


    <reference anchor="CERT2009" target="http://www.cert.org/blogs/vuls/2009/04/bypassing_firewalls_with_ipv6.html">
  <front>
  <title>Bypassing Firewalls with IPv6 Tunnels</title>
<author initials="R" surname="Giobbi" fullname="Ryan Giobbi">
  <organization/>
</author>

  <date month="April" year="2009"/>
  </front>
<seriesInfo name="CERT/CC" value="Blog"/>
  </reference>

 
<!-- Preference -->
    <reference anchor="Huston2010a" target="http://www.potaroo.net/stats/1x1/">
  <front>
  <title>IPv6 Measurements</title>
  <author initials="G." surname="Huston" fullname="Geoff Huston">
  </author>
  <date year="2010"/>
  </front>
  </reference>

<!-- Brokenness -->
    <reference anchor="Huston2010b" target="http://www.potaroo.net/ispcol/2010-12/6to4fail.pdf">
  <front>
  <title>Flailing IPv6</title>
  <author initials="G." surname="Huston" fullname="Geoff Huston">
  </author>
  <date month="December" year="2010"/>
  </front>
<seriesInfo name="The ISP Column:" value="A monthly column on things Internet"/>
  </reference>

<!-- Preference and brokenness -->
    <reference anchor="Huston2012" target="http://www.potaroo.net/ispcol/2012-05/notquite.pdf">
  <front>
  <title>Bemused Eyeballs: Tailoring Dual Stack Applications in a CGN Environment</title>
  <author initials="G." surname="Huston" fullname="Geoff Huston">
  </author>
  <date month="May" year="2012"/>
  </front>
<seriesInfo name="The ISP Column:" value="A monthly column on things Internet"/>
  </reference>


<!-- Brokenness -->
    <reference anchor="Anderson2010" target="http://ripe61.ripe.net/presentations/162-ripe61.pdf">
  <front>
  <title>Measuring and combating IPv6 brokenness</title>
  <author initials="T." surname="Anderson" fullname="Tore Anderson">
  </author>
  <date month="November" year="2010"/>
  </front>
		<seriesInfo name="RIPE 61," value="Roma"/>
  </reference>


<!-- Brokenness -->
    <reference anchor="Anderson2011" target="http://www.fud.no/ipv6/">
  <front>
  <title>IPv6 dual-stack client loss in Norway</title>
  <author initials="T." surname="Anderson" fullname="Tore Anderson">
  </author>
  <date year="2011"/>
  </front>
  </reference>


    <reference anchor="CPNI-IPv6">
  <front>
  <title abbrev="Security Assessment of the Internet Protocol version 6 (IPv6)">Security Assessment of the Internet Protocol version 6 (IPv6)</title>
  <author initials="F.G." surname="Gont" fullname="F. Gont">
				<organization>Centre for the Protection of National Infrastructure</organization>
  </author>
  <date />
  </front>
		<seriesInfo name="UK Centre for the Protection of National Infrastructure," value="(available on request)"/>
  </reference>

	<reference anchor="IPv6-Toolkit" target="http://www.si6networks.com/tools/ipv6toolkit">
		<front>
			<title>SI6 Networks' IPv6 Toolkit</title>
			<author>
				<organization>SI6 Networks</organization>
			</author>
			<date year=""/>
		</front>
	</reference>


	<reference anchor="THC-IPV6" target="http://www.thc.org/thc-ipv6/">
		<front>
			<title>THC-IPV6 - attacking the IPV6 protocol suite</title>
			<author>
				<organization>The Hacker's Choice</organization>
			</author>
			<date month="December" year="2013"/>
		</front>
	</reference>


    <reference anchor="Waters2011" target="http://wirewatcher.wordpress.com/2011/04/04/the-slaac-attack-using-ipv6-as-a-weapon-against-ipv4/">
  <front>
  <title>The SLAAC Attack - using IPv6 as a weapon against IPv4</title>
  <author initials="A.W." surname="Waters" fullname="Alec Waters">
  </author>
  <date month="April" year="2011"/>
  </front>
  </reference>


    <reference anchor="SixXS-stats" target="http://www.sixxs.net/misc/usage/">
  <front>
  <title>SixXS - IPv6 Deployment &amp; Tunnel Broker :: Statistics</title>
  <author initials="" surname="SixXS" fullname="SixXS">
  </author>
  <date month="" year="2013"/>
  </front>
  </reference>


</references>


<section title="Summary of Filtering Rules">

    <texttable title="Summary of filtering rules" style="all" anchor="table">
        <ttcol align="center">Technology</ttcol>
        <ttcol align="center">Filtering rules</ttcol>
        <c>Native&nbsp;IPv6</c>
        <c>EtherType 0x86DD</c>
        <c>6in4</c>
        <c>IP proto 41</c>
        <c>6over4</c>
        <c>IP proto 41</c>
        <c>6rd</c>
        <c>IP proto 41</c>
        <c>6to4</c>
        <c>IP proto 41</c>
        <c>ISATAP</c>
        <c>IP proto 41</c>
        <c>Teredo</c>
        <c>UDP Dest Port 3544</c>
        <c>TB with&nbsp;TSP</c>
        <c>(IP proto 41) || (UDP Dest Port 3653 || TCP Dest Port 3653)</c>
        <c>AYIYA</c>
        <c>UDP Dest Port 5072 || TCP Dest Port 5072</c>
    </texttable>
<t>
<list style="hanging">
<t>NOTE: the table above describes general and simple filtering rules for blocking the corresponding traffic. More finer-grained rules might be available in each of the corresponding sections of this document.</t>
</list>
</t>
</section>


  </back>
</rfc>
