<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY RFC4291 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4291.xml">
<!ENTITY RFC3493 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3493.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2765 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2765.xml">
<!ENTITY RFC4038 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4038.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC5214 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5214.xml">
<!ENTITY RFC3986 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
<!ENTITY I-D.ietf-behave-address-format SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-behave-address-format.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<?rfc rfcedstyle="yes"?>

<rfc number="5952" category="std" ipr="trust200902" updates="4291">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="IPv6 Text Representation">A Recommendation for IPv6 Address Text Representation</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Seiichi Kawamura" initials="S.K." 
            surname="Kawamura">
      <organization>NEC BIGLOBE, Ltd.</organization>

      <address>
        <postal>
          <street>14-22, Shibaura 4-chome</street>

          <!-- Reorder these if your country does things differently -->

          <city>Minatoku</city>

          <region>Tokyo</region>

          <code>108-8558</code>

          <country>JAPAN</country>
        </postal>

        <phone>+81 3 3798 6085</phone>

        <email>kawamucho@mesh.ad.jp</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <author fullname="Masanobu Kawashima" initials="M.K." 
           surname="Kawashima">
      <organization>NEC AccessTechnica, Ltd.</organization>

      <address>
        <postal>
          <street>800, Shimomata</street>

          <!-- Reorder these if your country does things differently -->

          <city>Kakegawa-shi</city>

          <region>Shizuoka</region>

          <code>436-8501</code>

          <country>JAPAN</country>
        </postal>

        <phone>+81 537 23 9655</phone>

        <email>kawashimam@necat.nec.co.jp</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date month="August" year="2010" />

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>IPv6 Maintenance Working Group</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>IPv6</keyword>
    <keyword>text representation</keyword>
    <keyword>canonical</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>As IPv6 deployment increases, there will be a dramatic increase in the
need to use IPv6 addresses in text. While the IPv6 address architecture in
Section 2.2 of RFC 4291 describes a flexible model for text representation of
an IPv6 address, this flexibility has been causing problems for operators,
system engineers, and users. This document defines a canonical textual
representation format. It does not define a format for internal storage, such
as within an application or database.  It is expected that the canonical format
will be followed by humans and systems when representing IPv6 addresses as text, but
all implementations must accept and be able to handle any legitimate RFC 4291
format. 
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>A single IPv6 address can be text represented in many ways. Examples are shown below.</t>

      <t><list style="empty">
      <t>2001:db8:0:0:1:0:0:1</t>
      <t>2001:0db8:0:0:1:0:0:1</t>
      <t>2001:db8::1:0:0:1</t>
      <t>2001:db8::0:1:0:0:1</t>
      <t>2001:0db8::1:0:0:1</t>
      <t>2001:db8:0:0:1::1</t>
      <t>2001:db8:0000:0:1::1</t>
      <t>2001:DB8:0:0:1::1</t>
      </list></t>

      <t>All of the above examples represent the same IPv6 address. This flexibility has caused many problems
      for operators, systems engineers, and customers. The problems are noted in <xref target="Problems"></xref>.
      A canonical representation format to avoid problems is introduced in <xref target="Canonical"></xref>.
      </t>

        <section title="Requirements Language">
          <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
          document are to be interpreted as described in <xref
          target="RFC2119"></xref>.</t>
        </section>
    </section>

    <section title="Text Representation Flexibility of RFC 4291">
          <t>Examples of flexibility in Section 2.2 of <xref target="RFC4291"></xref> are described below.
          </t>
        <section title="Leading Zeros in a 16-Bit Field">
          <t><list style="empty">
          <t>'It is not necessary to write the leading zeros in an individual field.'</t>
          </list></t>
          <t>Conversely, it is also not necessary to omit leading zeros. This
means that it is possible to select from representations such as those in the following example.
The final 16-bit field is different, but all of these addresses represent the same
address.
          </t>
          <t><list style="empty">
          <t>2001:db8:aaaa:bbbb:cccc:dddd:eeee:0001</t>
          <t>2001:db8:aaaa:bbbb:cccc:dddd:eeee:001</t>
          <t>2001:db8:aaaa:bbbb:cccc:dddd:eeee:01</t>
          <t>2001:db8:aaaa:bbbb:cccc:dddd:eeee:1</t>
          </list></t>
        </section>

        <section title="Zero Compression">
          <t><list style="empty">
          <t>'A special syntax is available to compress the zeros. The use of "::" indicates one or more groups of 16 bits of zeros.'</t>
          </list></t>
          <t>It is possible to select whether or not to omit just one 16-bit 0 field.
          </t>
          <t><list style="empty">
          <t>2001:db8:aaaa:bbbb:cccc:dddd::1</t>
          <t>2001:db8:aaaa:bbbb:cccc:dddd:0:1</t>
          </list></t>
          <t>In cases where there is more than one field of only zeros, there is a
choice of how many fields can be shortened.  
          </t>
          <t><list style="empty">
          <t>2001:db8:0:0:0::1</t>
          <t>2001:db8:0:0::1</t>
          <t>2001:db8:0::1</t>
          <t>2001:db8::1</t>
          </list></t>
          <t>In addition, Section 2.2 of <xref target="RFC4291"></xref> notes,
          </t>
          <t><list style="empty">
          <t>'The "::" can only appear once in an address.'</t>
          </list></t>
          <t>This gives a choice on where in a single address to compress the zero.
          </t>
          <t><list style="empty">
          <t>2001:db8::aaaa:0:0:1</t>
          <t>2001:db8:0:0:aaaa::1</t>
          </list></t>
        </section>

        <section title="Uppercase or Lowercase">
          <t><xref target="RFC4291"></xref> does not mention any preference of uppercase or lowercase. 
          </t>
          <t><list style="empty">
          <t>2001:db8:aaaa:bbbb:cccc:dddd:eeee:aaaa</t>
          <t>2001:db8:aaaa:bbbb:cccc:dddd:eeee:AAAA</t>
          <t>2001:db8:aaaa:bbbb:cccc:dddd:eeee:AaAa</t>
          </list></t>
        </section>

    </section>

    <section anchor= "Problems" title="Problems Encountered with the Flexible Model">
        <section title="Searching">
            <section title="General Summary">
              <t>A search of an IPv6 address if conducted through a UNIX system
is usually case sensitive and extended options that allow for regular
expression use will come in handy. However, there are many applications in the
Internet today that do not provide this capability. When searching for an IPv6
address in such systems, the system engineer will have to try each and every
possibility to search for an address. This has critical impacts, especially when
trying to deploy IPv6 over an enterprise network. 
              </t>
            </section>
            <section title="Searching Spreadsheets and Text Files">
              <t>Spreadsheet applications and text editors on GUI systems
rarely have the ability to search for text using regular expression. Moreover,
there are many non-engineers (who are not aware of case sensitivity and regular
expression use) that use these applications to manage IP addresses. This has
worked quite well with IPv4 since text representation in IPv4 has very little
flexibility. There is no incentive to encourage these non-engineers  to change
their tool or learn regular expression when they decide to go dual-stack. If
the entry in the spreadsheet reads, 2001:db8::1:0:0:1, but the search was
conducted as 2001:db8:0:0:1::1, this will show a result of no match. One
example where this will cause a problem is, when the search is being conducted to
assign a new address from a pool, and a check is being done to see if it is
not in use. This may cause problems for the end-hosts or end-users. This type of
address management is very often seen in enterprise networks and ISPs. 
              </t>
            </section>
            <section title="Searching with Whois">
              <t>The "whois" utility is used by a wide range of people
today. When a record is set to a database, one will likely check the output to
see if the entry is correct. If an entity was recorded as 2001:db8::/48, but
the whois output showed 2001:0db8:0000::/48, most non-engineers would think
that their input was wrong and will likely retry several times or make a
frustrated call to the database hostmaster. If there was a need to register the
same prefix on different systems, and each system showed a different text
representation, this would confuse people even more. Although this document 
focuses on addresses rather than prefixes, it is worth mentioning the prefix 
problems because the problems encountered with addresses and prefixes are 
mostly equal.
              </t>
            </section>
            <section title="Searching for an Address in a Network Diagram">
              <t>Network diagrams and blueprints often show what IP addresses
are assigned to a system devices. In times of trouble shooting there may be a
need to search through a diagram to find the point of failure (for example, if
a traceroute stopped at 2001:db8::1, one would search the diagram for that
address). This is a technique quite often in use in enterprise networks and
managed services. Again, the different flavors of text representation will
result in a time-consuming search leading to longer mean times to restoration
(MTTR) in times of trouble. 
              </t>
            </section>
        </section>

        <section title="Parsing and Modifying">
            <section title="General Summary">
              <t>With all the possible methods of text representation, each
application must include a module, object, link, etc. to a function that will
parse IPv6 addresses in a manner such that no matter how it is represented, they
will mean the same address. Many system engineers who integrate complex
computer systems for corporate customers will have difficulties finding that
their favorite tool will not have this function, or will encounter difficulties
such as having to rewrite their macros or scripts for their customers. 
              </t>
            </section>
            <section title="Logging">
              <t>If an application were to output a log summary that
represented the address in full (such as
2001:0db8:0000:0000:1111:2222:3333:4444), the output would be highly unreadable
compared to the IPv4 output. The address would have to be parsed and reformed
to make it useful for human reading. Sometimes logging for critical systems is
done by mirroring the same traffic to two different systems. Care must be taken
so that no matter what the log output is, the logs should be parsed so they
are equivalent.
              </t>
            </section>
            <section title="Auditing: Case 1">
              <t>When a router or any other network appliance machine
configuration is audited, there are many methods to compare the configuration
information of a node. Sometimes auditing will be done by just comparing the
changes made each day. In this case, if configuration was done such that
2001:db8::1 was changed to 2001:0db8:0000:0000:0000:0000:0000:0001 just because
the new engineer on the block felt it was better, a simple diff will show that
a different address was configured. If this was done on a wide scale network,
people will be focusing on 'why the extra zeros were put in' instead of doing
any real auditing. Lots of tools are just plain diffs that do not take into
account address representation rules. 
              </t>
            </section>
            <section title="Auditing: Case 2">
              <t>Node configurations will be matched against an information system that manages IP addresses. If output notation is different, there will need to be a script that is implemented to cover for this. The result of an SNMP GET operation, converted to text and compared to a textual address written by a human is highly unlikely to match on the first try.
              </t>
            </section>
            <section anchor="Verify" title="Verification">
              <t>Some protocols require certain data fields to be verified. One example of this is X.509 certificates. If an IPv6 address field in a certificate was incorrectly verified by converting it to text and making a simple textual comparison to some other address, the certificate may be mistakenly shown as being invalid due to a difference in text representation methods.
              </t>
            </section>
            <section title="Unexpected Modifying">
              <t>Sometimes, a system will take an address and modify it as a convenience. For example, a system may take an input of 2001:0db8:0::1 and make the output 2001:db8::1. If the zeros were input for a reason, the outcome may be somewhat unexpected.
              </t>
            </section>
        </section>

        <section title="Operating">
            <section title="General Summary">
              <t>When an operator sets an IPv6 address of a system as 2001:db8:0:0:1:0:0:1, the system may take the address and show the configuration result as 2001:DB8::1:0:0:1. Someone familiar with IPv6 address representation will know that the right address is set, but not everyone may understand this.
              </t>
            </section>
            <section title="Customer Calls">
              <t>When a customer calls to inquire about a suspected outage,
IPv6 address representation should be handled with care. Not all customers 
are engineers, nor do they have a similar skill level in IPv6 technology.
The network operations
center will have to take extra steps to humanly parse the address to avoid
having to explain to the customers that 2001:db8:0:1::1 is the same as
2001:db8::1:0:0:0:1. This is one thing that will never happen in IPv4 because
IPv4 addresses cannot be abbreviated. 
              </t>
            </section>
            <section title="Abuse">
              <t>Network abuse reports generally include the abusing IP address. This 'reporting' could take any shape or form of the flexible model. A team that handles network abuse must be able to tell the difference between a 2001:db8::1:0:1 and 2001:db8:1::0:1. Mistakes in the placement of the "::" will result in a critical situation. A system that handles these incidents should be able to handle any type of input and parse it in a correct manner. Also, incidents are reported over the phone. It is unnecessary to report if the letter is uppercase or lowercase. However, when a letter is spelled uppercase, people tend to specify that it is uppercase, which is unnecessary information.
              </t>
            </section>
        </section>

        <section title="Other Minor Problems">
            <section title="Changing Platforms">
              <t>When an engineer decides to change the platform of a running service, the same code may not work as expected due to the difference in IPv6 address text representation. Usually, a change in a platform (e.g., Unix to Windows, Cisco to Juniper) will result in a major change of code anyway, but flexibility in address representation will increase the work load.
              </t>
            </section>
            <section title="Preference in Documentation">
              <t>A document that is edited by more than one author may become harder to read.
              </t>
            </section>
            <section title="Legibility">
              <t>Capital case D and 0 can be quite often misread. Capital B and 8 can also be misread.

              </t>
            </section>
        </section>
    </section>

    <section anchor="Canonical" title="A Recommendation for IPv6 Text Representation">

        <t>A recommendation for a canonical text representation format of IPv6
addresses is presented in this section. The recommendation in this document is
one that, complies fully with <xref target="RFC4291"></xref>, is implemented by
various operating systems, and is human friendly. The recommendation in this
section SHOULD be followed by systems when generating an address to be represented
as text, but all implementations MUST accept and be able to handle any
legitimate <xref target="RFC4291"></xref> format. It is advised that humans
also follow these recommendations when spelling an address.</t> 

        <section title="Handling Leading Zeros in a 16-Bit Field">
          <t>Leading zeros MUST be suppressed. For example, 2001:0db8::0001 is not acceptable and must be represented as 2001:db8::1. A single 16-bit 0000 field MUST be represented as 0.
          </t>
        </section>

        <section title="&quot;::&quot; Usage">
            <section title="Shorten as Much as Possible">
          <t>The use of the symbol "::" MUST be used to its maximum capability.
For example, 2001:db8:0:0:0:0:2:1 must be shortened to 2001:db8::2:1.
Likewise, 2001:db8::0:1 is not acceptable, because the symbol "::" could have been used to produce a shorter representation 2001:db8::1. 
</t>
            </section>

            <section title="Handling One 16-Bit 0 Field">
          <t>The symbol "::" MUST NOT be used to shorten just one 16-bit 0 field. For example, the representation 2001:db8:0:1:1:1:1:1 is correct, but 2001:db8::1:1:1:1:1 is not correct. </t>
            </section>

            <section title="Choice in Placement of &quot;::&quot;">
          <t>When there is an alternative choice in the placement of a "::",
the longest run of consecutive 16-bit 0 fields MUST be shortened (i.e., the
sequence with three consecutive zero fields is shortened in
2001:0:0:1:0:0:0:1). When the length of the consecutive 16-bit 0 fields are
equal (i.e., 2001:db8:0:0:1:0:0:1), the first sequence of zero bits MUST be
shortened. For example, 2001:db8::1:0:0:1 is correct representation. 
          </t>
            </section>

        </section>

        <section title="Lowercase">
          <t>The characters "a", "b", "c", "d", "e", and "f" in an IPv6 address MUST be represented in lowercase.
          </t>
        </section>

    </section>

    <section anchor="Special" title="Text Representation of Special Addresses">

          <t>Addresses such as IPv4-Mapped IPv6 addresses, ISATAP <xref
target="RFC5214"></xref>, and IPv4-translatable addresses <xref
target="ADDR-FORMAT"></xref> have IPv4 addresses embedded in
the low-order 32 bits of the address. These addresses have a special
representation that may mix hexadecimal and dot decimal notations. The decimal
notation may be used only for the last 32 bits of the address. For these
addresses, mixed notation is RECOMMENDED if the following condition is met: the
address can be distinguished as having IPv4 addresses embedded in the lower 32
bits solely from the address field through the use of a well-known prefix. Such
prefixes are defined in <xref target="RFC4291"></xref> and <xref
target="RFC2765"></xref> at the time of this writing.  If it is known by some
external method that a given prefix is used to embed IPv4, it MAY be
represented as mixed notation. Tools that provide options to specify prefixes
that are (or are not) to be represented as mixed notation may be useful. </t> 

          <t>There is a trade-off here where a recommendation to achieve an
exact match in a search (no dot decimals whatsoever) and a recommendation to
help the readability of an address (dot decimal whenever possible) does not
result in the same solution. The above recommendation is aimed at fixing the
representation as much as possible while leaving the opportunity for future
well-known prefixes to be represented in a human-friendly manner as tools
adjust to newly assigned prefixes.</t> 

          <t>The text representation method noted in Section 4 should be applied for the leading hexadecimal part (i.e., ::ffff:192.0.2.1 instead of 0:0:0:0:0:ffff:192.0.2.1).
         </t>

    </section>

        <section anchor="Ports" title="Notes on Combining IPv6 Addresses with Port Numbers">
          <t>There are many different ways to combine IPv6 addresses and port numbers that are represented in text. Examples are shown below. 
          </t>
         <t><list style="symbols">
          <t>[2001:db8::1]:80</t>
          <t>2001:db8::1:80</t>
          <t>2001:db8::1.80</t>
          <t>2001:db8::1 port 80</t>
          <t>2001:db8::1p80</t>
          <t>2001:db8::1#80</t>
         </list></t>
          <t>The situation is not much different in IPv4, but the most
ambiguous case with IPv6 is the second bullet. This is due to the "::"usage in
IPv6 addresses. This style is NOT RECOMMENDED because of its ambiguity. The []
style as expressed in <xref target="RFC3986"></xref> SHOULD be employed, and is
the default unless otherwise specified. Other styles are acceptable when there
is exactly one style for the given context and cross-platform portability does
not become an issue. For URIs containing IPv6 address literals, <xref
target="RFC3986"></xref> MUST be followed, as well as the rules defined in this
document. 
          </t>
    </section>

    <section title="Prefix Representation">
      <t>Problems with prefixes are the same as problems encountered with addresses. The text representation method of IPv6 prefixes should be no different
         from that of IPv6 addresses. </t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>This document notes some examples where IPv6 addresses are compared in text format. The example on <xref target="Verify"></xref> is one that may cause a security risk if used for access control. The common practice of comparing X.509 data is done in binary format.</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The authors would like to thank Jan Zorz, Randy Bush, Yuichi Minami,
and Toshimitsu Matsuura for their generous and helpful comments in kick
starting this document. We also would like to thank Brian Carpenter, Akira
Kato, Juergen Schoenwaelder, Antonio Querubin, Dave Thaler, Brian Haley, Suresh
Krishnan, Jerry Huang, Roman Donchenko, Heikki Vatiainen, Dan Wing, and Doug
Barton for their input. Also, a very special thanks to Ron Bonica, Fred Baker,
Brian Haberman, Robert Hinden, Jari Arkko, and Kurt Lindqvist for their support
in bringing this document to light in IETF working groups.</t> 
    </section>

    <!-- Possibly a 'Contributors' section ... -->

  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>

    <references title="Normative References">
      &RFC2119;
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4291.xml"?-->
      &RFC2765;
      &RFC3986;
      &RFC4291;

    </references>

    <references title="Informative References">
      &RFC4038;
      &RFC5214;

<!--  &I-D.ietf-behave-address-format; -->
   <reference anchor="ADDR-FORMAT">

     <front>
       <title>IPv6 Addressing of IPv4/IPv6 Translators</title>

       <author initials="C. B." surname="Bao" fullname="Congxiao Bao">
         <organization></organization>
       </author>

       <date month ="July" year="2010" />
     </front>
     <seriesInfo name="Work in" value="Progress" />
   </reference>

    </references>

    <section anchor="app-additional-1" title="For Developers">
      <t>We recommend that developers use display routines that conform to these rules. For example, the usage of getnameinfo() with flags argument NI_NUMERICHOST in FreeBSD 7.0 will give a conforming output, except for the special addresses notes in <xref target="Special"></xref>. The function inet_ntop() of FreeBSD7.0 is a good C code reference, but should not be called directly. See <xref target="RFC4038"></xref> for details.</t>
    </section>

  </back>
</rfc>




