<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc strict="no" ?>

<rfc number="8021"
     category="info" 
     submissionType="IETF"
     consensus="yes"
     ipr="trust200902">

  <front>
    <title abbrev="IPv6 Atomic Fragments Considered Harmful">Generation of IPv6 Atomic Fragments Considered Harmful</title>

    <author fullname="Fernando Gont" initials="F." surname="Gont">
      <organization abbrev="SI6 Networks / UTN-FRH">SI6 Networks / UTN-FRH</organization>
      <address>
        <postal>
          <street>Evaristo Carriego 2644</street>
          <code>1706</code>
          <city>Haedo</city>
          <region>Provincia de Buenos Aires</region>
          <country>Argentina</country>
        </postal>
        <phone>+54 11 4650 8472</phone>
        <email>fgont@si6networks.com</email>
        <uri>http://www.si6networks.com</uri>
      </address>
    </author>

<author fullname="Will (Shucheng) Liu" initials="W." surname="Liu">
      <organization>Huawei Technologies</organization>
      <address>
        <postal>
          <street>Bantian, Longgang District</street>
          <city>Shenzhen</city>
          <code>518129</code>
          <country>China</country>
        </postal>
        <email>liushucheng@huawei.com</email>
      </address>
</author>

    <author fullname="Tore Anderson" initials="T." surname="Anderson">
      <organization>Redpill Linpro</organization>
      <address>
        <postal>
          <street>Vitaminveien 1A</street>
          <code>0485</code>
          <city>Oslo</city>
          <country>Norway</country>
        </postal>
        <phone>+47 959 31 212</phone>
        <email>tore@redpill-linpro.com</email>
        <uri>http://www.redpill-linpro.com</uri>
      </address>
    </author>

    <date month="January" year="2017" />

<keyword>attack</keyword>
<keyword>DoS</keyword>
<keyword>Extension Headers</keyword>

    <abstract>
    <t>
   This document discusses the security implications of the generation
   of IPv6 atomic fragments and a number of interoperability issues
   associated with IPv6 atomic fragments.  It concludes that the
   aforementioned functionality is undesirable and thus documents the
   motivation for removing this functionality from an upcoming revision
   of the core IPv6 protocol specification (RFC 2460).
</t>
    </abstract>
  </front>

 <middle> 
<section title="Introduction" anchor="intro">
<t>
<xref target="RFC2460"/> specifies the IPv6 fragmentation mechanism, which allows IPv6 packets to be fragmented into smaller pieces such that they can fit in the Path MTU to the intended destination(s).</t>

<t>A legacy IPv4/IPv6 translator implementing the Stateless IP/ICMP Translation Algorithm <xref target="RFC6145"/> may legitimately generate ICMPv6 "Packet Too Big" (PTB) error messages <xref target="RFC4443"/> advertising an MTU smaller than 1280 (the minimum IPv6 MTU). Section 5 of <xref target="RFC2460"/> states that, upon receiving such an ICMPv6 error message, hosts are not required to reduce the assumed Path MTU but must simply include a Fragment Header in all subsequent packets sent to that destination. The resulting packets will thus *not* be actually fragmented into several pieces; rather, they will be "atomic" fragments <xref target="RFC6946"/> (i.e., they will just include a Fragment Header with both the "Fragment Offset" and the "M" flag set to 0). <xref target="RFC6946"/> requires that these atomic fragments be essentially processed by the destination host(s) as non-fragmented traffic (since there are not really any fragments to be reassembled). The goal of these atomic fragments is simply to convey an appropriate Identification value to be employed by IPv6/IPv4 translators for the resulting IPv4 fragments.</t>

<t>While atomic fragments might seem rather benign, there are scenarios in which the generation of IPv6 atomic fragments can be leveraged for performing a number of attacks against the corresponding IPv6 flows. Since there are concrete security implications arising from the generation of IPv6 atomic fragments and there is no real gain in generating IPv6 atomic fragments (as opposed to, for example, having IPv6/IPv4 translators generate an IPv4 Identification value themselves), we conclude that this functionality is undesirable.</t>

<t><xref target="attack-vector"/> briefly discusses the security implications of the generation of IPv6 atomic fragments and describes a specific Denial-of-Service (DoS) attack vector that leverages the widespread dropping of IPv6 fragments in the public Internet. <xref target="additional-considerations"/> provides additional considerations regarding the usefulness of generating IPv6 atomic fragments.</t>

</section>


<section title="Security Implications of the Generation of IPv6 Atomic Fragments" anchor="attack-vector">
<t>The security implications of IP fragmentation have been discussed at length in <xref target="RFC6274"/> and <xref target="RFC7739"/>. An attacker can leverage the generation of IPv6 atomic fragments to trigger the use of fragmentation in an arbitrary IPv6 flow (in scenarios in which actual fragmentation of packets is not needed) and can subsequently perform any type of fragmentation-based attack against legacy IPv6 nodes that do not implement <xref target="RFC6946"/>. That is, employing fragmentation where not actually needed allows for fragmentation-based attack vectors to be employed, unnecessarily.</t>

<t>We note that, unfortunately, even nodes that already implement <xref target="RFC6946"/> can be subject to DoS attacks as a result of the generation of IPv6 atomic fragments. Let us assume that Host A is communicating with Host B and that, as a result of the widespread dropping of IPv6 packets that contain extension headers (including fragmentation) <xref target="RFC7872"/>, some intermediate node filters fragments between Host B and Host A.  If an attacker sends a forged ICMPv6 PTB error message to Host B, reporting an MTU smaller than 1280, this will trigger the generation of IPv6 atomic fragments from that moment on (as required by <xref target="RFC2460"/>). When Host B starts sending IPv6 atomic fragments (in response to the received ICMPv6 PTB error message), these packets will be dropped, since we previously noted that IPv6 packets with extension headers were being dropped between Host B and Host A. Thus, this situation will result in a DoS scenario.
</t>

<t>Another possible scenario is that in which two BGP peers are employing IPv6 transport and they implement Access Control Lists (ACLs) to drop IPv6 fragments (to avoid control-plane attacks). If the aforementioned BGP peers drop IPv6 fragments but still honor received ICMPv6 PTB error messages, an attacker could easily attack the corresponding peering session by simply sending an ICMPv6 PTB message with a reported MTU smaller than 1280 bytes. Once the attack packet has been sent, the aforementioned routers will themselves be the ones dropping their own traffic.
</t>


<t>The aforementioned attack vector is exacerbated by the following factors:
<list style="symbols">
<t>The attacker does not need to forge the IPv6 Source Address of his attack
packets. Hence, deployment of simple filters as per BCP&nbsp;38
<xref target="BCP38"/> does not help as a countermeasure.</t>

<t>Only the IPv6 addresses of the IPv6 packet embedded in the ICMPv6 payload
need to be forged. While one could envision filtering devices enforcing
filters in the style of BCP&nbsp;38 on the ICMPv6 payload, the use of
extension headers (by the attacker) could make this difficult, if not
impossible.</t>

<t>Many implementations fail to perform validation checks on the received
ICMPv6 error messages as recommended in Section 5.2 of <xref
target="RFC4443"/> and documented in <xref target="RFC5927"/>. It should be
noted that in some cases, such as when an ICMPv6 error message has
(supposedly) been elicited by a connectionless transport protocol (or some
other connectionless protocol being encapsulated in IPv6), it may be virtually
impossible to perform validation checks on the received ICMPv6 error
message. And, because of IPv6 extension headers, the ICMPv6 payload might not
even contain any useful information on which to perform validation checks.</t>

<t>Upon receipt of one of the aforementioned ICMPv6 PTB error messages, the Destination Cache <xref target="RFC4861"/> is usually updated to reflect that any subsequent packets to such a destination should include a Fragment Header. This means that a single ICMPv6 PTB error message might affect multiple communication instances (e.g., TCP connections) with such a destination.
</t>

<t>As noted in <xref target="additional-considerations"/>, SIIT (the Stateless IP/ICMP Translation Algorithm) <xref
target="RFC6145"/>, including derivative protocols such as <xref target="RFC6146">Stateful NAT64 (Network Address and Protocol Translation from IPv6 Clients to IPv4 Servers)</xref>, was the only technology making use of atomic fragments. Unfortunately, an IPv6 node cannot easily
limit its exposure to the aforementioned attack vector by only generating IPv6 atomic fragments towards IPv4 destinations behind a stateless translator. This is due to the fact that Section 3.3 of <xref target="RFC6052"/> encourages operators to use a Network-Specific Prefix
(NSP) that maps the IPv4 address space into IPv6. When an NSP is being
used, IPv6 addresses representing IPv4 nodes (reached through a
stateless translator) are indistinguishable from native IPv6 addresses.
</t>
</list>
</t>
</section>

<section title="Additional Considerations" anchor="additional-considerations">
<t>Besides the security assessment provided in <xref target="attack-vector"/>, it is interesting to evaluate the pros and cons of having an IPv6-to-IPv4 translating router rely on the generation of IPv6 atomic fragments.
</t>

<t>Relying on the generation of IPv6 atomic fragments implies a reliance on:
<list style="numbers">
<t>ICMPv6 packets arriving from the translator to the destination IPv6 node</t>
<t>The ability of the nodes receiving ICMPv6 PTB messages reporting an MTU smaller than 1280 bytes to actually produce atomic fragments</t>
<t>Support for IPv6 fragmentation on the IPv6 side of the translator</t>
<t>The ability of the translator implementation to access the information conveyed by the Fragment Header</t>
<t>The value extracted from the low-order 16 bits of the
IPv6 fragment header Identification field resulting in an appropriate
IPv4 Identification value
</t>
</list>

Unfortunately,
<list style="numbers">
<t>There exists a fair share of evidence of ICMPv6 PTB error messages being dropped on the public Internet (for instance, that is one of the reasons for which Packetization Layer Path MTU Discovery (PLPMTUD) <xref target="RFC4821"/> was produced). Therefore, relying on such messages being successfully delivered will affect the robustness of the protocol that relies on them.</t>
<t>A number of IPv6 implementations have been known to fail to generate IPv6 atomic fragments in response to ICMPv6 PTB messages reporting an MTU smaller than 1280 bytes. Additionally, the results included in Section 6 of <xref target="RFC6145"/> note that 57% of the tested web servers failed to produce IPv6 atomic fragments in response to ICMPv6 PTB messages reporting an MTU smaller than 1280 bytes. Thus, any protocol relying on IPv6 atomic fragment generation for proper functioning will have interoperability problems with the aforementioned IPv6 stacks.
</t>
<t>IPv6 atomic fragment generation represents a case in which fragmented traffic is produced where otherwise it would not be needed. Since there is widespread dropping of IPv6 fragments in the public Internet <xref target="RFC7872"/>, this would mean that the (unnecessary) use of IPv6 fragmentation might result, unnecessarily, in a DoS situation even in legitimate cases.
</t>
<t>The packet-handling API at the node where the translator is running may obscure fragmentation-related information. In such scenarios, the information conveyed by the Fragment Header may be unavailable to the translator. <xref target="JOOL"/> discusses a sample framework (Linux Netfilter) that hinders access to the information conveyed in IPv6 fragments.
</t>
<t>While <xref target="RFC2460"/> requires that the
IPv6 fragment header Identification field of a fragmented packet be
different than that of any other
fragmented packet sent recently with the same Source Address and Destination
Address, there is no requirement on the low-order 16 bits of such a
value. Thus, there is no guarantee that IPv4 fragment Identification
collisions will be avoided or reduced by employing the low-order 16 bits of
the
IPv6 fragment header Identification field of a packet sent by a source host.
Besides, collisions might occur where two distinct IPv6 Destination Addresses are translated into the same IPv4 address, such that Identification values that might have been generated to be unique in the context of IPv6 end up colliding when used in the context of translated IPv4.</t>
</list>
</t>

<t>We note that SIIT essentially employs the Fragment Header of IPv6 atomic
fragments to signal the translator how to set the Don't Fragment (DF) bit of
IPv4 datagrams (the DF bit is cleared when the IPv6 packet contains a Fragment
Header and is otherwise set to 1 when the IPv6 packet does not contain a Fragment Header). Additionally, the translator will employ the low-order
16 bits of the IPv6 fragment header Identification field for setting
the IPv4 Identification. At least in theory, this is expected to reduce the IPv4 Identification collision rate in the following specific scenario:

<list style="numbers">
<t>An IPv6 node communicates with an IPv4 node (through SIIT).</t>
<t>The IPv4 node is located behind an IPv4 link with an MTU smaller than 1260 bytes. An IPv4 Path MTU of 1260 corresponds to an IPv6 Path MTU of 1280, due to an optionless IPv4 header being 20 bytes shorter than the IPv6 header.</t>
<t>ECMP routing <xref target="RFC2992"/> with more than one translator is employed, for example, for redundancy purposes.</t>
</list>
</t>

<t>
In such a scenario, if each translator were to select the IPv4 Identification
on its own (rather than selecting the IPv4 Identification from the low-order
16 bits of the fragment Identification of IPv6 atomic fragments), this could
possibly lead to IPv4 Identification collisions. However, as noted above, the
value extracted from the low-order 16 bits of the
IPv6 fragment header Identification field might not result in an appropriate
IPv4 Identification: for example, a number of implementations set the
IPv6 fragment header Identification field according to the output of a Pseudorandom Number Generator (PRNG) (see Appendix B of <xref target="RFC7739"/>); hence, if the translator only employs the low-order 16 bits of such a value, it is very unlikely that relying on the fragment Identification of the IPv6 atomic fragment will result in a reduced IPv4 Identification collision rate (when compared to the case where the translator selects each IPv4 Identification on its own). Besides, because of the limited size of the IPv4 Identification field, it is nevertheless virtually impossible to guarantee uniqueness of the IPv4 Identification values without artificially limiting the data rate of fragmented traffic <xref target="RFC6864"/> <xref target="RFC4963"/>. 
</t>



<t><xref target="RFC6145"/> was the only "consumer" of IPv6 atomic fragments, and it correctly and diligently noted (in its Section 6) the possible  interoperability problems of relying on IPv6 atomic fragments, proposing a workaround that led to more robust behavior and simplified code. <xref target="RFC6145"/> has been obsoleted by <xref target="RFC7915"/>, such that SIIT does not rely on IPv6 atomic fragments.</t>


</section>


<section title="Conclusions" anchor="conclusions">
<t>Taking all of the above considerations into account, we recommend
  that IPv6 atomic fragments be deprecated.</t>

<t>
  In particular:
<list style="symbols">
<t>IPv4/IPv6 translators should be updated to not generate ICMPv6 PTB error messages containing an MTU value smaller than the minimum IPv6 MTU of 1280 bytes. This will ensure that current IPv6 nodes will never have a legitimate need to start generating IPv6 atomic fragments.
</t>

<t>The recommendation in the previous bullet ensures that there are no longer any valid reasons for ICMPv6 PTB error messages reporting an MTU value smaller than the minimum IPv6 MTU (1280 bytes). IPv6 nodes should therefore be updated to ignore ICMPv6 PTB error messages reporting an MTU smaller than 1280 bytes as invalid.</t>
</list>

We note that these recommendations have been incorporated in <xref target="IPv6-PMTUD"/>, <xref target="IPv6-Spec"/>, and <xref target="RFC7915"/>.
</t>
</section>
	

    <section title="Security Considerations">

	<t>This document briefly discusses the security implications of the generation of IPv6 atomic fragments and describes one specific DoS attack vector that leverages the widespread dropping of IPv6 fragments in the public Internet. It concludes that the generation of IPv6 atomic fragments is an undesirable feature and documents the motivation for removing this functionality from <xref target="IPv6-Spec"/>.</t>

    </section>

  </middle>

  <back>
  <references title='Normative References'>
	<?rfc include="reference.RFC.2460" ?>

<!-- BCP 38 (per author/AUTH48; OKed by AD) -->
<reference  anchor='BCP38' target='http://www.rfc-editor.org/info/rfc2827'>
<front>
<title>Network Ingress Filtering: Defeating Denial of Service Attacks which employ IP Source Address Spoofing</title>
<author initials='P.' surname='Ferguson' fullname='P. Ferguson'><organization /></author>
<author initials='D.' surname='Senie' fullname='D. Senie'><organization /></author>
<date year='2000' month='May' />
</front>
<seriesInfo name='BCP' value='38'/>
<seriesInfo name='RFC' value='2827'/>
</reference>

	<?rfc include="reference.RFC.4443" ?>
	<?rfc include="reference.RFC.4821" ?>
	<?rfc include="reference.RFC.4861" ?>
	<?rfc include="reference.RFC.6145" ?>
	<?rfc include="reference.RFC.7915" ?>
	<?rfc include="reference.RFC.6864" ?>
  </references>

  <references title='Informative References'>
	<?rfc include="reference.RFC.2992" ?>
	<?rfc include="reference.RFC.5927" ?>
	<?rfc include="reference.RFC.4963" ?>
	<?rfc include="reference.RFC.6052" ?>
	<?rfc include="reference.RFC.6146" ?>
	<?rfc include="reference.RFC.6274" ?>
	<?rfc include="reference.RFC.6946" ?>
	<?rfc include="reference.RFC.7739" ?>
	<?rfc include="reference.RFC.7872" ?>

<!-- draft-ietf-6man-rfc2460bis (AD Eval.) -->
<reference anchor='IPv6-Spec'>
<front>
<title>Internet Protocol, Version 6 (IPv6) Specification</title>
<author initials='S' surname='Deering' fullname='Stephen Deering'>
    <organization />
</author>
<author initials='R' surname='Hinden' fullname='Robert Hinden'>
    <organization />
</author>
<date month='November' year='2016' />
</front>
<seriesInfo name='Work in Progress,' value='draft-ietf-6man-rfc2460bis-08' />
</reference>

<!-- draft-ietf-6man-rfc1981bis (AD Eval.) -->
<reference anchor='IPv6-PMTUD'>
<front>
<title>Path MTU Discovery for IP version 6</title>
<author initials='J' surname='McCann' fullname='Jack McCann'>
    <organization />
</author>
<author initials='S' surname='Deering' fullname='Stephen Deering'>
    <organization />
</author>
<author initials='J' surname='Mogul' fullname='Jeffrey Mogul'>
    <organization />
</author>
<author initials='R' surname='Hinden' fullname='Robert Hinden' role="editor">
    <organization />
</author>
<date month='October' year='2016' />
</front>
<seriesInfo name='Work in Progress,' value='draft-ietf-6man-rfc1981bis-03' />
</reference>

      <reference anchor="JOOL" target="https://github.com/NICMx/Jool/wiki/nf_defrag_ipv4-and-nf_defrag_ipv6#implementation-gotchas">
        <front>
          <title>nf_defrag_ipv4 and nf_defrag_ipv6</title>

          <author fullname="Alberto Leiva Popper" initials="A." surname="Leiva Popper">
          </author>

          <date month="April" year="2015"/>
        </front>
      </reference>

</references>


    <section title="Acknowledgements" numbered="no">
<t>The authors would like to thank (in alphabetical order) Congxiao Bao,
Bob Briscoe, Carlos Jesus Bernardos Cano, Brian Carpenter, Bob Hinden,
Tatuya Jinmei, Alberto Leiva Popper, Ted Lemon, Xing Li, Jeroen Massar,
Erik Nordmark, Qiong Sun, Joe Touch, Ole Troan, Tina Tsou, and
Bernie Volz for providing valuable comments on earlier versions of this
document.</t>

<t>Fernando Gont would like to thank Jan Zorz / Go6 Lab
&lt;http://go6lab.si/&gt;, and Jared Mauch / NTT America, for providing access
to systems and networks that were employed to produce some of the tests that
resulted in the publication of this document. Additionally, he would like to
thank Ivan Arce, Guillermo Gont, and Diego Armando Maradona for
their inspiration.
</t>

    </section>

  </back>

</rfc>
