<?xml version='1.0' encoding='US-ASCII'?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>


<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc number="8259" 
     category="std" 
     submissionType="IETF" 
     consensus="yes" 
     obsoletes="7159" 
     ipr="pre5378Trust200902">

  <front>
    <title abbrev="JSON">The JavaScript Object Notation (JSON) Data Interchange Format</title>
    <author fullname="Tim Bray" initials="T." surname="Bray" role="editor">
      <organization>Textuality</organization>
      <address>
        <email>tbray@textuality.com</email>
      </address>
    </author>
    <date month="December" year="2017"/>
    <area>Applications and Real-Time</area>
    <workgroup>JSONbis</workgroup>

    <abstract>
      <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
      <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction" >

      <t>JavaScript Object Notation (JSON) is a text format for the
      serialization of structured data.  It is derived from the object
      literals of JavaScript, as defined in the ECMAScript Programming
      Language Standard, Third Edition <xref target="ECMA-262" />.</t>
      <t>JSON can represent four primitive types (strings, numbers, booleans, and null) and two structured types (objects and arrays).</t>
      <t>A string is a sequence of zero or more Unicode characters <xref target="UNICODE"/>.  Note that this citation references the latest version of Unicode rather than a specific release. It is not expected that future changes in the Unicode specification will impact the syntax of JSON.</t>
      <t>An object is an unordered collection of zero or more name/value pairs, where a name is a string and a value is a string, number, boolean, null, object, or array.</t>
      <t>An array is an ordered sequence of zero or more values.</t>
      <t>The terms "object" and "array" come from the conventions of JavaScript.</t>
      <t>JSON's design goals were for it to be minimal, portable, textual, and a subset of JavaScript.</t>
      <section title="Conventions Used in This Document">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in BCP 14 <xref
target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear
in all capitals, as shown here.</t>

        <t>The grammatical rules in this document are to be interpreted as described in <xref target="RFC5234"/>.</t>
      </section>
      <section title="Specifications of JSON" anchor="specifications.of.json">

<t>This document replaces <xref target="RFC7159"/>.  <xref target="RFC7159"/>
obsoleted <xref target="RFC4627"/>, which originally described JSON and registered the media type "application/json".</t>

        <t>JSON is also described in <xref target="ECMA-404"/>.</t>
        <t>The reference to ECMA-404 in the previous sentence is normative, not with the usual meaning that implementors need to consult it in order to understand this document, but to emphasize that there are no inconsistencies in the definition of the term "JSON text" in any of its specifications. Note, however, that ECMA-404 allows several practices that this specification recommends avoiding in the interests of maximal interoperability.</t>
        <t>The intent is that the grammar is the same between the two
	documents, although different descriptions are used.  If there is a difference found between them, ECMA and the IETF will work together to update both documents.</t>
        <t>If an error is found with either document, the other should be
	examined to see if it has a similar error; if it does, it should be fixed, if possible. </t>
        <t>If either document is changed in the future, ECMA and the IETF will work together to ensure that the two documents stay aligned through the change.</t>
      </section>
      <section title="Introduction to This Revision" anchor="introduction.to.this.revision">
        <t>In the years since the publication of RFC 4627, JSON has found very
	wide use. This experience has revealed certain patterns that, while
	allowed by its specifications, have caused interoperability
	problems.</t>

        <t>Also, a small number of errata have been reported regarding RFC 4627 (see
	RFC Errata IDs 607 <xref target="Err607"/> and 
	3607 <xref target="Err3607"/>) and regarding RFC 7159 (see
	RFC Errata IDs 3915 <xref target="Err3915"/>, 4264 <xref target="Err4264"/>,
	4336 <xref target="Err4336"/>, and 4388 <xref target="Err4388"/>).</t>
        <t>This document's goal is to apply the errata, remove inconsistencies
	with other specifications of JSON, and highlight practices that can
	lead to interoperability problems.</t> 
      </section>
    </section>
    <section title="JSON Grammar">
      <t>A JSON text is a sequence of tokens.  The set of tokens includes six structural characters, strings, numbers, and three literal names.</t>
      <t>A JSON text is a serialized value.  Note that certain previous specifications of JSON constrained a JSON text to be an object or an array.  Implementations that generate only objects or arrays where a JSON text is called for will be interoperable in the sense that all implementations will accept these as conforming JSON texts.</t>
      <figure title="" suppress-title="false" align="left" alt="" width="" height="">
        <artwork type="abnf" xml:space="preserve" name="" align="left" alt="" width="" height="">
   JSON-text = ws value ws
</artwork>
      </figure>
      <t>These are the six structural characters:</t>
      <figure title="" suppress-title="false" align="left" alt="" width="" height="">
        <artwork type="abnf" xml:space="preserve" name="" align="left" alt="" width="" height="">
   begin-array     = ws %x5B ws  ; [ left square bracket

   begin-object    = ws %x7B ws  ; { left curly bracket

   end-array       = ws %x5D ws  ; ] right square bracket

   end-object      = ws %x7D ws  ; } right curly bracket

   name-separator  = ws %x3A ws  ; : colon

   value-separator = ws %x2C ws  ; , comma
</artwork>
      </figure>
      <t>Insignificant whitespace is allowed before or after any of the six structural characters.</t>
      <figure title="" suppress-title="false" align="left" alt="" width="" height="">
        <artwork type="abnf" xml:space="preserve" name="" align="left" alt="" width="" height="">
   ws = *(
           %x20 /              ; Space
           %x09 /              ; Horizontal tab
           %x0A /              ; Line feed or New line
           %x0D )              ; Carriage return
</artwork>
      </figure>
    </section>
    <section title="Values">

      <t>A JSON value MUST be an object, array, number, or string, or one of
      the following three literal names:
<?rfc subcompact="yes" ?>
<list>
   <t>false</t>
   <t>null</t>
   <t>true</t>
</list>
<?rfc subcompact="no" ?>
      </t>

      <t>The literal names MUST be lowercase.  No other literal names are allowed.</t>
      <figure title="" suppress-title="false" align="left" alt="" width="" height="">
        <artwork type="abnf" xml:space="preserve" name="" align="left" alt="" width="" height="">
   value = false / null / true / object / array / number / string

   false = %x66.61.6c.73.65   ; false

   null  = %x6e.75.6c.6c      ; null

   true  = %x74.72.75.65      ; true
</artwork>
      </figure>
    </section>
    <section title="Objects">
      <t>An object structure is represented as a pair of curly brackets surrounding zero or more name/value pairs (or members).  A name is a string.  A single colon comes after each name, separating the name from the value.  A single comma separates a value from a following name.  The names within an object SHOULD be unique.</t>
      <figure title="" suppress-title="false" align="left" alt="" width="" height="">
        <artwork type="abnf" xml:space="preserve" name="" align="left" alt="" width="" height="">
   object = begin-object [ member *( value-separator member ) ]
            end-object

   member = string name-separator value
</artwork>
      </figure>
      <t>An object whose names are all unique is interoperable in the sense that all software implementations receiving that object will agree on the name-value mappings.  When the names within an object are not unique, the behavior of software that receives such an object is unpredictable. Many implementations report the last name/value pair only.  Other implementations report an error or fail to parse the object, and some implementations report all of the name/value pairs, including duplicates.</t>
      <t>JSON parsing libraries have been observed to differ as to whether or not they make the ordering of object members visible to calling software. Implementations whose behavior does not depend on member ordering will be interoperable in the sense that they will not be affected by these differences.</t>
    </section>
    <section title="Arrays">
      <t>An array structure is represented as square brackets surrounding zero or more values (or elements).  Elements are separated by commas.</t>
      <figure title="" suppress-title="false" align="left" alt="" width="" height="">
        <artwork type="abnf" xml:space="preserve" name="" align="left" alt="" width="" height="">
array = begin-array [ value *( value-separator value ) ] end-array
</artwork>
      </figure>
      <t>There is no requirement that the values in an array be of the same type.</t>
    </section>
    <section title="Numbers">
      <t>The representation of numbers is similar to that used in most programming languages.  A number is represented in base 10 using decimal digits. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part. Leading zeros are not allowed.</t>
      <t>A fraction part is a decimal point followed by one or more digits.</t>
      <t>An exponent part begins with the letter E in uppercase or lowercase, which may be followed by a plus or minus sign.  The E and optional sign are followed by one or more digits.</t>
      <t>Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted.</t>
      <figure title="" suppress-title="false" align="left" alt="" width="" height="">
        <artwork type="abnf" xml:space="preserve" name="" align="left" alt="" width="" height="">
   number = [ minus ] int [ frac ] [ exp ]

   decimal-point = %x2E       ; .

   digit1-9 = %x31-39         ; 1-9

   e = %x65 / %x45            ; e E

   exp = e [ minus / plus ] 1*DIGIT

   frac = decimal-point 1*DIGIT

   int = zero / ( digit1-9 *DIGIT )

   minus = %x2D               ; -

   plus = %x2B                ; +

   zero = %x30                ; 0
</artwork>
      </figure>
      <t>This specification allows implementations to set limits on the range
      and precision of numbers accepted. 

Since software that implements
IEEE 754 binary64 (double precision) numbers <xref target="IEEE754"/> is
generally available and widely used, good interoperability can be achieved by
implementations that expect no more precision or range than these provide, in
the sense that implementations will approximate JSON numbers within the
expected precision.

A JSON number such as 1E400 or 3.141592653589793238462643383279 may indicate potential interoperability problems, since it suggests that the software that created it expects receiving software to have greater capabilities for numeric magnitude and precision than is widely available.</t>
      <t>Note that when such software is used, numbers that are integers and are in the range [-(2**53)+1, (2**53)-1] are interoperable in the sense that implementations will agree exactly on their numeric values.</t>
    </section>
    <section title="Strings">
      <t>The representation of strings is similar to conventions used in the C family of programming languages.  A string begins and ends with quotation marks.  All Unicode characters may be placed within the quotation marks, except for the characters that MUST be escaped: quotation mark, reverse solidus, and the control characters (U+0000 through U+001F).</t>
      <t>Any character may be escaped.  If the character is in the Basic Multilingual Plane (U+0000 through U+FFFF), then it may be represented as a six-character sequence: a reverse solidus, followed by the lowercase letter u, followed by four hexadecimal digits that encode the character's code point.  The hexadecimal letters A through F can be uppercase or lowercase.  So, for example, a string containing only a single reverse solidus character may be represented as "\u005C".</t>
      <t>Alternatively, there are two-character sequence escape representations of some popular characters.  So, for example, a string containing only a single reverse solidus character may be represented more compactly as "\\".</t>
      <t>To escape an extended character that is not in the Basic Multilingual Plane, the character is represented as a 12-character sequence, encoding the UTF-16 surrogate pair.  So, for example, a string containing only the G clef character (U+1D11E) may be represented as "\uD834\uDD1E".</t>
      <figure title="" suppress-title="false" align="left" alt="" width="" height="">
        <artwork type="abnf" xml:space="preserve" name="" align="left" alt="" width="" height="">
   string = quotation-mark *char quotation-mark

   char = unescaped /
       escape (
           %x22 /          ; "    quotation mark  U+0022
           %x5C /          ; \    reverse solidus U+005C
           %x2F /          ; /    solidus         U+002F
           %x62 /          ; b    backspace       U+0008
           %x66 /          ; f    form feed       U+000C
           %x6E /          ; n    line feed       U+000A
           %x72 /          ; r    carriage return U+000D
           %x74 /          ; t    tab             U+0009
           %x75 4HEXDIG )  ; uXXXX                U+XXXX

   escape = %x5C              ; \

   quotation-mark = %x22      ; "

   unescaped = %x20-21 / %x23-5B / %x5D-10FFFF
</artwork>
      </figure>
    </section>
    <section title="String and Character Issues" numbered="true" toc="default">
      <section title="Character Encoding" anchor="character.encoding" numbered="true" toc="default">

        <t>
JSON text exchanged between systems that are not part of a closed
ecosystem MUST be encoded using UTF-8 <xref target="RFC3629"/>.
</t>

	<t>
Previous specifications of JSON have not required the use of UTF-8
when transmitting JSON text.  However, the vast majority of JSON-based
software implementations have chosen to use the UTF-8 encoding, to the extent
that it is the only encoding that achieves interoperability.
</t>

        <t>
Implementations MUST NOT add a byte order mark (U+FEFF) to the
beginning of a networked-transmitted JSON text.  In the interests of
interoperability, implementations that parse JSON texts MAY ignore
the presence of a byte order mark rather than treating it as an
error.
</t>

      </section>
      <section anchor="unichars" title="Unicode Characters" >
        <t>When all the strings represented in a JSON text are composed entirely of Unicode characters <xref target="UNICODE"/> (however escaped), then that JSON text is interoperable in the sense that all software implementations that parse it will agree on the contents of names and of string values in objects and arrays.</t>
        <t>However, the ABNF in this specification allows member names and string values to contain bit sequences that cannot encode Unicode characters; for example, "\uDEAD" (a single unpaired UTF-16 surrogate).  Instances of this have been observed, for example, when a library truncates a UTF-16 string without checking whether the truncation split a surrogate pair.  The behavior of software that receives JSON texts containing such values is unpredictable; for example, implementations might return different values for the length of a string value or even suffer fatal runtime exceptions.</t>
      </section>
      <section title="String Comparison">
        <t>Software implementations are typically required to test names of
	object members for equality.  Implementations that transform the
	textual representation into sequences of Unicode code units and then
	perform the comparison numerically, code unit by code unit, are
	interoperable in the sense that implementations will agree in all
	cases on equality or inequality of two strings.  For example,
	implementations that compare strings with escaped characters
	unconverted may incorrectly find that "a\\b" and "a\u005Cb" are not
	equal.</t> 
      </section>
    </section>
    <section anchor="parsers" title="Parsers">
      <t>A JSON parser transforms a JSON text into another representation.  A JSON parser MUST accept all texts that conform to the JSON grammar.  A JSON parser MAY accept non-JSON forms or extensions.</t>
      <t>An implementation may set limits on the size of texts that it accepts.  An implementation may set limits on the maximum depth of nesting.  An implementation may set limits on the range and precision of numbers.  An implementation may set limits on the length and character contents of strings. </t>
    </section>
    <section title="Generators">
      <t>A JSON generator produces JSON text.  The resulting text MUST strictly conform to the JSON grammar.</t>
    </section>
    <section title="IANA Considerations" anchor="ianacons" numbered="true"
	     toc="default"> 
      <t>The media type for JSON text is application/json.  <list
      style="hanging" hangIndent="3">
<t hangText="Type name:">application</t>
<t hangText="Subtype name:">json</t>
<t hangText="Required parameters:">n/a</t>
<t hangText="Optional parameters:">n/a</t>
<t hangText="Encoding considerations:">binary</t>
<t hangText="Security considerations:">See RFC 8259, Section 12</t>
<t hangText="Interoperability considerations:">Described in RFC 8259</t>
<t hangText="Published specification:">RFC 8259</t>
<t hangText="Applications that use this media type:">
<vspace blankLines="0"/> JSON has been used to exchange data between
      applications written in all of these programming languages:
      ActionScript, C, C#, Clojure, ColdFusion, Common Lisp, E, Erlang, Go,
      Java, JavaScript, Lua, Objective CAML, Perl, PHP, Python, Rebol, Ruby,
      Scala, and Scheme.</t><t hangText="Additional information:">
<vspace blankLines="0"/> Magic number(s): n/a<vspace blankLines="0"/> File
      extension(s): .json
<vspace blankLines="0"/> Macintosh file type code(s): TEXT</t>
<t hangText="Person &amp; email address to contact for further information:">
<vspace blankLines="0"/> IESG<vspace blankLines="0"/>
      &lt;iesg@ietf.org&gt;</t><t hangText="Intended usage:">COMMON</t>
<t hangText="Restrictions on usage:">none</t>
<t hangText="Author:"><vspace blankLines="0"/> Douglas Crockford<vspace blankLines="0"/>
      &lt;douglas@crockford.com&gt;</t><t hangText="Change
      controller:"><vspace blankLines="0"/> IESG
<vspace blankLines="0"/>
      &lt;iesg@ietf.org&gt;</t>
<t hangText="Note:">No "charset" parameter is
      defined for this registration.  Adding one really has no effect on
      compliant recipients.  </t></list> </t> 
    </section>
    <section title="Security Considerations" anchor="security.considerations" numbered="true" toc="default">
      <t>Generally, there are security issues with scripting languages.  JSON is a subset of JavaScript but excludes assignment and invocation.</t>
      <t>Since JSON's syntax is borrowed from JavaScript, it is possible to use that language's "eval()" function to parse most JSON texts (but not all; certain characters such as U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR are legal in JSON but not JavaScript).  This generally constitutes an unacceptable security risk, since the text could contain executable code along with data declarations.  The same consideration applies to the use of eval()-like functions in any other programming language in which JSON texts conform to that language's syntax.</t>
    </section>
    <section anchor="examples" title="Examples" numbered="true" toc="default">
      <t>This is a JSON object:</t>
      <figure title="" suppress-title="false" align="left" alt="" width="" height="">
        <artwork type="example" xml:space="preserve" name="" align="left" alt="" width="" height="">
   {
     "Image": {
         "Width":  800,
         "Height": 600,
         "Title":  "View from 15th Floor",
         "Thumbnail": {
             "Url":    "http://www.example.com/image/481989943",
             "Height": 125,
             "Width":  100
         },
         "Animated" : false,
         "IDs": [116, 943, 234, 38793]
       }
   }
</artwork>
      </figure>
      <t>Its Image member is an object whose Thumbnail member is an object and whose IDs member is an array of numbers.</t>
      <t>This is a JSON array containing two objects:</t>
      <figure title="" suppress-title="false" align="left" alt="" width="" height="">
        <artwork type="example" xml:space="preserve" name="" align="left" alt="" width="" height="">
   [
     {
        "precision": "zip",
        "Latitude":  37.7668,
        "Longitude": -122.3959,
        "Address":   "",
        "City":      "SAN FRANCISCO",
        "State":     "CA",
        "Zip":       "94107",
        "Country":   "US"
     },
     {
        "precision": "zip",
        "Latitude":  37.371991,
        "Longitude": -122.026020,
        "Address":   "",
        "City":      "SUNNYVALE",
        "State":     "CA",
        "Zip":       "94085",
        "Country":   "US"
     }
   ]
</artwork>
      </figure>
      <t>Here are three small JSON texts containing only values:</t>
      <figure title="" suppress-title="false" align="left" alt="" width="" height="">
        <artwork type="example" xml:space="preserve" name="" align="left" alt="" width="" height="">

"Hello world!"

42

true
</artwork>
      </figure>
    </section>
  </middle>
  <back>
    <references title="Normative References">


<reference anchor="IEEE754">
<front>
<title>IEEE Standard for Floating-Point Arithmetic</title>
<author><organization>IEEE</organization><address/></author>
<date />
</front>
<seriesInfo name="IEEE" value="754"/>
</reference>

<?rfc include="reference.RFC.2119"?>

<?rfc include="reference.RFC.8174"?>

<?rfc include="reference.RFC.5234"?>

<?rfc include="reference.RFC.3629"?>

<reference anchor="UNICODE" target="http://www.unicode.org/versions/latest/">
<front>
<title>The Unicode Standard</title>
<author><organization>The Unicode Consortium</organization></author>
<date/>
</front>
</reference>

<reference anchor="ECMA-404" target="http://www.ecma-international.org/publications/standards/Ecma-404.htm">
<front> <title>The JSON Data Interchange Format</title><author>
<organization>Ecma International</organization><address/></author>
<date /></front>
<seriesInfo name="Standard" value="ECMA-404"/></reference></references>

    <references title="Informative References">

<?rfc include="reference.RFC.4627"?>

<?rfc include="reference.RFC.7159"?> 

<reference anchor="ECMA-262"
	   target="http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf">
<front><title>ECMAScript Language Specification</title>
<author><organization>Ecma International</organization><address/></author>
<date month="December" year="1999"/>
</front>
<seriesInfo name="Standard ECMA-262," value="Third Edition"/></reference>

<reference anchor="Err607" target="https://www.rfc-editor.org/errata/eid607"
	   quote-title="false"><front><title>Erratum ID
607</title><author><organization>RFC
Errata</organization></author><date/></front><seriesInfo name="RFC"
value="4627"/></reference>

<reference anchor="Err3607" target="https://www.rfc-editor.org/errata/eid3607"
	   quote-title="false"><front><title>Erratum ID
3607</title><author><organization>RFC
Errata</organization></author><date/></front><seriesInfo name="RFC"
value="4627"/></reference>

<reference anchor="Err3915"
	   target="https://www.rfc-editor.org/errata/eid3915" quote-title="false">
<front>
<title>Erratum ID 3915</title><author><organization>RFC
Errata</organization></author><date/></front><seriesInfo name="RFC"
value="7159"/></reference>

<reference anchor="Err4264"
	   target="https://www.rfc-editor.org/errata/eid4264" quote-title="false">
<front>
<title>Erratum ID 4264</title><author><organization>RFC
Errata</organization></author><date/></front>
<seriesInfo name="RFC" value="7159"/>
</reference>

<reference anchor="Err4336" target="https://www.rfc-editor.org/errata/eid4336"
	   quote-title="false">
<front>
<title>Erratum ID 4336</title>
<author><organization>RFC Errata</organization></author>
<date/></front>
<seriesInfo name="RFC" value="7159"/></reference>

<reference anchor="Err4388" target="https://www.rfc-editor.org/errata/eid4388"
	   quote-title="false">
<front>
<title>Erratum ID 4388</title>
<author><organization>RFC Errata</organization></author>
<date/></front>
<seriesInfo name="RFC" value="7159"/></reference>

</references>
    <section title="Changes from RFC 7159" numbered="true" toc="default">
      <t>This section lists changes between this document and the text in RFC 7159.</t>
      <t>
        <list style="symbols">
          <t><xref target="specifications.of.json"/> has been updated to
	  reflect the removal of a JSON specification from ECMA-262, to make
	  ECMA-404 a normative reference, and to explain the particular meaning of "normative".  </t>
          <t><xref target="introduction.to.this.revision" /> has been updated to reflect errata filed against
	  RFC 7159, not RFC 4627.</t>
          <t><xref target="character.encoding" /> was changed to require the use of UTF-8 when transmitted over a network.  </t>
          <t><xref target="security.considerations" /> has been updated to increase the precision of the description of the security risk that follows from using the ECMAScript "eval()" function.</t>
          <t>Section 14.1 has been updated to include ECMA-404 as a normative reference.</t>
          <t>Section 14.2 has been updated to remove ECMA-404, update the
	  version of ECMA-262, and refresh the errata list.</t>
        </list>
      </t>
    </section>
    <section title="Contributors" numbered="no">
      <t>RFC 4627 was written by Douglas Crockford. This document was
      constructed by making a relatively small number of changes to that
      document; thus, the vast majority of the text here is his.</t>
    </section> 

 </back>
</rfc>
