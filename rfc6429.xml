<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>

<rfc category="info" number="6429" ipr="trust200902" submissionType="IETF"
consensus="yes">

  <front>
    <title abbrev="TCP Persist Condition">TCP Sender Clarification for Persist
    Condition</title>

    <author fullname="Murali Bashyam" initials="M." surname="Bashyam">
      <organization>Ocarina Networks, Inc.</organization>
      <address>
        <postal>
          <street>42 Airport Parkway</street>
          <city>San Jose</city>
          <region>CA</region>
          <code>95110</code>
          <country>USA</country>
        </postal>

        <phone>+1 (408) 512-2966</phone>
        <email>mbashyam@ocarinanetworks.com</email>
      </address>
    </author>

    <author fullname="Mahesh Jethanandani" initials="M."
            surname="Jethanandani">
      <organization>Cisco</organization>
      <address>
        <postal>
          <street>170 Tasman Drive</street>
          <city>San Jose</city>
          <region>CA</region>
          <code>95134</code>
          <country>USA</country>
        </postal>

        <phone>+1 (408) 527-8230</phone>
        <email>mjethanandani@gmail.com</email>
      </address>
    </author>

    <author fullname="Anantha Ramaiah" initials="A." surname="Ramaiah">
      <organization>Cisco</organization>
      <address>
        <postal>
          <street>170 Tasman Drive</street>
          <city>San Jose</city>
          <region>CA</region>
          <code>95134</code>
          <country>USA</country>
        </postal>

        <phone>+1 (408) 525-6486</phone>
        <email>ananth@cisco.com</email>
      </address>
    </author>

    <date month="December" year="2011" />

    <area>Transport</area>

    <workgroup>TCP Maintenance and Minor Extensions Working Group</workgroup>

    <abstract>
      <t>This document clarifies the Zero Window Probes (ZWPs) described in
      RFC 1122 ("Requirements for Internet Hosts -- Communication Layers"). In
      particular, it clarifies the actions that can be taken on connections
      that are experiencing the ZWP condition. Rather than making a change to
      the standard, this document clarifies what has been until now a
      misinterpretation of the standard as specified in RFC 1122.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>Section 4.2.2.17 of <xref target="RFC1122">"Requirements for Internet
      Hosts -- Communication Layers"</xref> says:<list style="empty">
          <t>"A TCP MAY keep its offered receive window closed indefinitely.
          As long as the receiving TCP continues to send acknowledgments in
          response to the probe segments, the sending TCP MUST allow the
          connection to stay open.</t>

          <t>DISCUSSION:<list style="empty">
              <t>It is extremely important to remember that ACK
              (acknowledgment) segments that contain no data are not reliably
              transmitted by TCP".</t>
            </list></t>
        </list></t>

      <t>Therefore, zero window probing needs to be supported to prevent a
      connection from hanging forever if ACK segments that re-open the window
      are lost. The condition where the sender goes into the Zero Window Probe
      (ZWP) mode is typically known as the 'persist condition'.</t>

      <t>This guidance is not intended to preclude resource management by the
      operating system or application, which may request that connections be
      aborted regardless of whether or not they are in the persist condition.
      The TCP implementation needs to, of course, comply by aborting such
      connections. If such resource management is not performed external to
      the protocol implementation, TCP implementations that misinterpret
      Section 4.2.2.17 of <xref target="RFC1122"></xref> have the
      potential to make systems vulnerable to <xref target="RFC4732">
      denial-of-service (DoS)</xref> scenarios where attackers tie up
      resources by keeping connections in the persist condition.</t>

      <t>Rather than making a change to the standard, this document
      clarifies what has been until now a misinterpretation of
      the standard as specified in <xref target="RFC1122"> RFC 1122</xref>.</t>

      <t><xref target="1122-discuss"></xref> of this document describes why
      implementations might not
      close connections merely because they are in the persist condition, yet
      need to still allow such connections to be closed on command. <xref target="simple-dos"></xref>
      outlines a simple attack on systems that do not sufficiently manage
      connections in this state. <xref target="1122-clarif"></xref>
      concludes with a
      requirements-language clarification to the RFC 1122 requirement.</t>

      <section title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY",
      and "OPTIONAL" in this document are to be interpreted as described in
      <xref target="RFC2119"/>.</t>

      </section>
    </section>

    <section title="Discussion of RFC 1122 Requirement" anchor="1122-discuss">
      <t>Per <xref target="RFC1122"></xref>, as
      long as the ACKs are being received for window probes, a connection can
      continue to stay in the persist condition. This is an important feature,
      because applications typically would want the TCP connection to stay
      open unless an application explicitly closes the connection.</t>

      <t>For example, take the case of a user running a network print job
      during which the printer runs out of paper and is waiting for the user
      to reload the paper tray (user intervention). The printer may not be reading
      data from the printing application during this time. Although this may
      result in a prolonged ZWP state, it would be premature for TCP to take
      action on its own and close the printer connection merely due to its
      lack of progress. Once the printer&rsquo;s paper tray is reloaded (which
      may be minutes, hours, or days later), the print job needs to be able to
      continue uninterrupted over the same TCP connection.</t>

      <t>However, systems that misinterpret Section 4.2.2.17 of <xref
      target="RFC1122"></xref> may fall victim
      to DoS attacks by not supporting sufficient mechanisms to allow release
      of system resources tied up by connections in the persist condition
      during times of resource exhaustion. For example, take the case of
      a busy server where multiple (attacker) clients can advertise a zero
      window forever (by reliably acknowledging the ZWPs). This could
      eventually lead to resource exhaustion in the server system. In such
      cases, the application or operating system would need to take appropriate
      action on the TCP connection to reclaim their resources and continue to
      maintain legitimate connections.</t>

      <t>The problem is applicable to TCP and TCP-derived flow-controlled
      transport protocols such as the Stream Control Transmission Protocol
      (SCTP).</t>

      <t>Clearly, a system needs to be robust to such attacks and allow
      connections in the persist condition to be aborted in the same way as
      any other connection. <xref target="1122-clarif"></xref> of this
      document provides the requisite
      clarification to permit such resource management.</t>
    </section>

    <section title="Description of One Simple Attack" anchor="simple-dos">
      <t>To illustrate a potential DoS scenario, consider the case where many
      client applications open TCP connections with an <xref
      target="RFC2616">HTTP</xref> server, and each sends a GET request for a
      large page and stops reading the response partway through. This causes
      the client's TCP implementation to advertise a zero window to the
      server. For every large HTTP response, the server is left holding on to
      the response data in its sending queue. The amount of response data held
      will depend on the size of the send buffer and the advertised window. If
      the clients never read the data in their receive queues and therefore
      do not clear the persist condition, the server will continue to
      hold that data indefinitely. Since there may be a limit to the
      operating system kernel memory available for TCP buffers, this may
      result in DoS to legitimate connections by locking up the necessary
      resources. If the above scenario persists for an extended period
      of time, it will lead to starvation of TCP buffers and
      connection blocks, causing legitimate existing connections and
      new connection attempts to fail.</t>

      <t>A clever application needs to detect such attacks with connections
      that are not making progress, and could close these connections.
      However, some applications might have transferred all the data to the
      TCP socket and subsequently closed the socket, leaving the connections
      with no controlling process; such connections are referred to as
      orphaned connections.  These orphaned connections might be left holding
      the data indefinitely in their sending queue.</t>

      <t>The US Computer Emergency Readiness Team (CERT) has released an
      advisory in this regard <xref target="VU723308">
      </xref> and is making vendors aware of this DoS scenario.</t>
    </section>

    <section title="Clarification Regarding RFC 1122 Requirements" anchor="1122-clarif">
      <t>As stated in <xref target="RFC1122"></xref>, a TCP
      implementation MUST NOT close a connection merely
      because it seems to be stuck in the ZWP or persist condition. Though
      unstated in RFC 1122, but implicit for system robustness, a TCP
      implementation needs to allow connections in the ZWP or persist
      condition to be closed or aborted by their applications or other
      resource management routines in the operating system.</t>

      <t>An interface that allows an application to inform TCP on what to do
      when the connection stays in the persist condition, or that allows
      an application or other resource manager to query the health of the
      TCP connection, is considered outside the scope of this document.
      All such techniques, however, are in complete compliance with
      <xref target="RFC0793">TCP</xref> and <xref target="RFC1122"></xref>.</t>
    </section>

    <section title="Security Considerations">
      <t>This document discusses one system security consideration that is
      listed in <xref target="RFC3552">"Guidelines for Writing RFC Text on
      Security Considerations"</xref>. In particular, it describes an
      inappropriate use of a system that is acting as a server for many
      users. That use and a possible DoS attack are discussed in
      <xref target="simple-dos"></xref>.</t>

      <t>This document limits itself to clarifying RFC 1122. It does not
      discuss what can happen with orphaned connections and other possible
      mitigation techniques, as these are considered outside the scope of this
      document.</t>
    </section>

    <section title="Acknowledgments">
      <t>This document was inspired by the recent discussions that took place
      regarding the TCP persist condition issue in the TCP Maintenance and
      Minor Extensions (TCPM) Working Group mailing list
      <xref target="TCPM"></xref>. The outcome of those discussions was to
      come up with a document that would clarify the intentions of the ZWP
      as discussed in RFC 1122. We would like to thank Mark Allman, Ted Faber,
      and David Borman for clarifying the objective behind this document.
      Thanks also go to Wesley Eddy for his extensive editorial comments and
      to Dan Wing, Mark Allman, and Fernando Gont for providing feedback on
      this document.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.0793'?>

<reference anchor='RFC1122'>
<front>
<title>Requirements for Internet Hosts - Communication Layers</title>
<author initials='R.' surname='Braden' fullname='Robert Braden' role="editor">
</author>
<date year='1989' month='October' /></front>
<seriesInfo name='STD' value='3' />
<seriesInfo name='RFC' value='1122' />
</reference>

      <?rfc include='reference.RFC.2119'?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.2616"?>

      <?rfc include='reference.RFC.3552'?>

<reference anchor='RFC4732'>
<front>
<title>Internet Denial-of-Service Considerations</title>
<author initials='M.' surname='Handley' fullname='M. Handley' role="editor">
<organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla' role="editor">
</author>
<author surname="IAB"></author>
<date year='2006' month='December' />
</front>
<seriesInfo name='RFC' value='4732' />
</reference>

      <reference anchor="TCPM" target="http://datatracker.ietf.org/wg/tcpm/charter/">
        <front>
          <title>TCP Maintenance and
Minor Extensions (tcpm) - Charter</title>
          <author><organization>IETF</organization>
          </author>
        </front>
      </reference>

      <reference anchor="VU723308" target="http://www.kb.cert.org/vuls/id/723308">
        <front>
          <title>TCP may keep its offered receive window closed indefinitely
(RFC 1122)</title>
          <author fullname="Art Manion" initials="A" surname="Manion">
          </author>
          <author fullname="David Warren" initials="D" surname="Warren">
          </author>
          <date month="November" year="2009" />
        </front>
      </reference>
    </references>
  </back>
</rfc>
