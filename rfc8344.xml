<?xml version="1.0" encoding="US-ASCII"?>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" obsoletes="7277" category="std"
    number="8344" submissionType="IETF" consensus="yes" >

    <front>
    <title abbrev="YANG IP Management">A YANG Data Model for IP Management</title>

    <author initials="M" surname="Bjorklund" fullname='Martin Bjorklund' >
      <organization>Tail-f Systems</organization>
      <address>
        <email>mbj@tail-f.com</email>
      </address>
    </author>

<date month="March" year="2018"/>

    <abstract>
        <t>
This document defines a YANG data model for management of IP
implementations.  The data model includes configuration and system
state.
        </t>
        <t>
The YANG data model in this document conforms to the Network Management
Datastore Architecture defined in RFC 8342.
        </t>
        <t>
This document obsoletes RFC 7277.
        </t>
</abstract>
</front>

<middle>
<section title="Introduction" anchor="introduction">
    <t>
This document defines a YANG data model <xref target="RFC7950"/> for
management of IP implementations.
    </t>
    <t>
The data model covers configuration of per-interface IPv4 and IPv6
parameters as well as mappings of IP addresses to link-layer addresses.  It
also provides information about which IP addresses are operationally
used and which link-layer mappings exist.  Per&nbhy;interface parameters
are added through augmentation of the interface data model defined in
<xref target="RFC8343"/>.
    </t>
    <t>
This version of the IP data model supports the Network Management
Datastore Architecture (NMDA) <xref target="RFC8342"/>.
    </t>

<section title="Summary of Changes from RFC 7277" anchor="summary-of-changes-from-rfc-7277">
    <t>
The &quot;ipv4&quot; and &quot;ipv6&quot; subtrees with &quot;config
false&quot; data nodes in the &quot;/interfaces&#8209;state/interface&quot;
subtree are deprecated.  All &quot;config&nbsp;false&quot; data nodes
are now present in the &quot;ipv4&quot; and &quot;ipv6&quot; subtrees
in the &quot;/interfaces/interface&quot; subtree.
    </t>
    <t>
Servers that do not implement NMDA or that wish to support clients
that do not implement NMDA MAY implement the deprecated &quot;ipv4&quot; and
&quot;ipv6&quot; subtrees in the &quot;/interfaces&#8209;state/interface&quot;
subtree.
    </t>
</section>

<section title="Terminology" anchor="terminology">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
"SHALL&nbsp;NOT", "SHOULD", "SHOULD&nbsp;NOT", "RECOMMENDED",
"NOT&nbsp;RECOMMENDED", "MAY", and "OPTIONAL" in this document
are to be interpreted as described in BCP&nbsp;14
<xref format="default" pageno="false" target="RFC2119"/>
<xref format="default" pageno="false" target="RFC8174"/> when,
and only when, they appear in all capitals, as shown here.</t>

<t>
The following terms are defined in <xref target="RFC8342"/> and are not
redefined here:
    </t>
<t>
 <list style="symbols">
 <t>
client
 </t>
 <t>
server
 </t>
 <t>
configuration
 </t>
 <t>
system state
 </t>
 <t>
intended configuration
 </t>
 <t>
running configuration datastore
 </t>
 <t>
operational state
 </t>
 <t>
operational state datastore
 </t>
 </list>
</t>
    <t>
The following terms are defined in <xref target="RFC7950"/> and are not redefined
here:
    </t>
<t>
 <list style="symbols">
 <t>
augment
 </t>
 <t>
data model
 </t>
 <t>
data node
 </t>
 </list>
</t>
    <t>
The terminology for describing YANG data models is found in
<xref target="RFC7950"/>.
    </t>
</section>

<section title="Tree Diagrams" anchor="tree-diagrams">
    <t>
Tree diagrams used in this document follow the notation defined in
<xref target="RFC8340"/>.
    </t>
</section>
</section>

<section title="IP Data Model" anchor="ip-data-model">
    <t>
This document defines the YANG module &quot;ietf&#8209;ip&quot;, which
augments the &quot;interface&quot; lists defined in the
&quot;ietf&#8209;interfaces&quot; module <xref target="RFC8343"/> with
IP&nbhy;specific data nodes.
    </t>
    <t>
The data model has the following structure for IP data nodes per
interface, excluding the deprecated data nodes:
    </t>

        <figure>
            <artwork><![CDATA[
module: ietf-ip
  augment /if:interfaces/if:interface:
    +--rw ipv4!
    |  +--rw enabled?      boolean
    |  +--rw forwarding?   boolean
    |  +--rw mtu?          uint16
    |  +--rw address* [ip]
    |  |  +--rw ip               inet:ipv4-address-no-zone
    |  |  +--rw (subnet)
    |  |  |  +--:(prefix-length)
    |  |  |  |  +--rw prefix-length?   uint8
    |  |  |  +--:(netmask)
    |  |  |     +--rw netmask?         yang:dotted-quad
    |  |  |             {ipv4-non-contiguous-netmasks}?
    |  |  +--ro origin?          ip-address-origin
    |  +--rw neighbor* [ip]
    |     +--rw ip                    inet:ipv4-address-no-zone
    |     +--rw link-layer-address    yang:phys-address
    |     +--ro origin?               neighbor-origin
    +--rw ipv6!
       +--rw enabled?                     boolean
       +--rw forwarding?                  boolean
       +--rw mtu?                         uint32
       +--rw address* [ip]
       |  +--rw ip               inet:ipv6-address-no-zone
       |  +--rw prefix-length    uint8
       |  +--ro origin?          ip-address-origin
       |  +--ro status?          enumeration
       +--rw neighbor* [ip]
       |  +--rw ip                    inet:ipv6-address-no-zone
       |  +--rw link-layer-address    yang:phys-address
       |  +--ro origin?               neighbor-origin
       |  +--ro is-router?            empty
       |  +--ro state?                enumeration
       +--rw dup-addr-detect-transmits?   uint32
       +--rw autoconf
          +--rw create-global-addresses?        boolean
          +--rw create-temporary-addresses?     boolean
          |       {ipv6-privacy-autoconf}?
          +--rw temporary-valid-lifetime?       uint32
          |       {ipv6-privacy-autoconf}?
          +--rw temporary-preferred-lifetime?   uint32
                  {ipv6-privacy-autoconf}?
            ]]></artwork>
        </figure>
    <t>
The data model defines two containers per interface --
&quot;ipv4&quot; and &quot;ipv6&quot;, representing the IPv4 and IPv6 address
families. In each container, there is a leaf &quot;enabled&quot; that controls
whether or not the address family is enabled on that interface, and a leaf
&quot;forwarding&quot; that controls whether or not IP packet forwarding for
the address family is enabled on the interface.  In each container, there
is also a list of addresses and a list of mappings from IP addresses
to link-layer addresses.
    </t>
</section>
<section title="Relationship to the IP-MIB" anchor="relationship-to-the-ip-mib">
    <t>
If the device implements the IP-MIB <xref target="RFC4293"/>, each entry in the
&quot;ipv4/address&quot; and &quot;ipv6/address&quot; lists is mapped to one
ipAddressEntry, where the ipAddressIfIndex refers to the &quot;address&quot;
entry&apos;s interface.
    </t>
    <t>
The IP-MIB defines objects to control IPv6 Router Advertisement
messages.  The corresponding YANG data nodes are defined
in <xref target="RFC8022"/>.
    </t>
    <t>
The entries in &quot;ipv4/neighbor&quot; and &quot;ipv6/neighbor&quot; are
mapped to ipNetToPhysicalTable.
    </t>
    <t>
The following table lists the YANG data nodes with corresponding objects
in the IP-MIB.
    </t>

<texttable title="YANG Interface Data Nodes and Related IP-MIB Objects">
<ttcol align='left'>YANG data node in /if:interfaces/if:interface</ttcol>
<ttcol align='left'>IP-MIB object</ttcol>
<c>ipv4</c>
<c>ipv4InterfaceEnableStatus</c>
<c>ipv4/enabled</c>
<c>ipv4InterfaceEnableStatus</c>
<c>ipv4/address</c>
<c>ipAddressEntry</c>
<c>ipv4/address/ip</c>
<c>ipAddressAddrType ipAddressAddr</c>
<c>ipv4/neighbor</c>
<c>ipNetToPhysicalEntry</c>
<c>ipv4/neighbor/ip</c>
<c>ipNetToPhysicalNetAddressType ipNetToPhysicalNetAddress</c>
<c>ipv4/neighbor/link-layer-address</c>
<c>ipNetToPhysicalPhysAddress</c>
<c>ipv4/neighbor/origin</c>
<c>ipNetToPhysicalType</c>
<c>ipv6</c>
<c>ipv6InterfaceEnableStatus</c>
<c>ipv6/enabled</c>
<c>ipv6InterfaceEnableStatus</c>
<c>ipv6/forwarding</c>
<c>ipv6InterfaceForwarding</c>
<c>ipv6/address</c>
<c>ipAddressEntry</c>
<c>ipv6/address/ip</c>
<c>ipAddressAddrType ipAddressAddr</c>
<c>ipv4/address/origin</c>
<c>ipAddressOrigin</c>
<c>ipv6/address/status</c>
<c>ipAddressStatus</c>
<c>ipv6/neighbor</c>
<c>ipNetToPhysicalEntry</c>
<c>ipv6/neighbor/ip</c>
<c>ipNetToPhysicalNetAddressType ipNetToPhysicalNetAddress</c>
<c>ipv6/neighbor/link-layer-address</c>
<c>ipNetToPhysicalPhysAddress</c>
<c>ipv6/neighbor/origin</c>
<c>ipNetToPhysicalType</c>
<c>ipv6/neighbor/state</c>
<c>ipNetToPhysicalState</c>
</texttable>
</section>

<section title="IP Management YANG Module" anchor="module">
    <t>
This module imports typedefs from <xref target="RFC6991"/> and
<xref target="RFC8343"/>, and it references <xref target="RFC0791"/>,
<xref target="RFC0826"/>, <xref target="RFC4861"/>,
<xref target="RFC4862"/>, <xref target="RFC4941"/>,
<xref target="RFC7217"/>, and <xref target="RFC8200"/>.
    </t>

    <figure>
        <artwork><![CDATA[<CODE BEGINS> file "ietf-ip@2018-02-22.yang"
module ietf-ip {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-ip";
  prefix ip;

  import ietf-interfaces {
    prefix if;
  }
  import ietf-inet-types {
    prefix inet;
  }
  import ietf-yang-types {
    prefix yang;
  }

  organization
    "IETF NETMOD (Network Modeling) Working Group";

  contact
    "WG Web:   <https://datatracker.ietf.org/wg/netmod/>
     WG List:  <mailto:netmod@ietf.org>

     Editor:   Martin Bjorklund
               <mailto:mbj@tail-f.com>";
  description
    "This module contains a collection of YANG definitions for
     managing IP implementations.

     Copyright (c) 2018 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 8344; see
     the RFC itself for full legal notices.";

  revision 2018-02-22 {
    description
      "Updated to support NMDA.";
    reference
      "RFC 8344: A YANG Data Model for IP Management";
  }

  revision 2014-06-16 {
    description
      "Initial revision.";
    reference
      "RFC 7277: A YANG Data Model for IP Management";
  }

  /*
   * Features
   */

  feature ipv4-non-contiguous-netmasks {
    description
      "Indicates support for configuring non-contiguous
       subnet masks.";
  }

  feature ipv6-privacy-autoconf {
    description
      "Indicates support for privacy extensions for stateless address
       autoconfiguration in IPv6.";
    reference
      "RFC 4941: Privacy Extensions for Stateless Address
                 Autoconfiguration in IPv6";
  }

  /*
   * Typedefs
   */

  typedef ip-address-origin {
    type enumeration {
      enum other {
        description
          "None of the following.";
      }
      enum static {
        description
          "Indicates that the address has been statically
           configured -- for example, using the Network Configuration
           Protocol (NETCONF) or a command line interface.";
      }
      enum dhcp {
        description
          "Indicates an address that has been assigned to this
           system by a DHCP server.";
      }
      enum link-layer {
        description
          "Indicates an address created by IPv6 stateless
           autoconfiguration that embeds a link-layer address in its
           interface identifier.";
      }
      enum random {
        description
          "Indicates an address chosen by the system at
           random, e.g., an IPv4 address within 169.254/16, a
           temporary address as described in RFC 4941, or a
           semantically opaque address as described in RFC 7217.";
        reference
          "RFC 4941: Privacy Extensions for Stateless Address
                     Autoconfiguration in IPv6
           RFC 7217: A Method for Generating Semantically Opaque
                     Interface Identifiers with IPv6 Stateless
                     Address Autoconfiguration (SLAAC)";
      }
    }
    description
      "The origin of an address.";
  }

  typedef neighbor-origin {
    type enumeration {
      enum other {
        description
          "None of the following.";
      }
      enum static {
        description
          "Indicates that the mapping has been statically
           configured -- for example, using NETCONF or a command line
           interface.";
      }
      enum dynamic {
        description
          "Indicates that the mapping has been dynamically resolved
           using, for example, IPv4 ARP or the IPv6 Neighbor
           Discovery protocol.";
      }
    }
    description
      "The origin of a neighbor entry.";
  }

  /*
   * Data nodes
   */

  augment "/if:interfaces/if:interface" {
    description
      "IP parameters on interfaces.

       If an interface is not capable of running IP, the server
       must not allow the client to configure these parameters.";

    container ipv4 {
      presence
        "Enables IPv4 unless the 'enabled' leaf
         (which defaults to 'true') is set to 'false'";
      description
        "Parameters for the IPv4 address family.";

      leaf enabled {
        type boolean;
        default true;
        description
          "Controls whether IPv4 is enabled or disabled on this
           interface.  When IPv4 is enabled, this interface is
           connected to an IPv4 stack, and the interface can send
           and receive IPv4 packets.";
      }
      leaf forwarding {
        type boolean;
        default false;
        description
          "Controls IPv4 packet forwarding of datagrams received by,
           but not addressed to, this interface.  IPv4 routers
           forward datagrams.  IPv4 hosts do not (except those
           source-routed via the host).";
      }
      leaf mtu {
        type uint16 {
          range "68..max";
        }
        units "octets";
        description
          "The size, in octets, of the largest IPv4 packet that the
           interface will send and receive.

           The server may restrict the allowed values for this leaf,
           depending on the interface's type.

           If this leaf is not configured, the operationally used MTU
           depends on the interface's type.";
        reference
          "RFC 791: Internet Protocol";
      }
      list address {
        key "ip";
        description
          "The list of IPv4 addresses on the interface.";

        leaf ip {
          type inet:ipv4-address-no-zone;
          description
            "The IPv4 address on the interface.";
        }
        choice subnet {
          mandatory true;
          description
            "The subnet can be specified as a prefix length or,
             if the server supports non-contiguous netmasks, as
             a netmask.";
          leaf prefix-length {
            type uint8 {
              range "0..32";
            }
            description
              "The length of the subnet prefix.";
          }
          leaf netmask {
            if-feature ipv4-non-contiguous-netmasks;
            type yang:dotted-quad;
            description
              "The subnet specified as a netmask.";
          }
        }
        leaf origin {
          type ip-address-origin;
          config false;
          description
            "The origin of this address.";
        }
      }
      list neighbor {
        key "ip";
        description
          "A list of mappings from IPv4 addresses to
           link-layer addresses.

           Entries in this list in the intended configuration are
           used as static entries in the ARP Cache.

           In the operational state, this list represents the ARP
           Cache.";
        reference
          "RFC 826: An Ethernet Address Resolution Protocol";

        leaf ip {
          type inet:ipv4-address-no-zone;
          description
            "The IPv4 address of the neighbor node.";
        }
        leaf link-layer-address {
          type yang:phys-address;
          mandatory true;
          description
            "The link-layer address of the neighbor node.";
        }
        leaf origin {
          type neighbor-origin;
          config false;
          description
            "The origin of this neighbor entry.";
        }
      }
    }

    container ipv6 {
      presence
        "Enables IPv6 unless the 'enabled' leaf
         (which defaults to 'true') is set to 'false'";
      description
        "Parameters for the IPv6 address family.";

      leaf enabled {
        type boolean;
        default true;
        description
          "Controls whether IPv6 is enabled or disabled on this
           interface.  When IPv6 is enabled, this interface is
           connected to an IPv6 stack, and the interface can send
           and receive IPv6 packets.";
      }
      leaf forwarding {
        type boolean;
        default false;
        description
          "Controls IPv6 packet forwarding of datagrams received by,
           but not addressed to, this interface.  IPv6 routers
           forward datagrams.  IPv6 hosts do not (except those
           source-routed via the host).";
        reference
          "RFC 4861: Neighbor Discovery for IP version 6 (IPv6)
                     Section 6.2.1, IsRouter";
      }
      leaf mtu {
        type uint32 {
          range "1280..max";
        }
        units "octets";
        description
          "The size, in octets, of the largest IPv6 packet that the
           interface will send and receive.

           The server may restrict the allowed values for this leaf,
           depending on the interface's type.

           If this leaf is not configured, the operationally used MTU
           depends on the interface's type.";
        reference
          "RFC 8200: Internet Protocol, Version 6 (IPv6)
                     Specification
                     Section 5";
      }

      list address {
        key "ip";
        description
          "The list of IPv6 addresses on the interface.";

        leaf ip {
          type inet:ipv6-address-no-zone;
          description
            "The IPv6 address on the interface.";
        }
        leaf prefix-length {
          type uint8 {
            range "0..128";
          }
          mandatory true;
          description
            "The length of the subnet prefix.";
        }
        leaf origin {
          type ip-address-origin;
          config false;
          description
            "The origin of this address.";
        }
        leaf status {
          type enumeration {
            enum preferred {
              description
                "This is a valid address that can appear as the
                 destination or source address of a packet.";
            }
            enum deprecated {
              description
                "This is a valid but deprecated address that should
                 no longer be used as a source address in new
                 communications, but packets addressed to such an
                 address are processed as expected.";
            }
            enum invalid {
              description
                "This isn't a valid address, and it shouldn't appear
                 as the destination or source address of a packet.";
            }
            enum inaccessible {
              description
                "The address is not accessible because the interface
                 to which this address is assigned is not
                 operational.";
            }
            enum unknown {
              description
                "The status cannot be determined for some reason.";
            }
            enum tentative {
              description
                "The uniqueness of the address on the link is being
                 verified.  Addresses in this state should not be
                 used for general communication and should only be
                 used to determine the uniqueness of the address.";
            }
            enum duplicate {
              description
                "The address has been determined to be non-unique on
                 the link and so must not be used.";
            }
            enum optimistic {
              description
                "The address is available for use, subject to
                 restrictions, while its uniqueness on a link is
                 being verified.";
            }
          }
          config false;
          description
            "The status of an address.  Most of the states correspond
             to states from the IPv6 Stateless Address
             Autoconfiguration protocol.";
          reference
            "RFC 4293: Management Information Base for the
                       Internet Protocol (IP)
                       - IpAddressStatusTC
             RFC 4862: IPv6 Stateless Address Autoconfiguration";
        }
      }
      list neighbor {
        key "ip";
        description
          "A list of mappings from IPv6 addresses to
           link-layer addresses.

           Entries in this list in the intended configuration are
           used as static entries in the Neighbor Cache.

           In the operational state, this list represents the
           Neighbor Cache.";
        reference
          "RFC 4861: Neighbor Discovery for IP version 6 (IPv6)";

        leaf ip {
          type inet:ipv6-address-no-zone;
          description
            "The IPv6 address of the neighbor node.";
        }
        leaf link-layer-address {
          type yang:phys-address;
          mandatory true;
          description
            "The link-layer address of the neighbor node.

             In the operational state, if the neighbor's 'state' leaf
             is 'incomplete', this leaf is not instantiated.";
        }
        leaf origin {
          type neighbor-origin;
          config false;
          description
            "The origin of this neighbor entry.";
        }
        leaf is-router {
          type empty;
          config false;
          description
            "Indicates that the neighbor node acts as a router.";
        }
        leaf state {
          type enumeration {
            enum incomplete {
              description
                "Address resolution is in progress, and the
                 link-layer address of the neighbor has not yet been
                 determined.";
            }
            enum reachable {
              description
                "Roughly speaking, the neighbor is known to have been
                 reachable recently (within tens of seconds ago).";
            }
            enum stale {
              description
                "The neighbor is no longer known to be reachable, but
                 until traffic is sent to the neighbor no attempt
                 should be made to verify its reachability.";
            }
            enum delay {
              description
                "The neighbor is no longer known to be reachable, and
                 traffic has recently been sent to the neighbor.
                 Rather than probe the neighbor immediately, however,
                 delay sending probes for a short while in order to
                 give upper-layer protocols a chance to provide
                 reachability confirmation.";
            }
            enum probe {
              description
                "The neighbor is no longer known to be reachable, and
                 unicast Neighbor Solicitation probes are being sent
                 to verify reachability.";
            }
          }
          config false;
          description
            "The Neighbor Unreachability Detection state of this
             entry.";
          reference
            "RFC 4861: Neighbor Discovery for IP version 6 (IPv6)
                       Section 7.3.2";
        }
      }

      leaf dup-addr-detect-transmits {
        type uint32;
        default 1;
        description
          "The number of consecutive Neighbor Solicitation messages
           sent while performing Duplicate Address Detection on a
           tentative address.  A value of zero indicates that
           Duplicate Address Detection is not performed on
           tentative addresses.  A value of one indicates a single
           transmission with no follow-up retransmissions.";
        reference
          "RFC 4862: IPv6 Stateless Address Autoconfiguration";
      }
      container autoconf {
        description
          "Parameters to control the autoconfiguration of IPv6
           addresses, as described in RFC 4862.";
        reference
          "RFC 4862: IPv6 Stateless Address Autoconfiguration";

        leaf create-global-addresses {
          type boolean;
          default true;
          description
            "If enabled, the host creates global addresses as
             described in RFC 4862.";
          reference
            "RFC 4862: IPv6 Stateless Address Autoconfiguration
                       Section 5.5";
        }
        leaf create-temporary-addresses {
          if-feature ipv6-privacy-autoconf;
          type boolean;
          default false;
          description
            "If enabled, the host creates temporary addresses as
             described in RFC 4941.";
          reference
            "RFC 4941: Privacy Extensions for Stateless Address
                       Autoconfiguration in IPv6";
        }

        leaf temporary-valid-lifetime {
          if-feature ipv6-privacy-autoconf;
          type uint32;
          units "seconds";
          default 604800;
          description
            "The time period during which the temporary address
             is valid.";
          reference
            "RFC 4941: Privacy Extensions for Stateless Address
                       Autoconfiguration in IPv6
                       - TEMP_VALID_LIFETIME";
        }
        leaf temporary-preferred-lifetime {
          if-feature ipv6-privacy-autoconf;
          type uint32;
          units "seconds";
          default 86400;
          description
            "The time period during which the temporary address is
             preferred.";
          reference
            "RFC 4941: Privacy Extensions for Stateless Address
                       Autoconfiguration in IPv6
                       - TEMP_PREFERRED_LIFETIME";
        }
      }
    }
  }

  /*
   * Legacy operational state data nodes
   */

  augment "/if:interfaces-state/if:interface" {
    status deprecated;
    description
      "Data nodes for the operational state of IP on interfaces.";

    container ipv4 {
      presence
        "Present if IPv4 is enabled on this interface";
      config false;
      status deprecated;
      description
        "Interface-specific parameters for the IPv4 address family.";

      leaf forwarding {
        type boolean;
        status deprecated;
        description
          "Indicates whether IPv4 packet forwarding is enabled or
           disabled on this interface.";
      }
      leaf mtu {
        type uint16 {
          range "68..max";
        }
        units "octets";
        status deprecated;
        description
          "The size, in octets, of the largest IPv4 packet that the
           interface will send and receive.";
        reference
          "RFC 791: Internet Protocol";
      }
      list address {
        key "ip";
        status deprecated;
        description
          "The list of IPv4 addresses on the interface.";

        leaf ip {
          type inet:ipv4-address-no-zone;
          status deprecated;
          description
            "The IPv4 address on the interface.";
        }
        choice subnet {
          status deprecated;
          description
            "The subnet can be specified as a prefix length or,
             if the server supports non-contiguous netmasks, as
             a netmask.";
          leaf prefix-length {
            type uint8 {
              range "0..32";
            }
            status deprecated;
            description
              "The length of the subnet prefix.";
          }
          leaf netmask {
            if-feature ipv4-non-contiguous-netmasks;
            type yang:dotted-quad;
            status deprecated;
            description
              "The subnet specified as a netmask.";
          }
        }
        leaf origin {
          type ip-address-origin;
          status deprecated;
          description
            "The origin of this address.";
        }
      }
      list neighbor {
        key "ip";
        status deprecated;
        description
          "A list of mappings from IPv4 addresses to
           link-layer addresses.

           This list represents the ARP Cache.";
        reference
          "RFC 826: An Ethernet Address Resolution Protocol";

        leaf ip {
          type inet:ipv4-address-no-zone;
          status deprecated;
          description
            "The IPv4 address of the neighbor node.";
        }
        leaf link-layer-address {
          type yang:phys-address;
          status deprecated;
          description
            "The link-layer address of the neighbor node.";
        }
        leaf origin {
          type neighbor-origin;
          status deprecated;
          description
            "The origin of this neighbor entry.";
        }
      }
    }

    container ipv6 {
      presence
        "Present if IPv6 is enabled on this interface";
      config false;
      status deprecated;
      description
        "Parameters for the IPv6 address family.";

      leaf forwarding {
        type boolean;
        default false;
        status deprecated;
        description
          "Indicates whether IPv6 packet forwarding is enabled or
           disabled on this interface.";
        reference
          "RFC 4861: Neighbor Discovery for IP version 6 (IPv6)
                     Section 6.2.1, IsRouter";
      }
      leaf mtu {
        type uint32 {
          range "1280..max";
        }
        units "octets";
        status deprecated;
        description
          "The size, in octets, of the largest IPv6 packet that the
           interface will send and receive.";
        reference
          "RFC 8200: Internet Protocol, Version 6 (IPv6)
                     Specification
                     Section 5";
      }
      list address {
        key "ip";
        status deprecated;
        description
          "The list of IPv6 addresses on the interface.";

        leaf ip {
          type inet:ipv6-address-no-zone;
          status deprecated;
          description
            "The IPv6 address on the interface.";
        }
        leaf prefix-length {
          type uint8 {
            range "0..128";
          }
          mandatory true;
          status deprecated;
          description
            "The length of the subnet prefix.";
        }
        leaf origin {
          type ip-address-origin;
          status deprecated;
          description
            "The origin of this address.";
        }
        leaf status {
          type enumeration {
            enum preferred {
              description
                "This is a valid address that can appear as the
                 destination or source address of a packet.";
            }
            enum deprecated {
              description
                "This is a valid but deprecated address that should
                 no longer be used as a source address in new
                 communications, but packets addressed to such an
                 address are processed as expected.";
            }
            enum invalid {
              description
                "This isn't a valid address, and it shouldn't appear
                 as the destination or source address of a packet.";
            }
            enum inaccessible {
              description
                "The address is not accessible because the interface
                 to which this address is assigned is not
                 operational.";
            }
            enum unknown {
              description
                "The status cannot be determined for some reason.";
            }
            enum tentative {
              description
                "The uniqueness of the address on the link is being
                 verified.  Addresses in this state should not be
                 used for general communication and should only be
                 used to determine the uniqueness of the address.";
            }
            enum duplicate {
              description
                "The address has been determined to be non-unique on
                 the link and so must not be used.";
            }
            enum optimistic {
              description
                "The address is available for use, subject to
                 restrictions, while its uniqueness on a link is
                 being verified.";
            }
          }
          status deprecated;
          description
            "The status of an address.  Most of the states correspond
             to states from the IPv6 Stateless Address
             Autoconfiguration protocol.";
          reference
            "RFC 4293: Management Information Base for the
                       Internet Protocol (IP)
                       - IpAddressStatusTC
             RFC 4862: IPv6 Stateless Address Autoconfiguration";
        }
      }
      list neighbor {
        key "ip";
        status deprecated;
        description
          "A list of mappings from IPv6 addresses to
           link-layer addresses.

           This list represents the Neighbor Cache.";
        reference
          "RFC 4861: Neighbor Discovery for IP version 6 (IPv6)";

        leaf ip {
          type inet:ipv6-address-no-zone;
          status deprecated;
          description
            "The IPv6 address of the neighbor node.";
        }
        leaf link-layer-address {
          type yang:phys-address;
          status deprecated;
          description
            "The link-layer address of the neighbor node.";
        }
        leaf origin {
          type neighbor-origin;
          status deprecated;
          description
            "The origin of this neighbor entry.";
        }
        leaf is-router {
          type empty;
          status deprecated;
          description
            "Indicates that the neighbor node acts as a router.";
        }
        leaf state {
          type enumeration {
            enum incomplete {
              description
                "Address resolution is in progress, and the
                 link-layer address of the neighbor has not yet been
                 determined.";
            }
            enum reachable {
              description
                "Roughly speaking, the neighbor is known to have been
                 reachable recently (within tens of seconds ago).";
            }
            enum stale {
              description
                "The neighbor is no longer known to be reachable, but
                 until traffic is sent to the neighbor no attempt
                 should be made to verify its reachability.";
            }
            enum delay {
              description
                "The neighbor is no longer known to be reachable, and
                 traffic has recently been sent to the neighbor.
                 Rather than probe the neighbor immediately, however,
                 delay sending probes for a short while in order to
                 give upper-layer protocols a chance to provide
                 reachability confirmation.";
            }
            enum probe {
              description
                "The neighbor is no longer known to be reachable, and
                 unicast Neighbor Solicitation probes are being sent
                 to verify reachability.";
            }
          }
          status deprecated;
          description
            "The Neighbor Unreachability Detection state of this
             entry.";
          reference
            "RFC 4861: Neighbor Discovery for IP version 6 (IPv6)
                       Section 7.3.2";
        }
      }
    }
  }
}
<CODE ENDS>
         ]]></artwork>
     </figure>

</section>

<section title="IANA Considerations" anchor="iana">
    <t>
This document registers a URI in the &quot;IETF XML Registry&quot;
<xref target="RFC3688"/>. Following the format in RFC 3688, the following
registration has been made.
    </t>
        <figure>
            <artwork><![CDATA[
   URI: urn:ietf:params:xml:ns:yang:ietf-ip
   Registrant Contact: The NETMOD WG of the IETF.
   XML: N/A; the requested URI is an XML namespace.
          ]]></artwork>
        </figure>
    <t>
This document registers a YANG module in the &quot;YANG Module Names&quot;
registry <xref target="RFC6020"/>.
    </t>


        <figure>
            <artwork><![CDATA[
   Name:         ietf-ip
   Namespace:    urn:ietf:params:xml:ns:yang:ietf-ip
   Prefix:       ip
   Reference:    RFC 8344
            ]]></artwork>
        </figure>
</section>

<section title="Security Considerations" anchor="security-considerations">

    <t>
The YANG module specified in this document defines a schema for data
that is designed to be accessed via network management protocols such
as NETCONF <xref target="RFC6241"/> or RESTCONF <xref target="RFC8040"/>. The
lowest NETCONF layer is the secure transport layer, and the
mandatory-to-implement secure transport is Secure Shell (SSH) <xref
target="RFC6242"/>. The lowest RESTCONF layer is HTTPS, and the
mandatory-to-implement secure transport is TLS <xref target="RFC5246"/>.
    </t>
    <t>
The NETCONF access control model <xref target="RFC8341"/> provides the
means to restrict access for particular NETCONF or RESTCONF users to a
preconfigured subset of all available NETCONF or RESTCONF protocol
operations and content.
    </t>
    <t>

There are a number of data nodes defined in this YANG module that are
writable/creatable/deletable (i.e., config true, which is the
default).  These data nodes may be considered sensitive or vulnerable
in some network environments.  Write operations (e.g., edit-config) to
these data nodes without proper protection can have a negative effect
on network operations.  These are the subtrees and data nodes and
their sensitivity/vulnerability:
    </t>

<t>
 <list style="hanging">
        <t hangText="ipv4/enabled and ipv6/enabled:">
These leafs are used to enable or disable IPv4 and IPv6 on a specific
interface.  By enabling a protocol on an interface, an attacker might
be able to create an unsecured path into a node (or through it if
routing is also enabled).  By disabling a protocol on an interface, an
attacker might be able to force packets to be routed through some
other interface or deny access to some or all of the network via that
protocol.
 </t>
        <t hangText="ipv4/address and ipv6/address:">
These lists specify the configured IP addresses on an interface.  By
modifying this information, an attacker can cause a node to either
ignore messages destined to it or accept (at least at the IP layer)
messages it would otherwise ignore.  The use of filtering or security
associations may reduce the potential damage in the latter case.
 </t>
        <t hangText="ipv4/forwarding and ipv6/forwarding:">
These leafs allow a client to enable or disable the forwarding functions
on the entity.  By disabling the forwarding functions, an attacker would
possibly be able to deny service to users.  By enabling the forwarding
functions, an attacker could open a conduit into an area.  This might
result in the area providing transit for packets it shouldn&apos;t, or
it might allow the attacker access to the area, bypassing security safeguards.
 </t>
        <t hangText="ipv6/autoconf:">
The leafs in this branch control the autoconfiguration
of IPv6 addresses and, in particular, whether or not temporary addresses
are used. By modifying the corresponding leafs, an attacker might
impact the addresses used by a node and -- thus, indirectly -- the
privacy of the users using the node.
 </t>
        <t hangText="ipv4/mtu and ipv6/mtu:">
Setting these leafs to very small values can be used to slow down
interfaces.
 </t>
 </list>
</t>

</section>
</middle>

<back>
<references title="Normative References">

<?rfc include="reference.RFC.0791"?>
<?rfc include="reference.RFC.2119"?>
<?rfc include="reference.RFC.3688"?>
<?rfc include="reference.RFC.4861"?>
<?rfc include="reference.RFC.4862"?>
<?rfc include="reference.RFC.4941"?>
<?rfc include="reference.RFC.5246"?>
<?rfc include="reference.RFC.6020"?>
<?rfc include="reference.RFC.6241"?>
<?rfc include="reference.RFC.6242"?>
<?rfc include="reference.RFC.6991"?>
<?rfc include="reference.RFC.7950"?>
<?rfc include="reference.RFC.8040"?>
<?rfc include="reference.RFC.8200"?>
<?rfc include="reference.RFC.8174"?>

<!-- draft-ietf-netconf-rfc6536bis (RFC 8341 - AUTH48) -->
<reference anchor="RFC8341" target="https://www.rfc-editor.org/info/rfc8341">
<front>
<title>Network Configuration Access Control Model</title>
<author initials='A' surname='Bierman' fullname='Andy Bierman'>
    <organization />
</author>
<author initials='M' surname='Bjorklund' fullname='Martin Bjorklund'>
    <organization />
</author>
<date month='March' year='2018'/>
</front>
<seriesInfo name="STD" value="91"/>
<seriesInfo name="RFC" value="8341"/>
<seriesInfo name="DOI" value="10.17487/RFC8341"/>
</reference>

<!-- draft-ietf-netmod-rfc7223bis (RFC 8343 - AUTH48) -->
<reference anchor="RFC8343" target="https://www.rfc-editor.org/info/rfc8343">
  <front>
    <title>A YANG Data Model for Interface Management</title>
    <author initials="M" surname="Bjorklund" fullname="Martin Bjorklund">
      <organization/>
    </author>
  <date month="March" year="2018"/>
  </front>
<seriesInfo name="RFC" value="8343"/>
<seriesInfo name="DOI" value="10.17487/RFC8343"/>
</reference>

<!-- draft-ietf-netmod-revised-datastores (RFC 8342 - AUTH48) -->
<reference anchor="RFC8342" target="https://www.rfc-editor.org/info/rfc8342">
<front>
<title>Network Management Datastore Architecture (NMDA)</title>
<author initials='M' surname='Bjorklund' fullname='Martin Bjorklund'>
    <organization />
</author>
<author initials='J' surname='Schoenwaelder' fullname='Juergen Schoenwaelder'>
    <organization />
</author>
<author initials='P' surname='Shafer' fullname='Philip Shafer'>
    <organization />
</author>
<author initials='K' surname='Watsen' fullname='Kent Watsen'>
    <organization />
</author>
<author initials='R' surname='Wilton' fullname='Robert Wilton'>
    <organization />
</author>
<date month='March' year='2018' />
</front>
<seriesInfo name="RFC" value="8342"/>
<seriesInfo name="DOI" value="10.17487/RFC8342"/>
</reference>

<reference anchor='W3C.REC-xml-20081126'
           target='https://www.w3.org/TR/2008/REC-xml-20081126'>
<front>
<title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>
<author initials='T.' surname='Bray' fullname='Tim Bray'>
    <organization />
</author>
<author initials='J.' surname='Paoli' fullname='Jean Paoli'>
    <organization />
</author>
<author initials='M.' surname='Sperberg-McQueen' fullname='Michael Sperberg-McQueen'>
    <organization />
</author>
<author initials='E.' surname='Maler' fullname='Eve Maler'>
    <organization />
</author>
<author initials='F.' surname='Yergeau' fullname='Francois Yergeau'>
    <organization />
</author>
<date month='November' year='2008' />
</front>
<seriesInfo name='World Wide Web Consortium Recommendation'
     value='REC-xml-20081126' />
</reference>

</references>

<references title="Informative References">

<?rfc include="reference.RFC.0826"?>
<?rfc include="reference.RFC.4293"?>
<?rfc include="reference.RFC.7217"?>
<?rfc include="reference.RFC.8022"?>

<!-- draft-ietf-netmod-yang-tree-diagrams (RFC 8340 - AUTH48) -->
<reference anchor='RFC8340' target="https://www.rfc-editor.org/info/rfc8340">
<front>
<title>YANG Tree Diagrams</title>
<author initials='M' surname='Bjorklund' fullname='Martin Bjorklund'>
    <organization />
</author>
<author initials='L' surname='Berger' fullname='Lou Berger' role="editor">
    <organization />
</author>
<date month='March' year='2018' />
</front>
<seriesInfo name="BCP" value="215"/>
<seriesInfo name="RFC" value="8340"/>
<seriesInfo name="DOI" value="10.17487/RFC8340"/>
</reference>

</references>

<section title="Example: NETCONF &lt;get&#8209;config&gt; Reply" anchor="example-netconf-get-config-reply">
    <t>
This section gives an example of a reply to the NETCONF
&lt;get&#8209;config&gt; request for the running configuration datastore for a
device that implements the data model defined in this document.
    </t>

    <t>
The XML <xref target="W3C.REC-xml-20081126"/> snippets that follow in
this section and in <xref target="example-netconf-get-data-reply"/>
are provided as examples only.
    </t>

        <figure>
            <artwork><![CDATA[
<rpc-reply
    xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
    message-id="101">
  <data>
    <interfaces
        xmlns="urn:ietf:params:xml:ns:yang:ietf-interfaces"
        xmlns:ianaift="urn:ietf:params:xml:ns:yang:iana-if-type">
      <interface>
        <name>eth0</name>
        <type>ianaift:ethernetCsmacd</type>
        <ipv4 xmlns="urn:ietf:params:xml:ns:yang:ietf-ip">
          <address>
            <ip>192.0.2.1</ip>
            <prefix-length>24</prefix-length>
          </address>
        </ipv4>
        <ipv6 xmlns="urn:ietf:params:xml:ns:yang:ietf-ip">
          <mtu>1280</mtu>
          <address>
            <ip>2001:db8::10</ip>
            <prefix-length>32</prefix-length>
          </address>
          <dup-addr-detect-transmits>0</dup-addr-detect-transmits>
        </ipv6>
      </interface>
    </interfaces>
  </data>
</rpc-reply>
            ]]></artwork>
        </figure>
</section>

<section title="Example: NETCONF &lt;get&#8209;data&gt; Reply" anchor="example-netconf-get-data-reply">
    <t>
This section gives an example of a reply to the NETCONF &lt;get&#8209;data&gt;
request for the operational state datastore for a device that
implements the data model defined in this document.
    </t>
    <t>
This example uses the &quot;origin&quot; annotation, which is defined in the
module &quot;ietf&#8209;origin&quot; <xref target="RFC8342"/>.
    </t>

        <figure>
            <artwork><![CDATA[
<rpc-reply
    xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
    message-id="101">
  <data xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-datastores">
    <interfaces
        xmlns="urn:ietf:params:xml:ns:yang:ietf-interfaces"
        xmlns:ianaift="urn:ietf:params:xml:ns:yang:iana-if-type"
        xmlns:or="urn:ietf:params:xml:ns:yang:ietf-origin">

      <interface or:origin="or:intended">
        <name>eth0</name>
        <type>ianaift:ethernetCsmacd</type>
        <!-- other parameters from ietf-interfaces omitted -->

        <ipv4 xmlns="urn:ietf:params:xml:ns:yang:ietf-ip">
          <enabled or:origin="or:default">true</enabled>
          <forwarding or:origin="or:default">false</forwarding>
          <mtu or:origin="or:system">1500</mtu>
          <address>
            <ip>192.0.2.1</ip>
            <prefix-length>24</prefix-length>
            <origin>static</origin>
          </address>
          <neighbor or:origin="or:learned">
            <ip>192.0.2.2</ip>
            <link-layer-address>
              00:00:5E:00:53:AB
            </link-layer-address>
          </neighbor>
        </ipv4>
        <ipv6 xmlns="urn:ietf:params:xml:ns:yang:ietf-ip">
          <enabled or:origin="or:default">true</enabled>
          <forwarding or:origin="or:default">false</forwarding>
          <mtu>1280</mtu>
          <address>
            <ip>2001:db8::10</ip>
            <prefix-length>32</prefix-length>
            <origin>static</origin>
            <status>preferred</status>
          </address>
          <address or:origin="or:learned">
            <ip>2001:db8::1:100</ip>
            <prefix-length>32</prefix-length>
            <origin>dhcp</origin>
            <status>preferred</status>
          </address>
          <dup-addr-detect-transmits>0</dup-addr-detect-transmits>
          <neighbor or:origin="or:learned">
            <ip>2001:db8::1</ip>
            <link-layer-address>
              00:00:5E:00:53:AB
            </link-layer-address>
            <origin>dynamic</origin>
            <is-router/>
            <state>reachable</state>
          </neighbor>
          <neighbor or:origin="or:learned">
            <ip>2001:db8::4</ip>
            <origin>dynamic</origin>
            <state>incomplete</state>
          </neighbor>
        </ipv6>
      </interface>
    </interfaces>
  </data>
</rpc-reply>
            ]]></artwork>
        </figure>
</section>

<section title="Acknowledgments" anchor="acknowledgments" numbered="no">
    <t>
The author wishes to thank Jeffrey Lange, Ladislav Lhotka, Juergen
Schoenwaelder, and Dave Thaler for their helpful comments.
    </t>
</section>

</back>
</rfc>
