<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>


<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="no" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc rfcedstyle="yes" ?>

<rfc number="7562"
     category="info" 
     submissionType="independent"
     consensus="yes"
     ipr="trust200902"> 


  <front>

    <title abbrev="TLS Auth Using DTCP">Transport Layer Security (TLS)
    Authorization Using Digital&nbsp;Transmission&nbsp;Content&nbsp;Protection&nbsp;(DTCP)&nbsp;Certificates</title>


    <author fullname="D. Thakore" initials="D." surname="Thakore">
      <organization abbrev="CableLabs">Cable Television Laboratories, Inc.</organization>
      <address>
        <postal>
          <street>858 Coal Creek Circle</street>
          <city>Louisville</city>
          <region>CO</region>
          <code>80023</code>
          <country>United States</country>
        </postal>
        <email>d.thakore@cablelabs.com</email>
        </address>
    </author>
    <date month="July" year="2015" />

    <area>Security</area>    
    <workgroup>Transport Layer Security</workgroup>
    <keyword>TLS</keyword>
    <keyword>SupplementalData</keyword>
    <keyword>DTCP</keyword>
    
    <abstract>

      <t>
        This document specifies the use of Digital Transmission Content 
        Protection (DTCP) certificates as an authorization data type in the 
        authorization extension for the Transport Layer Security (TLS) protocol. 
        This is in accordance with the guidelines for authorization extensions
        as specified in RFC 5878. As with other TLS extensions,
        this authorization data can be included in the client and 
        server hello messages to confirm that both parties support the desired 
        authorization data types. If supported by both the client and the server,
        DTCP certificates are exchanged in the supplemental data TLS handshake message 
        as specified in RFC 4680. This authorization data type extension is in
        support of devices containing DTCP certificates issued by the 
        Digital Transmission Licensing Administrator (DTLA).
      </t>
    </abstract>
  </front>
  <middle>

    <section title="Introduction">
      <t>


        The Transport Layer Security (TLS) protocol (see <xref target="RFC2246">TLS 1.0</xref>, 
        <xref target="RFC4346">TLS 1.1</xref>, and <xref target="RFC5246">TLS1 .2</xref>) is being used
        in an ever increasing variety of operational environments, the most
	common among which is its use 
        in securing HTTP traffic <xref target="RFC2818"></xref>. 
        <xref target="RFC5878"></xref> introduces extensions that enable TLS to operate
        in environments where authorization information needs to be exchanged between the client
        and the server before any protected data is exchanged. The use of these TLS authorization
        extensions is especially attractive since it allows the client and server to
        determine the type of protected data to exchange based on the authorization information 
        received in the extensions.
      </t>
      
      <t>
        A substantial number of deployed consumer electronics devices, such as 
        televisions, tablets, game consoles, set-top boxes, and other multimedia 
        devices, contain Digital
	Transmission Content Protection <xref target="DTCP"/> certificates issued by <xref target="DTLA"></xref>. 
        These DTCP certificates enable secure transmission of premium audiovisual
        content between devices over various types of links 
	(e.g., <xref target="DTCP-IP">DTCP over IP</xref>).
        These DTCP certificates can also be used to verify device
	functionality (e.g., supported device features).                
      </t>
            
      <t>
        This document describes the format and necessary identifiers to
	exchange DTCP certificates within the
        supplemental data message (see <xref target="RFC4680"></xref>) while negotiating a TLS session. 
        The DTCP certificates are then used independent of their use
        for content protection (e.g., to verify supported features) and 
        the corresponding DTCP Authentication and Key Exchange (AKE) protocol. 
        This communication allows either the client, the server, or both to perform certain
        actions or provide specific services. The actual semantics of the
	      authorization decision by the client/server
        are beyond the scope of this document. The DTCP certificate, which is not
        an X.509 certificate, can be cryptographically tied to the 
        X.509 certificate being used during the TLS tunnel establishment by an
	Elliptic Curve Digital Signature Algorithm (EC-DSA)
	<xref target="DTCP"/> signature. 
      </t>
      
      <section title="Applicability Statement">
        <t>
          DTCP-enabled consumer electronics devices (e.g., televisions, game consoles) use DTCP 
          certificates for secure transmission of audiovisual content. The AKE protocol defined in
          <xref target="DTCP"></xref> is used to exchange DTCP certificates 
          and allows a device to be identified and 
          authenticated based on the information in the DTCP certificate. 
          However, these DTCP-enabled devices offer additional
          functionality (e.g., via HTML5 User Agents or web-enabled applications) 
          that is distinct from its capability to transmit and
          play audiovisual content. The mechanism outlined in this document 
          allows a DTCP-enabled consumer electronics device to authenticate and 
          authorize using its DTCP certificate when accessing services 
          over the internet; for example, web applications on televisions that can enable 
          value-added services. This is anticipated to be very valuable since there are
          a considerable number of such devices. The reuse of well-known web security
          will also keep such communication consistent with existing standards and
          best practices.
        </t>
      </section>

      <section title="Conventions">
        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
          "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be 
          interpreted as described in <xref target="RFC2119"></xref>.
        </t>
      </section>
      
    </section>
    
    <section title="Overview" anchor="overview">
      
      <section title="Overview of DTCP Certificates">
        
        <t>
          DTCP certificates issued by <xref target="DTLA"></xref> to 
          DTLA-compliant devices come in three general variations
          (see Section 4.2.3.1 of <xref target="DTCP"></xref>):
          <list style="symbols">
            <t>Restricted Authentication device certificate format (Format 0): Typically issued to 
	    devices with limited computation resources.</t>

            <t>Baseline Full Authentication device certificate format (Format 1): This is the most 
	    commonly issued certificate format. Format 1 certificates include a unique DeviceID
	    and device EC-DSA public/private key pair generated by the DTLA. 
              (See Section 4.3 of <xref target="DTCP"></xref>). </t>

            <t>Extended Full Authentication device certificate format (Format 2): This is issued 
	      to devices that possess additional functions (e.g., additional channel ciphers,
              specific device properties). The presence of these additional functions is indicated by the device
              capability mask as specified in <xref target="DTCP"> Section 4.2.3.2 of </xref>. 
              Format 2 certificates also include a unique DeviceID and device
	      EC-DSA public/private key pair generated by the DTLA (see Section 4.3 of <xref target="DTCP"></xref>).
            </t>
          </list>
          The mechanism specified in this document allows only Formats 1 and 2 DTCP certificates to be 
          exchanged in the supplemental data message since it requires the use of the EC-DSA private key associated 
          with the certificate.
        </t>
        
      </section>
      
      <section title="Overview of SupplementalData Handshake">
        
        <t>
          <xref target="fig1" /> illustrates the exchange of the 
          SupplementalData message during the TLS handshake as specified in
          <xref target="RFC4680"></xref> (repeated here for convenience):
        </t>
        
        <figure align="center" anchor="fig1" title="TLS Handshake Message Exchange with SupplementalData">
           <artwork align="left">
            <![CDATA[            
     Client                                               Server
     
     ClientHello (with extensions) -------->
     
                                    ServerHello(with extensions)
                                               SupplementalData*
                                                    Certificate*
                                              ServerKeyExchange*
                                             CertificateRequest*
                                  <--------      ServerHelloDone
                                  
     SupplementalData*
     Certificate*
     ClientKeyExchange
     CertificateVerify*
     [ChangeCipherSpec]
     Finished                     -------->
                                              [ChangeCipherSpec]
                                  <--------             Finished
     Application Data             <------->     Application Data
          
     *  Indicates optional or situation-dependent messages that are
        not always sent.
        
     [] Indicates that ChangeCipherSpec is an independent TLS 
        protocol content type; it is not a TLS handshake message.]]></artwork>
        </figure>
        
      </section>
      
      <section title="Overview of Authorization Extensions">
        <t>
          <xref target="RFC5878"> </xref> defines two authorization extension types
          that are used in the ClientHello and ServerHello messages and are repeated 
          below for convenience:
          <figure><artwork><![CDATA[
      enum {
        client_authz(7), server_authz(8), (65535)
      } ExtensionType;]]></artwork></figure>
          A client uses the client_authz and server_authz extensions in the ClientHello
          message to indicate that it will send client authorization data and receive
          server authorization data, respectively, in the SupplementalData messages. 
          A server uses the extensions in a similar manner in its ServerHello message. 
          <xref target="RFC5878"></xref> also establishes
          a registry that is maintained by IANA to register authorization data formats.
          This document defines a new authorization data type for both 
          the client_authz and server_authz extensions and allows the client and
          server to exchange DTCP certificates in the SupplementalData message. 
        </t>  
      </section>
      
      <section title="Overview of SupplementalData Usage for Authorization">
        <t>
          Section 3 of <xref target="RFC5878"></xref> specifies the syntax of the
          supplemental data message when carrying the authz_data message that is
          negotiated in the client_authz and/or server_authz types. 
                    
          This document defines a new authorization data format that is used in the
          authz_data message when sending DTCP Authorization Data.
        </t>
      </section>
      
    </section>

    <section title="DTCP Authorization Data Format" anchor="dtcp_authz">
      <section title="DTCP Authorization Type" anchor="dtcp_type">
        <t>
          The DTCP Authorization type definition in the TLS Authorization Data 
          Formats registry is:
        </t>
      <figure><artwork><![CDATA[     
       dtcp_authorization(66); ]]>          
        </artwork>
      </figure>
      </section>      
      
      <section title="DTCP Authorization Data" anchor="dtcp_data">
        <t>
          The DTCP Authorization Data is used when the AuthzDataFormat 
          type is dtcp_authorization. The syntax of the authorization data is:
        </t>
        <figure>          
          <artwork><![CDATA[            
      struct {          
          opaque random_bytes[32];
      } RandomNonce;

      struct {
          opaque RandomNonce nonce;
          opaque DTCPCert<0..2^24-1>;
          opaque ASN.1Cert<0..2^24-1>;
          opaque signature<0..2^16-1>;
      } dtcp_authz_data;]]>          
          </artwork>
        </figure>
        <t>
          RandomNonce is generated by the server and consists of 32
          bytes generated by a high-quality, secure random number
          generator.  The client always sends back the
          server-generated RandomNonce in its dtcp_authz_data
          structure.  The RandomNonce helps the server in detecting
          replay attacks.  A client can detect replay attacks by
          associating the ASN.1 certificate in the dtcp_authz_data
          structure with the certificate received in the Certificate
          message of the TLS handshake, so a separate nonce for the
          client is not required.
        </t>
        <t>
          DTCPCert is the sender's DTCP certificate. See Section 4.2.3.1 of the DTCP Specification
          <xref target="DTCP"></xref>.
        </t>
        <t>
          ASN.1Cert is the sender's certificate used to establish the
          TLS session, i.e., it is sent in the Certificate or ClientCertificate message 
          using the Certificate structure defined in Section 7.4.2 of <xref target="RFC5246"></xref>.          
        </t>
        <t>
          The DTCPCert and ASN.1Cert are variable-length vectors as specified in Section 4.3 of 
          <xref target="RFC5246"></xref>. Hence, the actual length precedes the vector's contents
          in the byte stream. If the ASN.1Cert is not being sent, the ASN.1Cert_length MUST be zero.
        </t>
        <t>
          dtcp_authz_data contains the RandomNonce, the DTCP certificate, and the optional ASN.1 
          certificate. This is then followed by the digital signature covering
	  the RandomNonce, the DTCP certificate, and the ASN.1 certificate (if
	  present).



          The signature is generated using the private key associated
          with the DTCP certificate and using the Signature Algorithm and
          Hash Algorithm as specified in Section 4.4 of <xref
          target="DTCP"></xref>.  This signature provides proof of the
          possession of the private key by the sender.  A sender
          sending its own DTCP certificate MUST populate this field.
          The length of the signature field is determined by the
          Signature Algorithm and Hash Algorithm as specified in
          Section 4.4 of <xref target="DTCP" />, and so it is not explicitly encoded in
          the dtcp_authz_data structure (e.g., the length will be 40
          bytes for a SHA1+ECDSA algorithm combination).
        </t>
      </section>
      
      <section title="Usage Rules for Clients to Exchange DTCP Authorization Data">
        <t>
          A client includes both the client_authz and server_authz extensions in the
          extended client hello message when indicating its desire to exchange dtcp_authorization data
          with the server. Additionally, the client includes the AuthzDataFormat type specified
          in <xref target="dtcp_type"></xref> in the extension_data field to specify the format
          of the authorization data. 
        </t>
        <t>
          A client will receive the server's dtcp_authz_data before
          it sends its own dtcp_authz_data. When sending its own dtcp_authz_data message, the client
          includes the same RandomNonce that it receives 
          in the server's dtcp_authz_data message. Clients MUST include its DTCP certificate in
          the dtcp_authz_data message. A client MAY include its ASN.1 certificate (certificate
          in the ClientCertificate message) in the ASN.1Cert field of the dtcp_authz_data to 
          cryptographically tie the dtcp_authz_data with its ASN.1Cert being used to establish
          the TLS session (i.e., sent in the ClientCertificate message).
        </t>
      </section>

      <section title="Usage Rules for Servers to Exchange DTCP Authorization Data">
        <t>
          A server responds with both the client_authz and
          server_authz extensions in the extended server hello message
          when indicating its desire to exchange dtcp_authorization
          data with the client. Additionally, the server includes the
          AuthzDataFormat type specified in <xref
          target="dtcp_type"></xref> in the extension_data field to
          specify the format of the dtcp_authorization data. A client
          may or may not include an ASN.1 certificate during the TLS
          handshake. However, the server will not know that at the
          time of sending the SupplementalData message. Hence, a
          server MUST generate and populate the RandomNonce in the
          dtcp_authz_data message. If the client's hello message does
          not contain both the client_authz and server_authz
          extensions with dtcp_authorization type, the server MUST NOT
          include support for dtcp_authorization data in its hello
          message.  A server MAY include its DTCP certificate in the
          dtcp_authz_data message. If the server does not send a DTCP
          certificate, it will send only the RandomNonce in its
          dtcp_authz_data message. If the server includes its DTCP
          certificate, it MUST also include its server certificate
          (sent in the TLS Certificate message) in the certs field to
          cryptographically tie its dtcp_authz_data with the ASN.1
          certificate used in the TLS session being established. This
          also helps the client in detecting replay attacks.
        </t>
      </section>
      
      <section title="TLS Message Exchange with dtcp_authz_data">
        <t>
          Based on the usage rules in the sections above,  
          <xref target="fig2"/> provides one possible
          TLS message exchange where the client sends its DTCP certificate to the server
          within the dtcp_authz_data message.
        </t>
        <figure align="center" anchor="fig2" title="DTCP SupplementalData Exchange">
          <artwork align="left"><![CDATA[
     Client                                               Server
     
     ClientHello (with extensions) -------->
     
                                    ServerHello(with extensions)
                                 SupplementalData(with Nonce N1)
                                                     Certificate
                                              ServerKeyExchange*
                                              CertificateRequest
                                  <--------      ServerHelloDone
                                  
     SupplementalData(with Data D1)
     Certificate
     ClientKeyExchange
     CertificateVerify
     [ChangeCipherSpec]
     Finished                     -------->
                                              [ChangeCipherSpec]
                                  <--------             Finished
     Application Data             <------->     Application Data     
     
   N1 Indicates a Random nonce generated by server
     
   D1 Contains dtcp_authz_data populated with the following 
     {(N1, DTCP Cert, Client X.509 Cert) Signature over all elements}
     
   *  Indicates optional or situation-dependent messages that are
      not always sent.
        
   [] Indicates that ChangeCipherSpec is an independent TLS 
      protocol content type; it is not a TLS handshake message.]]> </artwork>
        </figure>
      </section>
      
      <section anchor="Errors" title="Alert Messages">
        <t>
          This document reuses TLS Alert messages for any errors that arise during
          authorization processing and reuses the AlertLevels as
          specified in <xref target="RFC5878"></xref>. Additionally, the following
          AlertDescription values are used to report errors in dtcp_authorization processing:</t>
        <t><list style="hanging">
      
    <t hangText="unsupported_extension:"><vspace />
      During processing of dtcp_authorization, a client uses this
      when it receives a server hello message that includes support
      for dtcp_authorization in only one of client_authz or 
      server_authz but not in both the extensions. 
      This message is always fatal.
      Note: Completely omitting the dtcp_authorization extension 
      and/or omitting the client_authz and server_authz completely 
      is allowed and should not constitute the reason that this 
      alert is sent.</t>
        
    <t hangText="certificate_unknown:"> <vspace />
      During processing of dtcp_authorization, a client or server
      uses this when it has received an X.509 certificate in the 
      dtcp_authorization data and that X.509 certificate does
      not match the certificate sent in the corresponding 
      ClientCertificate or Certificate message. </t></list>
    </t>
     
      </section>
      
    </section>
    
    <section anchor="IANA" title="IANA Considerations">
      <t>
        This document includes an entry registered in the IANA-maintained
        "TLS Authorization Data Formats" registry for dtcp_authorization(66). 
        This registry is defined in <xref target="RFC5878"></xref> and defines two ranges:
        one is IETF Review, and the other is Specification Required. The value for
        dtcp_authorization should be assigned via <xref target="RFC5226"></xref>
        Specification Required. The extension defined in this document is compatible
        with Data Transport Layer Security (DTLS) <xref
	target="RFC6347"></xref>, and the registry assignment has been
        marked "Y" for DTLS-OK.
      </t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>
        The dtcp_authorization data, as specified in this document, carries the 
        DTCP certificate that identifies the associated device. Inclusion of the
        X.509 certificate being used to establish a TLS Session in the 
        dtcp_authorization data allows an application to cryptographically tie 
        them.



 However, a TLS Client is not required to use (and may not possess) an
        X.509 certificate. In this case, the dtcp_authorization data exchange is
        prone to a man-in-the-middle (MITM) attack. In such situations, a TLS server MUST
        deny access to the application features dependent on the DTCP certificate
        or use a double handshake. The double handshake mechanism is also vulnerable
        to the TLS MITM Renegotiation exploit as explained in <xref target="RFC5746"></xref>.
        In order to address this vulnerability, clients and servers MUST use the 
        secure_renegotiation extension as specified in <xref target="RFC5746"></xref>
        when exchanging dtcp_authorization data. Additionally, the renegotiation is also
        vulnerable to the Triple Handshake exploit. To mitigate this, servers MUST use the 
        same ASN.1 certificate during renegotiation as the one used in the initial handshake.      
      </t>
      <t>
        It should be noted that for the double handshake to succeed, any extension 
        (e.g., TLS Session Ticket <xref target="RFC5077"></xref>) that results
        in the TLS handshake sequence being modified may result in failure to
        exchange SupplementalData.
      </t>
      <t>
        Additionally, the security considerations specified in <xref target="RFC5878"></xref>
        and <xref target="RFC5246"></xref> apply to the extension specified in 
        this document. In addition, the dtcp_authorization data may
        be carried along with other supplemental data or some other authorization
        data and that information may require additional protection.
        Finally, implementers should also reference <xref target="DTCP"></xref>
        and <xref target="DTCP-IP"></xref> for more information regarding DTCP
        certificates, their usage, and associated security considerations.
      </t>
    </section>
    
  </middle>

  <back>    
    
    <references title="Normative References">






<?rfc include="reference.RFC.2119.xml"?>
<?rfc include="reference.RFC.2246.xml"?>
<?rfc include="reference.RFC.4346.xml"?>
<?rfc include="reference.RFC.5246.xml"?>
<?rfc include="reference.RFC.5746.xml"?>
<?rfc include="reference.RFC.4680.xml"?>    
<?rfc include="reference.RFC.5878.xml"?>
<?rfc include="reference.RFC.6347.xml"?>   

   
      
<reference anchor="DTCP" target="http://www.dtcp.com/documents/dtcp/info-20130605-dtcp-v1-rev-1-7-ed2.pdf">
        <front>
          <title>Digital Transmission Content Protection Specification</title>
          <author>
            <organization>Digital Transmission Licensing Administrator</organization>
          </author>
          <date/>
        </front>
	<seriesInfo name="Volume 1," value="Informational Version"/>
      </reference>
      
      <reference anchor="DTCP-IP" 
		 target="http://www.dtcp.com/documents/dtcp/info-20130605-dtcp-v1se-ip-rev-1-4-ed3.pdf">
        <front>
          <title>Mapping DTCP to IP</title>
          <author>
            <organization>Digital Transmission Licensing Administrator</organization>
          </author>
          <date/>
        </front>
	<seriesInfo name="Volume 1, Supplement E," value="Informational Version"/>
      </reference>
      
    </references>

    <references title="Informative References">


<?rfc include="reference.RFC.5226.xml"?>

      <reference anchor="DTLA" target="http://www.dtcp.com">
        <front>
          <title>DTLA</title>
          <author>
            <organization>Digital Transmission Licensing Administrator</organization>
          </author>
          <date/>
        </front>
      </reference>
      
 <?rfc include="reference.RFC.2818.xml"?>
<?rfc include="reference.RFC.5077.xml"?>
<?rfc include="reference.RFC.6042.xml"?>
  </references>
      
    <section anchor="app-additional" title="Alternate Double Handshake Example">

      <t>
        This document specifies a TLS authorization data extension that allows 
        TLS clients and servers to exchange DTCP certificates during a TLS handshake exchange.
        In cases where the supplemental data contains sensitive information, the double
        handshake technique described in <xref target="RFC4680"></xref> can
        be used to provide protection for the supplemental data information. 
        The double handshake specified in <xref target="RFC4680"></xref> assumes
        that the client knows the context of the TLS session that is being set up and
        uses the authorization extensions as needed. <xref target="fig3"/>
        illustrates a variation of the double handshake that addresses the case
        where the client may not have a priori knowledge
        that it will be communicating with a server capable of exchanging
        dtcp_authz_data (typical for https connections; see <xref target="RFC2818"></xref>).
        In <xref target="fig3"/>, the client's hello messages
        includes the client_authz and server_authz extensions. 
        The server simply establishes an encrypted TLS session with the client in the
        first handshake by not indicating support for any authz extensions. The server
        initiates a second handshake by sending a HelloRequest. The second handshake
        will include the server's support for authz extensions, which will result in 
        SupplementalData being exchanged.
      </t>
      
      <t>
        Alternately, it is also possible to do a double handshake where the server sends
        the authorization extensions during both the first and the second handshake. Depending
        on the information received in the first handshake, the server can decide whether or not a second 
        handshake is needed.
      </t>
      
      <figure align="center" anchor="fig3" title="Double Handshake to Protect SupplementalData">
        <artwork align="left">
          <![CDATA[
            
            
  Client                                                   Server
   
  ClientHello (w/ extensions) -------->                            |0
                                ServerHello (no authz extensions)  |0
                                                     Certificate*  |0
                                               ServerKeyExchange*  |0
                                              CertificateRequest*  |0
                              <--------           ServerHelloDone  |0
  Certificate*                                                     |0
  ClientKeyExchange                                                |0
  CertificateVerify*                                               |0
  [ChangeCipherSpec]                                               |0
  Finished                    -------->                            |1
                                               [ChangeCipherSpec]  |0
                              <--------                  Finished  |1
                              <--------              HelloRequest  |1
  ClientHello (w/ extensions) -------->                            |1
                                      ServerHello (w/ extensions)  |1
                                                SupplementalData*  |1
                                                     Certificate*  |1
                                               ServerKeyExchange*  |1
                                              CertificateRequest*  |1
                              <--------           ServerHelloDone  |1
  SupplementalData*                                                |1
  Certificate*                                                     |1
  ClientKeyExchange                                                |1
  CertificateVerify*                                               |1
  [ChangeCipherSpec]                                               |1
  Finished                    -------->                            |2
                                               [ChangeCipherSpec]  |1
                              <--------                  Finished  |2
  Application Data            <------->          Application Data  |2
  
  *  Indicates optional or situation-dependent messages.]]>            
        </artwork>
      </figure>
    </section>

<section anchor="app_Acknowledgements" title="Acknowledgements" numbered="no">
<t>The author wishes to thank Mark Brown, Sean Turner, Sumanth
   Channabasappa, and the Chairs (EKR, Joe Saloway) and members of the
   TLS Working Group who provided feedback and comments on one or more
   revisions of this document.</t>

<t>This document derives its structure and much of its content from
<xref target="RFC4680"/>, <xref target="RFC5878"/>, and <xref target="RFC6042"/>.</t>
</section> 
 
</back>
</rfc>
