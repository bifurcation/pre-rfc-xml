<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc symrefs="no" ?>
<?rfc sortrefs="no" ?>
<?rfc rfcedstyle="yes" ?>

<rfc number="6157"
     category="std"
     updates="3264"
     ipr="pre5378Trust200902" submissionType="IETF">

<front>
    <title abbrev="IPv6 Transition in SIP">
       IPv6 Transition in the Session Initiation Protocol (SIP)
    </title>
    <author initials="G." surname="Camarillo" fullname="Gonzalo Camarillo">
      <organization>Ericsson</organization>
      <address>
	<postal>
          <street>Hirsalantie 11</street>
	  <code>02420</code> 
	  <city>Jorvas</city> 
	  <country>Finland</country>
 	</postal>
	<email>Gonzalo.Camarillo@ericsson.com</email>
      </address>
    </author>

    <author initials="K." surname="El Malki" fullname="Karim El Malki">
    <organization>Athonet</organization>
    <address>
<postal>
<street>AREA Science Park</street>
<street>Padriciano 99</street>
<code>34149</code>
<city>Trieste (TS)</city>
<country>Italy</country>
</postal>
    <email>karim@athonet.com</email>
    </address>
    </author>

    <author initials="V." surname="Gurbani" fullname="Vijay K. Gurbani">
    <organization abbrev="Bell Labs, Alcatel-Lucent">Bell Laboratories, Alcatel-Lucent</organization>
    <address>
      <postal>
         <street>1960 Lucent Lane</street>
         <street>Rm 9C-533</street>
         <city>Naperville</city>
         <region>IL</region>
         <code>60563</code>
         <country>USA</country>
      </postal>
      <phone>+1 630 224 0216</phone>
      <email>vkg@bell-labs.com</email>
    </address>
    </author>

    <date month="February" year="2011" />
    <area>Transport</area>
    <workgroup>SIPPING Working Group</workgroup>

    <abstract>
<t>
This document describes how the IPv4 Session Initiation Protocol (SIP)
user agents can communicate with IPv6 SIP user agents (and vice versa) at the 
signaling layer as well as exchange media once the session has been 
successfully set up.  Both single- and dual-stack (i.e., IPv4-only and 
IPv4/IPv6) user agents are considered.</t>
</abstract>
</front>
<middle>

<section title="Introduction">
<t>
SIP <xref target="RFC.3261"/> is a protocol to establish and manage multimedia 
sessions. After the exchange of signaling messages, SIP endpoints generally 
exchange session or media traffic, which is not transported using SIP but a 
different protocol. For example, audio streams are typically carried using 
the Real-Time Transport Protocol (RTP) <xref target="RFC.3550"/>.</t>
<t>
Consequently, a complete solution for IPv6 transition needs to handle
both the signaling layer and the media layer.  While unextended SIP can handle 
heterogeneous IPv6/IPv4 networks at the signaling layer as long as proxy 
servers and their Domain Name System (DNS) entries are properly configured, 
user agents using different networks and address spaces must implement 
extensions in order to exchange media between them.</t>

<t>This document addresses the system-level issues in order to make SIP work 
successfully between IPv4 and IPv6.  Sections <xref target="sec-sip"
						    format="counter"/> and 
<xref target="sec-media" format="counter"/> provide discussions on the topics that are 
pertinent to the signaling layer and media layer, respectively, to establish 
a successful session between heterogeneous IPv4/IPv6 networks.</t>
</section>

<section title="Terminology">
<t>In this document, the key words "MUST", "MUST NOT", "REQUIRED",
"SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT
RECOMMENDED", "MAY", and "OPTIONAL" are to be interpreted as described
in BCP 14, <xref target="RFC2119">RFC 2119</xref> and indicate
requirement levels for compliant implementations.</t>

<list style="hanging">
 <t hangText="IPv4-only user agent:"> An IPv4-only user agent supports SIP 
 signaling and media only on the IPv4 network.  It does not understand IPv6 
 addresses.</t>.
 <t hangText="IPv4-only node:"> A host that implements only IPv4.  An 
 IPv4-only node does not understand IPv6.  The installed base of IPv4 
 hosts existing before the transition begins are IPv4-only nodes.</t>
 <t hangText="IPv6-only user agent:"> An IPv6-only user agent supports 
 SIP signaling and media only on the IPv6 network.  It does not understand 
 IPv4 addresses.</t>.
 <t hangText="IPv6-only node:"> A host that implements IPv6 and does 
 not implement IPv4.</t>
 <t hangText="IPv4/IPv6 node:"> A host that implements both IPv4 and IPv6; 
 such hosts are also known as "dual-stack" hosts <xref target="RFC.4213"/>.</t>
 <t hangText="IPv4/IPv6 user agent:"> A user agent that supports SIP 
 signaling and media on both IPv4 and IPv6 networks.</t>
 <t hangText="IPv4/IPv6 proxy:"> A proxy that supports SIP signaling on both 
 IPv4 and IPv6 networks.</t>
</list>
</section>

<section title="The Signaling Layer" anchor="sec-sip">

<t>An autonomous domain sends and receives SIP traffic to and from
its user agents as well as to and from other autonomous domains.
This section describes the issues related to such traffic exchanges at the
signaling layer, i.e., the flow of SIP messages between participants in
order to establish the session.  We assume that the network administrators 
appropriately configure their networks such that the SIP servers within an 
autonomous domain can communicate between themselves.  This section 
contains system-level issues; a companion document 
<xref target="RFC5118"/> addresses IPv6 parser torture tests 
in SIP.</t>

<section title="Proxy Behavior" anchor="sec-sip-proxies">

<t>User agents typically send SIP traffic to an outbound proxy, which
takes care of routing it forward. In order to support both IPv4-only
and IPv6-only user agents, it is RECOMMENDED that domains deploy
dual-stack outbound proxy servers or, alternatively, deploy both
IPv4-only and IPv6-only outbound proxies.  Furthermore, there SHOULD exist
both IPv6 and IPv4 DNS entries for outbound proxy servers.  This allows the
user agent to query DNS and obtain an IP address most appropriate for
its use (i.e., an IPv4-only user agent will query DNS for A resource
records (RRs), an IPv6-only user agent will query DNS for AAAA RRs, and a 
dual-stack user agent will query DNS for all RRs and choose a specific
network.)</t>

<t>Some domains provide automatic means for user agents to discover their
proxy servers. It is RECOMMENDED that domains implement appropriate discovery
mechanisms to provide user agents with the IPv4 and IPv6 addresses of their 
outbound proxy servers. For example, a domain may support both the 
DHCPv4 <xref target="RFC.3361"/> and the DHCPv6 <xref target="RFC.3319"/> 
options for SIP servers.</t>

<t>On the receiving side, user agents inside an autonomous domain receive 
SIP traffic from sources external to their domain through an inbound proxy,
which is sometimes co-located with the registrar of the domain.  As was 
the case previously, it is RECOMMENDED that domains deploy dual-stack inbound 
proxies or, alternatively, deploy both IPv4-only and IPv6-only inbound proxy 
servers.  This allows a user agent external to the autonomous domain
to query DNS and receive an IP address of the inbound proxy most appropriate 
for its use (i.e., an IPv4-only user agent will query DNS for A RRs, an 
IPv6-only user agent will query DNS for AAAA RRs, and a dual-stack user agent 
will query DNS for all RRs and choose a specific network).  This strategy,
i.e., deploying dual-stack proxies, also allows for an IPv6-only user agent 
in the autonomous domain to communicate with an IPv4-only user agent 
in the same autonomous domain.  Without such a proxy, user agents using 
different networks identifiers will not be able to successfully signal each 
other.</t>

<t>Proxies MUST follow the recommendations in <xref target="choose-server"/>
to determine the order in which to contact the downstream servers when
routing a request.</t>

<section title="Relaying Requests across Different Networks" 
         anchor="sec-sip-rr">

<t>A SIP proxy server that receives a request using IPv6 and relays it to
a user agent (or another downstream proxy) using IPv4, and vice versa, needs 
to remain in the path traversed by subsequent requests.  Therefore, such a 
SIP proxy server MUST be configured to Record-Route in that situation.
<list style="empty">
<t>
Note that while this is the recommended practice, some problems may still
arise if an <xref target="RFC.2543">RFC 2543</xref> endpoint is involved in 
signaling.  Since the ABNF in RFC 2543 did not include production rules to 
parse IPv6 network identifiers, there is a good chance that an RFC 2543-only 
compliant endpoint is not able to parse or regenerate IPv6 network 
identifiers in headers.  Thus, despite a dual-stack proxy inserting itself 
into the session establishment, the endpoint itself may not succeed in 
the signaling establishment phase.</t>
<t>This is generally not a problem with RFC 3261 endpoints; even if such an 
endpoint runs on an IPv4-only node, it still is able to parse and regenerate 
IPv6 network identifiers.</t>
</list>
</t>

<t>Relaying a request across different networks in this manner has other
ramifications.  For one, the proxy doing the relaying must remain in the
signaling path for the duration of the session; otherwise, the upstream
client and the downstream server would not be able to communicate directly.  
Second, to remain in the signaling path, the proxy MUST insert one or 
two Record-Route headers: if the proxy is inserting a URI that contains 
a Fully Qualified Domain Name (FQDN) of the proxy, and that name has both IPv4
and IPv6 addresses in DNS, then inserting one Record-Route header suffices.
But if the proxy is inserting an IP address in the Record-Route header, 
then it must insert two such headers; the first Record-Route header 
contains the proxy's IP address that is compatible with the network 
type of the downstream server, and the second Record-Route header 
contains the proxy's IP address that is compatible with the upstream 
client.</t>

<t>An example helps illustrate this behavior.  In the example, we use 
only those headers pertinent to the discussion.  Other headers have been 
omitted for brevity.  In addition, only the INVITE request and final response 
(200 OK) are shown; it is not the intent of the example to provide a complete 
call flow that includes provisional responses and other requests.</t>

<t>In this example, proxy P, responsible for the domain example.com, receives 
a request from an IPv4-only upstream client.  It proxies this request to an 
IPv6-only downstream server.  Proxy P is running on a dual-stack host; 
on the IPv4 interface, it has an address of 192.0.2.1, and on the 
IPv6 interface, it is configured with an address of 2001:db8::1 (<xref target="appendix-a"/> contains a sample DNS zone file
entry that has been populated with both IPv4 and IPv6 addresses.)</t>


<t><figure><artwork><![CDATA[
  UAC            Proxy           UAS 
 (IPv4)            P           (IPv6)
   |          (IPv4/IPv6)         |
   |               |              |
   +---F1--------->|              |
   |               +---F2-------->|
   |               |              |
   |               |<--F3---------+
   |<--F4----------+              |
  ...             ...            ...
   |               |              |
   V               V              V
                       
F1: INVITE sip:alice@example.com SIP/2.0
    ...

F2: INVITE sip:alice@2001:db8::10 SIP/2.0
    Record-Route: <sip:2001:db8::1;lr>
    Record-Route: <sip:192.0.2.1;lr>
    ...

F3: SIP/2.0 200 OK
    Record-Route: <sip:2001:db8::1;lr>
    Record-Route: <sip:192.0.2.1;lr>
    ...

F4: SIP/2.0 200 OK
    Record-Route: <sip:2001:db8::1;lr>
    Record-Route: <sip:192.0.2.1;lr>
    ...

Figure 1: Relaying requests across different networks   
]]></artwork></figure></t>

<t>When the User Agent Server (UAS) gets an INVITE and it accepts the
  invitation, it sends
a 200 OK (F3) and forms a route set.  The first entry in its route set 
corresponds to the proxy's IPv6 interface.  Similarly, when the 200 OK
reaches the User Agent Client (UAC) (F4), it creates a route set by following the guidelines of
RFC 3261 and reversing the Record-Route headers.  The first entry in its
route set corresponds to the proxy's IPv4 interface.  In this manner, both
the UAC and the UAS will have the correct address of the proxy to which
they can target subsequent requests.</t>

<t>Alternatively, the proxy could have inserted its FQDN in the Record-Route URI and the result would have been 
the same.  This is because the proxy has both IPv4 and IPv6 addresses in 
the DNS; thus, the URI resolution would have yielded an IPv4 address to 
the UAC and an IPv6 address to the UAS.</t>

</section>
</section>

<section title="User Agent Behavior">

 <t>User agent clients MUST follow the normative text specified in 
 <xref target="sec-media-initial"/> to gather IP addresses pertinent
 to the network.  Having done that, clients MUST follow the 
 recommendations in <xref target="choose-server"/> to determine the 
 order of the downstream servers to contact when routing a request.</t>

 <t>Autonomous domains SHOULD deploy dual-stack user agent servers, or
 alternatively, deploy both IPv4-only and IPv6-only servers.  In either
 case, the RR in DNS for reaching the server should be specified 
 appropriately.</t>

</section>

</section>

<section title="The Media Layer"
anchor="sec-media">
<t>
SIP establishes media sessions using the offer/answer model <xref
target="RFC.3264"/>. One endpoint, the offerer, sends a session
description (the offer) to the other endpoint, the answerer. The
offer contains all the media parameters needed to exchange media with
the offerer: codecs, transport addresses, protocols to transfer media,
etc.
</t>
<t>
When the answerer receives an offer, it elaborates an answer and sends
it back to the offerer. The answer contains the media parameters that
the answerer is willing to use for that particular session. Offer and
answer are written using a session description protocol. The most
widespread protocol to describe sessions at present is called,
aptly enough, the Session Description Protocol (SDP) <xref target="RFC.4566"/>.
</t>
<t>
A direct offer/answer exchange between an IPv4-only user agent and an
IPv6-only user agent does not result in the establishment of a
session. The IPv6-only user agent wishes to receive media on one or
more IPv6 addresses, but the IPv4-only user agent cannot send media to
these addresses, and generally does not even understand their format.
Consequently, user agents need a means to obtain both IPv4 and IPv6
addresses to receive media and to place them in offers and answers.</t>

<t><list style="empty">
 <t>This IP version incompatibility problem would not exist if hosts 
 implementing IPv6 also implemented IPv4, and were configured with both 
 IPv4 and IPv6 addresses.  In such a case, a UA would be able to pick a
 compatible media transport address type to enable the hosts to communicate with each
 other.

</t>
</list></t>

<t>Pragmatism dictates that IPv6 user agents undertake the greater
burden in the transition period. Since IPv6 user agents are not widely
deployed yet, it seems appropriate that IPv6 user agents obtain IPv4
addresses instead of mandating an upgrade on the installed IPv4 base.
Furthermore, IPv6 user agents are expected to be dual-stacked and thus
also support IPv4, unlike the larger IPv4-only user agent base that does
not or cannot support IPv6.</t>

<t>An IPv6 node SHOULD also be able to send and receive media using IPv4
addresses, but if it cannot, it SHOULD support Session Traversal Utilities for NAT (STUN) relay usage 
<xref target="RFC6156"/>.  Such a relay allows the 
IPv6 node to indirectly send and receive media using IPv4.</t>

<t>The advantage of this strategy is that the installed base of IPv4 user
agents continues to function unchanged, but it requires an operator that
introduces IPv6 to provide additional servers for allowing IPv6 user agents 
to obtain IPv4 addresses. This strategy may come at an additional cost to 
SIP operators deploying IPv6. However, since IPv4-only SIP operators are
also likely to deploy STUN relays for NAT (Network Address Translator) 
traversal, the additional effort to deploy IPv6 in an IPv4 SIP network 
should be limited in this aspect.</t>

<t>However, there will be deployments where an IPv4/IPv6 node is unable to
use both interfaces natively at the same time,  and instead, runs as an
IPv6-only node.  Examples of such deployments include:</t>
<t></t>
<t>
<list style="numbers">
  <t> Networks where public IPv4 addresses are scarce and it is preferable
  to make large deployments only on IPv6.</t>
  <t> Networks utilizing Layer-2's that do not support concurrent IPv4
  and IPv6 usage on the same link.</t>
</list>
</t>

<section title="Updates to RFC 3264" anchor="update-rfc3264">

<t>This section provides a normative update to RFC 3264 <xref target=
"RFC.3264"/> in the following manner:</t>

<t><list style="numbers">
 <t>In some cases, especially those dealing with third party call control
 (see Section 4.2 of <xref target="RFC.3725"/>), there arises a need to
 specify the IPv6 equivalent of the IPv4 unspecified address (0.0.0.0)
 in the SDP offer.  For this, IPv6 implementations MUST use a domain 
 name within the .invalid DNS top-level domain instead of using the 
 IPv6 unspecified address (i.e., ::). </t>
 <t>Each media description in the SDP answer MUST use the same network
 type as the corresponding media description in the offer.  Thus, if
 the applicable "c=" line for a media description in the offer contained
 a network type with the value "IP4", the applicable "c=" line for the
 corresponding media description in the answer MUST contain "IP4" as
 the network type.  Similarly, if the applicable "c=" line for a media 
 description in the offer contained a network type with the value "IP6",
 the applicable "c=" line for the corresponding media description in 
the answer MUST contain "IP6" as the network type.</t>
</list></t>

</section> <!-- Update to RFC3264 -->

<section title="Initial Offer" anchor="sec-media-initial">

<t>We now describe how user agents can gather addresses by following the
Interactive Connectivity Establishment (ICE) 
<xref target="RFC5245"/> procedures. ICE is protocol that 
allows two communicating user agents to arrive at a pair of mutually 
reachable transport addresses for media communications in the presence 
of NATs.  It uses the STUN <xref target="RFC5389"/> protocol, applying its binding 
discovery and relay usages.</t>

<t>When following the ICE procedures, in addition to local addresses,
user agents may need to obtain addresses from relays; for example, an
IPv6 user agent would obtain an IPv4 address from a relay.  The relay
would forward the traffic received on this IPv4 address to the user
agent using IPv6.  Such user agents MAY use any mechanism to obtain
addresses in relays, but, following the recommendations in ICE, it is
RECOMMENDED that user agents support STUN relay usage <xref target="RFC5766"/>
<xref target="RFC6156"/> for this purpose.</t>

<t>IPv4/IPv6 user agents SHOULD gather both IPv4 and IPv6 addresses using 
the ICE procedures to generate all their offers.  This way, both IPv4-only 
and IPv6-only answerers will be able to generate a mutually acceptable
answer that establishes a session (having used ICE to gather both 
IPv4 and IPv6 addresses in the offer reduces the session establishment 
time because all answerers will find the offer valid.)</t>
 <t><list style="empty">
  <t>Implementations are encouraged to use ICE; however, the normative
  strength of the text above is left at a SHOULD since in some managed 
  networks (such as a closed enterprise network) it is possible for the 
  administrator to have control over the IP version utilized in all nodes 
  and thus deploy an IPv6-only network, for example.  The use of ICE can 
  be avoided for signaling messages that stay within such managed networks.</t>
 </list></t>

</section>

<section title="Connectivity Checks" anchor="sec-media-checks">
<t>
Once the answerer has generated an answer following the ICE procedures, 
both user agents perform the connectivity checks as specified by ICE. 
These checks help prevent some types of flooding attacks and allow user 
agents to discover new addresses that can be useful in the presence 
of NATs.</t>

</section>

</section>

<section title="Contacting Servers: Interaction of RFC 3263 and RFC 3484"
         anchor="choose-server">

<t>RFC 3263 maps a SIP or SIPS URI to a set of DNS SRV records for the
various servers that can handle the URI.  The Expected Output,
given an Application Unique String (the URI) is one or more SRV
records, sorted by the "priority" field, and further ordered by the
"weight" field in each priority class.</t>

<t><list style="empty">
 <t>The terms "Expected Output" and "Application Unique String", as they
 are to be interpreted in the context of SIP, are defined in Section 8
 of RFC 3263 <xref target="RFC.3263"/>.</t>
</list></t>

<t>To find a particular IP address to send the request to, the client
will eventually perform an A or AAAA DNS lookup on a target.  As
specified in RFC 3263, this target will have been obtained through NAPTR 
and SRV lookups, or if NAPTR and SRV lookup did not return any records, 
the target will simply be the domain name of the Application Unique String.
In order to translate the target to the corresponding set of IP addresses, 
IPv6-only or dual-stack clients MUST use the newer getaddrinfo() name lookup 
function, instead of gethostbyname() <xref target="RFC.4038"/>.  The new 
function implements the Source and Destination Address Selection algorithms 
specified in RFC 3484 <xref target="RFC.3484"/>, which is expected to be
supported by all IPv6 hosts.</t>

<t>The advantage of the additional complexity is that this technique 
will output an ordered list of IPv6/IPv4 destination addresses based on 
the relative merits of the corresponding source/destination pairs.  This 
will guarantee optimal routing.  However, the Source and Destination Selection 
algorithms of RFC3484 are dependent on broad operating system support and
uniform implementation of the application programming interfaces that 
implement this behavior.</t>

<t><list style="empty">
 <t>Developers should carefully consider the issues described by Roy
 et al. <xref target="RFC4943"/> with respect to address 
 resolution delays and address selection rules.  For example, implementations 
 of getaddrinfo() may return address lists containing IPv6 global addresses 
 at the top of the list and IPv4 addresses at the bottom, even when the 
 host is only configured with an IPv6 local scope (e.g., link-local) and an
 IPv4 address.  This will, of course, introduce a delay in completing 
 the connection.</t>
</list></t>

</section> <!-- choose-server -->

<section title="Security Considerations" anchor="sec.security">

<t>This document describes how IPv4 SIP user agents can communicate with
IPv6 user agents (and vice versa).  To do this, it uses additional protocols
(STUN relay usage <xref target="RFC5766"/>, ICE 
<xref target="RFC5245"/>, SDP <xref target="RFC.4566"/>); 
the threat model of each such protocol is included in its respective 
document.  The procedures introduced in this document do not introduce 
the possibility of any new security threats; however, they may make 
hosts more amenable to existing threats.  Consider, for instance, a UAC 
that allocates an IPv4 and an IPv6 address locally and inserts these into 
the SDP. 

 Malicious user agents that may intercept the request can mount 
a denial-of-service attack targeted to the different network interfaces 
of the UAC.  In such a case, the UAC should use mechanisms that protect 
confidentiality and integrity of the messages, such as using the SIPS
URI scheme as described in Section 26.2.2 of RFC3261 
<xref target="RFC.3261"/>, or secure MIME as described in Section 23
of RFC3261 <xref target="RFC.3261"/>.  If HTTP Digest is used as an 
authentication mechanism in SIP, then the UAC should ensure that the 
quality of protection also includes the SDP payload.</t>

</section>

<section title="Acknowledgments" anchor="sec.acks">

<t>The authors would like to thank Mohamed Boucadair, Christine
Fischer, Cullen Jennings, Aki Niemi, Jonathan Rosenberg, and Robert 
Sparks for discussions on the working group list that improved the 
quality of this document.</t>

<t>Additionally, Francois Audet, Mary Barnes, Keith Drage, and  Dale Worley 
provided invaluable comments as part of the working group Last Call 
review process.  Jari Arkko, Lars Eggert, Tobias Gondrom, Suresh Krishnan, 
and Tim Polk conducted an in-depth review of the work as part of the IESG and 
Gen-ART reviews.</t>
</section>

</middle>

<back>
    <references title="Normative References">


      <reference anchor="RFC2119">
       <front>
         <title>Key words for use in RFCs to Indicate Requirement Levels
         </title>
         <author initials="S." surname="Bradner">
         <organization/></author>
         <date month="March" year="1997"/>
       </front>
<seriesInfo name='BCP' value='14' />
       <seriesInfo name="RFC" value="2119"/>
       <format type="TXT" target="http://www.ietf.org/rfc/rfc2119.txt"/>
      </reference>
      <!--  -->
      <reference anchor="RFC.4566">
      <front>
       <title>SDP: Session Description Protocol</title>
       <author initials="M." surname="Handley"/>
       <author initials="V." surname="Jacobson"/>
       <author initials="C." surname="Perkins"/>
       <date month="July" year="2006"/>
      </front>
       <seriesInfo name="RFC" value="4566"/>
       <format type="TXT" target="http://www.ietf.org/rfc/rfc4566.txt"/>
      </reference>
      <!--  -->
      <reference anchor="RFC.3261">
      <front>
        <title>SIP: Session Initiation Protocol</title>
        <author initials='J.' surname='Rosenberg' fullname='J. Rosenberg'>
        <organization/></author>
        <author initials='H.' surname='Schulzrinne' fullname='H. Schulzrinne'>
        <organization /></author>
        <author initials='G.' surname='Camarillo' fullname='G. Camarillo'>
        <organization /></author>
        <author initials='A.' surname='Johnston' fullname='A. Johnston'>
        <organization /></author>
        <author initials='J.' surname='Peterson' fullname='J. Peterson'>
        <organization /></author>
        <author initials='R.' surname='Sparks' fullname='R. Sparks'>
        <organization /></author>
        <author initials='M.' surname='Handley' fullname='M. Handley'>
        <organization /></author>
        <author initials='E.' surname='Schooler' fullname='E. Schooler'>
        <organization /></author>
        <date month='June' year='2002'/>
      </front>
      <seriesInfo name='RFC' value='3261' />
       <format type="TXT" target="http://www.ietf.org/rfc/rfc3261.txt"/>
      </reference>
      <!--  -->
      <reference anchor="RFC.3264">
      <front>
       <title>An Offer/Answer Model with the Session Description Protocol (SDP)
       </title>
       <author initials="J." surname="Rosenberg"><organization/></author>
       <author initials="H." surname="Schulzrinne"><organization/></author>
       <date month='June' year='2002'/>
      </front>
      <seriesInfo name='RFC' value='3264' />
       <format type="TXT" target="http://www.ietf.org/rfc/rfc3264.txt"/>
      </reference>
      <!--  -->

      <reference anchor="RFC.3263">
      <front>
       <title>Session Initiation Protocol (SIP): Locating SIP Servers</title>
       <author initials="J." surname="Rosenberg"><organization/></author>
       <author initials="H." surname="Schulzrinne"><organization/></author>
       <date month="June" year="2002"/>
      </front>
      <seriesInfo name='RFC' value='3263' />
       <format type="TXT" target="http://www.ietf.org/rfc/rfc3263.txt"/>
      </reference>

      <!--  -->

<reference anchor='RFC5766'>

<front>
<title>Traversal Using Relays around NAT (TURN): Relay Extensions to Session Traversal Utilities for NAT (STUN)</title>
<author initials='R.' surname='Mahy' fullname='R. Mahy'>
<organization /></author>
<author initials='P.' surname='Matthews' fullname='P. Matthews'>
<organization /></author>
<author initials='J.' surname='Rosenberg' fullname='J. Rosenberg'>
<organization /></author>
<date year='2010' month='April' />
<abstract>
<t>If a host is located behind a NAT, then in certain situations it can be impossible for that host to communicate directly with other hosts (peers).  In these situations, it is necessary for the host to use the services of an intermediate node that acts as a communication relay.  This specification defines a protocol, called TURN (Traversal Using Relays around NAT), that allows the host to control the operation of the relay and to exchange packets with its peers using the relay.  TURN differs from some other relay control protocols in that it allows a client to communicate with multiple peers using a single relay address. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5766' />
<format type='TXT' octets='172112' target='ftp://ftp.rfc-editor.org/in-notes/rfc5766.txt' />
</reference>

      <!--  -->

<reference anchor='RFC5245'>

<front>
<title>Interactive Connectivity Establishment (ICE): A Protocol for Network Address Translator (NAT) Traversal for Offer/Answer Protocols</title>
<author initials='J.' surname='Rosenberg' fullname='J. Rosenberg'>
<organization /></author>
<date year='2010' month='April' />
<abstract>
<t>This document describes a protocol for Network Address Translator (NAT) traversal for UDP-based multimedia sessions established with the offer/answer model.  This protocol is called Interactive Connectivity Establishment (ICE).  ICE makes use of the Session Traversal Utilities for NAT (STUN) protocol and its extension, Traversal Using Relay NAT (TURN).  ICE can be used by any protocol utilizing the offer/answer model, such as the Session Initiation Protocol (SIP). [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5245' />
<format type='TXT' octets='285120' target='ftp://ftp.rfc-editor.org/in-notes/rfc5245.txt' />
</reference>


 <!-- draft-ietf-behave-turn-ipv6 will be RFC 6156 -->

      <reference anchor="RFC6156">
<front>
<title>Traversal Using Relays around NAT (TURN) Extension for IPv6</title>

<author initials='G' surname='Camarillo' fullname='Gonzalo Camarillo'>
    <organization />
</author>

<author initials='O' surname='Novo' fullname='Oscar Novo'>
    <organization />
</author>

<author initials='S' surname='Perreault' fullname='Simon Perreault'>
    <organization />
</author>

<date month='February' year='2011' />

</front>

<seriesInfo name='RFC' value='6156' />

</reference>

      <!--  -->
      <reference anchor="RFC.3484">
      <front>
       <title>Default Address Selection for Internet Protocol version 6
         (IPv6)</title>
       <author initials="R." surname="Draves"><organization/></author>
       <date month="February" year="2003"/>
      </front>
      <seriesInfo name='RFC' value='3484' />
      </reference>

    </references>

    <references title="Informative References">
      <reference anchor="RFC.3319">
      <front>
       <title>
       Dynamic Host Configuration Protocol (DHCPv6) Options for Session
       Initiation Protocol (SIP) Servers</title>
       <author initials="H." surname="Schulzrinne"><organization/></author>
       <author initials="B." surname="Volz"><organization/></author>
       <date month="July" year="2003"/>
      </front>
      <seriesInfo name='RFC' value='3319' />
      <format type='TXT' target='http://www.rfc-editor.org/rfc/rfc3319.txt' />
      </reference>

      <reference anchor="RFC.3361">
      <front>
       <title>Dynamic Host Configuration Protocol (DHCP-for-IPv4) Option 
       for Session Initiation Protocol (SIP) Servers</title>
       <author initials="H." surname="Schulzrinne"><organization/></author>
       <date month="August" year="2002"/>
      </front>
      <seriesInfo name='RFC' value='3361' />
      <format type='TXT' target='http://www.rfc-editor.org/rfc/rfc3361.txt' />
      </reference>

      <reference anchor="RFC.3725">
      <front>
       <title>Best Current Practices for Third Party Call Control (3pcc)
        in the Session Initiation Protocol (SIP)</title>
      <author initials="J." surname="Rosenberg"/>
      <author initials="J." surname="Peterson"/>
      <author initials="H." surname="Schulzrinne"/>
      <author initials="G." surname="Camarillo"/>
<date month="April" year="2004"/>
      </front>
      <seriesInfo name='BCP' value='85' />
      <seriesInfo name='RFC' value='3725' />
      <format type='TXT' target='http://www.rfc-editor.org/rfc/rfc3725.txt' />
      </reference>

      <reference anchor="RFC.3550">
      <front>
       <title>RTP: A Transport Protocol for Real-Time Applications</title>
       <author initials="H." surname="Schulzrinne"><organization/></author>
       <author initials="S." surname="Casner"><organization/></author>
       <author initials="R." surname="Frederick"><organization/></author>
       <author initials="V." surname="Jacobson"><organization/></author>
       <date month="July" year="2003"/>
      </front>
      <seriesInfo name='STD' value='64' />
      <seriesInfo name='RFC' value='3550' />
      <format type='TXT' target='http://www.rfc-editor.org/rfc/rfc3550.txt' />
      </reference>

      <!--  -->
      <reference anchor="RFC.2543">
      <front>
       <title>SIP: Session Initiation Protocol</title>
       <author initials="M." surname="Handley"><organization/></author>
       <author initials="H." surname="Schulzrinne"><organization/></author>
       <author initials="E." surname="Schooler"><organization/></author>
       <author initials="J." surname="Rosenberg"><organization/></author>
       <date month="March" year="1999"/>
      </front>
      <seriesInfo name='RFC' value='2543' />
      <format type='TXT' target='http://www.rfc-editor.org/rfc/rfc2543.txt' />
      </reference>

     <!--  -->

<reference anchor='RFC5118'>

<front>
<title>Session Initiation Protocol (SIP) Torture Test Messages for Internet Protocol Version 6 (IPv6)</title>
<author initials='V.' surname='Gurbani' fullname='V. Gurbani'>
<organization /></author>
<author initials='C.' surname='Boulton' fullname='C. Boulton'>
<organization /></author>
<author initials='R.' surname='Sparks' fullname='R. Sparks'>
<organization /></author>
<date year='2008' month='February' />
<abstract>
<t>This document provides examples of Session Initiation Protocol (SIP) test messages designed to exercise and "torture" the code of an IPv6-enabled SIP implementation.  This memo provides information for the Internet community.</t></abstract></front>

<seriesInfo name='RFC' value='5118' />
<format type='TXT' octets='31829' target='ftp://ftp.rfc-editor.org/in-notes/rfc5118.txt' />
</reference>

      <!-- -->
      <reference anchor="RFC.4038">
      <front>
       <title>Application Aspects of IPv6 Transition</title>
       <author initials="M-K." surname="Shin"/>
       <author initials="Y-G." surname="Hong"/>
       <author initials="J." surname="Hagino"/>
       <author initials="P." surname="Savola"/>
       <author initials="E.M." surname="Castro"/>
       <date month="March" year="2005"/>
      </front>
      <seriesInfo name='RFC' value='4038' />
      <format type='TXT' target='http://www.rfc-editor.org/rfc/rfc4038.txt' />
      </reference>

      <!-- -->
      <reference anchor="RFC.4213">
      <front>
       <title>Basic Transition Mechanisms for IPv6 Hosts and Routers</title>
       <author initials="E." surname="Nordmark"/>
       <author initials="R." surname="Gilligan"/>
       <date month="October" year="2005"/>
      </front>
      <seriesInfo name='RFC' value='4213' />
      <format type='TXT' target='http://www.rfc-editor.org/rfc/rfc4213.txt' />
      </reference>

      <!-- -->
<reference anchor='RFC5389'>

<front>
<title>Session Traversal Utilities for NAT (STUN)</title>
<author initials='J.' surname='Rosenberg' fullname='J. Rosenberg'>
<organization /></author>
<author initials='R.' surname='Mahy' fullname='R. Mahy'>
<organization /></author>
<author initials='P.' surname='Matthews' fullname='P. Matthews'>
<organization /></author>
<author initials='D.' surname='Wing' fullname='D. Wing'>
<organization /></author>
<date year='2008' month='October' />
<abstract>
<t>Session Traversal Utilities for NAT (STUN) is a protocol that serves as a tool for other protocols in dealing with Network Address Translator (NAT) traversal. It can be used by an endpoint to determine the IP address and port allocated to it by a NAT. It can also be used to check connectivity between two endpoints, and as a keep-alive protocol to maintain NAT bindings. STUN works with many existing NATs, and does not require any special behavior from them.&lt;/t>&lt;t> STUN is not a NAT traversal solution by itself. Rather, it is a tool to be used in the context of a NAT traversal solution. This is an important change from the previous version of this specification (RFC 3489), which presented STUN as a complete solution.&lt;/t>&lt;t> This document obsoletes RFC 3489. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5389' />
<format type='TXT' octets='125650' target='ftp://ftp.rfc-editor.org/in-notes/rfc5389.txt' />
</reference>

      <!-- -->

<reference anchor='RFC4943'>

<front>
<title>IPv6 Neighbor Discovery On-Link Assumption Considered Harmful</title>
<author initials='S.' surname='Roy' fullname='S. Roy'>
<organization /></author>
<author initials='A.' surname='Durand' fullname='A. Durand'>
<organization /></author>
<author initials='J.' surname='Paugh' fullname='J. Paugh'>
<organization /></author>
<date year='2007' month='September' />
<abstract>
<t>This document describes the historical and background information behind the removal of the "on-link assumption" from the conceptual host sending algorithm defined in Neighbor Discovery for IP Version 6 (IPv6).  According to the algorithm as originally described, when a host's default router list is empty, the host assumes that all destinations are on-link.  This is particularly problematic with IPv6-capable nodes that do not have off-link IPv6 connectivity (e.g., no default router).  This document describes how making this assumption causes problems and how these problems outweigh the benefits of this part of the conceptual sending algorithm.  This memo provides information for the Internet community.</t></abstract></front>

<seriesInfo name='RFC' value='4943' />
<format type='TXT' octets='16719' target='ftp://ftp.rfc-editor.org/in-notes/rfc4943.txt' />
</reference>

    </references>

    <section title="Sample IPv4/IPv6 DNS File" anchor="appendix-a">

    <t>A portion of a sample DNS zone file entry is reproduced below
    that has both IPv4 and IPv6 addresses.  This entry corresponds to a proxy
    server for the domain "example.com".  The proxy server supports the
    Transmission Control Protocol (TCP) and User Datagram Protocol (UDP)
    transport for both IPv4 and IPv6 networks.</t>
    <t><figure><artwork><![CDATA[
    ...
    _sip._tcp  SRV  20 0 5060 sip1.example.com
               SRV   0 0 5060 sip2.example.com
    _sip._udp  SRV  20 0 5060 sip1.example.com
               SRV   0 0 5060 sip2.example.com

    sip1 IN A     192.0.2.1
    sip1 IN AAAA  2001:db8::1
    sip2 IN A     192.0.2.2
    sip2 IN AAAA  2001:db8::2
    ...
    ]]></artwork></figure></t>
    </section>

  </back>

</rfc>

<!--  LocalWords:  xref PPR PPA SAA RTA RTR LIR LIA CDATA Jorvas Malki fullname
 -->
<!--  LocalWords:  Karim Athonet Gurbani Vijay Alcatel Rm workgroup IPv RFC RTP
 -->
<!--  LocalWords:  DNS BCP hangText ipv outbound IP RR AAAA RRs DHCPv inbound
 -->
<!--  LocalWords:  co rr ABNF proxy's com UAS lr FQDN codecs SDP UA camarillo
 -->
<!--  LocalWords:  midcom rfc ietf mmusic NATs SRV NAPTR getaddrinfo al IANA
 -->
<!--  LocalWords:  gethostbyname onlinkassumption iana HTTP
 -->
