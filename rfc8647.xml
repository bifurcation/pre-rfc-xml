<?xml version="1.0" encoding="US-ASCII"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc submissionType="IETF" category="std" consensus="yes" number="8647" ipr="trust200902" >

  <front>
    <title abbrev="ACME-CAA">Certification Authority Authorization (CAA)
 Record Extensions for Account URI and Automatic Certificate Management
 Environment (ACME) Method Binding</title>

    <author initials="H." surname="Landau" fullname="Hugo Landau">
      <organization></organization>
      <address>
        <email>hlandau@devever.net</email>
      </address>
    </author>

    <date year="2019" month="August"/>

    <abstract>
<t>The Certification Authority Authorization (CAA) DNS record allows a domain to
communicate an issuance policy to Certification Authorities (CAs) but only allows
a domain to define a policy with CA-level granularity. However, the CAA
specification (RFC 8644) also provides facilities for an extension to admit a
more granular, CA-specific policy. This specification defines two such
parameters: one allowing specific accounts of a CA to be identified by URIs
and one allowing specific methods of domain control validation as defined by
the Automatic Certificate Management Environment (ACME) protocol to be
required.</t>
    </abstract>

  </front>

  <middle>

<section anchor="introduction" title="Introduction">

<t>This specification defines two parameters for the "issue" and "issuewild"
Properties of the Certification Authority Authorization (CAA) DNS resource
record <xref target="RFC8644"/>. The first, "accounturi", allows
authorization conferred by a CAA policy to be restricted to specific accounts
of a Certification Authority (CA), which are identified by URIs. The second, "validationmethods", allows
the set of validation methods supported by a CA to validate domain control to
be limited to a subset of the full set of methods that it supports.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
"SHALL&nbsp;NOT", "SHOULD", "SHOULD&nbsp;NOT", "RECOMMENDED",
"NOT&nbsp;RECOMMENDED", "MAY", and "OPTIONAL" in this document
are to be interpreted as described in BCP&nbsp;14
<xref target="RFC2119"/> <xref target="RFC8174"/> when,
and only when, they appear in all capitals, as shown here.</t>

</section>
<section anchor="extensions-to-the-caa-record-accounturi-parameter"
 title="Extensions to the CAA Record: The &quot;accounturi&quot; Parameter">

<t>This document defines the "accounturi" CAA parameter for the "issue" and
"issuewild" Properties defined by <xref target="RFC8644"/>. The value of this
parameter, if specified, MUST be a URI <xref target="RFC3986"/> identifying a
specific CA account.</t>

<t>"CA account" means an object that is maintained by a specific CA, that may request
the issuance of certificates, and that represents a specific entity or group of
related entities.</t>

<t>The presence of this parameter constrains the Property to which it is attached.
Where a CAA Property has an "accounturi" parameter, a CA MUST only consider
that Property to authorize issuance in the context of a given certificate
issuance request if the CA recognizes the URI specified in the value portion of
that parameter as identifying the account making that request.</t>

<t>A Property without an "accounturi" parameter matches any account. A Property
with an invalid or unrecognized "accounturi" parameter is unsatisfiable. A
Property with multiple "accounturi" parameters is unsatisfiable.</t>

<t>The presence of an "accounturi" parameter does not replace or supersede the
need to validate the domain name specified in an "issue" or "issuewild" record
in the manner described in the CAA
   specification <xref target="RFC8644"/>. CAs MUST still perform such
validation. For example, a CAA "issue" Property that specifies a domain name
belonging to CA A and an "accounturi" parameter identifying an account at CA B
is unsatisfiable.</t>

<section anchor="use-with-acme" title="Use with ACME">

<t>An Automatic Certificate Management Environment (ACME) <xref target="RFC8555"/> account object MAY be identified by setting the
"accounturi" parameter to the URI of the ACME account object.</t>

<t>Implementations of this specification that also implement ACME MUST recognize
such URIs.</t>

</section>
<section anchor="use-without-acme" title="Use without ACME">

<t>The "accounturi" specification provides a general mechanism to identify
entities that may request certificate issuance via URIs. The use of specific
kinds of URIs may be specified in future RFCs, and CAs not implementing ACME MAY
assign and recognize their own URIs arbitrarily.</t>

</section>
</section>
<section anchor="extensions-to-the-caa-record-validationmethods-parameter"
 title="Extensions to the CAA Record: The &quot;validationmethods&quot; Parameter">

<t>This document also defines the "validationmethods" CAA parameter for the "issue" and
"issuewild" Properties. The value of this parameter, if specified, MUST be a
comma-separated string of zero or more validation method labels.</t>

<t>A validation method label identifies a validation method. A validation method
is a particular way in which a CA can validate control over a domain.</t>

<t>The presence of this parameter constrains the Property to which it is attached.
A CA MUST only consider a Property with the "validationmethods" parameter to
authorize issuance where the validation method being used is identified by one
of the validation method labels listed in the comma-separated list.</t>

<t>Each validation method label MUST be either the label of a method defined in
the "ACME Validation Methods" IANA registry
<xref target="RFC8555"/> or a CA&nbhy;specific non-ACME validation
method label as defined below.</t>

<t>Where a CA supports both the "validationmethods" parameter and one or more
non-ACME validation methods, it MUST assign labels to those methods. If
appropriate non-ACME labels are not present in the "ACME Validation Methods" IANA
registry, the CA MUST use labels beginning with the string "ca-", which are
defined to have CA-specific meaning.</t>

<t>The value of the "validationmethods" parameter MUST comply with the following
ABNF <xref target="RFC5234"/>:</t>

<figure><artwork><![CDATA[
   value = [*(label ",") label]
   label = 1*(ALPHA / DIGIT / "-") ]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This specification describes an extension to the CAA record specification,
increasing the granularity at which a CAA policy can be expressed. This allows
the set of entities capable of successfully requesting issuance of certificates
for a given domain to be restricted beyond the set of entities would otherwise
be possible, while still allowing issuance for specific accounts of a CA. This
improves the security of issuance for domains that choose to employ it, when
combined with a CA that implements this specification.</t>

<section anchor="limited-to-cas-processing-caa-records" title="Limited to CAs Processing CAA Records">

<t>All of the security considerations listed in <xref target="RFC8644"/> are inherited by
this document. This specification merely enables a domain with an existing
relationship with a CA to further constrain that CA in its issuance practices,
where that CA implements this specification. In particular, it provides no
additional security above that provided by using the unextended CAA
specification alone as concerns matters relating to any other CA. The capacity
of any other CA to issue certificates for the given domain is completely
unchanged.</t>

<t>As such, a domain that, via CAA records, authorizes only CAs adopting this
specification and that constrains its policy by means of this specification,
remains vulnerable to unauthorized issuance by CAs that do not honor CAA
records or that honor them only on an advisory basis. Where a domain uses
DNSSEC, it also remains vulnerable to CAs that honor CAA records but that do
not validate CAA records by means of a trusted DNSSEC-validating resolver.</t>

</section>
<section anchor="restrictions-ineffective-without-ca-recognition" title="Restrictions Ineffective without CA Recognition">

<t>Because the parameters of "issue" or "issuewild" CAA Properties constitute a
CA-specific namespace, the CA identified by an "issue" or "issuewild" Property
decides what parameters to recognize and their semantics. Accordingly, the CAA
parameters defined in this specification rely on their being recognized by the
CA named by an "issue" or "issuewild" CAA Property and are not an effective
means of control over issuance unless a CA's support for the parameters is
established beforehand.</t>

<t>CAs that implement this specification SHOULD make available documentation
indicating as such, including explicit statements as to which parameters are
supported. Domains configuring CAA records for a CA MUST NOT assume that the
restrictions implied by the "accounturi" and "validationmethods" parameters are
effective in the absence of explicit indication as such from that CA.</t>

<t>CAs SHOULD also document whether they implement DNSSEC validation for DNS
lookups done for validation purposes, as this affects the security of the
"accounturi" and "validationmethods" parameters.</t>

</section>
<section anchor="mandatory-consistency-in-ca-recognition" title="Mandatory Consistency in CA Recognition">

<t>A CA MUST ensure that its support for the "accounturi" and "validationmethods"
parameters is fully consistent for a given domain name that a CA recognizes as
identifying itself in a CAA "issue" or "issuewild" Property. If a CA has
multiple issuance systems (for example, an ACME-based issuance system and a
non-ACME-based issuance system, or two different issuance systems resulting
from a corporate merger), it MUST ensure that all issuance systems recognize
the same parameters.</t>

<t>A CA that is unable to do this MAY still implement the parameters by splitting
the CA into two domain names for the purposes of CAA processing. For example, a
CA "example.com" with an ACME-based issuance system and a non-ACME-based
issuance system could recognize only "acme.example.com" for the former and
"example.com" for the latter, and then implement support for the "accounturi"
and "validationmethods" parameters for "acme.example.com" only.</t>

<t>A CA that is unable to ensure consistent processing of the "accounturi"
parameter or the 
"validationmethods" parameter for a given CA domain name as specifiable in CAA
"issue" or "issuewild" Properties MUST NOT implement support for these
parameters. Failure to do so would result in an implementation of these
parameters that does not provide effective security.</t>

</section>
<section anchor="uri-ambiguity" title="URI Ambiguity">

<t>Suppose that CA A recognizes "a.example.com" as identifying itself and
CA B is a subsidiary of CA A that recognizes both "a.example.com" and "b.example.com" as
identifying itself.</t>

<t>Suppose that both CA A and CA B issue account URIs of the form:</t>

<figure><artwork><![CDATA[
   "urn:example:account-id:1234"
]]></artwork></figure>

<t>If the CA domain name in a CAA record is specified as "a.example.com", then this
could be construed as identifying account number 1234 at CA&nbsp;A or at CA B. These
may be different accounts, creating ambiguity.</t>

<t>Thus, CAs MUST ensure that the URIs they recognize as pertaining to a specific
account of that CA are unique within the scope of all domain names that they
recognize as identifying that CA for the purpose of CAA record validation.</t>

<t>CAs SHOULD satisfy this requirement by using URIs that include an authority
(see Section 3.2 of <xref target="RFC3986"/>):</t>

<figure><artwork><![CDATA[
   "https://a.example.com/account/1234"
]]></artwork></figure>

</section>
<section anchor="authorization-freshness" title="Authorization Freshness">

<t>The CAA specification <xref target="RFC8644"/> governs the act of issuance by a CA. In some cases, a CA
may establish authorization for an account to request certificate issuance for
a specific domain separately from the act of issuance itself. Such authorization
may occur substantially prior to a certificate issuance request. The CAA policy
expressed by a domain may have changed in the meantime, creating the risk that
a CA will issue certificates in a manner inconsistent with the presently
published CAA policy.</t>

<t>CAs SHOULD adopt practices to reduce the risk of such circumstances. Possible
countermeasures include issuing authorizations with very limited validity
periods, such as an hour, or revalidating the CAA policy for a domain at
certificate issuance time.</t>

</section>
<section anchor="use-with-and-without-dnssec" title="Use with and without DNSSEC">

<t>The "domain validation" model of validation commonly used for certificate
issuance cannot ordinarily protect against adversaries who can conduct global
man-in-the-middle attacks against a particular domain. A global
man-in-the-middle attack is an attack that can intercept traffic to or from a
given domain, regardless of the origin or destination of that traffic. Such an
adversary can intercept all validation traffic initiated by a CA and thus
appear to have control of the given domain.</t>

<t>Where a domain is signed using DNSSEC, the authenticity of its DNS data can be
assured, providing that a given CA makes all DNS resolutions via a trusted
DNSSEC-validating resolver. A domain can use this Property to protect itself
from the threat posed by an adversary capable of performing a global
man-in-the-middle attack against that domain.</t>

<t>In order to facilitate this, a CA validation process must either rely solely on
information obtained via DNSSEC or meaningfully bind the other parts of the
validation transaction using material obtained via DNSSEC.</t>

<t>The CAA parameters described in this specification can be used to ensure that
only validation methods meeting these criteria are used. In particular, a
domain secured via DNSSEC SHOULD either:</t>

<t><list style="numbers">
  <t>Use the "accounturi" parameter to ensure that only accounts that it
controls are authorized to obtain certificates, or</t>
  <t>Exclusively use validation methods that rely solely on information
obtained via DNSSEC and use the "validationmethods" parameter to ensure
that only such methods are used.</t>
</list></t>

<t>A CA supporting the "accounturi" parameter or the "validationmethods" parameter MUST perform
CAA validation using a trusted DNSSEC&nbhy;validating resolver.</t>

<t>"Trusted" in this context means that the CA both trusts the resolver itself and
ensures that the communications path between the resolver and the system
performing CAA validation is secure. It is RECOMMENDED that a CA ensure this
by using a DNSSEC-validating resolver running on the same machine as the system
performing CAA validation.</t>

<t>The use of the "accounturi" parameter or the "validationmethods" parameter does not confer
additional security against an attacker capable of performing a
man-in-the-middle attack against all validation attempts made by a given CA
that is authorized by CAA where:</t>

<t><list style="numbers">
  <t>A domain does not secure its nameservers using DNSSEC, or</t>
  <t>That CA does not perform CAA validation using a trusted DNSSEC&nbhy;validating
resolver.</t>
</list></t>

<t>Moreover, the use of the "accounturi" parameter or the "validationmethods" parameter does not
mitigate man-in-the-middle attacks against CAs that do not validate
CAA records or that do not do so using a trusted DNSSEC-validating resolver,
regardless of whether or not those CAs are authorized by CAA; see
<xref target="limited-to-cas-processing-caa-records"/>.</t>

<t>In these cases, the "accounturi" and "validationmethods" parameters still
provide an effective means of administrative control over issuance, except
where control over DNS is subdelegated (see below).</t>

</section>
<section anchor="restrictions-supersedable-by-dns-delegation" title="Restrictions Supersedable by DNS Delegation">

<t>CAA records are located during validation by walking up the DNS hierarchy until
one or more records are found. CAA records are therefore not an effective way
of restricting or controlling issuance for subdomains of a domain, where
control over those subdomains is delegated to another party (such as via DNS
delegation or by providing limited access to manage subdomain DNS records).</t>

</section>
<section anchor="misconfiguration-hazards" title="Misconfiguration Hazards">

<t>Because the "accounturi" and "validationmethods" parameters express restrictive
security policies, misconfiguration of said parameters may result in legitimate
issuance requests being refused.</t>

</section>
<section anchor="revelation-of-account-uris" title="Revelation of Account URIs">

<t>Because CAA records are publicly accessible, the use of the "accounturi"
parameter enables third parties to observe the authorized account URIs for a
domain. This may allow third parties to identify a correlation between domains
if those domains use the same account URIs.</t>

<t>CAs are encouraged to select and process account URIs under the assumption that
untrusted third parties may learn of them.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no IANA actions. As per <xref target="RFC8644"/>, the parameter namespace for the CAA "issue"
and "issuewild" Properties has CA-defined semantics, and the identifiers within
that namespace may be freely and arbitrarily assigned by a CA. This document
merely specifies recommended semantics for parameters of the names "accounturi"
and "validationmethods", which CAs may choose to adopt.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

<?rfc include="reference.RFC.2119"?>
<?rfc include="reference.RFC.3986"?>
<?rfc include="reference.RFC.5234"?>
<?rfc include="reference.RFC.8174"?>
<?rfc include="reference.RFC.8555"?>

<!-- draft-ietf-lamps-rfc6844bis (RFC 8644) -->
<reference anchor='RFC8644' target="https://www.rfc-editor.org/info/rfc8644">
<front>
<title>DNS Certification Authority Authorization (CAA) Resource Record</title>
<author initials='P' surname='Hallam-Baker' fullname='Phillip Hallam-Baker'>
    <organization />
</author>
<author initials='R' surname='Stradling' fullname='Rob Stradling'>
    <organization />
</author>
<author initials='J' surname='Hoffman-Andrews' fullname='Jacob Hoffman-Andrews'>
    <organization />
</author>
<date month='August' year='2019' />
</front>
<seriesInfo name="RFC" value="8644"/>
<seriesInfo name="DOI" value="10.17487/RFC8644"/>
</reference>

    </references>

<section anchor="examples" title="Examples">

<t>The following shows an example DNS zone file fragment that nominates two
account URIs as authorized to issue certificates for the domain "example.com".
Issuance is restricted to the CA "example.net".</t>

<figure><artwork><![CDATA[
example.com. IN CAA 0 issue "example.net; \
  accounturi=https://example.net/account/1234"
example.com. IN CAA 0 issue "example.net; \
  accounturi=https://example.net/account/2345"
]]></artwork></figure>

<t>The following shows a zone file fragment that restricts the ACME methods that
can be used; only ACME methods "dns-01" and "xyz-01" can be used.</t>

<figure><artwork><![CDATA[
example.com. IN CAA 0 issue "example.net; \
  validationmethods=dns-01,xyz-01"
]]></artwork></figure>

<t>The following shows an equivalent way of expressing the same restriction:</t>

<figure><artwork><![CDATA[
example.com. IN CAA 0 issue "example.net; validationmethods=dns-01"
example.com. IN CAA 0 issue "example.net; validationmethods=xyz-01"
]]></artwork></figure>

<t>The following shows a zone file fragment in which one account can be used to
issue with the "dns-01" method and one account can be used to issue with the
"http-01" method.</t>

<figure><artwork><![CDATA[
example.com. IN CAA 0 issue "example.net; \
  accounturi=https://example.net/account/1234; \
  validationmethods=dns-01"
example.com. IN CAA 0 issue "example.net; \
  accounturi=https://example.net/account/2345; \
  validationmethods=http-01"
]]></artwork></figure>

<t>The following shows a zone file fragment in which only ACME method "dns-01" or
a CA-specific method "ca-foo" can be used.</t>

<figure><artwork><![CDATA[
example.com. IN CAA 0 issue "example.net; \
  validationmethods=dns-01,ca-foo"
]]></artwork></figure>

</section>
  </back>

</rfc>
