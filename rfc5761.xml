<?xml version="1.0" encoding="US-ASCII"?>
<?rfc toc="yes"?>
<?rfc tocdepth="3"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="no"?>
<?rfc rfcedstyle="yes"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<!-- [rfced] Please note that after you have approved the document,
post-xml2rfc changes will be made to update the header and
boilerplate as described in RFC 5741.
-->

<rfc category="std" ipr="pre5378Trust200902" updates="3550, 3551" number="5761">

<front>
  <title abbrev="Multiplexing RTP and RTCP"> Multiplexing RTP Data and Control Packets on a Single Port </title>
  <author initials="C.S." surname="Perkins" fullname="Colin Perkins">
    <organization abbrev="University of Glasgow"> University of Glasgow </organization>
    <address>
      <postal>
          <street>  Department of Computing Science </street>
	  <city>    Glasgow                         </city>
	  <code>    G12 8QQ                         </code>
	  <country> UK                              </country>
      </postal>
      <email>csp@csperkins.org</email>
    </address>
  </author>
  <author initials="M." surname="Westerlund" fullname="Magnus Westerlund">
    <organization abbrev="Ericsson"> Ericsson </organization>
    <address>
      <postal>
          <street>  Farogatan 6 </street>
	  <city>    Stockholm       </city>
	  <code>    SE-164 80       </code>
	  <country> Sweden          </country>
      </postal>
      <email>magnus.westerlund@ericsson.com</email>
    </address>
  </author>
  <date  month="April" year="2010" />
  <abstract>
  <t> This memo discusses issues that arise when multiplexing RTP data
      packets and RTP Control Protocol (RTCP) packets on a single UDP
      port. It updates RFC 3550 and RFC 3551 to describe when such multiplexing is
      and is not appropriate, and it explains how the Session Description
      Protocol (SDP) can be used to signal multiplexed sessions. </t>
  </abstract>


</front>
<middle>

<!---------------------------------------------------------------------------->
<section anchor="intro" title="Introduction">

<t> The <xref target="RFC3550">Real-time Transport Protocol (RTP)</xref>
    comprises two components: a data transfer protocol and an associated
    control protocol (RTCP). Historically, RTP and RTCP have been run on
    separate UDP ports.  With increased use of <xref target="RFC3022">Network
    Address Port Translation (NAPT)</xref>, this has become problematic, since 
    maintaining multiple NAT bindings can be costly. It also complicates 
    firewall administration, since multiple ports must be opened to allow 
    RTP traffic.  This memo discusses how the RTP and RTCP flows for a
    single media type can be run on a single port, to ease NAT traversal
    and simplify firewall administration,
    and considers when such multiplexing is appropriate.  The multiplexing
    of several types of media (e.g., audio and video) onto a single port is
    not considered here (but see Section 5.2 of <xref target="RFC3550"/>).
    </t>

<t> This memo is structured as follows: in <xref target="background"/> we
    discuss the design choices that led to the use of separate ports and
    comment on the applicability of those choices to current network
    environments. We discuss terminology in
    <xref target="terminology"/> and how to distinguish multiplexed
    packets in <xref target="distinguish"/>; we then specify when and
    how RTP and RTCP should be multiplexed, and
    how to signal multiplexed sessions, in <xref target="mux"/>. Quality of
    service and bandwidth issues are discussed in <xref target="qos"/>. We
    conclude with security considerations in
    <xref target="security"/> and IANA considerations in
    <xref target="iana"/>.

    </t>

<t> This memo updates Section 11 of <xref target="RFC3550"/>.</t>

</section>
<!---------------------------------------------------------------------------->
<section anchor="background" title="Background">

<t> An RTP session comprises data packets and periodic control (RTCP)
    packets. RTCP packets are assumed to use "the same distribution
    mechanism as the data packets", and the "underlying protocol MUST
    provide multiplexing of the data and control packets, for example 
    using separate port numbers with UDP" <xref target="RFC3550"/>. 
    Multiplexing was deferred to the underlying transport protocol,
    rather than being provided within RTP, for the following reasons: </t>

<t> <list style="numbers">
    <t> Simplicity: an RTP implementation is simplified by moving the RTP
        and RTCP demultiplexing to the transport layer, since it need not
	concern itself with the separation of data and control packets. 
	This allows the implementation to be structured in a very natural
	fashion, with a clean separation of data and control planes.</t>

    <t> Efficiency: following the principle of integrated layer processing
        <xref target="ALF"/>, an implementation will be more efficient when
	demultiplexing happens in a single place (e.g., according to UDP port)
	than when split across multiple layers of the stack (e.g., according
	to UDP port and then according to packet type). </t>

    <t> To enable third-party monitors: while unicast voice-over-IP has
	always been considered, RTP was also designed to support loosely
	coupled multicast conferences <xref target="IETF-Audiocast"/> and
	very large-scale multicast streaming media applications (such as
	the so-called triple-play IP television (IPTV) service).

        Accordingly, the design
	of RTP allows the RTCP packets to be multicast using a separate IP
	multicast group and UDP port to the data packets. This not only
	allows participants in a session to get reception-quality feedback
	but also enables deployment of third-party monitors, which listen to
	reception quality without access to the data packets.  This was
	intended to provide manageability of multicast sessions, without
	compromising privacy. </t>

    </list></t>

<t> While these design choices are appropriate for many uses of RTP, they
    are problematic in some cases. There are many RTP deployments that
    don't use IP multicast, and with the increased use of Network Address
    Translation (NAT) the simplicity of multiplexing at the transport layer
    has become a liability, since it requires complex signalling to open
    multiple NAT pinholes. In environments such as these, it is desirable
    to provide an alternative to demultiplexing RTP and RTCP using separate
    UDP ports, instead using only a single UDP port and demultiplexing
    within the application. </t>

<t> This memo provides such an alternative by multiplexing RTP and RTCP
    packets on a single UDP port, distinguished by the RTP payload type
    and RTCP packet type values.  This pushes some additional work onto 
    the RTP implementation, in exchange for simplified NAT traversal. </t>

</section>
<!---------------------------------------------------------------------------->
<section anchor="terminology" title="Terminology">

<t> The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this
    document are to be interpreted as described in RFC 2119 <xref target="RFC2119">
    </xref>.</t>

</section>
<!---------------------------------------------------------------------------->
<section anchor="distinguish" title="Distinguishable RTP and RTCP Packets">

<t> When RTP and RTCP packets are multiplexed onto a single port, the RTCP
    packet type field occupies the same position in the packet as the
    combination of the RTP marker (M) bit and the RTP payload type (PT).
    This field can be used to distinguish RTP and RTCP packets when two
    restrictions are observed: 1) the RTP payload type values used are
    distinct from the RTCP packet types used; and 2) for each RTP payload
    type (PT), PT+128 is distinct from the RTCP packet types used.  The
    first constraint precludes a direct conflict between RTP payload type
    and RTCP packet type; the second constraint precludes a conflict
    between an RTP data packet with the marker bit set and an RTCP packet.
    </t>

<t> The following conflicts between RTP and RTCP packet types are known:

    <list style="symbols">
    <t> RTP payload types 64-65 conflict with the (obsolete) RTCP FIR 
	and NACK packets defined in the original "RTP Payload Format for
	H.261 Video Streams" <xref target="RFC2032"/> (which was 
	obsoleted by <xref target="RFC4587"/>). </t>



    <t> RTP payload types 72-76 conflict with the RTCP SR, RR, SDES, 
        BYE, and APP packets defined in the RTP specification <xref
	target="RFC3550"/>. </t>

    <t> RTP payload types 77-78 conflict with the RTCP RTPFB and PSFB 
        packets defined in the RTP/AVPF profile <xref target="RFC4585"/>.
	</t>

    <t> RTP payload type 79 conflicts with <xref target="RFC3611">RTCP
        Extended Report (XR)</xref> packets. </t>

    <t> RTP payload type 80 conflicts with Receiver Summary Information 
        (RSI) packets defined in <xref target="RFC5760">
	"RTCP Extensions for Single-Source Multicast Sessions with Unicast 
	Feedback"</xref>. </t>

    </list></t>

<t> New RTCP packet types may be registered in the future and will further
    reduce the RTP payload types that are available when multiplexing RTP
    and RTCP onto a single port.  To allow this multiplexing, future RTCP
    packet type assignments SHOULD be made after the current assignments
    in the range 209-223, then in the range 194-199, so that only the RTP
    payload types in the range 64-95 are blocked.  RTCP packet types in 
    the ranges 1-191 and 224-254 SHOULD only be used when other values
    have been exhausted.  </t>

<t> Given these constraints, it is RECOMMENDED to follow the guidelines in
    the RTP/AVP profile <xref target="RFC3551"/> for the choice of RTP
    payload type values, with the additional restriction that payload type
    values in the range 64-95 MUST NOT be used.  Specifically, dynamic RTP
    payload types SHOULD be chosen in the range 96-127 where possible.
    Values below 64 MAY be used if that is insufficient, in which case it
    is RECOMMENDED that payload type numbers that are not statically
    assigned by <xref target="RFC3551"/> be used first. </t>

<t> <list style="empty">
    <t> Note: Since Section 6.1 of <xref target="RFC3550"/> specifies 
    that all RTCP packets MUST be sent as compound packets beginning 
    with a Sender Report (SR) or a Receiver Report (RR) packet, one 
    might wonder why RTP payload types other than 72 and 73 are 
    prohibited when multiplexing RTP and RTCP.  This is done to support
    <xref target="RFC5506"/>, which allows the use of non-compound RTCP 
    packets in some circumstances. </t> 

</list></t>

</section>
<!---------------------------------------------------------------------------->
<section anchor="mux" title="Multiplexing RTP and RTCP on a Single Port">

<t> The procedures for multiplexing RTP and RTCP on a single port depend on
    whether the session is a unicast session or a multicast session. For
    multicast sessions, the procedures also depend on whether Any Source
    Multicast (ASM) or Source-Specific Multicast (SSM) is to be
    used. </t>

<!--  --  --  --  --  --  --  --  --  -- --  --  --  --  --  --  --  --  -- -->
<section anchor="unicast-mux" title="Unicast Sessions">

<t> It is acceptable to multiplex RTP and RTCP packets on a single UDP port
    to ease NAT traversal for unicast sessions, provided the RTP payload
    types used in the session are chosen according to the rules in <xref
    target="distinguish"/>, and provided that multiplexing is signalled in
    advance.  The following sections describe how such multiplexed sessions
    can be signalled using the Session Initiation Protocol (SIP) with the
    offer/answer model. </t>

<!--   --    --    --    --    --    ----    --    --    --    --    --    -->
<section title="SDP Signalling">

<t> When the Session Description Protocol (SDP) <xref target="RFC4566"/> is 
    used to negotiate RTP sessions following the <xref target="RFC3264">
    offer/answer model</xref>, the "a=rtcp-mux" attribute (see <xref 
    target="iana"/>) indicates the desire to multiplex RTP and RTCP onto a
    single port.  The initial SDP offer MUST include this attribute at the
    media level to request multiplexing of RTP and RTCP on a single port. 
    For example: </t>
 
<figure>
<artwork>
    v=0
    o=csp 1153134164 1153134164 IN IP6 2001:DB8::211:24ff:fea3:7a2e
    s=-
    c=IN IP6 2001:DB8::211:24ff:fea3:7a2e
    t=1153134164 1153137764
    m=audio 49170 RTP/AVP 97
    a=rtpmap:97 iLBC/8000
    a=rtcp-mux
</artwork>
</figure>

<t> This offer denotes a unicast voice-over-IP session using the RTP/AVP
    profile with iLBC coding. The answerer is requested to send both RTP
    and RTCP to port 49170 on IPv6 address 2001:DB8::211:24ff:fea3:7a2e.
    </t>

<t> If the answerer wishes to multiplex RTP and RTCP onto a single port, it
    MUST include a media-level "a=rtcp-mux" attribute in the answer.  The RTP payload
    types used in the answer MUST conform to the rules in 
    <xref target="distinguish"/>. </t>

<t> If the answer does not contain an "a=rtcp-mux" attribute, the offerer 
    MUST NOT multiplex RTP and RTCP packets on a single port. Instead,
    it should send and receive RTCP on a port allocated according to the
    usual port-selection rules (either the port pair, or a signalled port
    if the "a=rtcp:" attribute <xref target="RFC3605"/> is also included).
    This will occur when talking to a peer that does not understand the
    "a=rtcp-mux" attribute.  </t>

<t> When SDP is used in a declarative manner, the presence of an
    "a=rtcp-mux" attribute signals that the sender will multiplex RTP and
    RTCP on the same port.  The receiver MUST be prepared to receive RTCP
    packets on the RTP port, and any resource reservation needs to be made
    including the RTCP bandwidth. </t>

</section>
<!--   --    --    --    --    --    ----    --    --    --    --    --    -->
<section title="Interactions with SIP Forking">

<t> When using SIP with a forking proxy, it is possible that an INVITE
    request may result in multiple 200 (OK) responses.  If RTP and RTCP
    multiplexing is offered in that INVITE, it is important to be aware
    that some answerers may support multiplexed RTP and RTCP, some not.
    This will require the offerer to listen for RTCP on both the RTP port 
    and the usual RTCP port, and to send RTCP on both ports, unless 
    branches of the call that support multiplexing are re-negotiated 
    to use separate RTP and RTCP ports. </t>

</section>
<!--   --    --    --    --    --    ----    --    --    --    --    --    -->
<section title="Interactions with ICE">

<t> It is common to use the Interactive Connectivity Establishment (ICE) 
    <xref target="RFC5245"/> methodology to establish RTP
    sessions in the presence of Network Address Translation (NAT) devices
    or other middleboxes.  If RTP and RTCP are sent on separate ports, the
    RTP media stream comprises two components in ICE (one for RTP and one
    for RTCP), with connectivity checks being performed for each component.
    If RTP and RTCP are to be multiplexed on the same port some of these
    connectivity checks can be avoided, reducing the overhead of ICE. </t>

<t> If it is desired to use both ICE and multiplexed RTP and RTCP, the
    initial offer MUST contain an "a=rtcp-mux" attribute to indicate that
    RTP and RTCP multiplexing is desired and MUST contain "a=candidate:"
    lines for both RTP and RTCP along with an "a=rtcp:" line indicating
    a fallback port for RTCP in the case that the answerer does not support
    RTP and RTCP multiplexing.  This MUST be done for each media where RTP
    and RTCP multiplexing is desired. </t>

<t> If the answerer wishes to multiplex RTP and RTCP on a single port, it
    MUST generate an answer containing an "a=rtcp-mux" attribute and a
    single "a=candidate:" line corresponding to the RTP port (i.e., there
    is no candidate for RTCP) for each media where it is desired to use
    RTP and RTCP multiplexing.  The answerer then performs connectivity
    checks for that media as if the offer had contained only a single
    candidate for RTP.  If the answerer does not want to multiplex RTP
    and RTCP on a single port, it MUST NOT include the "a=rtcp-mux" 
    attribute in its answer and MUST perform connectivity checks for
    all offered candidates in the usual manner. </t>

<t> On receipt of the answer, the offerer looks for the presence of the
    "a=rtcp-mux" line for each media where multiplexing was offered. If
    this is present, then connectivity checks proceed as if only a single
    candidate (for RTP) were offered, and multiplexing is used once the
    session is established.  If the "a=rtcp-mux" line is not present, the
    session proceeds with connectivity checks using both RTP and RTCP
    candidates, eventually leading to a session being established with RTP
    and RTCP on separate ports (as signalled by the "a=rtcp:" attribute).
    </t>

</section>
<!--   --    --    --    --    --    ----    --    --    --    --    --    -->
<section anchor="hc" title="Interactions with Header Compression">

<t> Multiplexing RTP and RTCP packets onto a single port may negatively
    impact header compression schemes, for example, <xref target="RFC2508">
    Compressed RTP (CRTP)</xref> and <xref target="RFC3095">  
    RObust Header Compression (ROHC) </xref> <xref target="RFC4995"/>. 
    Header compression exploits patterns of
    change in the RTP headers of consecutive packets to send an indication
    that the packet changed in the expected way, rather than sending the
    complete header each time. This can lead to significant bandwidth
    savings if flows have uniform behaviour.  </t>

<t> The presence of RTCP packets multiplexed with RTP data packets can
    disrupt the patterns of change between headers and has the potential
    to significantly reduce header compression efficiency. The extent of
    this disruption depends on the header compression algorithm used and
    on the way flows are classified. A well-designed classifier should be
    able to separate RTP and RTCP multiplexed on the same port into
    different compression contexts, using the payload type field, such that
    the effect on the compression ratio is small. A classifier that assigns
    compression contexts based only on the IP addresses and UDP ports will
    not perform well.  It is expected that implementations of header
    compression will need to be updated to efficiently support RTP and RTCP
    multiplexed on the same port. </t>

<t> This effect of multiplexing RTP and RTCP on header compression may be
    especially significant in those environments, such as some wireless
    telephony systems, that rely on the efficiency of header compression
    to match the media to a limited-capacity channel.  The implications of
    multiplexing RTP and RTCP should be carefully considered before use in
    such environments. </t>

</section>
</section>
<!--  --  --  --  --  --  --  --  --  -- --  --  --  --  --  --  --  --  -- -->
<section anchor="asm-mux" title="Any Source Multicast Sessions">

<t> The problem of NAT traversal is less severe for Any Source Multicast
    (ASM) RTP sessions than for unicast RTP sessions, and the benefit of
    using separate ports for RTP and RTCP is greater due to the ability 
    to support third-party RTCP-only monitors. Accordingly, RTP and RTCP
    packets SHOULD NOT be multiplexed onto a single port when using ASM
    RTP sessions and SHOULD instead use separate ports and
    multicast groups. </t>

</section>
<!--  --  --  --  --  --  --  --  --  -- --  --  --  --  --  --  --  --  -- -->
<section anchor="ssm-mux" title="Source-Specific Multicast Sessions">

<t> RTP sessions running over Source-Specific Multicast (SSM) send RTCP
    packets from the source to receivers via the multicast channel, but use
    a separate unicast feedback mechanism <xref target="RFC5760"/>
    to send RTCP from the receivers back to the source, with the source either 
    reflecting the RTCP packets to the group or sending aggregate summary 
    reports. </t>

<t> Following the terminology of <xref target="RFC5760"/>, 
    we identify three RTP/RTCP flows in an SSM session: </t>

<t> <list style="numbers">
    <t> RTP and RTCP flows between media sender and distribution source. 
	In many scenarios, the media sender and distribution source are
	co-located, so multiplexing is not a concern. If the media sender
	and distribution source are connected by a unicast connection,
	the rules in <xref target="unicast-mux"/> of this memo apply to
	that connection. If the media sender and distribution source are
	connected by an Any Source Multicast connection, the rules in 
	<xref target="asm-mux"/> apply to that connection. If the media
	sender and distribution source are connected by a Source-Specific
	Multicast connection, the RTP and RTCP packets MAY be multiplexed
	on a single port, provided this is signalled (using "a=rtcp-mux"
	if using SDP). </t>

    <t> RTP and RTCP sent from the distribution source to the receivers. 
	The distribution source MAY multiplex RTP and RTCP onto a single
	port to ease NAT traversal issues on the forward SSM path, although
	doing so may hinder third-party monitoring devices if the session
	uses the simple feedback model.  When using SDP, the multiplexing
	SHOULD be signalled using the "a=rtcp-mux" attribute.  </t>

    <t> RTCP sent from receivers to distribution source. This is an
    RTCP-only path, so multiplexing is not a concern. </t>

    </list></t>

<t> Multiplexing RTP and RTCP packets on a single port in an SSM session
    has the potential for interactions with header compression described
    in <xref target="hc"/>. </t>

</section>
</section>
<!---------------------------------------------------------------------------->
<section anchor="qos" title="Multiplexing, Bandwidth, and Quality of Service">

<t> Multiplexing RTP and RTCP has implications on the use of the Quality of
    Service (QoS) mechanism that handles flow that are determined by a
    three or five tuple (protocol, port, and address for source and/or
    destination). In these cases, the RTCP flow will be merged with the 
    RTP flow when multiplexing them together. Thus, the RTCP bandwidth
    requirement needs to be considered when doing QoS reservations for 
    the combined RTP and RTCP flow. However, from an RTCP perspective it is
    beneficial to receive the same treatment of RTCP packets as for RTP as
    it provides more accurate statistics for the measurements performed by
    RTCP. </t>

<t> The bandwidth required for a multiplexed stream comprises the session
    bandwidth of the RTP stream plus the bandwidth used by RTCP.  In the
    usual case, the RTP session bandwidth is signalled in the SDP "b=AS:"
    (or "b=TIAS:" <xref target="RFC3890"/>) line, and the RTCP traffic is
    limited to 5% of this value. Any QoS reservation SHOULD therefore be
    made for 105% of the "b=AS:" value.  If a non-standard RTCP bandwidth
    fraction is used, signalled by the SDP "b=RR:" and/or "b=RS:" lines
    <xref target="RFC3556"/>, then any QoS reservation SHOULD be made for
    bandwidth equal to (AS + RS + RR), taking the RS and RR values from the
    SDP answer. </t>

</section>
<!---------------------------------------------------------------------------->
<section anchor="security" title="Security Considerations">

<t> The usage of multiplexing RTP and RTCP is not believed to introduce
    any new security considerations.  Known major issues are the integrity
    and authentication of the signalling used to set up the
    multiplexing as well as the integrity, authentication, and
    confidentiality of the actual RTP and RTCP traffic.  The security
    considerations in the <xref target="RFC3550">RTP
    specification</xref> and any applicable RTP profile (e.g.,
    <xref target="RFC3551"/>) and payload format(s) apply.
    </t>

<t> If the <xref target="RFC3711">Secure Real-time Transport Protocol
    (SRTP) </xref> is to be used in conjunction with multiplexed RTP and
    RTCP, then multiplexing MUST be done below the SRTP layer. The sender
    generates SRTP and SRTCP packets in the usual manner, based on their
    separate cryptographic contexts, and multiplexes them onto a single
    port immediately before transmission.  At the receiver, the
    cryptographic context is derived from the synchronization source
    (SSRC), destination network address, and destination transport
    port number in the usual manner, augmented using the RTP payload
    type and RTCP packet type to demultiplex 
    SRTP and SRTCP according to the rules in <xref target="distinguish"/> of 
    this memo.  After the SRTP and SRTCP packets have been demultiplexed, 
    cryptographic processing happens in the usual manner. </t>

</section>
<!---------------------------------------------------------------------------->
<section anchor="iana" title="IANA Considerations">

<t> Following the guidelines in <xref target="RFC4566"/>, the IANA 
    has registered one new SDP attribute: 

    <list style="symbols">
    <t> Contact name/email: authors of RFC 5761 </t>
    <t> Attribute name:     rtcp-mux </t>
    <t> Long-form attribute name: RTP and RTCP multiplexed on one port</t>
    <t> Type of attribute:  media level </t>
    <t> Subject to charset: no </t>
    </list></t>

<t> This attribute is used to signal that RTP and RTCP traffic should be
    multiplexed on a single port (see <xref target="mux"/> of this memo).
    It is a property attribute, which does not take a value. </t>

<t> The rules for assignment of RTP RTCP Control Packet Types in the RTP
    Parameters registry are updated as follows.  When assigning RTP RTCP
    Control Packet types, IANA is requested to assign unused values from
    the range 200-223 where possible.  If that range is fully occupied,
    values from the range 194-199 may be used, and then values from the
    ranges 1-191 and 224-254. This improves header validity checking of
    RTCP packets compared to RTP packets or other unrelated packets. The
    values 0 and 255 are avoided for improved validity checking relative to
    random packets since all-zeros and all-ones are common values. </t>

</section>
<!---------------------------------------------------------------------------->
<section title="Acknowledgements">

<t> We wish to thank Steve Casner, Joerg Ott, Christer Holmberg, Gunnar
    Hellstrom, Randell Jesup, Hadriel Kaplan, Harikishan Desineni, Stephan 
    Wenger, Jonathan Rosenberg, Roni Even, Ingemar Johansson, Dave Singer, 
    Kevin Johns, and David Black for their comments on this memo. This work 
    was supported in part by the UK Engineering and Physical Sciences
    Research Council.  </t>

</section>
</middle>
<!---------------------------------------------------------------------------->
<back>
<references title="Normative References">
<?rfc include="reference.RFC.2032.xml"?>

<?rfc include="reference.RFC.2119.xml"?>
<?rfc include="reference.RFC.3264.xml"?>
<?rfc include="reference.RFC.3550.xml"?>
<?rfc include="reference.RFC.3551.xml"?>
<?rfc include="reference.RFC.3556.xml"?>
<?rfc include="reference.RFC.3605.xml"?>
<?rfc include="reference.RFC.3611.xml"?>
<?rfc include="reference.RFC.3711.xml"?>
<?rfc include="reference.RFC.3890.xml"?>
<?rfc include="reference.RFC.4585.xml"?>
<?rfc include="reference.RFC.4566.xml"?>


<reference anchor='RFC5760'>
<front>
<title>RTP Control Protocol (RTCP) Extensions for Single-Source Multicast Sessions with Unicast Feedback</title>

<author initials='J' surname='Chesterfield' fullname='Julian Chesterfield'>
    <organization />
</author>
<author initials='J' surname='Ott' fullname='Joerg Ott'>
    <organization />
</author>
<author initials='E' surname='Schooler' fullname='Eve Schooler'>
    <organization />
</author>

<date month="February" year="2010" />

</front>

<seriesInfo name='RFC' value='5760' />
</reference>


</references>

<references title="Informative References">


<reference anchor='ALF'>

<front>
<title>Architectural Considerations for a New Generation of Protocols</title>
<author initials='D. ' surname='Clark' fullname='D. Clark'>
<organization /></author>
<author initials='D.' surname='Tennenhouse' fullname='D. Tennenhouse'>
<organization /></author>
<date year='1990' month='September' /></front>

<seriesInfo name='Proceedings of ACM SIGCOMM' value='1990' />
</reference>


<reference anchor='IETF-Audiocast'>

<front>
<title>First IETF Internet Audiocast</title>
<author initials='S. ' surname='Casner' fullname='S. Casner'>
<organization /></author>
<author initials='S.' surname='Deering' fullname='S. Deering'>
<organization /></author>
<date year='1992' month='July' /></front>

<seriesInfo name='ACM SIGCOMM Computer Communication Review,' value='Volume 22, Number 3' />
</reference>

<!-- [rfced] The informative reference draft-ietf-mmusic-ice will be
 RFC 5245 (soon to be in AUTH48 state).  Do you want to wait for it to
 be published in order to reference it by RFC number (as shown), or
 would you rather move forward with it as "Work in Progress".
 
 Magnus: Yes, please wait for ICE to be published.
 
 -->

<reference anchor='RFC5245'>
<front>
<title>Interactive Connectivity Establishment (ICE): A Protocol for Network Address Translator (NAT) Traversal for Offer/Answer Protocols</title>

<author initials='J' surname='Rosenberg' fullname='Jonathan Rosenberg'>
    <organization />
</author>

<date month='April' year='2010' />

</front>

<seriesInfo name='RFC' value='5245' />

</reference>




<?rfc include="reference.RFC.2508.xml"?>
<?rfc include="reference.RFC.3022.xml"?>
<?rfc include="reference.RFC.3095.xml"?>
<?rfc include="reference.RFC.4587.xml"?>
<?rfc include="reference.RFC.4995.xml"?>
<?rfc include="reference.RFC.5506.xml"?>

</references>

</back>
</rfc>

