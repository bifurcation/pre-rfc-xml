<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2205 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2205.xml">
<!ENTITY RFC2961 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2961.xml">
<!ENTITY RFC3209 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3209.xml">
<!ENTITY RFC4558 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4558.xml">
<!ENTITY RFC5063 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5063.xml">
<!ENTITY RFC5439 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5439.xml">
<!ENTITY RFC5920 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5920.xml">
<!ENTITY RFC8174 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8174.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>


<rfc number="8370" category="std" submissionType="IETF" consensus="yes"
  ipr="trust200902">

 <front>
   <title abbrev="RSVP-TE Scaling - Techniques">Techniques to Improve the Scalability of RSVP-TE Deployments
   </title>

   <author fullname="Vishnu Pavan Beeram" initials="V.P.B" role="editor"
           surname="Beeram">
     <organization>Juniper Networks</organization>

     <address>
       <email>vbeeram@juniper.net</email>
     </address>
   </author>

   <author fullname="Ina Minei" initials="I.M"
           surname="Minei">
     <organization>Google, Inc</organization>

     <address>
       <email>inaminei@google.com</email>
     </address>
   </author>

   <author fullname="Rob Shakir" initials="R.S"
           surname="Shakir">
     <organization>Google, Inc</organization>

     <address>
       <email>rjs@rob.sh</email>
     </address>
   </author>

   <author fullname="Dante Pacella" initials="D.P"
           surname="Pacella">
     <organization>Verizon</organization>

     <address>
       <email>dante.j.pacella@verizon.com</email>
     </address>
   </author>

   <author fullname="Tarek Saad" initials="T.S"
           surname="Saad">
     <organization>Cisco Systems</organization>

     <address>
       <email>tsaad@cisco.com</email>
     </address>
   </author>

   <date month="May" year="2018" />

   <area>Routing</area>

   <workgroup>TEAS Working Group</workgroup>

   <keyword>RSVP-TE Scaling, RI-RSVP, Per-Peer Flow Control</keyword>

   <abstract>
<t>
Networks that utilize RSVP-TE LSPs are encountering implementations that 
have a limited ability to support the growth in the number of LSPs
deployed.
</t>

   <t>This document defines two techniques, Refresh-Interval Independent
   RSVP (RI-RSVP) and Per-Peer Flow Control, that reduce the number of
   processing cycles required to maintain RSVP-TE LSP state in Label Switching
   Routers (LSRs) and hence allow implementations to support larger scale
   deployments. </t>  
   
   </abstract>

 </front>

 <middle>
   <section title="Introduction">

   <t>Networks that utilize RSVP-TE <xref target="RFC3209"/> LSPs 
are encountering implementations that have a limited ability to support the
growth in the number of LSPs deployed.
   </t>
   
   <t>The set of RSVP Refresh Overhead Reduction procedures <xref target="RFC2961"/> 
   serves as a powerful toolkit for RSVP-TE implementations to help 
   cover a majority of the concerns about soft-state scaling. However, 
   even with these tools in the toolkit, analysis of existing 
   implementations <xref target="RFC5439"/> indicates that the processing required 
   beyond a certain scale may still cause significant disruption to a Label
   Switching Router (LSR). </t> 

   <t>This document builds on existing scaling work and analysis 
   and defines protocol extensions to help RSVP-TE deployments push the envelope 
   further on scaling by increasing the threshold above which an LSR 
   struggles to achieve sufficient processing to maintain LSP state. </t>  

   <t> This document defines two techniques, Refresh-Interval 
   Independent RSVP (RI-RSVP) and Per-Peer Flow Control, that cut down the number of
   processing cycles required to maintain LSP state. RI-RSVP helps completely eliminate
   RSVP's reliance on refreshes and refresh timeouts, while Per-Peer 
   Flow Control enables a busy RSVP speaker to apply back pressure to 
   its peer(s). This document defines a unique RSVP Capability <xref
   target="RFC5063"/> for each technique (support for the CAPABILITY object is a
   prerequisite for implementing these techniques).  
   Note that the Per-Peer Flow-Control technique requires the RI-RSVP
   technique as a prerequisite. In order to reap maximum scaling benefits, it is 
   strongly recommended that implementations support both techniques and have
   them enabled by default. Both techniques are fully
   backward compatible and can be deployed incrementally.</t>

      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
      "MAY", and "OPTIONAL" in this document are to be interpreted as
      described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
      when, and only when, they 
      appear in all capitals, as shown here. 
      </t>

   </section>

   <section title="Required Support for RFC 2961" anchor="prereq">
   
   <t>The techniques defined in Sections <xref target="ri_rsvp_cap"
   format="counter"/> and <xref target="pp_flow_ctrl" format="counter"/>
   are based on proposals made in <xref target="RFC2961"/>. Implementations of
   these techniques need to support the RSVP messages and procedures
   defined in <xref target="RFC2961"/> with some minor modifications and alterations to
   recommended time intervals and iteration counts (see <xref
   target="appendixA"/> for the set of recommended defaults). </t> 
   
   <section title="Required Functionality from RFC 2961" anchor="rfc_prereq">

   <t>An implementation that supports the techniques discussed in Sections
   <xref target="ri_rsvp_cap" format="counter"/> and <xref
   target="pp_flow_ctrl" format="counter"/> must support
   the functionality described in <xref target="RFC2961"/> as follows:
   
   <list style="symbols">
   <t>It MUST indicate support for RSVP Refresh Overhead Reduction
      extensions (as specified in Section 2 of <xref target="RFC2961"/>).</t>

   <t>It MUST support receipt of any RSVP Refresh Overhead Reduction
      message as defined in <xref target="RFC2961"/>.</t>

   <t>It MUST initiate all RSVP Refresh Overhead Reduction mechanisms as
      defined in <xref target="RFC2961"/> (including the SRefresh message) with the
      default behavior being to initiate the mechanisms; however, a
      configuration override should be offered.
</t>

   <t>It MUST support reliable delivery of Path/Resv and the corresponding
      Tear/Err messages (as specified in Section 4 of <xref target="RFC2961"/>).</t>

   <t>It MUST support retransmission of all unacknowledged RSVP-TE messages using
      exponential backoff (as specified in Section 6 of <xref target="RFC2961"/>).</t>
   </list></t>

   </section>

   <section title="Making Acknowledgements Mandatory">

   <t>The reliable message delivery mechanism specified in <xref target="RFC2961"/> 
   states that "Nodes receiving a non-out of order [sic] message containing a 
   MESSAGE_ID object with the ACK_Desired flag set, SHOULD respond with 
   a MESSAGE_ID_ACK object."</t>

   <t>In an implementation that supports the techniques
   discussed in Sections <xref target="ri_rsvp_cap" format="counter"/> and <xref
   target="pp_flow_ctrl" format="counter"/>, nodes receiving a non-out-of-order message containing a MESSAGE_ID object with the ACK_Desired 
   flag set MUST respond with a MESSAGE_ID_ACK object. This MESSAGE_ID_ACK
   object can be packed with other MESSAGE_ID_ACK or MESSAGE_ID_NACK
   objects and sent in an Ack message (or piggybacked in any other RSVP
   message). This improvement to the predictability of the system in terms
   of reliable message delivery is key for being able to take any action
   based on a non-receipt of an ACK. </t>

   </section>
   </section>

   <section title="Refresh-Interval Independent RSVP (RI-RSVP)" anchor="ri_rsvp_cap">
   
   <t>The RSVP protocol relies on periodic refreshes for state 
   synchronization between RSVP neighbors and recovery from lost 
   RSVP messages. It relies on a refresh timeout for stale-state cleanup. 
   The primary motivation behind introducing the notion of Refresh-Interval Independent RSVP (RI-RSVP) is to completely eliminate 
   RSVP's reliance on refreshes and refresh timeouts. This is done by 
   simply increasing the refresh interval to a fairly large value. 
   <xref target="RFC2961" /> and <xref target="RFC5439"/> talk about increasing the value of the 
   refresh interval to provide linear improvement of transmission 
   overhead, but they also point out the degree of functionality that is 
   lost by doing so. This section revisits this notion, but also 
   sets out additional requirements to make sure that there is no 
   loss of functionality incurred by increasing the value of the 
   refresh interval. </t>

   <t>An implementation that supports RI-RSVP: 
   <list style="symbols">
   <t>MUST support all of the requirements specified in <xref target="prereq"/>. </t>
      
   <t>MUST make the default value of the configurable refresh interval 
     (R) be a large value (tens of minutes). A default value of 20 minutes 
     is RECOMMENDED by this document. </t>
 
   <t>MUST use a separate shorter refresh interval for refreshing state associated
     with unacknowledged Path/Resv (uR) messages. A default value of 30
     seconds is RECOMMENDED by this document. </t>
      
   <t>MUST implement coupling the state of individual LSPs with the 
     state of the corresponding RSVP-TE signaling adjacency. When an 
     RSVP-TE speaker detects RSVP-TE signaling adjacency failure, the 
     speaker MUST act as if all the Path and Resv states learned via 
     the failed signaling adjacency have timed out. </t>
      
   <t>MUST make use of the Hello session based on the Node-ID (<xref target="RFC3209"/> 
     <xref target="RFC4558"/>) for detection of RSVP-TE signaling adjacency failures. 
     A default value of 9 seconds is RECOMMENDED by this document for 
     the configurable node hello interval (as opposed to the default value of 5 milliseconds
      proposed in Section 5.3 of <xref target="RFC3209"/>). </t>
 
   <t>MUST indicate support for RI-RSVP via the CAPABILITY object <xref target="RFC5063"/> in 
     Hello messages. </t>
   </list></t>

   <section title="Capability Advertisement">
   <t>An implementation supporting the RI-RSVP technique MUST set a 
   new flag, RI-RSVP Capable, in the CAPABILITY object signaled in 
   Hello messages. The following bit indicates that the sender supports RI&nbhy;RSVP:
   <list>
   <t>Bit Number 28 (0x0008) - RI-RSVP Capable (I-bit)</t>
   </list></t>

   <t>
   Any node that sets the new I-bit in its CAPABILITY object MUST also
   set the Refresh-Reduction-Capable bit <xref target="RFC2961" /> in the common header of all RSVP-TE 
   messages. If a peer sets the I-bit in the CAPABILITY object but does
   not set the Refresh-Reduction-Capable bit, then the RI-RSVP functionality
   MUST NOT be activated for that peer.</t>
   </section>

   <section title="Compatibility">
   <t>The RI-RSVP functionality MUST NOT be activated with a peer that 
   does not indicate support for this functionality. Inactivation of the
   RI-RSVP functionality MUST result in the use of the traditional
   smaller refresh interval <xref target="RFC2205"/>.
   </t>
   </section>

   </section>

   <section title="Per-Peer Flow Control" anchor="pp_flow_ctrl">

   <t>The functionality discussed in this section provides an RSVP 
   speaker with the ability to apply back pressure to its peer(s) to 
   reduce/eliminate a significant portion of the RSVP-TE control message load.  </t>

   <t>An implementation that supports Per-Peer Flow Control: 
   <list style="symbols">
   <t>MUST support all of the requirements specified in <xref target="prereq"/>. </t>

   <t>MUST support RI-RSVP (<xref target="ri_rsvp_cap"/>). </t>
    
   <t>MUST treat lack of ACKs from a peer as an indication of a peer's RSVP-TE
     control-plane congestion. If congestion is detected, the local 
     system MUST throttle RSVP-TE messages to the affected peer. This 
     MUST be done on a per-peer basis. (Per-peer throttling MAY be 
     implemented by a traffic-shaping mechanism that proportionally 
     reduces the RSVP-signaling packet rate as the number of 
     outstanding ACKs increases. When the number of outstanding 
     ACKs decreases, the send rate would be adjusted up again.) </t>
      
   <t>SHOULD use a Retry Limit (Rl) value of 7 (Section 6.2 of 
     <xref target="RFC2961"/> suggests using 3).  </t>
 
   <t>SHOULD prioritize Hello messages and messages carrying Acknowledgements
     over other RSVP messages.</t>

   <t>SHOULD prioritize Tear/Error over trigger Path/Resv (messages that 
     bring up new LSP state) sent to a peer when the local system 
     detects RSVP-TE control-plane congestion in the peer. </t>
 
   <t>MUST indicate support for this technique via 
     the CAPABILITY object <xref target="RFC5063"/> in Hello messages. </t>
   </list></t>

   <section title="Capability Advertisement">

   <t>An implementation supporting the Per-Peer Flow-Control 
   technique MUST set a new flag, Per-Peer Flow-Control Capable,
   in the CAPABILITY object signaled in Hello messages. The following bit
   indicates that the sender supports Per-Peer Flow Control:
   <list>
   <t>Bit Number 27 (0x0010) - Per-Peer Flow-Control Capable (F-bit)</t>
   </list></t>

   <t>Any node that sets the new F-bit in its CAPABILITY object MUST also 
   set the Refresh-Reduction-Capable bit in the common header of all RSVP-TE 
   messages. If a peer sets the F-bit in the CAPABILITY object but does
   not set the Refresh-Reduction-Capable bit, then the Per-Peer Flow-Control
   functionality MUST NOT be activated for that peer. </t>

   </section>

   <section title="Compatibility">
   <t>The Per-Peer Flow-Control functionality MUST NOT be activated with
   a peer that does not indicate support for this functionality. 
   If a peer hasn't indicated that it is capable of participating in
   Per&nbhy;Peer Flow Control, then it SHOULD NOT be assumed that the peer
   would always acknowledge a non-out-of-order message containing a
   MESSAGE_ID object with the ACK_Desired flag set. </t>
   </section>

   </section>

   <?rfc needLines="8" ?>


   <section anchor="IANA" title="IANA Considerations">
   <section title="Capability Object Values">

   <t>IANA maintains the "Capability Object values" subregistry <xref
   target="RFC5063" /> within the "Resource Reservation Protocol (RSVP)
   Parameters" registry
   &lt;http://www.iana.org/assignments/rsvp-parameters&gt;. IANA has
   assigned two new Capability Object Value bit flags as follows:

   <figure>
   <artwork align="left"><![CDATA[
   Bit      Hex     Name                                Reference 
   Number   Value
   ------------------------------------------------------------------ 
     28     0x0008  RI-RSVP Capable (I)                 Section 3 
     27     0x0010  Per-Peer Flow-Control Capable (F)   Section 4
   ]]></artwork>
   </figure></t>

   </section>
   </section>

   <section anchor="Security" title="Security Considerations">
   <t>This document does not introduce new security issues. The security 
   considerations pertaining to the original RSVP protocol <xref
   target="RFC2205"/> and RSVP-TE <xref target="RFC3209"/>, and those that are
   described in <xref target="RFC5920"/>, remain relevant. </t>
   </section>
 </middle>

 <back>

   <references title="Normative References">
     &RFC2119;

     &RFC2205;

     &RFC2961;

     &RFC3209;

     &RFC4558;

     &RFC5063;

     &RFC8174;

   </references>

   <references title="Informative References">

     &RFC5439;

     &RFC5920;

   </references>
   <section anchor="appendixA" title="Recommended Defaults">
   <t><list style="letters">
   <t>Refresh Interval (R) - 20 minutes (<xref target="ri_rsvp_cap"/>): 
   <vspace blankLines="0" />
   Given that an implementation supporting RI-RSVP doesn't rely on 
   refreshes for state sync between peers, the function of the RSVP refresh interval is 
   analogous to that of IGP refresh interval (the default of which is 
   typically in the order of tens of minutes). Choosing a default of 20 
   minutes allows the refresh timer to be randomly set to a value in 
   the range [10 minutes (0.5R), 30 minutes (1.5R)]. 
   </t>

   <t>Node Hello Interval - 9 seconds (<xref target="ri_rsvp_cap"/>):
   <vspace blankLines="0" />
   <xref target="RFC3209"/> defines the hello timeout as 3.5 times the hello interval. 
   Choosing 9 seconds for the node hello interval gives a hello timeout 
   of 3.5 * 9 = 31.5 seconds. This puts the hello timeout value in 
   the vicinity of the IGP hello timeout value.</t> 
         
   <t>Retry-Limit (Rl) - 7 (<xref target="pp_flow_ctrl"/>):
   <vspace blankLines="0" /> 
   Choosing 7 as the retry-limit results in an overall rapid retransmit 
   phase of 31.5 seconds. This matches up with the hello timeout of 31.5
   seconds.</t>  
         
   <t>Refresh Interval for refreshing state associated with unacknowledged Path/Resv messages (uR) - 30 seconds (<xref target="ri_rsvp_cap"/>):
   <vspace blankLines="0" />
   The recommended refresh interval (R) value of 20 minutes (for an
   implementation supporting RI-RSVP) cannot be used for refreshing
   state associated with unacknowledged Path/Resv messages. This 
   document recommends the use of the traditional default refresh 
   interval value of 30 seconds for uR.</t>
   </list></t>

   </section>

   <section anchor="Acknowledgements" title="Acknowledgements" numbered="no">
   <t>The authors would like to thank Yakov Rekhter for initiating this 
   work and providing valuable input. They would like to thank 
   Raveendra Torvi and Chandra Ramachandran for participating in the 
   many discussions that led to the techniques discussed in this 
   document. They would also like to thank Adrian Farrel, Lou Berger, and
   Elwyn Davies for providing detailed review comments and text suggestions. </t>
   </section>

   <section anchor="Contributors" title="Contributors" numbered="no">
     <t>
     <vspace blankLines="1" />

     Markus Jork
     <vspace blankLines="0" />
     Juniper Networks     
     <vspace blankLines="0" />
     Email: mjork@juniper.net
     
     <vspace blankLines="1" />
     
     Ebben Aries
     <vspace blankLines="0" />
     Juniper Networks     
     <vspace blankLines="0" />
     Email: exa@juniper.net
    
     </t>

   </section>

 </back>
</rfc>
