<?xml version="1.0" encoding="US-ASCII"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>


<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc sortrefs="yes"?>
<?rfc colonspace="yes"?>
<?rfc tocdepth="4"?>

<rfc ipr="trust200902" number="8428" category="std" submissionType="IETF" consensus="yes">

  <front>
    <title abbrev="SenML">Sensor Measurement Lists (SenML)</title>

    <author initials="C." surname="Jennings" fullname="Cullen Jennings">
      <organization>Cisco</organization>
      <address>
        <postal>
          <street>400 3rd Avenue SW</street>
          <city>Calgary</city>
          <region>AB</region>
          <code>T2P 4H2</code>
          <country>Canada</country>
        </postal>
        <email>fluffy@iii.ca</email>
      </address>
    </author>
    <author initials="Z." surname="Shelby" fullname="Zach Shelby">
      <organization>ARM</organization>
      <address>
        <postal>
          <street>150 Rose Orchard</street>
          <city>San Jose</city>
          <code>95134</code>
          <country>United States of America</country>
        </postal>
        <phone>+1-408-203-9434</phone>
        <email>zach.shelby@arm.com</email>
      </address>
    </author>
    <author initials="J." surname="Arkko" fullname="Jari Arkko">
      <organization>Ericsson</organization>
      <address>
        <postal>
          <street></street>
          <city>Jorvas</city>
          <code>02420</code>
          <country>Finland</country>
        </postal>
        <email>jari.arkko@piuha.net</email>
      </address>
    </author>
    <author initials="A." surname="Keranen" fullname="Ari Keranen">
      <organization>Ericsson</organization>
      <address>
        <postal>
          <street></street>
          <city>Jorvas</city>
          <code>02420</code>
          <country>Finland</country>
        </postal>
        <email>ari.keranen@ericsson.com</email>
      </address>
    </author>
    <author initials="C." surname="Bormann" fullname="Carsten Bormann">
      <organization>Universitaet Bremen TZI</organization>
      <address>
        <postal>
          <street>Postfach 330440</street>
          <city>Bremen</city>
          <code>D-28359</code>
          <country>Germany</country>
        </postal>
        <phone>+49-421-218-63921</phone>
        <email>cabo@tzi.org</email>
      </address>
    </author>

    <date month="August" year="2018"/>

    <area>ART</area>


    <abstract>


<t>This specification defines a format for representing simple sensor
measurements and device parameters in Sensor Measurement Lists
(SenML). Representations are defined in JavaScript Object Notation
(JSON), Concise Binary Object Representation (CBOR), Extensible Markup
Language (XML), and Efficient XML Interchange (EXI), which share the
common SenML data model. A simple sensor, such as a temperature
sensor, could use one of these media types in protocols such as HTTP
or the Constrained Application Protocol (CoAP) to transport the measurements of the sensor or to be
configured.</t>



    </abstract>


  </front>

  <middle>


<section anchor="overview" title="Overview">

<t>Connecting sensors to the Internet is not new, and there have been
many protocols designed to facilitate it. This specification defines a
format and media types for carrying simple sensor information in
protocols such as HTTP <xref target="RFC7230"/> or CoAP <xref target="RFC7252"/>. 
 The SenML
format is designed so that processors with very limited capabilities
could easily encode a sensor measurement into the media type, while at
the same time, a server parsing the data could
collect a large number of sensor measurements in a relatively efficient manner. SenML can be used for a
variety of data flow models, most notably data feeds pushed from a
sensor to a collector, and for the web resource model where the sensor data is
requested as a resource representation (e.g., "GET
/sensor/temperature").</t>

<t>There are many types of more complex measurements and measurements
that this media type would not be suitable for.  SenML strikes a
balance between having some information about the sensor carried with
the sensor data so that the data is self-describing, but it also tries
to make that a fairly minimal set of auxiliary information for
efficiency reasons. Other information about the sensor can be
discovered by other methods such as using the Constrained RESTful Environments (CoRE) Link Format
<xref target="RFC6690"/>.</t>

<t>SenML is defined by a data model for measurements and simple metadata
about measurements and devices. The data is structured as a single
array that contains a series of SenML Records that can each contain
fields such as a unique identifier for the sensor, the time the
measurement was made, the unit the measurement is in, and the current
value of the sensor.  Serializations for this data model are defined
for JSON <xref target="RFC8259"/>, CBOR <xref target="RFC7049"/>, XML <xref target="W3C.REC-xml-20081126"/>,
and Efficient XML Interchange (EXI) <xref target="W3C.REC-exi-20140211"/>.</t>

<t>For example, the following shows a measurement from a temperature
gauge encoded in the JSON syntax.</t>

<figure><artwork><![CDATA[
[
  {"n":"urn:dev:ow:10e2073a01080063","u":"Cel","v":23.1}
]
]]></artwork></figure>

<t>In the example above, the array has a single SenML Record with a
measurement for a sensor named "urn:dev:ow:10e2073a01080063" with a
current value of 23.1 degrees Celsius.</t>

</section>
<section anchor="requirements-and-design-goals" title="Requirements and Design Goals">

<t>The design goal is to be able to send simple sensor measurements in
small packets from large numbers of constrained devices. Keeping the
total size of the payload small makes it easy to also use SenML in
constrained networks, e.g., in an IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) <xref target="RFC4944"/>.  It is always
difficult to define what small code is, but there is a desire to be
able to implement this in roughly 1 KB of flash on an 8-bit
microprocessor. Experience with power meters and other large-scale
deployments has indicated that the solution needs to support allowing
multiple measurements to be batched into a single HTTP or CoAP
request. This "batch" upload capability allows the server side to
efficiently support a large number of devices. It also conveniently
supports batch transfers from proxies and storage devices, even in
situations where the sensor itself sends just a single data item at a
time. The multiple measurements could be from multiple related sensors
or from the same sensor but at different times.</t>

<t>The basic design is an array with a series of measurements. The
following example shows two measurements made at different times. The
value of a measurement is given by the "v" field, the time of a
measurement is in the "t" field, the "n" field has a unique
sensor name, and the unit of the measurement is carried in the "u"
field.</t>

<figure><artwork><![CDATA[
[
  {"n":"urn:dev:ow:10e2073a01080063","u":"Cel","t":1.276020076e+09,
   "v":23.5},
  {"n":"urn:dev:ow:10e2073a01080063","u":"Cel","t":1.276020091e+09,
   "v":23.6}
]
]]></artwork></figure>

<t>To keep the messages small, it does not make sense to repeat the "n"
field in each SenML Record, so there is a concept of a Base Name, which
is simply a string that is prepended to the Name field of all elements
in that Record and any Records that follow it. So, a more compact form
of the example above is the following.</t>

<figure><artwork><![CDATA[
[
  {"bn":"urn:dev:ow:10e2073a01080063","u":"Cel","t":1.276020076e+09,
   "v":23.5},
  {"u":"Cel","t":1.276020091e+09,
   "v":23.6}
]
]]></artwork></figure>

<t>In the above example, the Base Name is in the "bn" field, and the "n"
fields in each Record are empty strings, so they are omitted.</t>

<t>Some devices have accurate time while others do not, so SenML supports
absolute and relative times. Time is represented in floating point as
seconds. Values greater than or equal to 2**28 represent an absolute
time relative to the Unix epoch. Values less than 2**28 represent time
relative to the current time.</t>

<t>A simple sensor with no absolute wall-clock time might take a
measurement every second, batch up 60 of them, and then send the batch
to a server. It would include the relative time each measurement was
made compared to the time the batch was sent in each SenML Record. 
If the
server has accurate time based on, e.g., the Network Time Protocol (NTP), it may use the time it received the
data and the relative offset to replace the times in the SenML with
absolute times before saving the SenML information in a document
database.</t>

</section>
<section anchor="terminology" title="Terminology">

        <t>
    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
    "MAY", and "OPTIONAL" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>

<t>This document also uses the following terms:</t>

<t><list style="hanging">
  <t hangText='SenML Record:'>
  One measurement or configuration instance in time presented
using the SenML data model.</t>
  <t hangText='SenML Pack:'>
  One or more SenML Records in an array structure.</t>
  <t hangText='SenML Label:'>
  A short name used in SenML Records to denote different SenML 
fields (e.g., "v" for "value").</t>
  <t hangText='SenML Field:'>
  A component of a record that associates a value to a SenML Label for
this record.</t>
  <t hangText='SenSML:'>
  Sensor Streaming Measurement List (see <xref target="sec-sensml"/>).</t>
  <t hangText='SenSML Stream:'>
  One or more SenML Records to be processed as a stream.</t>
</list></t>

<t>This document uses the terms "attribute" and "tag" where they occur
with the underlying technologies (XML, CBOR <xref target="RFC7049"/>, and the CoRE Link
Format <xref target="RFC6690"/>); they are not used for SenML concepts, per se.  
However, note that 
"attribute" has been widely used in the past as a synonym for the SenML
"field".</t>

<t>All comparisons of text strings are performed byte by byte, which results in the comparisons being case sensitive.
</t>

<t>Where arithmetic is used, this specification uses the familiar notation
of the programming language C, except that the operator
"**" stands for exponentiation.</t>

</section>
<section anchor="senml-structure" title="SenML Structure and Semantics">

<t>Each SenML Pack carries a single array that represents a set of
measurements and/or parameters. This array contains a series of SenML
Records with several fields described below. There are two kinds of
fields: base and regular. Both the base and regular fields
can be included in any SenML Record. The base fields apply to the
entries in the Record and also to all Records after it up to, but not
including, the next Record that has that same base field.  All base
fields are optional. Regular fields can be included in any SenML
Record and apply only to that Record.</t>

<section anchor="senml-base" title="Base Fields">

<t><list style="hanging">
  <t hangText='Base Name:'>
  This is a string that is prepended to the names found in the 
entries.</t>
  <t hangText='Base Time:'>
  A base time that is added to the time found in an entry.</t>
  <t hangText='Base Unit:'>
  A base unit that is assumed for all entries, unless otherwise
indicated.  If a record does not contain a Unit value, then the Base
Unit is used. Otherwise, the value found in the Unit (if any) is
used.</t>
  <t hangText='Base Value:'>
  A base value is added to the value found in an entry, similar to
Base Time.</t>
  <t hangText='Base Sum:'>
  A base sum is added to the sum found in an entry, similar to Base
Time.</t>
  <t hangText='Base Version:'>
  Version number of the media type format. This field is an optional
positive integer and defaults to 10 if not
present.</t>
</list></t>

</section>
<section anchor="senml-fields" title="Regular Fields">

<t><list style="hanging">
  <t hangText='Name:'>
  Name of the sensor or parameter. When appended to the Base Name
field, this must result in a globally unique identifier for the
resource. The name is optional, if the Base Name is present. If the
name is missing, the Base Name must uniquely identify the resource. This
can be used to represent a large array of measurements from the same
sensor without having to repeat its identifier on every measurement.</t>
  <t hangText='Unit:'>
  Unit for a measurement value. Optional.</t>


  <t hangText='Value:'>
  Value of the entry.  Optional if a Sum value is present; otherwise, it's
required. Values are represented using basic data types. This
specification defines floating-point numbers ("v" field for
"Value"), booleans ("vb" for "Boolean Value"), strings ("vs" for
"String Value"), and binary data ("vd" for "Data Value"). Exactly one
Value field MUST appear unless there is a Sum field, in which case it
is allowed to have no Value field.</t>

  <t hangText='Sum:'>
  Integrated sum of the values over time. Optional. This field is
in the unit specified in the Unit value multiplied by seconds. For
historical reasons, it is named "sum" instead of "integral".</t>
  <t hangText='Time:'>
  Time when the value was recorded. Optional.</t>
  <t hangText='Update Time:'>
  Period of time in seconds that represents the maximum time before
this sensor will provide an updated reading for a measurement.
Optional. This can be used to detect the failure of sensors or
the communications path from the sensor.</t>
</list></t>

</section>
<section anchor="senml-labels" title="SenML Labels">

<t><xref target="tbl-labels"/> provides an overview of all SenML fields defined by
this document with their respective labels and data types.</t>

<texttable title="SenML Labels" anchor="tbl-labels">
      <ttcol align='right'>Name</ttcol>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='right'>CBOR Label</ttcol>
      <ttcol align='left'>JSON Type</ttcol>
      <ttcol align='left'>XML Type</ttcol>
      <c>Base Name</c>
      <c>bn</c>
      <c>-2</c>
      <c>String</c>
      <c>string</c>
      <c>Base Time</c>
      <c>bt</c>
      <c>-3</c>
      <c>Number</c>
      <c>double</c>
      <c>Base Unit</c>
      <c>bu</c>
      <c>-4</c>
      <c>String</c>
      <c>string</c>
      <c>Base Value</c>
      <c>bv</c>
      <c>-5</c>
      <c>Number</c>
      <c>double</c>
      <c>Base Sum</c>
      <c>bs</c>
      <c>-6</c>
      <c>Number</c>
      <c>double</c>
      <c>Base Version</c>
      <c>bver</c>
      <c>-1</c>
      <c>Number</c>
      <c>int</c>
      <c>Name</c>
      <c>n</c>
      <c>0</c>
      <c>String</c>
      <c>string</c>
      <c>Unit</c>
      <c>u</c>
      <c>1</c>
      <c>String</c>
      <c>string</c>
      <c>Value</c>
      <c>v</c>
      <c>2</c>
      <c>Number</c>
      <c>double</c>
      <c>String Value</c>
      <c>vs</c>
      <c>3</c>
      <c>String</c>
      <c>string</c>
      <c>Boolean Value</c>
      <c>vb</c>
      <c>4</c>
      <c>Boolean</c>
      <c>boolean</c>
      <c>Data Value</c>
      <c>vd</c>
      <c>8</c>
      <c>String (*)</c>
      <c>string (*)</c>
      <c>Sum</c>
      <c>s</c>
      <c>5</c>
      <c>Number</c>
      <c>double</c>
      <c>Time</c>
      <c>t</c>
      <c>6</c>
      <c>Number</c>
      <c>double</c>
      <c>Update Time</c>
      <c>ut</c>
      <c>7</c>
      <c>Number</c>
      <c>double</c>
</texttable>

<t>(*) Data Value is a base64-encoded string with the URL-safe alphabet as
defined in Section 5 of <xref target="RFC4648"/>, with padding omitted.
(In CBOR, the octets in the Data Value are encoded using a definite length byte string, major type 2.) </t>

<t>For details of the JSON representation, see <xref target="sec-json"/>; for CBOR, see 
<xref target="sec-cbor"/>; and for XML, see <xref target="sec-xml"/>.</t>

</section>
<section anchor="extensibility" title="Extensibility">

<t>The SenML format can be extended with further custom fields. Both
new base and regular fields are allowed. See
<xref target="iana-senml-label-registry"/> for details.  Implementations MUST
ignore fields they don't recognize unless that field has a label
name that ends with the "_" character, in which case an error MUST be
generated.</t>

<t>All SenML Records in a Pack MUST have the same version number. This is
typically done by adding a Base Version field to only the first Record
in the Pack or by using the default value.</t>

<t>Systems reading one of the objects MUST check for the Base Version field.
If this value is a version number larger than the version that the
system understands, the system MUST NOT use this object. This allows
the version number to indicate that the object contains structure or
semantics that is different from what is defined in the present
document beyond just making use of the extension points provided here.
New version numbers can only be defined in an RFC that updates this
specification or its successors.</t>

</section>
<section anchor="records-and-their-fields" title="Records and Their Fields">

<section anchor="names" title="Names">

<t>The Name value is concatenated to the Base Name value to yield the
name of the sensor. The resulting concatenated name needs to uniquely
identify and differentiate the sensor from all others. The
concatenated name MUST consist only of characters out of the set "A"
to "Z", "a" to "z", and "0" to "9", as well as  "-", ":", ".", "/", and "_";
furthermore, it MUST start with a character out of the set "A" to "Z",
"a" to "z", or "0" to "9". This restricted character set was chosen so
that concatenated names can be used directly within various URI
schemes (including segments of an HTTP path with no special encoding;
note that a name that contains "/" characters maps into multiple URI
path segments) and can be used directly in many databases and analytic
systems. <xref target="RFC5952"/> contains advice on encoding an IPv6 address in a
name. See <xref target="sec-privacy"/> for privacy considerations that apply to the
use of long-term stable unique identifiers.</t>

<t>Although it is RECOMMENDED that concatenated names be represented as
URIs <xref target="RFC3986"/> or URNs <xref target="RFC8141"/>, the restricted character set
specified above puts strict limits on the URI schemes and URN
namespaces that can be used. As a result, implementers need to take
care in choosing the naming scheme for concatenated names, because
such names both need to be unique and need to conform to the
restricted character set. One approach is to include a bit string that
has guaranteed uniqueness (such as a 1-wire address <xref target="AN1796"/>). Some
of the examples within this document use the device URN namespace as
specified in <xref target="DEVICE-URN"/>. Universally Unique Identifiers (UUIDs) <xref target="RFC4122"/> are another
way to generate a unique name. However, the restricted character set
does not allow the use of many URI schemes, such as the "tag" scheme
<xref target="RFC4151"/> and the "ni" scheme <xref target="RFC6920"/>, in names as such. The
use of URIs with characters incompatible with this set and possible
mapping rules between the two are outside the scope of the present
document.</t>

</section>
<section anchor="units" title="Units">

<t>If the Record has no Unit, the Base Unit is used as the Unit. Having
no Unit and no Base Unit is allowed; any information that may be
required about units applicable to the value then needs to be provided
by the application context.</t>

</section>
<section anchor="time" title="Time">

<t>If either the Base Time or Time value is missing, the missing field is
considered to have a value of zero. The Base Time and Time values are
added together to get a value representing the time of measurement.</t>

<t>Values less than 268,435,456 (2**28) represent time relative to the
current time. That is, a time of zero indicates that the sensor does
not know the absolute time and the measurement was made roughly "now".
A negative value indicates seconds in the past from roughly "now".
Positive values up to 2**28 indicate seconds in the future from "now". 
An example for employing positive values would be actuation use, when the desired change should happen in the future, but the sender or the receiver does
not have accurate time available.</t>

<t>Values greater than or equal to 2**28 represent an absolute time
relative to the Unix epoch (1970-01-01T00:00Z in UTC time), and the
time is counted the same way as the Portable Operating System Interface
(POSIX) "seconds since the epoch" <xref target="TIME_T"/>. Therefore, the smallest
absolute Time value that can be expressed (2**28) is 1978-07-04 
21:24:16 UTC.</t>

<t>Because Time values up to 2**28 are used for representing time relative
to "now" and Time and Base Time are added together, care must be taken
to ensure that the sum does not inadvertently reach 2**28 (i.e., 
absolute time) when relative time was intended to be used.</t>

<t>Obviously, SenML Records referenced to "now" are only useful within a
specific communication context (e.g., based on information on when the
SenML Pack, or a specific Record in a SenSML Stream, was sent) or
together with some other context information that can be used for
deriving a meaning of "now"; the expectation for any archival use is
that they will be processed into UTC-referenced records before that
context would cease to be available. This specification deliberately
leaves the accuracy of "now" very vague as it is determined by the
overall systems that use SenML. In a system where a sensor without
wall-clock time sends a SenML Record with a time referenced to "now" over
a high-speed RS-485 link to an embedded system with accurate time that
resolves "now" based on the time of reception, the resulting time
uncertainty could be within 1 ms. At the other extreme, a deployment
that sends SenML wind-speed readings over a Low-Earth Orbit (LEO) satellite link from a
mountain valley might have resulting reception Time values that are
easily a dozen minutes off the actual time of the sensor reading, with
the time uncertainty depending on satellite locations and conditions.</t>

</section>
<section anchor="values" title="Values">

<t>If only one of the Base Sum or Sum value is present, the missing
field is considered to have a value of zero. The Base Sum and Sum
values are added together to get the sum of measurement. If neither
the Base Sum nor the Sum is present, then the measurement does not have a
Sum value.</t>

<t>If the Base Value or Value is not present, the missing field(s)
is considered to have a value of zero. The Base Value and Value are
added together to get the value of the measurement.</t>

<t>Representing the statistical characteristics of measurements, such as
accuracy, can be very complex. Future specification may add new
fields to provide better information about the statistical
properties of the measurement.</t>

<t>In summary, the structure of a SenML Record is laid out to support a
single measurement per Record.  If multiple data values are measured
at the same time (e.g., air pressure and altitude), they are best kept
as separate Records linked through their Time value; this is even true
when one of the data values is more "meta" than others (e.g.,
describes a condition that influences other measurements at the same
time).</t>

</section>
</section>
<section anchor="resolved-records" title="Resolved Records">

<t>Sometimes it is useful to be able to refer to a defined normalized
format for SenML Records. This normalized format tends to get used for
big data applications and intermediate forms when converting to other
formats. Also, if SenML Records are used outside of a SenML Pack, they
need to be resolved first to ensure applicable base values are
applied.</t>

<t>A SenML Record is referred to as "resolved" if it does not contain any
base values, i.e., labels starting with the character "b", except for
Base Version fields (see below), and has no relative times. To resolve the
Records, the applicable base values of the SenML Pack (if any) are
applied to the Record. That is, for the base values in the Record or
before the Record in the Pack, Name and Base Name are concatenated,
the Base Time is added to the time of the Record, the Base Unit is applied 
to the Record if it did not contain a Unit, etc. In addition,
the Records need to be in chronological order in the Pack.  An example
of this is shown in <xref target="resolved-ex"/>.</t>

<t>The Base Version field MUST NOT be present in resolved Records if the SenML
version defined in this document is used; otherwise, it MUST be present
in all the resolved SenML Records.</t>

<t>A future specification that defines new base fields needs to specify
how the field is resolved.</t>

</section>
<section anchor="associating-meta-data" title="Associating Metadata">

<t>SenML is designed to carry the minimum dynamic information about
measurements and, for efficiency reasons, does not carry significant
static metadata about the device, object, or sensors. Instead, it is
assumed that this metadata is carried out of band. For web resources
using SenML Packs, this metadata can be made available using the CoRE
Link Format <xref target="RFC6690"/>. The most obvious use of this link format is
to describe that a resource is available in a SenML format in the
first place. The relevant media type indicator is included in the
Content-Type (ct=) link attribute (which is defined for the link
format in Section 7.2.1 of <xref target="RFC7252"/>).</t>

</section>
<section anchor="sec-sensml" title="Sensor Streaming Measurement Lists (SenSML)">

<t>In some usage scenarios of SenML, the implementations
store or transmit SenML in a stream-like fashion, where data is
collected over time and continuously added to the object. This mode of
operation is optional, but systems or protocols using SenML in this
fashion MUST specify that they are doing this. SenML defines
separate media types to indicate Sensor Streaming Measurement Lists
(SenSML) for this usage (see <xref target="sec-sensml-json"/>).  In this situation,
the SenSML Stream can be sent and received in a partial fashion, i.e.,
a measurement entry can be read as soon as the SenML Record is
received and does not have to wait for the full SenSML Stream to be
complete.</t>

<t>If times relative to "now" (see <xref target="time"/>) are used in SenML Records of
a SenSML Stream, their interpretation of "now" is based on the time when the
specific Record is sent in the stream.</t>

</section>
<section anchor="configuration-and-actuation-usage" title="Configuration and Actuation Usage">

<t>SenML can also be used for configuring parameters and controlling
actuators. When a SenML Pack is sent (e.g., using an HTTP/CoAP POST or
PUT method) and the semantics of the target are such that SenML is
interpreted as configuration/actuation, SenML Records are interpreted
as a request to change the values of given (sub)resources (given as
names) to given values at the given time(s). The semantics of the
target resource supporting this usage can be described, e.g., using
<xref target="RID-CoRE"/>. Examples of actuation usage are shown
in <xref target="thermo-ex"/>.</t>

</section>
</section>
<section anchor="sec-json" title="JSON Representation (application/senml+json)">

<t>For the SenML fields shown in <xref target="tbl-json-labels"/>, the SenML Labels
are used as the JSON object member names within JSON objects
representing the JSON SenML Records.</t>

<texttable title="JSON SenML Labels" anchor="tbl-json-labels">
      <ttcol align='right'>Name</ttcol>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>JSON Type</ttcol>
      <c>Base Name</c>
      <c>bn</c>
      <c>String</c>
      <c>Base Time</c>
      <c>bt</c>
      <c>Number</c>
      <c>Base Unit</c>
      <c>bu</c>
      <c>String</c>
      <c>Base Value</c>
      <c>bv</c>
      <c>Number</c>
      <c>Base Sum</c>
      <c>bs</c>
      <c>Number</c>
      <c>Base Version</c>
      <c>bver</c>
      <c>Number</c>
      <c>Name</c>
      <c>n</c>
      <c>String</c>
      <c>Unit</c>
      <c>u</c>
      <c>String</c>
      <c>Value</c>
      <c>v</c>
      <c>Number</c>
      <c>String Value</c>
      <c>vs</c>
      <c>String</c>
      <c>Boolean Value</c>
      <c>vb</c>
      <c>Boolean</c>
      <c>Data Value</c>
      <c>vd</c>
      <c>String</c>
      <c>Sum</c>
      <c>s</c>
      <c>Number</c>
      <c>Time</c>
      <c>t</c>
      <c>Number</c>
      <c>Update Time</c>
      <c>ut</c>
      <c>Number</c>
</texttable>

<t>The root JSON value consists of an array with one JSON object for each
SenML Record.  All the fields in the above table MAY occur in the
Records with member values of the type specified in the table.</t>

<t>Only the UTF-8 <xref target="RFC3629"/> form of JSON is allowed. Characters in the
String Value are encoded using the escape sequences defined in
<xref target="RFC8259"/>. Octets in the Data Value are base64 encoded with the URL-safe
alphabet as defined in Section 5 of <xref target="RFC4648"/>, with padding omitted.</t>

<t>Systems receiving measurements MUST be able to process the range of
floating-point numbers that are representable as IEEE double-precision,
floating-point numbers <xref target="IEEE.754"/>.  This allows Time
values to have better than microsecond precision over the next 100
years. The number of significant digits in any measurement is not
relevant, so a reading of 1.1 has exactly the same semantic meaning as
1.10. If the value has an exponent, the "e" MUST be in lower case.  In
the interest of avoiding unnecessary verbosity and speeding up
processing, the mantissa SHOULD be less than 19 characters long, and
the exponent SHOULD be less than 5 characters long.</t>

<section anchor="examples" title="Examples">

<section anchor="single-datapoint" title="Single Data Point">

<t>The following shows a temperature reading taken approximately "now" by
a 1-wire sensor device that was assigned the unique 1-wire address of
10e2073a01080063:</t>

<figure><artwork><![CDATA[
[
  {"n":"urn:dev:ow:10e2073a01080063","u":"Cel","v":23.1}
]
]]></artwork></figure>

</section>
<section anchor="co-ex" title="Multiple Data Points">

<t>The following example shows voltage and current "now", i.e., at an
unspecified time.</t>

<figure><artwork><![CDATA[
[
  {"bn":"urn:dev:ow:10e2073a01080063:","n":"voltage","u":"V","v":120.1},
  {"n":"current","u":"A","v":1.2}
]
]]></artwork></figure>

<t>The next example is similar to the above one, but it shows current at Tue
Jun 8 18:01:16.001 UTC 2010 and at each second for the previous 5
seconds.</t>

<figure><artwork><![CDATA[
[
  {"bn":"urn:dev:ow:10e2073a0108006:","bt":1.276020076001e+09,
   "bu":"A","bver":5,
   "n":"voltage","u":"V","v":120.1},
  {"n":"current","t":-5,"v":1.2},
  {"n":"current","t":-4,"v":1.3},
  {"n":"current","t":-3,"v":1.4},
  {"n":"current","t":-2,"v":1.5},
  {"n":"current","t":-1,"v":1.6},
  {"n":"current","v":1.7}
]
]]></artwork></figure>

<t>As an example of SenSML, the
following stream of measurements may be sent via a
long-lived HTTP POST from the producer of the stream to its consumer,
and each measurement object may be reported at the time it was
measured:</t>

<figure><artwork><![CDATA[
[
  {"bn":"urn:dev:ow:10e2073a01080063","bt":1.320067464e+09,
   "bu":"%RH","v":21.2},
  {"t":10,"v":21.3},
  {"t":20,"v":21.4},
  {"t":30,"v":21.4},
  {"t":40,"v":21.5},
  {"t":50,"v":21.5},
  {"t":60,"v":21.5},
  {"t":70,"v":21.6},
  {"t":80,"v":21.7},
...
]]></artwork></figure>

</section>
<section anchor="an-co-ex" title="Multiple Measurements">

<t>The following example shows humidity measurements from a mobile device
with a 1-wire address 10e2073a01080063, starting at Mon Oct 31
13:24:24 UTC 2011. The device also provides position data, which is
provided in the same measurement or parameter array as separate
entries. Note that time is used to correlate data that belongs
together, e.g., a measurement and a parameter associated with it.
Finally, the device also reports extra data about its battery status
at a separate time.</t>

<figure><artwork><![CDATA[
[
  {"bn":"urn:dev:ow:10e2073a01080063","bt":1.320067464e+09,
   "bu":"%RH","v":20},
  {"u":"lon","v":24.30621},
  {"u":"lat","v":60.07965},
  {"t":60,"v":20.3},
  {"u":"lon","t":60,"v":24.30622},
  {"u":"lat","t":60,"v":60.07965},
  {"t":120,"v":20.7},
  {"u":"lon","t":120,"v":24.30623},
  {"u":"lat","t":120,"v":60.07966},
  {"u":"%EL","t":150,"v":98},
  {"t":180,"v":21.2},
  {"u":"lon","t":180,"v":24.30628},
  {"u":"lat","t":180,"v":60.07967}
]
]]></artwork></figure>

<t>The following table shows the size of this example in various forms, as well as the size of each of these forms compressed with gzip.
</t>

<texttable title="Size Comparisons" anchor="tbl-sizes">
      <ttcol align='left'>Encoding</ttcol>
      <ttcol align='center'>Size</ttcol>
      <ttcol align='center'>Compressed Size</ttcol>
      <c>JSON</c>
      <c>573</c>
      <c>206</c>
      <c>XML</c>
      <c>649</c>
      <c>235</c>
      <c>CBOR</c>
      <c>254</c>
      <c>196</c>
      <c>EXI</c>
      <c>161</c>
      <c>184</c>
</texttable>

</section>
<section anchor="resolved-ex" title="Resolved Data">

<t>The following shows the example from the previous section in
resolved format.</t>

<figure><artwork><![CDATA[
[
  {"n":"urn:dev:ow:10e2073a01080063","u":"%RH","t":1.320067464e+09,
   "v":20},
  {"n":"urn:dev:ow:10e2073a01080063","u":"lon","t":1.320067464e+09,
   "v":24.30621},
  {"n":"urn:dev:ow:10e2073a01080063","u":"lat","t":1.320067464e+09,
   "v":60.07965},
  {"n":"urn:dev:ow:10e2073a01080063","u":"%RH","t":1.320067524e+09,
   "v":20.3},
  {"n":"urn:dev:ow:10e2073a01080063","u":"lon","t":1.320067524e+09,
   "v":24.30622},
  {"n":"urn:dev:ow:10e2073a01080063","u":"lat","t":1.320067524e+09,
   "v":60.07965},
  {"n":"urn:dev:ow:10e2073a01080063","u":"%RH","t":1.320067584e+09,
   "v":20.7},
  {"n":"urn:dev:ow:10e2073a01080063","u":"lon","t":1.320067584e+09,
   "v":24.30623},
  {"n":"urn:dev:ow:10e2073a01080063","u":"lat","t":1.320067584e+09,
   "v":60.07966},
  {"n":"urn:dev:ow:10e2073a01080063","u":"%EL","t":1.320067614e+09,
   "v":98},
  {"n":"urn:dev:ow:10e2073a01080063","u":"%RH","t":1.320067644e+09,
   "v":21.2},
  {"n":"urn:dev:ow:10e2073a01080063","u":"lon","t":1.320067644e+09,
   "v":24.30628},
  {"n":"urn:dev:ow:10e2073a01080063","u":"lat","t":1.320067644e+09,
   "v":60.07967}
]
]]></artwork></figure>

</section>
<section anchor="mult-types-ex" title="Multiple Data Types">

<t>The following example shows a sensor that returns different data
types.</t>

<figure><artwork><![CDATA[
[
  {"bn":"urn:dev:ow:10e2073a01080063:","n":"temp","u":"Cel","v":23.1},
  {"n":"label","vs":"Machine Room"},
  {"n":"open","vb":false},
  {"n":"nfc-reader","vd":"aGkgCg"}
]
]]></artwork></figure>

</section>
<section anchor="rest-ex" title="Collection of Resources">

<t>The following example shows the results from a query to one device
that aggregates multiple measurements from other devices. The example
assumes that a client has fetched information from a device at
2001:db8::2 by performing a GET operation on http://[2001:db8::2] at
Mon Oct 31 16:27:09 UTC 2011 and has gotten two separate values as a
result: a temperature and humidity measurement as well as the results
from another device at http://[2001:db8::1] that also had a
temperature and humidity measurement. Note that the last record would use the Base
Name from the 3rd record but the Base Time from the first record.</t>

<figure><artwork><![CDATA[
[
  {"bn":"2001:db8::2/","bt":1.320078429e+09,
   "n":"temperature","u":"Cel","v":25.2},
  {"n":"humidity","u":"%RH","v":30},
  {"bn":"2001:db8::1/","n":"temperature","u":"Cel","v":12.3},
  {"n":"humidity","u":"%RH","v":67}
]
]]></artwork></figure>

</section>
<section anchor="thermo-ex" title="Setting an Actuator">

<t>The following example shows the SenML that could be used to set the
current set point of a typical residential thermostat that has a
temperature set point, a switch to turn on and off the heat, and a
switch to turn on the fan override.</t>

<figure><artwork><![CDATA[
[
  {"bn":"urn:dev:ow:10e2073a01080063:"},
  {"n":"temp","u":"Cel","v":23.1},
  {"n":"heat","u":"/","v":1},
  {"n":"fan","u":"/","v":0}
]
]]></artwork></figure>

<t>In the following example, two different lights are turned on. It is
assumed that the lights are on a network that can guarantee delivery
of the messages to the two lights within 15 ms (e.g., a network
using 802.1BA <xref target="IEEE802.1BA"/> and
802.1AS <xref target="IEEE802.1AS"/> for time synchronization).
The controller has set the time
of the lights to come on at 20 ms in the future from the current
time. This allows both lights to receive the message, wait till that
time, then apply the switch command so that both lights come on at the
same time.</t>

<figure><artwork><![CDATA[
[
  {"bt":1.320078429e+09,"bu":"/","n":"2001:db8::3","v":1},
  {"n":"2001:db8::4","v":1}
]
]]></artwork></figure>

<t>The following shows two lights being turned off using a
non&nbhy;deterministic network that has high odds of delivering a message in
less than 100 ms and uses NTP for time synchronization. The current
time is 1320078429. The user has just turned off a light switch that
is turning off two lights. Both lights are immediately dimmed to 50% brightness
to give the user instant feedback that something is
changing. However, given the network, the lights will probably dim at
somewhat different times. Then 100 ms in the future, both lights will
go off at the same time. The instant, but not synchronized, dimming
gives the user the sensation of quick responses, and the timed-off 100
ms in the future gives the perception of both lights going off at the
same time.</t>

<figure><artwork><![CDATA[
[
  {"bt":1.320078429e+09,"bu":"/","n":"2001:db8::3","v":0.5},
  {"n":"2001:db8::4","v":0.5},
  {"n":"2001:db8::3","t":0.1,"v":0},
  {"n":"2001:db8::4","t":0.1,"v":0}
]
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="sec-cbor" title="CBOR Representation (application/senml+cbor)">

<t>The CBOR <xref target="RFC7049"/> representation is equivalent to the JSON
representation, with the following changes:</t>

<t><list style="symbols">

  <t>For JSON Numbers, the CBOR representation can use integers, floating-point
numbers, or decimal fractions (CBOR Tag 4); however, a
representation SHOULD be chosen such that when the CBOR value is
converted to an IEEE double-precision, floating-point value, it
has exactly the same value as the original JSON Number converted to that form.  For the version
number, only an unsigned integer is allowed.</t>

  <t>Characters in the String Value are encoded using a text string with a definite length
(major type 3). Octets in the Data Value are encoded using a byte string with a definite length (major type 2).</t>

  <t>For compactness, the CBOR representation uses integers for the
labels, as defined in <xref target="tbl-cbor-labels"/>. This table is conclusive,
i.e., there is no intention to define any additional integer map keys;
any extensions will use string map keys. This allows translators
converting between CBOR and JSON representations to also convert all
future labels without needing to update implementations. Base
values are given negative CBOR labels, and others are given non&nbhy;negative labels.</t>
</list></t>

<texttable title="CBOR Representation: Integers for Map Keys" anchor="tbl-cbor-labels">
      <ttcol align='right'>Name</ttcol>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='right'>CBOR Label</ttcol>
      <c>Base Version</c>
      <c>bver</c>
      <c>-1</c>
      <c>Base Name</c>
      <c>bn</c>
      <c>-2</c>
      <c>Base Time</c>
      <c>bt</c>
      <c>-3</c>
      <c>Base Unit</c>
      <c>bu</c>
      <c>-4</c>
      <c>Base Value</c>
      <c>bv</c>
      <c>-5</c>
      <c>Base Sum</c>
      <c>bs</c>
      <c>-6</c>
      <c>Name</c>
      <c>n</c>
      <c>0</c>
      <c>Unit</c>
      <c>u</c>
      <c>1</c>
      <c>Value</c>
      <c>v</c>
      <c>2</c>
      <c>String Value</c>
      <c>vs</c>
      <c>3</c>
      <c>Boolean Value</c>
      <c>vb</c>
      <c>4</c>
      <c>Sum</c>
      <c>s</c>
      <c>5</c>
      <c>Time</c>
      <c>t</c>
      <c>6</c>
      <c>Update Time</c>
      <c>ut</c>
      <c>7</c>
      <c>Data Value</c>
      <c>vd</c>
      <c>8</c>
</texttable>

<t><list style="symbols">
  <t>For streaming SenSML in CBOR representation, the array containing
the records SHOULD be a CBOR array with an indefinite length; for 
non-streaming SenML, an array with a definite length MUST be used.</t>
</list></t>

<t>The following example shows a dump of the CBOR example for the same
sensor measurement as in <xref target="co-ex"/>.</t>

<figure><artwork><![CDATA[
0000 87 a7 21 78 1b 75 72 6e 3a 64 65 76 3a 6f 77 3a |..!x.urn:dev:ow:|
0010 31 30 65 32 30 37 33 61 30 31 30 38 30 30 36 3a |10e2073a0108006:|
0020 22 fb 41 d3 03 a1 5b 00 10 62 23 61 41 20 05 00 |".A...[..b#aA ..|
0030 67 76 6f 6c 74 61 67 65 01 61 56 02 fb 40 5e 06 |gvoltage.aV..@^.|
0040 66 66 66 66 66 a3 00 67 63 75 72 72 65 6e 74 06 |fffff..gcurrent.|
0050 24 02 fb 3f f3 33 33 33 33 33 33 a3 00 67 63 75 |$..?.333333..gcu|
0060 72 72 65 6e 74 06 23 02 fb 3f f4 cc cc cc cc cc |rrent.#..?......|
0070 cd a3 00 67 63 75 72 72 65 6e 74 06 22 02 fb 3f |...gcurrent."..?|
0080 f6 66 66 66 66 66 66 a3 00 67 63 75 72 72 65 6e |.ffffff..gcurren|
0090 74 06 21 02 f9 3e 00 a3 00 67 63 75 72 72 65 6e |t.!..>...gcurren|
00a0 74 06 20 02 fb 3f f9 99 99 99 99 99 9a a3 00 67 |t. ..?.........g|
00b0 63 75 72 72 65 6e 74 06 00 02 fb 3f fb 33 33 33 |current....?.333|
00c0 33 33 33                                        |333|
00c3
]]></artwork></figure>

<?rfc needLines="8"?>

<t>In CBOR diagnostic notation (Section 6 of <xref target="RFC7049"/>), this is:</t>

<figure><artwork><![CDATA[
[{-2: "urn:dev:ow:10e2073a0108006:",
  -3: 1276020076.001, -4: "A", -1: 5, 0: "voltage", 1: "V", 2: 120.1},
 {0: "current", 6: -5, 2: 1.2}, {0: "current", 6: -4, 2: 1.3},
 {0: "current", 6: -3, 2: 1.4}, {0: "current", 6: -2, 2: 1.5},
 {0: "current", 6: -1, 2: 1.6}, {0: "current", 6: 0, 2: 1.7}]

]]></artwork></figure>

</section>
<section anchor="sec-xml" title="XML Representation (application/senml+xml)">

<t>A SenML Pack or Stream can also be represented in XML format as
defined in this section.</t>

<t>Only the UTF-8 form of XML is allowed. Octets
in the Data Value are base64 encoded with the URL-safe alphabet as defined
in Section 5 of <xref target="RFC4648"/>, with padding omitted.</t>

<t>The following shows an XML example for the same sensor
measurement as in <xref target="co-ex"/>.</t>

<figure><artwork><![CDATA[
<sensml xmlns="urn:ietf:params:xml:ns:senml">
  <senml bn="urn:dev:ow:10e2073a0108006:" bt="1.276020076001e+09"
  bu="A" bver="5" n="voltage" u="V" v="120.1"></senml>
  <senml n="current" t="-5" v="1.2"></senml>
  <senml n="current" t="-4" v="1.3"></senml>
  <senml n="current" t="-3" v="1.4"></senml>
  <senml n="current" t="-2" v="1.5"></senml>
  <senml n="current" t="-1" v="1.6"></senml>
  <senml n="current" v="1.7"></senml>
</sensml>
]]></artwork></figure>

<t>The SenML Stream is represented as a sensml element that contains a
series of senml elements for each SenML Record. The SenML fields are
represented as XML attributes.  For each field defined in this
document, the following table shows the SenML Labels, which are used
for the XML attribute name, as well as the according restrictions on
the XML attribute values ("type") as used in the XML senml elements.</t>

<texttable title="XML SenML Labels" anchor="tbl-xml-labels">
      <ttcol align='right'>Name</ttcol>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>XML Type</ttcol>
      <c>Base Name</c>
      <c>bn</c>
      <c>string</c>
      <c>Base Time</c>
      <c>bt</c>
      <c>double</c>
      <c>Base Unit</c>
      <c>bu</c>
      <c>string</c>
      <c>Base Value</c>
      <c>bv</c>
      <c>double</c>
      <c>Base Sum</c>
      <c>bs</c>
      <c>double</c>
      <c>Base Version</c>
      <c>bver</c>
      <c>int</c>
      <c>Name</c>
      <c>n</c>
      <c>string</c>
      <c>Unit</c>
      <c>u</c>
      <c>string</c>
      <c>Value</c>
      <c>v</c>
      <c>double</c>
      <c>String Value</c>
      <c>vs</c>
      <c>string</c>
      <c>Data Value</c>
      <c>vd</c>
      <c>string</c>
      <c>Boolean Value</c>
      <c>vb</c>
      <c>boolean</c>
      <c>Sum</c>
      <c>s</c>
      <c>double</c>
      <c>Time</c>
      <c>t</c>
      <c>double</c>
      <c>Update Time</c>
      <c>ut</c>
      <c>double</c>
</texttable>

<t>The RelaxNG <xref target="RNC"/> Schema for the XML is:</t>

<figure><artwork><![CDATA[
default namespace = "urn:ietf:params:xml:ns:senml"
namespace rng = "http://relaxng.org/ns/structure/1.0"

senml = element senml {
  attribute bn { xsd:string }?,
  attribute bt { xsd:double }?,
  attribute bv { xsd:double }?,
  attribute bs { xsd:double }?,
  attribute bu { xsd:string }?,
  attribute bver { xsd:int }?,

  attribute n { xsd:string }?,
  attribute s { xsd:double }?,
  attribute t { xsd:double }?,
  attribute u { xsd:string }?,
  attribute ut { xsd:double }?,

  attribute v { xsd:double }?,
  attribute vb { xsd:boolean }?,
  attribute vs { xsd:string }?,
  attribute vd { xsd:string }?
}

sensml =
  element sensml {
    senml+
}

start = sensml
]]></artwork></figure>

</section>
<section anchor="exi-representation-applicationsenml-exi" title="EXI Representation (application/senml-exi)">

<t>For efficient transmission of SenML over, e.g., a constrained network,
EXI can be used. This encodes the XML
Schema <xref target="W3C.REC-xmlschema-1-20041028"/> structure of SenML into binary
tags and values rather than ASCII text.  An EXI representation of
SenML SHOULD be made using the strict schema mode of EXI. However, this mode
does not allow tag extensions to the schema; therefore, any
extensions will be lost in the encoding.  For uses where extensions
need to be preserved in EXI, the non-strict schema mode of EXI MAY be
used.</t>

<t>The EXI header MUST include "EXI Options", as defined in
<xref target="W3C.REC-exi-20140211"/>, with a schemaId set to the value of "a",
indicating the schema provided in this specification.
Future revisions to the schema can change the value of the schemaId to
allow for backwards compatibility.
When the data will be
transported over CoAP or HTTP, an EXI Cookie SHOULD NOT be used as it
simply makes things larger and is redundant to information provided in
the Content-Type header.</t>

<t>The following is the XSD Schema to be used for strict schema-guided
EXI processing. It is generated from the RelaxNG.</t>

<figure><artwork><![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
elementFormDefault="qualified"
targetNamespace="urn:ietf:params:xml:ns:senml"
xmlns:ns1="urn:ietf:params:xml:ns:senml">
  <xs:element name="senml">
    <xs:complexType>
      <xs:attribute name="bn" type="xs:string" />
      <xs:attribute name="bt" type="xs:double" />
      <xs:attribute name="bv" type="xs:double" />
      <xs:attribute name="bs" type="xs:double" />
      <xs:attribute name="bu" type="xs:string" />
      <xs:attribute name="bver" type="xs:int" />
      <xs:attribute name="n" type="xs:string" />
      <xs:attribute name="s" type="xs:double" />
      <xs:attribute name="t" type="xs:double" />
      <xs:attribute name="u" type="xs:string" />
      <xs:attribute name="ut" type="xs:double" />
      <xs:attribute name="v" type="xs:double" />
      <xs:attribute name="vb" type="xs:boolean" />
      <xs:attribute name="vs" type="xs:string" />
      <xs:attribute name="vd" type="xs:string" />
    </xs:complexType>
  </xs:element>
  <xs:element name="sensml">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="ns1:senml" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
]]></artwork></figure>

<t>The following shows a hexdump of the EXI produced from encoding the
following XML example. Note that this example is the same information as
the first example in <xref target="co-ex"/> but in JSON format.</t>

<figure><artwork><![CDATA[
<sensml xmlns="urn:ietf:params:xml:ns:senml">
  <senml bn="urn:dev:ow:10e2073a01080063:" n="voltage" u="V"
  v="120.1"></senml>
  <senml n="current" u="A" v="1.2"></senml>
</sensml>
]]></artwork></figure>

<t>Which compresses with EXI to the following displayed in hexdump:</t>

<figure><artwork><![CDATA[
0000 a0 30 0d 84 80 f3 ab 93 71 d3 23 2b b1 d3 7b b9 |.0......q.#+..{.|
0010 d1 89 83 29 91 81 b9 9b 09 81 89 81 c1 81 81 b1 |...)............|
0020 99 d2 84 bb 37 b6 3a 30 b3 b2 90 1a b1 58 84 c0 |....7.:0.....X..|
0030 33 04 b1 ba b9 39 32 b7 3a 10 1a 09 06 40 38    |3....92.:....@8|
003f
]]></artwork></figure>

<t>The above example used the bit-packed form of EXI, but it is also
possible to use a byte-packed form of EXI, which can make it easier
for a simple sensor to produce valid EXI without really implementing
EXI.  Consider the example of a temperature sensor that produces a
value in tenths of degrees Celsius over a range of 0.0 to 55.0. It
would produce an XML SenML file such as:</t>

<figure><artwork><![CDATA[
<sensml xmlns="urn:ietf:params:xml:ns:senml">
  <senml n="urn:dev:ow:10e2073a01080063" u="Cel" v="23.1"></senml>
</sensml>
]]></artwork></figure>

<t>The compressed form, using the byte-alignment option of EXI, for the
above XML is the following:</t>

<figure><artwork><![CDATA[
0000 a0 00 48 80 6c 20 01 06 1d 75 72 6e 3a 64 65 76 |..H.l ...urn:dev|
0010 3a 6f 77 3a 31 30 65 32 30 37 33 61 30 31 30 38 |:ow:10e2073a0108|
0020 30 30 36 33 02 05 43 65 6c 01 00 e7 01 01 00 03 |0063..Cel.......|
0030 01                                              |.|
0031
]]></artwork></figure>

<t>A small temperature sensor device that only generates this one EXI
file does not really need a full EXI implementation. 


   It can simply
   hard code the output, replacing the 1-wire device ID starting at byte
   0x14 and going to byte 0x23 with its device ID and replacing the
   value "0xe7 0x01" at location 0x2b and 0x2c with the current
   temperature. 
The EXI specification <xref target="W3C.REC-exi-20140211"/> contains
the full information on how floating-point numbers are represented,
but for the purpose of this sensor, the temperature can be converted
to an integer in tenths of degrees (231 in this example). EXI stores 7
bits of the integer in each byte with the top bit set to one if there
are further bytes. 
So, the first byte is set to the low 7 bits of the
integer temperature in tenths of degrees plus 0x80. In this example,
231 &amp; 0x7F + 0x80 = 0xE7. The second byte is set to the integer
temperature in tenths of degrees right-shifted 7 bits. In this example,
231 >> 7 = 0x01.</t>

</section>
<section anchor="fragment-identification-methods" title="Fragment Identification Methods">

<t>A SenML Pack typically consists of multiple SenML Records, and for some
applications, it may be useful to be able to refer to a single Record, or a
set of Records, in a Pack with a fragment
identifier. The
fragment identifier is only interpreted by a client and does not
impact retrieval of a representation. The SenML fragment
identification is modeled after Comma-Separated Value (CSV) fragment
identifiers <xref target="RFC7111"/>.</t>


<t>To select a single SenML Record, the "rec" scheme followed by a single
number is used.  For the purpose of numbering Records, the first
Record is at position 1.  A range of records can be selected by giving
the first and the last record number separated by a "-"
character. Instead of the second number, the "*" character can be
used to indicate the last SenML Record in the Pack.  A set of Records
can also be selected using a comma-separated list of Record positions
or ranges.</t>

<t>(We use the term "selecting a Record" for identifying it as part of
the fragment, not in the sense of isolating it from the Pack -- the
Record still needs to be interpreted as part of the Pack, e.g., using
the base values defined in earlier Records.)</t>

<section anchor="fragment-identification-examples" title="Fragment Identification Examples">

<t>The 3rd SenML Record from the "coap://example.com/temp" resource can be
selected with:</t>
<t>
<list style="empty">
<t>coap://example.com/temp#rec=3</t>
</list></t>

<t>Records from 3rd to 6th can be selected with:</t>
<t>
<list style="empty">
<t>coap://example.com/temp#rec=3-6</t>
</list></t>

<t>Records from 19th to the last can be selected with:</t>
<t>
<list style="empty">
<t>coap://example.com/temp#rec=19-*</t>
</list></t>
<t>The 3rd and 5th Records can be selected with:</t>

<t>
<list style="empty">
<t>coap://example.com/temp#rec=3,5</t>
</list></t>

<t>To select the Records from third to fifth, the 10th Record, and all Records
from 19th to the last:</t>

<t>
<list style="empty">
<t>coap://example.com/temp#rec=3-5,10,19-*</t>
</list></t>
</section>
<section anchor="fragment-identification-for-the-xml-and-exi-formats" title="Fragment Identification for XML and EXI Formats">

<t>In addition to the SenML fragment identifiers described above, with
the XML and EXI SenML formats, the syntax defined in the
XPointer element() Scheme
<xref target="XPointerElement"/> of the XPointer Framework
<xref target="XPointerFramework"/> can be used.  (This is required by <xref target="RFC7303"/>
for media types using the syntax suffix structured with "+xml".  For
consistency, SenML
allows this for the EXI formats as well.)</t>

<t>Note that fragment identifiers are available to the client side only;
they are not provided in transfer protocols such as CoAP or HTTP.
Thus, they cannot be used by the server in deciding which media type
to send.  Where a server has multiple representations available for a
resource identified by a URI, it might send a JSON or CBOR
representation when the client was directed to use an XML/EXI fragment
identifier with it.  Clients can prevent running into this problem
by explicitly requesting an XML or EXI media type (e.g., using the
CoAP Accept option) when XML-/EXI-only fragment identifier syntax is
in use in the URI.</t>

</section>
</section>
<section anchor="usage-considerations" title="Usage Considerations">

<t>The measurements support sending both the current value of a sensor as
well as an integrated sum. For many types of measurements, the sum
is more useful than the current value.
For historical reasons, this field is called "Sum" instead of
"integral", which would more accurately describe its function.
For example, an electrical
meter that measures the energy a given computer uses will typically
want to measure the cumulative amount of energy used. This is less
prone to error than reporting the power each second and trying to have
something on the server side sum together all the power
measurements. If the network between the sensor and the meter goes
down over some period of time, when it comes back up, the cumulative
sum helps reflect what happened while the network was down. A meter
like this would typically report a measurement with the unit set to
watts, but it would put the sum of energy used in the "s" field of
the measurement. It might optionally include the current power in the
"v" field.</t>

<t>While the benefit of using the integrated sum is fairly clear for
measurements like power and energy, it is less obvious for something
like temperature. Reporting the sum of the temperature makes it easy
to compute averages even when the individual temperature values are
not reported frequently enough to compute accurate
averages. Implementers are encouraged to report the cumulative sum as
well as the raw value of a given sensor.</t>

<t>Applications that use the cumulative Sum values need to understand
they are very loosely defined by this specification, and depending on
the particular sensor implementation, they may behave in unexpected ways.
Applications should be able to deal with the following issues:</t>

<t><list style="numbers">
  <t>Many sensors will allow the cumulative sums to "wrap" back to zero
  after the value gets sufficiently large.</t>
  <t>Some sensors will reset the cumulative sum back to zero when the
  device is reset, loses power, or is replaced with a different
  sensor.</t>
  <t>Applications cannot make assumptions about when the device started
  accumulating values into the sum.</t>
</list></t>

<t>Typically, applications can make some assumptions about specific
sensors that will allow them to deal with these problems. A common
assumption is that for sensors whose measurement values are non-negative,
the sum should never get smaller; if the sum does get
smaller, the application will know that one of the situations listed
above has happened.</t>

<t>Despite the name "Sum", the Sum field is not useful for applications
that maintain a running count of the number of times an event
happened or that keep track of a counter such as the total number of
bytes sent on an interface. Data like that can be sent directly in the
Value field.</t>

</section>
<section anchor="cddl" title="CDDL">

<t>As a convenient reference, the JSON and CBOR representations can be
described with the common Concise Data Definition Language (CDDL) specification <xref target="CDDL-CBOR"/> in
<xref target="senmlcddl"/> (informative).</t>

<figure title="Common CDDL Specification for CBOR and JSON SenML" anchor="senmlcddl"><artwork type="cddl"><![CDATA[
SenML-Pack = [1* record]

record = {
  ? bn => tstr,        ; Base Name
  ? bt => numeric,     ; Base Time
  ? bu => tstr,        ; Base Units
  ? bv => numeric,     ; Base Value
  ? bs => numeric,     ; Base Sum
  ? bver => uint,      ; Base Version
  ? n => tstr,        ; Name
  ? u => tstr,        ; Units
  ? s => numeric,     ; Sum
  ? t => numeric,     ; Time
  ? ut => numeric,    ; Update Time
  ? ( v => numeric // ; Numeric Value
      vs => tstr //   ; String Value
      vb => bool //   ; Boolean Value
      vd => binary-value ) ; Data Value
  * key-value-pair
}

; now define the generic versions
key-value-pair = ( label => value )

label = non-b-label / b-label
non-b-label = tstr .regexp  "[A-Zac-z0-9][-_:.A-Za-z0-9]*" / uint
b-label = tstr .regexp  "b[-_:.A-Za-z0-9]+" / nint

value = tstr / binary-value / numeric / bool
numeric = number / decfrac
]]></artwork></figure>

<t>For JSON, we use text labels and base64url-encoded binary data
(<xref target="senmlcddl-json"/>).</t>

<figure title="JSON-Specific CDDL Specification for SenML" anchor="senmlcddl-json"><artwork type="cddl"><![CDATA[
bver = "bver" n  = "n"   s  = "s"
bn  = "bn"    u  = "u"   t  = "t"
bt  = "bt"    v  = "v"   ut = "ut"
bu  = "bu"    vs = "vs"  vd = "vd"
bv  = "bv"    vb = "vb"
bs  = "bs"

binary-value = tstr             ; base64url encoded
]]></artwork></figure>

<t>For CBOR, we use integer labels and native binary data
(<xref target="senmlcddl-cbor"/>).</t>

<figure title="CBOR-Specific CDDL Specification for SenML" anchor="senmlcddl-cbor"><artwork type="cddl"><![CDATA[
bver = -1  n  = 0   s  = 5
bn  = -2   u  = 1   t  = 6
bt  = -3   v  = 2   ut = 7
bu  = -4   vs = 3   vd = 8
bv  = -5   vb = 4
bs  = -6

binary-value = bstr
]]></artwork></figure>

</section>
<section anchor="iana-considerations" title="IANA Considerations">


<t>IANA has created a new "Sensor Measurement Lists (SenML)" registry that
contains the
subregistries defined in Sections <xref target="sec-units"
format="counter"/> and <xref target="iana-senml-label-registry" format="counter"/>.</t>

<section anchor="sec-units" title="SenML Units Registry">

<t>IANA has created a registry of SenML unit symbols called the "SenML Units"
registry. The primary purpose
of this registry is to make sure that symbols uniquely map to indicate a  
type of measurement. 


Definitions for many of these units can be found
in other publications such as <xref target="NIST811"/> and <xref target="BIPM"/>.  

Units marked with an
asterisk are NOT RECOMMENDED to be produced by new implementations
but are in active use and SHOULD be implemented by consumers that can
use the corresponding SenML units that are closer to the unscaled SI units.</t>


<texttable anchor="tbl-iana-symbols" title="IANA Registry for SenML Units">
      <ttcol align='right'>Symbol</ttcol>
      <ttcol align='left'>Description</ttcol>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>m</c>
      <c>meter</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>kg</c>
      <c>kilogram</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>g</c>
      <c>gram*</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>s</c>
      <c>second</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>A</c>
      <c>ampere</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>K</c>
      <c>kelvin</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>cd</c>
      <c>candela</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>mol</c>
      <c>mole</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>Hz</c>
      <c>hertz</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>rad</c>
      <c>radian</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>sr</c>
      <c>steradian</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>N</c>
      <c>newton</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>Pa</c>
      <c>pascal</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>J</c>
      <c>joule</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>W</c>
      <c>watt</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>C</c>
      <c>coulomb</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>V</c>
      <c>volt</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>F</c>
      <c>farad</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>Ohm</c>
      <c>ohm</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>S</c>
      <c>siemens</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>Wb</c>
      <c>weber</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>T</c>
      <c>tesla</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>H</c>
      <c>henry</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>Cel</c>
      <c>degrees Celsius</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>lm</c>
      <c>lumen</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>lx</c>
      <c>lux</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>Bq</c>
      <c>becquerel</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>Gy</c>
      <c>gray</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>Sv</c>
      <c>sievert</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>kat</c>
      <c>katal</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>m2</c>
      <c>square meter (area)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>m3</c>
      <c>cubic meter (volume)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>l</c>
      <c>liter (volume)*</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>m/s</c>
      <c>meter per second (velocity)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>m/s2</c>
      <c>meter per square second (acceleration)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>m3/s</c>
      <c>cubic meter per second (flow rate)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>l/s</c>
      <c>liter per second (flow rate)*</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>W/m2</c>
      <c>watt per square meter (irradiance)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>cd/m2</c>
      <c>candela per square meter (luminance)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>bit</c>
      <c>bit (information content)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>bit/s</c>
      <c>bit per second (data rate)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>lat</c>
      <c>degrees latitude (Note 1)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>lon</c>
      <c>degrees longitude (Note 1)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>pH</c>
      <c>pH value (acidity; logarithmic quantity)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>dB</c>
      <c>decibel (logarithmic quantity)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>dBW</c>
      <c>decibel relative to 1 W (power level)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>Bspl</c>
      <c>bel (sound pressure level; logarithmic quantity)*</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>count</c>
      <c>1 (counter value)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>/</c>
      <c>1 (ratio, e.g., value of a switch; Note 2)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>%</c>
      <c>1 (ratio, e.g., value of a switch; Note 2)*</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>%RH</c>
      <c>percentage (relative humidity)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>%EL</c>
      <c>percentage (remaining battery energy level)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>EL</c>
      <c>seconds (remaining battery energy level)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>1/s</c>
      <c>1 per second (event rate)</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>1/min</c>
      <c>1 per minute (event rate, "rpm")*</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>beat/min</c>
      <c>1 per minute (heart rate in beats per minute)*</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>beats</c>
      <c>1 (cumulative number of heart beats)*</c>
      <c>float</c>
      <c>RFC 8428</c>
      <c>S/m</c>
      <c>siemens per meter (conductivity)</c>
      <c>float</c>
      <c>RFC 8428</c>
</texttable>

<t><list style="symbols">
  <t>Note 1: Assumed to be in World Geodetic System 1984 (WGS84), unless another reference frame is
known for the sensor.</t>

  <t>Note 2: A value of 0.0 indicates the switch is off, 1.0
indicates on, and 0.5 indicates half on.  The preferred name of this
unit is "/".  For historical reasons, the name "%" is also provided
for the same unit, but note that while that name strongly suggests
a percentage (0..100), it is NOT a percentage but the
absolute ratio!</t>
</list></t>

<t>New entries can be added to the registration by Expert Review as
defined in <xref target="RFC8126"/>. Experts should exercise their own good
judgment but need to consider the following guidelines:</t>

<t><list style="numbers">
  <t>There needs to be a real and compelling use for any new unit to be
added.</t>

  <t>Each unit should define the semantic information and be chosen
  carefully. Implementers need to remember that the same word may be
  used in different real-life contexts. For example, degrees when
  measuring latitude have no semantic relation to degrees when
  measuring temperature; thus, two different units are needed.</t>

  <t>These measurements are produced by computers for consumption by
  computers. The principle is that conversion has to be easily done
  when both reading and writing the media type. The value of a single
  canonical representation outweighs the convenience of easy human
  representations or loss of precision in a conversion.</t>

  <t>Use of System of Units (SI) prefixes such as "k" before the unit is not recommended.
  Instead, one can represent the value using scientific notation such
  as 1.2e3. The "kg" unit is an exception to this rule since it is an SI
  base unit; the "g" unit is provided for legacy compatibility.</t>

  <t>For a given type of measurement, there will only be one unit type
  defined. So for length, meter is defined, and other lengths such as
  mile, foot, and light year are not allowed. For most cases, the SI unit
  is preferred.  <vspace blankLines='1'/>

(Note that some amount of judgment will be required here, as even
 SI itself is not entirely consistent in this respect.  For instance,
 for temperature, <xref target="ISO-80000-5"/> defines a quantity, item 5-1
 (thermodynamic temperature), and a corresponding unit of 5-1.a
 (Kelvin); <xref target="ISO-80000-5"/> goes on to define another quantity, item 5-2
 ("Celsius temperature"), and the
 corresponding unit of 5-2.a (degree Celsius).  The latter quantity is
 defined such that it gives the thermodynamic temperature as a delta
 from T0 = 275.15 K.  ISO 80000-5 is defining both units side by
 side and not really expressing a preference.  This level of
 recognition of the alternative unit degree Celsius is the reason why
 Celsius temperatures seem exceptionally acceptable in the SenML
 units list alongside Kelvin.)</t>

  <t>Symbol names that could be easily confused with existing common
  units or units combined with prefixes should be avoided. For
  example, selecting a unit name of "mph" to indicate something that
  had nothing to do with velocity would be a bad choice, as "mph" is
  commonly used to mean "miles per hour".</t>

  <t>The following should not be used because they are common SI
  prefixes: Y, Z, E, P, T, G, M, k, h, da, d, c, u, n, p, f, a, z, y,
  Ki, Mi, Gi, Ti, Pi, Ei, Zi, and Yi.</t>

  <t>The following units should not be used as they are commonly used to
  represent other measurements: Ky, Gal, dyn, etg, P, St, Mx, G, Oe,
  Gb, sb, Lmb, mph, Ci, R, RAD, REM, gal, bbl, qt, degF, Cal, BTU, HP,
  pH, B/s, psi, Torr, atm, at, bar, and kWh.</t>

  <t>The unit names are case sensitive, and the correct case needs to be
  used; however, symbols that differ only in case should not be allocated.</t>

  <t>A number after a unit typically indicates the previous unit raised
  to that power, and "/" indicates that the units that follow are
  the reciprocals. A unit should have only one "/" in the name.</t>

  <t>A good list of common units can be found in the Unified Code for
   Units of Measure <xref target="UCUM"/>.</t>
</list></t>

</section>
<section anchor="iana-senml-label-registry" title="SenML Labels Registry">

<t>IANA has created a new registry for SenML Labels called the "SenML Labels" registry. The initial contents
of the registry are as follows:</t>


<texttable title="IANA Registry for SenML Labels" anchor="tbl-seml-reg">
      <ttcol align='right'>Name</ttcol>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>CL</ttcol>
      <ttcol align='left'>JSON Type</ttcol>
      <ttcol align='left'>XML Type</ttcol>
      <ttcol align='left'>EI</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Base Name</c>
      <c>bn</c>
      <c>-2</c>
      <c>String</c>
      <c>string</c>
      <c>a</c>
      <c>RFC 8428</c>
      <c>Base Time</c>
      <c>bt</c>
      <c>-3</c>
      <c>Number</c>
      <c>double</c>
      <c>a</c>
      <c>RFC 8428</c>
      <c>Base Unit</c>
      <c>bu</c>
      <c>-4</c>
      <c>String</c>
      <c>string</c>
      <c>a</c>
      <c>RFC 8428</c>
      <c>Base Value</c>
      <c>bv</c>
      <c>-5</c>
      <c>Number</c>
      <c>double</c>
      <c>a</c>
      <c>RFC 8428</c>
      <c>Base Sum</c>
      <c>bs</c>
      <c>-6</c>
      <c>Number</c>
      <c>double</c>
      <c>a</c>
      <c>RFC 8428</c>
      <c>Base Version</c>
      <c>bver</c>
      <c>-1</c>
      <c>Number</c>
      <c>int</c>
      <c>a</c>
      <c>RFC 8428</c>
      <c>Name</c>
      <c>n</c>
      <c>0</c>
      <c>String</c>
      <c>string</c>
      <c>a</c>
      <c>RFC 8428</c>
      <c>Unit</c>
      <c>u</c>
      <c>1</c>
      <c>String</c>
      <c>string</c>
      <c>a</c>
      <c>RFC 8428</c>
      <c>Value</c>
      <c>v</c>
      <c>2</c>
      <c>Number</c>
      <c>double</c>
      <c>a</c>
      <c>RFC 8428</c>
      <c>String Value</c>
      <c>vs</c>
      <c>3</c>
      <c>String</c>
      <c>string</c>
      <c>a</c>
      <c>RFC 8428</c>
      <c>Boolean Value</c>
      <c>vb</c>
      <c>4</c>
      <c>Boolean</c>
      <c>boolean</c>
      <c>a</c>
      <c>RFC 8428</c>
      <c>Data Value</c>
      <c>vd</c>
      <c>8</c>
      <c>String</c>
      <c>string</c>
      <c>a</c>
      <c>RFC 8428</c>
      <c>Sum</c>
      <c>s</c>
      <c>5</c>
      <c>Number</c>
      <c>double</c>
      <c>a</c>
      <c>RFC 8428</c>
      <c>Time</c>
      <c>t</c>
      <c>6</c>
      <c>Number</c>
      <c>double</c>
      <c>a</c>
      <c>RFC 8428</c>
      <c>Update Time</c>
      <c>ut</c>
      <c>7</c>
      <c>Number</c>
      <c>double</c>
      <c>a</c>
      <c>RFC 8428</c>

<postamble>Note that CL = CBOR Label and EI = EXI ID.</postamble>
</texttable>

<t>This is the same table as <xref target="tbl-labels"/>, with notes removed and
columns added for the information that is all the same for this
initial set of registrations, but it will need to be supplied with
different values for new registrations.</t>

<t>All new entries must define the Name, Label, and XML Type, but
the CBOR labels SHOULD be left empty as CBOR will use the string
encoding for any new labels. The EI column contains the EXI schemaId
value of the first schema that includes this label, or it is empty if
this label was not intended for use with EXI. 
The Reference column SHOULD
contain information about where to find out more information about
this label.</t>

<t>The JSON, CBOR, and EXI types are derived from the XML type. All XML
numeric types such as double, float, integer, and int become a JSON
Number. XML boolean and string become a JSON Boolean and String,
respectively. CBOR represents numeric values with a CBOR type that
does not lose any information from the JSON value. EXI uses the XML
types.</t>

<t>New entries can be added to the registration by Expert Review as
defined in <xref target="RFC8126"/>.  Experts should exercise their own good
judgment but need to consider that shorter labels should have more
strict review.  New entries should not be made that counteract the
advice at the end of <xref target="values"/>.</t>

<t>All new SenML Labels that have "base" semantics (see <xref target="senml-base"/>)
MUST start with the character "b". Regular labels MUST NOT start with
that character. All new SenML Labels with Value semantics (see
<xref target="senml-fields"/>) MUST have "Value" in their (long-form) name.</t>

<t>Extensions that add a label intended for use with XML need to
create a new RelaxNG Schema that includes all the labels in the "SenML Labels" registry.</t>

<t>Extensions that add a label that is intended for use with EXI need to
create a new XSD Schema that includes all the labels in the "SenML Labels" registry
and then allocate a new EXI schemaId value. Moving to the
next letter in the alphabet is the suggested way to create the new
value for the EXI schemaId. 

Any labels with previously blank ID values
SHOULD be updated in the "SenML Labels" registry to have their ID set to this new
schemaId value.</t>

<t>Extensions that are mandatory to understand to correctly process the
Pack MUST have a label name that ends with the "_" character.</t>

</section>
<section anchor="sec-iana-media" title="Media Type Registrations">

<t>The registrations in the subsections below follow the procedures specified
in <xref target="RFC6838"/> and <xref target="RFC7303"/>. This document registers media types
for each serialization format of SenML (JSON, CBOR, XML, and EXI) and
also a corresponding set of media types for streaming use (SenSML;
see <xref target="sec-sensml"/>). Clipboard formats are defined for the JSON and
XML forms of SenML but not for streams or non-textual formats.</t>

<t>The reason there are both SenML and the streaming SenSML formats is
that they are not the same data formats, and they require separate
negotiation to understand if they are supported and which one is being
used. The non-streaming format is required to have some sort of end-of-pack
syntax that indicates there will be no more records. Many
implementations that receive SenML wait for this end-of-pack marker
before processing any of the records. On the other hand, with the
streaming formats, it is explicitly not required to wait for this end-of-pack
marker. Many implementations that produce streaming SenSML
will never send this end-of-pack marker, so implementations that
receive streaming SenSML cannot wait for the end-of-pack marker
before they start processing the records. Given that SenML and
streaming SenML are different data formats, and considering the requirement for
separate negotiation, a media type for each one is needed.</t>


<section anchor="sec-senml-json" title="senml+json Media Type Registration">

<t>Type name: application</t>

<t>Subtype name: senml+json</t>

<t>Required parameters: none</t>

<t>Optional parameters: none</t>

<t>Encoding considerations: Must be encoded as using a subset of the 
encoding allowed in <xref target="RFC8259"/>. See RFC 8428 for details. This 
simplifies implementation of a very simple system and does not impose 
any significant limitations as all this data is meant for machine-to-machine 
communications and is not meant to be human readable.</t>

<t>Security considerations: See <xref target="sec-sec"/> of RFC 8428.</t>

<t>Interoperability considerations: Applications MUST ignore any JSON
key-value pairs that they do not understand unless the key ends with
the "_" character, in which case an error MUST be generated. This
allows backwards-compatible extensions to this specification. The
"bver" field can  be used to ensure the receiver supports a minimal
level of functionality needed by the creator of the JSON object.</t>

<t>Published specification: RFC 8428</t>

<t>Applications that use this media type: The type is used by systems 
that report, e.g., electrical power usage and environmental information 
such as temperature and humidity. It can be used for a wide range of 
sensor reporting systems.</t>

<t>Fragment identifier considerations: Fragment identification for 
application/senml+json is supported by using fragment identifiers as 
specified by RFC 8428.</t>

<t>Additional information:</t>

<t><list>

<t>Deprecated alias names for this type: N/A</t>

<t>Magic number(s): N/A</t>

<t>File extension(s): senml</t>

<t>Windows Clipboard Name: "JSON Sensor Measurement List"</t>

<t>Macintosh file type code(s): none</t>

<t>Macintosh Universal Type Identifier code: org.ietf.senml-json 
conforms to public.text</t>

</list></t>

<t>Person &amp; email address to contact for further information: 
Cullen Jennings &lt;fluffy@iii.ca&gt;</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: None</t>

<t>Author: Cullen Jennings &lt;fluffy@iii.ca&gt;</t>

<t>Change controller: IESG</t>

</section>

<section anchor="sec-sensml-json" title="sensml+json Media Type Registration">

<t>Type name: application</t>

<t>Subtype name: sensml+json</t>

<t>Required parameters: none</t>

<t>Optional parameters: none</t>

<t>Encoding considerations: Must be encoded as using a subset of the 
encoding allowed in <xref target="RFC8259"/>. See RFC 8428 for details. This 
simplifies implementation of a very simple system and does not impose 
any significant limitations as all this data is meant for machine-to-machine 
communications and is not meant to be human readable.</t>

<t>Security considerations: See <xref target="sec-sec"/> of RFC 8428.</t>

<t>Interoperability considerations: Applications MUST ignore any JSON key-value
pairs that they do not understand unless the key ends with the
"_" character, in which case an error MUST be generated. This allows
backwards-compatible extensions to this specification. The "bver"
field can be used to ensure the receiver supports a minimal level of
functionality needed by the creator of the JSON object.</t>

<t>Published specification: RFC 8428</t>

<t>Applications that use this media type: The type is used by systems 
that report, e.g., electrical power usage and environmental information 
such as temperature and humidity. It can be used for a wide range of 
sensor reporting systems.</t>

<t>Fragment identifier considerations: Fragment identification for 
application/sensml+json is supported by using fragment identifiers as 
specified by RFC 8428.</t>


<t>Additional information:</t>
<t><list>

<t>Deprecated alias names for this type: N/A</t>

<t>Magic number(s): N/A</t>

<t>File extension(s): sensml</t>

<t>Macintosh file type code(s): none</t>

</list></t>

<t>Person &amp; email address to contact for further information: 
Cullen Jennings &lt;fluffy@iii.ca&gt;</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: None</t>

<t>Author: Cullen Jennings &lt;fluffy@iii.ca&gt;</t>

<t>Change controller: IESG</t>

</section>
<section anchor="senmlcbor-media-type-registration" title="senml+cbor Media Type Registration">

<t>Type name: application</t>

<t>Subtype name: senml+cbor</t>

<t>Required parameters: none</t>

<t>Optional parameters: none</t>

<t>Encoding considerations: Must be encoded as using <xref target="RFC7049"/>. See 
RFC 8428 for details.</t>

<t>Security considerations: See <xref target="sec-sec"/> of RFC 8428.</t>

<t>Interoperability considerations: Applications MUST ignore any key-value
pairs that they do not understand unless the key ends with the
"_" character, in which case an error MUST be generated. This allows
backwards-compatible extensions to this specification. The "bver"
field can  be used to ensure the receiver supports a minimal level of
functionality needed by the creator of the CBOR object.</t>

<t>Published specification: RFC 8428</t>

<t>Applications that use this media type: The type is used by systems 
that report, e.g., electrical power usage and environmental information 
such as temperature and humidity. It can be used for a wide range of 
sensor reporting systems.</t>

<t>Fragment identifier considerations: Fragment identification for 
application/senml+cbor is supported by using fragment identifiers as 
specified by RFC 8428.</t>

<t>Additional information:</t>

<t><list>

<t>Deprecated alias names for this type: N/A</t>

<t>Magic number(s): N/A</t>

<t>File extension(s): senmlc</t>

<t>Macintosh file type code(s): none</t>

<t>Macintosh Universal Type Identifier code: org.ietf.senml-cbor 
conforms to public.data</t>

</list></t>

<t>Person &amp; email address to contact for further information: 
Cullen Jennings &lt;fluffy@iii.ca&gt;</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: None</t>

<t>Author: Cullen Jennings &lt;fluffy@iii.ca&gt;</t>

<t>Change controller: IESG</t>

</section>
<section anchor="sensmlcbor-media-type-registration" title="sensml+cbor Media Type Registration">

<t>Type name: application</t>

<t>Subtype name: sensml+cbor</t>

<t>Required parameters: none</t>

<t>Optional parameters: none</t>

<t>Encoding considerations: Must be encoded as using <xref target="RFC7049"/>. See 
RFC 8428 for details.</t>

<t>Security considerations: See <xref target="sec-sec"/> of RFC 8428.</t>

<t>Interoperability considerations: Applications MUST ignore any key-value
pairs that they do not understand unless the key ends with the
"_" character, in which case an error MUST be generated. This allows
backwards-compatible extensions to this specification. The "bver"
field can  be used to ensure the receiver supports a minimal level of
functionality needed by the creator of the CBOR object.</t>

<t>Published specification: RFC 8428</t>

<t>Applications that use this media type: The type is used by systems 
that report, e.g., electrical power usage and environmental information 
such as temperature and humidity. It can be used for a wide range of 
sensor reporting systems.</t>

<t>Fragment identifier considerations: Fragment identification for 
application/sensml+cbor is supported by using fragment identifiers as 
specified by RFC 8428.</t>

<t>Additional information:</t>

<t><list>

<t>Deprecated alias names for this type: N/A</t>

<t>Magic number(s): N/A</t>

<t>File extension(s): sensmlc</t>

<t>Macintosh file type code(s): none</t>
</list></t>

<t>Person &amp; email address to contact for further information: 
Cullen Jennings &lt;fluffy@iii.ca&gt;</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: None</t>

<t>Author: Cullen Jennings &lt;fluffy@iii.ca&gt;</t>

<t>Change controller: IESG</t>

</section>
<section anchor="senmlxml-media-type-registration" title="senml+xml Media Type Registration">

<t>Type name: application</t>

<t>Subtype name: senml+xml</t>

<t>Required parameters: none</t>

<t>Optional parameters: none</t>

<t>Encoding considerations: Must be encoded as using 
<xref target="W3C.REC-xml-20081126"/>. See RFC 8428 for details.</t>

<t>Security considerations: See <xref target="sec-sec"/> of RFC 8428.</t>

<t>Interoperability considerations: Applications MUST ignore any XML tags
or attributes that they do not understand unless the attribute name
ends with the "_" character, in which case an error MUST be generated.
This allows backwards-compatible extensions to this specification. The
"bver" attribute in the senml XML tag can be used to ensure the
receiver supports a minimal level of functionality needed by the
creator of the XML SenML Pack.</t>

<t>Published specification: RFC 8428</t>

<t>Applications that use this media type: The type is used by systems 
that report, e.g., electrical power usage and environmental information 
such as temperature and humidity. It can be used for a wide range of 
sensor reporting systems.</t>

<t>Fragment identifier considerations: Fragment identification for 
application/senml+xml is supported by using fragment identifiers as 
specified by RFC 8428.</t>

<t>Additional information:</t>

<t><list>

<t>Deprecated alias names for this type: N/A</t>

<t>Magic number(s): N/A</t>

<t>File extension(s): senmlx</t>

<t>Windows Clipboard Name: "XML Sensor Measurement List"</t>

<t>Macintosh file type code(s): none</t>

<t>Macintosh Universal Type Identifier code: org.ietf.senml-xml 
conforms to public.xml</t>

</list></t>

<t>Person &amp; email address to contact for further information: 
Cullen Jennings &lt;fluffy@iii.ca&gt;</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: None</t>

<t>Author: Cullen Jennings &lt;fluffy@iii.ca&gt;</t>

<t>Change controller: IESG</t>

</section>
<section anchor="sensmlxml-media-type-registration" title="sensml+xml Media Type Registration">

<t>Type name: application</t>

<t>Subtype name: sensml+xml</t>

<t>Required parameters: none</t>

<t>Optional parameters: none</t>

<t>Encoding considerations: Must be encoded as using 
<xref target="W3C.REC-xml-20081126"/>. See RFC 8428 for details.</t>

<t>Security considerations: See <xref target="sec-sec"/> of RFC 8428.</t>

<t>Interoperability considerations: Applications MUST ignore any XML tags
or attributes that they do not understand unless the attribute name
ends with the "_" character, in which case an error MUST be generated.
This allows backwards-compatible extensions to this specification. The
"bver" attribute in the senml XML tag can be used to ensure the
receiver supports a minimal level of functionality needed by the
creator of the XML SenML Pack.</t>

<t>Published specification: RFC 8428</t>

<t>Applications that use this media type: The type is used by systems 
that report, e.g., electrical power usage and environmental information 
such as temperature and humidity. It can be used for a wide range of 
sensor reporting systems.</t>

<t>Fragment identifier considerations: Fragment identification for 
application/sensml+xml is supported by using fragment identifiers as 
specified by RFC 8428.</t>

<t>Additional information:</t>

<t><list>

<t>Deprecated alias names for this type: N/A</t>

<t>Magic number(s): N/A</t>

<t>File extension(s): sensmlx</t>

<t>Macintosh file type code(s): none</t>

</list></t>

<t>Person &amp; email address to contact for further information: 
Cullen Jennings &lt;fluffy@iii.ca&gt;</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: None</t>

<t>Author: Cullen Jennings &lt;fluffy@iii.ca&gt;</t>

<t>Change controller: IESG</t>

</section>
<section anchor="senml-exi-media-type-registration" title="senml-exi Media Type Registration">

<t>Type name: application</t>

<t>Subtype name: senml-exi</t>

<t>Required parameters: none</t>

<t>Optional parameters: none</t>

<t>Encoding considerations: Must be encoded as using 
<xref target="W3C.REC-exi-20140211"/>. See RFC 8428 for details.</t>

<t>Security considerations: See <xref target="sec-sec"/> of RFC 8428.</t>

<t>Interoperability considerations: Applications MUST ignore any XML tags
or attributes that they do not understand unless the attribute name
ends with the "_" character, in which case an error MUST be generated.
This allows backwards-compatible extensions to this specification. The
"bver" attribute in the senml XML tag can be used to ensure the
receiver supports a minimal level of functionality needed by the
creator of the XML SenML Pack. Further information on using schemas
to guide the EXI can be found in RFC 8428.</t>

<t>Published specification: RFC 8428</t>

<t>Applications that use this media type: The type is used by systems 
that report, e.g., electrical power usage and environmental information 
such as temperature and humidity. It can be used for a wide range of 
sensor reporting systems.</t>

<t>Fragment identifier considerations: Fragment identification for 
application/senml-exi is supported by using fragment identifiers as 
specified by RFC 8428.</t>

<t>Additional information:</t>

<t><list>

<t>Deprecated alias names for this type: N/A</t>

<t>Magic number(s): N/A</t>

<t>File extension(s): senmle</t>

<t>Macintosh file type code(s): none</t>

<t>Macintosh Universal Type Identifier code: org.ietf.senml-exi 
conforms to public.data</t>
</list></t>

<t>Person &amp; email address to contact for further information: 
Cullen Jennings &lt;fluffy@iii.ca&gt;</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: None</t>

<t>Author: Cullen Jennings &lt;fluffy@iii.ca&gt;</t>

<t>Change controller: IESG</t>

</section>
<section anchor="sensml-exi-media-type-registration" title="sensml-exi Media Type Registration">

<t>Type name: application</t>

<t>Subtype name: sensml-exi</t>

<t>Required parameters: none</t>

<t>Optional parameters: none</t>

<t>Encoding considerations: Must be encoded as using 
<xref target="W3C.REC-exi-20140211"/>. See RFC 8428 for details.</t>

<t>Security considerations: See <xref target="sec-sec"/> of RFC 8428.</t>

<t>Interoperability considerations: Applications MUST ignore any XML tags
or attributes that they do not understand unless the attribute name
ends with the "_" character, in which case an error MUST be generated.
This allows backwards-compatible extensions to this specification. The
"bver" attribute in the senml XML tag can be used to ensure the
receiver supports a minimal level of functionality needed by the
creator of the XML SenML Pack. Further information on using schemas
to guide the EXI can be found in RFC 8428.</t>

<t>Published specification: RFC 8428</t>

<t>Applications that use this media type: The type is used by systems 
that report, e.g., electrical power usage and environmental information 
such as temperature and humidity. It can be used for a wide range of 
sensor reporting systems.</t>

<t>Fragment identifier considerations: Fragment identification for 
application/sensml-exi is supported by using fragment identifiers as 
specified by RFC 8428.</t>

<t>Additional information:</t>

<t><list>

<t>Deprecated alias names for this type: N/A</t>

<t>Magic number(s): N/A</t>

<t>File extension(s): sensmle</t>

<t>Macintosh file type code(s): none</t>
</list></t>

<t>Person &amp; email address to contact for further information: 
Cullen Jennings &lt;fluffy@iii.ca&gt;</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: None</t>

<t>Author: Cullen Jennings &lt;fluffy@iii.ca&gt;</t>

<t>Change controller: IESG</t>

</section>
</section>
<section anchor="sec-iana-url" title="XML Namespace Registration">

<t>This document registers the following XML namespace in the "IETF XML
Registry" defined in <xref target="RFC3688"/>.</t>

<t>URI: urn:ietf:params:xml:ns:senml</t>

<t>Registrant Contact: The IESG.</t>

<t>XML: N/A, the requested URIs are XML namespaces</t>

</section>
<section anchor="coap-content-format-registration" title="CoAP Content-Format Registration">

<t>IANA has assigned CoAP Content-Format IDs for the SenML
media types in the "CoAP Content-Formats" subregistry within the
"Constrained RESTful Environments (CoRE) Parameters" registry <xref target="RFC7252"/>. IDs for the JSON, CBOR, and
EXI Content-Formats have been assigned in the 0-255 range (Expert Review), and
IDs for the XML Content-Formats have been assigned in the 256-9999 range (IETF Review or IESG
Approval). The assigned IDs are shown in the table below:
</t>

<texttable title="CoAP Content-Format IDs" anchor="tbl-coap-content-formats">
      <ttcol align='left'>Media Type</ttcol>
      <ttcol align='left'>Encoding</ttcol>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>application/senml+json</c>
      <c>-</c>
      <c>110</c>
      <c>RFC 8428</c>
      <c>application/sensml+json</c>
      <c>-</c>
      <c>111</c>
      <c>RFC 8428</c>
      <c>application/senml+cbor</c>
      <c>-</c>
      <c>112</c>
      <c>RFC 8428</c>
      <c>application/sensml+cbor</c>
      <c>-</c>
      <c>113</c>
      <c>RFC 8428</c>
      <c>application/senml-exi</c>
      <c>-</c>
      <c>114</c>
      <c>RFC 8428</c>
      <c>application/sensml-exi</c>
      <c>-</c>
      <c>115</c>
      <c>RFC 8428</c>
      <c>application/senml+xml</c>
      <c>-</c>
      <c>310</c>
      <c>RFC 8428</c>
      <c>application/sensml+xml</c>
      <c>-</c>
      <c>311</c>
      <c>RFC 8428</c>
</texttable>

</section>
</section>
<section anchor="sec-sec" title="Security Considerations">

<t>Sensor data presented with SenML can contain a wide array of
   information that ranges from very public (such as the
   outside temperature in a given city) to very private (such as patient
   health information that
   requires integrity and confidentiality protection). When SenML is used for configuration or actuation,
it can be used to change the state of systems and also impact the
physical world, e.g., by turning off a heater or opening a lock. 
<!--inserted sentence below as requested by the authors-->
Malicious use of SenML to change system state could have severe consequences,
potentially including violation of physical security, property damage, and even
loss of life.
<!--end-->
</t>

<t>SenML formats alone do not provide any security and instead rely
on the protocol that carries them to provide security. Applications
using SenML need to look at the overall context of how these formats
will be used to decide if the security is adequate. In particular, for
sensitive sensor data and actuation use, it is important to ensure that
proper security mechanisms are used to provide, e.g., confidentiality,
data integrity, and authentication as appropriate for the usage.</t>

<t>SenML formats defined by this specification do not contain any
executable content. However, future extensions could potentially embed
application-specific executable content in the data.</t>

<t>SenML Records are intended to be interpreted in the context of any
applicable base values. If Records become separated from the Record
that establishes the base values, the data will be useless or, worse,
wrong. Care needs to be taken in keeping the integrity of a Pack that
contains unresolved SenML Records (see <xref target="resolved-records"/>).</t>

<t>See also <xref target="sec-privacy"/>.</t>

</section>
<section anchor="sec-privacy" title="Privacy Considerations">

<t>Sensor data can range from information with almost no privacy
considerations, such as the current temperature in a given city, to
highly sensitive medical or location data. This specification provides
no security protection for the data but is meant to be used inside
another container or transfer protocol such as S/MIME <xref target="RFC5751"/> or
HTTP with TLS <xref target="RFC2818"/> that can provide integrity,
confidentiality, and authentication information about the source of
the data.</t>

<t>The Name fields need to uniquely identify the sources or destinations
of the values in a SenML Pack.  However, the use of long-term stable
and unique identifiers can be problematic for privacy reasons <xref target="RFC6973"/>,
depending on the application and the potential of these identifiers to
be used in correlation with other information.  They should be used
with care or avoided, for example, as described for IPv6 addresses in
<xref target="RFC7721"/>.</t>

</section>



  </middle>

  <back>

    <references title='Normative References'>

<reference anchor="IEEE.754">
<front>
<title>Standard for Binary Floating-Point Arithmetic</title>
<author>
<organization>IEEE</organization>
</author>
<date/>
</front>
<seriesInfo name="IEEE Standard" value="754" />
</reference>

<?rfc include="reference.RFC.2119" ?>
<?rfc include="reference.RFC.3629" ?>
<?rfc include="reference.RFC.3688" ?>
<?rfc include="reference.RFC.4648" ?>
<?rfc include="reference.RFC.8126" ?>
<?rfc include="reference.RFC.6838" ?>
<?rfc include="reference.RFC.7049" ?>
<?rfc include="reference.RFC.8259" ?>
<?rfc include="reference.RFC.7252" ?>
<?rfc include="reference.RFC.7303" ?>
<?rfc include="reference.RFC.8174" ?>



<reference anchor="W3C.REC-exi-20140211"
           target='http://www.w3.org/TR/2014/REC-exi-20140211'>
<front>
<title>Efficient XML Interchange (EXI) Format 1.0 (Second Edition)</title>
<author initials='J.' surname='Schneider' fullname='John Schneider'>
    <organization />
</author>
<author initials='T.' surname='Kamiya' fullname='Takuki Kamiya'>
    <organization />
</author>
<author initials='D.' surname='Peintner' fullname='Daniel Peintner'>
    <organization />
</author>
<author initials='R.' surname='Kyusakov' fullname='Rumen Kyusakov'>
    <organization />
</author>
<date month='February' year='2014' />
</front>
<seriesInfo name='W3C Recommendation' value='REC-exi-20140211' />
</reference>


<reference anchor="W3C.REC-xml-20081126"
           target='http://www.w3.org/TR/2008/REC-xml-20081126'>
<front>
<title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>
<author initials='T.' surname='Bray' fullname='Tim Bray'>
    <organization />
</author>
<author initials='J.' surname='Paoli' fullname='Jean Paoli'>
    <organization />
</author>
<author initials='M.' surname='Sperberg-McQueen' fullname='Michael Sperberg-McQueen'>
    <organization />
</author>
<author initials='E.' surname='Maler' fullname='Eve Maler'>
    <organization />
</author>
<author initials='F.' surname='Yergeau' fullname='Francois Yergeau'>
    <organization />
</author>
<date month='November' year='2008' />
</front>
<seriesInfo name='W3C Recommendation' value='REC-xml-20081126' />
</reference>


<reference anchor="W3C.REC-xmlschema-1-20041028"
           target='http://www.w3.org/TR/2004/REC-xmlschema-1-20041028'>
<front>
<title>XML Schema Part 1: Structures Second Edition</title>
<author initials='H.' surname='Thompson' fullname='Henry Thompson'>
    <organization />
</author>
<author initials='D.' surname='Beech' fullname='David Beech'>
    <organization />
</author>
<author initials='M.' surname='Maloney' fullname='Murray Maloney'>
    <organization />
</author>
<author initials='N.' surname='Mendelsohn' fullname='Noah Mendelsohn'>
    <organization />
</author>
<date month='October' year='2004' />
</front>
<seriesInfo name='W3C Recommendation' value='REC-xmlschema-1-20041028' />
</reference>


<reference anchor="BIPM">
  <front>
    <title>The International System of Units (SI)</title>
    <author >
      <organization>Bureau International des Poids et Mesures
</organization>
    </author>
    <date year="2006"/>
  </front>
  <seriesInfo name="8th" value="Edition"/>
</reference>

<reference anchor="NIST811" >
  <front>
    <title>Guide for the Use of the International System of Units (SI)</title>

    <author initials="A." surname="Thompson">
      <organization></organization>
    </author>
    <author initials="B." surname="Taylor">
      <organization></organization>
    </author>

    <date month="March" year="2008"/>
  </front>
  <seriesInfo name="NIST" value="Special Publication 811"/>
<seriesInfo name='DOI' value='10.6028/NIST.SP.811e2008' />
</reference>

<reference anchor="TIME_T" target="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16">
  <front>
    <title>Open Group Standard - Vol. 1: Base Definitions, Issue 7</title>
    <author >
      <organization>The Open Group Base Specifications</organization>
    </author>
    <date year="2018"/>
  </front>
  <seriesInfo name="Section 4.16," value="&quot;Seconds Since the Epoch&quot;"/>
  <seriesInfo name="IEEE Standard" value="1003.1"/>
</reference>

<reference anchor="RNC" >
  <front>
    <title>Information technology -- Document Schema Definition Language (DSDL) -- Part 2: Regular-grammar-based validation -- RELAX NG</title>
    <author >
      <organization>ISO/IEC</organization>
    </author>
    <date year="2008" month="December"/>
  </front>
  <seriesInfo name="ISO/IEC" value="19757-2"/>
  <seriesInfo name="Annex C:" value="RELAX NG Compact syntax"/>
</reference>

<reference anchor="XPointerFramework" target="http://www.w3.org/TR/2003/REC-xptr-framework-20030325/">
  <front>
    <title>XPointer Framework</title>
    <author initials="P." surname="Grosso">
      <organization></organization>
    </author>
    <author initials="E." surname="Maler">
      <organization></organization>
    </author>
    <author initials="J." surname="Marsh">
      <organization></organization>
    </author>
    <author initials="N." surname="Walsh">
      <organization></organization>
    </author>
    <date year="2003" month="March"/>
  </front>
  <seriesInfo name="W3C Recommendation" value="REC-XPointer-Framework"/>
</reference>

<reference anchor="XPointerElement" target="https://www.w3.org/TR/2003/REC-xptr-element-20030325/">
  <front>
    <title>XPointer element() Scheme</title>
    <author initials="P." surname="Grosso">
      <organization></organization>
    </author>
    <author initials="E." surname="Maler">
      <organization></organization>
    </author>
    <author initials="J." surname="Marsh">
      <organization></organization>
    </author>
    <author initials="N." surname="Walsh">
      <organization></organization>
    </author>
    <date year="2003" month="March"/>
  </front>
  <seriesInfo name="W3C Recommendation" value="REC-xptr-element"/>
</reference>


    </references>

    <references title='Informative References'>

<?rfc include="reference.RFC.8141" ?>
<?rfc include="reference.RFC.3986" ?>
<?rfc include="reference.RFC.4122" ?>
<?rfc include="reference.RFC.5952" ?>
<?rfc include="reference.RFC.6690" ?>
<?rfc include="reference.RFC.6973" ?>
<?rfc include="reference.RFC.7111" ?>
<?rfc include="reference.RFC.7721" ?>

<!--draft-ietf-core-dev-urn-02; Active, I-D exists-->
<reference anchor='DEVICE-URN'>
<front>
<title>Uniform Resource Names for Device Identifiers</title>
<author initials='J' surname='Arkko' fullname='Jari Arkko'>
    <organization />
</author>
<author initials='C' surname='Jennings' fullname='Cullen Jennings'>
    <organization />
</author>
<author initials='Z' surname='Shelby' fullname='Zach Shelby'>
    <organization />
</author>
<date month='July' year='2018' />
</front>
<seriesInfo name='Work in Progress,' value='draft-ietf-core-dev-urn-02' />
</reference>

<!--draft-ietf-cbor-cddl-03; Active, I-D exists-->
<reference anchor='CDDL-CBOR'>
<front>
<title>Concise data definition language (CDDL): a notational convention to express CBOR data structures</title>
<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>
<author initials='C' surname='Vigano' fullname='Christoph Vigano'>
    <organization />
</author>
<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>
<date month='July' year='2018' />
</front>
<seriesInfo name='Work in Progress,' value='draft-ietf-cbor-cddl-03' />
</reference>


<reference anchor="IEEE802.1BA">
  <front>
    <title>IEEE Standard for Local and metropolitan area networks--Audio Video Bridging (AVB) Systems</title>
    <author >
      <organization>IEEE</organization>
    </author>
    <date/>
  </front>
<seriesInfo name='IEEE Standard' value='802.1BA' />
</reference>


<reference anchor="IEEE802.1AS" >
  <front>
    <title>IEEE Standard for Local and Metropolitan Area Networks - Timing and Synchronization for Time-Sensitive Applications in Bridged Local Area Networks</title>
    <author >
      <organization>IEEE</organization>
    </author>
    <date/>
  </front>
<seriesInfo name='IEEE Standard' value='802.1AS' />
</reference>

<reference anchor="UCUM" target="http://unitsofmeasure.org/ucum.html">
  <front>
    <title>The Unified Code for Units of Measure</title>
    <author initials="G." surname="Schadow">
      <organization></organization>
    </author>
    <author initials="C." surname="McDonald">
      <organization></organization>
    </author>
    <date month="November" year="2017"/>
  </front>
  <seriesInfo name="Version" value="2.1"/>
  <seriesInfo name="Regenstrief Institute and the" value="UCUM Organization"/>
</reference>


<reference anchor="ISO-80000-5" >
  <front>
    <title>Quantities and units - Part 5: Thermodynamics</title>
    <author >
      <organization>ISO</organization>
    </author>
    <date year="2007" month="May"/>
  </front>
  <seriesInfo name="ISO" value="80000-5"/>
  <seriesInfo name="Edition" value="1.0"/>
</reference>


<reference anchor="AN1796" target="http://pdfserv.maximintegrated.com/en/an/AN1796.pdf">
  <front>
    <title>Overview of 1-Wire Technology and Its Use</title>
    <author initials="B." surname="Linke" fullname="Bernhard Linke">
      <organization>Maxim Integrated</organization>
    </author>
    <date year="2008" month="June"/>
  </front>
  <seriesInfo name="Tutorial" value="1796"/>
</reference>

<?rfc include="reference.RFC.7230" ?>
<?rfc include="reference.RFC.4944" ?>
<?rfc include="reference.RFC.4151" ?>
<?rfc include="reference.RFC.6920" ?>

<!--draft-ietf-core-interfaces-12; Active, I-D exists-->
<reference anchor="RID-CoRE">
<front>
<title>Reusable Interface Definitions for Constrained RESTful Environments</title>
<author initials='Z' surname='Shelby' fullname='Zach Shelby'>
    <organization />
</author>
<author initials='M' surname='Vial' fullname='Matthieu Vial'>
    <organization />
</author>
<author initials='M' surname='Koster' fullname='Michael Koster'>
    <organization />
</author>
<author initials='C' surname='Groves' fullname='Christian Groves'>
    <organization />
</author>
<author initials='J' surname='Zhu' fullname='Julian Zhu'>
    <organization />
</author>
<author initials='B' surname='Silverajan' fullname='Bill Silverajan'>
    <organization />
</author>
<date month='March' year='2018' />
</front>
<seriesInfo name='Work in Progress,' value='draft-ietf-core-interfaces-11' />
</reference>

<?rfc include="reference.RFC.5751" ?>
<?rfc include="reference.RFC.2818" ?>


    </references>

<section anchor="acknowledgement" title="Acknowledgements" numbered="no">

<t>We would like to thank Alexander Pelov, Alexey Melnikov, Andrew
McClure, Andrew McGregor, Bjoern Hoehrmann, Christian Amsuess,
Christian Groves, Daniel Peintner, Jan-Piet Mens, Jim Schaad, Joe
Hildebrand, John Klensin, Karl Palsson, Lennart Duhrsen, Lisa
Dusseault, Lyndsay Campbell, Martin Thomson, Michael Koster, Peter
Saint-Andre, Roni Even, and Stephen Farrell, for their review
comments.</t>

</section>
  </back>


</rfc>

