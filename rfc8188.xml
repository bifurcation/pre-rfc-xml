<?xml version="1.0" encoding="US-ASCII"?>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc docmapping="yes"?>
<!DOCTYPE rfc
  PUBLIC "" "rfc2629.dtd">
<rfc number="8188" ipr="trust200902" consensus="yes" category="std" submissionType="IETF"><front>

<title abbrev="HTTP Encryption Coding">Encrypted Content-Encoding for
HTTP</title>

<author initials="M." surname="Thomson" fullname="Martin
Thomson"><organization>Mozilla</organization><address><email>martin.thomson@gmail.com</email></address></author>

<date month="June" year="2017"/>

<area>Applications and Real-Time</area><workgroup>HTTP Working
Group</workgroup>

<abstract><t>This memo introduces a content coding for HTTP that allows message payloads to
be encrypted.</t></abstract>

</front>

<middle>

<section anchor="introduction" toc="default" title="Introduction"><t>It is sometimes desirable to encrypt the contents of an HTTP message (request or
response) so that when the payload is stored (e.g., with an HTTP PUT), only
someone with the appropriate key can read it.</t><t>For example, it might be necessary to store a file on a server without exposing
its contents to that server. Furthermore, that same file could be replicated to
other servers (to make it more resistant to server or network failure),
downloaded by clients (to make it available offline), etc.,  without exposing its
contents.</t>

<t>These uses are not met by the use of Transport Layer Security (TLS)
<xref target="RFC5246" format="default"/>, since it only encrypts the
channel between the client and server.</t>
<t>This document specifies a content coding (see Section 3.1.2 of
<xref target="RFC7231" format="default"/>) for HTTP to serve these and
other use cases.</t>

<t>This content coding is not a direct adaptation of message-based
encryption formats -- such as those that are described by <xref
target="RFC4880" format="default"/>, <xref target="RFC5652"
format="default"/>, <xref target="RFC7516" format="default"/>, and
<xref target="XMLENC" format="default"/>.  Those formats are not suited to
stream processing, which is necessary for HTTP.  The format described
here follows more closely to the lower-level constructs described in
<xref target="RFC5116" format="default"/>.</t>

<t>To the extent that message-based encryption formats use the same
primitives, the format can be considered to be a sequence of encrypted
messages with a particular profile.  For instance, <xref target="jwe"
format="default"/> explains how the format is congruent with a
sequence of JSON Web Encryption <xref target="RFC7516"
format="default"/> values with a fixed header.</t><t>This mechanism is
likely only a small part of a larger design that uses content
encryption.  How clients and servers acquire and identify keys will
depend on the use case.  In particular, a key management system is not
described.</t>

<section title="Requirements Language">
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in BCP
14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only
when, they appear in all capitals, as shown here.</t>
</section>
</section>
<section anchor="aes128gcm" toc="default" title="The
&quot;aes128gcm&quot; HTTP Content Coding"><t>The "aes128gcm" HTTP
content coding indicates that a payload has been encrypted using
Advanced Encryption Standard (AES) in Galois/Counter Mode (GCM) as
identified as AEAD_AES_128_GCM in <xref target="RFC5116"
format="default"/>, Section 5.1.  The AEAD_AES_128_GCM algorithm uses
a 128-bit content-encryption key.</t><t>Using this content coding
requires knowledge of a key.  How this key is acquired is not defined
in this document.</t><t>The "aes128gcm" content coding uses a single
fixed set of encryption primitives.  Cipher agility is achieved
by defining a new content-coding scheme.  This ensures that only the
HTTP Accept-Encoding header field is necessary to negotiate the use of
encryption.</t><t>The "aes128gcm" content coding uses a fixed record
size.  The final encoding consists of a header (see <xref
target="header" format="default"/>) and zero or more fixed-size
encrypted records; the final record can be smaller than the record
size.</t><t>The record size determines the length of each portion of
plaintext that is enciphered.  The record size ("rs") is included in
the content-coding header (see <xref target="header"
format="default"/>).</t>

<figure suppress-title="false" align="left" alt="" width="" height="">

<artwork type="drawing" xml:space="preserve" name="" align="left" alt="" width="" height=""><![CDATA[
+-----------+             content
|   data    |             any length up to rs-17 octets
+-----------+
     |
     v
+-----------+-----+       add a delimiter octet (0x01 or 0x02)
|   data    | pad |       then 0x00-valued octets to rs-16
+-----------+-----+       (or less on the last record)
         |
         v
+--------------------+    encrypt with AEAD_AES_128_GCM;
|    ciphertext      |    final size is rs;
+--------------------+    the last record can be smaller
]]></artwork></figure>


<t>AEAD_AES_128_GCM produces ciphertext 16 octets longer than its
input plaintext.  Therefore, the unencrypted content of each record is
shorter than the record size by 16 octets.  Valid records always
contain at least a padding delimiter octet and a 16-octet
authentication tag.</t><t>Each record contains a single padding
delimiter octet followed by any number of zero octets.  The last
record uses a padding delimiter octet set to the value 2, all other
records have a padding delimiter octet value of 1.</t><t>On
decryption, the padding delimiter is the last non-zero-valued octet of
the record.  A decrypter MUST fail if the record contains no non-zero
octet.  A decrypter MUST fail if the last record contains a padding
delimiter with a value other than 2 or if any record other than the
last contains a padding delimiter with a value other than 1.</t><t>The
nonce for each record is a 96-bit value constructed from the record
sequence number and the input-keying material.  Nonce derivation is
covered in <xref target="nonce" format="default"/>.</t><t>The
additional data passed to each invocation of AEAD_AES_128_GCM is a
zero-length octet sequence.</t><t>A consequence of this record
structure is that range requests <xref target="RFC7233"
format="default"/> and random access to encrypted payload bodies are
possible at the granularity of the record size.  Partial records at
the ends of a range cannot be decrypted.  Thus, it is best if range
requests start and end on record boundaries.  However, note that
random access to specific parts of encrypted data could be confounded
by the presence of padding.</t><t>Selecting the record size most
appropriate for a given situation requires a trade-off.  A smaller
record size allows decrypted octets to be released more rapidly, which
can be appropriate for applications that depend on responsiveness.
Smaller records also reduce the additional data required if random
access into the ciphertext is needed.</t><t>Applications that don't
depend on streaming, random access, or arbitrary padding can use
larger records, or even a single record.  A larger record size reduces
processing and data overheads.</t>

<section anchor="header" toc="default" title="Encryption
Content-Coding Header"><t>The content coding uses a header block that
includes all parameters needed to decrypt the content (other than the
key).  The header block is placed in the body of a message ahead of
the sequence of records.</t>

<figure suppress-title="false" align="left" alt="" width="" height=""><artwork type="drawing" xml:space="preserve" name="" align="left" alt="" width="" height=""><![CDATA[
+-----------+--------+-----------+---------------+
| salt (16) | rs (4) | idlen (1) | keyid (idlen) |
+-----------+--------+-----------+---------------+
]]></artwork></figure>

<t><list style="hanging"><t hangText="salt:"> The "salt" parameter
comprises the first 16 octets of the "aes128gcm" content-coding
header.  The same "salt" parameter value MUST NOT be reused for two
different payload bodies that have the same input-keying material;
generating a random salt for every application of the content coding
ensures that content-encryption key reuse is highly unlikely.</t><t
hangText="rs:"> The "rs" or record size parameter contains an unsigned
32-bit integer in network byte order that describes the record size in
octets.  Note that it is, therefore, impossible to exceed the 2^36-31
limit on plaintext input to AEAD_AES_128_GCM.  Values smaller than 18
are invalid.</t><t hangText="idlen:"> The "idlen" parameter is an
unsigned 8-bit integer that defines the length of the "keyid"
parameter.</t><t hangText="keyid:"> The "keyid" parameter can be used
to identify the keying material that is used.  This field is the
length determined by the "idlen" parameter.  Recipients that receive a
message are expected to know how to retrieve keys; the "keyid"
parameter might be input to that process.  A "keyid" parameter SHOULD
be a UTF-8-encoded <xref target="RFC3629" format="default"/> string,
particularly where the identifier might need to be rendered in a
textual form.</t></list></t></section>

<section anchor="derivation" toc="default" title="Content-Encryption
Key Derivation"><t>In order to allow the reuse of keying material for
multiple different HTTP messages, a content-encryption key is derived
for each message.  The content-encryption key is derived from the
"salt" parameter using the HMAC-based key derivation function (HKDF)
described in <xref target="RFC5869" format="default"/> using the
SHA-256 hash algorithm <xref target="FIPS180-4"
format="default"/>.</t><t>The value of the "salt" parameter is the
salt input to the HKDF.  The keying material identified by the "keyid"
parameter is the input-keying material (IKM) to HKDF.  Input-keying
material is expected to be provided to recipients separately.  The
extract phase of HKDF, therefore, produces a pseudorandom key (PRK) as
follows:</t>

<figure suppress-title="false" align="left" alt="" width="" height=""><artwork type="inline" xml:space="preserve" name="" align="left" alt="" width="" height=""><![CDATA[
   PRK = HMAC-SHA-256 (salt, IKM)
]]></artwork></figure>

<t>The info parameter to HKDF is set to the ASCII-encoded string "Content-Encoding:
aes128gcm" and a single zero octet:</t>

<figure suppress-title="false" align="left" alt="" width="" height=""><artwork type="inline" xml:space="preserve" name="" align="left" alt="" width="" height=""><![CDATA[
   cek_info = "Content-Encoding: aes128gcm" || 0x00
]]></artwork></figure>

<t><list style="hanging"><t hangText="Note(1):"> Concatenation of
octet sequences is represented by the <spanx style="verb"
xml:space="preserve">||</spanx> operator.</t><t hangText="Note(2):">
The strings used here and in <xref target="nonce" format="default"/>
do not include a terminating 0x00 octet, as is used in some
programming languages.</t></list></t><t>AEAD_AES_128_GCM requires a
16-octet (128-bit) content-encryption key (CEK), so the length (L)
parameter to HKDF is 16.  The second step of HKDF can, therefore, be
simplified to the first 16 octets of a single HMAC:</t>

<figure suppress-title="false" align="left" alt="" width="" height=""><artwork type="inline" xml:space="preserve" name="" align="left" alt="" width="" height=""><![CDATA[
   CEK = HMAC-SHA-256(PRK, cek_info || 0x01)
]]></artwork></figure></section>

<section anchor="nonce" toc="default" title="Nonce Derivation"><t>The
nonce input to AEAD_AES_128_GCM is constructed for each record.  The
nonce for each record is a 12-octet (96-bit) value that is derived
from the record sequence number, input-keying material, and
"salt" parameter.</t><t>The input-keying material and "salt" parameter are input to
HKDF with different info and length (L) parameters.</t><t>The length (L)
parameter is 12 octets.  The info parameter for the nonce is the
ASCII-encoded string "Content-Encoding: nonce", terminated by a single
zero octet:</t>

<figure suppress-title="false" align="left" alt="" width="" height=""><artwork type="inline" xml:space="preserve" name="" align="left" alt="" width="" height=""><![CDATA[
   nonce_info = "Content-Encoding: nonce" || 0x00
]]></artwork></figure>

<t>The result is combined with the record sequence number -- using exclusive or -- to
produce the nonce.  The record sequence number (SEQ) is a 96-bit unsigned
integer in network byte order that starts at zero.</t><t>Thus, the final nonce
for each record is a 12-octet value:</t>

<figure suppress-title="false" align="left" alt="" width="" height=""><artwork type="inline" xml:space="preserve" name="" align="left" alt="" width="" height=""><![CDATA[
   NONCE = HMAC-SHA-256(PRK, nonce_info || 0x01) XOR SEQ
]]></artwork></figure>

<t>This nonce construction prevents removal or reordering of
records.</t></section></section>

<section anchor="examples" toc="default" title="Examples"><t>This
section shows a few examples of the encrypted-content
coding.</t><t>Note: All binary values in the examples in this section
use base64 encoding with URL and filename safe alphabet <xref
target="RFC4648" format="default"/>.  This includes the bodies of
requests.  Whitespace and line wrapping is added to fit formatting
constraints.</t>

<section anchor="explicit" toc="default" title="Encryption of a Response"><t>Here, a successful HTTP GET response has been encrypted. This uses a record size of 4096 octets and no padding (just the single-octet
 padding delimiter), so only a partial record is present.  The input-keying material is identified by an empty string (that is, the
 "keyid" field in the header is zero octets in length).</t><t>The
 encrypted data in this example is the UTF-8-encoded string "I am the
 walrus".  The input-keying material is the value
 "yqdlZ-tYemfogSmv7Ws5PQ" (in base64url).  The 54-octet content body
 contains a single record and is shown here using 71 base64url
 characters for presentation reasons.</t>

<figure suppress-title="false" align="left" alt="" width="" height=""><artwork type="example" xml:space="preserve" name="" align="left" alt="" width="" height=""><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/octet-stream
Content-Length: 54
Content-Encoding: aes128gcm

I1BsxtFttlv3u_Oo94xnmwAAEAAA-NAVub2qFgBEuQKRapoZu-IxkIva3MEB1PD-
ly8Thjg
]]></artwork></figure>

<t>Note that the media type has been changed to "application/octet-stream" to avoid
exposing information about the content.  Alternatively (and equivalently), the
Content-Type header field can be omitted.</t><t>Intermediate values for this
example (all shown using base64url):</t>

<figure suppress-title="false" align="left" alt="" width="" height=""><artwork type="inline" xml:space="preserve" name="" align="left" alt="" width="" height=""><![CDATA[
salt (from header) = I1BsxtFttlv3u_Oo94xnmw
PRK = zyeH5phsIsgUyd4oiSEIy35x-gIi4aM7y0hCF8mwn9g
CEK = _wniytB-ofscZDh4tbSjHw
NONCE = Bcs8gkIRKLI8GeI8
unencrypted data = SSBhbSB0aGUgd2FscnVzAg
]]></artwork></figure></section>

<section anchor="encryption-with-multiple-records" toc="default"
title="Encryption with Multiple Records"><t>This example shows the
same message with input-keying material of "BO3ZVPxUlnLORbVGMpbT1Q".
In this example, the plaintext is split into records of 25 octets each
(that is, the "rs" field in the header is 25).  The first record
includes one 0x00 padding octet.  This means that there are 7 octets
of message in the first record and 8 in the second.  A key identifier
of the UTF-8-encoded string "a1" is also included in the header.</t>

<figure suppress-title="false" align="left" alt="" width="" height=""><artwork type="example" xml:space="preserve" name="" align="left" alt="" width="" height=""><![CDATA[
HTTP/1.1 200 OK
Content-Length: 73
Content-Encoding: aes128gcm

uNCkWiNYzKTnBN9ji3-qWAAAABkCYTHOG8chz_gnvgOqdGYovxyjuqRyJFjEDyoF
1Fvkj6hQPdPHI51OEUKEpgz3SsLWIqS_uA
]]></artwork></figure></section></section>

<section anchor="security-considerations" toc="default"
title="Security Considerations"><t>This mechanism assumes the presence
of a key management framework that is used to manage the distribution
of keys between valid senders and receivers.  Defining key management
is part of composing this mechanism into a larger application,
protocol, or framework.</t><t>Implementation of cryptography -- and
key management in particular -- can be difficult.  For instance,
implementations need to account for the potential for exposing keying
material on side channels, such as might be exposed by the time it
takes to perform a given operation.  The requirements for a good
implementation of cryptographic algorithms can change over time.</t>

<section anchor="automatic-decryption" toc="default" title="Automatic
Decryption"><t>As a content coding, a "aes128gcm" content coding might
be automatically removed by a receiver in a way that is not obvious to
the ultimate consumer of a message.  Recipients that depend on
content-origin authentication using this mechanism MUST reject
messages that don't include the "aes128gcm" content
coding.</t></section>

<section anchor="message-truncation" toc="default" title="Message
Truncation"><t>This content encoding is designed to permit the
incremental processing of large messages.  It also permits random
access to plaintext in a limited fashion.  The content encoding
permits a receiver to detect when a message is truncated.</t><t>A
partially delivered message MUST NOT be processed as though the entire
message was successfully delivered.  For instance, a partially
delivered message cannot be cached as though it were
complete.</t><t>An attacker might exploit willingness to process
partial messages to cause a receiver to remain in a specific
intermediate state.  Implementations performing processing on partial
messages need to ensure that any intermediate processing states don't
advantage an attacker.</t></section>

<section anchor="key-and-nonce-reuse" toc="default" title="Key and
Nonce Reuse"><t>Encrypting different plaintext with the same
content-encryption key and nonce in AES-GCM is not safe <xref
target="RFC5116" format="default"/>.  The scheme defined here uses a
fixed progression of nonce values.  Thus, a new content-encryption key
is needed for every application of the content coding.  Since input-keying material can be reused, a unique "salt" parameter is needed to
ensure that a content-encryption key is not reused.</t><t>If a
content-encryption key is reused -- that is, if input-keying material
and "salt" parameter are reused -- this could expose the plaintext and the
authentication key, nullifying the protection offered by encryption.
Thus, if the same input-keying material is reused, then the "salt"
parameter MUST be unique each time.  This ensures that the
content-encryption key is not reused.  An implementation SHOULD
generate a random "salt" parameter for every message.</t></section>

<section anchor="limits" toc="default" title="Data Encryption
Limits"><t>There are limits to the data that AEAD_AES_128_GCM can
encipher.  The maximum value for the record size is limited by the
size of the "rs" field in the header (see <xref target="header"
format="default"/>), which ensures that the 2^36-31 limit for a single
application of AEAD_AES_128_GCM is not reached <xref target="RFC5116"
format="default"/>.  In order to preserve a 2^-40 probability of
indistinguishability under chosen plaintext attack (IND-CPA), the
total amount of plaintext that can be enciphered with the key derived
from the same input-keying material and salt MUST be less than 2^44.5
blocks of 16 octets <xref target="AEBounds"
format="default"/>.</t><t>If the record size is a multiple of 16
octets, this means that 398 terabytes can be encrypted safely,
including padding and overhead.  However, if the record size is not a
multiple of 16 octets, the total amount of data that can be safely
encrypted is reduced because partial AES blocks are encrypted.  The
worst case is a record size of 18 octets, for which at most 74
terabytes of plaintext can be encrypted, of which at least half is
padding.</t></section>

<section anchor="content-integrity" toc="default" title="Content
Integrity"><t>This mechanism only provides content-origin
authentication.  The authentication tag only ensures that an entity
with access to the content-encryption key produced the encrypted
data.</t><t>Any entity with the content-encryption key can, therefore,
produce content that will be accepted as valid.  This includes all
recipients of the same HTTP message.</t><t>Furthermore, any entity
that is able to modify both the Content-Encoding header field and the
HTTP message body can replace the contents.  Without the
content-encryption key or the input-keying material, modifications to,
or replacement of, parts of a payload body are not
possible.</t></section>

<section anchor="leaking-information-in-header-fields" toc="default"
title="Leaking Information in Header Fields"><t>Because only the
payload body is encrypted, information exposed in header fields is
visible to anyone who can read the HTTP message.  This could expose
side-channel information.</t><t>For example, the Content-Type header
field can leak information about the payload body.</t><t>There are a
number of strategies available to mitigate this threat, depending upon
the application's threat model and the users' tolerance for leaked
information:</t>

<t><list style="numbers"><t>Determine that it is not an issue. For
example, if it is expected that all content stored will be
"application/json", or another very common media type, exposing the
Content-Type header field could be an acceptable risk.</t><t>If it is
considered sensitive information and it is possible to determine it
through other means (e.g., out of band, using hints in other
representations, etc.), omit the relevant headers, and/or normalize
them. In the case of Content-Type, this could be accomplished by
always sending Content-Type: application/octet-stream (the most
generic media type), or no Content-Type at all.</t><t>If it is
considered sensitive information and it is not possible to convey it
elsewhere, encapsulate the HTTP message using the application/http
media type (see Section 8.3.2 of <xref target="RFC7230"
format="default"/>), encrypting that as the payload of the "outer"
message.</t></list></t></section>

<section anchor="poisoning-storage" toc="default" title="Poisoning
Storage"><t>This mechanism only offers data-origin authentication; it
does not perform authentication or authorization of the message
creator, which could still need to be performed (e.g., by HTTP
authentication <xref target="RFC7235" format="default"/>).</t><t>This
is especially relevant when an HTTP PUT request is accepted by a
server without decrypting the payload; if the request is
unauthenticated, it becomes possible for a third party to deny service
and/or poison the store.</t></section>

<section anchor="sizing-and-timing-attacks" toc="default"
title="Sizing and Timing Attacks"><t>Applications using this mechanism
need to be aware that the size of encrypted messages, as well as their
timing, HTTP methods, URIs and so on, may leak sensitive information.
See, for example, <xref target="NETFLIX" format="default"/> or <xref
target="CLINIC" format="default"/>.</t><t>This risk can be mitigated
through the use of the padding that this mechanism provides.
Alternatively, splitting up content into segments and storing them
separately might reduce exposure. HTTP/2 <xref target="RFC7540"
format="default"/> combined with TLS <xref target="RFC5246"
format="default"/> might be used to hide the size of individual
messages.</t><t>Developing a padding strategy is difficult.  A good
padding strategy can depend on context.  Common strategies include
padding to a small set of fixed lengths, padding to multiples of a
value, or padding to powers of 2.  Even a good strategy can still
cause size information to leak if processing activity of a recipient
can be observed.  This is especially true if the trailing records of a
message contain only padding.  Distributing non-padding data across
records is recommended to avoid leaking size
information.</t></section></section>

<section anchor="iana" toc="default" title="IANA Considerations">

<section anchor="the-aes128gcm-http-content-coding" title="The
&quot;aes128gcm&quot; HTTP Content Coding">

<t>This memo registers the
"aes128gcm" HTTP content coding in the "HTTP Content Coding Registry",
as detailed in <xref target="aes128gcm"
format="default"/>.</t>

<t><list style="symbols"><t>Name:
aes128gcm</t>
<t>Description: AES-GCM encryption with a 128-bit
content-encryption key</t>
<t>Reference: this specification</t></list></t></section></section>

</middle>
<back>

<references title="Normative References">
<?rfc include="reference.RFC.2119" ?>
<?rfc include="reference.RFC.3629" ?>
<?rfc include="reference.RFC.5116" ?>
<?rfc include="reference.RFC.5869" ?>
<?rfc include="reference.RFC.7230" ?>
<?rfc include="reference.RFC.7231" ?>
<?rfc include="reference.RFC.8174" ?>


<reference anchor="FIPS180-4" target="http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf">
<front>
<title>Secure Hash Standard (SHS)</title>
<author><organization>National Institute of Standards and Technology</organization></author>
<date month="August" year="2015" /></front>
<seriesInfo name="FIPS" value="PUB 180-4"/>
<seriesInfo name="DOI" value="10.6028/NIST.FIPS180-4"/>
</reference>





</references>

<references title="Informative References">
<?rfc include="reference.RFC.4648" ?>
<?rfc include="reference.RFC.4880" ?>
<?rfc include="reference.RFC.5246" ?>
<?rfc include="reference.RFC.5652" ?>
<?rfc include="reference.RFC.7233" ?>
<?rfc include="reference.RFC.7235" ?>
<?rfc include="reference.RFC.7516" ?>
<?rfc include="reference.RFC.7540" ?>





<reference anchor='XMLENC'
           target='http://www.w3.org/TR/2013/REC-xmlenc-core1-20130411'>
<front>
<title>XML Encryption Syntax and Processing Version 1.1</title>

<author initials='D.' surname='Eastlake' fullname='Donald Eastlake'>
    <organization />
</author>

<author initials='J.' surname='Reagle' fullname='Joseph Reagle'>
    <organization />
</author>

<author initials='F.' surname='Hirsch' fullname='Frederick Hirsch'>
    <organization />
</author>

<author initials='T.' surname='Roessler' fullname='Thomas Roessler'>
    <organization />
</author>

<date month='April' day='11' year='2013' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-xmlenc-core1-20130411' />
<format type='HTML' target='http://www.w3.org/TR/2013/REC-xmlenc-core1-20130411' />
</reference>

<reference anchor="AEBounds"
target="http://www.isg.rhul.ac.uk/~kp/TLS-AEbounds.pdf"><front><title>Limits
on Authenticated Encryption Use in TLS</title><author initials="A."
surname="Luykx"><organization/></author><author initials="K."
surname="Paterson"><organization/></author><date year="2016" month="March"
day="08"/></front></reference>

<reference anchor="CLINIC"
	   target="https://arxiv.org/abs/1403.0297"><front><title>I Know Why
You Went to the Clinic: Risks and Realization of HTTPS Traffic
Analysis</title><author initials="B."
surname="Miller"><organization/></author><author initials="L."
surname="Huang"><organization/></author><author initials="A.D."
surname="Joseph"><organization/></author><author initials="J.D."
surname="Tygar"><organization/></author><date year="2014" month="March"
day="03"/></front>
<seriesInfo name="DOI" value="10.1007/978-3-319-08506-7_8" /></reference>

<reference anchor="NETFLIX"><front><title>Identifying HTTPS-Protected Netflix
Videos in Real-Time</title><author initials="A." surname="Reed"
fullname="Andrew Reed"><organization/></author><author initials="M."
surname="Kranch" fullname="Michael Kranch"><organization/></author><date
year="2017"/></front><seriesInfo name="Proceedings of the Seventh ACM on
Conference on Data and Application Security and Privacy"
value="CODASPY '17"/><seriesInfo name="DOI"
value="10.1145/3029806.3029821"/></reference>
</references>
<section anchor="jwe" toc="default" title="JWE Mapping"><t>The "aes128gcm" content coding can be considered as a sequence of JSON Web
Encryption (JWE) <xref target="RFC7516" format="default"/> objects, each corresponding to a single fixed-size
record that includes trailing padding.  The following transformations are applied
to a JWE object that might be expressed using the JWE Compact Serialization:</t><t><list style="symbols"><t>The JWE Protected Header is fixed to the value { "alg": "dir", "enc": "A128GCM"
}, describing direct encryption using AES-GCM with a 128-bit content-encryption key.  This header is not transmitted, it is instead implied by the
value of the Content-Encoding header field.</t><t>The JWE Encrypted Key is
empty, as stipulated by the direct encryption algorithm.</t>


<t>The JWE Initialization Vector ("iv") for each record is set to the exclusive-or of the 96-bit record sequence number, starting at zero, and a value derived
from the input-keying material (see <xref target="nonce" format="default"/>).  This value is also not
transmitted.</t><t>The final value is the concatenated header, JWE Ciphertext, and JWE
Authentication Tag, all expressed without base64url encoding.  The "."
separator is omitted, since the length of these fields is
known.</t></list></t>
<t>Thus, the example in <xref target="explicit" format="default"/> can be rendered using the JWE Compact
Serialization as:</t>
<figure suppress-title="false" align="left" alt="" width="" height=""><artwork type="example" xml:space="preserve" name="" align="left" alt="" width="" height=""><![CDATA[
eyAiYWxnIjogImRpciIsICJlbmMiOiAiQTEyOEdDTSIgfQ..Bcs8gkIRKLI8GeI8.
-NAVub2qFgBEuQKRapoZuw.4jGQi9rcwQHU8P6XLxOGOA
]]></artwork></figure>


<t>Where the first line represents the fixed JWE Protected Header, an empty JWE
Encrypted Key, and the algorithmically determined JWE Initialization Vector.
The second line contains the encoded body, split into JWE Ciphertext and JWE
Authentication Tag.</t></section>

<section anchor="acknowledgements" toc="default" title="Acknowledgements" numbered="no"><t>Mark Nottingham was an original author of this document.</t><t>The following people provided valuable input: Richard Barnes, David Benjamin,
Peter Beverloo, JR Conlin, Mike Jones, Stephen Farrell, Adam Langley, James
Manger, John Mattsson, Julian Reschke, Eric Rescorla, Jim Schaad, and Magnus
Westerlund.</t></section>

</back>
</rfc>
