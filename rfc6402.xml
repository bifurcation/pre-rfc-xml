<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xlst' ?>
<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>

<rfc number="6402" 
     category="std" 
     ipr="trust200902" 
     updates="5272, 5273, 5274" 
     submissionType="IETF">

  <front>
    <title abbrev="CMC: Updates">Certificate Management over CMS (CMC) Updates</title>
    <author fullname="Jim Schaad" initials="J." surname="Schaad">
      <organization>Soaring Hawk Consulting</organization>
      <address>
        <email>jimsch@augustcellars.com</email>
      </address>
    </author>
    <date month="November" year="2011"/>

    <abstract>
      <t>
        This document contains a set of updates to the base syntax for CMC, a
        Certificate Management protocol using the Cryptographic Message
        Syntax (CMS).  This document updates RFC 5272, RFC 5273, and RFC 5274.
      </t>
      <t>The new items in this document are: new controls for future
      work in doing server side key generation, definition of a
      Subject Information Access value to identify CMC servers, and the registration of a port number for TCP/IP for the CMC service to run on.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">

      <t>
        While dealing with the Suite B profile of CMC
        <xref target="SUITEB-CMC"/>, a number of deficiencies were noted in the
        current base CMC specification.  This document has a set of updates
        to <xref target="RFC5272"/>, <xref target="RFC5273"/>, and <xref target="RFC5274"/>
        to deal with those issues.
      </t>

      <section title="Requirements Terminology">

        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
          document are to be interpreted as described in <xref target="RFC2119"/>.
        </t>
      </section>

      <section title="Abbreviations">
	
	<t>
	  The following abbreviations are used in this document. Terms are used
as defined in Section 2.1 of RFC 5272.
	  
	  <figure><artwork>
   CA   - Certification Authority
   CRL  - Certificate Revocation List
   CRMF - Certificate Request Message Format
   EE   - End-Entity
   MAC  - Message Authentication Code
   PKI  - Public Key Infrastructure
   RA   - Registration Authority
	  </artwork></figure>
	</t>
    </section>
    </section>

    <section title='Updates to RFC 5272 - "Certificate Management over CMS (CMC)"'>
      <section title='New Section 1.3 - "Updates Made by RFC 6402"'>

        <t>
          Insert this section before the current Section 1.3.
        </t>

        <t>
          The following updates were made by RFC 6402.

	  <list style="symbols">
            <t>Add new controls:
              <list style="hanging">
		<t hangText="RA Identity Witness">allows for an RA to perform identity
		  checking using the identity and shared-secret, and then tell any
		  following servers that the identity check was successfully
		  performed.
		</t>
		<t hangText="Response Body">allows for an RA to identify a nested response for an EE to process.</t>
              </list>
	    </t>
	    <t>Create a new attribute, Change Subject Name, that allows a client to request a change in
	      the subject name and subject alternate name fields in a
	      certificate.
	    </t>
            <t>Add Extended Key Usages for CMC to distinguish server types.</t>
            <t>Define a new Subject Information Access type to hold locations to contact the CMC server.
            </t>
            <t>Clarify that the use of a pre-existing certificate is not limited to just renewal and rekey messages and is required for support.  This formalizes a requirement for the ability to do renewal and rekey that previously was implicit.</t>
	  </list>
        </t>
      </section>

      <section title='Update Section 6 - "Controls"'>
        <t>Update Table 1 by adding the following rows:</t>
        <texttable title="Addition to Table 1: CMC Control Attributes">
          <ttcol align="left">Identifier Description</ttcol>
          <ttcol align="left">OID</ttcol>
          <ttcol align="left">ASN.1 Structure</ttcol>
          <ttcol align="left">Section</ttcol>
          <c>id-cmc-raIdentityWitness</c><c>id-cmc 35</c><c>BodyPartPath</c><c>6.20</c>
          <c>id-cmc-responseBody</c><c>id-cmc 37</c><c>BodyPartPath</c><c>6.21</c>
        </texttable>
      </section>

      <section title='Replace Section 6.3 - "Linking Identity and POP Information"'>
        <t>Replace the text of the section with the following text.</t>

        <t>
          In a CMC Full PKI Request, identity proof information about the client is
          carried in the certificate associated with the signature of the SignedData containing the
          certification requests, one of the two identity proof controls or the MAC computed for the AuthenticatedData containing the certification requests.
          Proof-of-possession (POP) information for key
          pairs, however, is carried separately for each PKCS #10 or CRMF
          certification request.  (For keys capable of generating a digital
          signature, the POP is provided by the signature on the PKCS #10 or
          CRMF request.  For encryption-only keys, the controls described in
          Section 6.7 are used.)  In order to prevent substitution-style
          attacks, the protocol must guarantee that the same entity supplied
          both the POP and proof-of-identity information.
        </t>

        <t>
          We describe three mechanisms for linking identity and POP
          information: witness values cryptographically derived from a
          shared-secret (Section 6.3.1), shared-secret/subject
          name matching (Section 6.3.2), and subject name matching to an existing
          certificate (Section 6.3.3).  Clients and servers MUST support the witness
          value and the certificate linking techniques.  
          Clients and servers MAY support shared-secret/name matching or 
          MAY support other bilateral techniques of similar
          strength.  The idea behind the first two mechanisms is to force the
          client to sign some data into each certification request that can be
          directly associated with the shared-secret; this will defeat attempts
          to include certification requests from different entities in a single
          Full PKI Request.
        </t>
      </section>

      <section title='Replace Section 6.3.3 - "Renewal and Rekey Messages"'>

        <t>
          Make the new section title "Existing Certificate Linking".  Replace all text in this section with this text.
        </t>

        <t>
          Linking between the POP and an identity is easy when an existing
          certificate is used.  The client copies all of the naming information
          from the existing certificate (subject name and subject alternative name)
          into the new certification request.  The POP on the new public key is
          then performed by using the new key to sign the identity information (linking the POP to a specific identity).
          The identity information is then tied to the POP information by signing the entire enrollment request with the private key of the existing certificate.
        </t>

        <t>
          Existing certificate linking can be used in the following
          circumstances:
          <list style="empty">
            <t>When replacing a certificate by doing a renewal or rekey
              certification request.</t>
            <t>Using an existing certificate to get a new certificate.  An
      example of this would be to get a key establishment certificate
      after having gotten a signature certificate.</t>
            <t>Using a third-party certificate to get a new certificate from a
      CA.  An example of this would be using a certificate and key pair
      distributed with a device to prove an identity.  This requires
      that the CA have an out-of-band channel to map the identity in the device certificate
      to the new EE identity.</t>
          </list>
        </t>
      </section>

      <section title='New Section 6.20 - "RA Identity Proof Witness Control"'>
        <t>Insert this section.</t>
        <t>
          The RA Identity Proof Witness control allows an RA to indicate to
          subsequent control processors that all of the identity proof
          requirements have been met.  This permits the identity proof to be
          performed at a location closer to the end-entity.  For example, the
          identity proof could be done at multiple physical locations, while the CA could
          operate on a company-wide basis.
          The RA performs the identity proof, and
          potentially other tasks that require the secret to be used, while the
          CA is prevented from knowing the secret.  If the
          identity proof fails, then the RA returns an error to the client
          denoting that fact.
        </t>

        <t>
          The relevant ASN.1 for the RA Identity Proof Witness control is as
          follows:
        </t>

<figure><artwork>
   cmc-raIdentityWitness CMC-CONTROL ::=
      { BodyPartPath IDENTIFIED BY id-cmc-raIdentityWitness }

   id-cmc-raIdentityWitness OBJECT IDENTIFIER ::= {id-cmc 35}
</artwork></figure>

        <t>
          The above ASN.1 defines the following items:

          <list style="hanging">
            <t hangText="cmc-raIdentityWitness"> is a CMC-CONTROL associating the object identifier id-cmc-raIdentityWitness and the type BodyPartPath.  This object is omitted from the 1988 module. The object is added to the object set Cmc-Control-Set.  The control is permitted to appear only in the control
          sequence of a PKIData object.  It MUST NOT appear in the
          control sequence of a PKIResponse.  The control is permitted to
          be used only by an RA.  The control may appear multiple times in a control
          sequence with each occurrence pointing to a different object.
            </t>

            <t hangText="id-cmc-raIdentityWitness"> is the object identifier used to identify this CMC control.
            </t>

            <t hangText="BodyPartPath"> is the type structure associated with the control.  The syntax of BodyPartPath is defined in Section 3.2.2.  The path contains a sequence of body part identifiers leading to one of the following items:
              <list style="hanging">
                <t hangText="Identity Proof control"> if the RA verified the identity proof in this
                  control.</t>
                <t hangText="Identity Proof Version 2 control"> if the RA verified the identity proof in
                  this control.</t>
                <t hangText="Full PKI Request"> if the RA performed an out-of-band identity proof
                  for this request.  The request SHOULD NOT contain either Identity
                  Proof control.</t>
                <t hangText="Simple PKI Request"> if the RA performed an out-of-band identity proof
                  for this request.</t>
              </list>
            </t>
          </list>
        </t>

        <t>
          The RA Identity Proof Witness control will frequently be associated
          with a Modify Certification Request control, which changes the name
          fields in the associated certification requests.  This is because the RA
          knows the actual name to be assigned to the entity
          requesting the certificate, and the end-entity does not yet have the details of the
          name. <cref source="Kent">Sentence is too long</cref>  (The association would be set up by the operator
          at the time the shared-secret was generated by the RA.)
        </t>

        <t>
          When this control is placed in a message, it is RECOMMENDED that the
          Control Processed control be placed in the body sequence as well.
          Using the explicit new control, rather than implicitly relying on the
          Control Processed control is important due to the need to know explicitly
          which identity proofs have been performed.  The new control also allows
          an RA to state that out-of-band identity proofs have been performed.
        </t>

	<t>
	  When the identity proof is performed by an RA, the RA also MUST validate the linking between the identity proof and the name information wrapped inside of the key proof-of-possession.
	</t>
      </section>

      <section title='New Section 6.21 - "Response Body Control"'>

        <t>Insert this section.</t>

        <t>The Response Body Control is designed to enable an RA to inform an EE that there is an embedded response message that MUST be processed as part of the processing of this message.

          This control is designed to be used in a couple of different cases where an RA has done some additional processing for the certification request, e.g., as key generation.

          When an RA performs key generation on behalf of an EE, the RA MUST respond with both the original response message from the certificate issuer (containing the certificate issuance) as part of the response generated by the RA (containing the new key).

          Another case where this is useful is when the secret is shared between the RA and the EE (rather than between the CA and the EE) and the RA returns the Publish Trust Anchors control (to populate the correct trust points).</t>

        <t>The relevant ASN.1 for the Response Body Control is as follows:</t>

        <figure><artwork>
  cmc-responseBody CMC-CONTROL ::= {
     BodyPartPath IDENTIFIED BY id-cmc-responseBody
  }

  id-cmc-responseBody OBJECT IDENTIFIER ::= {id-cmc 37}
</artwork></figure>

        <t>The above ASN.1 defines the following items:
          <list style="hanging">
            <t hangText="cmc-responseBody"> is a CMC-CONTROL associating the object identifier id-cmc-responseBody with the type BodyPartPath.  This object is omitted from the 1988 module.  The object is added to the object set Cmc-Control-Set.  The control is permitted to appear only in the control sequence of a PKIResponse.  The control MUST NOT appear in the control sequence of a PKIData.  It is expected that only an intermediary RA will use this control; a CA generally does not need the control as it is creating the original innermost message.</t>
            <t hangText="id-cmc-responseBody"> is the object identifier used to identify this CMC control.</t>
            <t hangText="BodyPartPath"> is the type structure associated with the control.  The syntax of BodyPartPath is defined in Section 3.2.2.  The path contains a sequence of body part identifiers leading to a cmsSequence item which contains a PKIResponse within it.</t>
          </list>
        </t>
      </section>

      <section title='New Section 7 - "Other Attributes"'>
        <t>Insert this section before the current Section 7.</t>

        <t>There are a number of different locations where various types of attributes can be placed in either a CMC request or a CMC response message.
          These places include the attribute sequence of a PKCS #10 request,
          controls in CRMF (Section 6 of <xref target="RFC4211"/>),
          and the various CMS attribute sequences.</t>
      </section>
      
      <section title='New Section 7.1 - "Change Subject Name Attribute"'>
        <t>Insert this section.</t>
        <t>
          The Client Name Change Request attribute is designed for a client to
          ask for a change in its name as part of a certification
          request.  Because of security issues, this cannot
          be done in the simple way of just changing the requested subject name
          in the certificate template.  The name in
          the certification request MUST match the name in the certificate
          used to verify the request, in order that identity and possession proofs
          are correctly applied.
        </t>

        <t>
          The relevant ASN.1 for the Client Name Change Request attribute is as
          follows:
        </t>

        <figure><artwork>
   at-cmc-changeSubjectName ATTRIBUTE ::=
      { ChangeSubjectName IDENTIFIED BY id-cmc-changeSubjectName }

   id-cmc-changeSubjectName OBJECT IDENTIFIER ::= {id-cmc 36}

   ChangeSubjectName ::= SEQUENCE {
       subject             Name OPTIONAL,
       subjectAlt          SubjectAltName OPTIONAL
   }
   (WITH COMPONENTS {..., subject PRESENT} |
         COMPONENTS {..., subjectAlt PRESENT} )
        </artwork></figure>

        <t>
          The attribute is designed to be used as an ATTRIBUTE object.  As such,
          the attribute is placed in one of the following two places:
          <list>
            <t>The attributes field in a CertificationRequest.</t>
            <t>The controls field of a CertRequest for a CRMF certification
              request.</t>
          </list>
        </t>

        <t>
          The control is identified by the Object Identifier id&nbhy;cmc&nbhy;changeSubjectName.
        </t>

        <t>
          The ASN.1 type associated with control is ChangeSubjectName.  The
          fields of the structure are configured as follows:
          <list style="hanging">
            <t hangText="subject"> contains the requested subject name for the new certificate.</t>

            <t hangText="subjectAlt"> contains the requested subject alternative name for the
              new certificate.</t>
          </list>
        </t>

        <t>
          At least one of the fields in the sequence MUST be present when
          encoding the structure.
        </t>

        <t>
          When the CA processes this attribute in a certification request, it
          will do the following:
          <list style="numbers">
            <t>If
              present, the subject field is copied to the name field of the template.  If the subject field is absent, the name field of the
              template will be set to a empty sequence.</t>
            <t>If present, the subjectAlt field is used as the content of a SubjectAltName
              extension in the certificate.  If the
              subjectAlt field is absent, the subjectAltName
              extension is removed from the certificate template.</t>
          </list>
        </t>
      </section>

      <section title='New Section 9 - "Certificate Requirements"'>
        <t>
          Insert this section before the current Section 8.
        </t>

        <t>
          Certificates for servers used in the CMC protocol SHOULD conform to
          the profile defined in <xref target="RFC5280"/>.  This document defines some
          additional items that MAY appear in CMC server certificates.  Section
          9.1 defines some additional values for the Extended Key Usage extension.
          Section 9.2 defines a new Subject Information
          Access value that allows for a CMC certificate to publish
          information on how to contact the services it provides.
        </t>
      </section>
      <section title='New Section 9.1 - "Extended Key Usage"'>
        <t>Insert this section.</t>

        <t>
          The Extended Key Usage (EKU) extension is used to restrict the use of
          a certificate to specific applications.  We define three different
          EKUs in this document.  The ASN.1 to define these EKUs is:
        </t>

        <figure><artwork>
   id-kp-cmcCA OBJECT IDENTIFIER ::= { id-kp 27 }
   id-kp-cmcRA OBJECT IDENTIFIER ::= { id-kp 28 }
   id-kp-cmcArchive OBJECT IDENTIFIER ::= { id-kp 29 }
        </artwork></figure>

        <t>
          The usage description for each of the EKUs is as follows:
          <list style="hanging">
            <t hangText="CMC Certification Authorities"> are identified by the id-kp-cmcCA
      extended key usage.  The certificate may be the same as or
      different than the CA
      certificate.  If a
      different certificate is used, the certificates containing the id-kp-cmcCA extended key usage SHOULD have the same name as
      the certificate used for issuing the certificates.  (Using a
      separate key pair for CMC protocol operations and for issuing
      certificates and CRLs decreases the number of operations for which
      the private key used to sign certificates and CRLs would be used.)</t>

            <t hangText="CMC Registration Authorities"> are identified by the id-kp-cmcRA
      extended key usage.  This usage is placed into RA certificates.</t>
            <t hangText="CMC Archive Servers"> are identified by the id-kp-cmcArchive extended
      key usage.  CMC Archive Servers and the associated protocol are to
      be defined in a future document.</t>
          </list>
        </t>
      </section>

      <section title='New Section 9.2 - "Subject Information Access"'>
        <t>Insert this section.</t>

        <t>
   The subject information access extension indicates how to access 
   information and services for the subject of the certificate.  We
   define a new value for use in this extension, to identify the
   different locations that CMC services will be available.  If this
   value is placed in a certificate, an appropriate extended key usage
   defined in Section 9.1 MUST be included in the certificate as well.
   </t>

        <t>
   The id-ad-cmc OID is used when the subject offers certification
   services using the CMC protocol.  If the CMC services are
   available via HTTP or FTP, accessLocation MUST be a
   uniformResourceIdentifier.  If the CMC services are available via
   electronic mail, accessLocation MUST be an rfc822Name.  If CMC
   services are available using TCP/IP, the dNSName or iPAddress name
   forms MUST be used. Since the GeneralName data structure does not permit the inclusion of a port number, in the absence of other external configuration information, the value of 5318 should be used. (The port registration is in Section 3.2.)
  The semantics of other name forms of
   accessLocation (when accessMethod is id-ad-cmc) are not defined by
   this specification.
   </t>

        <t>
The ASN.1 type for this extension is GeneralName (see Section
4.2.1.8 of <xref target="RFC5280"/>).
        </t>

        <t>
          id-ad-cmc OBJECT IDENTIFIER ::= { id-ad 12 }
        </t>
      </section>
      <section title='Update Section 8 - "Security Considerations"'>
        <t>Add the following paragraphs to the end of Section 8.</t>
        <t>A number of controls such as the RA Identity Proof Witness
          control exist for an RA to either make assertions about or
          modify a certification request.
          Any upstream request processor, such as a CA, MUST verify
          that the RA is fully identified and authorized to make the assertion or modification it is claiming.
          If it is not identified or authorized, then any request MUST be rejected.</t>
        <t>CMC servers, both RAs and CAs, need to perform due diligence in checking the contents of a certification request.  At an absolute minimum, all fields should be checked to ensure that the policies of the CA/RA are correctly enforced.  While all fields need to be checked, special care should be taken with names, name forms, algorithm choices, and algorithm parameters.</t>
      </section>
    </section>

    <section title='Updates to RFC 5273 - "Certificate Management over CMS (CMC): Transport Protocols"'>
      <section title='Update Section 5 - "TCP-Based Protocol"'>
        <t>Replace paragraph 3 in Section 5 with the following.</t>
        <t>CMC requires a registered port number to send and receive CMC messages over TCP.  The title of this IP Protocol number is "pkix&nbhy;cmc".  The value of this TCP port is 5318.</t>
        <t>Prior to this update, CMC did not have a registered port number and used an externally configured port from the Private Port range.  Client implementations MAY want to continue to allow for this to occur.  Servers SHOULD change to use the new port.  It is expected that HTTP will continue to be the primary transport method used by CMC installations.</t>
      </section>
      <section title='New Section 6 - "IANA Considerations"'>
        <t>Insert this new section before the current Section 6.</t>
        <t>IANA has assigned a TCP port number in the Registered Port Number range for the use of CMC.  

<figure><artwork>
Service name: pkix-cmc
Port Number: 5318
Transport protocol: TCP
Description: PKIX Certificate Management using CMS (CMC)
Reference: RFC 6402
Assignee: iesg@ietf.org
Contact: chair@ietf.org
</artwork></figure>
        </t>
      </section>
    </section>

    <section title='Updates to RFC 5274 - "Certificate Management Message over CMS (CMC): Compliance Requirements"'>
      <section title='Update to Section 4.2 - "Controls"'>
        <t>
          Add the following lines to the end of Table 1.
        </t>

	  <t>The following table lists the name and level of support
	    required for each control.</t
>
	<texttable title="Addition to Table 1: CMC Control Attributes">
	  <ttcol align="left">Control</ttcol>
	  <ttcol align="left">EE</ttcol>
	  <ttcol align="left">RA</ttcol>
	  <ttcol align="left">CA</ttcol>
          <c>RA Identity Proof Witness</c><c>N/A</c><c>MUST</c><c>(2)</c>
          <c>Response Body</c><c>(6)</c><c>(6)</c><c>N/A</c>
        </texttable>
        <t>The following note should be added.</t>
        <t><list style="hanging">
	    <t hangText="6.">EE's SHOULD implement if designed to work
	    with RAs and MUST implement if intended to be used in
	    environments where RAs are used for identity validation or
	    key generation.  RAs SHOULD implement and validate
	    responses for consistency.</t>
	</list></t>
      </section>
    </section>

    <section title="IANA Considerations">
      <t>This document contains a new IANA Considerations section to be added to <xref target="RFC5273"/> as part of this update. </t>
    </section>
    <section title="Security Considerations">
      <t>No changes are made to the existing security considerations of RFC 5273 and RFC 5274.  The security considerations for RFC 5272 have been slightly modified (Section 2.12).</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">


<reference anchor='RFC2119'>

<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year='1997' month='March' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='http://www.rfc-editor.org/rfc/rfc2119.txt' />
<format type='HTML' octets='17491' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5777' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>

<reference anchor='RFC5272'>

<front>
<title>Certificate Management over CMS (CMC)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'>
<organization /></author>
<author initials='M.' surname='Myers' fullname='M. Myers'>
<organization /></author>
<date year='2008' month='June' />
<abstract>
<t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:&lt;/t>&lt;t> 1. The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and&lt;/t>&lt;t> 2. The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.&lt;/t>&lt;t> CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5272' />
<format type='TXT' octets='167138' target='http://www.rfc-editor.org/rfc/rfc5272.txt' />
</reference>


<reference anchor='RFC5273'>

<front>
<title>Certificate Management over CMS (CMC): Transport Protocols</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'>
<organization /></author>
<author initials='M.' surname='Myers' fullname='M. Myers'>
<organization /></author>
<date year='2008' month='June' />
<abstract>
<t>This document defines a number of transport mechanisms that are used to move CMC (Certificate Management over CMS (Cryptographic Message Syntax)) messages.  The transport mechanisms described in this document are HTTP, file, mail, and TCP. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5273' />
<format type='TXT' octets='14030' target='http://www.rfc-editor.org/rfc/rfc5273.txt' />
</reference>

<reference anchor='RFC5274'>

<front>
<title>Certificate Management Messages over CMS (CMC): Compliance Requirements</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'>
<organization /></author>
<author initials='M.' surname='Myers' fullname='M. Myers'>
<organization /></author>
<date year='2008' month='June' />
<abstract>
<t>This document provides a set of compliance statements about the CMC (Certificate Management over CMS) enrollment protocol.  The ASN.1 structures and the transport mechanisms for the CMC enrollment protocol are covered in other documents.  This document provides the information needed to make a compliant version of CMC. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5274' />
<format type='TXT' octets='27380' target='http://www.rfc-editor.org/rfc/rfc5274.txt' />
</reference>


<reference anchor='RFC5280'>

<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author initials='D.' surname='Cooper' fullname='D. Cooper'>
<organization /></author>
<author initials='S.' surname='Santesson' fullname='S. Santesson'>
<organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'>
<organization /></author>
<author initials='S.' surname='Boeyen' fullname='S. Boeyen'>
<organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'>
<organization /></author>
<author initials='W.' surname='Polk' fullname='W. Polk'>
<organization /></author>
<date year='2008' month='May' />
<abstract>
<t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5280' />
<format type='TXT' octets='352580' target='http://www.rfc-editor.org/rfc/rfc5280.txt' />
</reference>
      
    </references>

    <references title="Informative References">

<reference anchor='CMS'>

<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author initials='R.' surname='Housley' fullname='R. Housley'>
<organization /></author>
<date year='2009' month='September' />
<abstract>
<t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='STD' value='70' />
<seriesInfo name='RFC' value='5652' />
<format type='TXT' octets='126813' target='http://www.rfc-editor.org/rfc/rfc5652.txt' />
</reference>


<!-- turner-suiteb-cmc in queue in EDIT*R -->
<reference anchor='SUITEB-CMC'>
<front>
<title>Suite B Profile of Certificate Management over CMS</title>

<author initials='L' surname='Zieglar' fullname='Lydia Zieglar'>
    <organization />
</author>

<author initials='S' surname='Turner' fullname='Sean Turner'>
    <organization />
</author>

<author initials='M' surname='Peck' fullname='Michael Peck'>
    <organization />
</author>

<date month='June' day='30' year='2010' />

<abstract><t>The United States Government has published guidelines for "NSA Suite B Cryptography", which defines cryptographic algorithm policy for national security applications.  This document specifies a profile of the Certificate Management over CMS (CMC) protocol for managing Suite B X.509 public key certificates.  This profile is a refinement of RFC 5272, RFC 5273, and RFC 5274.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>


<reference anchor='RFC4211'>

<front>
<title>Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'>
<organization /></author>
<date year='2005' month='September' />
<abstract>
<t>This document describes the Certificate Request Message Format (CRMF) syntax and semantics.  This syntax is used to convey a request for a certificate to a Certification Authority (CA), possibly via a Registration Authority (RA), for the purposes of X.509 certificate production.  The request will typically include a public key and the associated registration information.  This document does not define a certificate request protocol. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4211' />
<format type='TXT' octets='86136' target='http://www.rfc-editor.org/rfc/rfc4211.txt' />
</reference>


<reference anchor='RFC5912'>

<front>
<title>New ASN.1 Modules for the Public Key Infrastructure Using X.509 (PKIX)</title>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'>
<organization /></author>
<author initials='J.' surname='Schaad' fullname='J. Schaad'>
<organization /></author>
<date year='2010' month='June' />
<abstract>
<t>The Public Key Infrastructure using X.509 (PKIX) certificate format, and many associated formats, are expressed using ASN.1.  The current ASN.1 modules conform to the 1988 version of ASN.1.  This document updates those ASN.1 modules to conform to the 2002 version of ASN.1.  There are no bits-on-the-wire changes to any of the formats; this is simply a change to the syntax.  This document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract></front>

<seriesInfo name='RFC' value='5912' />
<format type='TXT' octets='216154' target='http://www.rfc-editor.org/rfc/rfc5912.txt' />
</reference>

    </references>

    <section title="ASN.1 Modules">
      <section title="1988 ASN.1 Module">
        <t>This section contains the updated ASN.1 module for
        <xref target="RFC5272"/>.  This module replaces the module in
        Appendix A of that document.  Although a 2008 ASN.1 module is provided, this remains the normative module as per the policy of the PKIX working group.</t>

<figure><artwork>
EnrollmentMessageSyntax-2011-v88
 { iso(1) identified-organization(3) dod(6) internet(1)
   security(5) mechanisms(5) pkix(7) id-mod(0)
   id-mod-enrollMsgSyntax-2011-88(76) }

DEFINITIONS IMPLICIT TAGS ::=
BEGIN

 -- EXPORTS All --
 -- The types and values defined in this module are exported for use
 -- in the other ASN.1 modules.  Other applications may use them for
 -- their own purposes.

 IMPORTS

   -- PKIX Part 1 - Implicit    From [RFC5280]
      GeneralName, CRLReason, ReasonFlags, GeneralNames
      FROM PKIX1Implicit88 {iso(1) identified-organization(3) dod(6)
              internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)
              id-pkix1-implicit(19)}

   -- PKIX Part 1 - Explicit    From [RFC5280]
      AlgorithmIdentifier, Extension, Name, CertificateSerialNumber,
      id-ad, id-kp
      FROM PKIX1Explicit88 {iso(1) identified-organization(3) dod(6)
              internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)
              id-pkix1-explicit(18)}

   -- Cryptographic Message Syntax   FROM [CMS]
      ContentInfo, Attribute, IssuerAndSerialNumber
        FROM CryptographicMessageSyntax2004 { iso(1) member-body(2)
             us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)
             modules(0) cms-2004(24)}

 -- CRMF                         FROM [RFC4211]
    CertReqMsg, PKIPublicationInfo, CertTemplate
    FROM PKIXCRMF-2005 {iso(1) identified-organization(3) dod(6)
           internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)
           id-mod-crmf2005(36)};

   -- Global Types
      -- UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING
        -- The content of this type conforms to RFC 3629.

  id-pkix OBJECT IDENTIFIER  ::= { iso(1) identified-organization(3)
      dod(6) internet(1) security(5) mechanisms(5) pkix(7) }

 id-cmc OBJECT IDENTIFIER ::= {id-pkix 7}   -- CMC controls
 id-cct OBJECT IDENTIFIER ::= {id-pkix 12}  -- CMC content types

 -- The following controls have the type OCTET STRING

 id-cmc-identityProof OBJECT IDENTIFIER ::= {id-cmc 3}
 id-cmc-dataReturn OBJECT IDENTIFIER ::= {id-cmc 4}
 id-cmc-regInfo OBJECT IDENTIFIER ::= {id-cmc 18}
 id-cmc-responseInfo OBJECT IDENTIFIER ::= {id-cmc 19}
 id-cmc-queryPending OBJECT IDENTIFIER ::= {id-cmc 21}
 id-cmc-popLinkRandom OBJECT IDENTIFIER ::= {id-cmc 22}
 id-cmc-popLinkWitness OBJECT IDENTIFIER ::= {id-cmc 23}

 -- The following controls have the type UTF8String

 id-cmc-identification OBJECT IDENTIFIER ::= {id-cmc 2}

 -- The following controls have the type INTEGER

 id-cmc-transactionId OBJECT IDENTIFIER ::= {id-cmc 5}

 -- The following controls have the type OCTET STRING

 id-cmc-senderNonce OBJECT IDENTIFIER ::= {id-cmc 6}
 id-cmc-recipientNonce OBJECT IDENTIFIER ::= {id-cmc 7}

 -- This is the content type used for a request message
 --     in the protocol

 id-cct-PKIData OBJECT IDENTIFIER ::= { id-cct 2 }

 PKIData ::= SEQUENCE {
     controlSequence    SEQUENCE SIZE(0..MAX) OF TaggedAttribute,
     reqSequence        SEQUENCE SIZE(0..MAX) OF TaggedRequest,
     cmsSequence        SEQUENCE SIZE(0..MAX) OF TaggedContentInfo,
     otherMsgSequence   SEQUENCE SIZE(0..MAX) OF OtherMsg
 }

  bodyIdMax INTEGER ::= 4294967295

  BodyPartID ::= INTEGER(0..bodyIdMax)

 TaggedAttribute ::= SEQUENCE {
     bodyPartID         BodyPartID,
     attrType           OBJECT IDENTIFIER,
     attrValues         SET OF AttributeValue
 }

  AttributeValue ::= ANY

  TaggedRequest ::= CHOICE {
      tcr               [0] TaggedCertificationRequest,
      crm               [1] CertReqMsg,
      orm               [2] SEQUENCE {
          bodyPartID            BodyPartID,
          requestMessageType    OBJECT IDENTIFIER,
          requestMessageValue   ANY DEFINED BY requestMessageType
      }
  }

  TaggedCertificationRequest ::= SEQUENCE {
      bodyPartID            BodyPartID,
      certificationRequest  CertificationRequest
  }

  CertificationRequest ::= SEQUENCE {
    certificationRequestInfo  SEQUENCE {
      version                   INTEGER,
      subject                   Name,
      subjectPublicKeyInfo      SEQUENCE {
        algorithm                 AlgorithmIdentifier,
        subjectPublicKey          BIT STRING },
      attributes                [0] IMPLICIT SET OF Attribute },
    signatureAlgorithm        AlgorithmIdentifier,
    signature                 BIT STRING
  }

 TaggedContentInfo ::= SEQUENCE {
     bodyPartID              BodyPartID,
     contentInfo             ContentInfo
 }

 OtherMsg ::= SEQUENCE {
     bodyPartID        BodyPartID,
     otherMsgType      OBJECT IDENTIFIER,
     otherMsgValue     ANY DEFINED BY otherMsgType }

 --  This defines the response message in the protocol
 id-cct-PKIResponse OBJECT IDENTIFIER ::= { id-cct 3 }

 ResponseBody ::= PKIResponse

 PKIResponse ::= SEQUENCE {
     controlSequence   SEQUENCE SIZE(0..MAX) OF TaggedAttribute,
     cmsSequence       SEQUENCE SIZE(0..MAX) OF TaggedContentInfo,
     otherMsgSequence  SEQUENCE SIZE(0..MAX) OF OtherMsg

 }

 -- Used to return status state in a response

 id-cmc-statusInfo OBJECT IDENTIFIER ::= {id-cmc 1}

 CMCStatusInfo ::= SEQUENCE {
     cMCStatus       CMCStatus,
     bodyList        SEQUENCE SIZE (1..MAX) OF BodyPartID,
     statusString    UTF8String OPTIONAL,
     otherInfo        CHOICE {
       failInfo         CMCFailInfo,
       pendInfo         PendInfo } OPTIONAL
 }

 PendInfo ::= SEQUENCE {
     pendToken        OCTET STRING,
     pendTime         GeneralizedTime
 }

 CMCStatus ::= INTEGER {
     success         (0),
     failed          (2),
     pending         (3),
     noSupport       (4),
     confirmRequired (5),
     popRequired     (6),
     partial                (7)
 }

 -- Note:
 -- The spelling of unsupportedExt is corrected in this version.
 -- In RFC 2797, it was unsuportedExt.

 CMCFailInfo ::= INTEGER {
     badAlg          (0),
     badMessageCheck (1),
     badRequest      (2),
     badTime         (3),
     badCertId       (4),
     unsupportedExt  (5),
     mustArchiveKeys (6),
     badIdentity     (7),
     popRequired     (8),
     popFailed       (9),
     noKeyReuse      (10),
     internalCAError (11),
     tryLater        (12),
     authDataFail    (13)
 }

 -- Used for RAs to add extensions to certification requests
 id-cmc-addExtensions OBJECT IDENTIFIER ::= {id-cmc 8}

 AddExtensions ::= SEQUENCE {
     pkiDataReference    BodyPartID,
     certReferences      SEQUENCE OF BodyPartID,
     extensions          SEQUENCE OF Extension
 }


 id-cmc-encryptedPOP OBJECT IDENTIFIER ::= {id-cmc 9}
 id-cmc-decryptedPOP OBJECT IDENTIFIER ::= {id-cmc 10}

 EncryptedPOP ::= SEQUENCE {
     request       TaggedRequest,
     cms             ContentInfo,
     thePOPAlgID     AlgorithmIdentifier,
     witnessAlgID    AlgorithmIdentifier,
     witness         OCTET STRING
 }

 DecryptedPOP ::= SEQUENCE {
     bodyPartID      BodyPartID,
     thePOPAlgID     AlgorithmIdentifier,
     thePOP          OCTET STRING
 }

  id-cmc-lraPOPWitness OBJECT IDENTIFIER ::= {id-cmc 11}

  LraPopWitness ::= SEQUENCE {
      pkiDataBodyid   BodyPartID,
      bodyIds         SEQUENCE OF BodyPartID
  }

 --
 id-cmc-getCert OBJECT IDENTIFIER ::= {id-cmc 15}

 GetCert ::= SEQUENCE {
     issuerName      GeneralName,
     serialNumber    INTEGER }

 id-cmc-getCRL OBJECT IDENTIFIER ::= {id-cmc 16}

 GetCRL ::= SEQUENCE {
     issuerName    Name,
     cRLName       GeneralName OPTIONAL,
     time          GeneralizedTime OPTIONAL,
     reasons       ReasonFlags OPTIONAL }

 id-cmc-revokeRequest OBJECT IDENTIFIER ::= {id-cmc 17}

 RevokeRequest ::= SEQUENCE {
     issuerName            Name,
     serialNumber          INTEGER,
     reason                CRLReason,
     invalidityDate        GeneralizedTime OPTIONAL,
     passphrase            OCTET STRING OPTIONAL,
     comment               UTF8String OPTIONAL }

 id-cmc-confirmCertAcceptance OBJECT IDENTIFIER ::= {id-cmc 24}

 CMCCertId ::= IssuerAndSerialNumber

 -- The following is used to request V3 extensions be added to a
 -- certificate

 id-ExtensionReq OBJECT IDENTIFIER ::= {iso(1) member-body(2)
      us(840) rsadsi(113549) pkcs(1) pkcs-9(9) 14}

 ExtensionReq ::= SEQUENCE SIZE (1..MAX) OF Extension

 -- The following exists to allow Diffie-Hellman Certification 
 -- Request Messages to be well-formed

 id-alg-noSignature OBJECT IDENTIFIER ::= {id-pkix id-alg(6) 2}

 NoSignatureValue ::= OCTET STRING

 --  Unauthenticated attribute to carry removable data.
 --    This could be used in an update of "CMC Extensions: Server 
 --    Side Key Generation and Key Escrow" (February 2005) and in 
 --    other documents.

 id-aa OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
       rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2)}
 id-aa-cmc-unsignedData OBJECT IDENTIFIER ::= {id-aa 34}

 CMCUnsignedData ::= SEQUENCE {
     bodyPartPath        BodyPartPath,
     identifier          OBJECT IDENTIFIER,
     content             ANY DEFINED BY identifier
 }

 --  Replaces CMC Status Info
 --

 id-cmc-statusInfoV2 OBJECT IDENTIFIER ::= {id-cmc 25}

 CMCStatusInfoV2 ::= SEQUENCE {
    cMCStatus             CMCStatus,
    bodyList              SEQUENCE SIZE (1..MAX) OF
                                   BodyPartReference,
    statusString          UTF8String OPTIONAL,
    otherInfo             CHOICE {
      failInfo               CMCFailInfo,
      pendInfo               PendInfo,
      extendedFailInfo       SEQUENCE {
         failInfoOID            OBJECT IDENTIFIER,
         failInfoValue          AttributeValue
      }
    } OPTIONAL
 }

 BodyPartReference ::= CHOICE {
    bodyPartID           BodyPartID,
    bodyPartPath         BodyPartPath
 }

 BodyPartPath ::= SEQUENCE SIZE (1..MAX) OF BodyPartID

 --  Allow for distribution of trust anchors
 --

 id-cmc-trustedAnchors OBJECT IDENTIFIER ::= {id-cmc 26}

 PublishTrustAnchors ::= SEQUENCE {
     seqNumber      INTEGER,
     hashAlgorithm  AlgorithmIdentifier,
     anchorHashes     SEQUENCE OF OCTET STRING
 }

 id-cmc-authData OBJECT IDENTIFIER ::= {id-cmc 27}

 AuthPublish ::= BodyPartID

 --   These two items use BodyPartList
 id-cmc-batchRequests OBJECT IDENTIFIER ::= {id-cmc 28}
 id-cmc-batchResponses OBJECT IDENTIFIER ::= {id-cmc 29}

 BodyPartList ::= SEQUENCE SIZE (1..MAX) OF BodyPartID

 --
 id-cmc-publishCert OBJECT IDENTIFIER ::= {id-cmc 30}

 CMCPublicationInfo ::= SEQUENCE {
     hashAlg                      AlgorithmIdentifier,
     certHashes                   SEQUENCE OF OCTET STRING,
     pubInfo                          PKIPublicationInfo
 }

 id-cmc-modCertTemplate OBJECT IDENTIFIER ::= {id-cmc 31}

 ModCertTemplate ::= SEQUENCE {
     pkiDataReference             BodyPartPath,
     certReferences               BodyPartList,
     replace                      BOOLEAN DEFAULT TRUE,
     certTemplate                 CertTemplate
 }

 -- Inform follow-on servers that one or more controls have already 
 -- been processed

 id-cmc-controlProcessed OBJECT IDENTIFIER ::= {id-cmc 32}

 ControlsProcessed ::= SEQUENCE {
     bodyList        SEQUENCE SIZE(1..MAX) OF BodyPartReference
 }

 --  Identity Proof control w/ algorithm agility

 id-cmc-identityProofV2 OBJECT IDENTIFIER ::= { id-cmc 34 }

 IdentifyProofV2 ::= SEQUENCE {
     proofAlgID       AlgorithmIdentifier,
     macAlgId         AlgorithmIdentifier,
     witness          OCTET STRING
 }

 id-cmc-popLinkWitnessV2 OBJECT IDENTIFIER ::= { id-cmc 33 }
 PopLinkWitnessV2 ::= SEQUENCE {
     keyGenAlgorithm   AlgorithmIdentifier,
     macAlgorithm      AlgorithmIdentifier,
     witness           OCTET STRING
 }

 --

 id-cmc-raIdentityWitness OBJECT IDENTIFIER ::= {id-cmc 35}


 --
 --  Allow for an End-Entity to request a change in name.
 --  This item is added to RegControlSet in CRMF.
 --

 id-cmc-changeSubjectName OBJECT IDENTIFIER ::= {id-cmc 36}

 ChangeSubjectName ::= SEQUENCE {
     subject             Name OPTIONAL,
     subjectAlt          GeneralNames OPTIONAL
 }
 -- (WITH COMPONENTS {..., subject PRESENT} |
 --  WITH COMPONENTS {..., subjectAlt PRESENT} )

 --
 --  Embedded response from a third party for processing
 --

 id-cmc-responseBody OBJECT IDENTIFIER ::= {id-cmc 37}

 --
 --  Key purpose identifiers are in the Extended Key Usage extension
 -- 

 id-kp-cmcCA OBJECT IDENTIFIER ::= { id-kp 27 }
 id-kp-cmcRA OBJECT IDENTIFIER ::= { id-kp 28 }
 id-kp-cmcArchive OBJECT IDENTIFIER ::= { id-kp 28 }

 --
 --  Subject Information Access identifier
 --

 id-ad-cmc OBJECT IDENTIFIER ::= { id-ad 12 }

END
</artwork></figure>

      </section>
      <section title="2008 ASN.1 Module">
        <t>
          An updated 2008 ASN.1 module has been provided as part of this
          update.  The module contains those changes that were done to
          update the current ASN.1 standards (done for <xref target="RFC5912"/>) as
          well as changes made for this document.
        </t>

<figure><artwork>
EnrollmentMessageSyntax-2011-v08
    {iso(1) identified-organization(3) dod(6) internet(1)
    security(5) mechanisms(5) pkix(7) id-mod(0) 
    id-mod-enrollMsgSyntax-2011-08(76)}
DEFINITIONS IMPLICIT TAGS ::=
BEGIN
  EXPORTS ALL;
  IMPORTS

  AttributeSet{}, Extension{}, EXTENSION, ATTRIBUTE
  FROM PKIX-CommonTypes-2009
      {iso(1) identified-organization(3) dod(6) internet(1) security(5)
      mechanisms(5) pkix(7) id-mod(0) id-mod-pkixCommon-02(57)}

  AlgorithmIdentifier{}, DIGEST-ALGORITHM, KEY-WRAP, KEY-DERIVATION,
      MAC-ALGORITHM, SIGNATURE-ALGORITHM, PUBLIC-KEY
  FROM AlgorithmInformation-2009
      {iso(1) identified-organization(3) dod(6) internet(1) security(5)
      mechanisms(5) pkix(7) id-mod(0)
      id-mod-algorithmInformation-02(58)}

  CertificateSerialNumber, GeneralName, CRLReason, ReasonFlags,
      CertExtensions, GeneralNames
  FROM PKIX1Implicit-2009
      {iso(1) identified-organization(3) dod(6) internet(1) security(5)
      mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-implicit-02(59)}

  Name, id-pkix, PublicKeyAlgorithms, SignatureAlgorithms, id-ad, id-kp
  FROM PKIX1Explicit-2009
      {iso(1) identified-organization(3) dod(6) internet(1) security(5)
      mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-explicit-02(51)}

  ContentInfo, IssuerAndSerialNumber, CONTENT-TYPE
  FROM CryptographicMessageSyntax-2010
    { iso(1) member-body(2) us(840) rsadsi(113549)
       pkcs(1) pkcs-9(9) smime(16) modules(0) id-mod-cms-2009(58) }

  CertReqMsg, PKIPublicationInfo, CertTemplate
  FROM PKIXCRMF-2009
      {iso(1) identified-organization(3) dod(6) internet(1) security(5)
      mechanisms(5) pkix(7) id-mod(0) id-mod-crmf2005-02(55)}

  mda-sha1
  FROM PKIXAlgs-2009
       { iso(1) identified-organization(3) dod(6)
       internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)
       id-mod-pkix1-algorithms2008-02(56)}

  kda-PBKDF2, maca-hMAC-SHA1
  FROM CryptographicMessageSyntaxAlgorithms-2009
      { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)
      smime(16) modules(0) id-mod-cmsalg-2001-02(37) }

  mda-sha256
  FROM PKIX1-PSS-OAEP-Algorithms-2009
       { iso(1) identified-organization(3) dod(6)
         internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)
         id-mod-pkix1-rsa-pkalgs-02(54) } ;

  --  CMS content types defined in this document

  CMC-ContentTypes CONTENT-TYPE ::= { ct-PKIData | ct-PKIResponse, ... }

  --  Signature Algorithms defined in this document

  SignatureAlgs SIGNATURE-ALGORITHM ::= { sa-noSignature }

  --  CMS Unsigned Attributes

  CMC-UnsignedAtts ATTRIBUTE ::= { aa-cmc-unsignedData }

  --
  --

  id-cmc OBJECT IDENTIFIER ::= {id-pkix 7}   -- CMC controls
  id-cct OBJECT IDENTIFIER ::= {id-pkix 12}  -- CMC content types

  -- This is the content type for a request message in the protocol

  ct-PKIData CONTENT-TYPE ::=
      { TYPE PKIData IDENTIFIED BY id-cct-PKIData }
  id-cct-PKIData OBJECT IDENTIFIER ::= { id-cct 2 }

  PKIData ::= SEQUENCE {
      controlSequence    SEQUENCE SIZE(0..MAX) OF TaggedAttribute,
      reqSequence        SEQUENCE SIZE(0..MAX) OF TaggedRequest,
      cmsSequence        SEQUENCE SIZE(0..MAX) OF TaggedContentInfo,
      otherMsgSequence   SEQUENCE SIZE(0..MAX) OF OtherMsg
  }

  BodyPartID ::= INTEGER(0..4294967295)

  TaggedAttribute ::= SEQUENCE {
      bodyPartID         BodyPartID,
      attrType           CMC-CONTROL.&amp;id({Cmc-Control-Set}),
      attrValues         SET OF CMC-CONTROL.
                             &amp;Type({Cmc-Control-Set}{@attrType})
  }

  Cmc-Control-Set CMC-CONTROL ::= {
      cmc-identityProof | cmc-dataReturn | cmc-regInfo |
      cmc-responseInfo | cmc-queryPending | cmc-popLinkRandom |
      cmc-popLinkWitness | cmc-identification | cmc-transactionId |
      cmc-senderNonce | cmc-recipientNonce | cmc-statusInfo |
      cmc-addExtensions | cmc-encryptedPOP | cmc-decryptedPOP |
      cmc-lraPOPWitness | cmc-getCert | cmc-getCRL |
      cmc-revokeRequest | cmc-confirmCertAcceptance |
      cmc-statusInfoV2 | cmc-trustedAnchors | cmc-authData |
      cmc-batchRequests | cmc-batchResponses | cmc-publishCert |
      cmc-modCertTemplate | cmc-controlProcessed |
      cmc-identityProofV2 | cmc-popLinkWitnessV2, ...,
      cmc-raIdentityWitness | cmc-responseBody }

  OTHER-REQUEST ::= TYPE-IDENTIFIER

  --  We do not define any other requests in this document.
  --     Examples might be attribute certification requests.

  OtherRequests OTHER-REQUEST ::= {...}

  TaggedRequest ::= CHOICE {
      tcr               [0] TaggedCertificationRequest,
      crm               [1] CertReqMsg,
      orm               [2] SEQUENCE {
          bodyPartID            BodyPartID,
          requestMessageType    OTHER-REQUEST.&amp;id({OtherRequests}),
          requestMessageValue   OTHER-REQUEST.&amp;Type({OtherRequests}
                                    {@.requestMessageType})
      }
  }

  TaggedCertificationRequest ::= SEQUENCE {
      bodyPartID            BodyPartID,
      certificationRequest  CertificationRequest
  }

  AttributeList ATTRIBUTE ::= {at-extension-req, ...,
      at-cmc-changeSubjectName}

  CertificationRequest ::= SEQUENCE {
     certificationRequestInfo  SEQUENCE {
         version                   INTEGER,
         subject                   Name,
         subjectPublicKeyInfo      SEQUENCE {
             algorithm                 AlgorithmIdentifier{PUBLIC-KEY,
                                           {PublicKeyAlgorithms}},
             subjectPublicKey          BIT STRING
         },
         attributes                [0] IMPLICIT SET OF
                                       AttributeSet{{AttributeList}}
      },
      signatureAlgorithm        AlgorithmIdentifier
                                    {SIGNATURE-ALGORITHM,
                                        {SignatureAlgorithms}},
      signature                 BIT STRING
  }

  TaggedContentInfo ::= SEQUENCE {
      bodyPartID              BodyPartID,
      contentInfo             ContentInfo
  }

  OTHER-MSG ::= TYPE-IDENTIFIER

  --  No other messages currently defined

  OtherMsgSet OTHER-MSG ::= {...}

  OtherMsg ::= SEQUENCE {
      bodyPartID        BodyPartID,
      otherMsgType      OTHER-MSG.&amp;id({OtherMsgSet}),
      otherMsgValue     OTHER-MSG.&amp;Type({OtherMsgSet}{@otherMsgType}) }

  --  This defines the response message in the protocol

  ct-PKIResponse CONTENT-TYPE ::=
      { TYPE PKIResponse IDENTIFIED BY id-cct-PKIResponse }
  id-cct-PKIResponse OBJECT IDENTIFIER ::= { id-cct 3 }

  ResponseBody ::= PKIResponse

  PKIResponse ::= SEQUENCE {
      controlSequence   SEQUENCE SIZE(0..MAX) OF TaggedAttribute,
      cmsSequence       SEQUENCE SIZE(0..MAX) OF TaggedContentInfo,
      otherMsgSequence  SEQUENCE SIZE(0..MAX) OF OtherMsg
  }

  CMC-CONTROL ::= TYPE-IDENTIFIER

  -- The following controls have the type OCTET STRING

  cmc-identityProof CMC-CONTROL ::=
      { OCTET STRING IDENTIFIED BY id-cmc-identityProof }
  id-cmc-identityProof OBJECT IDENTIFIER ::= {id-cmc 3}

  cmc-dataReturn CMC-CONTROL ::=
      { OCTET STRING IDENTIFIED BY id-cmc-dataReturn }
  id-cmc-dataReturn OBJECT IDENTIFIER ::= {id-cmc 4}

  cmc-regInfo CMC-CONTROL ::=
      { OCTET STRING IDENTIFIED BY id-cmc-regInfo }
  id-cmc-regInfo OBJECT IDENTIFIER ::= {id-cmc 18}

  cmc-responseInfo CMC-CONTROL ::=
      { OCTET STRING IDENTIFIED BY id-cmc-responseInfo }
  id-cmc-responseInfo OBJECT IDENTIFIER ::= {id-cmc 19}

  cmc-queryPending CMC-CONTROL ::=
      { OCTET STRING IDENTIFIED BY id-cmc-queryPending }
  id-cmc-queryPending OBJECT IDENTIFIER ::= {id-cmc 21}

  cmc-popLinkRandom CMC-CONTROL ::=
      { OCTET STRING IDENTIFIED BY id-cmc-popLinkRandom }
  id-cmc-popLinkRandom OBJECT IDENTIFIER ::= {id-cmc 22}

  cmc-popLinkWitness CMC-CONTROL ::=
      { OCTET STRING IDENTIFIED BY id-cmc-popLinkWitness }
  id-cmc-popLinkWitness OBJECT IDENTIFIER ::= {id-cmc 23}

  -- The following controls have the type UTF8String

  cmc-identification CMC-CONTROL ::=
      { UTF8String IDENTIFIED BY id-cmc-identification }
  id-cmc-identification OBJECT IDENTIFIER ::= {id-cmc 2}

  -- The following controls have the type INTEGER

  cmc-transactionId CMC-CONTROL ::=
      { INTEGER IDENTIFIED BY id-cmc-transactionId }
  id-cmc-transactionId OBJECT IDENTIFIER ::= {id-cmc 5}

  -- The following controls have the type OCTET STRING

  cmc-senderNonce CMC-CONTROL ::=
      { OCTET STRING IDENTIFIED BY id-cmc-senderNonce }
  id-cmc-senderNonce OBJECT IDENTIFIER ::= {id-cmc 6}

  cmc-recipientNonce CMC-CONTROL ::=
      { OCTET STRING IDENTIFIED BY id-cmc-recipientNonce }
  id-cmc-recipientNonce OBJECT IDENTIFIER ::= {id-cmc 7}

  -- Used to return status in a response

  cmc-statusInfo CMC-CONTROL ::=
      { CMCStatusInfo IDENTIFIED BY id-cmc-statusInfo }
  id-cmc-statusInfo OBJECT IDENTIFIER ::= {id-cmc 1}

  CMCStatusInfo ::= SEQUENCE {
      cMCStatus       CMCStatus,
      bodyList        SEQUENCE SIZE (1..MAX) OF BodyPartID,
      statusString    UTF8String OPTIONAL,
      otherInfo       CHOICE {
         failInfo         CMCFailInfo,
         pendInfo         PendInfo
      } OPTIONAL
  }

  PendInfo ::= SEQUENCE {
      pendToken        OCTET STRING,
      pendTime         GeneralizedTime
  }

  CMCStatus ::= INTEGER {
      success         (0),
      failed          (2),
      pending         (3),
      noSupport       (4),
      confirmRequired (5),
      popRequired     (6),
      partial         (7)
  }

  CMCFailInfo ::= INTEGER {
      badAlg          (0),
      badMessageCheck (1),
      badRequest      (2),
      badTime         (3),
      badCertId       (4),
      unsuportedExt   (5),
      mustArchiveKeys (6),
      badIdentity     (7),
      popRequired     (8),
      popFailed       (9),
      noKeyReuse      (10),
      internalCAError (11),
      tryLater        (12),
      authDataFail    (13)
  }

  -- Used for RAs to add extensions to certification requests

  cmc-addExtensions CMC-CONTROL ::=
      { AddExtensions IDENTIFIED BY id-cmc-addExtensions }
  id-cmc-addExtensions OBJECT IDENTIFIER ::= {id-cmc 8}

  AddExtensions ::= SEQUENCE {
      pkiDataReference    BodyPartID,
      certReferences      SEQUENCE OF BodyPartID,
      extensions          SEQUENCE OF Extension{{CertExtensions}}
  }

  cmc-encryptedPOP CMC-CONTROL ::=
      { EncryptedPOP IDENTIFIED BY id-cmc-encryptedPOP }
  cmc-decryptedPOP CMC-CONTROL ::=
      { DecryptedPOP IDENTIFIED BY id-cmc-decryptedPOP }
  id-cmc-encryptedPOP OBJECT IDENTIFIER ::= {id-cmc 9}
  id-cmc-decryptedPOP OBJECT IDENTIFIER ::= {id-cmc 10}

  EncryptedPOP ::= SEQUENCE {
      request       TaggedRequest,
      cms             ContentInfo,
      thePOPAlgID     AlgorithmIdentifier{MAC-ALGORITHM, {POPAlgs}},
      witnessAlgID    AlgorithmIdentifier{DIGEST-ALGORITHM,
                          {WitnessAlgs}},
      witness         OCTET STRING
  }

  POPAlgs MAC-ALGORITHM ::= {maca-hMAC-SHA1, ...}
  WitnessAlgs DIGEST-ALGORITHM ::= {mda-sha1, ...}

  DecryptedPOP ::= SEQUENCE {
      bodyPartID      BodyPartID,
      thePOPAlgID     AlgorithmIdentifier{MAC-ALGORITHM, {POPAlgs}},
      thePOP          OCTET STRING
  }

  cmc-lraPOPWitness CMC-CONTROL ::=
      { LraPopWitness IDENTIFIED BY id-cmc-lraPOPWitness }

  id-cmc-lraPOPWitness OBJECT IDENTIFIER ::= {id-cmc 11}

  LraPopWitness ::= SEQUENCE {
      pkiDataBodyid   BodyPartID,
      bodyIds         SEQUENCE OF BodyPartID
  }

  --

  cmc-getCert CMC-CONTROL ::=
      { GetCert IDENTIFIED BY id-cmc-getCert }
  id-cmc-getCert OBJECT IDENTIFIER ::= {id-cmc 15}

  GetCert ::= SEQUENCE {
      issuerName      GeneralName,
      serialNumber    INTEGER }


  cmc-getCRL CMC-CONTROL ::=
      { GetCRL IDENTIFIED BY id-cmc-getCRL }
  id-cmc-getCRL OBJECT IDENTIFIER ::= {id-cmc 16}

  GetCRL ::= SEQUENCE {
      issuerName    Name,
      cRLName       GeneralName OPTIONAL,
      time          GeneralizedTime OPTIONAL,
      reasons       ReasonFlags OPTIONAL }

  cmc-revokeRequest CMC-CONTROL ::=
      { RevokeRequest IDENTIFIED BY id-cmc-revokeRequest}
  id-cmc-revokeRequest OBJECT IDENTIFIER ::= {id-cmc 17}

  RevokeRequest ::= SEQUENCE {
      issuerName            Name,
      serialNumber          INTEGER,
      reason                CRLReason,
      invalidityDate         GeneralizedTime OPTIONAL,
      passphrase            OCTET STRING OPTIONAL,
      comment               UTF8String OPTIONAL }


  cmc-confirmCertAcceptance CMC-CONTROL ::=
      { CMCCertId IDENTIFIED BY id-cmc-confirmCertAcceptance }
  id-cmc-confirmCertAcceptance OBJECT IDENTIFIER ::= {id-cmc 24}

  CMCCertId ::= IssuerAndSerialNumber

  -- The following is used to request V3 extensions be added
  --     to a certificate

  at-extension-req ATTRIBUTE ::=
      { TYPE ExtensionReq IDENTIFIED BY id-ExtensionReq }
  id-ExtensionReq OBJECT IDENTIFIER ::= {iso(1) member-body(2) us(840)
      rsadsi(113549) pkcs(1) pkcs-9(9) 14}

  ExtensionReq ::= SEQUENCE SIZE (1..MAX) OF
      Extension{{CertExtensions}}

  -- The following allows Diffie-Hellman Certification Request
  --     Messages to be well-formed

  sa-noSignature SIGNATURE-ALGORITHM ::= {
      IDENTIFIER id-alg-noSignature
      VALUE NoSignatureValue
      PARAMS TYPE NULL ARE required
      HASHES { mda-sha1 }
  }
  id-alg-noSignature OBJECT IDENTIFIER ::= {id-pkix id-alg(6) 2}

  NoSignatureValue ::= OCTET STRING

  --  Unauthenticated attribute to carry removable data.

  id-aa OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
      rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2)}

  aa-cmc-unsignedData ATTRIBUTE ::=
      { TYPE CMCUnsignedData IDENTIFIED BY id-aa-cmc-unsignedData }
  id-aa-cmc-unsignedData OBJECT IDENTIFIER ::= {id-aa 34}

  CMCUnsignedData ::= SEQUENCE {
      bodyPartPath        BodyPartPath,
      identifier          TYPE-IDENTIFIER.&amp;id,
      content             TYPE-IDENTIFIER.&amp;Type
  }

  --  Replaces CMC Status Info
  --

  cmc-statusInfoV2 CMC-CONTROL ::=
      { CMCStatusInfoV2 IDENTIFIED BY id-cmc-statusInfoV2 }
  id-cmc-statusInfoV2 OBJECT IDENTIFIER ::= {id-cmc 25}


  EXTENDED-FAILURE-INFO ::= TYPE-IDENTIFIER

  ExtendedFailures EXTENDED-FAILURE-INFO ::= {...}

  CMCStatusInfoV2 ::= SEQUENCE {
     cMCStatus             CMCStatus,
     bodyList              SEQUENCE SIZE (1..MAX) OF
                                    BodyPartReference,
     statusString          UTF8String OPTIONAL,
     otherInfo             CHOICE {
         failInfo               CMCFailInfo,
         pendInfo               PendInfo,
         extendedFailInfo       [1] SEQUENCE {
            failInfoOID            TYPE-IDENTIFIER.&amp;id
                                       ({ExtendedFailures}),
            failInfoValue          TYPE-IDENTIFIER.&amp;Type
                                       ({ExtendedFailures}
                                           {@.failInfoOID})
         }
      } OPTIONAL
  }

  BodyPartReference ::= CHOICE {
     bodyPartID           BodyPartID,
     bodyPartPath         BodyPartPath
  }

  BodyPartPath ::= SEQUENCE SIZE (1..MAX) OF BodyPartID

  --  Allow for distribution of trust anchors
  --

  cmc-trustedAnchors CMC-CONTROL ::=
      { PublishTrustAnchors IDENTIFIED BY id-cmc-trustedAnchors }
  id-cmc-trustedAnchors OBJECT IDENTIFIER ::= {id-cmc 26}

  PublishTrustAnchors ::= SEQUENCE {
      seqNumber      INTEGER,
      hashAlgorithm  AlgorithmIdentifier{DIGEST-ALGORITHM,
                         {HashAlgorithms}},
      anchorHashes   SEQUENCE OF OCTET STRING
  }

  HashAlgorithms DIGEST-ALGORITHM ::= {
     mda-sha1 | mda-sha256, ...
  }

  cmc-authData CMC-CONTROL ::=
      { AuthPublish IDENTIFIED BY id-cmc-authData }
  id-cmc-authData OBJECT IDENTIFIER ::= {id-cmc 27}

  AuthPublish ::= BodyPartID

  --   These two items use BodyPartList

  cmc-batchRequests CMC-CONTROL ::=
      { BodyPartList IDENTIFIED BY id-cmc-batchRequests }
  id-cmc-batchRequests OBJECT IDENTIFIER ::= {id-cmc 28}

  cmc-batchResponses CMC-CONTROL ::=
      { BodyPartList IDENTIFIED BY id-cmc-batchResponses }
  id-cmc-batchResponses OBJECT IDENTIFIER ::= {id-cmc 29}

  BodyPartList ::= SEQUENCE SIZE (1..MAX) OF BodyPartID

  cmc-publishCert CMC-CONTROL ::=
      { CMCPublicationInfo IDENTIFIED BY id-cmc-publishCert }
  id-cmc-publishCert OBJECT IDENTIFIER ::= {id-cmc 30}

  CMCPublicationInfo ::= SEQUENCE {
      hashAlg        AlgorithmIdentifier{DIGEST-ALGORITHM,
                           {HashAlgorithms}},
      certHashes     SEQUENCE OF OCTET STRING,
      pubInfo        PKIPublicationInfo
  }

  cmc-modCertTemplate CMC-CONTROL ::=
      { ModCertTemplate IDENTIFIED BY id-cmc-modCertTemplate }

  id-cmc-modCertTemplate OBJECT IDENTIFIER ::= {id-cmc 31}

  ModCertTemplate ::= SEQUENCE {
      pkiDataReference             BodyPartPath,
      certReferences               BodyPartList,
      replace                      BOOLEAN DEFAULT TRUE,
      certTemplate                 CertTemplate
  }

  -- Inform follow-on servers that one or more controls have
  --     already been processed

  cmc-controlProcessed CMC-CONTROL ::=
      { ControlsProcessed IDENTIFIED BY id-cmc-controlProcessed }
  id-cmc-controlProcessed OBJECT IDENTIFIER ::= {id-cmc 32}

  ControlsProcessed ::= SEQUENCE {
      bodyList              SEQUENCE SIZE(1..MAX) OF BodyPartReference
  }

  --  Identity Proof control w/ algorithm agility

  cmc-identityProofV2 CMC-CONTROL ::=
      { IdentityProofV2 IDENTIFIED BY id-cmc-identityProofV2 }
  id-cmc-identityProofV2 OBJECT IDENTIFIER ::= { id-cmc 33 }

  IdentityProofV2 ::= SEQUENCE {
      proofAlgID       AlgorithmIdentifier{DIGEST-ALGORITHM,
                           {WitnessAlgs}},
      macAlgId         AlgorithmIdentifier{MAC-ALGORITHM, {POPAlgs}},
      witness          OCTET STRING
  }

  cmc-popLinkWitnessV2 CMC-CONTROL ::=
      { PopLinkWitnessV2 IDENTIFIED BY id-cmc-popLinkWitnessV2 }
  id-cmc-popLinkWitnessV2 OBJECT IDENTIFIER ::= { id-cmc 34 }

  PopLinkWitnessV2 ::= SEQUENCE {
      keyGenAlgorithm   AlgorithmIdentifier{KEY-DERIVATION,
                            {KeyDevAlgs}},
      macAlgorithm      AlgorithmIdentifier{MAC-ALGORITHM, {POPAlgs}},
      witness           OCTET STRING
  }

  KeyDevAlgs KEY-DERIVATION ::= {kda-PBKDF2, ...}

  cmc-raIdentityWitness CMC-CONTROL ::=
     { BodyPartPath IDENTIFIED BY id-cmc-raIdentityWitness }

  id-cmc-raIdentityWitness OBJECT IDENTIFIER ::= {id-cmc 35}


  --
  --  Allow for an End-Entity to request a change in name.
  --  This item is added to RegControlSet in CRMF.
  --
  at-cmc-changeSubjectName ATTRIBUTE ::=
     { TYPE ChangeSubjectName IDENTIFIED BY id-cmc-changeSubjectName }

  id-cmc-changeSubjectName OBJECT IDENTIFIER ::= {id-cmc 36}

  ChangeSubjectName ::= SEQUENCE {
      subject             Name OPTIONAL,
      subjectAlt          GeneralNames OPTIONAL
  }
  (WITH COMPONENTS {..., subject PRESENT} |
   WITH COMPONENTS {..., subjectAlt PRESENT} )

  --  
  --  Embedded response from a third party for processing
  --

  cmc-responseBody CMC-CONTROL ::= {
     BodyPartPath IDENTIFIED BY id-cmc-responseBody
  }

  id-cmc-responseBody OBJECT IDENTIFIER ::= {id-cmc 37}

  --
  --  Key purpose identifiers are in the Extended Key Usage extension
  -- 

  id-kp-cmcCA OBJECT IDENTIFIER ::= { id-kp 27 }
  id-kp-cmcRA OBJECT IDENTIFIER ::= { id-kp 28 }
  id-kp-cmcArchive OBJECT IDENTIFIER ::= { id-kp 29 }

  --
  --  Subject Information Access identifier
  --

  id-ad-cmc OBJECT IDENTIFIER ::= { id-ad 12 }

END
</artwork></figure>

      </section>
</section>
</back>
</rfc>

