<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>

<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>

<rfc number="8526" ipr="trust200902" updates="6241, 7950"
     submissionType="IETF" consensus="yes" category="std" >


    <front>
    <title abbrev="NETCONF Extensions for the NMDA">NETCONF Extensions to Support the Network&nbsp;Management&nbsp;Datastore&nbsp;Architecture</title>

    <author initials="M" surname="Bjorklund" fullname='Martin Bjorklund' >
      <organization>Tail-f Systems</organization>
      <address>
        <email>mbj@tail-f.com</email>
      </address>
    </author>
    <author initials="J" surname="Schoenwaelder" fullname='Juergen Schoenwaelder' >
      <organization>Jacobs University</organization>
      <address>
        <email>j.schoenwaelder@jacobs-university.de</email>
      </address>
    </author>
    <author initials="P" surname="Shafer" fullname='Phil Shafer' >
      <organization>Juniper Networks</organization>
      <address>
        <email>phil@juniper.net</email>
      </address>
    </author>
    <author initials="K" surname="Watsen" fullname='Kent Watsen' >
      <organization>Watsen Networks</organization>
      <address>
        <email>kent+ietf@watsen.net</email>
      </address>
    </author>
    <author initials="R" surname="Wilton" fullname='Robert Wilton' >
      <organization>Cisco Systems</organization>
      <address>
        <email>rwilton@cisco.com</email>
      </address>
    </author>

	<date month="March" year="2019" />


    <abstract>
	<t>
This document extends the Network Configuration Protocol (NETCONF) defined in RFC 6241 in
order to support the Network Management Datastore Architecture (NMDA)
defined in RFC 8342.
	</t>
	<t>
This document updates RFCs 6241 and 7950.  The update to
RFC 6241 adds new &lt;get&nbhy;data&gt; and &lt;edit&nbhy;data&gt; operations
and
augments existing &lt;lock&gt;, &lt;unlock&gt;, and &lt;validate&gt; operations.
The update to RFC 7950 requires the usage of the YANG library (described in  RFC 8525)
by NETCONF servers implementing the NMDA.
	</t>

</abstract>
</front>
<middle>
<section title="Introduction" anchor="introduction">
    <t>
This document extends the NETCONF protocol defined in <xref target="RFC6241"/> in
order to support the Network Management Datastore Architecture (NMDA)
defined in <xref target="RFC8342"/>.
    </t>
    <t>
This document updates <xref target="RFC6241"/> in order to enable NETCONF clients to
interact with all the datastores supported by a server implementing
the NMDA.  The update both adds new &lt;get&nbhy;data&gt; and
&lt;edit&nbhy;data&gt; operations and augments existing &lt;lock&gt;,
&lt;unlock&gt;, and &lt;validate&gt; operations.
    </t>
    <t>
This document also updates <xref target="RFC7950"/> in order to enable NETCONF
clients to both discover which datastores are supported by the
NETCONF server and determine which modules are supported
in each datastore.  The update requires NETCONF servers implementing
the NMDA to support the YANG library <xref target="RFC8525"/>.
    </t>
<section title="Terminology" anchor="terminology">
    <t>
This document uses the terminology defined by the NMDA
<xref target="RFC8342"/>.
    </t>
    <t>
The following term is defined in <xref target="RFC8525"/>:
    </t>
<t>
 <list style="symbols">
 <t>
YANG library content identifier
 </t>
 </list>
</t>

        <t>
    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
    "MAY", and "OPTIONAL" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>

</section>
<section title="Tree Diagrams" anchor="tree-diagrams">
    <t>
Tree diagrams used in this document follow the notation defined in
<xref target="RFC8340"/>.
    </t>
</section>
</section>

<section title="Datastore and YANG Library Requirements" anchor="datastore-and-yang-library-requirements">

    <t>
An NMDA-compliant NETCONF server MUST implement the 
&quot;ietf&nbhy;netconf&nbhy;nmda&quot; module defined in this document, MUST support the
operational state datastore, and MUST implement at least revision
2019-01-04 of the &quot;ietf&nbhy;yang&nbhy;library&quot; module defined in
<xref target="RFC8525"/>.
    </t>
    <t>
A NETCONF client can discover which datastores and YANG modules the
server supports by reading the YANG library information from the
operational state datastore.
    </t>
    <t>
The server MUST advertise the following capability in the &lt;hello&gt;
message (line breaks and whitespace are used for formatting reasons
only):
    </t>
	<figure>
   <artwork><![CDATA[
  urn:ietf:params:netconf:capability:yang-library:1.1?
    revision=<date>&content-id=<content-id-value>
    ]]></artwork>
</figure>
    <t>
The parameter &quot;revision&quot; has the same value as the revision date of
the &quot;ietf&nbhy;yang&nbhy;library&quot; module implemented by the server.  This
parameter MUST be present.
    </t>
    <t>
The parameter &quot;content&nbhy;id&quot; contains the YANG library content
identifier <xref target="RFC8525"/>.  This parameter MUST be
present.
    </t>
    <t>
With this mechanism, a client can cache the supported datastores and
YANG modules for a server and only update the cache if the
&quot;content&nbhy;id&quot; value in the &lt;hello&gt; message changes.
    </t>
    <t>
This document updates Section 5.6.4 of <xref target="RFC7950"/> to allow
servers to
advertise the capability :yang-library:1.1 instead of
:yang-library:1.0 and to implement the subtree &quot;/yang&nbhy;library&quot;
<xref target="RFC8525"/> instead of &quot;/modules&nbhy;state&quot;.
    </t>
</section>
<section title="NETCONF Extensions" anchor="netconf-extensions">
    <t>
This section describes the NETCONF extensions needed to support the
NMDA.  These changes are defined in the new
&quot;ietf&nbhy;netconf&nbhy;nmda&quot; YANG <xref target="RFC7950"/> module.
    </t>


    <t>
These changes include the use of source and target parameters based on
the &quot;datastore&quot; identity defined in the &quot;ietf&nbhy;datastores&quot; module
<xref target="RFC8342"/>.  The use of identities allows
future expansion in a way that the choice-based strategy from the
original operations (e.g., &lt;get&nbhy;config&gt; and &lt;edit&nbhy;config&gt;) does not.
    </t>
<section title="New NETCONF Operations" anchor="new-netconf-operations">
    <t>
Two new operations -- &lt;get&nbhy;data&gt; and &lt;edit&nbhy;data&gt; -- are defined in this
document in order to support the NMDA. These operations are similar
to the &lt;get&nbhy;config&gt; and &lt;edit&nbhy;config&gt; operations, but they can work
on an extensible set of datastores.
    </t>
<section title="The &lt;get&nbhy;data&gt; Operation" anchor="the-get-data-operation">
    <t>
The &lt;get&nbhy;data&gt; operation retrieves data from a specific NMDA
datastore.  This operation is similar to NETCONF&apos;s &lt;get&nbhy;config&gt;
operation defined in <xref target="RFC6241"/>, but it adds the flexibility to
select the source datastore.
    </t>
	<figure>
    <artwork><![CDATA[
+---x get-data
   +---w input
   |  +---w datastore                      ds:datastore-ref
   |  +---w (filter-spec)?
   |  |  +--:(subtree-filter)
   |  |  |  +---w subtree-filter?          <anydata>
   |  |  +--:(xpath-filter)
   |  |     +---w xpath-filter?            yang:xpath1.0 {nc:xpath}?
   |  +---w config-filter?                 boolean
   |  +---w (origin-filters)? {origin}?
   |  |  +--:(origin-filter)
   |  |  |  +---w origin-filter*           or:origin-ref
   |  |  +--:(negated-origin-filter)
   |  |     +---w negated-origin-filter*   or:origin-ref
   |  +---w max-depth?                     union
   |  +---w with-origin?                   empty {origin}?
   |  +---w with-defaults?                 with-defaults-mode
   +--ro output
      +--ro data?   <anydata>
    ]]></artwork>
</figure>
    <t>
The &quot;datastore&quot; parameter indicates the datastore that is the source
of the data to be retrieved.  This is a "datastore" identity.
    </t>
    <t>
The &lt;get&nbhy;data&gt; operation accepts a content filter parameter, similar
to the &quot;filter&quot; parameter of &lt;get&nbhy;config&gt;, but uses explicit nodes
for subtree filtering (&quot;subtree&nbhy;filter&quot;) and XPath filtering
(&quot;xpath&nbhy;filter&quot;).
    </t>
    <t>
The &quot;config&nbhy;filter&quot; parameter can be used to retrieve only &quot;config
true&quot; or &quot;config false&quot; nodes.
    </t>


    <t>
The &quot;origin&nbhy;filter&quot; parameter, which can be present multiple times,
selects nodes equal to or derived from any of the given values. 


The
&quot;negated&nbhy;origin&nbhy;filter&quot;, which can be present multiple
times, selects
nodes that are not equal to or derived from any of the given values.
The &quot;origin&nbhy;filter&quot; and &quot;negated&nbhy;origin&nbhy;filter&quot; parameters cannot be
used together.
    </t>
    <t>
The &quot;max&nbhy;depth&quot; parameter can be used by the client to limit the
number of subtree levels that are returned in the reply.
    </t>



<section title='"origin" Metadata Annotation' anchor="origin-metadata-attribute">
    <t>
The &lt;get&nbhy;data&gt; operation defines a parameter named &quot;with&nbhy;origin&quot;,
which if present, requests that the server includes &quot;origin&quot; metadata
annotations in its response, as detailed in the NMDA.  This parameter
is only valid for the operational state datastore and any datastores
with identities derived from the &quot;operational&quot; identity.  Otherwise,
if an invalid datastore is specified then an error is returned, as
specified in the &quot;ietf&nbhy;netconf&nbhy;nmda&quot; module (see <xref target="yangmod"/>). Note that &quot;origin&quot;
metadata annotations are not included in a response unless a client
explicitly requests them.
    </t>
    <t>
  Data in the operational state datastore can come from multiple
  sources.  The server should return the "origin" metadata annotation
  value that most accurately indicates the source of the operational
  value, as specified in Section 5.3.4 of 
<xref target="RFC8342"/>.
    </t>
    <t>
When encoding the "origin" metadata annotation for a hierarchy of
returned nodes, the annotation may be omitted for a child node when
the value matches that of the parent node, as described in the
&quot;ietf&nbhy;origin&quot; YANG module <xref target="RFC8342"/>.
    </t>
    <t>
Support for the &quot;with&nbhy;origin&quot; parameter is OPTIONAL.  It is identified
with the feature &quot;origin&quot;.
    </t>
</section>
<section title="&quot;with-defaults&quot; Interactions" anchor="with-defaults-interactions">
    <t>
If the &quot;with&nbhy;defaults&quot; capability is supported by the server, then the
&quot;with&nbhy;defaults&quot; parameter, defined in <xref target="RFC6243"/>, is supported for
&lt;get&nbhy;data&gt; operations that target conventional configuration
datastores.
    </t>
    <t>
Support for the &quot;with&nbhy;defaults&quot; parameter is OPTIONAL for
&lt;get&nbhy;data&gt;
operations that target &lt;operational&gt;.  The associated capability to
indicate a server&apos;s support is identified with the URI:
    </t>
	<figure>
    <artwork><![CDATA[
  urn:ietf:params:netconf:capability:with-operational-defaults:1.0
    ]]></artwork>
</figure>
    <t>
If the &quot;with&nbhy;defaults&quot; parameter is supported for &lt;get&nbhy;data&gt;
operations on &lt;operational&gt;, then all retrieval modes specified in
either the &apos;basic&nbhy;mode&apos; or &apos;also&nbhy;supported&apos; parameter of the
&quot;with&nbhy;defaults&quot; capability are permitted.  The behavior of the
&quot;with&nbhy;defaults&quot; parameter for &lt;operational&gt; is defined as below:
    </t>
<t>
 <list style="symbols">
 <t>
If no &quot;with&nbhy;defaults&quot; parameter is specified, or if it is set to
&quot;explicit&quot;, &quot;report&nbhy;all&quot;, or &quot;report&nbhy;all&nbhy;tagged&quot;, then the &quot;in use&quot;
values, as defined in Section 5.3 of <xref target="RFC8342"/>,
are returned from the operational state datastore, even if a
node happens to have a default statement in the YANG module, and
this default value is being used by the server.  If the
&quot;with&nbhy;defaults&quot; parameter is set to
&quot;report&nbhy;all&nbhy;tagged&quot;, any values
that match the schema default are tagged with additional metadata,
as described in Section 3.4 of <xref target="RFC6243"/>.
 </t>
 <t>
If the &quot;with&nbhy;defaults&quot; parameter is set to &quot;trim&quot;, all &quot;in use&quot;
values are returned, except that the output is filtered to exclude
any values that match the default defined in the YANG schema.
 </t>
 </list>
</t>
    <t>
Support for &quot;with&nbhy;defaults&quot; in &lt;get&nbhy;data&gt; operations on any datastore
not defined in <xref target="RFC8342"/> should be defined
by the specification for the datastore.
    </t>
</section>
<section title="Example: Retrieving an Entire Subtree from &lt;running&gt;"
	 anchor="example-retrieving-an-entire-subtree-from-running">

    <t>
The following example shows the &lt;get&nbhy;data&gt; version of the &lt;get&nbhy;config&gt;
example shown in Section 7.1 of <xref target="RFC6241"/>, which selects the entire
&quot;/users&quot; subtree:
    </t>
	<figure>
    <artwork><![CDATA[
<rpc message-id="101"
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <get-data xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-nmda"
            xmlns:ds="urn:ietf:params:xml:ns:yang:ietf-datastores">
    <datastore>ds:running</datastore>
    <subtree-filter>
      <top xmlns="http://example.com/schema/1.2/config">
        <users/>
      </top>
    </subtree-filter>
  </get-data>
</rpc>
    ]]></artwork>
</figure>
	<figure>
    <artwork><![CDATA[
<rpc-reply message-id="101"
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <data xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-nmda">
    <top xmlns="http://example.com/schema/1.2/config">
      <users>
        <user>
          <name>root</name>
          <type>superuser</type>
          <full-name>Charlie Root</full-name>
          <company-info>
            <dept>1</dept>
            <id>1</id>
          </company-info>
        </user>
        <!-- additional <user> elements appear here... -->
      </users>
    </top>
  </data>
</rpc-reply>
    ]]></artwork>
</figure>
</section>
<section title="Example: Retrieving a Filtered Subtree from &lt;operational&gt;"
	 anchor="example-retrieving-a-filtered-subtree-from-operational">
    <t>
The following example shows how the &quot;origin&nbhy;filter&quot; can be
used to retrieve nodes from &lt;operational&gt;.  The example uses the
fictional data model defined in Appendix C of <xref target="RFC8342"/>.
    </t>
	<figure>
    <artwork><![CDATA[
<rpc message-id="102"
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <get-data xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-nmda"
            xmlns:ds="urn:ietf:params:xml:ns:yang:ietf-datastores"
            xmlns:or="urn:ietf:params:xml:ns:yang:ietf-origin">
    <datastore>ds:operational</datastore>
    <subtree-filter>
      <bgp xmlns="http://example.com/ns/bgp"/>
    </subtree-filter>
    <origin-filter>or:intended</origin-filter>
    <origin-filter>or:system</origin-filter>
    <with-origin/>
  </get-data>
</rpc>
    ]]></artwork>
</figure>
	<figure>
    <artwork><![CDATA[
<rpc-reply message-id="102"
    xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <data xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-nmda">
    <bgp xmlns="http://example.com/ns/bgp"
         xmlns:or="urn:ietf:params:xml:ns:yang:ietf-origin"
         or:origin="or:intended">
      <peer>
        <name>2001:db8::2:3</name>
        <local-port or:origin="or:system">60794</local-port>
        <state>established</state>
      </peer>
    </bgp>
  </data>
</rpc-reply>
    ]]></artwork>
</figure>

<t>In order to not retrieve any system state nodes, the
"config-filter" can be used:
</t>
        <figure>
    <artwork><![CDATA[
<rpc message-id="103"
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <get-data xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-nmda"
            xmlns:ds="urn:ietf:params:xml:ns:yang:ietf-datastores"
            xmlns:or="urn:ietf:params:xml:ns:yang:ietf-origin">
    <datastore>ds:operational</datastore>
    <subtree-filter>
      <bgp xmlns="http://example.com/ns/bgp"/>
    </subtree-filter>
    <config-filter>true</config-filter>
    <origin-filter>or:intended</origin-filter>
    <origin-filter>or:system</origin-filter>
    <with-origin/>
  </get-data>
</rpc>

<rpc-reply message-id="103"
           xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <data xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-nmda">
    <bgp xmlns="http://example.com/ns/bgp"
         xmlns:or="urn:ietf:params:xml:ns:yang:ietf-origin"
         or:origin="or:intended">
      <peer>
        <name>2001:db8::2:3</name>
        <local-port or:origin="or:system">60794</local-port>
      </peer>
    </bgp>
  </data>
</rpc-reply>
]]></artwork></figure>

</section>
</section>

<section title="The &lt;edit&nbhy;data&gt; Operation" anchor="the-edit-data-operation">
    <t>
The &lt;edit&nbhy;data&gt; operation changes the contents of a writable
datastore, similar to the &lt;edit&nbhy;config&gt; operation defined in
<xref target="RFC6241"/> but with additional flexibility in naming the target
datastore. If an &lt;edit&nbhy;data&gt; operation is invoked on a non-writable
datastore, then an error is returned, as specified in the
&quot;ietf&nbhy;netconf&nbhy;nmda&quot; module (see <xref target="yangmod"/>).
    </t>
	<figure>
    <artwork><![CDATA[
+---x edit-data
   +---w input
      +---w datastore            ds:datastore-ref
      +---w default-operation?   enumeration
      +---w (edit-content)
         +--:(config)
         |  +---w config?        <anydata>
         +--:(url)
            +---w url?           inet:uri {nc:url}?
    ]]></artwork>
</figure>
    <t>
The &quot;datastore&quot; parameter is a "datastore" identity that indicates the
desired target datastore where changes should be made.
    </t>
    <t>
The &quot;default&nbhy;operation&quot; parameter selects the default operation to
use.  It is a copy of the &quot;default&nbhy;operation&quot; parameter of the
&lt;edit&nbhy;config&gt; operation.
    </t>
    <t>
The &quot;edit&nbhy;content&quot; parameter specifies the content for the edit
operation.  It mirrors the &quot;edit&nbhy;content&quot; choice of the &lt;edit&nbhy;config&gt;
operation.  

Note, however, that the &quot;config&quot; element in the
&quot;edit&nbhy;content&quot; choice of &lt;edit&nbhy;data&gt; uses &quot;anydata&quot; (introduced in
YANG 1.1 <xref target="RFC7950"/>) while the &quot;config&quot; element in the &quot;edit&nbhy;content&quot; choice of
&lt;edit&nbhy;config&gt; used &quot;anyxml&quot;.
    </t>

    <t>
The &lt;edit&nbhy;data&gt; operation does not support the &quot;error&nbhy;option&quot; and the
&quot;test&nbhy;option&quot; parameters that were part of the &lt;edit&nbhy;config&gt;
operation. 
The error behavior of &lt;edit&nbhy;data&gt; corresponds to the
&quot;rollback&nbhy;on&nbhy;error&quot; value in
the &quot;error&nbhy;option&quot; parameter.
    </t>
    <t>
If the &quot;with&nbhy;defaults&quot; capability is supported by the server, the
semantics of editing modes is the same as for &lt;edit&nbhy;config&gt;, as
described in Section 4.5.2 of <xref target="RFC6243"/>.
    </t>
    <t>
Semantics for &quot;with&nbhy;defaults&quot; in &lt;edit&nbhy;data&gt; operations on any non
conventional configuration datastores should be defined by the
specification for the datastore.
    </t>
<section title="Example: Setting a Leaf of an Interface in &lt;running&gt;" anchor="example-setting-a-leaf-of-an-interface-in-running">

    <t>
The following example shows the &lt;edit&nbhy;data&gt; version of the first
&lt;edit&nbhy;config&gt; example in Section 7.2 of <xref
target="RFC6241"/>. In this example, the
MTU is set to 1500 on an interface named &quot;Ethernet0/0&quot; in the running
configuration datastore.
    </t>
	<figure>
    <artwork><![CDATA[
<rpc message-id="103"
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <edit-data xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-nmda"
             xmlns:ds="urn:ietf:params:xml:ns:yang:ietf-datastores">
    <datastore>ds:running</datastore>
    <config>
      <top xmlns="http://example.com/schema/1.2/config">
        <interface>
          <name>Ethernet0/0</name>
          <mtu>1500</mtu>
        </interface>
      </top>
    </config>
  </edit-data>
</rpc>
    ]]></artwork>
</figure>
	<figure>
    <artwork><![CDATA[
<rpc-reply message-id="103"
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <ok/>
</rpc-reply>
    ]]></artwork>
</figure>
    <t>
The other &lt;edit&nbhy;config&gt; examples shown in Section 7.2 of <xref
target="RFC6241"/> can be
translated to &lt;edit&nbhy;data&gt; examples in a similar way.
    </t>
</section>
</section>
</section>
<section title="Augmentations to NETCONF Operations" anchor="augmentations-to-netconf-operations">
    <t>
Several of the operations defined in the base NETCONF YANG module
&quot;ietf&nbhy;netconf&quot; <xref target="RFC6241"/> may be used with new datastores.  Hence, the
&lt;lock&gt;, &lt;unlock&gt;, and &lt;validate&gt; operations are augmented with a new
&quot;datastore&quot; leaf that can select the desired datastore.  If a &lt;lock&gt;,
&lt;unlock&gt;, or &lt;validate&gt; operation is not supported on a particular
datastore, then an error is returned, as specified in the
&quot;ietf&nbhy;netconf&nbhy;nmda&quot; module (see <xref target="yangmod"/>).
    </t>
</section>
</section>
<section title="NETCONF Datastores YANG Module" anchor="yangmod">
    <t>
This module imports definitions from <xref target="RFC6991"/>, <xref target="RFC6241"/>, <xref target="RFC6243"/>,
and <xref target="RFC8342"/>.
    </t>


<t>&lt;CODE BEGINS> file "ietf-netconf-nmda@2019-01-07.yang"</t>
	<figure>
    <artwork><![CDATA[
module ietf-netconf-nmda {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-netconf-nmda";
  prefix ncds;

  import ietf-yang-types {
    prefix yang;
    reference
      "RFC 6991: Common YANG Data Types";
  }
  import ietf-inet-types {
    prefix inet;
    reference
      "RFC 6991: Common YANG Data Types";
  }
  import ietf-datastores {
    prefix ds;
    reference
      "RFC 8342: Network Management Datastore Architecture
                 (NMDA)";
  }
  import ietf-origin {
    prefix or;
    reference
      "RFC 8342: Network Management Datastore Architecture
                 (NMDA)";
  }
  import ietf-netconf {
    prefix nc;
    reference
      "RFC 6241: Network Configuration Protocol (NETCONF)";
  }
  import ietf-netconf-with-defaults {
    prefix ncwd;
    reference
      "RFC 6243: With-defaults Capability for NETCONF";
  }

  organization
    "IETF NETCONF Working Group";
  contact
    "WG Web:   <https://datatracker.ietf.org/wg/netconf/>

     WG List:  <mailto:netconf@ietf.org>

     Author:   Martin Bjorklund
               <mailto:mbj@tail-f.com>

     Author:   Juergen Schoenwaelder
               <mailto:j.schoenwaelder@jacobs-university.de>

     Author:   Phil Shafer
               <mailto:phil@juniper.net>

     Author:   Kent Watsen
               <mailto:kent+ietf@watsen.net>

     Author:   Robert Wilton
               <mailto:rwilton@cisco.com>";
  description
    "This YANG module defines a set of NETCONF operations to support
     the Network Management Datastore Architecture (NMDA).

     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL 
     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED', 
     'MAY', and 'OPTIONAL' in this document are to be interpreted as 
     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when, 
     they appear in all capitals, as shown here.  

     Copyright (c) 2019 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject to
     the license terms contained in, the Simplified BSD License set
     forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 8526; see
     the RFC itself for full legal notices.";

  revision 2019-01-07 {
    description
      "Initial revision.";
    reference
      "RFC 8526: NETCONF Extensions to Support the Network Management
                 Datastore Architecture";
  }

  feature origin {
    description
      "Indicates that the server supports the 'origin' annotation.";
    reference
      "RFC 8342: Network Management Datastore Architecture (NMDA)";
  }

  feature with-defaults {
    description
      "NETCONF :with-defaults capability.  If the server advertises
       the :with-defaults capability for a session, then this
       feature must also be enabled for that session.  Otherwise,
       this feature must not be enabled.";
    reference
      "RFC 6243: With-defaults Capability for NETCONF, Section 4; and
       RFC 8526: NETCONF Extensions to Support the Network Management
                 Datastore Architecture, Section 3.1.1.2";
  }

  rpc get-data {
    description
      "Retrieve data from an NMDA datastore.  The content returned
       by get-data must satisfy all filters, i.e., the filter
       criteria are logically ANDed.

       Any ancestor nodes (including list keys) of nodes selected by
       the filters are included in the response.

       The 'with-origin' parameter is only valid for an operational
       datastore.  If 'with-origin' is used with an invalid
       datastore, then the server MUST return an <rpc-error> element
       with an <error-tag> value of 'invalid-value'.

       The 'with-defaults' parameter only applies to the operational
       datastore if the NETCONF :with-defaults and
       :with-operational-defaults capabilities are both advertised.
       If the 'with-defaults' parameter is present in a request for
       which it is not supported, then the server MUST return an
       <rpc-error> element with an <error-tag> value of
       'invalid-value'.";
    input {
      leaf datastore {
        type ds:datastore-ref;
        mandatory true;
        description
          "Datastore from which to retrieve data.

           If the datastore is not supported by the server, then the
           server MUST return an <rpc-error> element with an
           <error-tag> value of 'invalid-value'.";
      }
      choice filter-spec {
        description
          "The content filter specification for this request.";
        anydata subtree-filter {
          description
            "This parameter identifies the portions of the
             target datastore to retrieve.";
          reference
            "RFC 6241: Network Configuration Protocol (NETCONF),
                       Section 6";
        }
        leaf xpath-filter {
          if-feature "nc:xpath";
          type yang:xpath1.0;
          description
            "This parameter contains an XPath expression identifying
             the portions of the target datastore to retrieve.

             If the expression returns a node-set, all nodes in the
             node-set are selected by the filter.  Otherwise, if the
             expression does not return a node-set, then the
             <get-data> operation fails.

             The expression is evaluated in the following XPath
             context:

               o  The set of namespace declarations are those in
                  scope on the 'xpath-filter' leaf element.

               o  The set of variable bindings is empty.

               o  The function library is the core function library,
                  and the XPath functions are defined in Section 10
                  of RFC 7950.

               o  The context node is the root node of the target
                  datastore.";
        }
      }
      leaf config-filter {
        type boolean;
        description
          "Filter for nodes with the given value for their 'config'
           property.  When this leaf is set to 'true', only 'config
           true' nodes are selected, and when set to 'false', only
           'config false' nodes are selected.  If this leaf is not
           present, no nodes are filtered.";
      }
      choice origin-filters {
        when 'derived-from-or-self(datastore, "ds:operational")';
        if-feature origin;
        description
          "Filters configuration nodes based on the 'origin'
           annotation.  Configuration nodes that do not have an
           'origin' annotation are treated as if they have the
           'origin' annotation 'or:unknown'.

           System state nodes are not affected by origin-filters and
           thus not filtered.  Note that system state nodes can be
           filtered with the 'config-filter' leaf.";

        leaf-list origin-filter {
          type or:origin-ref;
          description
            "Filter based on the 'origin' annotation.  A
             configuration node matches the filter if its 'origin'
             annotation is derived from or equal to any of the given
             filter values.";
        }
        leaf-list negated-origin-filter {
          type or:origin-ref;
          description
            "Filter based on the 'origin' annotation.  A
             configuration node matches the filter if its 'origin'
             annotation is neither derived from nor equal to any of
             the given filter values.";
        }
      }
      leaf max-depth {
        type union {
          type uint16 {
            range "1..65535";
          }
          type enumeration {
            enum unbounded {
              description
                "All descendant nodes are included.";
            }
          }
        }
        default "unbounded";
        description
          "For each node selected by the filters, this parameter
           selects how many conceptual subtree levels should be
           returned in the reply.  If the depth is 1, the reply
           includes just the selected nodes but no children.  If the
           depth is 'unbounded', all descendant nodes are included.";
      }
      leaf with-origin {
        when 'derived-from-or-self(../datastore, "ds:operational")';
        if-feature "origin";
        type empty;
        description
          "If this parameter is present, the server will return
           the 'origin' annotation for the nodes that have one.";
      }
      uses ncwd:with-defaults-parameters {
        if-feature "with-defaults";
      }
    }
    output {
      anydata data {
        description
          "Copy of the source datastore subset that matched
           the filter criteria (if any).  An empty data
           container indicates that the request did not
           produce any results.";
      }
    }
  }

  rpc edit-data {
    description
      "Edit data in an NMDA datastore.

       If an error condition occurs such that an error severity
       <rpc-error> element is generated, the server will stop
       processing the <edit-data> operation and restore the
       specified configuration to its complete state at
       the start of this <edit-data> operation.";
    input {
      leaf datastore {
        type ds:datastore-ref;
        mandatory true;
        description
          "Datastore that is the target of the <edit-data> operation.

           If the target datastore is not writable, or is not
           supported by the server, then the server MUST return an
           <rpc-error> element with an <error-tag> value of
           'invalid-value'.";
      }
      leaf default-operation {
        type enumeration {
          enum merge {
            description
              "The default operation is merge.";
          }
          enum replace {
            description
              "The default operation is replace.";
          }
          enum none {
            description
              "There is no default operation.";
          }
        }
        default "merge";
        description
          "The default operation to use.";
      }
      choice edit-content {
        mandatory true;
        description
          "The content for the edit operation.";
        anydata config {
          description
            "Inline config content.";
        }
        leaf url {
          if-feature "nc:url";
          type inet:uri;
          description
            "URL-based config content.";
        }
      }
    }
  }

  /*
   * Augment the <lock> and <unlock> operations with a
   * "datastore" parameter.
   */

  augment "/nc:lock/nc:input/nc:target/nc:config-target" {
    description
      "Add NMDA datastore as target.";
    leaf datastore {
      type ds:datastore-ref;
      description
        "Datastore to lock.

         The <lock> operation is only supported on writable
         datastores.

         If the <lock> operation is not supported by the server on
         the specified target datastore, then the server MUST return
         an <rpc-error> element with an <error-tag> value of
         'invalid-value'.";
    }
  }

  augment "/nc:unlock/nc:input/nc:target/nc:config-target" {
    description
      "Add NMDA datastore as target.";
    leaf datastore {
      type ds:datastore-ref;
      description
        "Datastore to unlock.

         The <unlock> operation is only supported on writable
         datastores.

         If the <unlock> operation is not supported by the server on
         the specified target datastore, then the server MUST return
         an <rpc-error> element with an <error-tag> value of
         'invalid-value'.";
    }
  }

  /*
   * Augment the <validate> operation with a
   * "datastore" parameter.
   */

  augment "/nc:validate/nc:input/nc:source/nc:config-source" {
    description
      "Add NMDA datastore as source.";
    leaf datastore {
      type ds:datastore-ref;
      description
        "Datastore to validate.

         The <validate> operation is supported only on configuration
         datastores.

         If the <validate> operation is not supported by the server
         on the specified target datastore, then the server MUST
         return an <rpc-error> element with an <error-tag> value of
         'invalid-value'.";
    }
  }
}

    ]]></artwork>
</figure>
<t>&lt;CODE ENDS></t>
</section>
<section title="IANA Considerations" anchor="iana-considerations">
    <t>
This document registers two capability identifier URNs in the &quot;Network
Configuration Protocol (NETCONF) Capability URNs&quot; registry:
    </t>
	<figure>
    <artwork><![CDATA[
  Index
  Capability Identifier
  ---------------------
  :yang-library:1.1
  urn:ietf:params:netconf:capability:yang-library:1.1

  :with-operational-defaults
  urn:ietf:params:netconf:capability:with-operational-defaults:1.0
    ]]></artwork>
</figure>
    <t>
This document registers a URI in the &quot;IETF XML Registry&quot; <xref
target="RFC3688"/>. Following the format in RFC 3688, the following
registration has been made.
    </t>
	<figure>
<artwork><![CDATA[
  URI: urn:ietf:params:xml:ns:yang:ietf-netconf-nmda

  Registrant Contact: The IESG.

  XML: N/A, the requested URI is an XML namespace.
   ]]></artwork>
</figure>
    <t>
This document registers a YANG module in the &quot;YANG Module Names&quot;
registry <xref target="RFC6020"/>.
    </t>
	<figure>
    <artwork><![CDATA[
  name:         ietf-netconf-nmda
  namespace:    urn:ietf:params:xml:ns:yang:ietf-netconf-nmda
  prefix:       ncds
  reference:    RFC 8526
    ]]></artwork>
</figure>
</section>
<section title="Security Considerations" anchor="security-considerations">


    <t>
The YANG module defined in this document extends the base operations of the
NETCONF <xref target="RFC6241"/> protocol. The lowest NETCONF layer is the         
secure transport layer and the mandatory-to-implement secure transport is
Secure Shell (SSH) <xref target="RFC6242"/>.  
    </t>
    <t>
The Network Configuration Access Control Model (NACM) 
<xref target="RFC8341"/> 
provides the means to restrict access for particular NETCONF users to a
preconfigured subset of all available NETCONF protocol operations and
content. 
    </t>


    <t>
The security considerations for the base NETCONF protocol operations (see
Section 9 of <xref target="RFC6241"/>) apply to the new NETCONF
&lt;get&#8209;data&gt; and &lt;edit&#8209;data&gt; operations defined in this
document. 
    </t>
</section>
</middle>
<back>
<references title="Normative References">


<?rfc include="reference.RFC.2119"?>
<?rfc include="reference.RFC.6241"?>
<?rfc include="reference.RFC.6243"?>
<?rfc include="reference.RFC.6991"?>
<?rfc include="reference.RFC.7950"?>
<?rfc include="reference.RFC.8174"?>
<?rfc include="reference.RFC.8341"?>
<?rfc include="reference.RFC.8342"?>
<?rfc include="reference.RFC.3688"?>
<?rfc include="reference.RFC.6020"?>
<?rfc include="reference.RFC.6242"?>


<!-- ietf-netconf-rfc7895bis -->

<reference anchor="RFC8525" target="https://www.rfc-editor.org/info/rfc8525">
  <front>
    <title>YANG Library</title>
    <author initials="A" surname="Bierman" fullname="Andy Bierman">
      <organization/>
    </author>
    <author initials="M" surname="Bjorklund" fullname="Martin Bjorklund">
      <organization/>
    </author>
    <author initials="J" surname="Schoenwaelder" fullname="Juergen
							   Schoenwaelder">
      <organization/>
    </author>
    <author initials="K" surname="Watsen" fullname="Kent Watsen">
      <organization/>
    </author>
    <author initials="R" surname="Wilton" fullname="Robert Wilton">
      <organization/>
    </author>
    <date month="March" year="2019"/>
  </front>

<seriesInfo name='RFC' value='8525' />
<seriesInfo name='DOI' value='10.17487/RFC8525' />

</reference>


</references>

<references title="Informative References">

<?rfc include="reference.RFC.8340"?>


</references>

</back></rfc>
