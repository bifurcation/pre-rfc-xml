<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc.dtd">

<?rfc toc="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" obsoletes="5006" category="std" number="6106" submissionType="IETF">

<front>
    <title abbrev="IPv6 RA DNS Options">
         IPv6 Router Advertisement Options for DNS Configuration
    </title>

    <author initials="J." surname="Jeong" fullname="Jaehoon Paul Jeong">
        <organization abbrev="Brocade/ETRI">
            Brocade Communications Systems/ETRI
        </organization>

        <address>
            <postal>
                <street>6000 Nathan Ln N</street>
                <city>Plymouth</city> <region>MN</region>
                <code>55442</code>
                <country>USA</country>
            </postal>
            <phone>+1 763 268 7173</phone>
            <facsimile>+1 763 268 6800</facsimile>
            <email>pjeong@brocade.com</email>
            <uri>http://www.cs.umn.edu/~jjeong/</uri>
        </address>
    </author>
 
    <author initials="S." surname="Park" fullname="Soohong Daniel Park">
        <organization abbrev="SAMSUNG Electronics">
            Digital Media & Communications R&D Center
        </organization>

        <address>
            <postal>
                <street>SAMSUNG Electronics</street>
                <street>416 Maetan-3dong, Yeongtong-Gu</street>
                <city>Suwon</city> <region>Gyeonggi-Do</region>
                <code>443-742</code>
                <country>Korea</country>
            </postal>
            <phone>+82 31 279 8876</phone>
            <email>soohong.park@samsung.com</email>
        </address>
    </author>

    <author initials="L." surname="Beloeil" fullname="Luc Beloeil">
        <organization abbrev="France Telecom R&D">
            France Telecom R&D
        </organization>

        <address>
            <postal>
                <street>42, rue des coutures</street>
                <street>BP 6243</street>
                <city>14066 CAEN Cedex 4</city>
                <country>France</country>
            </postal>
            <phone>+33 2 40 44 97 40</phone>
            <email>luc.beloeil@orange-ftgroup.com</email>
        </address>
    </author>

    <author initials="S." surname="Madanapalli" fullname="Syam Madanapalli">
<organization>iRam Technologies</organization>
		<address>
		<postal>
                    <street>#H304, Shriram Samruddhi, Thubarahalli</street>
		        <city>Bangalore - 560066</city> 
		        <country>India</country>
		</postal>
          
		<email>smadanapalli@gmail.com</email>
        </address>
    </author>

    <date month="November"  year="2010" />
        
<keyword>DNS Service</keyword>     
<keyword>DNS Option</keyword>
<keyword>Recursive DNS Server Address</keyword>
<keyword>DNS Search List</keyword>
<keyword>Stateless Autoconfiguration</keyword>

    <abstract>
        <t>
        This document specifies IPv6 Router Advertisement options to
        allow IPv6 routers to advertise a list of DNS recursive server addresses
        and a DNS Search List to IPv6 hosts.
        </t>
    </abstract>
</front>

<middle>

<section title="Introduction"> 
        <t>
        The purpose of this document is to standardize an IPv6 Router Advertisement (RA) option for
        DNS Recursive Server Addresses used for the DNS name resolution in IPv6 hosts.
        This RA option was specified in an earlier Experimental specification 
        <xref target="RFC5006" />. This document is also to define a new RA option for 
		Domain Name Search Lists for an enhanced DNS configuration. Thus, this document obsoletes
        <xref target="RFC5006" />, which only defines the RA option for DNS Recursive Server Addresses.
        </t>

        <t>
        Neighbor Discovery (ND) for IP version 6 and IPv6 stateless 
        address autoconfiguration provide ways to configure either fixed 
        or mobile nodes with one or more IPv6 addresses, default routers, 
        and some other parameters <xref target="RFC4861" /><xref target="RFC4862" />.
        Most Internet services are identified by using a DNS name. 
        The two RA options defined in this document provide the DNS information needed 
        for an IPv6 host to reach Internet services.
        </t>

        <t>
        It is infeasible to manually configure nomadic hosts each time they connect to a different network. 
        While a one-time static configuration is possible, it is generally not desirable on 
        general-purpose hosts such as laptops.  For instance, locally defined name spaces would not be 
        available to the host if it were to run its own name server software directly connected to 
        the global DNS.
        </t>

        <t> 
        The DNS information can also be provided through DHCP 
        <xref target="RFC3315" /><xref target="RFC3736" /><xref target="RFC3646" />.  
        However, the access to DNS is a fundamental requirement for almost all hosts, so 
        IPv6 stateless autoconfiguration cannot stand on its own as an alternative deployment model 
        in any practical network without any support for DNS configuration.  
        </t>

        <t>
        These issues are not pressing 
        in dual-stack networks as long as a DNS server is available on the IPv4 side, but they become more critical 
        with the deployment of IPv6-only networks.  As a result, this document defines a mechanism based on 
        IPv6 RA options to allow IPv6 hosts to perform the automatic DNS configuration.
	</t>

    <section title="Applicability Statements">
		<t>
        RA-based DNS configuration is a useful alternative in networks where
        an IPv6 host's address is autoconfigured through IPv6 stateless
        address autoconfiguration and where there is either no DHCPv6
        infrastructure at all or some hosts do not have a DHCPv6 client.
        The intention is to enable the full configuration of basic networking
        information for hosts without requiring DHCPv6.  
        However, when in many networks some additional information needs to
        be distributed, those networks are likely to employ DHCPv6.
        In these networks, RA-based DNS configuration may not be needed.
        </t>

        <t>
		RA-based DNS configuration allows an IPv6 host to acquire the DNS configuration 
		(i.e., DNS recursive server addresses and DNS Search List) for the link(s) 
        to which the host is connected.  Furthermore, the host learns this DNS configuration 
        from the same RA message that provides configuration information for the link, 
        thereby avoiding also running DHCPv6.
		</t>
	    
        <t>
        The advantages and disadvantages of the RA-based
        approach are discussed in <xref target="RFC4339" /> along with other
        approaches, such as the DHCP and well-known anycast
        address approaches.
        </t>
    </section>

    <section title="Coexistence of RA Options and DHCP Options for DNS Configuration">
    <t>
    Two protocols exist to configure the DNS information on a host, the Router Advertisement options 
    described in this document and the DHCPv6 options described in <xref target="RFC3646" />.  
    They can be used together.  The rules governing the decision to use stateful configuration mechanisms 
    are specified in <xref target="RFC4861" />.  Hosts conforming to this specification MUST extract 
    DNS information from Router Advertisement messages, unless static DNS configuration has been specified 
    by the user.  If there is DNS information available from multiple Router Advertisements and/or from DHCP, 
    the host MUST maintain an ordered list of this information as specified in Section 5.3.1.
    </t>
    </section>
  
</section>
  
<section title="Requirements Language">
    <t>
	The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
    document are to be interpreted as described in <xref target="RFC2119" />.
    </t>
</section>

<section title="Terminology">
    <t>
	This document uses the terminology described in <xref target="RFC4861" /> and <xref target="RFC4862" />.
    In addition, four new terms are defined below:
    </t>
    
    <t>
    <list style="symbols"> 
        <t>
		Recursive DNS Server (RDNSS): Server that provides a recursive DNS resolution service for
        translating domain names into IP addresses as defined in <xref target="RFC1034" /> and <xref target="RFC1035" />.
        </t>

        <t>
		RDNSS Option: IPv6 RA option to deliver the RDNSS information to IPv6 hosts
        <xref target="RFC4861" />.
        </t>

        <t>
		DNS Search List (DNSSL): The list of DNS suffix domain names used by IPv6 hosts 
		when they perform DNS query searches for short, unqualified domain names.
		</t>

        <t>
		DNSSL Option: IPv6 RA option to deliver the DNSSL information to IPv6 hosts.
        </t>
		
        <t>
		DNS Repository: Two data structures for managing DNS Configuration Information in the IPv6 protocol stack 
		in addition to Neighbor Cache and Destination Cache for Neighbor Discovery <xref target="RFC4861" />.
		The first data structure is the DNS Server List for RDNSS addresses and the second is the DNS Search List for DNS search
		domain names.
        </t>
  
        <t>
		Resolver Repository: Configuration repository with RDNSS addresses and a DNS Search List that a DNS  
        resolver on the host uses for DNS name resolution; for example, the Unix resolver file
        (i.e., /etc/resolv.conf) and Windows registry.
        </t>
    </list>
    </t>
</section>

<section title="Overview">
   <t>
   This document standardizes the ND option called the RDNSS option defined in
   <xref target="RFC5006" /> that contains the addresses of recursive DNS servers.  
   This document also defines a new ND option called the DNSSL option for the
   Domain Search List.  
   This is to maintain parity with the DHCPv6 options and to ensure that there is necessary 
   functionality to determine the search domains.
   </t>

   <t>
   The existing ND message (i.e., Router Advertisement) is used to carry this information. 
   An IPv6 host can configure the IPv6 addresses of one or more RDNSSes via RA messages.
   Through the RDNSS and DNSSL options, along with the prefix
   information option based on the ND protocol (<xref target="RFC4861" /> and <xref target="RFC4862" />),
   an IPv6 host can perform the network configuration of its
   IPv6 address and the DNS information simultaneously without needing
   DHCPv6 for the DNS configuration.  The RA options for RDNSS and DNSSL
   can be used on any network that supports the use of ND.
   </t>
  
   <t>
   This approach requires the manual configuration or other automatic mechanisms 
   (e.g., DHCPv6 or vendor proprietary configuration mechanisms) to configure the DNS information in routers
   sending the advertisements. 
   The automatic configuration of RDNSS addresses and a DNS Search List in routers is out of scope
   for this document.
  </t>
</section>

<section title="Neighbor Discovery Extension">
    <t>
    The IPv6 DNS configuration mechanism in this document needs two new ND
    options in Neighbor Discovery: (i) the Recursive DNS Server (RDNSS)
    option and (ii) the DNS Search List (DNSSL) option.
    </t>

    <section title="Recursive DNS Server Option">
        <t>
		The RDNSS option contains one or more IPv6 addresses of recursive DNS
        servers.  All of the addresses share the same Lifetime value.  If it
        is desirable to have different Lifetime values, multiple RDNSS
        options can be used.  Figure 1 shows the format of the RDNSS option.
        </t>

        <figure anchor="rdnss-option-format" title="Recursive DNS Server (RDNSS) Option Format">
            <artwork><![CDATA[
   0                   1                   2                   3  
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1  
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
  |     Type      |     Length    |           Reserved            | 
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
  |                           Lifetime                            | 
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
  |                                                               | 
  :            Addresses of IPv6 Recursive DNS Servers            : 
  |                                                               | 
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
            ]]></artwork>
        </figure>

    <!-- <t>Fields:</t> -->
    <figure>
           <artwork><![CDATA[
Fields:
  Type          8-bit identifier of the RDNSS option type as assigned
                by the IANA: 25

  Length        8-bit unsigned integer.  The length of the option
                (including the Type and Length fields) is in units of
                8 octets.  The minimum value is 3 if one IPv6 address
                is contained in the option.  Every additional RDNSS
                address increases the length by 2.  The Length field
                is used by the receiver to determine the number of
                IPv6 addresses in the option.
  
  Lifetime      32-bit unsigned integer.  The maximum time, in
                seconds (relative to the time the packet is sent),
                over which this RDNSS address MAY be used for name
                resolution.  Hosts MAY send a Router Solicitation to
                ensure the RDNSS information is fresh before the
                interval expires.  In order to provide fixed hosts
                with stable DNS service and allow mobile hosts to
                prefer local RDNSSes to remote RDNSSes, the value of
                Lifetime SHOULD be bounded as 
                MaxRtrAdvInterval <= Lifetime <= 2*MaxRtrAdvInterval
                where MaxRtrAdvInterval is the Maximum RA Interval
                defined in [RFC4861].  A value of all one bits 
                (0xffffffff) represents infinity.  A value of zero
                means that the RDNSS address MUST no longer be used.
            ]]></artwork>
     </figure>

    <figure>
           <artwork><![CDATA[
  Addresses of IPv6 Recursive DNS Servers
                One or more 128-bit IPv6 addresses of the recursive
                DNS servers.  The number of addresses is determined
                by the Length field.  That is, the number of
                addresses is equal to (Length - 1) / 2.
            ]]></artwork>
     </figure>
    </section>

    <section title="DNS Search List Option">
        <t>
		The DNSSL option contains one or more domain names of DNS suffixes.  
		All of the domain names share the same Lifetime value.  If it
        is desirable to have different Lifetime values, multiple DNSSL
        options can be used.  Figure 2 shows the format of the DNSSL option.
        </t>


        <figure anchor="dnssl-option-format" title="DNS Search List (DNSSL) Option Format">
            <artwork><![CDATA[
   0                   1                   2                   3  
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1  
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
  |     Type      |     Length    |           Reserved            | 
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
  |                           Lifetime                            | 
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
  |                                                               | 
  :                Domain Names of DNS Search List                : 
  |                                                               | 
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
            ]]></artwork>
        </figure>

		
    <!-- <t>Fields:</t> -->
    <figure>
           <artwork><![CDATA[
Fields:
  Type          8-bit identifier of the DNSSL option type as assigned
                by the IANA: 31

  Length        8-bit unsigned integer.  The length of the option
                (including the Type and Length fields) is in units of
                8 octets.  The minimum value is 2 if at least one
                domain name is contained in the option.  The Length 
                field is set to a multiple of 8 octets to accommodate
                all the domain names in the field of Domain Names of 
                DNS Search List.
				
  Lifetime      32-bit unsigned integer.  The maximum time, in
                seconds (relative to the time the packet is sent),
                over which this DNSSL domain name MAY be used for
                name resolution.  The Lifetime value has the same
                semantics as with the RDNSS option.  That is, Lifetime
                SHOULD be bounded as follows:
                MaxRtrAdvInterval <= Lifetime <= 2*MaxRtrAdvInterval.
                A value of all one bits (0xffffffff) represents 
                infinity.  A value of zero means that the DNSSL 
                domain name MUST no longer be used.

  Domain Names of DNS Search List
                One or more domain names of DNS Search List that MUST
                be encoded using the technique described in Section 
                3.1 of [RFC1035].  By this technique, each domain 
                name is represented as a sequence of labels ending in
                a zero octet, defined as domain name representation.
                For more than one domain name, the corresponding 
                domain name representations are concatenated as they 
                are.  Note that for the simple decoding, the domain 
                names MUST NOT be encoded in a compressed form, as 
                described in Section 4.1.4 of [RFC1035].  Because the
                size of this field MUST be a multiple of 8 octets, 
                for the minimum multiple including the domain name 
                representations, the remaining octets other than the
                encoding parts of the domain name representations 
                MUST be padded with zeros.
            ]]></artwork>
    </figure>

        <t><list style="hanging">
            <t hangText="Note:">
            An RDNSS address or a DNSSL domain name MUST be used only as long as both the RA router Lifetime (advertised by a Router Advertisement message <xref target="RFC4861" />) and the corresponding option Lifetime have not expired.
            The reason is that in the current network to which an IPv6 host is connected,
            the RDNSS may not be currently reachable, that the DNSSL domain name 
            is not valid any more, or that these options do not provide service to the host's 
            current address (e.g., due to network ingress filtering 
            <xref target="RFC2827" /><xref target="RFC5358" />).
            </t>
        </list>
        </t>

	</section>
	
	<section title="Procedure of DNS Configuration">
        <t>
        The procedure of DNS configuration through the RDNSS and DNSSL options is the same as
        with any other ND option <xref target="RFC4861" />.
        </t>

            <section title="Procedure in IPv6 Host">
            <t>
            When an IPv6 host receives DNS options (i.e., RDNSS option and DNSSL option) 
			through RA messages, it processes the options as follows:
            </t>

            <t>
            <list style="symbols"> 
                <t>
				The validity of DNS options is checked with the Length field; that is, 
				the value of the Length field in the RDNSS option is greater than or equal to the
                minimum value (3), and the value of the Length field in the DNSSL option is 
                greater than or equal to the minimum value (2).
				</t>

				<t>
                If the DNS options are valid, the host SHOULD copy the values of the options
                into the DNS Repository and the Resolver Repository in order. 
				Otherwise, the host MUST discard the options.  Refer to Section 6 for the detailed procedure. 
				</t>
            </list>
            </t>
			
            <t>
            When the IPv6 host has gathered a sufficient number (e.g., three) of RDNSS addresses 
            (or DNS search domain names), 
			it SHOULD maintain RDNSS addresses (or DNS search domain names) by the sufficient number
			such that the latest received RDNSS or DNSSL is more preferred to the old ones; that is,
			when the number of RDNSS addresses (or DNS search domain names) is already 
			the sufficient number, the new one replaces the old one that will expire first in terms of 
			Lifetime.  As an exceptional case, if the received RDNSS addresses (or DNS search domain names) 
			already exist in the IPv6 host, their Lifetime fields update their Expiration-time, that is, 
			when the corresponding DNS information expires in the IPv6 host; 
			note that when the Lifetime field has zero, 
			the corresponding RDNSS (or DNS search domain name) is deleted from the IPv6 host.
			Except for this update, the IPv6 host SHOULD ignore other RDNSS addresses (or DNS search domain names) 
			within an RDNSS (or a DNSSL) option and/or additional RDNSS 
			(or DNSSL) options within an RA.  Refer to Section 6 for the detailed procedure.
			Note that the sufficient number is a system parameter, so it can be determined 
			by a local policy.  Also, separate parameters can be specified for the sufficient number of 
			RDNSS addresses and that of DNS search domain names, respectively.  
			In this document, three is RECOMMENDED as a sufficient number considering 
			both the robust DNS query and the reasonably time-bounded recognition of the 
			unreachability of DNS servers.
            </t>

            <t> 
			In the case where the DNS options of RDNSS and DNSSL can be obtained from multiple sources,
			such as RA and DHCP, the IPv6 host SHOULD keep some DNS options from all sources. 
			Unless explicitly specified for the discovery mechanism, the exact number of addresses and
			domain names to keep is a matter of local policy and implementation choice.  However, 
			the ability to store at least three RDNSS addresses (or DNSSL domain names)  
			from at least two different sources is RECOMMENDED.  The DNS options from Router Advertisements and 
			DHCP SHOULD be stored into the DNS Repository and Resolver Repository so that information 
			from DHCP appears there first and therefore takes precedence.
            Thus, the DNS information from DHCP takes precedence over that from RA for DNS queries.  
			On the other hand, for DNS options announced by RA, if some RAs use 
			the Secure Neighbor Discovery (SEND) protocol <xref target="RFC3971" /> for RA security, 
			they MUST be preferred over those that do not use SEND.
			Refer to Section 7 for the detailed discussion on SEND for RA DNS options.
            </t>
        </section>

		<section title="Warnings for DNS Options Configuration">           
			<t>
			There are two warnings for DNS options configuration: 
			(i) warning for multiple sources of DNS options and 
			(ii) warning for multiple network interfaces. 
			First, in the case of multiple sources for DNS options 
			(e.g., RA and DHCP), an IPv6 host can configure its IP addresses 
			from these sources.  In this case, it is not possible to control 
			how the host uses DNS information and what source addresses it uses to send DNS queries. As a result, 
			configurations where different information is provided by different
			sources may lead to problems. Therefore, the network administrator 
			needs to configure DNS options in multiple sources in order to 
			prevent such problems from happening.  
			</t>

			<t>
			Second, if different DNS information is provided on different 
			network interfaces, this can lead to inconsistent behavior.  
			The IETF is working on solving this problem for both DNS and 
			other information obtained by multiple interfaces 
			<xref target="MIF-PROBLEM" /><xref target="MIF-PRACTICE" />.
			</t>
        </section>
    </section>
</section>

<section title="Implementation Considerations">

  <t><list style="hanging">
  <t hangText="Note:">
  This non-normative section gives some hints for implementing
  the processing of the RDNSS and DNSSL options in an IPv6 host.
  </t>
  </list></t>

    <t>
	For the configuration and management of DNS information, the
    advertised DNS configuration information can be stored and managed in both the DNS
    Repository and the Resolver Repository.
    </t>

    <t>
	In environments where the DNS information is stored in user space
    and ND runs in the kernel, it is necessary to synchronize the DNS
    information (i.e., RDNSS addresses and DNS search domain names) in kernel space and the Resolver
    Repository in user space.  For the synchronization, an implementation
    where ND works in the kernel should provide a write operation for
    updating DNS information from the kernel to the Resolver
    Repository.  One simple approach is to have a daemon (or a program
    that is called at defined intervals) that keeps monitoring the
    Lifetimes of RDNSS addresses and DNS search domain names all the time.  
	Whenever there is an expired entry in the DNS Repository, the daemon can delete the
    corresponding entry from the Resolver Repository.
    </t>

    <section title="DNS Repository Management">
        <t>
		For DNS repository management, the kernel or user-space process (depending on where RAs are
        processed) should maintain two data structures: (i) DNS Server List
        that keeps the list of RDNSS addresses and (ii) DNS Search List that keeps the list of DNS search domain names.  
		Each entry in these two lists consists of a pair of an RDNSS address (or DNSSL domain name) and Expiration-time as
        follows:
        </t>
        
	<t>
        <list style="symbols"> 
          <t>
          RDNSS address for DNS Server List: IPv6 address of the Recursive DNS Server, which is
          available for recursive DNS resolution service in the network
          advertising the RDNSS option.
          </t>

          <t>
          DNSSL domain name for DNS Search List: DNS suffix domain names, which are
          used to perform DNS query searches for short, unqualified domain names in the network
          advertising the DNSSL option.
          </t>
			
          <t>
          Expiration-time for DNS Server List or DNS Search List: The time when this entry becomes invalid.
          Expiration-time is set to the value of the Lifetime field of the
          RDNSS option or DNSSL option plus the current system time.  Whenever a new RDNSS
          option with the same address (or DNSSL option with the same domain name) is received 
          on the same interface as a previous RDNSS option (or DNSSL option), 
          this field is updated to have a new Expiration-time.  
          When Expiration-time becomes less than the current system time, this entry is regarded as expired.
   	  </t>    
        </list>
        </t>
    </section>

    <section title="Synchronization between DNS Server List and Resolver Repository">
        <t>
		When an IPv6 host receives the information of multiple RDNSS
        addresses within a network (e.g., campus network and company network)
        through an RA message with RDNSS option(s),
        it stores the RDNSS addresses (in order) into both the DNS Server
        List and the Resolver Repository.  The processing of the RDNSS
        consists of (i) the processing of RDNSS option(s) included in an RA message and (ii)
        the handling of expired RDNSSes. The processing of RDNSS option(s) is as follows:
        </t>

        <t>
        <list style="empty">
            <t>
            Step (a): Receive and parse the RDNSS option(s).  For the RDNSS
            addresses in each RDNSS option, perform Steps (b) through (d).
            </t>

            <t>
            Step (b): For each RDNSS address, check the following: If the
            RDNSS address already exists in the DNS Server List and the RDNSS
            option's Lifetime field is set to zero, delete the corresponding
            RDNSS entry from both the DNS Server List and the Resolver
            Repository in order to prevent the RDNSS address from being used
            any more for certain reasons in network management, e.g., the
            termination of the RDNSS or a renumbering situation. That is, 
			the RDNSS can resign from its DNS service because the machine 
			running the RDNSS is out of service intentionally or unintentionally.
			Also, under the renumbering situation, the RDNSS's IPv6 address 
			will be changed, so the previous RDNSS address should not be used any more.
  			The processing of this RDNSS address is finished here.  Otherwise, go to Step
            (c).
			</t>
			
            <t>
			Step (c): For each RDNSS address, if it already exists in the DNS
            Server List, then just update the value of the Expiration-time
            field according to the procedure specified in the third bullet of
            Section 6.1.  Otherwise, go to Step (d).
			</t>

            <t>
			Step (d): For each RDNSS address, if it does not exist in the DNS
            Server List, register the RDNSS address and Lifetime with the DNS
            Server List and then insert the RDNSS address in front of the
            Resolver Repository.  In the case where the data structure for the
            DNS Server List is full of RDNSS entries (that is, has more RDNSSes 
			than the sufficient number discussed in Section 5.3.1), 
			delete from the DNS Server List the entry 
			with the shortest Expiration-time (i.e., the entry that will expire first).  
			The corresponding RDNSS address is also deleted from the Resolver 
			Repository.  For the ordering of RDNSS addresses in an RDNSS option, 
			position the first RDNSS address in the RDNSS option as the first one in the Resolver Repository,			 the second RDNSS address in the option as the second one in the repository, and so on.
            This ordering allows the RDNSS addresses in the RDNSS option to be preferred 
			according to their order in the RDNSS option for the DNS name resolution.
			The processing of these RDNSS addresses is finished here.
			</t>
        </list>
        </t>

		<t>
		The handling of expired RDNSSes is as follows:
		Whenever an entry expires in the DNS Server List, the expired entry is 
		deleted from the DNS Server List, and also the RDNSS address 
		corresponding to the entry is deleted from the Resolver Repository.
		</t>
    </section>
	
    <section title="Synchronization between DNS Search List and Resolver Repository">
        <t>
        When an IPv6 host receives the information of multiple DNSSL domain names within a network 
        (e.g., campus network and company network) through an RA message with DNSSL option(s),
        it stores the DNSSL domain names (in order) into both the DNS Search
        List and the Resolver Repository.  
		The processing of the DNSSL consists of (i) the processing of DNSSL option(s) included 
		in an RA message and (ii) the handling of expired DNSSLs.  The processing of DNSSL option(s) 
		is as follows:
        </t>

        <t>
        <list style="empty">
			<t>
			Step (a): Receive and parse the DNSSL option(s).  For the DNSSL
			domain names in each DNSSL option, perform Steps (b) through (d).
            </t>

            <t>
            Step (b): For each DNSSL domain name, check the following: If the
            DNSSL domain name already exists in the DNS Search List and the DNSSL
            option's Lifetime field is set to zero, delete the corresponding
            DNSSL entry from both the DNS Search List and the Resolver
            Repository in order to prevent the DNSSL domain name from being used
            any more for certain reasons in network management, e.g., the
            termination of the RDNSS or a renaming situation.  
			That is, the RDNSS can resign from its DNS service because the machine 
			running the RDNSS is out of service intentionally or unintentionally.
			Also, under the renaming situation, the DNSSL domain names will be changed, 
			so the previous domain names should not be used any more.
			The processing of this DNSSL domain name is finished here.  Otherwise, go to Step
            (c).
			</t>
			
            <t>
			Step (c): For each DNSSL domain name, if it already exists in the DNS
            Server List, then just update the value of the Expiration-time
            field according to the procedure specified in the third bullet of
            Section 6.1.  Otherwise, go to Step (d).
			</t>

            <t>
			Step (d): For each DNSSL domain name, if it does not exist in the DNS
            Search List, register the DNSSL domain name and Lifetime with the DNS
            Search List and then insert the DNSSL domain name in front of the
            Resolver Repository.  In the case where the data structure for the
            DNS Search List is full of DNSSL domain name entries (that is, has more DNSSL domain names 
			than the sufficient number discussed in Section 5.3.1), delete from the DNS
            Server List the entry with the shortest Expiration-time (i.e., the
            entry that will expire first).  The corresponding DNSSL domain name is
            also deleted from the Resolver Repository.  
			For the ordering of DNSSL domain names in a DNSSL option, 
			position the first DNSSL domain name in the DNSSL option as the first one 
			in the Resolver Repository, the second DNSSL domain name in the option as the second one 
			in the repository, and so on.
            This ordering allows the DNSSL domain names in the DNSSL option to be preferred 
			according to their order in the DNSSL option for the DNS domain name used by the DNS query.  
            The processing of these DNSSL domain name is finished here.  
			</t>

            <t>
			The handling of expired DNSSLs is as follows:
			Whenever an entry expires in the DNS Search List, the expired entry is 
			deleted from the DNS Search List, and also the DNSSL domain name 
			corresponding to the entry is deleted from the Resolver Repository.
			</t>
        </list>
        </t>
    </section>	
</section>

<section anchor="security-considerations" title="Security Considerations">
	<t> In this section, we analyze security threats related to DNS options and then 
		suggest recommendations to cope with such security threats.
	</t>

    <section title="Security Threats">
		<t>
		For the RDNSS option, an attacker could send an RA with a fraudulent RDNSS address,
		misleading IPv6 hosts into contacting an unintended DNS server for DNS name resolution.
		Also, for the DNSSL option, an attacker can let IPv6 hosts resolve a host name without 
		a DNS suffix into an unintended host's IP address with a fraudulent DNS Search List.
		</t>
	
		<t>
		These attacks are similar to Neighbor Discovery attacks that use Redirect or Neighbor Advertisement 
		messages to redirect traffic to individual addresses of malicious parties. 
        That is, as a rogue router, a malicious node on a LAN can promiscuously receive packets 
		for any router's Media Access Control (MAC) address and send packets with the router's MAC address as the source
	    MAC address in the Layer 2 (L2) header.  As a result, L2 switches send packets
    	addressed to the router to the malicious node.  Also, this attack can
	    send redirects that tell the hosts to send their traffic somewhere
    	else.  The malicious node can send unsolicited RA or Neighbor
	    Advertisement (NA) replies, answer RS or Neighbor Solicitation (NS)
	    requests, etc.
		Thus, the attacks related to RDNSS and DNSSL are similar to both 
		Neighbor Discovery attacks and attacks against unauthenticated DHCP, 
		as both can be used for both "wholesale" traffic redirection and 
		more specific attacks.
		</t>

		<t>
		However, the security of these RA options for DNS configuration does not affect ND
	    protocol security <xref target="RFC4861" />.  This is because
		learning DNS information via the RA options cannot be worse than 
		learning bad router information	via the RA options. 
		Therefore, the vulnerability of ND is not worse and is a subset of the attacks that
    	any node attached to a LAN can do independently of ND.
    	</t>
	</section>

	<section title="Recommendations">
	    <t>
		The Secure Neighbor Discovery (SEND) protocol <xref target="RFC3971" /> is used as a
	    security mechanism for ND. It is RECOMMENDED that ND use SEND to allow all the ND options 
		including the RDNSS and DNSSL options to be automatically included in the signatures. 
		Through SEND, the transport for the RA options is integrity protected; 
		that is, SEND can prevent the spoofing of these DNS options with signatures.  
    	Also, SEND enables an IPv6 host to verify that the sender of an RA is actually 
		a router authorized to act as a router. 
    	However, since any valid SEND router can still insert RDNSS and DNSSL options, 
		the current SEND cannot verify which one is or is not authorized to send the options.
		Thus, this verification of the authorized routers for ND options will be required.
		<xref target="CSI-SEND-CERT" /> specifies the usage of extended key
		for the certificate deployed in SEND. This document defines the roles of routers
		(i.e., routers acting as proxy and address owner) and explains the authorization of the roles.
        The mechanism in this document can be extended to verify which routers are authorized to insert
		RDNSS and DNSSL options.
    	</t>  
    
		<t>
		It is common for network devices such as switches to include mechanisms to block
	    unauthorized ports from running a DHCPv6 server to provide protection
    	from rogue DHCP servers.  That means that an attacker on other
	    ports cannot insert bogus DNS servers using DHCPv6.  The corresponding technique
    	for network devices is RECOMMENDED to block rogue Router Advertisement messages
	    including the RDNSS and DNSSL options from unauthorized nodes.
		</t>
	
		<t>
    	An attacker may provide a bogus DNS Search List option in order
	    to cause the victim to send DNS queries to a specific DNS server
    	when the victim queries non-FQDNs (fully qualified domain names).  
	    For this attack, the DNS resolver in IPv6 hosts can mitigate the vulnerability 
		with the recommendations mentioned in <xref target="RFC1535" />, <xref target="RFC1536" />, and <xref target="RFC3646" />.
		</t>
	</section>
</section>

<section title="IANA Considerations">
    <t>
	The RDNSS option defined in this document uses
	the IPv6 Neighbor Discovery Option type defined in RFC 5006 <xref
target="RFC5006" />, which was assigned by the IANA as follows:  
	</t>  
    <figure>
      <artwork><![CDATA[
              Option Name                   Type
              Recursive DNS Server Option   25
      ]]></artwork>
    </figure>

    <t>	
	The IANA has assigned a new IPv6 Neighbor Discovery Option
    type for the DNSSL option defined in this document:
    </t>
    <figure>
      <artwork><![CDATA[
              Option Name                   Type
              DNS Search List Option        31
      ]]></artwork>
    </figure>

    <t>These options have been registered in the "Internet Control Message
Protocol version 6 (ICMPv6) Parameters" registry (http://www.iana.org).</t>
</section>

<section title="Acknowledgements">
    <t>
	This document has greatly benefited from inputs by Robert Hinden,
    Pekka Savola, Iljitsch van Beijnum, Brian Haberman, Tim Chown, Erik Nordmark, Dan Wing, Jari Arkko, 
	Ben Campbell, Vincent Roca, and Tony Cheneau.
    The authors sincerely appreciate their contributions.
    </t>
</section>

</middle>

<back>

<references title="Normative References">


<reference anchor='RFC2119'>

<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year='1997' month='March' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='ftp://ftp.isi.edu/in-notes/rfc2119.txt' />
<format type='HTML' octets='17491' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5777' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>


<reference anchor='RFC4861'>

<front>
<title>Neighbor Discovery for IP version 6 (IPv6)</title>
<author initials='T.' surname='Narten' fullname='T. Narten'>
<organization /></author>
<author initials='E.' surname='Nordmark' fullname='E. Nordmark'>
<organization /></author>
<author initials='W.' surname='Simpson' fullname='W. Simpson'>
<organization /></author>
<author initials='H.' surname='Soliman' fullname='H. Soliman'>
<organization /></author>
<date year='2007' month='September' />
<abstract>
<t>This document specifies the Neighbor Discovery protocol for IP Version 6.  IPv6 nodes on the same link use Neighbor Discovery to discover each other's presence, to determine each other's link-layer addresses, to find routers, and to maintain reachability information about the paths to active neighbors. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4861' />
<format type='TXT' octets='235106' target='ftp://ftp.rfc-editor.org/in-notes/rfc4861.txt' />
</reference>


<reference anchor='RFC4862'>

<front>
<title>IPv6 Stateless Address Autoconfiguration</title>
<author initials='S.' surname='Thomson' fullname='S. Thomson'>
<organization /></author>
<author initials='T.' surname='Narten' fullname='T. Narten'>
<organization /></author>
<author initials='T.' surname='Jinmei' fullname='T. Jinmei'>
<organization /></author>
<date year='2007' month='September' />
<abstract>
<t>This document specifies the steps a host takes in deciding how to autoconfigure its interfaces in IP version 6.  The autoconfiguration process includes generating a link-local address, generating global addresses via stateless address autoconfiguration, and the Duplicate Address Detection procedure to verify the uniqueness of the addresses on a link. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4862' />
<format type='TXT' octets='72482' target='ftp://ftp.rfc-editor.org/in-notes/rfc4862.txt' />
</reference>


<reference anchor='RFC1035'>

<front>
<title abbrev='Domain Implementation and Specification'>Domain names - implementation and specification</title>
<author initials='P.' surname='Mockapetris' fullname='P. Mockapetris'>
<organization>USC/ISI</organization>
<address>
<postal>
<street>4676 Admiralty Way</street>
<city>Marina del Rey</city>
<region>CA</region>
<code>90291</code>
<country>US</country></postal>
<phone>+1 213 822 1511</phone></address></author>
<date year='1987' day='1' month='November' /></front>

<seriesInfo name='STD' value='13' />
<seriesInfo name='RFC' value='1035' />
<format type='TXT' octets='125626' target='ftp://ftp.isi.edu/in-notes/rfc1035.txt' />
</reference>
</references>

<references title="Informative References">



<reference anchor='RFC1034'>

<front>
<title abbrev='Domain Concepts and Facilities'>Domain names - concepts and facilities</title>
<author initials='P.' surname='Mockapetris' fullname='P. Mockapetris'>
<organization>Information Sciences Institute (ISI)</organization></author>
<date year='1987' day='1' month='November' /></front>

<seriesInfo name='STD' value='13' />
<seriesInfo name='RFC' value='1034' />
<format type='TXT' octets='129180' target='ftp://ftp.isi.edu/in-notes/rfc1034.txt' />
</reference>


<reference anchor='RFC3315'>

<front>
<title>Dynamic Host Configuration Protocol for IPv6 (DHCPv6)</title>
<author initials='R.' surname='Droms' fullname='R. Droms'>
<organization /></author>
<author initials='J.' surname='Bound' fullname='J. Bound'>
<organization /></author>
<author initials='B.' surname='Volz' fullname='B. Volz'>
<organization /></author>
<author initials='T.' surname='Lemon' fullname='T. Lemon'>
<organization /></author>
<author initials='C.' surname='Perkins' fullname='C. Perkins'>
<organization /></author>
<author initials='M.' surname='Carney' fullname='M. Carney'>
<organization /></author>
<date year='2003' month='July' /></front>

<seriesInfo name='RFC' value='3315' />
<format type='TXT' octets='231402' target='ftp://ftp.rfc-editor.org/in-notes/rfc3315.txt' />
</reference>


<reference anchor='RFC3736'>

<front>
<title>Stateless Dynamic Host Configuration Protocol (DHCP) Service for IPv6</title>
<author initials='R.' surname='Droms' fullname='R. Droms'>
<organization /></author>
<date year='2004' month='April' />
<abstract>
<t>Stateless Dynamic Host Configuration Protocol service for IPv6 (DHCPv6) is used by nodes to obtain configuration information, such as the addresses of DNS recursive name servers, that does not require the maintenance of any dynamic state for individual clients.  A node that uses stateless DHCP must have obtained its IPv6 addresses through some other mechanism, typically stateless address autoconfiguration.  This document explains which parts of RFC 3315 must be implemented in each of the different kinds of DHCP agents so that agent can support stateless DHCP. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='3736' />
<format type='TXT' octets='18510' target='ftp://ftp.rfc-editor.org/in-notes/rfc3736.txt' />
</reference>

<reference anchor='RFC3646'>

<front>
<title>DNS Configuration options for Dynamic Host Configuration Protocol for IPv6 (DHCPv6)</title>
<author initials='R.' surname='Droms' fullname='R. Droms'>
<organization /></author>
<date year='2003' month='December' />
<abstract>
<t>This document describes Dynamic Host Configuration Protocol for IPv6 (DHCPv6) options for passing a list of available DNS recursive name servers and a domain search list to a client.</t></abstract></front>

<seriesInfo name='RFC' value='3646' />
<format type='TXT' octets='13312' target='ftp://ftp.rfc-editor.org/in-notes/rfc3646.txt' />
</reference>



<reference anchor='RFC5006'>

<front>
<title>IPv6 Router Advertisement Option for DNS Configuration</title>
<author initials='J.' surname='Jeong' fullname='J. Jeong'>
<organization /></author>
<author initials='S.' surname='Park' fullname='S. Park'>
<organization /></author>
<author initials='L.' surname='Beloeil' fullname='L. Beloeil'>
<organization /></author>
<author initials='S.' surname='Madanapalli' fullname='S. Madanapalli'>
<organization /></author>
<date year='2007' month='September' />
<abstract>
<t>This document specifies a new IPv6 Router Advertisement option to allow IPv6 routers to advertise DNS recursive server addresses to IPv6 hosts.  This memo defines an Experimental Protocol for the Internet community.</t></abstract></front>

<seriesInfo name='RFC' value='5006' />
<format type='TXT' octets='26136' target='ftp://ftp.rfc-editor.org/in-notes/rfc5006.txt' />
</reference>


<reference anchor='RFC4339'>

<front>
<title>IPv6 Host Configuration of DNS Server Information Approaches</title>
<author initials='J.' surname='Jeong' fullname='J. Jeong'>
<organization /></author>
<date year='2006' month='February' />
<abstract>
<t>This document describes three approaches for IPv6 recursive DNS server address configuration.  It details the operational attributes of three solutions: RA option, DHCPv6 option, and well-known anycast addresses for recursive DNS servers.  Additionally, it suggests the deployment scenarios in four kinds of networks (ISP, enterprise, 3GPP, and unmanaged networks) considering multi-solution resolution.  This memo provides information for the Internet community.</t></abstract></front>

<seriesInfo name='RFC' value='4339' />
<format type='TXT' octets='60803' target='ftp://ftp.rfc-editor.org/in-notes/rfc4339.txt' />
</reference>



<reference anchor='RFC3971'>

<front>
<title>SEcure Neighbor Discovery (SEND)</title>
<author initials='J.' surname='Arkko' fullname='J. Arkko'>
<organization /></author>
<author initials='J.' surname='Kempf' fullname='J. Kempf'>
<organization /></author>
<author initials='B.' surname='Zill' fullname='B. Zill'>
<organization /></author>
<author initials='P.' surname='Nikander' fullname='P. Nikander'>
<organization /></author>
<date year='2005' month='March' />
<abstract>
<t>IPv6 nodes use the Neighbor Discovery Protocol (NDP) to discover other nodes on the link, to determine their link-layer addresses to find routers, and to maintain reachability information about the paths to active neighbors.  If not secured, NDP is vulnerable to various attacks.  This document specifies security mechanisms for NDP.  Unlike those in the original NDP specifications, these mechanisms do not use IPsec. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='3971' />
<format type='TXT' octets='123372' target='ftp://ftp.rfc-editor.org/in-notes/rfc3971.txt' />
</reference>


<reference anchor='RFC5358'>

<front>
<title>Preventing Use of Recursive Nameservers in Reflector Attacks</title>
<author initials='J.' surname='Damas' fullname='J. Damas'>
<organization /></author>
<author initials='F.' surname='Neves' fullname='F. Neves'>
<organization /></author>
<date year='2008' month='October' />
<abstract>
<t>This document describes ways to prevent the use of default configured recursive nameservers as reflectors in Denial of Service (DoS) attacks.  It provides recommended configuration as measures to mitigate the attack.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract></front>

<seriesInfo name='BCP' value='140' />
<seriesInfo name='RFC' value='5358' />
<format type='TXT' octets='14957' target='ftp://ftp.rfc-editor.org/in-notes/rfc5358.txt' />
</reference>


<reference anchor='RFC2827'>

<front>
<title>Network Ingress Filtering: Defeating Denial of Service Attacks which employ IP Source Address Spoofing</title>
<author initials='P.' surname='Ferguson' fullname='P. Ferguson'>
<organization /></author>
<author initials='D.' surname='Senie' fullname='D. Senie'>
<organization /></author>
<date year='2000' month='May' />
<abstract>
<t>This paper discusses a simple, effective, and straightforward method for using ingress traffic filtering to prohibit DoS (Denial of Service) attacks which use forged IP addresses to be propagated from 'behind' an Internet Service Provider's (ISP) aggregation point.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract></front>

<seriesInfo name='BCP' value='38' />
<seriesInfo name='RFC' value='2827' />
<format type='TXT' octets='21258' target='ftp://ftp.rfc-editor.org/in-notes/rfc2827.txt' />
</reference>


<reference anchor='RFC1535'>

<front>
<title abbrev='DNS Software Enhancements'>A Security Problem and Proposed Correction With Widely Deployed DNS Software</title>
<author initials='E.' surname='Gavron' fullname='Ehud Gavron'>
<organization>ACES Research Inc.</organization>
<address>
<postal>
<street>PO Box 14546</street>
<city>Tucson</city>
<region>AZ</region>
<code>85711</code>
<country>US</country></postal>
<phone>+1 602 743 9841</phone>
<email>gavron@aces.com</email></address></author>
<date year='1993' month='October' />
<abstract>
<t>This document discusses a flaw in some of the currently distributed name resolver clients.  The flaw exposes a security weakness related to the search heuristic invoked by these same resolvers when users provide a partial domain name, and which is easy to exploit (although not by the masses).  This document points out the flaw, a case in point, and a solution.</t></abstract></front>

<seriesInfo name='RFC' value='1535' />
<format type='TXT' octets='9722' target='ftp://ftp.isi.edu/in-notes/rfc1535.txt' />
</reference>


<reference anchor='RFC1536'>

<front>
<title abbrev='Common DNS Implementation Errors'>Common DNS Implementation Errors and Suggested Fixes</title>
<author initials='A.' surname='Kumar' fullname='Anant Kumar'>
<organization>USC Information Sciences Institute</organization>
<address>
<postal>
<street>4676 Admiralty Way</street>
<city>Marina del Rey</city>
<region>CA</region>
<code>90292-6695</code>
<country>US</country></postal>
<phone>+1 310 822 1511</phone>
<facsimile>+1 310 823 6741</facsimile>
<email>anant@isi.edu</email></address></author>
<author initials='J.' surname='Postel' fullname='Jon Postel'>
<organization>USC Information Sciences Institute</organization>
<address>
<postal>
<street>4676 Admiralty Way</street>
<city>Marina del Rey</city>
<region>CA</region>
<code>90292-6695</code>
<country>US</country></postal>
<phone>+1 310 822 1511</phone>
<facsimile>+1 310 823 6714</facsimile>
<email>postel@isi.edu</email></address></author>
<author initials='C.' surname='Neuman' fullname='Cliff Neuman'>
<organization>USC Information Sciences Institute</organization>
<address>
<postal>
<street>4676 Admiralty Way</street>
<city>Marina del Rey</city>
<region>CA</region>
<code>90292-6695</code>
<country>US</country></postal>
<phone>+1 310 822 1511</phone>
<facsimile>+1 310 823 6714</facsimile>
<email>bcn@isi.edu</email></address></author>
<author initials='P.' surname='Danzig' fullname='Peter Danzig'>
<organization>University of Southern California, Computer Science Department</organization>
<address>
<postal>
<street>University Park</street>
<city>Los Angeles</city>
<region>CA</region>
<code>90089</code>
<country>US</country></postal>
<email>danzig@caldera.usc.edu</email></address></author>
<author initials='S.' surname='Miller' fullname='Steve Miller'>
<organization>University of Southern California, Computer Science Department</organization>
<address>
<postal>
<street>University Park</street>
<city>Los Angeles</city>
<region>CA</region>
<code>90089</code>
<country>US</country></postal>
<email>smiller@caldera.usc.edu</email></address></author>
<date year='1993' month='October' />
<abstract>
<t>This memo describes common errors seen in DNS implementations and suggests some fixes. Where applicable, violations of recommendations from STD 13, RFC 1034 and STD 13, RFC 1035 are mentioned. The memo also describes, where relevant, the algorithms followed in BIND (versions 4.8.3 and 4.9 which the authors referred to) to serve as an example.</t></abstract></front>

<seriesInfo name='RFC' value='1536' />
<format type='TXT' octets='25476' target='ftp://ftp.isi.edu/in-notes/rfc1536.txt' />
</reference>


<!--draft-ietf-mif-problem-statement-07 -->
<reference anchor='MIF-PROBLEM'>
<front>
<title>Multiple Interfaces Problem Statement</title>

<author initials='M' surname='Blanchet' fullname='Marc Blanchet'>
    <organization />
</author>

<author initials='P' surname='Seite' fullname='Pierrick Seite'>
    <organization />
</author>

<date month='August' day='14' year='2010' />

<abstract><t>A multihomed host receives node configuration information from each of its provisioning domain.  Some configuration objects are global to the node, some are local to the interface.  Various issues arise when multiple conflicting node-scoped configuration objects are received on multiple interfaces.  Similar situations also happen with single interface host connected to multiple networks.  This document describes these issues.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

<!--draft-ietf-mif-current-practices -->
<reference anchor='MIF-PRACTICE'>
<front>
<title>Current Practices for Multiple Interface Hosts</title>

<author initials='M' surname='Wasserman' fullname='Margaret Wasserman'>
    <organization />
</author>

<author initials='P' surname='Seite' fullname='Pierrick Seite'>
    <organization />
</author>

<date month='August' day='11' year='2010' />

<abstract><t>An increasing number of hosts are operating in multiple-interface environments, where different network interfaces are providing unequal levels of service or connectivity.  This document summarizes current practices in this area, and describes in detail how some common operating systems cope with these challenges.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

<!--draft-ietf-csi-send-cert-08 -->

<reference anchor='CSI-SEND-CERT'>
<front>
<title>Certificate profile and certificate management for SEND</title>

<author initials='R' surname='Gagliano' fullname='Roque Gagliano'>
    <organization />
</author>

<author initials='S' surname='Krishnan' fullname='Suresh Krishnan'>
    <organization />
</author>

<author initials='A' surname='Kukec' fullname='Ana Kukec'>
    <organization />
</author>

<date month='October' day='7' year='2010' />

<abstract><t>SEcure Neighbor Discovery (SEND) Utilizes X.509v3 certificates for performing router authorization.  This document specifies a certificate profile for SEND based on Resource Certificates along with extended key usage values required for SEND.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>


	
</references>

<section title="Changes from RFC 5006">
    <t> The following changes were made from RFC 5006 "IPv6 Router Advertisement Option for DNS Configuration":
    
    <list style="symbols"> 
        <t>
        Added the DNS Search List (DNSSL) option to support the advertisement of DNS suffixes used in the DNS search along with RDNSS option in RFC 5006.
        </t>

        <t>
        Clarified the coexistence of RA options and DHCP options for DNS configuration.
        </t>

        <t>
        Modified the procedure in IPv6 host:
            <list style="symbols">
                <t>
                Clarified the procedure for DNS options in an IPv6 host.
                </t>

                <t>
                Specified a sufficient number of RDNSS addresses or DNS search domain names as three.
                </t>

                <t>
                Specified a way to deal with DNS options from multiple sources, such as RA and DHCP.
                </t>
            </list>
        </t>

        <t>
        Modified the implementation considerations for DNSSL option handling.
        </t>

        <t>
        Modified the security considerations to consider more attack scenarios and the corresponding possible solutions.
        </t>

        <t>
        Modified the IANA considerations to require another IPv6 Neighbor
Discovery Option type for the DNSSL option.
        </t>
    </list>
    </t>
</section>

</back>

<!-- <vspace blankLines="100"/> -->
<!-- page break to put addresses onto one page-->

</rfc>
