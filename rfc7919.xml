<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc number="7919"
     category="std" 
     submissionType="IETF"
     consensus="yes"
     ipr="trust200902" 
     updates="2246, 4346, 4492, 5246">

  <front>


    <title abbrev="Negotiated FFDHE for TLS">Negotiated Finite Field
    Diffie-Hellman Ephemeral Parameters for Transport Layer Security (TLS)</title>

    <author fullname="Daniel Kahn Gillmor" initials="D." surname="Gillmor">
      <organization>ACLU</organization>
      <address>
        <postal>
          <street>125 Broad Street, 18th Floor</street>
          <city>New York</city>
          <region>NY</region>
          <code>10004</code>
          <country>United States of America</country>
        </postal>
        <phone></phone>
        <email>dkg@fifthhorseman.net</email>
      </address>
    </author>

    <date month="August" year="2016" />

    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>Diffie-Hellman, Discrete Logarithm, Finite Field, Transport Layer Security, TLS, Negotiation</keyword>

    <abstract>
      <t>Traditional finite-field-based Diffie-Hellman (DH) key
      exchange during the Transport Layer Security (TLS) handshake suffers from a number of
      security, interoperability, and efficiency shortcomings.  These
      shortcomings arise from lack of clarity about which DH group
      parameters TLS servers should offer and clients should accept.
      This document offers a solution to these shortcomings for
      compatible peers by using a section of the TLS "Supported Groups
      Registry" (renamed from "EC Named Curve Registry" by this document)
      to establish common finite field DH parameters with
      known structure and a mechanism for peers to negotiate support
      for these groups.</t>

      <t>
        This document updates TLS versions 1.0 (RFC 2246), 1.1 (RFC 4346), and
	1.2 (RFC 5246), as well as the TLS Elliptic Curve Cryptography (ECC) extensions (RFC 4492).
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>Traditional <xref target="RFC5246">TLS</xref> offers a
      Diffie-Hellman Ephemeral (DHE) key exchange mode that provides
      forward secrecy for the connection.  The client offers a
      cipher suite in the ClientHello that includes DHE, and the server
      offers the client group parameters generator g and modulus p.
      If the client does not consider the group strong enough (e.g., 
      p is too small, p is not prime, or there are small
      subgroups that cannot be easily avoided) or if it is unable to
      process the group for other reasons, the client has no recourse
      but to terminate the connection.</t>

      <t>Conversely, when a TLS server receives a suggestion for a DHE
      cipher suite from a client, it has no way of knowing what kinds
      of DH groups the client is capable of handling or what the
      client's security requirements are for this key exchange
      session.  For example, some widely distributed TLS clients are not capable of
      DH groups where p > 1024 bits.  Other TLS clients may, by policy, wish
      to use DHE only if the server can offer a stronger group (and
      are willing to use a non-PFS (Perfect Forward Secrecy) key exchange mechanism otherwise).
      The server has no way of knowing which type of client is
      connecting but must select DH parameters with insufficient
      knowledge.</t>

      <t>Additionally, the DH parameters selected by the server may have
      a known structure that renders them secure against a small
      subgroup attack, but a client receiving an arbitrary p and g has no
      efficient way to verify that the structure of a new group is
      reasonable for use.</t>

      <t>This modification to TLS solves these problems by using a
      section of the "Supported Groups Registry" (renamed from "EC Named Curve
      Registry" by this
      document) to select common DH
      groups with known structure and defining the use of the
      "elliptic_curves(10)" extension (described here as the Supported
      Groups extension) for clients advertising support for DHE with
      these groups.  This document also provides guidance for
      compatible peers to take advantage of the additional security,
      availability, and efficiency offered.</t>

      <t>The use of this mechanism by one compatible peer when
      interacting with a non-compatible peer should have no detrimental
      effects.</t>

   <t>This document updates TLS versions 1.0 <xref target="RFC2246"/>, 1.1 <xref
   target="RFC4346"/>, and 1.2
   <xref target="RFC5246"/>, as well as the TLS ECC extensions <xref target="RFC4492"/>.
   </t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
        "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described
        in <xref target="RFC2119"/>. 

       </t>
      </section>

      <section title="Vocabulary">
        <t>
          The terms "DHE" or "FFDHE" are used in this document to
          refer to the finite-field-based Diffie-Hellman ephemeral key
          exchange mechanism in TLS.  TLS also supports
          Elliptic Curve Diffie-Hellman Ephemeral (ECDHE) key
          exchanges <xref target="RFC4492"/>, but this document does
          not document their use.  A registry previously used only by
          ECDHE-capable implementations is expanded in this document
          to cover FFDHE groups as well.  "FFDHE cipher suites" is used
          in this document to refer exclusively to cipher suites with
          FFDHE key exchange mechanisms, but note that these suites
          are typically labeled with a TLS_DHE_ prefix.
        </t>
      </section>
    </section>

      <section anchor="named_group_overview" title="Named Group Overview">
      <t>We use previously unallocated codepoints within the extension
      currently known as "elliptic_curves" (Section 5.1.1. of <xref
      target="RFC4492"/>) to indicate known finite field groups.  The
      extension's semantics are expanded from "Supported Elliptic
      Curves" to "Supported Groups".  The enum datatype used in the
      extension has been renamed from NamedCurve to NamedGroup.  Its
      semantics are likewise expanded from "named curve" to "named
      group".</t>

      <t>Additionally, we explicitly relax the requirement about when
      the Supported Groups extension can be sent.  This extension MAY
      be sent by the client when either FFDHE or ECDHE cipher suites
      are listed.
      </t>

      <t>Codepoints in the "Supported Groups Registry" with a high byte of
      0x01 (that is, between 256 and 511, inclusive) are set aside for
      FFDHE groups, though only a small number of them are initially
      defined and we do not expect many other FFDHE groups to be added
      to this range.  No codepoints outside of this range will be
      allocated to FFDHE groups.  The new codepoints for the
      "Supported Groups Registry" are:</t>

      <figure>
        <artwork><![CDATA[
        enum {
        // other already defined elliptic curves (see RFC 4492)
            ffdhe2048(256), ffdhe3072(257), ffdhe4096(258),
            ffdhe6144(259), ffdhe8192(260),
        //
        } NamedGroup;
            ]]></artwork>
      </figure>

      <t>These additions to the "Supported Groups Registry" are described in
      detail in <xref target="supported_groups_registry"/>.  They are all
      safe primes derived from the base of the natural logarithm
      ("e"), with the high and low 64 bits set to 1 for efficient
      Montgomery or Barrett reduction.
      </t>
      <t>
        The use of the base of the natural logarithm here is as a
        "nothing-up-my-sleeve" number.  The goal is to guarantee that
        the bits in the middle of the modulus are
        effectively random, while avoiding any suspicion that the
        primes have secretly been selected to be weak according to
        some secret criteria. <xref target="RFC3526"/> used pi for
        this value. See <xref target="choice_of_groups"/> for reasons
        that this document does not reuse pi.
      </t>
      </section>
    
    <section anchor="client" title="Client Behavior">
      <t>A TLS client that is capable of using strong finite field
      Diffie-Hellman groups can advertise its capabilities and its
      preferences for stronger key exchange by using this
      mechanism.</t>

      <t>The compatible client that wants to be able to negotiate
      strong FFDHE sends a Supported Groups extension 
      (identified by type elliptic_curves(10) in <xref target="RFC4492"/>) in the
      ClientHello and includes a list of known FFDHE groups in the
      extension data, ordered from most preferred to least preferred.
      If the client also supports and wants to offer ECDHE key
      exchange, it MUST use a single Supported Groups extension to
      include all supported groups (both ECDHE and FFDHE groups).  The
      ordering SHOULD be based on client preference, but see <xref
      target="preference_ordering"/> for more nuance.</t>

      <t>A client that offers a Supported Groups extension
      containing an FFDHE group SHOULD also include at least one FFDHE
      cipher suite in the ClientHello.</t>

      <t>A client that offers a group MUST be able and willing to
      perform a DH key exchange using that group.</t>

      <t>A client that offers one or more FFDHE groups in the
      Supported Groups extension and an FFDHE cipher suite and that
      receives an FFDHE cipher suite from the server SHOULD take the
      following steps upon receiving the ServerKeyExchange:
              <list style="symbols">
                <t>For non-anonymous cipher suites where the offered
                certificate is valid and appropriate for the peer,
                validate the signature over the ServerDHParams.  If
                not valid, terminate the connection.</t>
                <t>If the signature over ServerDHParams is valid,
                compare the selected dh_p and dh_g with the FFDHE
                groups offered by the client.  If none of the offered
                groups match, the server is not compatible with this
                document.  The client MAY decide to continue the
                connection if the selected group is acceptable under
                local policy, or it MAY decide to terminate the
                connection with a fatal insufficient_security(71)
                alert.</t>
                <t>If the client continues (either because the server
                offered a matching group or because local policy
                permits the offered custom group), the client MUST
                verify that dh_Ys is in the range 1 &lt; dh_Ys &lt;
                dh_p - 1. If dh_Ys is not in this range, the client
                MUST terminate the connection with a fatal
                handshake_failure(40) alert.
                </t>
                <t>If dh_Ys is in range, then the client SHOULD
                continue with the connection as usual.
                </t>
              </list>
      </t>
      <section anchor="client-local-policy" title="Client Local Policy on Custom Groups">
        <t>
          Compatible clients that are willing to accept FFDHE
          cipher suites from non-compatible servers may have local
          policy about what custom FFDHE groups they are willing to
          accept.  This local policy presents a risk to clients, who
          may accept weakly protected communications from
          misconfigured servers.
        </t>

        <t>
          This document cannot enumerate all possible safe local policy
          (the safest may be to simply reject all custom groups), but
          compatible clients that accept some custom groups from the
          server MUST do at least cursory checks on group size and
          may take other properties into consideration as well.
        </t>
        
        <t>
          A compatible client that accepts FFDHE cipher suites using
          custom groups from non-compatible servers MUST reject any
          group with |dh_p| &lt; 768 bits and SHOULD reject any group
          with |dh_p| &lt; 1024 bits.
        </t>

        <t>
          A compatible client that rejects a non-compatible server's
          custom group may decide to retry the connection while
          omitting all FFDHE cipher suites from the ClientHello.  A
          client SHOULD only use this approach if it successfully
          verified the server's expected signature over the
          ServerDHParams, to avoid being forced by an active attacker
          into a non-preferred cipher suite.
        </t>
      </section>
    </section>
    <section anchor="server" title="Server Behavior">
      <t>If a compatible TLS server receives a Supported Groups
      extension from a client that includes any FFDHE group (i.e., any
      codepoint between 256 and 511, inclusive, even if unknown to the server), and if none of the
      client-proposed FFDHE groups are known and acceptable to the
      server, then the server MUST NOT select an FFDHE cipher suite.
      In this case, the server SHOULD select an acceptable non-FFDHE
      cipher suite from the client's offered list.  If the extension is
      present with FFDHE groups, none of the client's offered groups
      are acceptable by the server, and none of the client's proposed
      non-FFDHE cipher suites are acceptable to the server, the server
      MUST end the connection with a fatal TLS alert of type
      insufficient_security(71).
      </t>
      <t>
      If at least one FFDHE cipher suite is present in the client
      cipher suite list and the Supported Groups extension is either
      absent from the ClientHello entirely or contains no FFDHE groups
      (i.e., no codepoints between 256 and 511, inclusive), then the
      server knows that the client is not compatible with this
      document.  In this scenario, a server MAY select a
      non-FFDHE cipher suite, or it MAY select an FFDHE cipher suite and
      offer an FFDHE group of its choice to the client as part of a
      traditional ServerKeyExchange.
      </t>

      <t>A compatible TLS server that receives the Supported Groups
      extension with FFDHE codepoints in it and that selects an
      FFDHE cipher suite MUST select one of the client's offered
      groups.  The server indicates the choice of group to the client
      by sending the group's parameters as usual in the
      ServerKeyExchange as described in Section 7.4.3 of <xref
      target="RFC5246"/>.
      </t>

      <t>A TLS server MUST NOT select a named FFDHE group that was not
      offered by a compatible client.
      </t>

      <t>A TLS server MUST NOT select an FFDHE cipher suite if the
      client did not offer one, even if the client offered an FFDHE
      group in the Supported Groups extension.
      </t>

      <t>
        If a non-anonymous FFDHE cipher suite is selected and the TLS
        client has used this extension to offer an FFDHE group of
        comparable or greater strength than the server's public key,
        the server SHOULD select an FFDHE group at least as strong as
        the server's public key.  For example, if the server has a
        3072-bit RSA key and the client offers only ffdhe2048 and
        ffdhe4096, the server SHOULD select ffdhe4096.
      </t>

      <t>When an FFDHE cipher suite is selected and the client sends
      a ClientKeyExchange, the server MUST verify that 1 &lt; dh_Yc
      &lt; dh_p - 1.  If dh_Yc is out of range, the server MUST
      terminate the connection with a fatal handshake_failure(40) alert.
      </t>

    </section>
    <section anchor="optimizations" title="Optimizations">
      <t>In a key exchange with a successfully negotiated known FFDHE
      group, both peers know that the group in question uses a safe
      prime as a modulus and that the group in use is of size p-1 or
      (p-1)/2.  This allows at least three optimizations that can be
      used to improve performance.
      </t>
      <section anchor="peercheck" title="Checking the Peer's Public Key">
        <t>Peers MUST validate each other's public key Y
        (dh_Ys offered by the server or dh_Yc offered by the client) by
        ensuring that 1 &lt; Y &lt; p-1.  This simple check ensures that
        the remote peer is properly behaved and isn't forcing the local
        system into the 2-element subgroup.</t>

        <t>To reach the same assurance with an unknown group, the
        client would need to verify the primality of the modulus,
        learn the factors of p-1, and test both the generator g and Y
        against each factor to avoid small subgroup attacks.
        </t>
      </section>
      <section anchor="short_exponents" title="Short Exponents">
        <t>
          Traditional finite field Diffie-Hellman has each peer choose
          their secret exponent from the range [2, p-2].  Using
          exponentiation by squaring, this means each peer must do
          roughly 2*log_2(p) multiplications, twice (once for the
          generator and once for the peer's public key).
        </t>
        <t>
          Peers concerned with performance may also prefer to choose
          their secret exponent from a smaller range, doing fewer
          multiplications, while retaining the same level of overall
          security.  Each named group indicates its approximate
          security level and provides a lower bound on the range of
          secret exponents that should preserve it.  For example,
          rather than doing 2*2*3072 multiplications for an ffdhe3072
          handshake, each peer can choose to do 2*2*275
          multiplications by choosing their secret exponent from the
          range [2^274, 2^275] (that is, an m-bit integer where m is at
          least 275) and still keep the same approximate security
          level.
        </t>
        <t>
          A similar short-exponent approach is suggested in a Secure SHell (SSH)
          Diffie-Hellman key exchange (see Section 6.2 of <xref
          target="RFC4419"/>).
        </t>
      </section>
      <section anchor="table_acceleration" title="Table Acceleration">
        <t>
          Peers wishing to further accelerate FFDHE key exchange can
          also pre-compute a table of powers of the generator of a
          known group.  This is a memory vs. time trade-off, and it
          only accelerates the first exponentiation of the ephemeral
          DH exchange (the fixed-base exponentiation).  The
          variable-base exponentiation (using the peer's public
          exponent as a base) still needs to be calculated as normal.
        </t>
      </section>
    </section>
    <section anchor="operational_considerations" title="Operational Considerations">
      <section anchor="preference_ordering" title="Preference Ordering">
        <t>The ordering of named groups in the Supported Groups extension
        may contain some ECDHE groups and some FFDHE groups.  These
        SHOULD be ranked in the order preferred by the client.
        </t>
        <t>However, the ClientHello also contains a list of desired
        cipher suites, also ranked in preference order.  This presents
        the possibility of conflicted preferences.  For example, if
        the ClientHello contains a cipher_suite field with two choices in
        order &lt;TLS_DHE_RSA_WITH_AES_128_CBC_SHA,
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA&gt; and the Supported Groups
        extension contains two choices in order
        &lt;secp256r1,ffdhe3072&gt;, then there is a clear
        contradiction.  Clients SHOULD NOT present such a
        contradiction since it does not represent a sensible ordering.
        A server that encounters such a contradiction when selecting
        between an ECDHE or FFDHE key exchange mechanism while trying
        to respect client preferences SHOULD give priority to the
        Supported Groups extension (in the example case, it should select
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA with secp256r1) but MAY
        resolve the contradiction any way it sees fit.
        </t>
        <t>More subtly, clients MAY interleave preferences between
        ECDHE and FFDHE groups; for example, if stronger groups are
        preferred regardless of cost, but weaker groups are
        acceptable, the Supported Groups extension could consist of
        &lt;ffdhe8192,secp384p1,ffdhe3072,secp256r1&gt;.  In this
        example, with the same cipher_suite field offered as the previous
        example, a server configured to respect client preferences and
        with support for all listed groups SHOULD select
        TLS_DHE_RSA_WITH_AES_128_CBC_SHA with ffdhe8192.  A server
        configured to respect client preferences and with support for
        only secp384p1 and ffdhe3072 SHOULD select
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA with secp384p1.
        </t>
      </section>
      
    </section>


    <section anchor="IANA" title="IANA Considerations">
      <t>
        This document renames the "EC Named Curve Registry"
        (originally defined in <xref target="RFC4492"/> and updated by
        <xref target="RFC7027"/>) to the "Supported Groups
        Registry". See
        &lt;https://www.iana.org/assignments/tls-parameters&gt;.
      </t>
      <t>
        This document expands the semantics of this registry 
        to include groups based on finite fields in addition to groups
        based on elliptic curves.  IANA has added a range designation
        to the registry, indicating that values from 256-511
        (inclusive) are set aside for "Finite Field Diffie-Hellman
        groups" and that all other entries in the registry are
        "Elliptic curve groups".
      </t>
      <t>
        This document allocates five well-defined codepoints in the
        registry for specific finite field Diffie-Hellman groups
        defined in <xref target="supported_groups_registry"/>.
      </t>
      <t>
        In addition, the four highest codepoints in the range
        508-511, inclusive, are designated for Private Use <xref
	target="RFC5226"/> by peers
        who have privately developed finite field Diffie-Hellman
        groups that they wish to signal internally.
      </t>
      <t>
        The updated registry section is as follows:
      </t>

      <texttable align="left">
        <ttcol>Value</ttcol>
        <ttcol>Description</ttcol>
        <ttcol>DTLS-OK</ttcol>
        <ttcol>Reference</ttcol>

        <c>256</c>
        <c>ffdhe2048</c>
        <c>Y</c>
        <c>RFC 7919</c>

        <c>257</c>
        <c>ffdhe3072</c>
        <c>Y</c>
        <c>RFC 7919</c>

        <c>258</c>
        <c>ffdhe4096</c>
        <c>Y</c>
        <c>RFC 7919</c>

        <c>259</c>
        <c>ffdhe6144</c>
        <c>Y</c>
        <c>RFC 7919</c>

        <c>260</c>
        <c>ffdhe8192</c>
        <c>Y</c>
        <c>RFC 7919</c>

        <c>508-511</c>
        <c>Private Use</c>
        <c>-</c>
        <c>RFC 7919</c>
      </texttable> 

      <t>
        IANA has also renamed the "elliptic_curves" extension as
        "supported_groups" and added a reference to this document in
        the "ExtensionType Values" registry. See
        &lt;http://www.iana.org/assignments/tls-extensiontype-values&gt;.
      </t>

    </section>

    <section anchor="Security" title="Security Considerations">
      <section title="Negotiation Resistance to Active Attacks">
        <t>
          Because the contents of the Supported Groups extension are hashed
          in the Finished message, an active Man in the Middle (MITM) that tries to filter
          or omit groups will cause the handshake to fail, but
          possibly not before getting the peer to do something it
          would not otherwise have done.
        </t>
        <t>
          An attacker who impersonates the server can try to do any of
          the following:
          <list style="symbols">
            <t>
              Pretend that a non-compatible server is actually capable
              of this extension and select a group from the client's
              list, causing the client to select a group it is willing
              to negotiate.  It is unclear how this would be an
              effective attack.
            </t>
            <t>
              Pretend that a compatible server is actually
              non-compatible by negotiating a non-FFDHE cipher suite. This
              is no different than MITM cipher suite filtering.
            </t>
            <t>
              Pretend that a compatible server is actually
              non-compatible by negotiating a DHE cipher suite with a
              custom (perhaps weak) group selected by the attacker.
              This is no worse than the current scenario and would
              require the attacker to be able to sign the
              ServerDHParams, which should not be possible without
              access to the server's secret key.
            </t>
          </list>
        </t>
        <t>
          An attacker who impersonates the client can try to do the
          following:
          <list style="symbols">
            <t>
              Pretend that a compatible client is not compatible
              (e.g., by not offering the Supported Groups extension or by
              replacing the Supported Groups extension with one that
              includes no FFDHE groups).  This could cause the server
              to negotiate a weaker DHE group during the handshake or
              to select a non-FFDHE cipher suite, but it would fail to
              complete during the final check of the Finished message.
            </t>
            <t>
              Pretend that a non-compatible client is compatible
              (e.g., by adding the Supported Groups extension or by
              adding FFDHE groups to the extension).  This could cause
              the server to select a particular named group in the
              ServerKeyExchange or to avoid selecting an FFDHE
              cipher suite.  The peers would fail to compute the final
              check of the Finished message.
            </t>
            <t>
              Change the list of groups offered by the client (e.g., by
              removing the stronger of the set of groups offered).  This
              could cause the server to negotiate a weaker group than
              desired, but again, should be caught by the check in the
              Finished message.
            </t>
          </list>
        </t>
      </section>
      <section title="Group Strength Considerations">
        <t>TLS implementations using FFDHE key exchange should
        consider the strength of the group they negotiate.  The
        strength of the selected group is one of the factors that
        define the connection's resilience against attacks on the
        session's confidentiality and integrity, since the session
        keys are derived from the DHE handshake.
        </t>
        <t>While attacks on integrity must generally happen while the
        session is in progress, attacks against session
        confidentiality can happen significantly later if the entire
        TLS session is stored for offline analysis.  Therefore, FFDHE
        groups should be selected by clients and servers based on
        confidentiality guarantees they need.  Sessions that need
        extremely long-term confidentiality should prefer stronger
        groups.
        </t>
        <t><xref target="ENISA"/> provides rough estimates of group
        resistance to attack and recommends that forward-looking
        implementations ("future systems") should use FFDHE group
        sizes of at least 3072 bits.  ffdhe3072 is intended for use in
        these implementations.
        </t>

        <t>
          Other sources (e.g., <xref target="NIST"/>) estimate the
          security levels of the Discrete Log (DLOG) problem to be slightly more
          difficult than <xref target="ENISA"/>.  This document's
          suggested minimum exponent sizes in <xref
          target="supported_groups_registry"/> for implementations that use
          the short-exponent optimization (<xref
          target="short_exponents"/>) are deliberately conservative to
          account for the range of these estimates.
        </t>
      </section>
      <section title="Finite Field DHE Only">
        <t>
          Note that this document specifically targets only
          finite field Diffie-Hellman ephemeral key exchange
          mechanisms.  It does not cover the non-ephemeral DH key
          exchange mechanisms, nor does it address
          ECDHE key exchange, which is defined in <xref
          target="RFC4492"/>.
        </t>
        <t>
          Measured by computational cost to the TLS peers, ECDHE appears today to
          offer a much stronger key exchange mechanism than FFDHE.
        </t>
      </section>
      <section title="Deprecating Weak Groups">
        <t>
          Advances in hardware or in finite field cryptanalysis may
          cause some of the negotiated groups to not provide the
          desired security margins, as indicated by the estimated work
          factor of an adversary to discover the premaster secret (and may
          therefore compromise the confidentiality and integrity of
          the TLS session).
        </t>
        <t>
          Revisions of this document should mark
          known weak groups as explicitly deprecated for use in TLS
          and should update the estimated work factor needed to break
          the group if the cryptanalysis has changed.
          Implementations that require strong confidentiality and
          integrity guarantees should avoid using deprecated groups
          and should be updated when the estimated security margins
          are updated.
        </t>
      </section>
      <section anchor="choice_of_groups" title="Choice of Groups">
        <t>
          <xref target="STRONGSWAN-IKE">Other lists of named
          finite field Diffie-Hellman groups</xref> exist.  This document
          chooses to not reuse them for several reasons:
          <list style="symbols">
            <t>
              Using the same groups in multiple protocols increases
              the value for an attacker with the resources to crack
              any single group.
            </t>
            <t>
              The Internet Key Exchange Protocol (IKE) groups include weak
	      groups like MODP768 that
              are unacceptable for secure TLS traffic.
            </t>
            <t>
              Mixing group parameters across multiple implementations
              leaves open the possibility of some sort of
              cross-protocol attack.  This shouldn't be relevant for
              ephemeral scenarios, and even with non-ephemeral keying,
              services shouldn't share keys; however, using different
              groups avoids these failure modes entirely.
            </t>
          </list>
        </t>
      </section>
      <section title="Timing Attacks">
        <t>
          Any implementation of finite field Diffie-Hellman key
          exchange should use constant-time modular-exponentiation
          implementations.  This is particularly true for those
          implementations that ever reuse DHE secret keys (so-called
          "semi-static" ephemeral keying) or share DHE secret keys
          across a multiple machines (e.g., in a load-balancer
          situation).
        </t>
      </section>
      <section title="Replay Attacks from Non-negotiated FFDHE">
        <t>
          <xref target="SECURE-RESUMPTION" />, <xref
          target="CROSS-PROTOCOL"/>, and <xref
          target="SSL3-ANALYSIS"/> all show a malicious peer using a
          bad FFDHE group to maneuver a client into selecting a
          premaster secret of the peer's choice, which can be
          replayed to another server using a non-FFDHE key exchange and
          can then be bootstrapped to replay client authentication.
        </t>
        <t>
          To prevent this attack (barring the session hash fix documented in <xref
          target="RFC7627"/>), a client would need not only to
          implement this document, but also to reject non-negotiated
          FFDHE cipher suites whose group structure it cannot afford to
          verify.  Such a client would need to abort the initial
          handshake and reconnect to the server in question without
          listing any FFDHE cipher suites on the subsequent connection.
        </t>
        <t>
          This trade-off may be too costly for most TLS clients today
          but may be a reasonable choice for clients performing client
          certificate authentication or for clients who have other reasons to be
          concerned about server-controlled premaster secrets.
        </t>
      </section>
      <section title="Forward Secrecy">

        <t>One of the main reasons to prefer FFDHE ciphersuites is
        forward secrecy, the ability to resist decryption even if
        the endpoint's long-term secret key (usually RSA) is revealed
        in the future.
        </t>
        <t>This property depends on both sides of the connection
        discarding their ephemeral keys promptly.  Implementations
        should wipe their FFDHE secret key material from memory as
        soon as it is no longer needed and should never store it in
        persistent storage.
        </t>
        <t>Forward secrecy also depends on the strength of the
        Diffie-Hellman group; using a very strong symmetric cipher
        like AES256 with a forward-secret cipher suite but generating
        the keys with a much weaker group like dhe2048 simply moves
        the adversary's cost from attacking the symmetric cipher to
        attacking the dh_Ys or dh_Yc ephemeral key shares.
        </t>
        <t>If the goal is to provide forward secrecy, attention should
        be paid to all parts of the cipher suite selection process,
        both key exchange and symmetric cipher choice.
        </t>
      </section>
      <section title="False Start">
        <t>
          Clients capable of TLS False Start <xref
          target="RFC7918"/> may receive a proposed FFDHE group
          from a server that is attacker controlled.  In particular,
          the attacker can modify the ClientHello to strip the
          proposed FFDHE groups, which may cause the server to offer a
          weaker FFDHE group than it should, and this will not be
          detected until receipt of the server's Finished message.
          This could cause a client using the False Start protocol
          modification to send data encrypted under a weak key
          agreement.
        </t>
        <t>
          Clients should have their own classification of FFDHE groups
          that are "cryptographically strong" in the same sense
          described in the description of symmetric ciphers in <xref
          target="RFC7918"/> and SHOULD offer at least one of
          these in the initial handshake if they contemplate using the
          False Start protocol modification with an FFDHE cipher suite.
        </t>
        <t>
          Compatible clients performing a full handshake MUST NOT use
          the False Start protocol modification if the server selects
          an FFDHE cipher suite but sends a group that is not
          cryptographically strong from the client's perspective.
        </t>
      </section>
    </section>

    <section anchor="Privacy" title="Privacy Considerations">
      <section anchor="Client-Fingerprinting" title="Client Fingerprinting">
        <t>
          This extension provides a few additional bits of information
          to distinguish between classes of TLS clients (e.g., see
          <xref target="PANOPTICLICK"/>).  To minimize this sort of
          fingerprinting, clients SHOULD support all named groups at
          or above their minimum security threshold. 

           New
          groups SHOULD NOT be added to the "Supported Groups Registry" without
          consideration of the cost of browser fingerprinting.
        </t>
      </section>
    </section>
  </middle>

  <back>
    <references title="Normative References">

<?rfc include="reference.RFC.2119"?>

<?rfc include="reference.RFC.4492"?>

<?rfc include="reference.RFC.5226"?>

<?rfc include="reference.RFC.5246"?>


      <reference anchor="RFC7918" target='http://www.rfc-editor.org/info/rfc7918'>
        <front>
          <title>Transport Layer Security (TLS) False Start</title>
          <author initials="A." surname="Langley" fullname="Adam Langley"><organization>Google</organization></author>
          <author initials="N." surname="Modadugu" fullname="Nagendra Modadugu"><organization>Independent</organization></author>
          <author initials="B." surname="Moeller" fullname="Bodo Moeller"><organization>Google</organization></author>
          <date month="June" year="2016"/>
        </front>
<seriesInfo name='DOI' value='10.17487/RFC7918' />
      </reference>

      
    </references>

    <references title="Informative References">

<?rfc include="reference.RFC.2246"?>
<?rfc include="reference.RFC.3526"?>
<?rfc include="reference.RFC.4346"?>
<?rfc include="reference.RFC.4419"?>
<?rfc include="reference.RFC.7027"?>
<?rfc include="reference.RFC.7627"?>

     <reference anchor="ENISA"
              target="https://www.enisa.europa.eu/publications/algorithms-key-size-and-parameters-report-2014">
        <front>
          <title>Algorithms, Key Sizes and Parameters Report - 2014</title>
          <author>
            <organization>European Union Agency for Network and Information Security (ENISA)</organization>
          </author>
          <date month="November" year="2014" />
        </front>
      </reference>

      <reference anchor="ECRYPTII"
                 target="http://www.ecrypt.eu.org/ecrypt2/documents/D.SPA.20.pdf">
        <front>
          <title>ECRYPT II Yearly Report on Algorithms and Keysizes (2011-2012)</title>
          <author>
            <organization>European Network of Excellence in Cryptology II
	    </organization>
          </author>
          <date month="September" year="2012" />
        </front>
	<seriesInfo name="Revision" value="1.0" />
      </reference>

      <reference anchor="STRONGSWAN-IKE"
                 target="https://wiki.strongswan.org/projects/strongswan/wiki/IKEv2CipherSuites#Diffie-Hellman-Groups">
        <front>
          <title>IKEv2 Cipher Suites: Diffie Hellman Groups</title>
          <author initials="T." surname="Brunner" fullname="Tobias Brunner">
            <organization>Strongswan</organization>
          </author>
          <author initials="A." surname="Steffen" fullname="Andreas Steffen">
            <organization>Strongswan</organization>
          </author>
          <date month="October" year="2013" />
        </front>
      </reference>

      <reference anchor="CROSS-PROTOCOL"
                 target="http://www.cosic.esat.kuleuven.be/publications/article-2216.pdf">
        <front>
          <title>A Cross-Protocol Attack on the TLS Protocol</title>
          <author initials="N." surname="Mavrogiannopolous" fullname="Nikos Mavrogiannopoulos">
            <organization>KU Lueven</organization>
          </author>
          <author initials="F." surname="Vercauteren" fullname="Frederik Vercauteren">
            <organization>KU Lueven</organization>
          </author>
          <author initials="V." surname="Velichkov" fullname="Vesselin Velichkov">
            <organization>University of Luxembourg</organization>
          </author>
          <author initials="B." surname="Preneel" fullname="Bart Preneel">
            <organization>KU Lueven</organization>
          </author>
          <date month="October" year="2012" />
        </front>
	<seriesInfo name="In Proceedings of the 2012 ACM Conference on" value="Computer and Communications Security"/>
	<seriesInfo name="DOI" value="10.1145/2382196.2382206"/>
      </reference>

      <reference anchor="SSL3-ANALYSIS"
                 target="https://www.schneier.com/paper-ssl.pdf">
        <front>
          <title>Analysis of the SSL 3.0 protocol</title>
          <author initials="B." surname="Schneier" fullname="Bruce Schneier">
            <organization>Counterpane Systems</organization>
          </author>
          <author initials="D." surname="Wagner" fullname="David Wagner">
            <organization>University of California, Berkeley</organization>
          </author>
          <date year="1996" />
        </front>
	<seriesInfo name="In Proceedings of the Second UNIX Workshop on"
		    value="Electronic Commerce"/>
	      </reference>

      <reference anchor="SECURE-RESUMPTION"
                 target="https://secure-resumption.com/">
        <front>
          <title>Triple Handshakes Considered Harmful: Breaking and Fixing Authentication over TLS</title>
          <author initials="A." surname="Delignat-Lavaud" fullname="Antoine Delignat-Lavaud">
            <organization>INRIA</organization>
          </author>
          <author initials="K." surname="Bhargavan" fullname="Karthikeyan Bhargavan">
            <organization>INRIA</organization>
          </author>
          <author initials="A." surname="Pironti" fullname="Alfredo Pironti">
            <organization>INRIA</organization>
          </author>
          <date month="March" year="2014" />
        </front>
	<seriesInfo name="2014 IEEE Symposium on Security" value="and Privacy"/>
	<seriesInfo name="DOI" value="10.1109/SP.2014.14" />
      </reference>

      <reference anchor="PANOPTICLICK"
                 target="https://panopticlick.eff.org/">
        <front>
          <title>Panopticlick: Is your browser safe against tracking?</title>
          <author>
            <organization>Electronic Frontier Foundation</organization>
          </author>
          <date />
        </front>
      </reference>

      <reference anchor="NIST"
                 target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r4.pdf">
        <front>
          <title>Recommendation for Key Management - Part 1: General</title>
          <author>
            <organization>National Institute of Standards and Technology</organization>
          </author>
          <date month="January" year="2016" />
        </front>
	<seriesInfo name="NIST Special Publication 800-57," value="Revision 4"/>
        <seriesInfo name="DOI" value="10.6028/NIST.SP.800-57pt1r4" />
      </reference>
        

   </references>


    <section anchor="supported_groups_registry" title="Supported Groups Registry (formerly &quot;EC Named Curve Registry&quot;)">
      <t>
        Each description below indicates the group itself, its
        derivation, its expected strength (estimated roughly from
        guidelines in <xref target="ECRYPTII"/>), and whether it is
        recommended for use in TLS key exchange at the given security
        level.  It is not recommended to add further finite field
        groups to the "Supported Groups Registry"; any attempt to do so
        should consider <xref target="Client-Fingerprinting"/>.
      </t>
      <t>
        The primes in these finite field groups are all safe primes;
        that is, a prime p is a safe prime when q = (p-1)/2 is also
        prime.  Where e is the base of the natural logarithm and
        square brackets denote the floor operation, the groups that
        initially populate this registry are derived for a given
        bit length b by finding the lowest positive integer X that
        creates a safe prime p where:
      </t>
      <figure>
        <artwork><![CDATA[
 p = 2^b - 2^{b-64} + {[2^{b-130} e] + X } * 2^64 - 1
]]></artwork>
      </figure>
      <t>
        New additions of FFDHE groups to this registry may use this
        same derivation (e.g., with different bit lengths) or may choose
        their parameters in a different way, but they must be clear about
        how the parameters were derived.
      </t>
      <t>
        New additions of FFDHE groups MUST use a safe prime as the
        modulus to enable the inexpensive peer verification described
        in <xref target="peercheck"/>.
      </t>
      <section anchor="ffdhe2048" title="ffdhe2048">
        <t>The 2048-bit group has registry value 256 and is calculated
        from the following formula:</t>
        <t>The modulus is:</t>
	<t>p = 2^2048 - 2^1984 + {[2^1918 * e] + 560316 } * 2^64 - 1 </t>
        <t>The hexadecimal representation of p is:</t>
        <figure>
        <artwork><![CDATA[
 FFFFFFFF FFFFFFFF ADF85458 A2BB4A9A AFDC5620 273D3CF1
 D8B9C583 CE2D3695 A9E13641 146433FB CC939DCE 249B3EF9
 7D2FE363 630C75D8 F681B202 AEC4617A D3DF1ED5 D5FD6561
 2433F51F 5F066ED0 85636555 3DED1AF3 B557135E 7F57C935
 984F0C70 E0E68B77 E2A689DA F3EFE872 1DF158A1 36ADE735
 30ACCA4F 483A797A BC0AB182 B324FB61 D108A94B B2C8E3FB
 B96ADAB7 60D7F468 1D4F42A3 DE394DF4 AE56EDE7 6372BB19
 0B07A7C8 EE0A6D70 9E02FCE1 CDF7E2EC C03404CD 28342F61
 9172FE9C E98583FF 8E4F1232 EEF28183 C3FE3B1B 4C6FAD73
 3BB5FCBC 2EC22005 C58EF183 7D1683B2 C6F34A26 C1B2EFFA
 886B4238 61285C97 FFFFFFFF FFFFFFFF
 ]]></artwork>
      </figure>
        <t>The generator is: g = 2</t>
        <t>The group size is: q = (p-1)/2</t>
        <t>The hexadecimal representation of q is:</t>
        <figure>
        <artwork><![CDATA[
 7FFFFFFF FFFFFFFF D6FC2A2C 515DA54D 57EE2B10 139E9E78
 EC5CE2C1 E7169B4A D4F09B20 8A3219FD E649CEE7 124D9F7C
 BE97F1B1 B1863AEC 7B40D901 576230BD 69EF8F6A EAFEB2B0
 9219FA8F AF833768 42B1B2AA 9EF68D79 DAAB89AF 3FABE49A
 CC278638 707345BB F15344ED 79F7F439 0EF8AC50 9B56F39A
 98566527 A41D3CBD 5E0558C1 59927DB0 E88454A5 D96471FD
 DCB56D5B B06BFA34 0EA7A151 EF1CA6FA 572B76F3 B1B95D8C
 8583D3E4 770536B8 4F017E70 E6FBF176 601A0266 941A17B0
 C8B97F4E 74C2C1FF C7278919 777940C1 E1FF1D8D A637D6B9
 9DDAFE5E 17611002 E2C778C1 BE8B41D9 6379A513 60D977FD
 4435A11C 30942E4B FFFFFFFF FFFFFFFF
 ]]></artwork>
      </figure>
        <t>The estimated symmetric-equivalent strength of this group is 103 bits.</t>
        <t>Peers using ffdhe2048 that want to optimize their key
        exchange with a <xref target="short_exponents">short
        exponent</xref> should choose a secret key of at least 225
        bits.</t>
      </section>

      <section anchor="ffdhe3072" title="ffdhe3072">
        <t>The 3072-bit prime has registry value 257 and is calculated
        from the following formula:</t>
        <t>The modulus is:</t>
	<t>p = 2^3072 - 2^3008 + {[2^2942 * e] + 2625351} * 2^64 - 1</t>
        <t>The hexadecimal representation of p is:</t>
        <figure>
        <artwork><![CDATA[
 FFFFFFFF FFFFFFFF ADF85458 A2BB4A9A AFDC5620 273D3CF1
 D8B9C583 CE2D3695 A9E13641 146433FB CC939DCE 249B3EF9
 7D2FE363 630C75D8 F681B202 AEC4617A D3DF1ED5 D5FD6561
 2433F51F 5F066ED0 85636555 3DED1AF3 B557135E 7F57C935
 984F0C70 E0E68B77 E2A689DA F3EFE872 1DF158A1 36ADE735
 30ACCA4F 483A797A BC0AB182 B324FB61 D108A94B B2C8E3FB
 B96ADAB7 60D7F468 1D4F42A3 DE394DF4 AE56EDE7 6372BB19
 0B07A7C8 EE0A6D70 9E02FCE1 CDF7E2EC C03404CD 28342F61
 9172FE9C E98583FF 8E4F1232 EEF28183 C3FE3B1B 4C6FAD73
 3BB5FCBC 2EC22005 C58EF183 7D1683B2 C6F34A26 C1B2EFFA
 886B4238 611FCFDC DE355B3B 6519035B BC34F4DE F99C0238
 61B46FC9 D6E6C907 7AD91D26 91F7F7EE 598CB0FA C186D91C
 AEFE1309 85139270 B4130C93 BC437944 F4FD4452 E2D74DD3
 64F2E21E 71F54BFF 5CAE82AB 9C9DF69E E86D2BC5 22363A0D
 ABC52197 9B0DEADA 1DBF9A42 D5C4484E 0ABCD06B FA53DDEF
 3C1B20EE 3FD59D7C 25E41D2B 66C62E37 FFFFFFFF FFFFFFFF
 ]]></artwork>
      </figure>
        <t>The generator is: g = 2</t>
        <t>The group size is: q = (p-1)/2</t>
        <t>The hexadecimal representation of q is:</t>
        <figure>
        <artwork><![CDATA[
 7FFFFFFF FFFFFFFF D6FC2A2C 515DA54D 57EE2B10 139E9E78
 EC5CE2C1 E7169B4A D4F09B20 8A3219FD E649CEE7 124D9F7C
 BE97F1B1 B1863AEC 7B40D901 576230BD 69EF8F6A EAFEB2B0
 9219FA8F AF833768 42B1B2AA 9EF68D79 DAAB89AF 3FABE49A
 CC278638 707345BB F15344ED 79F7F439 0EF8AC50 9B56F39A
 98566527 A41D3CBD 5E0558C1 59927DB0 E88454A5 D96471FD
 DCB56D5B B06BFA34 0EA7A151 EF1CA6FA 572B76F3 B1B95D8C
 8583D3E4 770536B8 4F017E70 E6FBF176 601A0266 941A17B0
 C8B97F4E 74C2C1FF C7278919 777940C1 E1FF1D8D A637D6B9
 9DDAFE5E 17611002 E2C778C1 BE8B41D9 6379A513 60D977FD
 4435A11C 308FE7EE 6F1AAD9D B28C81AD DE1A7A6F 7CCE011C
 30DA37E4 EB736483 BD6C8E93 48FBFBF7 2CC6587D 60C36C8E
 577F0984 C289C938 5A098649 DE21BCA2 7A7EA229 716BA6E9
 B279710F 38FAA5FF AE574155 CE4EFB4F 743695E2 911B1D06
 D5E290CB CD86F56D 0EDFCD21 6AE22427 055E6835 FD29EEF7
 9E0D9077 1FEACEBE 12F20E95 B363171B FFFFFFFF FFFFFFFF
 ]]></artwork>
      </figure>
        <t>The estimated symmetric-equivalent strength of this group is 125 bits.</t>
        <t>Peers using ffdhe3072 that want to optimize their key
        exchange with a <xref target="short_exponents">short
        exponent</xref> should choose a secret key of at least 275
        bits.</t>
      </section>

      <section anchor="ffdhe4096" title="ffdhe4096">
        <t>The 4096-bit group has registry value 258 and is calculated
        from the following formula:</t>
        <t>The modulus is:</t> 
	<t>p = 2^4096 - 2^4032 + {[2^3966 * e] + 5736041} * 2^64 - 1</t>
        <t>The hexadecimal representation of p is:</t>
        <figure>
        <artwork><![CDATA[
 FFFFFFFF FFFFFFFF ADF85458 A2BB4A9A AFDC5620 273D3CF1
 D8B9C583 CE2D3695 A9E13641 146433FB CC939DCE 249B3EF9
 7D2FE363 630C75D8 F681B202 AEC4617A D3DF1ED5 D5FD6561
 2433F51F 5F066ED0 85636555 3DED1AF3 B557135E 7F57C935
 984F0C70 E0E68B77 E2A689DA F3EFE872 1DF158A1 36ADE735
 30ACCA4F 483A797A BC0AB182 B324FB61 D108A94B B2C8E3FB
 B96ADAB7 60D7F468 1D4F42A3 DE394DF4 AE56EDE7 6372BB19
 0B07A7C8 EE0A6D70 9E02FCE1 CDF7E2EC C03404CD 28342F61
 9172FE9C E98583FF 8E4F1232 EEF28183 C3FE3B1B 4C6FAD73
 3BB5FCBC 2EC22005 C58EF183 7D1683B2 C6F34A26 C1B2EFFA
 886B4238 611FCFDC DE355B3B 6519035B BC34F4DE F99C0238
 61B46FC9 D6E6C907 7AD91D26 91F7F7EE 598CB0FA C186D91C
 AEFE1309 85139270 B4130C93 BC437944 F4FD4452 E2D74DD3
 64F2E21E 71F54BFF 5CAE82AB 9C9DF69E E86D2BC5 22363A0D
 ABC52197 9B0DEADA 1DBF9A42 D5C4484E 0ABCD06B FA53DDEF
 3C1B20EE 3FD59D7C 25E41D2B 669E1EF1 6E6F52C3 164DF4FB
 7930E9E4 E58857B6 AC7D5F42 D69F6D18 7763CF1D 55034004
 87F55BA5 7E31CC7A 7135C886 EFB4318A ED6A1E01 2D9E6832
 A907600A 918130C4 6DC778F9 71AD0038 092999A3 33CB8B7A
 1A1DB93D 7140003C 2A4ECEA9 F98D0ACC 0A8291CD CEC97DCF
 8EC9B55A 7F88A46B 4DB5A851 F44182E1 C68A007E 5E655F6A
 FFFFFFFF FFFFFFFF
 ]]></artwork>
      </figure>
        <t>The generator is: g = 2</t>
        <t>The group size is: q = (p-1)/2</t>
        <t>The hexadecimal representation of q is:</t>
        <figure>
        <artwork><![CDATA[
 7FFFFFFF FFFFFFFF D6FC2A2C 515DA54D 57EE2B10 139E9E78
 EC5CE2C1 E7169B4A D4F09B20 8A3219FD E649CEE7 124D9F7C
 BE97F1B1 B1863AEC 7B40D901 576230BD 69EF8F6A EAFEB2B0
 9219FA8F AF833768 42B1B2AA 9EF68D79 DAAB89AF 3FABE49A
 CC278638 707345BB F15344ED 79F7F439 0EF8AC50 9B56F39A
 98566527 A41D3CBD 5E0558C1 59927DB0 E88454A5 D96471FD
 DCB56D5B B06BFA34 0EA7A151 EF1CA6FA 572B76F3 B1B95D8C
 8583D3E4 770536B8 4F017E70 E6FBF176 601A0266 941A17B0
 C8B97F4E 74C2C1FF C7278919 777940C1 E1FF1D8D A637D6B9
 9DDAFE5E 17611002 E2C778C1 BE8B41D9 6379A513 60D977FD
 4435A11C 308FE7EE 6F1AAD9D B28C81AD DE1A7A6F 7CCE011C
 30DA37E4 EB736483 BD6C8E93 48FBFBF7 2CC6587D 60C36C8E
 577F0984 C289C938 5A098649 DE21BCA2 7A7EA229 716BA6E9
 B279710F 38FAA5FF AE574155 CE4EFB4F 743695E2 911B1D06
 D5E290CB CD86F56D 0EDFCD21 6AE22427 055E6835 FD29EEF7
 9E0D9077 1FEACEBE 12F20E95 B34F0F78 B737A961 8B26FA7D
 BC9874F2 72C42BDB 563EAFA1 6B4FB68C 3BB1E78E AA81A002
 43FAADD2 BF18E63D 389AE443 77DA18C5 76B50F00 96CF3419
 5483B005 48C09862 36E3BC7C B8D6801C 0494CCD1 99E5C5BD
 0D0EDC9E B8A0001E 15276754 FCC68566 054148E6 E764BEE7
 C764DAAD 3FC45235 A6DAD428 FA20C170 E345003F 2F32AFB5
 7FFFFFFF FFFFFFFF
 ]]></artwork>
      </figure>
        <t>The estimated symmetric-equivalent strength of this group
        is 150 bits.</t>
        <t>Peers using ffdhe4096 that want to optimize their key
        exchange with a <xref target="short_exponents">short
        exponent</xref> should choose a secret key of at least 325
        bits.</t>
      </section>
      <section anchor="ffdhe6144" title="ffdhe6144">
        <t>The 6144-bit group has registry value 259 and is calculated
        from the following formula:</t>
        <t>The modulus is:</t>
	<t>p = 2^6144 - 2^6080 + {[2^6014 * e] + 15705020} * 2^64 - 1</t>
        <t>The hexadecimal representation of p is:</t>
        <figure>
        <artwork><![CDATA[
 FFFFFFFF FFFFFFFF ADF85458 A2BB4A9A AFDC5620 273D3CF1
 D8B9C583 CE2D3695 A9E13641 146433FB CC939DCE 249B3EF9
 7D2FE363 630C75D8 F681B202 AEC4617A D3DF1ED5 D5FD6561
 2433F51F 5F066ED0 85636555 3DED1AF3 B557135E 7F57C935
 984F0C70 E0E68B77 E2A689DA F3EFE872 1DF158A1 36ADE735
 30ACCA4F 483A797A BC0AB182 B324FB61 D108A94B B2C8E3FB
 B96ADAB7 60D7F468 1D4F42A3 DE394DF4 AE56EDE7 6372BB19
 0B07A7C8 EE0A6D70 9E02FCE1 CDF7E2EC C03404CD 28342F61
 9172FE9C E98583FF 8E4F1232 EEF28183 C3FE3B1B 4C6FAD73
 3BB5FCBC 2EC22005 C58EF183 7D1683B2 C6F34A26 C1B2EFFA
 886B4238 611FCFDC DE355B3B 6519035B BC34F4DE F99C0238
 61B46FC9 D6E6C907 7AD91D26 91F7F7EE 598CB0FA C186D91C
 AEFE1309 85139270 B4130C93 BC437944 F4FD4452 E2D74DD3
 64F2E21E 71F54BFF 5CAE82AB 9C9DF69E E86D2BC5 22363A0D
 ABC52197 9B0DEADA 1DBF9A42 D5C4484E 0ABCD06B FA53DDEF
 3C1B20EE 3FD59D7C 25E41D2B 669E1EF1 6E6F52C3 164DF4FB
 7930E9E4 E58857B6 AC7D5F42 D69F6D18 7763CF1D 55034004
 87F55BA5 7E31CC7A 7135C886 EFB4318A ED6A1E01 2D9E6832
 A907600A 918130C4 6DC778F9 71AD0038 092999A3 33CB8B7A
 1A1DB93D 7140003C 2A4ECEA9 F98D0ACC 0A8291CD CEC97DCF
 8EC9B55A 7F88A46B 4DB5A851 F44182E1 C68A007E 5E0DD902
 0BFD64B6 45036C7A 4E677D2C 38532A3A 23BA4442 CAF53EA6
 3BB45432 9B7624C8 917BDD64 B1C0FD4C B38E8C33 4C701C3A
 CDAD0657 FCCFEC71 9B1F5C3E 4E46041F 388147FB 4CFDB477
 A52471F7 A9A96910 B855322E DB6340D8 A00EF092 350511E3
 0ABEC1FF F9E3A26E 7FB29F8C 183023C3 587E38DA 0077D9B4
 763E4E4B 94B2BBC1 94C6651E 77CAF992 EEAAC023 2A281BF6
 B3A739C1 22611682 0AE8DB58 47A67CBE F9C9091B 462D538C
 D72B0374 6AE77F5E 62292C31 1562A846 505DC82D B854338A
 E49F5235 C95B9117 8CCF2DD5 CACEF403 EC9D1810 C6272B04
 5B3B71F9 DC6B80D6 3FDD4A8E 9ADB1E69 62A69526 D43161C1
 A41D570D 7938DAD4 A40E329C D0E40E65 FFFFFFFF FFFFFFFF
 ]]></artwork>
      </figure>
        <t>The generator is: g = 2</t>
        <t>The group size is: q = (p-1)/2</t>
        <t>The hexadecimal representation of q is:</t>
        <figure>
        <artwork><![CDATA[
 7FFFFFFF FFFFFFFF D6FC2A2C 515DA54D 57EE2B10 139E9E78
 EC5CE2C1 E7169B4A D4F09B20 8A3219FD E649CEE7 124D9F7C
 BE97F1B1 B1863AEC 7B40D901 576230BD 69EF8F6A EAFEB2B0
 9219FA8F AF833768 42B1B2AA 9EF68D79 DAAB89AF 3FABE49A
 CC278638 707345BB F15344ED 79F7F439 0EF8AC50 9B56F39A
 98566527 A41D3CBD 5E0558C1 59927DB0 E88454A5 D96471FD
 DCB56D5B B06BFA34 0EA7A151 EF1CA6FA 572B76F3 B1B95D8C
 8583D3E4 770536B8 4F017E70 E6FBF176 601A0266 941A17B0
 C8B97F4E 74C2C1FF C7278919 777940C1 E1FF1D8D A637D6B9
 9DDAFE5E 17611002 E2C778C1 BE8B41D9 6379A513 60D977FD
 4435A11C 308FE7EE 6F1AAD9D B28C81AD DE1A7A6F 7CCE011C
 30DA37E4 EB736483 BD6C8E93 48FBFBF7 2CC6587D 60C36C8E
 577F0984 C289C938 5A098649 DE21BCA2 7A7EA229 716BA6E9
 B279710F 38FAA5FF AE574155 CE4EFB4F 743695E2 911B1D06
 D5E290CB CD86F56D 0EDFCD21 6AE22427 055E6835 FD29EEF7
 9E0D9077 1FEACEBE 12F20E95 B34F0F78 B737A961 8B26FA7D
 BC9874F2 72C42BDB 563EAFA1 6B4FB68C 3BB1E78E AA81A002
 43FAADD2 BF18E63D 389AE443 77DA18C5 76B50F00 96CF3419
 5483B005 48C09862 36E3BC7C B8D6801C 0494CCD1 99E5C5BD
 0D0EDC9E B8A0001E 15276754 FCC68566 054148E6 E764BEE7
 C764DAAD 3FC45235 A6DAD428 FA20C170 E345003F 2F06EC81
 05FEB25B 2281B63D 2733BE96 1C29951D 11DD2221 657A9F53
 1DDA2A19 4DBB1264 48BDEEB2 58E07EA6 59C74619 A6380E1D
 66D6832B FE67F638 CD8FAE1F 2723020F 9C40A3FD A67EDA3B
 D29238FB D4D4B488 5C2A9917 6DB1A06C 50077849 1A8288F1
 855F60FF FCF1D137 3FD94FC6 0C1811E1 AC3F1C6D 003BECDA
 3B1F2725 CA595DE0 CA63328F 3BE57CC9 77556011 95140DFB
 59D39CE0 91308B41 05746DAC 23D33E5F 7CE4848D A316A9C6
 6B9581BA 3573BFAF 31149618 8AB15423 282EE416 DC2A19C5
 724FA91A E4ADC88B C66796EA E5677A01 F64E8C08 63139582
 2D9DB8FC EE35C06B 1FEEA547 4D6D8F34 B1534A93 6A18B0E0
 D20EAB86 BC9C6D6A 5207194E 68720732 FFFFFFFF FFFFFFFF
 ]]></artwork>
      </figure>
        <t>The estimated symmetric-equivalent strength of this group
        is 175 bits.</t>
        <t>Peers using ffdhe6144 that want to optimize their key
        exchange with a <xref target="short_exponents">short
        exponent</xref> should choose a secret key of at least 375
        bits.</t>
      </section>
      <section anchor="ffdhe8192" title="ffdhe8192">
        <t>The 8192-bit group has registry value 260 and is calculated
        from the following formula:</t>
        <t>The modulus is:</t>
	<t>p = 2^8192 - 2^8128 + {[2^8062 * e] + 10965728} * 2^64 - 1</t>
        <t>The hexadecimal representation of p is:</t>
        <figure>
        <artwork><![CDATA[
 FFFFFFFF FFFFFFFF ADF85458 A2BB4A9A AFDC5620 273D3CF1
 D8B9C583 CE2D3695 A9E13641 146433FB CC939DCE 249B3EF9
 7D2FE363 630C75D8 F681B202 AEC4617A D3DF1ED5 D5FD6561
 2433F51F 5F066ED0 85636555 3DED1AF3 B557135E 7F57C935
 984F0C70 E0E68B77 E2A689DA F3EFE872 1DF158A1 36ADE735
 30ACCA4F 483A797A BC0AB182 B324FB61 D108A94B B2C8E3FB
 B96ADAB7 60D7F468 1D4F42A3 DE394DF4 AE56EDE7 6372BB19
 0B07A7C8 EE0A6D70 9E02FCE1 CDF7E2EC C03404CD 28342F61
 9172FE9C E98583FF 8E4F1232 EEF28183 C3FE3B1B 4C6FAD73
 3BB5FCBC 2EC22005 C58EF183 7D1683B2 C6F34A26 C1B2EFFA
 886B4238 611FCFDC DE355B3B 6519035B BC34F4DE F99C0238
 61B46FC9 D6E6C907 7AD91D26 91F7F7EE 598CB0FA C186D91C
 AEFE1309 85139270 B4130C93 BC437944 F4FD4452 E2D74DD3
 64F2E21E 71F54BFF 5CAE82AB 9C9DF69E E86D2BC5 22363A0D
 ABC52197 9B0DEADA 1DBF9A42 D5C4484E 0ABCD06B FA53DDEF
 3C1B20EE 3FD59D7C 25E41D2B 669E1EF1 6E6F52C3 164DF4FB
 7930E9E4 E58857B6 AC7D5F42 D69F6D18 7763CF1D 55034004
 87F55BA5 7E31CC7A 7135C886 EFB4318A ED6A1E01 2D9E6832
 A907600A 918130C4 6DC778F9 71AD0038 092999A3 33CB8B7A
 1A1DB93D 7140003C 2A4ECEA9 F98D0ACC 0A8291CD CEC97DCF
 8EC9B55A 7F88A46B 4DB5A851 F44182E1 C68A007E 5E0DD902
 0BFD64B6 45036C7A 4E677D2C 38532A3A 23BA4442 CAF53EA6
 3BB45432 9B7624C8 917BDD64 B1C0FD4C B38E8C33 4C701C3A
 CDAD0657 FCCFEC71 9B1F5C3E 4E46041F 388147FB 4CFDB477
 A52471F7 A9A96910 B855322E DB6340D8 A00EF092 350511E3
 0ABEC1FF F9E3A26E 7FB29F8C 183023C3 587E38DA 0077D9B4
 763E4E4B 94B2BBC1 94C6651E 77CAF992 EEAAC023 2A281BF6
 B3A739C1 22611682 0AE8DB58 47A67CBE F9C9091B 462D538C
 D72B0374 6AE77F5E 62292C31 1562A846 505DC82D B854338A
 E49F5235 C95B9117 8CCF2DD5 CACEF403 EC9D1810 C6272B04
 5B3B71F9 DC6B80D6 3FDD4A8E 9ADB1E69 62A69526 D43161C1
 A41D570D 7938DAD4 A40E329C CFF46AAA 36AD004C F600C838
 1E425A31 D951AE64 FDB23FCE C9509D43 687FEB69 EDD1CC5E
 0B8CC3BD F64B10EF 86B63142 A3AB8829 555B2F74 7C932665
 CB2C0F1C C01BD702 29388839 D2AF05E4 54504AC7 8B758282
 2846C0BA 35C35F5C 59160CC0 46FD8251 541FC68C 9C86B022
 BB709987 6A460E74 51A8A931 09703FEE 1C217E6C 3826E52C
 51AA691E 0E423CFC 99E9E316 50C1217B 624816CD AD9A95F9
 D5B80194 88D9C0A0 A1FE3075 A577E231 83F81D4A 3F2FA457
 1EFC8CE0 BA8A4FE8 B6855DFE 72B0A66E DED2FBAB FBE58A30
 FAFABE1C 5D71A87E 2F741EF8 C1FE86FE A6BBFDE5 30677F0D
 97D11D49 F7A8443D 0822E506 A9F4614E 011E2A94 838FF88C
 D68C8BB7 C5C6424C FFFFFFFF FFFFFFFF
 ]]></artwork>
      </figure>
        <t>The generator is: g = 2</t>
        <t>The group size is: q = (p-1)/2</t>
        <t>The hexadecimal representation of q is:</t>
        <figure>
        <artwork><![CDATA[
 7FFFFFFF FFFFFFFF D6FC2A2C 515DA54D 57EE2B10 139E9E78
 EC5CE2C1 E7169B4A D4F09B20 8A3219FD E649CEE7 124D9F7C
 BE97F1B1 B1863AEC 7B40D901 576230BD 69EF8F6A EAFEB2B0
 9219FA8F AF833768 42B1B2AA 9EF68D79 DAAB89AF 3FABE49A
 CC278638 707345BB F15344ED 79F7F439 0EF8AC50 9B56F39A
 98566527 A41D3CBD 5E0558C1 59927DB0 E88454A5 D96471FD
 DCB56D5B B06BFA34 0EA7A151 EF1CA6FA 572B76F3 B1B95D8C
 8583D3E4 770536B8 4F017E70 E6FBF176 601A0266 941A17B0
 C8B97F4E 74C2C1FF C7278919 777940C1 E1FF1D8D A637D6B9
 9DDAFE5E 17611002 E2C778C1 BE8B41D9 6379A513 60D977FD
 4435A11C 308FE7EE 6F1AAD9D B28C81AD DE1A7A6F 7CCE011C
 30DA37E4 EB736483 BD6C8E93 48FBFBF7 2CC6587D 60C36C8E
 577F0984 C289C938 5A098649 DE21BCA2 7A7EA229 716BA6E9
 B279710F 38FAA5FF AE574155 CE4EFB4F 743695E2 911B1D06
 D5E290CB CD86F56D 0EDFCD21 6AE22427 055E6835 FD29EEF7
 9E0D9077 1FEACEBE 12F20E95 B34F0F78 B737A961 8B26FA7D
 BC9874F2 72C42BDB 563EAFA1 6B4FB68C 3BB1E78E AA81A002
 43FAADD2 BF18E63D 389AE443 77DA18C5 76B50F00 96CF3419
 5483B005 48C09862 36E3BC7C B8D6801C 0494CCD1 99E5C5BD
 0D0EDC9E B8A0001E 15276754 FCC68566 054148E6 E764BEE7
 C764DAAD 3FC45235 A6DAD428 FA20C170 E345003F 2F06EC81
 05FEB25B 2281B63D 2733BE96 1C29951D 11DD2221 657A9F53
 1DDA2A19 4DBB1264 48BDEEB2 58E07EA6 59C74619 A6380E1D
 66D6832B FE67F638 CD8FAE1F 2723020F 9C40A3FD A67EDA3B
 D29238FB D4D4B488 5C2A9917 6DB1A06C 50077849 1A8288F1
 855F60FF FCF1D137 3FD94FC6 0C1811E1 AC3F1C6D 003BECDA
 3B1F2725 CA595DE0 CA63328F 3BE57CC9 77556011 95140DFB
 59D39CE0 91308B41 05746DAC 23D33E5F 7CE4848D A316A9C6
 6B9581BA 3573BFAF 31149618 8AB15423 282EE416 DC2A19C5
 724FA91A E4ADC88B C66796EA E5677A01 F64E8C08 63139582
 2D9DB8FC EE35C06B 1FEEA547 4D6D8F34 B1534A93 6A18B0E0
 D20EAB86 BC9C6D6A 5207194E 67FA3555 1B568026 7B00641C
 0F212D18 ECA8D732 7ED91FE7 64A84EA1 B43FF5B4 F6E8E62F
 05C661DE FB258877 C35B18A1 51D5C414 AAAD97BA 3E499332
 E596078E 600DEB81 149C441C E95782F2 2A282563 C5BAC141
 1423605D 1AE1AFAE 2C8B0660 237EC128 AA0FE346 4E435811
 5DB84CC3 B523073A 28D45498 84B81FF7 0E10BF36 1C137296
 28D5348F 07211E7E 4CF4F18B 286090BD B1240B66 D6CD4AFC
 EADC00CA 446CE050 50FF183A D2BBF118 C1FC0EA5 1F97D22B
 8F7E4670 5D4527F4 5B42AEFF 39585337 6F697DD5 FDF2C518
 7D7D5F0E 2EB8D43F 17BA0F7C 60FF437F 535DFEF2 9833BF86
 CBE88EA4 FBD4221E 84117283 54FA30A7 008F154A 41C7FC46
 6B4645DB E2E32126 7FFFFFFF FFFFFFFF
 ]]></artwork>
      </figure>
        <t>The estimated symmetric-equivalent strength of this group
        is 192 bits.</t>
        <t>Peers using ffdhe8192 that want to optimize their key
        exchange with a <xref target="short_exponents">short
        exponent</xref> should choose a secret key of at least 400
        bits.</t>
      </section>

    </section>
<section title="Acknowledgements" numbered="no">
<t>Thanks to Fedor Brunner, Dave Fergemann, Niels Ferguson, Sandy
   Harris, Tero Kivinen, Watson Ladd, Nikos Mavrogiannopolous, Niels
   Moeller, Bodo Moeller, Kenny Paterson, Eric Rescorla, Tom Ritter,
   Rene Struik, Martin Thomson, Sean Turner, and other members of the
   TLS Working Group for their comments and suggestions on this document.
   Any mistakes here are not theirs.</t>
</section>

  </back>
</rfc>
