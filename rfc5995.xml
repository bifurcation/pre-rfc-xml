<?xml version="1.0" encoding="US-ASCII"?>
<!--
    This XML document is the output of clean-for-DTD.xslt; a tool that strips
    extensions to RFC2629(bis) from documents for processing with xml2rfc.
-->
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<!DOCTYPE rfc
  PUBLIC "" "rfc2629.dtd">
<rfc ipr="trust200902" number="5995" category="std">

<front>
  <title abbrev="POST to Add to WebDAV Collections">Using POST to Add Members to Web Distributed Authoring and Versioning (WebDAV) Collections</title>

  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke">
    <organization abbrev="greenbytes">greenbytes GmbH</organization>
    <address>
      <postal>
        <street>Hafenweg 16</street>
        <city>Muenster</city><region>NW</region><code>48155</code>
        <country>Germany</country>
      </postal>
      <phone>+49 251 2807760</phone>	
      <email>julian.reschke@greenbytes.de</email>	
      <uri>http://greenbytes.de/tech/webdav/</uri>	
    </address>
  </author>

  <date month="September" year="2010" />
  
  <keyword>HTTP</keyword>
  <keyword>POST</keyword>
  <keyword>WebDAV</keyword>
  <keyword>Collections</keyword>
  <keyword>Collection Members</keyword>

  <abstract>
    <t>
      The Hypertext Transfer Protocol (HTTP) Extensions for the Web Distributed
      Authoring and Versioning (WebDAV) do not define the behavior for the
      "POST" method when applied to collections, as the base specification
      (HTTP) leaves implementers lots of freedom for the semantics of "POST".
    </t>
    <t>
      This has led to a situation where many WebDAV servers do not implement
      POST for collections at all, although it is well suited to be
      used for the purpose of adding new members to a collection, where the server
      remains in control of the newly assigned URL.  In fact,
      the Atom Publishing Protocol (AtomPub) uses POST exactly for that
      purpose.
      On the other hand, WebDAV-based protocols, such as the Calendaring
      Extensions to WebDAV (CalDAV), frequently
      require clients to pick a unique URL, although the server could easily
      perform that task.
    </t>
    <t>
      This specification defines a discovery mechanism through which servers
      can advertise support for POST requests with the aforementioned
      "add collection member" semantics.
    </t>
  </abstract>
  
  </front>

<middle>

<section title="Introduction" anchor="introduction">
  <t>
    The Hypertext Transfer Protocol (HTTP) Extensions for the Web Distributed
    Authoring and Versioning (WebDAV) (<xref target="RFC4918"/>,
    Section&nbsp;9.5) do not define the behavior for the
    "POST" method when applied to collections, as the base specification
    (HTTP) leaves implementers lots of freedom for the semantics of "POST":
  </t>
  <t><list>
    <t>
      9.5 POST for Collections
    </t>
    <t>
      Since by definition the actual function performed by POST is determined
      by the server and often depends on the particular resource, the behavior
      of POST when applied to collections cannot be meaningfully modified
      because it is largely undefined.  Thus, the semantics of POST are
      unmodified when applied to a collection.
    </t>
  </list></t>
  <t>
    This has led to a situation where many WebDAV servers do not implement
    POST for collections at all, although it is well suited to be
    used for the purpose of adding new members to a collection, where the server
    remains in control of the newly assigned URL.  In fact,
    the Atom Publishing Protocol (AtomPub) uses POST exactly for that purpose
    (<xref target="RFC5023"/>, Section 9.2):
  </t>
  <t><list>
    <t>
      9.2 Creating Resources with POST
    </t>
    <t>
      To add members to a Collection, clients send POST requests to the URI of
      the Collection.
    </t>
  </list></t>
  <t>
    On the other hand, WebDAV-based protocols, such as Calendaring Extensions to
    WebDAV (CalDAV), frequently require clients to pick a unique URL, although
    the server could easily perform that task (<xref target="RFC4791"/>, Section 5.3.2):
  </t>
  <t><list>
    <t>
      5.3.2 Creating Calendar Object Resources
    </t>
    <t>
      ...
    </t>
    <t>
      When servers create new resources, it's not hard for the server to choose
      an unmapped URI.  It's slightly tougher for clients, because a client
      might not want to examine all resources in the collection and might not
      want to lock the entire collection to ensure that a new resource isn't
      created with a name collision.  (...)
    </t>
  </list></t>
  <t>
    Letting the server choose the member URI not only is a 
    simplification for certain types of clients, but can also reduce the complexity
    of the server (in that it doesn't need to persist an additional
    client-supplied identifier where it already has an internal one like
    a Universally Unique Identifier (UUID) or a primary key).
  </t>
  <t><list>
    <t>
      Note: The vCard Extensions to WebDAV (CardDAV) (<xref target="CARDDAV"/>)
      suffer from the same issue, and may be able to take advantage of this
      specification.
    </t>
  </list></t>
  <t>
    This specification defines a discovery mechanism through which servers
    can advertise support for POST requests with the aforementioned
    "add collection member" semantics.
  </t>

  <t>
    This specification deliberately only addresses the use case of
    creating new non-collection resources.  It was not a goal
    for this specification to supply the same functionality for creating
    collection resources (MKCOL) or for other operations that
    require the client to specify a new URL (LOCK, MOVE, or
    COPY).
  </t>

  <t><list>
    <t>
      Note: The author previously proposed a new HTTP method for
      exactly this purpose (<xref target="ADDMEMBER"/>),
      but quite a few reviewers pointed out that this would duplicate the
      original semantics of POST.  Thus, this proposal, which
      avoids adding a new HTTP method, is made.
    </t>

  </list></t>
</section>
  
<section title="Terminology" anchor="terminology">
<t>
  The terminology used here follows that in the WebDAV specification
  (<xref target="RFC4918"/>).
</t>
<t>
  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
  "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
  interpreted as described in <xref target="RFC2119"/>. 
</t>
<t>
  This document uses XML DTD fragments 
  (<xref target="XML"/>) as a purely notational convention.  In particular:
  <list style="symbols">

    <t>Element ordering is irrelevant.</t>
    <t>Extension elements/attributes (elements/attributes not already defined
    as valid child elements) may be added anywhere, except when explicitly
    stated otherwise.</t> 
  </list>
</t>

<t><list>
  <t>
    Note: This specification defines new properties and precondition
    names in the "DAV:" namespace, which the WebDAV specification reserves for
    use by the IETF (<xref target="RFC4918"/>, Section 21.1).  However,
    there was rough consensus in the WebDAV community that the specification is
    of general applicability to other WebDAV-related standards efforts, and
    thus deserves inclusion into the base namespace.
  </t>
</list></t>

</section>
  
<section title="Protocol Extension">
<t>
  Due to the reasons stated in <xref target="introduction"/>, clients
  cannot rely on a specific server behavior when POST is applied to a
  collection.  This problem is addressed by this specification by allowing
  servers to advertise a URI that has the desired "add member" semantics.
</t>
<t>
  Servers that already use POST for a different purpose can just
  expose a separate URI.  Other servers can just advertise
  the collection's own URI, thus avoiding minting another URI for a limited
  purpose.
</t>

<section title="Definition of &quot;Add-Member&quot; URI">
<iref item="Add-Member URI"/>
<t>
  The "Add-Member" URI of a WebDAV collection is a URI that will accept
  HTTP POST requests, and will interpret these as requests to store
  the enclosed entity as a new internal member of the collection (see
  Section 3 of <xref target="RFC4918"/> for the definition of "internal
  member").
  It MUST identify a resource on the same server as the WebDAV collection
  (the host and port components (<xref target="RFC2616"/>, Section 3.2.2) of the URIs must match).
  
</t>
<t>
  If there are preconditions related to creating a resource in the collection
  using a PUT request, then those same preconditions apply to the new POST
  request behavior, and the same HTTP response body will be returned on failure.
</t>
<t>
  The URI of the newly created resource is returned in the HTTP Location
  response header field (<xref target="RFC2616"/>, Section 14.30).
</t>
<t><list>
  <t>
    Note: The fact that a server advertises an "Add-Member" URI
    does not imply any special semantics of the collection itself.  For instance,
    member URIs assigned by the server are not necessarily unique over time (a member
    URI may be assigned again to a new resource when it previously was removed).
  </t>
</list></t>
<t><list>
  <t>
    Note: The "Add-Member" URI can be identical to the collection's 
    URI (in which case the server just advertises the fact that POST to the
    WebDAV collection's URI is supported as defined within this specification).
    But it can also be different from it, in which case it doesn't need to
    have any relation to the collection's URI.
  <figure><preamble>Given a collection URI of </preamble>
<artwork type="example"><![CDATA[
   /docs/collection/
   ]]></artwork></figure>
  <figure><preamble>any of the URIs below might occur as "Add-Member" URIs:</preamble>
<artwork type="example"><![CDATA[
   /docs/collection/
   /docs/collection/;post
   /docs/collection;post/
   /docs/collection/&post
   /post-service?path=/collection/
   ]]></artwork></figure></t>
  <t>
    The remainder of the document uses the same format just for reasons
    of consistency; any other HTTP URI on the same server would do as well.
  </t>
</list></t>
</section> 

<section title="Discovery" anchor="discovery">
<section title="DAV:add-member Property (Protected)">
<t>
  DAV:add-member is a protected property (see <xref target="RFC4918"/>, Section 15)  defined on WebDAV collections, and 
  contains the "Add-Member" URI for that collection (embedded inside
  a DAV:href element).
</t>
<figure><artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT add-member (href)>
<!-- href: defined in [RFC4918], Section 14.7 -->
]]></artwork></figure>
<t>
  A PROPFIND/allprop request SHOULD NOT return this property (see
  <xref target="RFC4918"/>, Section 9.1).  Servers
  MUST implement the DAV:supported-live-property-set property defined
  in Section 3.1.4 of <xref target="RFC3253"/>, and report the property
  DAV:add-member as a supported live property.
</t>
</section>

<section title="Example">

<figure>
<preamble>&gt;&gt;Request</preamble>
<artwork type="message/http: msgtype=&#34;request&#34;" xml:space="preserve"><![CDATA[
PROPFIND /collection/ HTTP/1.1
Host: example.com
Content-Type: application/xml; charset="utf-8"
Content-Length: 118

<?xml version="1.0" encoding="utf-8" ?> 
<propfind xmlns="DAV:">
  <prop>
    <add-member/>
  </prop>
</propfind>
]]></artwork>
</figure>
<figure>
<preamble>&gt;&gt;Response</preamble>
<artwork type="message/http: msgtype=&#34;response&#34;" xml:space="preserve"><![CDATA[
HTTP/1.1 207 Multi-Status 
Content-Type: application/xml; charset="utf-8" 
Content-Length: 340
  
<?xml version="1.0" encoding="utf-8" ?>
<multistatus xmlns="DAV:">
  <response>
    <href>/collection/</href>
    <propstat>
      <prop>
        <add-member>
          <href>/collection;add-member/</href>
        </add-member>
      </prop>
      <status>HTTP/1.1 200 OK</status>
    </propstat>
  </response>
</multistatus>
]]></artwork>
<postamble>
  In this case, the server has minted a separate URI for the purpose
  of adding new content.
</postamble>
</figure>
</section>


</section>

<section title="Relation to AtomPub's &quot;Slug&quot; Header Field">
<t>
  In the AtomPub protocol, clients can use the entity header field "Slug" to
  suggest parts of the URI to be created (see <xref target="RFC5023"/>, Section 9.7).  Note that servers are free to ignore
  this suggestion, or to use whatever algorithm makes sense to
  generate the new URI.
</t>
<t>
  The same applies to the extension defined here: clients can use the
  "Slug" header field, as by definition it is a generic HTTP header
  field.  Servers should
  process it exactly in the way defined by AtomPub.
</t>
</section>

<section title="Example Operation">
<figure>
<preamble>&gt;&gt;Request</preamble>
<artwork type="message/http: msgtype=&#34;request&#34;" xml:space="preserve"><![CDATA[
POST /collection;add-member/ HTTP/1.1
Host: example.com
Content-Type: text/plain
Slug: Sample Title
Content-Length: 12

Sample text.
]]></artwork>
</figure>
<figure>
<preamble>&gt;&gt;Response</preamble>
<artwork type="message/http: msgtype=&#34;response&#34;" xml:space="preserve"><![CDATA[
HTTP/1.1 201 Created
Location: http://example.com/collection/sample%20title

]]></artwork>
</figure>
</section>
</section>

<section title="Additional Semantics for Existing Methods">
<t>
  One important use case for this specification is collections that act
  as WebDAV collections for the purpose of read access (PROPFIND Depth 1/Infinity),
  but which only support internal member URIs assigned by the server.
  These collections will not allow a client to create a new member using
  methods like PUT, MKCOL, LOCK, COPY, or MOVE.  Therefore, this specification
  defines a new precondition name (<xref target="RFC4918"/>, Section 16)
  that can be used to provide the client with additional information
  regarding exactly why the request failed.
</t>
<t><list>
<t>
  Note: Although the precondition defined below can be used for
  methods other than PUT, the "Add-Member" mechanism defined by this
  specification deliberately is restricted to PUT.
</t>
</list></t>

<section title="Additional Preconditions">
   <iref item="PUT method" subitem="Additional Preconditions"/>
   <iref item="MKCOL method" subitem="Additional Preconditions"/>
   <iref item="LOCK method" subitem="Additional Preconditions"/>
   <iref item="MOVE method" subitem="Additional Preconditions"/>
   <iref item="COPY method" subitem="Additional Preconditions"/>
<t>
  <iref item="DAV:allow-client-defined-URI" primary="true"/>
  <iref item="Condition Names" subitem="DAV:allow-client-defined-URI (pre)" primary="true"/>
  (DAV:allow-client-defined-URI): the server allows clients to specify
  the last path segment for newly created resources.
</t>
<t>
  The precondition element MAY contain an add-member-uri
  XML element specifying the "Add-Member" URI associated with the collection,
  on which the creation of a new child resource was attempted:
</t>
<figure><artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT allow-client-defined-uri (add-member?)>
]]></artwork></figure>
</section>

<section title="Example: Failed PUT Request">
<t>
  In this example, the client tries to use PUT to create a new internal
  member of /collection/.
</t>
<figure>
<preamble>&gt;&gt;Request</preamble>
<artwork type="message/http: msgtype=&#34;request&#34;" xml:space="preserve"><![CDATA[
PUT /collection/new.txt HTTP/1.1
Host: example.com
Content-Type: text/plain
Content-Length: 12

Sample text.
]]></artwork></figure>
<figure>
<preamble>&gt;&gt;Response</preamble>
<artwork type="message/http: msgtype=&#34;response&#34;" xml:space="preserve"><![CDATA[
HTTP/1.1 405 Method Not Allowed
Allow: GET, HEAD, TRACE, PROPFIND, COPY, MOVE
Content-Type: application/xml; charset=UTF-8
Content-Length: 172

<error xmlns="DAV:">
  <allow-client-defined-uri>
    <add-member>
      <href>/collection;add-member/</href>
    </add-member>
  </allow-client-defined-uri>
</error>
]]></artwork></figure>
<t>
  The request fails with a 405 (Method Not Allowed) status, but also provides
  the reason, and a pointer to the "Add-Member" URI in the response body.
</t>
</section>
</section>

<section title="Relationship to WebDAV Access Control Protocol">
<t>
  The WebDAV Access Control Protocol specification requires the
  DAV:bind privilege to be granted
  on a collection for the client to be able to add new collection members (<xref target="RFC3744"/>, Section 3.9).  Consistent with that, a server
  MUST reject a POST request to the Add-Member URI of a collection, unless
  the principal executing the request is granted DAV:bind privilege on the associated
  WebDAV collection resource.
</t>
</section>
  
<section title="Internationalization Considerations" anchor="internationalization.considerations">
<t>
  This document does not introduce any new internationalization considerations
  beyond those discussed in Section 19 of <xref target="RFC4918"/>.
</t>
</section>

<section title="Security Considerations" anchor="security.considerations">
<t>
  Security considerations applicable to 
  HTTP <xref target="RFC2616"/>, WebDAV <xref target="RFC4918"/>, and XML <xref target="XML"/> apply for
  this specification as well, namely, Section 20 of <xref target="RFC4918"/>
  and Section 7 of <xref target="RFC3470"/>.
</t>
<t>
  Furthermore, servers should be aware that deriving the member path from the
  data being stored in the resource could potentially expose confidential
  information.  This could even be the case when only a hash code of the
  content is used.
</t>
<t>
  In addition, on servers that do not support this specification, a malevolent
  user could set the DAV:add-member URI as a custom property, tricking other
  users to post content to an entirely different URI.  Clients can protect
  themselves against this scenario&nbsp;by
  <list style="symbols">
    <t>not following DAV:add-member URIs to different servers, and/or</t>
    <t>verifying that the DAV:add-member property is indeed a live property (this
    can be achieved by testing the DAV:supported-live-property-set property, or
    by checking whether DAV:add-member is returned upon PROPFIND/allprop).</t>
  </list>
</t>
</section>

<section title="Acknowledgements">
<t>
  This document has benefited from thoughtful discussion by Cyrus Daboo and
  Bernard Desruisseaux.
</t>
</section>
</middle>
  
<back>
    <references title="Normative References">
<?rfc rfcedstyle="no"?>

  <reference anchor="RFC2119">
    <front>
      <title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title>
      <author initials="S." surname="Bradner" fullname="Scott Bradner">
      <organization>Harvard University</organization>
      <address>
        <email>sob@harvard.edu</email>
      </address></author>
      <date month="March" year="1997"/>
    </front>
    <seriesInfo name="BCP" value="14"/>
    <seriesInfo name="RFC" value="2119"/>
  </reference>

  <reference anchor="RFC2616">
    <front>
      <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
      <author initials="R." surname="Fielding" fullname="R. Fielding">
        <organization>University of California, Irvine</organization>
        <address><email>fielding@ics.uci.edu</email></address>
      </author>
      <author initials="J." surname="Gettys" fullname="J. Gettys">
        <organization>W3C</organization>
        <address><email>jg@w3.org</email></address>
      </author>
      <author initials="J." surname="Mogul" fullname="J. Mogul">
        <organization>Compaq Computer Corporation</organization>
        <address><email>mogul@wrl.dec.com</email></address>
      </author>
      <author initials="H." surname="Frystyk" fullname="H. Frystyk">
        <organization>MIT Laboratory for Computer Science</organization>
        <address><email>frystyk@w3.org</email></address>
      </author>
      <author initials="L." surname="Masinter" fullname="L. Masinter">
        <organization>Xerox Corporation</organization>
        <address><email>masinter@parc.xerox.com</email></address>
      </author>
      <author initials="P." surname="Leach" fullname="P. Leach">
        <organization>Microsoft Corporation</organization>
        <address><email>paulle@microsoft.com</email></address>
      </author>
      <author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
        <organization>W3C</organization>
        <address><email>timbl@w3.org</email></address>
      </author>
      <date month="June" year="1999"/>
    </front>
    <seriesInfo name="RFC" value="2616"/>
  </reference>

  <reference anchor="RFC3253">
    <front>
      <title>Versioning Extensions to WebDAV (Web Distributed Authoring
        and Versioning)</title>
      <author initials="G." surname="Clemm" fullname="G. Clemm">
        <organization>Rational Software</organization>
        <address><email>geoffrey.clemm@rational.com</email></address>
      </author>
      <author initials="J." surname="Amsden" fullname="J. Amsden">
        <organization>IBM</organization>
        <address><email>jamsden@us.ibm.com</email></address>
      </author>
      <author initials="T." surname="Ellison" fullname="T. Ellison">
        <organization>IBM</organization>
        <address><email>tim_ellison@uk.ibm.com</email></address>
      </author>
      <author initials="C." surname="Kaler" fullname="C. Kaler">
        <organization>Microsoft</organization>
        <address><email>ckaler@microsoft.com</email></address>
      </author>
      <author initials="J." surname="Whitehead" fullname="J. Whitehead">
        <organization>UC Santa Cruz, Dept. of Computer Science</organization>
        <address><email>ejw@cse.ucsc.edu</email></address>
      </author>
      <date month="March" year="2002"/>
    </front>
    <seriesInfo name="RFC" value="3253"/>
  </reference>

  <reference anchor="RFC3744">
    <front>
      <title abbrev="WebDAV Access Control Protocol">Web Distributed Authoring and Versioning (WebDAV) Access Control Protocol</title>
      <author initials="G." surname="Clemm" fullname="Geoffrey Clemm">
        <organization>IBM</organization>
        <address><email>geoffrey.clemm@us.ibm.com</email></address>
      </author>
      <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke">
        <organization abbrev="greenbytes">greenbytes GmbH</organization>
        <address><email>julian.reschke@greenbytes.de</email></address>
      </author>
      <author initials="E." surname="Sedlar" fullname="Eric Sedlar">
        <organization>Oracle Corporation</organization>
        <address><email>eric.sedlar@oracle.com</email></address>
      </author>
      <author initials="J." surname="Whitehead" fullname="Jim Whitehead">
        <organization abbrev="U.C. Santa Cruz">U.C. Santa Cruz, Dept. of Computer Science</organization>
        <address><email>ejw@cse.ucsc.edu</email></address>
      </author>
      <date month="May" year="2004"/>
    </front>
    <seriesInfo name="RFC" value="3744"/>
  </reference>

  <reference anchor="XML" target="http://www.w3.org/TR/2008/REC-xml-20081126/">
    <front>
      <title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>
      <author initials="T." surname="Bray" fullname="Tim Bray">
        <organization>Textuality and Netscape</organization>
        <address><email>tbray@textuality.com</email></address>
      </author>
      <author initials="J." surname="Paoli" fullname="Jean Paoli">
        <organization>Microsoft</organization>
        <address><email>jeanpa@microsoft.com</email></address>
      </author>
      <author initials="C.M." surname="Sperberg-McQueen" fullname="C. M. Sperberg-McQueen">
        <organization>University of Illinois at Chicago and Text Encoding Initiative</organization>
        <address><email>cmsmcq@uic.edu</email></address>
      </author>
      <author initials="E." surname="Maler" fullname="Eve Maler">
        <organization>Sun Microsystems</organization>
        <address><email>eve.maler@east.sun.com</email></address>
      </author>
      <author initials="F." surname="Yergeau" fullname="Francois Yergeau">
        <address><email>francois@yergeau.com</email></address>
      </author>
      <date day="26" month="November" year="2008"/>
    </front>
    <seriesInfo name="W3C" value="REC-xml-20081126"/>
  </reference>
  
  <reference anchor="RFC4918">
    <front>
      <title>HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)</title>
      <author initials="L." surname="Dusseault" fullname="Lisa Dusseault" role="editor">
        <organization>CommerceNet</organization>
        <address><email>ldusseault@commerce.net</email></address>
      </author>
      <date month="June" year="2007"/>
    </front>
    <seriesInfo name="RFC" value="4918"/>
  </reference>
  
</references>

<references title="Informative References">

  <reference anchor="RFC3470">
    <front>
      <title abbrev="XML Within IETF Protocols">Guidelines for the Use of Extensible Markup Language (XML) within IETF Protocols</title>
      <author initials="S." surname="Hollenbeck" fullname="Scott Hollenbeck">
        <organization>VeriSign, Inc.</organization>
        <address><email>shollenbeck@verisign.com</email></address>
      </author>
      <author initials="M." surname="Rose" fullname="Marshall T. Rose">
        <organization>Dover Beach Consulting, Inc.</organization>
        <address>
          <email>mrose@dbc.mtview.ca.us</email>
        </address>
      </author>
      <author initials="L." surname="Masinter" fullname="Larry Masinter">
        <organization>Adobe Systems Incorporated</organization>
        <address><email>LMM@acm.org</email></address>
      </author>
      <date year="2003" month="January" day="23"/>
    </front>
    <seriesInfo name="BCP" value="70"/>
    <seriesInfo name="RFC" value="3470"/>
  </reference>

  <reference anchor="RFC4791">
    <front>
      <title abbrev="CalDAV">Calendaring Extensions to WebDAV (CalDAV)</title>
      <author initials="C." surname="Daboo" fullname="Cyrus Daboo">
        <organization abbrev="Apple">Apple Inc.</organization>
        <address><email>cyrus@daboo.name</email></address>
      </author>
      <author initials="B." surname="Desruisseaux" fullname="Bernard Desruisseaux">
        <organization abbrev="Oracle">Oracle Corporation</organization>
        <address><email>bernard.desruisseaux@oracle.com</email></address>
      </author>
      <author initials="L.M." surname="Dusseault" fullname="Lisa Dusseault">
        <organization abbrev="CommerceNet">CommerceNet</organization>
        <address><email>ldusseault@commerce.net</email></address>
      </author>
      <date month="March" year="2007"/>
    </front>
    <seriesInfo name="RFC" value="4791"/>
  </reference>

  <reference anchor="RFC5023">
    <front>
      <title>The Atom Publishing Protocol</title>
      <author initials="J." surname="Gregorio" fullname="J. Gregorio" role="editor">
        <organization>Google</organization>
        <address><email>joe@bitworking.org</email></address>
      </author>
      <author initials="B." surname="de hOra" fullname="B. de hOra" role="editor">
        <organization>NewBay Software</organization>
        <address><email>bill@dehora.net</email></address>
      </author>
      <date year="2007" month="October"/>
    </front>
    <seriesInfo name="RFC" value="5023"/>
  </reference>

  <reference anchor="ADDMEMBER">
  	<front>
      <title>The HTTP ADDMEMBER Method</title>
      <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke">
        <organization abbrev="greenbytes">greenbytes GmbH</organization>
        <address><email>julian.reschke@greenbytes.de</email>	</address>
      </author>
      <date month="February" year="2005"/>
    </front>
    <seriesInfo name="Work in" value="Progress"/>
  </reference>
  

  <reference anchor="CARDDAV">
    <front>
      <title>vCard Extensions to WebDAV (CardDAV)</title>
      <author initials="C." surname="Daboo" fullname="Cyrus Daboo">
        <organization>Apple Inc.</organization>
        <address><email>cyrus@daboo.name</email></address>
      </author>
      <date month="November" year="2009"/>
    </front>
    <seriesInfo name="Work in" value="Progress"/>
  </reference>
<?rfc rfcedstyle="yes"?>
</references>


  
</back>
  
</rfc>
