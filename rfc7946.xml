<?xml version='1.0' encoding='US-ASCII'?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<rfc ipr="trust200902" category="std" number="7946" submissionType="IETF" consensus="yes" xml:lang="en">
  <?rfc toc="yes"?>
  <?rfc symrefs="yes"?>
  <?rfc sortrefs="yes" ?>
  <?rfc compact="yes" ?>
  <?rfc subcompact="no" ?>
  <front>
    <title abbrev="GeoJSON">The GeoJSON Format</title>
    <author initials="H." surname="Butler" fullname="Howard Butler">
      <organization>Hobu Inc.</organization>
      <address>
        <email>howard@hobu.co</email>
      </address>
    </author>
    <author initials="M." surname="Daly" fullname="Martin Daly">
      <organization>Cadcorp</organization>
      <address>
        <email>martin.daly@cadcorp.com</email>
      </address>
    </author>
    <author initials="A." surname="Doyle" fullname="Allan Doyle">
      <address>
        <email>adoyle@intl-interfaces.com</email>
      </address>
    </author>
    <author initials="S." surname="Gillies" fullname="Sean Gillies">
      <organization>Mapbox</organization>
      <address>
        <email>sean.gillies@gmail.com</email>
        <uri>http://sgillies.net</uri>
      </address>
    </author>
    <author initials="S." surname="Hagen" fullname="Stefan Hagen">
      <address>
        <postal>
          <street>Rheinaustr. 62</street>
          <street/>
          <city>Bonn</city>
          <region/>
          <code>53225</code>
          <country>Germany</country>
        </postal>
        <email>stefan@hagen.link</email>
        <uri>http://stefan-hagen.website/</uri>
      </address>
    </author>
    <author initials="T." surname="Schaub" fullname="Tim Schaub">
      <organization>Planet Labs</organization>
      <address>
        <email>tim.schaub@gmail.com</email>
      </address>
    </author>
    <date month="August" year="2016"/>

    <area>Applications and Real-Time Area (art)</area>
    <workgroup>GeoJSON</workgroup>
    <keyword>JSON</keyword>
    <keyword>Geospatial</keyword>
    <keyword>JavaScript Object Notation</keyword>

    <abstract>
      <t>GeoJSON is a geospatial data interchange format based on JavaScript Object Notation (JSON). It defines several types of JSON objects and the manner in which they are combined to represent data about geographic features, their properties, and their spatial extents. GeoJSON uses a geographic coordinate reference system, World Geodetic System 1984, and units of decimal degrees.  </t>
    </abstract>
  </front>
  <middle>

<section title="Introduction" anchor="introduction" toc="default">
<t>GeoJSON is a format for encoding a variety of geographic data structures using JavaScript Object Notation (JSON) <xref target="RFC7159"/>. A GeoJSON object may represent a region of space (a Geometry), a spatially bounded entity (a Feature), or a list of Features (a FeatureCollection). GeoJSON supports the following geometry types: Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon, and GeometryCollection. Features in GeoJSON contain a Geometry object and additional properties, and a FeatureCollection contains a list of Features.  </t>

<t>The format is concerned with geographic data in the broadest sense; anything with qualities that are bounded in geographical space might be a Feature whether or not it is a physical structure. The concepts in GeoJSON are not new; they are derived from preexisting open geographic information system standards and have been streamlined to better suit web application development using JSON.  </t>

<t>GeoJSON comprises the seven concrete geometry types defined in the OpenGIS Simple Features Implementation Specification for SQL <xref target="SFSQL"/>: 0-dimensional Point and MultiPoint; 1-dimensional curve LineString and MultiLineString; 2-dimensional surface Polygon and MultiPolygon; and the heterogeneous GeometryCollection. GeoJSON representations of instances of these geometry types are analogous to the well-known binary (WKB) and well-known text (WKT) representations described in that same specification.  </t>

<t>GeoJSON also comprises the types Feature and FeatureCollection.  Feature objects in GeoJSON contain a Geometry object with one of the above geometry types and additional members. A FeatureCollection object contains an array of Feature objects. This structure is analogous to that of the Web Feature Service (WFS) response to GetFeatures requests specified in <xref target="WFSv1"/> or to a Keyhole Markup Language (KML) Folder of Placemarks <xref target="KMLv2.2"/>. Some implementations of the WFS specification also provide GeoJSON-formatted responses to GetFeature requests, but there is no particular service model or Feature type ontology implied in the GeoJSON format specification.  </t>

<t>Since its initial publication in 2008 <xref target="GJ2008"/>, the GeoJSON format specification has steadily grown in popularity. It is widely used in JavaScript web-mapping libraries, JSON-based document databases, and web APIs.  </t>

<section title="Requirements Language" anchor="requirements-language" toc="default"><t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.  </t>
</section>

<section title="Conventions Used in This Document" anchor="conventions-used-in-this-document" toc="default">
<t>The ordering of the members of any JSON object defined in this document MUST be considered irrelevant, as specified by <xref target="RFC7159"/>.  </t>

<t>Some examples use the combination of a JavaScript single-line comment (//) followed by an ellipsis (...) as placeholder notation for content deemed irrelevant by the authors. These placeholders must of course be deleted or otherwise replaced, before attempting to validate the corresponding JSON code example.  </t>

<t>Whitespace is used in the examples inside this document to help illustrate the data structures, but it is not required. Unquoted whitespace is not significant in JSON.  </t>
</section>

<section title="Specification of GeoJSON" anchor="specification-of-geojson" toc="default">
<t>This document supersedes the original GeoJSON format specification <xref target="GJ2008"/>.  </t>
</section>

<section title="Definitions" anchor="definitions" toc="default">
<t><list style="symbols">
<t>JavaScript Object Notation (JSON), and the terms object, member, name, value, array, number, true, false, and null, are to be interpreted as defined in <xref target="RFC7159"/>.</t>

<t>Inside this document, the term "geometry type" refers to seven case-sensitive strings: "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon", and "GeometryCollection".  </t>

<t>As another shorthand notation, the term "GeoJSON types" refers to nine case-sensitive strings: "Feature", "FeatureCollection", and the geometry types listed above.  </t>

<t>The word "Collection" in "FeatureCollection" and "GeometryCollection" does not have any significance for the semantics of array members. The "features" and "geometries" members, respectively, of these objects are standard ordered JSON arrays, not unordered sets.  </t></list></t>
</section>

<section title="Example" anchor="example" toc="default"><t>A GeoJSON FeatureCollection: </t>
<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
{
    "type": "FeatureCollection",
    "features": [{
        "type": "Feature",
        "geometry": {
            "type": "Point",
            "coordinates": [102.0, 0.5]
        },
        "properties": {
            "prop0": "value0"
        }
    }, {
        "type": "Feature",
        "geometry": {
            "type": "LineString",
            "coordinates": [
                [102.0, 0.0],
                [103.0, 1.0],
                [104.0, 0.0],
                [105.0, 1.0]
            ]
        },
        "properties": {
            "prop0": "value0",
            "prop1": 0.0
        }
    }, {
        "type": "Feature",
        "geometry": {
            "type": "Polygon",
            "coordinates": [
                [
                    [100.0, 0.0],
                    [101.0, 0.0],
                    [101.0, 1.0],
                    [100.0, 1.0],
                    [100.0, 0.0]
                ]
            ]
        },
        "properties": {
            "prop0": "value0",
            "prop1": {
                "this": "that"
            }
        }
    }]
}
</artwork></figure></section>
</section>

<section title="GeoJSON Text" anchor="geojson-text" toc="default">
<t>A GeoJSON text is a JSON text and consists of a single GeoJSON object.  </t>
</section>

<section title="GeoJSON Object" anchor="geojson-object" toc="default">
<t>A GeoJSON object represents a Geometry, Feature, or collection of Features.</t>
<t><list style="symbols"><t>A GeoJSON object is a JSON object. </t>
<t>A GeoJSON object has a member with the name "type".  The value of the member MUST be one of the GeoJSON types.</t>
<t>A GeoJSON object MAY have a "bbox" member, the value of which MUST be a bounding box array (see <xref target="bounding-box" pageno="false" format="default"/>).</t>
<t>A GeoJSON object MAY have other members (see <xref target="extending-geojson" pageno="false" format="default"/>).  </t></list></t>

<section title="Geometry Object" anchor="geometry-object" toc="default">
<t>A Geometry object represents points, curves, and surfaces in coordinate space. Every Geometry object is a GeoJSON object no matter where it occurs in a GeoJSON text.  </t>

<t><list style="symbols">
<t>The value of a Geometry object's "type" member MUST be one of the seven geometry types (see <xref target="definitions" pageno="false" format="default"/>).</t>
<t>A GeoJSON Geometry object of any type other than "GeometryCollection" has a member with the name "coordinates". The value of the "coordinates" member is an array. The structure of the elements in this array is determined by the type of geometry. GeoJSON processors MAY interpret Geometry objects with empty "coordinates" arrays as null objects.  </t></list></t>

<section title="Position" anchor="position" toc="default">
<t>A position is the fundamental geometry construct. The "coordinates" member of a Geometry object is composed of either: </t>
<t><list style="symbols">
<t>one position in the case of a Point geometry, </t>
<t>an array of positions in the case of a LineString or MultiPoint geometry, </t>
<t>an array of LineString or linear ring (see <xref target="polygon" pageno="false" format="default"/>) coordinates in the case of a Polygon or MultiLineString geometry, or</t>
<t>an array of Polygon coordinates in the case of a MultiPolygon geometry.  </t></list></t>

<t>A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.  </t>
<t>Implementations SHOULD NOT extend positions beyond three elements because the semantics of extra elements are unspecified and ambiguous. Historically, some implementations have used a fourth element to carry a linear referencing measure (sometimes denoted as "M") or a numerical timestamp, but in most situations a parser will not be able to properly interpret these values. The interpretation and meaning of additional elements is beyond the scope of this specification, and additional elements MAY be ignored by parsers.  </t>

<t>A line between two positions is a straight Cartesian line, the shortest line between those two points in the coordinate reference system (see <xref target="coordinate-reference-system" pageno="false" format="default"/>).  </t>

<t>In other words, every point on a line that does not cross the antimeridian between a point (lon0, lat0) and (lon1, lat1) can be calculated as </t>

<figure title="" suppress-title="false" align="left" alt="" width="" height="">

<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
F(lon, lat) = (lon0 + (lon1 - lon0) * t, lat0 + (lat1 - lat0) * t)
</artwork></figure>

<t>with t being a real number greater than or equal to 0 and smaller than or equal to 1. Note that this line may markedly differ from the geodesic path along the curved surface of the reference ellipsoid.</t>
<t>The same applies to the optional height element with the proviso that the direction of the height is as specified in the coordinate reference system.</t>
<t>Note that, again, this does not mean that a surface with equal height follows, for example, the curvature of a body of water.  Nor is a surface of equal height perpendicular to a plumb line.  </t>
<t>Examples of positions and geometries are provided in <xref target="geometry-examples"/>, "Geometry Examples".</t>
</section>

<section title="Point" anchor="point" toc="default"><t>For type "Point", the "coordinates" member is a single position.  </t>
</section>

<section title="MultiPoint" anchor="multipoint" toc="default"><t>For type "MultiPoint", the "coordinates" member is an array of positions.  </t>
</section>

<section title="LineString" anchor="linestring" toc="default"><t>For type "LineString", the "coordinates" member is an array of two or more positions.  </t>
</section>

<section title="MultiLineString" anchor="multilinestring" toc="default"><t>For type "MultiLineString", the "coordinates" member is an array of LineString coordinate arrays.</t>
</section>

<section title="Polygon" anchor="polygon" toc="default"><t>To specify a constraint specific to Polygons, it is useful to introduce the concept of a linear ring: </t>
<t><list style="symbols">

<t>A linear ring is a closed LineString with four or more positions.  </t><t>The first and last positions are equivalent, and they MUST contain identical values; their representation SHOULD also be identical.  </t>

<t>A linear ring is the boundary of a surface or the boundary of a hole in a surface.  </t>

<t>A linear ring MUST follow the right-hand rule with respect to the area it bounds, i.e., exterior rings are counterclockwise, and holes are clockwise.  </t></list></t>

<t>Note: the <xref target="GJ2008"/> specification did not discuss linear ring winding order. For backwards compatibility, parsers SHOULD NOT reject Polygons that do not follow the right-hand rule.  </t>
<t>Though a linear ring is not explicitly represented as a GeoJSON geometry type, it leads to a canonical formulation of the Polygon geometry type definition as follows: </t>

<t><list style="symbols">
<t>For type "Polygon", the "coordinates" member MUST be an array of linear ring coordinate arrays.  </t>
<t>For Polygons with more than one of these rings, the first MUST be the exterior ring, and any others MUST be interior rings. The exterior ring bounds the surface, and the interior rings (if present) bound holes within the surface.  </t></list></t>
</section>

<section title="MultiPolygon" anchor="multipolygon" toc="default"><t>For type "MultiPolygon", the "coordinates" member is an array of Polygon coordinate arrays.  </t>
</section>

<section title="GeometryCollection" anchor="geometry-collection" toc="default"><t>A GeoJSON object with type "GeometryCollection" is a Geometry object. A GeometryCollection has a member with the name "geometries". The value of "geometries" is an array. Each element of this array is a GeoJSON Geometry object. It is possible for this array to be empty.  </t>

<t>Unlike the other geometry types described above, a GeometryCollection can be a heterogeneous composition of smaller Geometry objects. For example, a Geometry object in the shape of a lowercase roman "i" can be composed of one point and one LineString.  </t>
<t>GeometryCollections have a different syntax from single type Geometry objects (Point, LineString, and Polygon) and homogeneously typed multipart Geometry objects (MultiPoint, MultiLineString, and MultiPolygon) but have no different semantics. Although a GeometryCollection object has no "coordinates" member, it does have coordinates: the coordinates of all its parts belong to the collection. The "geometries" member of a GeometryCollection describes the parts of this composition. Implementations SHOULD NOT apply any additional semantics to the "geometries" array.  </t>

<t>To maximize interoperability, implementations SHOULD avoid nested GeometryCollections. Furthermore, GeometryCollections composed of a single part or a number of parts of a single type SHOULD be avoided when that single part or a single object of multipart type (MultiPoint, MultiLineString, or MultiPolygon) could be used instead.  </t>
</section>

<section title="Antimeridian Cutting" anchor="antimeridian-cutting" toc="default">
<t>In representing Features that cross the antimeridian, interoperability is improved by modifying their geometry. Any geometry that crosses the antimeridian SHOULD be represented by cutting it in two such that neither part's representation crosses the antimeridian.  </t><t>For example, a line extending from 45 degrees N, 170 degrees E across the antimeridian to 45 degrees N, 170 degrees W should be cut in two and represented as a MultiLineString.  </t>

<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
{
    "type": "MultiLineString",
    "coordinates": [
        [
            [170.0, 45.0], [180.0, 45.0]
        ], [
            [-180.0, 45.0], [-170.0, 45.0]
        ]
    ]
}
</artwork></figure>

<t>A rectangle extending from 40 degrees N, 170 degrees E across the antimeridian to 50 degrees N, 170 degrees W should be cut in two and represented as a MultiPolygon.  </t>

<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
{
    "type": "MultiPolygon",
    "coordinates": [
        [
            [
                [180.0, 40.0], [180.0, 50.0], [170.0, 50.0],
                [170.0, 40.0], [180.0, 40.0]
            ]
        ],
        [
            [
                [-170.0, 40.0], [-170.0, 50.0], [-180.0, 50.0],
                [-180.0, 40.0], [-170.0, 40.0]
            ]
        ]
    ]
}
</artwork></figure>
</section>

<section title="Uncertainty and Precision" anchor="uncertainty-and-precision" toc="default">

<t>As in <xref target="RFC5870"/>, the number of digits of the values in coordinate positions MUST NOT be interpreted as an indication to the level of uncertainty.</t></section>
</section>

<section title="Feature Object" anchor="feature-object" toc="default">
<t>A Feature object represents a spatially bounded thing. Every Feature object is a GeoJSON object no matter where it occurs in a GeoJSON text.  </t>
<t><list style="symbols">
<t>A Feature object has a "type" member with the value "Feature".  </t>
<t>A Feature object has a member with the name "geometry". The value of the geometry member SHALL be either a Geometry object as defined above or, in the case that the Feature is unlocated, a JSON null value.  </t>
<t>A Feature object has a member with the name "properties". The value of the properties member is an object (any JSON object or a JSON null value).  </t>
<t>If a Feature has a commonly used identifier, that identifier SHOULD be included as a member of the Feature object with the name "id", and the value of this member is either a JSON string or number.  </t></list></t>
</section>

<section title="FeatureCollection Object" anchor="feature-collection-object" toc="default">
<t>A GeoJSON object with the type "FeatureCollection" is a FeatureCollection object. A FeatureCollection object has a member with the name "features". The value of "features" is a JSON array. Each element of the array is a Feature object as defined above. It is possible for this array to be empty.  </t></section>
</section>

<section title="Coordinate Reference System" anchor="coordinate-reference-system" toc="default">
<t>The coordinate reference system for all GeoJSON coordinates is a geographic coordinate reference system, using the World Geodetic System 1984 (WGS 84) <xref target="WGS84"/> datum, with longitude and latitude units of decimal degrees.  This is equivalent to the coordinate reference system identified by the Open Geospatial Consortium (OGC) URN urn:ogc:def:crs:OGC::CRS84. An OPTIONAL third-position element SHALL be the height in meters above or below the WGS 84 reference ellipsoid. In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level.</t>

<t>Note: the use of alternative coordinate reference systems was specified in <xref target="GJ2008"/>, but it has been removed from this version of the specification because the use of different coordinate reference systems &#8212; especially in the manner specified in <xref target="GJ2008"/> &#8212; has proven to have interoperability issues. In general, GeoJSON processing software is not expected to have access to coordinate reference system databases or to have network access to coordinate reference system transformation parameters. However, where all involved parties have a prior arrangement, alternative coordinate reference systems can be used without risk of data being misinterpreted.</t>
</section>

<section title="Bounding Box" anchor="bounding-box" toc="default">
<t>A GeoJSON object MAY have a member named "bbox" to include information on the coordinate range for its Geometries, Features, or FeatureCollections. The value of the bbox member MUST be an array of length 2*n where n is the number of dimensions represented in the contained geometries, with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.</t>
<t>The "bbox" values define shapes with edges that follow lines of constant longitude, latitude, and elevation.</t>
<t>Example of a 2D bbox member on a Feature: </t>

<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
{
    "type": "Feature",
    "bbox": [-10.0, -10.0, 10.0, 10.0],
    "geometry": {
        "type": "Polygon",
        "coordinates": [
            [
                [-10.0, -10.0],
                [10.0, -10.0],
                [10.0, 10.0],
                [-10.0, -10.0]
            ]
        ]
    }
    //...
}
</artwork></figure>

<t>Example of a 2D bbox member on a FeatureCollection: </t>
<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
{
    "type": "FeatureCollection",
    "bbox": [100.0, 0.0, 105.0, 1.0],
    "features": [
    //...
    ]
}
</artwork></figure>

<t>Example of a 3D bbox member with a depth of 100 meters: </t>
<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
{
    "type": "FeatureCollection",
    "bbox": [100.0, 0.0, -100.0, 105.0, 1.0, 0.0],
    "features": [
    //...
    ]
}
</artwork></figure>

<section title="The Connecting Lines" anchor="the-connecting-lines" toc="default">
<t>The four lines of the bounding box are defined fully within the coordinate reference system; that is, for a box bounded by the values "west", "south", "east", and "north", every point on the northernmost line can be expressed as </t>

<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
(lon, lat) = (west + (east - west) * t, north)
</artwork></figure><t>with 0 &lt;= t &lt;= 1.  </t>
</section>

<section title="The Antimeridian" anchor="the-antimeridian" toc="default">
<t>Consider a set of point Features within the Fiji archipelago, straddling the antimeridian between 16 degrees S and 20 degrees S.  The southwest corner of the box containing these Features is at 20 degrees S and 177 degrees E, and the northwest corner is at 16 degrees S and 178 degrees W. The antimeridian-spanning GeoJSON bounding box for this FeatureCollection is </t>

<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
"bbox": [177.0, -20.0, -178.0, -16.0]
</artwork></figure>

<t>and covers 5 degrees of longitude.  </t>
<t>The complementary bounding box for the same latitude band, not crossing the antimeridian, is </t>

<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
"bbox": [-178.0, -20.0, 177.0, -16.0]
</artwork></figure>

<t>and covers 355 degrees of longitude.  </t><t>The latitude of the northeast corner is always greater than the latitude of the southwest corner, but bounding boxes that cross the antimeridian have a northeast corner longitude that is less than the longitude of the southwest corner.  </t>
</section>

<section title="The Poles" anchor="the-poles" toc="default"><t>A bounding box that contains the North Pole extends from a southwest corner of "minlat" degrees N, 180 degrees W to a northeast corner of 90 degrees N, 180 degrees E. Viewed on a globe, this bounding box approximates a spherical cap bounded by the "minlat" circle of latitude.  </t>

<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
"bbox": [-180.0, minlat, 180.0, 90.0]
</artwork></figure>

<t>A bounding box that contains the South Pole extends from a southwest corner of 90 degrees S, 180 degrees W to a northeast corner of "maxlat" degrees S, 180 degrees E.  </t>

<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
"bbox": [-180.0, -90.0, 180.0, maxlat]
</artwork></figure>

<t>A bounding box that just touches the North Pole and forms a slice of an approximate spherical cap when viewed on a globe extends from a southwest corner of "minlat" degrees N and "westlon" degrees E to a northeast corner of 90 degrees N and "eastlon" degrees E.  </t>

<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
"bbox": [westlon, minlat, eastlon, 90.0]
</artwork></figure>

<t>Similarly, a bounding box that just touches the South Pole and forms a slice of an approximate spherical cap when viewed on a globe has the following representation in GeoJSON.  </t>

<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
"bbox": [westlon, -90.0, eastlon, maxlat]
</artwork></figure>

<t>Implementers MUST NOT use latitude values greater than 90 or less than -90 to imply an extent that is not a spherical cap.  </t></section>
</section>

<section title="Extending GeoJSON" anchor="extending-geojson" toc="default">

<section title="Foreign Members" anchor="foreign-members" toc="default">
<t>Members not described in this specification ("foreign members") MAY be used in a GeoJSON document. Note that support for foreign members can vary across implementations, and no normative processing model for foreign members is defined.  Accordingly, implementations that rely too heavily on the use of foreign members might experience reduced interoperability with other implementations.  </t>
<t>For example, in the (abridged) Feature object shown below </t>

<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
{
    "type": "Feature",
    "id": "f1",
    "geometry": {...},
    "properties": {...},
    "title": "Example Feature"
}
</artwork></figure>

<t>the name/value pair of "title": "Example Feature" is a foreign member. When the value of a foreign member is an object, all the descendant members of that object are themselves foreign members.  </t>
<t>GeoJSON semantics do not apply to foreign members and their descendants, regardless of their names and values. For example, in the (abridged) Feature object below </t>

<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
{
    "type": "Feature",
    "id": "f2",
    "geometry": {...},
    "properties": {...},
    "centerline": {
        "type": "LineString",
        "coordinates": [
            [-170, 10],
            [170, 11]
        ]
    }
}
</artwork></figure>

<t>the "centerline" member is not a GeoJSON Geometry object.  </t></section>
</section>

<section title="GeoJSON Types Are Not Extensible" anchor="geojson-types-are-not-extensible" toc="default">
<t>Implementations MUST NOT extend the fixed set of GeoJSON types: FeatureCollection, Feature, Point, LineString, MultiPoint, Polygon, MultiLineString, MultiPolygon, and GeometryCollection.  </t>

<section title="Semantics of GeoJSON Members and Types Are Not Changeable" anchor="semantics-of-geojson-members-and-types-are-not-changeable" toc="default">
<t>Implementations MUST NOT change the semantics of GeoJSON members and types.  </t><t>The GeoJSON "coordinates" and "geometries" members define Geometry objects. FeatureCollection and Feature objects, respectively, MUST NOT contain a "coordinates" or "geometries" member.  </t>
<t>The GeoJSON "geometry" and "properties" members define a Feature object. FeatureCollection and Geometry objects, respectively, MUST NOT contain a "geometry" or "properties" member.  </t><t>The GeoJSON "features" member defines a FeatureCollection object. Feature and Geometry objects, respectively, MUST NOT contain a "features" member.  </t></section>
</section>

<section title="Versioning" anchor="versioning" toc="default">
<t>The GeoJSON format can be extended as defined here, but no explicit versioning scheme is defined. A specification that alters the semantics of GeoJSON members or otherwise modifies the format does not create a new version of this format; instead, it defines an entirely new format that MUST NOT be identified as GeoJSON.  </t>
</section>

<section title="Mapping 'geo' URIs" anchor="mapping-geo-uris" toc="default">
<t>'geo' URIs <xref target="RFC5870"/> identify geographic locations and precise (not uncertain) locations can be mapped to GeoJSON Geometry objects.  </t>
<t>For this section, as in <xref target="RFC5870"/>, "lat", "lon", "alt", and "unc" are placeholders for 'geo' URI latitude, longitude, altitude, and uncertainty values, respectively.  </t>
<t>A 'geo' URI with two coordinates and an uncertainty ('u') parameter that is absent or zero, and a GeoJSON Point geometry may be mapped to each other. A GeoJSON Point is always converted to a 'geo' URI that has no uncertainty parameter.  </t>
<t>'geo' URI: </t>
<t>geo:lat,lon </t><t>GeoJSON: </t><t>{"type": "Point", "coordinates": [lon, lat]} </t>
<t>The mapping between 'geo' URIs and GeoJSON Points that specify elevation is shown below.  </t>
<t>'geo' URI: </t>
<t>geo:lat,lon,alt </t><t>GeoJSON: </t>
<t>{"type": "Point", "coordinates": [lon, lat, alt]} </t>
<t>GeoJSON has no concept of uncertainty; imprecise or uncertain 'geo' URIs thus cannot be mapped to GeoJSON geometries.  </t>
</section> 

<section title="Security Considerations" anchor="security-considerations" toc="default">
<t>GeoJSON shares security issues common to all JSON content types. See <xref target="RFC7159"/>, Section 12 for additional information. GeoJSON does not provide executable content.  </t>
<t>GeoJSON does not provide privacy or integrity services. If sensitive data requires privacy or integrity protection, those must be provided by the transport &#8212; for example, Transport Layer Security (TLS) or HTTPS. There will be cases in which stored data need protection, which is out of scope for this document.  </t>
<t>As with other geographic data formats, e.g., <xref target="KMLv2.2"/>, providing details about the locations of sensitive persons, animals, habitats, and facilities can expose them to unauthorized tracking or injury.  Data providers should recognize the risk of inadvertently identifying individuals if locations in anonymized datasets are not adequately skewed or not sufficiently fuzzed <xref target="Sweeney"/> and recognize that the effectiveness of location obscuration is limited by a number of factors and is unlikely to be an effective defense against a determined attack <xref target="RFC6772"/>.  </t>
</section>

<section title="Interoperability Considerations" anchor="interoperability-considerations" toc="default">
<section title="I-JSON" anchor="i-json" toc="default">
<t>GeoJSON texts should follow the constraints of Internet JSON (I-JSON) <xref target="RFC7493"/> for maximum interoperability.  </t>
</section>

<section title="Coordinate Precision" anchor="coordinate-precision" toc="default">
<t>The size of a GeoJSON text in bytes is a major interoperability consideration, and precision of coordinate values has a large impact on the size of texts. A GeoJSON text containing many detailed Polygons can be inflated almost by a factor of two by increasing coordinate precision from 6 to 15 decimal places. For geographic coordinates with units of degrees, 6 decimal places (a default common in, e.g., sprintf) amounts to about 10 centimeters, a precision well within that of current GPS systems.  Implementations should consider the cost of using a greater precision than necessary.  </t>

<t>Furthermore, the WGS 84 <xref target="WGS84"/> datum is a relatively coarse approximation of the geoid, with the height varying by up to 5 m (but generally between 2 and 3 meters) higher or lower relative to a surface parallel to Earth's mean sea level.  </t></section>
</section> 

<section title="IANA Considerations" toc="default">
<t>The media type for GeoJSON text is &quot;application/geo+json&quot; and is registered in the "Media Types" registry described in <xref target="RFC6838"/>.  The entry for &quot;application/vnd.geo+json&quot; in the same registry should have its status changed to be "OBSOLETED" with a pointer to the media type &quot;application/geo+json&quot; and a reference added to this RFC. 
 <list style="hanging">
<t hangText="Type name:">application</t>
<t hangText="Subtype name:">geo+json</t><t hangText="Required parameters:">n/a</t>
<t hangText="Optional parameters:">n/a</t>
<t hangText="Encoding considerations:">binary</t>
<t hangText="Security considerations:">See <xref target="security-considerations" pageno="false" format="default"/> above</t>
<t hangText="Interoperability considerations:">See <xref target="interoperability-considerations" pageno="false" format="default"/> above</t>
<t hangText="Published specification:">[[RFC7946]]</t>

<t hangText="Applications that use this media type:">No known applications currently use this media type. This media type is intended for GeoJSON applications currently using the "application/vnd.geo+json" or "application/json" media types, of which there are several categories: web mapping, geospatial databases, geographic data processing APIs, data analysis and storage services, and data dissemination.</t>

<t hangText="Additional information:">
<list style="hanging"><t hangText="Magic number(s):">n/a</t>
<t hangText="File extension(s):">.json, .geojson</t>
<t hangText="Macintosh file type code:">n/a</t><t hangText="Object Identifiers:">n/a</t>
<t hangText="Windows clipboard name:">GeoJSON</t>
<t hangText="Macintosh uniform type identifier:">public.geojson conforms to public.json </t></list> </t>
<t hangText="Person to contact for further information:">Sean Gillies (sean.gillies@gmail.com) </t><t hangText="Intended usage:">COMMON</t><t hangText="Restrictions on usage:">none</t>
<t hangText="Restrictions on usage:">none</t>
<t hangText="Author:">see "Authors' Addresses" section of [[RFC7946]].</t>
<t hangText="Change controller:">Internet Engineering Task Force</t></list> </t>
</section>
</middle>
  <back>

<references title="Normative References">

<?rfc include="reference.RFC.2119" ?>
<?rfc include="reference.RFC.6838" ?>
<?rfc include="reference.RFC.7159" ?>
<?rfc include="reference.RFC.7493" ?>


<reference anchor="WGS84"><front>
<title>Department of Defense World Geodetic System 1984: Its Definition and Relationships with Local Geodetic Systems</title>
<author><organization abbrev="NIMA">National Imagery and Mapping Agency</organization></author>
<date year="1984"/>
</front>
<seriesInfo name="Third" value="Edition"/>
</reference>
</references>

<references title="Informative References">

<?rfc include="reference.RFC.5870" ?>
<?rfc include="reference.RFC.6772" ?>
<?rfc include="reference.RFC.7464" ?>

<reference anchor="GJ2008"><front>
<title>The GeoJSON Format Specification</title>
<author initials="H." surname="Butler" fullname="Howard Butler"/><author initials="M." surname="Daly" fullname="Martin Daly"/>
<author initials="A." surname="Doyle" fullname="Allan Doyle"/><author initials="S." surname="Gillies" fullname="Sean Gillies"/>
<author initials="T." surname="Schaub" fullname="Tim Schaub"/><author initials="C." surname="Schmidt" fullname="Christopher Schmidt"/>
<date month="June" year="2008"/>
</front>
</reference>

<reference anchor="SFSQL"><front>
<title>OpenGIS Simple Features Specification For SQL Revision 1.1</title>
<author><organization abbrev="OGC">OpenGIS Consortium, Inc.  </organization></author>
<date month="May" year="1999"/>
</front>
<seriesInfo name="OGC" value="99-049"/>
</reference>

<reference anchor="WFSv1"><front>
<title>Web Feature Service Implementation Specification</title>
<author initials="P. A." surname="Vretanos" fullname="Panagiotis A. Vretanos">
<organization abbrev="OGC">OpenGIS Consortium, Inc.</organization></author>
<date month="May" year="2005"/>
</front>
<seriesInfo name="OGC 04-094," value="Version 1.1.0"/>
</reference>

<reference anchor="KMLv2.2"><front>
<title>OGC KML</title>
<author initials="T." surname="Wilson">
<organization abbrev="OGC">OpenGIS Consortium, Inc.</organization></author>
<date month="April" year="2008"/>
</front>
<seriesInfo name="OGC 07-147r2," value="Version 2.2.0"/>
</reference>

<reference anchor="Sweeney"><front>
<title>k-anonymity: a model for protecting privacy</title>
<author initials="L." surname="Sweeney"/>
<date year="2002"/>
</front>
<seriesInfo name="International Journal on Uncertainty, Fuzziness and Knowledge-based Systems" value="10 (5), 2002; 557-570"/>
<seriesInfo name="DOI" value="10.1142/S0218488502001648"/>
</reference>
</references>


<section title="Geometry Examples" anchor="geometry-examples" toc="default">
<t>Each of the examples below represents a valid and complete GeoJSON object.</t>

<section title="Points" anchor="points" toc="default">
<t>Point coordinates are in x, y order (easting, northing for projected coordinates, longitude, and latitude for geographic coordinates): </t>

<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
  {
      "type": "Point",
      "coordinates": [100.0, 0.0]
  }
</artwork></figure>
</section>

<section title="LineStrings" anchor="linestrings" toc="default">
<t>Coordinates of LineString are an array of positions (see <xref target="position" pageno="false" format="default"/>): </t>

<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
  {
      "type": "LineString",
      "coordinates": [
          [100.0, 0.0],
          [101.0, 1.0]
      ]
  }
</artwork></figure>
</section>

<section title="Polygons" anchor="polygons" toc="default">
<t>Coordinates of a Polygon are an array of linear ring (see <xref target="polygon"/>) coordinate arrays. The first element in the array represents the exterior ring. Any subsequent elements represent interior rings (or holes).  </t>
<t>No holes: </t>
<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
  {
      "type": "Polygon",
      "coordinates": [
          [
              [100.0, 0.0],
              [101.0, 0.0],
              [101.0, 1.0],
              [100.0, 1.0],
              [100.0, 0.0]
          ]
      ]
  }
</artwork></figure><t>With holes: </t>
<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
  {
      "type": "Polygon",
      "coordinates": [
          [
              [100.0, 0.0],
              [101.0, 0.0],
              [101.0, 1.0],
              [100.0, 1.0],
              [100.0, 0.0]
          ],
          [
              [100.8, 0.8],
              [100.8, 0.2],
              [100.2, 0.2],
              [100.2, 0.8],
              [100.8, 0.8]
          ]
      ]
  }
</artwork></figure></section>

<section title="MultiPoints" anchor="multipoints" toc="default"><t>Coordinates of a MultiPoint are an array of positions: </t>
<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
  {
      "type": "MultiPoint",
      "coordinates": [
          [100.0, 0.0],
          [101.0, 1.0]
      ]
  }
</artwork></figure>
</section>

<section title="MultiLineStrings" anchor="multilinestrings" toc="default"><t>Coordinates of a MultiLineString are an array of LineString coordinate arrays: </t>
<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
  {
      "type": "MultiLineString",
      "coordinates": [
          [
              [100.0, 0.0],
              [101.0, 1.0]
          ],
          [
              [102.0, 2.0],
              [103.0, 3.0]
          ]
      ]
  }
</artwork></figure>
</section>

<section title="MultiPolygons" anchor="multipolygons" toc="default"><t>Coordinates of a MultiPolygon are an array of Polygon coordinate arrays: </t>
<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
  {
      "type": "MultiPolygon",
      "coordinates": [
          [
              [
                  [102.0, 2.0],
                  [103.0, 2.0],
                  [103.0, 3.0],
                  [102.0, 3.0],
                  [102.0, 2.0]
              ]
          ],
          [
              [
                  [100.0, 0.0],
                  [101.0, 0.0],
                  [101.0, 1.0],
                  [100.0, 1.0],
                  [100.0, 0.0]
              ],
              [
                  [100.2, 0.2],
                  [100.2, 0.8],
                  [100.8, 0.8],
                  [100.8, 0.2],
                  [100.2, 0.2]
              ]
          ]
      ]
  }
</artwork></figure>
</section>

<section title="GeometryCollections" anchor="geometrycollections" toc="default"><t>Each element in the "geometries" array of a GeometryCollection is one of the Geometry objects described above: </t>
<figure title="" suppress-title="false" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
  {
      "type": "GeometryCollection",
      "geometries": [{
          "type": "Point",
          "coordinates": [100.0, 0.0]
      }, {
          "type": "LineString",
          "coordinates": [
              [101.0, 0.0],
              [102.0, 1.0]
          ]
      }]
  }
</artwork></figure></section>
</section>

<section title="Changes from the Pre-IETF GeoJSON Format Specification" anchor="changes-from-pre-ietf-specification" toc="default">
<t>This appendix briefly summarizes non-editorial changes from the 2008 specification <xref target="GJ2008"/>.  </t>

<section title="Normative Changes" anchor="normative-changes" toc="default">
<t><list style="symbols">
<t>Specification of coordinate reference systems has been removed, i.e., the "crs" member of <xref target="GJ2008"/> is no longer used.  </t>
<t>In the absence of elevation values, applications sensitive to height or depth SHOULD interpret positions as being at local ground or sea level (see <xref target="coordinate-reference-system" pageno="false" format="default"/>).  </t>
<t>Implementations SHOULD NOT extend position arrays beyond 3 elements (see <xref target="position" pageno="false" format="default"/>).  </t>
<t>A line between two positions is a straight Cartesian line (see <xref target="position" pageno="false" format="default"/>).  </t>
<t>Polygon rings MUST follow the right-hand rule for orientation (counterclockwise external rings, clockwise internal rings).  </t>
<t>The values of a "bbox" array are "[west, south, east, north]", not "[minx, miny, maxx, maxy]" (see <xref target="bounding-box" pageno="false" format="default"/>).  </t>
<t>A Feature object's "id" member is a string or number (see <xref target="feature-object" pageno="false" format="default"/>).  </t>
<t>Extensions MAY be used, but MUST NOT change the semantics of GeoJSON members and types (see <xref target="extending-geojson" pageno="false" format="default"/>).  </t>
<t>GeoJSON objects MUST NOT contain the defining members of other types (see <xref target="semantics-of-geojson-members-and-types-are-not-changeable" pageno="false" format="default"/>).  </t>
<t>The media type for GeoJSON is &quot;application/geo+json&quot;.  </t></list></t>
</section>

<section title="Informative Changes" anchor="informative-changes" toc="default">
<t><list style="symbols">
<t>The definition of a GeoJSON text has been added.  </t>
<t>Rules for mapping 'geo' URIs have been added.  </t>
<t>A recommendation of the I-JSON <xref target="RFC7493"/> constraints has been added.  </t>
<t>Implementers are cautioned about the effect of excessive coordinate precision on interoperability.  </t>
<t>Interoperability concerns of GeometryCollections are noted.  These objects should be used sparingly (see <xref target="geometry-collection" pageno="false" format="default"/>).  </t></list></t></section>
</section>

<section title="GeoJSON Text Sequences" anchor="geojson-text-sequences" toc="default">
<t>All GeoJSON objects defined in this specification -- FeatureCollection, Feature, and Geometry -- consist of exactly one JSON object. However, there may be circumstances in which applications need to represent sets or sequences of these objects (over and above the grouping of Feature objects in a FeatureCollection), e.g., in order to efficiently "stream" large numbers of Feature objects. The definition of such sets or sequences is outside the scope of this specification.  </t>

<t>If such a representation is needed, a new media type is required that has the ability to represent these sets or sequences. When defining such a media type, it may be useful to base it on "JavaScript Object Notation (JSON) Text Sequences" <xref target="RFC7464"/>, leaving the foundations of how to represent multiple JSON objects to that specification, and only defining how it applies to GeoJSON objects.  </t>
</section>

<section title="Acknowledgements" toc="default" numbered="no">
<t>The GeoJSON format is the product of discussion on the GeoJSON mailing list, &lt;http://lists.geojson.org/listinfo.cgi/geojson&nbhy;geojson.org&gt;, before October 2015 and in the IETF's GeoJSON WG after October 2015.</t>

<t>Material in this document was adapted with changes from &lt;http://geojson.org/geojson&nbhy;spec.html&gt; <xref target="GJ2008"/>, which is licensed under &lt;http://creativecommons.org/licenses/by/3.0/us/&gt;.</t>

  </section>
 </back>
</rfc>
