<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd"
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="no"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes" ?>
<?rfc rfcedstyle="yes" ?>

<rfc number="5895" ipr="trust200902" category="info" submissionType="independent">

<!-- [rfced] Please note that after you have approved the document,
post-xml2rfc changes will be made to update the header and
boilerplate as described in RFC 5741.
-->


<front>

<title abbrev="IDNA Mapping">Mapping Characters for
Internationalized Domain Names in Applications (IDNA) 2008</title>

<author initials="P." surname="Resnick" fullname="Peter W. Resnick">
<organization>Qualcomm Incorporated</organization>
<address>
<postal>
<street>5775 Morehouse Drive</street>
<city>San Diego</city>
<region>CA</region>
<code>92121-1714</code>
<country>US</country>
</postal>
<phone>+1 858 651 4478</phone>
<email>presnick@qualcomm.com</email>
<uri>http://www.qualcomm.com/~presnick/</uri>
</address>
</author>

<author initials='P.' surname="Hoffman" fullname='Paul Hoffman'>
<organization>VPN Consortium</organization>
<address>
<postal>
<street>127 Segre Place</street>
<city>Santa Cruz</city>
<region>CA</region>
<code>95060</code>
<country>US</country>
</postal>
<phone>1-831-426-9827</phone>
<email>paul.hoffman@vpnc.org</email>
</address>
</author>

<date month="September" year="2010" />

<keyword>user input</keyword>
<keyword>character mapping</keyword>
<keyword>locale</keyword>
<keyword>user interface</keyword>
<keyword>Unicode</keyword>

<abstract>

<t>In the original version of the Internationalized Domain Names in
Applications (IDNA) protocol, any Unicode code points taken from user input
were mapped into a set of Unicode code points that "made sense", and then
encoded and passed to the domain name system (DNS). The IDNA2008 protocol
(described in RFCs 5890, 5891, 5892, and 5893) presumes that the input to the
protocol comes from a set of "permitted" code points, which it then encodes and
passes to the DNS, but does not specify what to do with the result of user
input. This document describes the actions that can be taken by an
implementation between receiving user input and passing permitted code points to the new
IDNA protocol.
</t> 

</abstract>

</front>

<middle>

<section anchor="intro" title="Introduction">

<t>This document describes the operations that can be applied to user input in
order to get it into a form that is acceptable by the <xref
target="IDNA2008protocol">Internationalized Domain Names in Applications (IDNA)
protocol</xref>. It includes a general implementation procedure for
mapping.
</t> 

<t>It should be noted that this document does not specify the behavior of a
protocol that appears "on the wire". It describes an operation that is to be
applied to user input in order to prepare that user input for use in an "on the
network" protocol. As unusual as this may be for a document concerning Internet
protocols, it is necessary to describe this operation for implementors who may
have designed around the original IDNA protocol (herein referred to as
IDNA2003), which conflates this user-input operation into the protocol.
</t> 

<t>It is very important to note that there are many potential valid mappings of
characters from user input. The mapping described in this document is the basis
for other mappings, and is not likely to be useful without modification. Any
useful mapping will have features designed to reduce the surprise for users and
is likely to be slightly (or sometimes radically) different depending on the
locale of the user, the type of input being used (such as typing,
copy-and-paste, voice, and so on), the type of application used, etc. Although
most common mappings will probably produce similar results for the same input,
there will be subtle differences between applications.</t> 

<section title="The Dividing Line between User Interface and Protocol">

<t>The user interface to applications is much more complicated than most
network implementers think. When we say "the user enters an internationalized
domain name in the application", we are talking about a very complex process
that encompasses everything from the user formulating the name and deciding
which symbols to use to express that name, to the user entering the symbols
into the computer using some input method (be it a keyboard, a stylus, or even
a voice recognition program), to the computer interpreting that input (be it
keyboard scan codes, a graphical representation, or digitized sounds) into some
representation of those symbols, through finally normalizing those symbols into a
particular character repertoire in an encoding recognizable to IDNA processes
and the domain name system.</t> 

<t>Considerations for a user interface for internationalized domain names involves
taking into account culture, context, and locale for any given user. A simple
and well-known example is the lowercasing of the letter LATIN CAPITAL
LETTER I (U+0049) when it is used in the Turkish and other languages.  A
capital "I" in Turkish is properly lowercased to a LATIN SMALL LETTER DOTLESS I 
(U+0131), not to a LATIN SMALL LETTER I (U+0069). This lowercasing is clearly
dependent on the locale of the system and/or the locale of the user. Using a
single context-free mapping without considering the user interface properties
has the potential of doing exactly the wrong thing for the user.
</t> 

<t>The original version of IDNA conflated user interface processing and
protocol. It took whatever characters the user produced in whatever encoding
the application used, assumed some conversion to Unicode code points, and then
without regard to context, locale, or anything about the user's intentions,
mapped them into a particular set of other characters, and then re-encoded them
in Punycode, in order to have the entire operation be contained within the
protocol. Ignoring context, locale, and user preference in the IDNA protocol
made life significantly less complicated for the application developer, but at
the expense of violating the principle of "least user surprise" for consumers
and producers of domain names.</t> 

<t>In IDNA2008, the dividing line between "user interface" and "protocol" is
clear. The IDNA2008 specification defines the protocol part of IDNA: it
explicitly does not deal with the user interface. Mappings such as the one
described in this document explicitly deal with the user interface and not the
protocol. That is, a mapping is only to be applied before a string of
characters is treated as a domain name (in the "user interface") and is never
to be applied during domain name processing (in the "protocol").</t> 

</section>

<section title="The Design of This Mapping">

<t>The user interface mapping in this document is a set of expansions to IDNA2008 that are meant to be sensible and friendly and mostly obvious to people throughout the world when using typical applications with domain names that are entered by hand. It is also designed to let applications be mostly backwards compatible with IDNA2003. By definition, it cannot meet all of those design goals for all people, and in fact is known to fail on some of those goals for quite large populations of people.</t>

<t>A good mapping in the real world might use the "sensible and friendly and
mostly obvious" design goal but come up with a different algorithm. Many
algorithms will have results that are close to what is described here, but will
differ in assumptions about the users' way of thinking or typing. Having said
that, it is likely that some mappings will be significantly different. For
example, a mapping might apply to a spoken user interface instead of a typed
one. Another example is that a mapping might be different for users that are
typing than for users that are copying-and-pasting from different applications. Yet another example is that a user interface that allows typed input that is transliterated from Latin characters could have very different mappings than one that applies to typing in other character sets; this would be typical in a Pinyin input method for Chinese characters.</t>

</section>

</section>

<section anchor="procedure" title="The General Procedure">

<t>This section defines a general algorithm that applications ought to
implement in order to produce Unicode code points that will be valid under the
IDNA protocol. An application might implement the full mapping as described
below, or it can choose a different mapping. This mapping is very general and
was designed to be acceptable to the widest user community, but as stated
above, it does not take into account any particular context, culture, or
locale.</t> 

<t>The general algorithm that an application (or the input method provided by an operating system) ought to use is relatively straightforward:</t>

<t><list style="numbers">

<t>Uppercase characters are mapped to their lowercase equivalents by using the algorithm for mapping case in Unicode characters. This step was chosen because the output will behave more like ASCII host names behave.</t>

<t>Fullwidth and halfwidth characters (those defined with Decomposition Types
&lt;wide&gt; and &lt;narrow&gt;) are mapped to their decomposition mappings as
shown in the Unicode character database. This step was chosen because many
input mechanisms, particularly in Asia, do not allow you to easily enter
characters in the form used by IDNA2008. Even if they do allow the correct
character form, the user might not know which form they are entering.</t> 

<t>All characters are mapped using Unicode Normalization Form C (NFC). This
step was chosen because it maps combinations of combining characters into
canonical composed form. As with the fullwidth/halfwidth mapping, users are
not generally aware of the particular form of characters that they are
entering, and IDNA2008 requires that only the canonical composed forms from NFC
be used.</t> 

<t><xref target="IDNA2008protocol" /> is specified such that the protocol acts
on the individual labels of the domain name. If an implementation of this
mapping is also performing the step of separation of the parts of a domain name
into labels by using the FULL STOP character (U+002E), the IDEOGRAPHIC FULL
STOP character (U+3002) can be mapped to the FULL STOP before label separation
occurs. There are other characters that are used as "full stops" that one could
consider mapping as label separators, but their use as such has not been
investigated thoroughly. This step was chosen because some input mechanisms do
not allow the user to easily enter proper label separators. Only the
IDEOGRAPHIC FULL STOP character (U+3002) is added in this mapping because the
authors have not fully investigated the applicability of other characters and
the environments where they should and should not be considered domain name
label separators.</t> 

</list></t>

<t>Note that the steps above are ordered.</t>

<t>Definitions for the rules in this algorithm can be found in <xref target="Unicode52" />. Specifically:</t>

<t><list style="symbols">

<t>Unicode Normalization Form C can be found in Annex #15 of <xref
target="Unicode-UAX15" />.
</t> 

<t>In order to map uppercase characters to their lowercase equivalents (defined
in Section 3.13 of <xref target="Unicode52" />), first map characters to the
"Lowercase_Mapping" property (the "&lt;lower&gt;" entry in the second column)
in <eref target="http://www.unicode.org/Public/UNIDATA/SpecialCasing.txt"/>, if
any. Then, map characters to the "Simple_Lowercase_Mapping" property (the
fourteenth column) in <eref
target="http://www.unicode.org/Public/UNIDATA/UnicodeData.txt"/>, if any.</t> 

<t>In order to map fullwidth and halfwidth characters to their decomposition mappings, map any character whose "Decomposition_Type" (contained in the first part of the sixth column) in <eref target="http://www.unicode.org/Public/UNIDATA/UnicodeData.txt"/> is either "&lt;wide&gt;" or "&lt;narrow&gt;" to the "Decomposition_Mapping" of that character (contained in the second part of the sixth column) in <eref target="http://www.unicode.org/Public/UNIDATA/UnicodeData.txt"/>.</t>

<t>The Unicode Character Database <xref target="TR44"/>
has useful descriptions of the contents of these files.</t>

</list></t>

<t>If the mappings in this document are applied to versions of Unicode later than Unicode 5.2, the later versions of the Unicode Standard should be consulted.</t>

<t>These form a minimal set of mappings that an application should strongly consider doing. Of course, there are many others that might be done.</t>

</section>

<section title="Implementing This Mapping">

<t>If you are implementing a mapping for an application or operating system by
using exactly the four steps in Section 2, the authors of this document have a
request: please don't. We mean it. Section 2 does not describe a universal
mapping algorithm because, as we said, there is no universally-applicable
mapping algorithm.</t> 

<t>If you read the material in Section 2 without reading Section 1, go back and
carefully read all of Section 1; in many ways, Section 1 is more important than
Section 2. Further, you can probably think of user interface considerations
that we did not list in Section 1. If you did read Section 1 but somehow
decided that the algorithm in Section 2 is completely correct for the intended
users of your application or operating system, you are probably not thinking
hard enough about your intended users. </t> 

</section>

<section anchor="Security" title="Security Considerations">

<t>This document suggests creating mappings that might cause confusion for some
users while alleviating confusion in other users. Such confusion is not covered
in any depth in this document (nor in the other IDNA-related documents).</t> 

</section>

<section anchor="Acknowledgements" title="Acknowledgements">

<t>This document is the product of many contributions from numerous people in the IETF.</t>

</section>

</middle>

<back>

<references title="Normative References">

<reference anchor='IDNA2008protocol'>
<front>
<title>Internationalized Domain Names in Applications (IDNA): Protocol</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<date year='2010' month='August' />
<abstract>
<t>This document is the revised protocol definition for Internationalized
Domain Names (IDNs).  The rationale for changes, the relationship to the older
specification, and important terminology are provided in other documents.  This
document specifies the protocol mechanism, called Internationalized Domain
Names in Applications (IDNA), for registering and looking up IDNs in a way that
does not require changes to the DNS itself.  IDNA is only meant for processing
domain names, not free text. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5891' />
<format type='TXT' octets='38105'
  target='http://www.rfc-editor.org/rfc/rfc5891.txt' />
</reference>

    <reference anchor="TR44"
                  target="http://www.unicode.org/reports/tr44/tr44-4.html">
          <front>
          <title>Unicode Technical Report #44: Unicode Character Database</title>
        <author>
        <organization>The Unicode Consortium</organization>
        <address />
        </author>
        <date year="2009" month="September" />
        </front>
    </reference>


     <reference anchor="Unicode52"
	     target="http://www.unicode.org/versions/Unicode5.2.0/">
      <front>
<title abbrev="Unicode 5.2">
   The Unicode Standard, Version 5.2.0
       </title>
  <author>
  <organization>The Unicode Consortium.  The Unicode Standard,
             Version 5.2.0, defined by:</organization>
  <address />
  </author>
  </front>
   <seriesInfo name="(Mountain View, CA: The Unicode Consortium, 2009."
                                   value="ISBN 978-1-936213-00-9)." />
     </reference>


       <reference anchor="Unicode-UAX15"
                  target="http://www.unicode.org/reports/tr15/tr15-31.html">
          <front>
          <title>Unicode Standard Annex #15: Unicode Normalization
             Forms, Revision 31</title>
        <author>
        <organization>The Unicode Consortium</organization>
	    <address />
        </author>
        <date year="2009" month="September" day="03" />
        </front>
      </reference>



</references>

</back>
</rfc>
