<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
    <!ENTITY rfc791 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.0791.xml'>
    <!ENTITY rfc2119 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
    <!ENTITY rfc2460 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2460.xml'>
    <!ENTITY rfc2560 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2560.xml'>
    <!ENTITY rfc3279 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3279.xml'>
    <!ENTITY rfc3447 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml'>
    <!ENTITY rfc4250 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4250.xml'>
    <!ENTITY rfc4251 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4251.xml'>
    <!ENTITY rfc4252 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4252.xml'>
    <!ENTITY rfc4253 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4253.xml'>
    <!ENTITY rfc4432 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4432.xml'>
    <!ENTITY rfc4462 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4462.xml'>
    <!ENTITY rfc5280 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml'>
    <!ENTITY rfc5480 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5480.xml'>
    <!ENTITY rfc5656 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5656.xml'>
    <!ENTITY rfc5758 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5758.xml'>
    <!ENTITY rfc5759 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5759.xml'>
]>
<rfc number="6187" category="std" ipr="trust200902" submissionType="IETF">

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc rfcedstyle="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
    <front>

		<title abbrev="X.509v3 Certificates for SSH">X.509v3 Certificates for Secure Shell Authentication</title>

		<author initials="K.M." surname="Igoe" fullname="Kevin M. Igoe">
			<organization>National Security Agency</organization>
			<address>
				<postal>
					<street>NSA/CSS Commercial Solutions Center</street>
					<country>United States of America</country>
				</postal>
				<email>kmigoe@nsa.gov</email>
			</address>
		</author>
		<author initials="D." surname="Stebila" fullname="Douglas Stebila">
			<organization>Queensland&nbsp;University&nbsp;of&nbsp;Technology</organization>
			<address>
				<postal>
					<street>Information Security Institute</street>
					<street>Level 7, 126 Margaret St</street>
					<city>Brisbane</city> <region>Queensland</region>
					<code>4000</code>
					<country>Australia</country>
				</postal>
				<email>douglas@stebila.ca</email>
			</address>
		</author>

		<date month="March" year="2011" />

		<area>Security</area>
		<workgroup>Network Working Group</workgroup>
		<keyword>X.509v3 Certificates</keyword>
		<keyword>Public Key Authentication</keyword>
		<keyword>Secure Shell (SSH)</keyword>

		<abstract><t>X.509 public key certificates use a signature by a trusted certification authority to bind a given public key to a given digital identity.  This document specifies how to use X.509 version 3 public key certificates in public key algorithms in the Secure Shell protocol.</t></abstract>

    </front>

    <middle>

		<section anchor="intro" title="Introduction">

			<t>There are two Secure Shell (SSH) protocols that use public key cryptography for authentication.  The Transport Layer Protocol, described in <xref target="RFC4253"/>, requires that a digital signature algorithm (called the "public key algorithm") MUST be used to authenticate the server to the client.  Additionally, the User Authentication Protocol described in <xref target="RFC4252"/> allows for the use of a digital signature to authenticate the client to the server ("publickey" authentication).</t>

			<t>In both cases, the validity of the authentication depends upon the strength of the linkage between the public signing key and the identity of the signer.  Digital certificates, such as those in X.509 version 3 (X.509v3) format <xref target="RFC5280" />, are used in many corporate and government environments to provide identity management.  They use a chain of signatures by a trusted root certification authority and its intermediate certificate authorities to bind a given public signing key to a given digital identity.</t> 

			<t>The following public key authentication algorithms are currently available for use in SSH:</t>

<?rfc compact="no" ?>
			<texttable>
				<ttcol align="center">Algorithm</ttcol>
				<ttcol align="center">Reference</ttcol>
				<c>ssh-dss</c> <c><xref target="RFC4253" /></c>
				<c>ssh-rsa</c> <c><xref target="RFC4253" /></c>
				<c>pgp-sign-dss</c> <c><xref target="RFC4253" /></c>
				<c>pgp-sign-rsa</c> <c><xref target="RFC4253" /></c>
				<c>ecdsa-sha2-*</c> <c><xref target="RFC5656" /></c>
			</texttable>
<?rfc compact="yes" ?>

			<t>Since Pretty Good Privacy (PGP) has its own method
for binding a public key to a digital identity, this document focuses solely
upon the non-PGP methods.  In particular, this document defines the following
public key algorithms, which differ from the above solely in their use of X.509v3 certificates to convey the signer's public key.</t>

<?rfc compact="no" ?>
			<texttable>
				<ttcol align="center">Algorithm</ttcol>
				<c>x509v3-ssh-dss</c>
				<c>x509v3-ssh-rsa</c>
				<c>x509v3-rsa2048-sha256</c>
				<c>x509v3-ecdsa-sha2-*</c>
			</texttable>
<?rfc compact="yes" ?>

			<t>Public keys conveyed using the x509v3-ecdsa-sha2-* public key algorithms can be used with the ecmqv-sha2 key exchange method.</t>

			<t>Implementation of this specification requires familiarity with the Secure Shell protocol <xref target="RFC4251" /> <xref target="RFC4253" /> and X.509v3 certificates <xref target="RFC5280" />.  Data types used in describing protocol messages are defined in Section 5 of <xref target="RFC4251" />.</t>
			
			<t>This document is concerned with SSH implementation details; specification of the underlying cryptographic algorithms and the handling and structure of X.509v3 certificates is left to other standards documents, particularly <xref target="RFC3447" />, <xref target="FIPS-186-3" />, <xref target="FIPS-180-2" />, <xref target="FIPS-180-3" />, <xref target="SEC1" />, and <xref target="RFC5280" />.</t>

			<t>An earlier proposal for the use of X.509v3
certificates in the Secure Shell protocol was introduced by O. Saarenmaa and J. Galbraith;
while this document is informed in part by that earlier proposal, it does not maintain strict compatibility.</t>

			<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 <xref target="RFC2119" />.</t>
			
		</section>

		<section anchor="pubkey" title="Public Key Algorithms Using X.509 Version 3 Certificates">

			<t>This document defines the following new public key algorithms for use in the Secure Shell protocol: x509v3-ssh-dss, x509v3-ssh-rsa, x509v3&nbhy;rsa2048&nbhy;sha256, and the family of algorithms given by x509v3&nbhy;ecdsa&nbhy;sha2&nbhy;*.  In these algorithms, a public key is stored in an X.509v3 certificate.  This certificate, a chain of certificates leading to a trusted certificate authority, and optional messages giving the revocation status of the certificates are sent as the public key data in the Secure Shell protocol according to the format in this section.</t>

			<section anchor="pubkey-format" title="Public Key Format">

				<t>The reader is referred to <xref
target="RFC5280" /> for a general description of X.509 version 3 certificates.
For the purposes of this document, it suffices to know that in X.509 a chain
or sequence of certificates (possibly of length one) allows a trusted root
certificate authority and its intermediate certificate authorities to
cryptographically bind a given public key to a given digital identity using
public key signatures.</t> 

				<t>For all of the public key algorithms
specified in this document, the key format consists of a sequence of one or
more X.509v3 certificates followed by a sequence of 0 or more Online
Certificate Status Protocol (OCSP) responses as in Section 4.2 of <xref
target="RFC2560" />.   Providing OCSP responses directly in this data structure
can reduce the number of communication rounds required (saving the
implementation from needing to perform OCSP checking out-of-band) and can also
allow a client outside of a private network to receive OCSP responses from a
server behind a firewall.  As with any use of OCSP data, implementations SHOULD check that the production time of the OCSP response is acceptable.  It is RECOMMENDED, but not REQUIRED, that implementations reject certificates for which the certificate status is revoked.</t>

				<t>The key format has the following specific encoding:</t>

				<figure>
				<artwork>
  string  "x509v3-ssh-dss" / "x509v3-ssh-rsa" / 
          "x509v3-rsa2048-sha256" / "x509v3-ecdsa-sha2-[identifier]"
  uint32  certificate-count
  string  certificate[1..certificate-count]
  uint32  ocsp-response-count
  string  ocsp-response[0..ocsp-response-count]</artwork>
				</figure>

				<t>In the figure above, the string [identifier] is the identifier of the elliptic curve domain parameters.  The format of this string is specified in Section 6.1 of <xref target="RFC5656" />.  Information on the REQUIRED and RECOMMENDED sets of elliptic curve domain parameters for use with this algorithm can be found in Section 10 of <xref target="RFC5656" />.</t>
				
				<t>Each certificate and ocsp-response MUST be encoded as a string of octets using the Distinguished Encoding Rules (DER) encoding of Abstract Syntax Notation One (ASN.1) <xref target="ASN1" />.  An example of an SSH key exchange involving one of these public key algorithms is given in <xref target="example" />.</t>

				<t>Additionally, the following constraints apply:</t>
	 
				<t>
				<list style="symbols">
				<t>The sender's certificate MUST be the first certificate and the public key conveyed by this certificate MUST be consistent with the public key algorithm being employed to authenticate the sender.</t>
				<t>Each following certificate MUST certify the one preceding it.</t>
				<t>The self-signed certificate specifying the root authority MAY be omitted.  All other intermediate certificates in the chain leading to a root authority MUST be included.</t>
				<t>To improve the chances that a peer can verify certificate chains and OCSP responses, individual certificates and OCSP responses SHOULD be signed using only signature algorithms corresponding to public key algorithms supported by the peer, as indicated in the server_host_key_algorithms field of the SSH_MSG_KEXINIT packet (see Section 7.1 of <xref target="RFC4253" />).  However, other algorithms MAY be used.  The choice of signature algorithm used by any given certificate or OCSP response is independent of the signature algorithms chosen by other elements in the chain.</t>
				<t>Verifiers MUST be prepared to receive certificate chains and OCSP responses that use algorithms not listed in the server_host_key_algorithms field of the SSH_MSG_KEXINIT packet, including algorithms that potentially have no Secure Shell equivalent.  However, peers sending such chains should recognize that such chains are more likely to be unverifiable than chains that use only algorithms listed in the server_host_key_algorithms field.</t>
				<t>There is no requirement on the ordering of OCSP responses.  The number of OCSP responses MUST NOT exceed the number of certificates.</t>
				</list>
				</t>

				<t>Upon receipt of a certificate chain, implementations MUST verify the certificate chain according to Section 6.1 of <xref target="RFC5280" /> based on a root of trust configured by the system administrator or user.</t>
	 
				<t>Issues associated with the use of certificates (such as expiration of certificates and revocation of compromised certificates) are addressed in <xref target="RFC5280" /> and are outside the scope of this document.  However, compliant implementations MUST comply with <xref target="RFC5280" />.  Implementations providing and processing OCSP responses MUST comply with <xref target="RFC2560" />.</t>
				
				<t>When no OCSP responses are provided, it is
up to the implementation and system administrator to decide whether or not to accept the certificate.  It may be possible for the implementation to retrieve OCSP responses based on the id-ad-ocsp access description in the certificate's Authority Information Access data (Section 4.2.2.1 of <xref target="RFC5280" />).  However, if the id-ad-ocsp access description indicates that the certificate authority employs OCSP, and no OCSP response information is available, it is RECOMMENDED that the certificate be rejected.</t>
	 
				<t><xref target="RFC5480" /> and <xref target="RFC5758" /> describe the structure of X.509v3 certificates to be used with Elliptic Curve Digital Signature Algorithm (ECDSA) public keys.  <xref target="RFC3279" /> and <xref target="RFC5280" /> describe the structure of X.509v3 certificates to be used with RSA and Digital Signature Algorithm (DSA) public keys.  <xref target="RFC5759" /> provides additional guidance for ECDSA keys in Suite B X.509v3 certificate and certificate revocation list profiles.</t>

			</section>

			<section anchor="pubkey-ext" title="Certificate Extensions">

				<t>Certificate extensions allow for the specification of additional attributes associated with a public key in an X.509v3 certificate (see Section 4.2 of <xref target="RFC5280" />).  The KeyUsage and ExtendedKeyUsage extensions may be used to restrict the use of X.509v3 certificates in the context of the Secure Shell protocol as specified in the following sections.</t>

				<section anchor="pubkey-ext-ku" title="KeyUsage">

					<t>The KeyUsage extension MAY be used
to restrict a certificate's use.  In accordance with Section 4.2.1.3 of <xref
target="RFC5280" />, if the KeyUsage extension is present, then the certificate
MUST be used only for one of the purposes indicated.  There are two relevant
keyUsage identifiers for the certificate corresponding to the public key
algorithm in use:</t> 
					<t>
					<list style="symbols">
					<t>If the KeyUsage extension is present
in a certificate for the x509v3-ssh-dss, x509v3-ssh-rsa, x509v3-rsa2048-sha256,
or x509v3-ecdsa-sha2-* public key algorithms, then the digitalSignature bit
MUST be set.</t>  
					<t>If the KeyUsage extension is present
in a certificate for the ecmqv-sha2 key exchange method, then the keyAgreement bit MUST be set.</t>
					</list>
					</t>

					<t>For the remaining certificates in the certificate chain, implementations MUST comply with existing conventions on KeyUsage identifiers and certificates as in Section 4.2.1.3 of <xref target="RFC5280" />.</t>
					
				</section>

				<section anchor="pubkey-ext-eku" title="ExtendedKeyUsage">

					<t>This document defines two ExtendedKeyUsage key purpose IDs that MAY be used to restrict a certificate's use: id-kp-secureShellClient, which indicates that the key can be used for a Secure Shell client, and id-kp-secureShellServer, which indicates that the key can be used for a Secure Shell server.  In accordance with Section 4.2.1.12 of <xref target="RFC5280" />, if the ExtendedKeyUsage extension is present, then the certificate MUST be used only for one of the purposes indicated.  The object identifiers of the two key purpose IDs defined in this document are as follows:</t>

					<t>
					<list style="symbols">
					<t>id-pkix OBJECT IDENTIFIER ::= { iso(1) identified-organization(3) dod(6) internet(1) security(5) mechanisms(5) pkix(7) }</t>
					<t>id-kp   OBJECT IDENTIFIER ::= { id-pkix 3 }    -- extended key purpose identifiers</t>
					<t>id-kp-secureShellClient        OBJECT IDENTIFIER ::= { id-kp 21 }</t>
					<t>id-kp-secureShellServer        OBJECT IDENTIFIER ::= { id-kp 22 }</t>
					</list>
					</t>

				</section>

			</section>

		</section>

		<section anchor="sigencoding" title="Signature Encoding">

			<t>Signing and verifying using the X.509v3-based public
key algorithms specified in this document (x509v3-ssh-dss, x509v3-ssh-rsa,
x509v3&nbhy;ecdsa&nbhy;sha2&nbhy;*) is done in the analogous way for the
corresponding non-X.509v3-based public key algorithms (ssh-dss, ssh&nbhy;rsa,
ecdsa&nbhy;sha2&nbhy;*, respectively); the x509v3-rsa2048-sha256 public key
algorithm provides a new mechanism, similar to ssh-rsa, but has a different
hash function and additional key size constraints.  For concreteness, we specify this
explicitly below.</t> 

			<section anchor="sigencoding-dss" title="x509v3-ssh-dss">

				<t>Signing and verifying using the x509v3-ssh-dss key format is done according to the Digital Signature Standard <xref target="FIPS-186-3" /> using the SHA-1 hash <xref target="FIPS-180-2" />.</t>

				<t>The resulting signature is encoded as follows:</t>
				<figure>
				<artwork>
  string  "ssh-dss"
  string  dss_signature_blob</artwork>
				</figure>

				<t>The value for dss_signature_blob is encoded as a string containing r, followed by s (which are fixed-length 160-bit integers, without lengths or padding, unsigned, and in network byte order).</t>

				<t>This format is the same as for ssh-dss signatures in Section 6.6 of <xref target="RFC4253" />.</t>

			</section>

			<section anchor="sigencoding-rsa" title="x509v3-ssh-rsa">

				<t>Signing and verifying using the x509v3-ssh-rsa key format is performed according to the RSASSA-PKCS1-v1_5 scheme in <xref target="RFC3447" /> using the SHA-1 hash <xref target="FIPS-180-2" />.</t>

				<t>The resulting signature is encoded as follows:</t>
				<figure>
				<artwork>
  string  "ssh-rsa"
  string  rsa_signature_blob</artwork>
				</figure>

				<t>The value for rsa_signature_blob is encoded as a string containing s (which is an integer, without lengths or padding, unsigned, and in network byte order).</t>

				<t>This format is the same as for ssh-rsa signatures in Section 6.6 of <xref target="RFC4253" />.</t>

			</section>

			<section anchor="sigencoding-rsa2048" title="x509v3-rsa2048-sha256">

				<t>Signing and verifying using the x509v3-rsa2048-sha256 key format is performed according to the RSASSA-PKCS1-v1_5 scheme in <xref target="RFC3447" /> using the SHA-256 hash <xref target="FIPS-180-3" />; RSA keys conveyed using this format MUST have a modulus of at least 2048 bits.</t>

				<t>The resulting signature is encoded as follows:</t>
				<figure>
				<artwork>
  string  "rsa2048-sha256"
  string  rsa_signature_blob</artwork>
				</figure>

				<t>The value for rsa_signature_blob is encoded as a string containing s (which is an integer, without lengths or padding, unsigned, and in network byte order).</t>

				<t>Unlike the other public key formats
specified in this document, the x509v3-rsa2048-sha256 public key format does
not correspond to any previously existing SSH non-certificate public key
format.  The main purpose of introducing this public key format is to provide
an RSA-based public key format that is compatible with current recommendations
on key size and hash functions.  For example, National Institute of Standards
and Technology's (NIST's) draft recommendations on cryptographic algorithms and key lengths <xref target="SP-800-131" />  specify that digital signature generation using an RSA key with modulus less than 2048 bits or with the SHA-1 hash function is acceptable through 2010 and deprecated from 2011 through 2013, whereas an RSA key with modulus at least 2048 bits and SHA-256 is acceptable for the indefinite future.  The introduction of other non-certificate-based SSH public key formats compatible with the above recommendations is outside the scope of this document.</t>

			</section>

			<section anchor="sigencoding-ecdsa" title="x509v3-ecdsa-sha2-*">

				<t>Signing and verifying using the x509v3-ecdsa-sha2-* key formats is performed according to the ECDSA algorithm in <xref target="FIPS-186-3" /> using the SHA2 hash function family <xref target="FIPS-180-3" />.  The choice of hash function from the SHA2 hash function family is based on the key size of the ECDSA key as specified in Section 6.2.1 of <xref target="RFC5656" />.</t>

				<t>The resulting signature is encoded as follows:</t>
				<figure>
				<artwork>
  string  "ecdsa-sha2-[identifier]"
  string  ecdsa_signature_blob</artwork>
				</figure>

				<t>The string [identifier] is the identifier of the elliptic curve domain parameters. The format of this string is specified in Section 6.1 of <xref target="RFC5656" />.</t>

				<t>The ecdsa_signature_blob value has the following specific encoding:</t>
				<figure>
				<artwork>
  mpint   r
  mpint   s</artwork>
				</figure>

				<t>The integers r and s are the output of the ECDSA algorithm.</t>

				<t>This format is the same as for ecdsa-sha2-* signatures in Section 3.1.2 of <xref target="RFC5656" />.</t>

			</section>

		</section>

		<section anchor="publickey" title="Use in Public Key Algorithms">

			<t>The public key algorithms and encodings defined in this document SHOULD be accepted any place in the Secure Shell protocol suite where public keys are used, including, but not limited to, the following protocol messages for server authentication and user authentication:</t>

			<t>
			<list style="symbols">
			<t>in the SSH_MSG_USERAUTH_REQUEST message when "publickey" authentication is used <xref target="RFC4252" /></t>
			<t>in the SSH_MSG_USERAUTH_REQUEST message when "hostbased" authentication is used <xref target="RFC4252" /></t>
			<t>in the SSH_MSG_KEXDH_REPLY message <xref target="RFC4253" /></t>
			<t>in the SSH_MSG_KEXRSA_PUBKEY message <xref target="RFC4432" /></t>
			<t>in the SSH_MSG_KEXGSS_HOSTKEY message <xref target="RFC4462" /></t>
			<t>in the SSH_MSG_KEX_ECDH_REPLY message <xref target="RFC5656" /></t>
			<t>in the SSH_MSG_KEX_ECMQV_REPLY message <xref target="RFC5656" /></t>
			</list>
			</t>
			
			<t>When a public key from this specification is included in the input to a hash algorithm, the exact bytes that are transmitted on the wire must be used as input to the hash functions.  In particular, implementations MUST NOT omit any of the chain certificates or OCSP responses that were included on the wire, nor change encoding of the certificate or OCSP data.  Otherwise, hashes that are meant to be computed in parallel by both peers will have differing values.</t>

			<t>For the purposes of user authentication, the mapping between certificates and user names is left as an implementation and configuration issue for implementers and system administrators.</t>

			<t>For the purposes of server authentication, it is RECOMMENDED that implementations support the following mechanism mapping host names to certificates.  However, local policy MAY disable the mechanism or MAY impose additional constraints before considering a matching successful.  Furthermore, additional mechanisms mapping host names to certificates MAY be used and are left as implementation and configuration issues for implementers and system administrators.</t>

			<t>The RECOMMENDED server authentication mechanism is as follows.  The subjectAlternativeName X.509v3 extension, as described in Section 4.2.1.6 of <xref target="RFC5280" />, SHOULD be used to convey the server host name, using either dNSName entries or iPAddress entries to convey domain names or IP addresses as appropriate.  Multiple entries MAY be specified.  The following rules apply:</t>

			<t>
			<list style="symbols">
			<t>If the client's reference identifier (e.g., the host name typed by the client) is a DNS domain name, the server's identity SHOULD be checked using the rules specified in <xref target="RFC6125" />.  Support for the DNS-ID identifier type is RECOMMENDED in client and server software implementations.  Certification authorities that issue certificates for use by Secure Shell servers SHOULD support the DNS-ID identifier type.  Service providers SHOULD include the DNS-ID identifier type in certificate requests.  The DNS-ID MAY contain the wildcard character '*' as the complete left-most label within the identifier.</t>
			<t>If the client's reference identifier is an IP
address as defined by <xref target="RFC0791" /> or <xref target="RFC2460" />,
the client SHOULD convert that address to the "network byte order" octet string
representation and compare it against a subjectAltName entry of type iPAddress.
A match occurs if the octet strings are identical for the reference
identifier and any presented identifier.</t> 
			</list>
			</t>

		</section>

		<section anchor="security" title="Security Considerations">

			<t>This document provides new public key algorithms for the Secure Shell protocol that convey public keys using X.509v3 certificates.  For the most part, the security considerations involved in using the Secure Shell protocol apply, since all of the public key algorithms introduced in this document are based on existing algorithms in the Secure Shell protocol.  However, implementers should be aware of security considerations specific to the use of X.509v3 certificates in a public key infrastructure, including considerations related to expired certificates and certificate revocation lists.</t>

			<t>The reader is directed to the security considerations sections of <xref target="RFC5280" /> for the use of X.509v3 certificates, <xref target="RFC2560" /> for the use of OCSP response, <xref target="RFC4253" /> for server authentication, and <xref target="RFC4252" /> for user authentication.  Implementations SHOULD NOT use revoked certificates because many causes of certificate revocation mean that the critical authentication properties needed are no longer true.  For example, compromise of a certificate's private key or issuance of a certificate to the wrong party are common reasons to revoke a certificate.</t>
			
			<t>If a party to the SSH exchange attempts to use a revoked X.509v3 certificate, this attempt along with the date, time, certificate identity, and apparent origin IP address of the attempt SHOULD be logged as a security event in the system's audit logs or the system's general event logs.  Similarly, if a certificate indicates that OCSP is used and there is no response to the OCSP query, the absence of a response along with the details of the attempted certificate use (as before) SHOULD be logged.</t>

			<t>As with all specifications involving cryptographic algorithms, the quality of security provided by this specification depends on the strength of the cryptographic algorithms in use, the security of the keys, the correctness of the implementation, and the security of the public key infrastructure and the certificate authorities.  Accordingly, implementers are encouraged to use high-assurance methods when implementing this specification and other parts of the Secure Shell protocol suite.</t>
			
		</section>

		<section anchor="iana" title="IANA Considerations">

			<t>Consistent with Section 8 of <xref target="RFC4251" /> and Section 4.6 of <xref target="RFC4250" />, this document makes the following registrations:</t>

			<t>In the Public Key Algorithm Names registry:</t>
			
			<t>
			<list style="symbols">
			<t>The SSH public key algorithm "x509v3-ssh-dss".</t>
			<t>The SSH public key algorithm "x509v3-ssh-rsa".</t>
			<t>The SSH public key algorithm "x509v3-rsa2048-sha256".</t>
			<t>The family of SSH public key algorithm names beginning with "x509v3-ecdsa-sha2-" and not containing the at-sign ('@').</t>
			</list>
			</t>

			<t>The two object identifiers used in <xref target="pubkey-ext-eku" /> were assigned from an arc delegated by IANA to the PKIX Working Group.</t>

		</section>

    </middle>

    <back>

		<references title="Normative References">

			<reference anchor="ASN1">
				<front>
					<title>Abstract Syntax Notation One (ASN.1): Specification of basic notation</title>
					<author>
						<organization>International Telecommunications Union</organization>
					</author>
					<date month="July" year="2002" />
				</front>
				<seriesInfo name="" value="X.680" />
			</reference>

			<reference anchor="FIPS-180-2">
				<front>
					<title>Secure Hash Standard</title>
					<author>
						<organization>National Institute of Standards and Technology</organization>
					</author>
					<date month="August" year="2002" />
				</front>
				<seriesInfo name="FIPS" value="180-2" />
			</reference>

			<reference anchor="FIPS-180-3">
				<front>
					<title>Secure Hash Standard</title>
					<author>
						<organization>National Institute of Standards and Technology</organization>
					</author>
					<date month="October" year="2008" />
				</front>
				<seriesInfo name="FIPS" value="180-3" />
			</reference>

			<reference anchor="FIPS-186-3">
				<front>
					<title>Digital Signature Standard (DSS)</title>
					<author>
						<organization>National Institute of Standards and Technology</organization>
					</author>
					<date month="June" year="2009" />
				</front>
				<seriesInfo name="FIPS" value="186-3" />
			</reference>

			<reference anchor="RFC6125">
				<front>
					<title>Representation and Verification
of Domain-Based Application Service Identity within Internet Public Key
Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport
Layer Security (TLS)</title> 
					<author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
						<organization>Cisco</organization>
					</author>
					<author initials="J." surname="Hodges" fullname="Jeff Hodges">
						<organization>PayPal</organization>
					</author>
					<date month="March" year="2011" />
				</front>
				<seriesInfo name="RFC" value="6125" />
				<format target="http://tools.ietf.org/html/draft-saintandre-tls-server-id-check-12" type="HTML" /> 
			</reference>

			&rfc791;
			&rfc2119;
			&rfc2460;
			&rfc2560;
			&rfc3279;
			&rfc3447;
			&rfc4250;
			&rfc4251;
			&rfc4252;
			&rfc4253;
			&rfc5280;
			&rfc5480;
			&rfc5656;
			&rfc5758;

			<reference anchor="SEC1" target="http://www.secg.org/download/aid-780/sec1-v2.pdf">
				<front>
					<title>Elliptic Curve Cryptography</title>
					<author>
						<organization>Standards for Efficient Cryptography Group</organization>
					</author>
					<date month="September" day="20" year="2000" />
				</front>
				<seriesInfo name="SEC" value="1" />
				<format type="PDF" target="http://www.secg.org/download/aid-780/sec1-v2.pdf" />
			</reference>

		</references>

		<references title="Informative References">

			<reference anchor="SP-800-131">
				<front>
					<title>DRAFT Recommendation for the Transitioning of Cryptographic Algorithms and Key Lengths</title>
					<author initials="E." surname="Barker" fullname="Elaine Barker" />
					<author initials="A." surname="Roginsky" fullname="Allen Roginsky">
						<organization>National Institute of Standards and Technology</organization>
					</author>
					<date month="June" year="2010" />
				</front>
				<seriesInfo name="NIST Special Publication" value="800-131" />
			</reference>

			&rfc4432;
			&rfc4462;
			&rfc5759;

		</references>

		<section anchor="example" title="Example">

			<t>The following example illustrates the use of an X.509v3 certificate for a public key for the Digital Signature Algorithm when used in a Diffie-Hellman key exchange method.  In the example, there is a chain of certificates of length 2, and a single OCSP response is provided.</t>
			
			<figure>
			<artwork>
  byte    SSH_MSG_KEXDH_REPLY
  string  0x00 0x00 0xXX 0xXX  -- length of the remaining data in 
                                  this string
          0x00 0x00 0x00 0x0D  -- length of string "x509v3-ssh-dss"
          "x509v3-ssh-dss"
          0x00 0x00 0x00 0x02  -- there are 2 certificates
          0x00 0x00 0xXX 0xXX  -- length of sender certificate
          DER-encoded sender certificate
          0x00 0x00 0xXX 0xXX  -- length of issuer certificate
          DER-encoded issuer certificate
          0x00 0x00 0x00 0x01  -- there is 1 OCSP response
          0x00 0x00 0xXX 0xXX  -- length of OCSP response
          DER-encoded OCSP response
  mpint   f
  string  signature of H</artwork>
			</figure>

		</section>

		<section anchor="ack" title="Acknowledgements">

			<t>The authors gratefully acknowledge helpful comments from Ran Atkinson, Samuel Edoho-Eket, Joseph Galbraith, Russ Housley, Jeffrey Hutzelman, Jan Pechanec, Peter Saint-Andre, Sean Turner, and Nicolas Williams.</t>

			<t>O. Saarenmaa and J. Galbraith previously drafted a document on a similar topic.</t>

		</section>

    </back>

</rfc>
