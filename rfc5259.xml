<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
	<!ENTITY rfc2119 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
	<!ENTITY rfc2047 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2047.xml'>
	<!ENTITY rfc2231 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2231.xml'>
	<!ENTITY rfc3501 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3501.xml'>
	<!ENTITY rfc3516 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3516.xml'>
]>
<rfc number="5259" category="std" >
	<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
	<?rfc toc="yes" ?>
	<?rfc symrefs="yes" ?>
	<?rfc sortrefs="yes"?>
	<?rfc rfcedstyle="yes"?>
	<?rfc subcompact="no"?>
	<front>
		<title abbrev="IMAP CONVERT extension">Internet
Message Access Protocol - CONVERT Extension</title>
		<author initials="A." surname="Melnikov" fullname="Alexey Melnikov" role="editor">
			<organization>Isode Ltd</organization>
			<address>
				<postal>
					<street>5 Castle Business Village</street>
					<street>36 Station Road</street>
					<city>Hampton</city>
					<region>Middlesex</region>
					<code>TW12 2BX</code>
					<country>UK</country>
				</postal>
				<email>Alexey.Melnikov@isode.com</email>
			</address>
		</author>
		<author initials="P." surname="Coates" fullname="Peter Coates" role="editor">
			<organization>Sun Microsystems</organization>
			<address>
				<postal>
					<street>185 Falcon Drive</street>
					<city>Whitehorse</city>
					<region>YT</region>
					<code>Y1A 6T2</code>
					<country>Canada</country>
				</postal>
				<email>peter.coates@Sun.COM</email>
			</address>
		</author>
		<date month="June" year="2008"/>
		<keyword>IMAP</keyword>
		<keyword>Lemonade</keyword>
		<keyword>CONVERT</keyword>
		<keyword>conversion</keyword>
		<keyword>transcoding</keyword>

		<abstract>
			<t>CONVERT defines extensions to IMAP allowing clients to request 
			adaptation and/or transcoding of attachments. Clients can specify the 
			conversion details or allow servers to decide based on knowledge of 
			client capabilities, on user or administrator
			preferences, or on server
			settings.
			</t>
		</abstract>
	</front>
	<middle>
		
		<section title="Introduction">

			<t>
			This document defines the CONVERT extension to IMAP4 <xref target="RFC3501"/>.
			CONVERT provides adaptation and transcoding of body parts as
			needed by the client.  Conversion (adaptation, 
			transcoding) may be requested by the client and performed by the 
			server on a best effort basis or, when requested by the client,
			decided by the server based on the server's 
			knowledge of the client capabilities, user or administrator 
			preferences, or server settings.
			</t>

			<t>
			This extension is primarily intended to be useful to mobile clients.
			It satisfies requirements specified in <xref target="OMA-ME-RD"/>.
			</t>

			<t>
			A server that supports CONVERT can convert body parts to other
			formats to be viewed (for example) on a mobile device. The client
			can explicitly request a particular conversion or ask the server to
			select the best available conversion. When allowed by the client, the 
			server determines how to convert based on its own strategy (e.g.,
			based on knowledge of the client as discussed hereafter). If the
			server knows the characteristics of the device (out of scope for
			CONVERT) or can determine them (for example, using a conversion parameter
			containing device type), converted body parts can also be optimized
			for capabilities of the device (e.g., form factor of pictures).
			The client is able to control conversions using optional conversion
			(also referred to as "transcoding" in this document) parameters.
			</t>

			<t>
			This document relies on the registry of conversion parameters
			established by <xref target="MEDIAFEAT-REG"/>. The registry can be used to
			discover the underlying legal values that these parameters can take.
			Additional conversion parameters, such as those defined by
			<xref target="OMA-STI"/>, are expected to be registered in the future.
			</t>

		</section>
		
		<section title="Conventions Used in This Document">
			<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
            "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
            and "OPTIONAL" in this document are to be interpreted as
            described in <xref target="RFC2119"/>.</t>

			<t>In examples, "C:" and "S:" indicate lines sent by
			the client and server, respectively. If a single "C:" or "S:"
			label applies to multiple lines, then the line breaks between
			those lines are for editorial clarity only and are not part
			of the actual protocol exchange. The five characters [...] mean that
			something has been elided.</t>

			<t>
			When describing the general syntax, some definitions are omitted as 
			they are defined in <xref target="RFC3501"/>.  In particular, the term "session"
			is used in this document as defined in Section 1.2 of <xref target="RFC3501"/>.
			</t>
		</section>
		
		<section title="Relation with Other IMAP Specifications">
			<t>
			Conversion of attachments during streaming is out of scope for the CONVERT
			extension and is described in a separate Lemonade WG document
			<xref target="LEM-STREAMING"/>.
			</t>
			
			<t>A server claiming compliance with this specification
			MUST support the IMAP Binary specification <xref target="RFC3516"/>. 
			</t>

			<section title="CAPABILITY Response">
				
				<t>
				A server that supports the CONVERT extension MUST return "CONVERT"
				and "BINARY" in the CAPABILITY
				response or response code. 
				(Client
				and server authors are reminded that the order of tokens returned
				in the CAPABILITY response or response code is arbitrary.)
				</t>
     
				<figure>
					<artwork>
   Example: A server that implements CONVERT. 

      C: a000 CAPABILITY 
      S: * CAPABILITY IMAP4rev1 CONVERT BINARY [...]
      S: a000 OK CAPABILITY completed 
					</artwork>
				</figure>
		
			</section>
			
		</section>

		<section title="Scope of Conversions">
			<t>
			Conversions only affect what is sent to the client; the original data 
			in the message store MUST NOT be altered.  This document does not 
			specify how the server performs conversions. 
			</t>
				
			<t>
			Note: The requirement that original data be unaltered allows such
			data to remain accessible by other clients, permits replies or
			forwards of the original documents, permits signature verification
			(the converted body parts are not likely to contain any signatures),
			and preserves BODYSTRUCTURE and related information.
			</t>
		</section>
		
		<section title="Discovery of Available Conversions">

			<section anchor="conversions-cmd" title="CONVERSIONS Command">

					<t>
					<list style="hanging" hangIndent="11">
						<t hangText="Arguments:">source MIME type<vspace/>
						target MIME type</t>


						<t hangText="Responses:">untagged responses: CONVERSION
						</t>
						<t hangText="Result:">
							OK - CONVERSIONS command completed<vspace/>

<?rfc subcompact="yes"?>				        
					<list style="hanging" hangIndent="6">
					  <t hangText="BAD -">unrecognized
					    syntax of an argument, unexpected extra argument, missing argument,
						etc.</t></list>
<?rfc subcompact="no"?>				        
						</t>
					</list>
					</t>

					<t>
					The CONVERSIONS command is allowed in Authenticated and Selected IMAP states.
					</t>
				
					<t>
					The first parameter to the CONVERSIONS command is a source MIME type,
					the second parameter is the target MIME type. Both parameters are
					partially (e.g., "text/*") or completely ("*") wildcardable.
					</t>

					<t>
					Conversions matching the source/target pair and their associated
					conversion parameters are returned in untagged CONVERSION responses.
					If source/target doesn't match any conversion supported by the server,
					no CONVERSION response is returned.
					</t>

					<t>
					Examples:
					</t>

					<t>
					For conversion information from GIF to JPEG image format (no untagged CONVERSION
					response would be returned if no conversion is possible):
					</t>

					<figure><artwork>
    C: a CONVERSIONS "image/gif" "image/jpeg"
    S: * CONVERSION "image/gif" "image/jpeg" ("pix-y" "pix-x"
        "image-interleave")
    S: a OK CONVERSIONS completed
					</artwork></figure>

					<t>
					For conversion information from GIF image format to anything:
					</t>

					<figure><artwork>
    C: b CONVERSIONS "image/gif" "*"	
    S: * CONVERSION "image/gif" "image/jpeg" ("pix-y" "pix-x"
        "image-interleave")
    S: * CONVERSION "image/gif" "image/png" ([...])
    [...]
    S: b OK CONVERSIONS completed
					</artwork></figure>

					<t>
					For conversion of anything to JPEG:
					</t>

					<figure><artwork>
    C: c CONVERSIONS "*" "image/jpeg"	
    S: * CONVERSION "image/gif" "image/jpeg" ("pix-y" "pix-x"
        "image-interleave")
    S: * CONVERSION "image/png" "image/jpeg" (...)
    [...]
    S: c OK CONVERSIONS completed
					</artwork></figure>

					<t>
					For conversions from all image formats to all text formats, the client can issue
					the following command:
					</t>

					<figure><artwork>
    C: d CONVERSIONS "image/*" "text/*"
					</artwork></figure>

			</section>
			
			<section title="CONVERSION Response">

					<t>
					<list style="hanging" hangIndent="11">
						<t
						hangText="Contents:">source MIME type<vspace/>
						target MIME type<vspace/>
						optional list of supported conversion parameters</t>
					</list>
					</t>
				
					<t>As a result of executing a CONVERSIONS command, the server can return
					one or more CONVERSION responses. Each CONVERSION response specifies
					which source MIME type can be converted to the target MIME type, and also
					lists supported conversion parameters.
					</t>
				
			</section>
				
		</section>

		<section anchor="convert-cmd" title="CONVERT and UID CONVERT Commands">

			<t>
			<list style="hanging" hangIndent="11">
				<t hangText="Arguments:">sequence set<vspace/>
				conversion parameters<vspace/>
				CONVERT data item names
				</t>


				<t hangText="Responses:">untagged responses: CONVERTED
				</t>


				<t hangText="Result:">
					OK - convert completed<vspace/>
				        NO - convert error: can't fetch and/or convert that data<vspace/>
<?rfc subcompact="yes"?>				        
					<list style="hanging" hangIndent="6">
					  <t hangText="BAD -">unrecognized syntax of
				        an argument, unexpected extra argument, missing argument, etc.</t></list>
			</t></list>
<?rfc subcompact="no"?>				        
			</t>

			<t>
			The CONVERT extension defines CONVERT and UID CONVERT commands
			that are used to transcode
			the media type of a MIME part into another media type, and/or the
			same media type with different encoding parameters. These commands
			are structured and behave similarly to FETCH/UID FETCH commands
			as extended by <xref target="RFC3516"/>:
				<list style="symbols">
					<t>
					A successful CONVERT/UID CONVERT command results in one or more
					untagged CONVERTED responses (one per message). They are similar
					to the untagged FETCH responses.  Note that a single CONVERT/
					UID CONVERT command can only perform a single type of conversion
					as defined by the conversion parameters.
					A client that needs to perform multiple different conversions
					needs to issue multiple
					CONVERT/UID CONVERT
					commands. Such a client
					MAY pipeline them.
					</t>
					
					<t>
					BINARY[...] data item requests conversion of a body part or of
					the whole message according to
conversion parameters and requests that the converted message/body part be
					returned as binary.
					</t>

<!-- [rfced] May "and returning it as binary" be "and returns it as
binary"? -->
					
					<t>
					BINARY.SIZE data item is similar to RFC822.SIZE, but it requests
					size of a converted body part/message.
					</t>
					
					<t>
					BODYPARTSTRUCTURE data item is similar to BODYSTRUCTURE
					FETCH data item, but it returns the MIME structure of the
					converted body part.
					</t>
					
					<t>
					BODY[...HEADER] encoded words in the requested headers are
					converted to the specified charset. The CHARSET parameter is
					REQUIRED for this conversion.
					</t>
					
					<t>
					BODY[...MIME] encoded words in the requested headers are
					converted to the specified charset. The CHARSET parameter is
					REQUIRED for this conversion.
					</t>
					
					<t>
					AVAILABLECONVERSIONS data item requests the list of target
					MIME types the specified body part (or the whole message)
					can be converted to.
					</t>
					
				</list>
			</t>
			
			<t>
			The CONVERT extension also adds one new response code. See 
			<xref target='responses'/> for more details.
			</t>
			
			<t>
			Typically clients will request conversion of leaf body parts. In
			addition to support of leaf body part conversion, servers MAY offer
			conversion of non-leaf body parts (e.g., conversion from
			multipart/related).
			</t>
			
			<t>
			Instead of specifying the exact target MIME media type the client
			wants to convert to, the client MAY use a special marker NIL (also
			known as "default conversion") to request the server to pick a
			suitable target media type. This document doesn't describe how exactly
			the server makes such a choice; however, some basic guidelines are
			described in this paragraph. If the server knows characteristics
			of the device using an in-band (such as device type specified
			in a conversion parameter) or an out-of-band mechanism, then
			it should convert the request body part to a media type the device
			is likely to support and display/play successfully. Unless specifically
			overridden by a conversion parameter, the server MAY also remove
			any unnecessary detail that exceeds the capabilities of the device
			(e.g., scaling images to just fit on the device's screen).
			In the absence of any in-band or out-of-band mechanism for
			determining device characteristics, the server should convert
			the request body part to the most standard or widely deployed
			media type available in that media category, for example, to
			convert to text/plain, image/jpeg. In such case,
			the server should minimize quality loss.
			Servers are REQUIRED to support "default conversion" requests.
			Server implementations that support conversions to multiple
			target MIME types SHOULD make the default conversion configurable.
			Clients SHOULD avoid using the default conversion unless they
			provided a way (in-band or out-band) to signal their capabilities
			to the server, as there is no guaranty that the server would
			guess their capability correctly. Client implementors should
			consider using AVAILABLECONVERSIONS CONVERT data item or
			CONVERSIONS command instead of the default conversion.
			</t>
			
			<t>
			CONVERT's command syntax is modeled after the FETCH command syntax
			in <xref target="RFC3501"/>, as extended by <xref target="RFC3516"/>. CONVERT data items are
			generally structured as: 
			</t>

			<figure><artwork>
    BINARY[section-part]&lt;partial&gt; 
    
    BINARY.SIZE[section-part]

    BODYPARTSTRUCTURE[section-part]

    BODY[HEADER]
 
    BODY[section-part.HEADER]

    BODY[section-part.MIME]
    
    AVAILABLECONVERSIONS[section-part]
            </artwork></figure>
			
			<t>
			The semantics of a partial CONVERT BINARY[...]
			command is the same as for a partial FETCH BODY[...] command, with
			the exception that the &lt;partial&gt; arguments refer to the TRANSCODED
			and DECODED section data.
			</t>
			
			<t>
			Note that unlike the FETCH command, the CONVERT command never sets
			the \Seen flag on converted messages. A client wishing to mark
			a message with the \Seen flag would need to issue a STORE command
			(possibly pipelined with the CONVERT request) to do that.
			</t>

			<t>
			The UID CONVERT command is different from the CONVERT command in
			the same way as the UID FETCH command is different from the FETCH
			command:
				<list style="symbols">
					<t>
					UID CONVERT takes as a parameter a sequence of UIDs instead of
					a sequence of message numbers.
					</t>
					
					<t>
					UID CONVERT command MUST result in the UID data item
					in a corresponding CONVERTED response.
					</t>
					
					<t>
					An EXPUNGE response MUST NOT be sent while responding to a CONVERT
				    command.  This rule is necessary to prevent a loss of
				    synchronization of message sequence numbers between client and
				    server. Note that an EXPUNGE response MAY be sent during a UID CONVERT command.
					</t>

				</list>
			</t>
			
			<t>
			Example:  The client fetches body part section 3 in the message with 
			the message sequence number of 2 and asks to have that attachment 
			converted to pdf format.
			</t>

			<figure><artwork><![CDATA[
  C: a001 CONVERT 2 ("APPLICATION/PDF") BINARY[3] 
  S: * 2 CONVERTED (TAG "a001") (BINARY[3] {2135} 
     <the document in .pdf format> 
     ) 
  S: a001 OK CONVERT COMPLETED
			]]></artwork></figure>
			
			<t>
			Example:  The client requests for conversion of a text/html body part
			to text/plain and asks for a charset of us-ascii.  The server cannot 
			respect the charset conversion request because there are non-us-ascii
			characters in the text/html body part, so it fails the request by
			returning an ERROR phrase in place of the converted data
			(see <xref target="responses"/>).
			</t>
    
			<figure><artwork>
  C: b001 CONVERT 2 ("text/plain" ("charset" "us-ascii")) BINARY[3]
  S: * 2 CONVERTED (tag "b001") (BINARY[3]
      (ERROR "Source text has non us-ascii" BADPARAMETERS
      "text/html" "text/plain" ("charset" "us-ascii")))
  S: b001 NO All conversions failed
			</artwork></figure>
			
			<t>
			If the client also specified the "unknown-character-replacement"
			conversion parameter (see <xref target="unknown-character-replacement-reg"/>), the same example can look
			like this:
			</t>

			<figure><artwork><![CDATA[
  C: b001 CONVERT 2 ("text/plain" ("charset" "us-ascii"
      "unknown-character-replacement" "?")) BINARY[3]
  S: * 2 CONVERTED (TAG "b001") (BINARY[3] {2135}
      <the document in text/plain format with us-ascii
       charset>
     )
  S: b001 OK CONVERT COMPLETED
			]]></artwork></figure>
			
			<t>
			The server replaced non-us-ascii characters with a us-ascii
			character such as "?".
			</t>
			
			<t>
			Example:  The client first requests the converted size of a text/html
			body part converted to text/plain:
			</t>

			<figure><artwork>
  C: c000 CONVERT 2 ("TEXT/PLAIN" ("CHARSET" "us-ascii"))
      BINARY.SIZE[4]
  S: * 2 CONVERTED (TAG "c000") (BINARY.SIZE[4] 3135)
  S: c000 OK CONVERT COMPLETED 
			</artwork></figure>
			
			<t>
			Later on, the client requests 1000 bytes from the converted body part,
			starting from byte 2001:
			</t>

			<figure><artwork><![CDATA[
  C: c001 CONVERT 2 ("TEXT/PLAIN" ("CHARSET" "us-ascii"))
      BINARY[4]<2001.1000>
  S: * 2 CONVERTED (TAG "c001") (BINARY[4]<2001> {135} 
       <bytes 2001 - 2135 of the document in text/plain format>
       ) 
  S: c001 OK CONVERT COMPLETED
			]]></artwork></figure>
			
			<t>
			The server MUST respect the target MIME type and conversion
			parameters specified by the client in the transcoding request.
			Note that some conversion parameters can restrict what kind of
			conversion is possible, while others can remove some restrictions.
			</t>
			
			<t>
			It is legal for a client to request conversion of a non-leaf body part,
			for example, to request conversion of a multipart/* into a PDF document.
			However, servers implementing this extension are not required to support
			such conversions. Servers that support such conversions MUST return
			one or more CONVERSION responses in response to a
			'CONVERSIONS "multipart/*" "*"' command. See <xref target="conversions-cmd"/>
			for more details.
			</t>
			
			<t>
			The client can request header conversions using the BODY[...HEADER]
			CONVERT request, for example
			</t>

			<figure><artwork><![CDATA[
     C: D001 FETCH 2 BODY[HEADER]
     S: * 2 FETCH (BODY[HEADER] {158}
     S: Date: Mon, 20 Apr 2007 20:05:43 +0200
     S: From: Peter <peter@siroe.example.com>
     S: To: Alexey <alexey@siroe.example.com>
     S: Subject: =?KOI8-R?Q?why encode this?=
     S:
     S: )
     S: D001 OK
     C: D002 CONVERT 2 (NIL ("CHARSET" "utf-8")) BODY[HEADER]
     S: * 2 CONVERTED (TAG "d002") (BODY[HEADER] {157}
     S: Date: Mon, 20 Apr 2007 20:05:43 +0200
     S: From: Peter <peter@siroe.example.com>
     S: To: Alexey <alexey@siroe.example.com>
     S: Subject: =?UTF-8?Q?why encode this?=
     S:
     S: )
     S: D002 OK
			]]></artwork></figure>
			
			<t>
			Any such request MUST include the CHARSET parameter.  
			Upon receipt of the request, the server MUST decode any encoded words
			(as described in <xref target="RFC2047"/>) in headers and return them re-encoded
			in the specified charset. 

<!-- [rfced] Should "encoded words" be hyphenated as it is in the next
     sentence? -->

			(Note that encoded-words might not be
			needed if the result can be represented entirely in US-ASCII,
			so the server MAY replace the resulting encoded-words with their pure US-ASCII
			representation.)
			If the server can't decode any particular encoded word,
			for example, if the charset or encoding is not recognized,
			it MUST leave them as is. Servers SHOULD also support decoding
			of any parameters as described in <xref target="RFC2231"/>.
			Support for RFC 2231 parameters might require reformatting
			of header fields during conversion. Consider the following
			</t>

			<figure><artwork>
     C: D011 FETCH 3 BODY[1.MIME]
     S: * 3 FETCH (BODY[1.MIME] {118}
     S: Content-Type: text/plain; charset=utf-8;
     S:  foo*0*=utf-8'fr'tr%c0;
     S:  foo*1*(very)=%03s_m%c0;
     S:  foo*2*=(nasty)%09chant
     S:
     S: D011 OK
			</artwork></figure>
			
			<t>
			The server should preserve the headers during the
			conversion as much as possible.  In case the characters are split
			(legally!) between fragments of an encoded parameter, the server
			MUST consolidate the parameter fragments, and convert, emit, and
			re-fragment them as necessary in order to keep the line length
			less than 78.  Comments embedded like this SHOULD be preserved
			during conversion, but clients MUST gracefully handle the situation
			where comments are removed entirely.  If the comments are
			preserved, they MAY be moved after the parameter.  For example
			(continuing the previous example):
			</t>

			<figure><artwork>
     C: D012 CONVERT 3 (NIL) BODY[1.MIME]
     S: * 3 CONVERTED (TAG "D012") (BODY[1.MIME] {109}
     S: Content-Type: text/plain; charset=utf-8;
     S:  foo*0*=utf-8'fr'tr%c0%03s_;
     S:  foo*1*=%m%c0%09chant (very)(nasty)
     S:
     S: D012 OK
			</artwork></figure>
			
			<t>
			No destination MIME type MUST be specified with
			BODY[HEADER], BODY[section.HEADER], or BODY[section.MIME].
			That is, BODY[HEADER], BODY[section.HEADER], or BODY[section.MIME] can only be used
			with the "default conversion".
			When performing these conversions, the server SHOULD leave encoded words
			as encoded words. A failure to do so may alter the semantics of structured headers.
			</t>

		</section>


		<section title="CONVERT Conversion Parameters">
			
			<t>
			The registry established by <xref target="MEDIAFEAT-REG"/> defines names
			of conversion parameters that can be used in the CONVERT command.
			Support for some conversion parameters is mandatory, as described in
			<xref target="mandatory-conversions"/>.
			</t>
			
			<t>
			According to <xref target="MEDIAFEAT-REG"/>, conversion parameter names
			are case-insensitive.
			</t>
			
			<t>
			The following example illustrates how target picture dimensions can
			be specified in a CONVERT request using the PIX-X and PIX-Y
			parameters defined in <xref target="DISP-FEATURES"/>.
			</t>
			
			<figure><artwork><![CDATA[
     C: e001 UID CONVERT 100 ("IMAGE/JPEG" ("PIX-X" "128"
         "PIX-Y" "96")) BINARY[2]  
     S: * 2 CONVERTED (TAG "e001") (UID 100 BINARY[2] ~{4182}   
        <this part of a document is a rescaled image in
         JPEG format with width=128, height=96.>  
        )  
     S: e001 OK UID CONVERT COMPLETED 
			]]></artwork></figure>

			<section anchor="mandatory-conversions" title="Mandatory-to-Implement Conversions and Conversion Parameters">
				<t>
				A server implementing CONVERT MUST support charset conversions 
				for the text/plain MIME type, and MUST support charset 
				conversions from iso-8859-1, iso-8859-2, iso-8859-3, iso-8859-4,
				iso-8859-5, iso-8859-6, iso-8859-7, iso-8859-8, and iso-8859-15 to
				utf-8.
				</t>
				
				<t>
				The server MUST list "text/plain" as an allowed destination
				conversion from "text/plain" MIME type (see <xref target="conversions-cmd"/>).
				A command 'CONVERSIONS "text/plain" "text/plain"' MUST also return 
				"charset" and "unknown-character-replacement" (see <xref target="unknown-character-replacement-reg"/>) as
				supported conversion parameters in the corresponding CONVERSION response.
				</t>
				
				<t>
				IMAP servers implementing the CONVERT extension MUST
				support recognition of the "charset" <xref target="CHARSET-REG"/> parameter for
				text/plain, text/html, text/css, text/csv, text/enriched, and
				text/xml MIME types.
				Note, a server implementation is not required to support any
				conversion from the text MIME subtypes specified above, except for
				the mandatory-to-implement conversion described above.
				That is, a server implementation MUST support the "charset" parameter
				for text/csv, only if it supports any conversion from text/csv.
				</t>

				<t>
				The server MUST support decoding of <xref target="RFC2047"/> headers and their
				conversion to UTF-8 as long as the encoded words are in one of the
				supported charsets.
				</t>

				<t>
				Servers SHOULD offer additional character encoding conversions where 
				they make sense, as character conversion libraries are generally 
				available on many platforms.
				</t>

				<t>
				If the server cannot carry out the charset conversion while
				preserving all the characters (i.e., a source character can't be
				represented in the target charset), and the
				"unknown-character-replacement" conversion parameter is not
				specified, then the server MUST fail the conversion and MUST return
				the untagged ERROR BADPARAMETERS response (see <xref target="responses"/>).
				If the value specified in the "unknown-character-replacement"
				conversion itself can't be represented in the target charset,
				then the server MUST also fail the conversion and MUST return
				the untagged ERROR BADPARAMETERS response (see <xref target="responses"/>).
				</t>

			</section>
			
			<section title="Additional Features for Mobile Usage">
				
				<t>
				This section is informative.
				</t>
				
				<t>
				Based on the expected usage of CONVERT in mobile environments,
				server implementors should consider support for the following
				conversions:
					<list style="symbols">
						<t>
						 Conversion of HTML and XHTML documents to 
						 text/plain in ways that preserve at the minimum the document 
						 structure and tables. 
						</t>
						
						<t>
						 Image conversions among the types image/gif, 
						 image/jpeg, and image/png for at least the following parameters: 
							<list style="symbols">
								<t>
								size limit (i.e., reduce quality)
								</t>
								
								<t>
								width ("pix-x" parameter)
								</t>
								
								<t>
								height ("pix-y" parameter)
								</t>
								
								<t>
								resize directive (crop, stretch, aspect ratio)
								</t>
							</list>
						The support for "depth" may also be of interest. 
						</t>
					</list>
				</t>
				
				<t>
				Audio conversion is also of interest but the relevant formats 
				depend significantly on the usage context. 
				</t>

			</section>

		</section>

		<section anchor="request-response" title="Request/Response Data Items to CONVERT/UID CONVERT Commands">

			<section title="CONVERTED Untagged Response">
				
			  <t><list style="hanging" hangIndent="11">
				<t hangText="Contents:">convert correlator<vspace/>
				CONVERTED return data items
				</t>
			</list></t>
				
				<t>
				The CONVERTED response may be sent as a result of a successful,
				partially successful, or unsuccessful CONVERT
				or UID CONVERT command specified in <xref target="convert-cmd"/>.
				</t>
	   
				<t>
				The CONVERTED response starts with a message number, followed by
				the "CONVERTED" label. The label is followed by a convert correlator,
				which contains the tag of the command that caused the response to be
				returned. This can be used by a client to match a CONVERTED response
				against a corresponding CONVERT/UID CONVERT command.
				</t>
	   
				<t>
				The convert correlator is followed by a list of one or
				more CONVERT return data items. If the UID data item is returned,
				it MUST be returned as the first data item in the CONVERTED response.
				This requirement is to simplify client implementations.
				See <xref target="convert-abnf"/> and the remainder of 
				<xref target="request-response"/> for more details.
				</t>
				
			</section>
			
			<section title="BODYPARTSTRUCTURE CONVERT Request and Response Item">
				
				<t>BODYPARTSTRUCTURE[section-part]
				</t>
				
				<t>
				The CONVERT extension defines the BODYPARTSTRUCTURE CONVERT data item.
				Data contained in the BODYPARTSTRUCTURE return data item follows the
				exact syntax specified in the
				<xref target="RFC3501"/> BODYSTRUCTURE data item, but only contains information for
				the converted part.  All information contained in BODYPARTSTRUCTURE 
				pertains to the state of the part after it is converted, such as the 
				converted MIME type, sub-type, size, or charset.
				Note that the client can expect the returned MIME type to match
				the one it requested (as the server is required to obey the requested
				MIME type) and can treat mismatch as an error.
				</t>
				
				<t>
				The returned BODYPARTSTRUCTURE data MUST match the BINARY data
				returned for exactly the same conversion in the same IMAP
				"session". This requirement allows a client to request
				BODYPARTSTRUCTURE and BINARY data in separate commands in the same
				IMAP session.
				</t>
				
				<t>
				If the client lists a BODYPARTSTRUCTURE data item for a section-part
				before a BINARY data item for the same section-part,
				then, in the CONVERTED response, the server MUST return
				the BODYPARTSTRUCTURE data prior to the corresponding BINARY data.
				Also, any BODYSTRUCTURE data items MUST be after the UID data item if the
				UID data item is present.
				Both requirements are to simplify handling of converted data in clients.
				</t>
				
				<figure><artwork><![CDATA[
   Example:
         C: e002 CONVERT 2 (NIL ("PIX-X" "128" "PIX-Y" "96")) (BINARY[2]
             BODYPARTSTRUCTURE[2])
         S: * 2 CONVERTED (TAG "e002") (BODYPARTSTRUCTURE[2] ("IMAGE"
             "JPEG" () NIL NIL "8bit" 4182 NIL NIL NIL) BINARY[2]
             ~{4182}
            <this part of a document is a rescaled image in
             JPEG format with width=128, height=96.>  
            )  
         S: e002 OK CONVERT COMPLETED 
				]]></artwork></figure>

			</section>
			
			<section title="BINARY.SIZE CONVERT Request and Response Item">

				<t>BINARY.SIZE[section-part]
				</t>
				
				<t>
				This item requests the converted size of the section (i.e., the size to
				expect in a response to the corresponding CONVERT BINARY
				request). The returned value MUST be exact and MUST NOT
				change during a duration of an IMAP "session", unless
				the message is expunged in another session (see below). This allows a
				client to download a converted part in chunks (using
				"&lt;partial&gt;"). This requirement means that in most cases
				the server needs to perform conversion of the requested
				body part before returning its size.
				</t>
				
				<t>
				If the message is expunged in another session, then the server
				MAY return the value 0 in response to the BINARY.SIZE request item
				later in the same session.
				</t>
				
				<t>
				In order to allow for upgrade of server transcoding
				components, clients MUST NOT assume that repeating a
				particular body part conversion in another IMAP "session"
				would yield the same result as a previous conversion of
				the very same body part -- any characteristics of the converted
				body part might be different (format, size, etc.). In
				particular, clients MUST NOT cache sizes of converted
				messages/body parts beyond duration of any IMAP "session",
				or use sizes obtained in one connection in another IMAP
				connection to the same server.
				</t>
				
				<t>
				Historical note: Previous experience with
				IMAP servers that returned estimated RFC822.SIZE value shows
				that this caused interoperability problems. If the server
				returns a value that is smaller than the actual size, this
				will result in data truncation if &lt;partial&gt; download is used.
				If the server returns a value that is bigger than the actual
				size, this might mislead a client to believe that it doesn't
				have enough storage to download a body part.
				</t>
				
				<t>
				Note for client implementors: client authors are cautioned
				that this might be an expensive operation for some server
				implementations. Requesting BINARY.SIZE for a large number
				of converted body parts or for multiple conversions of the
				same body part can result in slow performance and/or excessive
				server load and is discouraged.  Client implementors should consider
				implementation approaches that limit this request to only
				the most necessary cases and are encouraged to test the
				performance impact of BINARY.SIZE with multiple server implementations.
				</t>
				
			</section>

			<section anchor="available-conversions" title="AVAILABLECONVERSIONS CONVERT Request and Response Item">

				<t>AVAILABLECONVERSIONS[section-part] allows the client to request
				the list of target MIME types the specified body part of a message
				or the whole message can be converted to. This data item is only useful
				when the default conversion (see <xref target="convert-cmd"/>) is requested.
				</t>

				<t>This data item MUST return a list
				of target MIME types that is a subset
				of the list returned by the CONVERSIONS command for the same source and
				target MIME type pairs. If specific conversion is requested, it MUST
				return the target MIME type as requested in the CONVERT command, or 
				the ERROR phrase.
				</t>

				<t>For both specific or default conversion requests, if conversion parameters
				are specified, then the server must take them into consideration when generating
				the list of target MIME types. For example, if one or more of the conversion
				parameters doesn't apply to a potential target MIME type, then such MIME type
				MUST be omitted from the resulting list. If the server only had a single
				target MIME type candidate and it was discarded due to the list of conversion
				parameters, then the server SHOULD return the ERROR phrase instead of the empty
				list of the target MIME types.
				</t>
				
				<t>The AVAILABLECONVERSIONS request SHOULD be processed quickly if specified
				by itself. Note that if a MIME type is returned in response to the AVAILABLECONVERSIONS,
				there is no guaranty that the corresponding BINARY/BINARY.SIZE/BODYPARTSTRUCTURE
				CONVERT request will not fail.</t>

				<figure><artwork><![CDATA[
   Example:
         C: f001 CONVERT 2 (NIL) (AVAILABLECONVERSIONS[2])
         S: * 2 CONVERTED (TAG "f001") (AVAILABLECONVERSIONS[2]
		     (("IMAGE/JPEG" "application/PostScript"))
         S: f001 OK CONVERT COMPLETED 
				]]></artwork></figure>

			</section>
			
			<section title="Implementation Considerations">
				
				<t>Note that this section is normative.</t>
				
				<t>
				Servers MAY refuse to execute conversion requests that convert
				multiple messages and/or body parts at once, e.g., a conversion
				request that specifies multiple message numbers/UIDs.				
				If the server refuses a conversion because the request lists
				too many messages, the server MUST return the MAXCONVERTMESSAGES
				response code (see
				<xref target="responses"/>). For example:
				</t>

				<figure><artwork>
    C: g001 CONVERT 1:* ("text/plain" ("charset" "us-ascii"))
        BINARY[3]
    S: g001 NO [MAXCONVERTMESSAGES 1] 
				</artwork></figure>
				
				<t>
				If the server refuses a conversion because the request lists
				too many body parts, the server MUST return the MAXCONVERTPARTS
				response code (see <xref target="responses"/>). For example:
				</t>

				<figure><artwork>
    C: h001 CONVERT 1 ("text/plain" ("charset" "us-ascii"))
        (BINARY[1] BINARY[2])

    S: g001 NO [MAXCONVERTPARTS 1] You can only request 1 body part at
        any given time
				</artwork></figure>
				
				<t>
				Note for server implementors: In order to improve performance,
				implementations SHOULD cache converted body parts.
				For example, the server may perform a body part conversion
				when it receives the first BINARY.SIZE[...], BODYPARTSTRUCTURE[...],
				or BINARY[...] request and cache it until the client requests
				conversion/download of another body part, a different conversion
				of the same body part, or until the mailbox is
				closed. In order to mitigate denial-of-service attacks from
				misbehaving or badly-written clients, a server SHOULD limit
				the number of converted body parts it can cache. Servers SHOULD
				be able to cache at least 2 conversions at any given time.
				</t>
				
			</section>
		
		</section>

		<section anchor="responses" title="Status Responses and Response Code Extensions">
			
			<t>
			A syntactically invalid MIME media type SHOULD
			generate a BAD tagged response from the server. An unrecognized MIME
			media type generates a NO tagged response.
			</t>
			
			<t>
			Some transcodings may require parameters. If a transcoding request
			with no parameters is sent for a format which requires parameters,
			the server will return an ERROR MISSINGPARAMETERS phrase in
			place of the data associated with the data items requested.
			This is analogous to the NIL response in FETCH, but with structured
			data associated with the failure.
			</t>
			
			<t>
			If the server is unable to perform the requested conversion because
			a resource is temporary unavailable (e.g., lack of disk space,
			temporary internal error, transcoding service down), then the server
			MUST return a tagged NO response that SHOULD contain the TEMPFAIL
			response code (see below), or an ERROR TEMPFAIL phrase.
			</t>

			<t>
			If the requested conversion cannot be performed because of a
			permanent error, for example, if a proprietary document format has no 
			existing transcoding implementation, the server MUST return a 
			CONVERTED response containing a ERROR BADPARAMETERS or ERROR
			MISSINGPARAMETERS phrase.
			</t>
			
			<t>
			The server MAY choose to return one ERROR phrase for a single
			conversion if several related data items are requested.  For
			instance:
			</t>
 
			<figure><artwork>
  C: b002 CONVERT 2 ("text/plain" ("charset" "us-ascii"))
      (BINARY[3] BODYPARTSTRUCTURE[3])
  S: * 2 CONVERTED (tag "b002") (BODYPARTSTRUCTURE[3]
      (ERROR "Source text has non us-ascii" BADPARAMETERS
      "text/html" "text/plain" ("charset" "us-ascii")))
  S: b002 NO All conversions failed
			</artwork></figure>
			
			<t>
			If at least one conversion succeeds, the server MUST return an OK
			response. If all conversions fail, the server MAY return OK or NO.
			For instance:
			</t>
 
			<figure><artwork><![CDATA[
  C: b002 CONVERT 2 ("text/plain" ("charset" "us-ascii"))
      (BINARY[3] BODYPARTSTRUCTURE[3] BINARY[4]
      BODYPARTSTRUCTURE[4])
  S: * 2 CONVERTED (tag "b002") (BODYPARTSTRUCTURE[3] 
      (ERROR "Source text has non us-ascii" BADPARAMETERS
      "text/html" "text/plain" ("charset" "us-ascii"))
      BODYSTRUCTURE[4] ("TEXT" "PLAIN" (CHARSET US-ASCII)
      NIL NIL "8bit" 4182 NIL NIL NIL) BINARY[4] {4182}
        <body in text plain>
     )
  S: b002 OK Some conversions failed
			]]></artwork></figure>
			
			<t>
			In general, the client can tell from the BODYPARTSTRUCTURE response
			whether or not its request was honored exactly, but may not know the
			reasons why.
			</t>
			
			<t>
			This document defines the following response codes that can be
			returned in the tagged NO response code.
			</t>

		<t><list style="hanging" hangIndent="6">
			<t
			hangText="TEMPFAIL -">The transcoding request failed temporarily. It might
			succeed later, so the client MAY retry.
			</t>
			
			<t
			hangText="MAXCONVERTMESSAGES &lt;number&gt; -">The server is unable or unwilling to
			convert more than &lt;number&gt; messages in any given CONVERT/UID CONVERT
			request.
			</t>
			
			<t
			hangText="MAXCONVERTPARTS &lt;number&gt; -">The server is unable or unwilling to
			convert more than &lt;number&gt; body parts of a message at once in any
			given CONVERT/UID CONVERT request.
			</t>
		</list></t>
			
		<t>
		The word ERROR is always followed by an informal
		human-readable descriptive text, which is followed by
		the convert-error-code. The convert-error-code MUST
		be one of the following:
		</t>
			
		<t><list style="hanging" hangIndent="6">
			<t
			hangText="TEMPFAIL mm -">The transcoding request failed temporarily. It might
			succeed later, so the client MAY retry.  The client SHOULD wait for
			at least mm minutes before retrying.
			</t>
			
			<t hangText='BADPARAMETERS from-concrete-mime-type to-mime-type
			"(" transcoding&nbhy;params ")" -'>
<vspace />
			The listed parameters were not understood, not valid for the
			source/destination MIME type pair, had invalid values or could not be
			honored for another reason noted in the human-readable text that was
			specified after the ERROR label. The transcoding-params can be
			omitted, in which case, it means that the conversion from the
			from-concrete-mime-type to the to-mime-type is not possible. If the
			from-concrete-mime-type is NIL, this means that the specified body
			part doesn't exist. All unrecognized or irrelevant parameters MUST be
			listed in the transcoding-params. It is not legal behavior to ignore
			irrelevant parameters.

			<vspace	blankLines="1" />

			Note that if the client requested the "default conversion" (see
			<xref target="convert-cmd"/>), the to-mime-type contains the destination MIME type
			chosen by the server.
			</t>
			
			<t hangText='MISSINGPARAMETERS from-concrete-mime-type to-mime-type
			"(" transcoding-params ")" -'>
<vspace />			  
			The listed parameters are required for conversion of the specified
			source MIME type to the destination MIME type, but were not seen in
			the request.
			Note that if the client requested the "default conversion" (see
			<xref target="convert-cmd"/>), the to-mime-type contains the destination MIME type
			chosen by the server.
			</t>
		</list></t>

			<figure><artwork><![CDATA[
   Examples:
 
      C: b002 CONVERT 2 ("APPLICATION/PDF") BINARY[3]
      S: b002 NO [TEMPFAIL] All conversions failed
 
      C: b003 CONVERT 2 ("TEXT/PLAIN") BINARY[3]
      S: * 2 CONVERTED (tag "b003") (BINARY[3]
          (ERROR "CHARSET must be specified for text conversions"
          MISSINGPARAMETERS (CHARSET)))
      S: b003 NO All conversions failed

      C: b005 CONVERT 2 ("TEXT/PLAIN" (CHARSET "US-ASCII" 
                UNKNOWN-CHARACTER-REPLACEMENT "<badchar>")) BINARY[3]
      S: * 2 CONVERTED (tag "b005") (BINARY[3]
          (ERROR "UNKNOWN-CHARACTER-REPLACEMENT limited to 4
          bytes" BADPARAMETERS (UNKNOWN-CHARACTER-REPLACEMENT
          "<badchar>")))
      S: b005 NO All conversions failed
			]]></artwork></figure>

		</section>

		<section anchor="convert-abnf" title="Formal Syntax">
			
			<t>
			The following syntax specification uses the augmented Backus-Naur 
			Form (ABNF) notation as used in <xref target="ABNF"/>, and incorporates by reference 
			the core rules defined in that document. 
			</t>
			
			<t>
			This syntax augments the grammar specified in <xref target="RFC3501"/> and 
			<xref target="RFC3516"/>. Non-terminals not defined in this document can be found
			in <xref target="RFC3501"/>, <xref target="RFC3516"/>, <xref target="IMAPABNF"/>,
			<xref target="MIME-MTSRP"/>, and <xref target="MEDIAFEAT-REG"/>.
			</t>

<figure><artwork type="ABNF"><![CDATA[
      command-select  =/ convert

      uid             =/ "UID" SP convert
                    ; Unique identifiers used instead of message
                    ; sequence numbers
   
      convert         = "CONVERT" SP sequence-set SP convert-params SP
                        ( convert-att /
                          "(" convert-att *(SP convert-att) ")" )

      convert-att     = "UID" /
                        "BODYPARTSTRUCTURE" section-convert /
                        "BINARY" section-convert [partial] /
                        "BINARY.SIZE" section-convert /
                        "BODY[HEADER]" /
                        "BODY[" section-part ".HEADER]" /
                        "BODY[" section-part ".MIME]" /
                        "AVAILABLECONVERSIONS" section-convert
                    ; <partial> is defined in [RFC3516].
                    ; <section-part> is defined in [RFC3501].
   
      convert-params = "(" (quoted-to-mime-type / default-conversion)
                       [SP "(" transcoding-params ")"] ")" 

      quoted-to-mime-type = DQUOTE to-mime-type DQUOTE

      transcoding-params  = transcoding-param 
                            *(SP transcoding-param)

      transcoding-param-names  = transcoding-param-name
                            *(SP transcoding-param-name)

      transcoding-param  = transcoding-param-name SP
                           transcoding-param-value 
    
      transcoding-param-name = astring
               ; <transcod-param-name-nq> represented as a quoted,
               ; literal or atom.  Note that
               ; <transcod-param-name-nq> allows for "%", which is
               ; not allowed in atoms.  Such values must be
               ; represented as quoted or literal.

      transcod-param-name-nq = Feature-tag
               ; <Feature-tag> is defined in [MEDIAFEAT-REG].

      transcoding-param-value = astring 
    
      default-conversion = "NIL"

      message-data   =/ nz-number SP "CONVERTED" SP convert-correlator
                         SP convert-msg-attrs

      convert-correlator = "(" "TAG" SP tag-string ")"

      tag-string = string
                    ; tag of the command that caused
                    ; the CONVERTED response, sent as
                    ; a string.

      convert-msg-attrs = "(" convert-msg-att *(SP convert-msg-att) ")"
                    ; "UID" MUST be the first data item, if present.

      convert-msg-att = msg-att-semistat / msg-att-conv-static
                    
      msg-att-conv-static  = "UID" SP uniqueid
                    ; MUST NOT change for a message
      
      msg-att-semistat = 
                   ( "BINARY" section-convert ["<" number ">"] SP 
                      (nstring / literal8 / converterror-phrase) ) /
                   ( "BINARY.SIZE" section-convert SP
                      (number / converterror-phrase) ) /
                   ( "BODYPARTSTRUCTURE" section-convert SP
                      (body / converterror-phrase) ) /
                   ( "AVAILABLECONVERSIONS" section-convert SP
                      (mimetype-list / converterror-phrase) )
                    ; MUST NOT change during an IMAP "session",
                    ; but not necessarily static in the long term.

      section-convert = section-binary
                    ; <section-binary> is defined in [RFC3516].
                    ;
                    ; Note that unlike [RFC3516], conversion
                    ; of a top level multipart/* is allowed.

      resp-text-code =/ "TEMPFAIL" /
                        "MAXCONVERTMESSAGES" SP nz-number /
                        "MAXCONVERTPARTS" SP nz-number
          ; <resp-text-code> is defined in [RFC3501].

      mimetype-and-params = quoted-to-mime-type
          [SP "(" transcoding-params ")"]
          ; always includes a specific MIME type

      mimetype-list = "(" "(" [quoted-to-mime-type
                               *(SP quoted-to-mime-type)] ")" ")"
          ; Unordered list of MIME types.  It can be empty.
          ;
          ; Two levels of parenthesis is needed to distinguish this
          ; data from <converterror-phrase>.

      converterror-phrase = "(" "ERROR" SP
           convert-err-descript SP convert-error-code ")"

      convert-error-code = "TEMPFAIL" [SP nz-number]
                         / bad-params
                         / missing-params
      
      convert-err-descript = string
           ; Human-readable text explaining the conversion error.
		   ; The default charset is US-ASCII, unless
		   ; the LANGUAGE command [IMAP-I18N] is called, when
		   ; the charset changes to UTF-8.

      quoted-from-mime-type = DQUOTE from-concrete-mime-type DQUOTE

      bad-params = "BADPARAMETERS"
             1*(SP (quoted-from-mime-type / nil)
                SP mimetype-and-params)
          ; nil is only returned when the body part doesn't exist.

      missing-params = "MISSINGPARAMETERS"
             1*(SP quoted-from-mime-type SP
                   mimetype-and-missing-params)

      mimetype-and-missing-params = quoted-to-mime-type
          "(" transcoding-param-names ")"
          ; always includes a specific MIME type
          
      concrete-mime-type = type-name "/" subtype-name  
                      ; i.e., "type/subtype".
                      ; type-name and subtype-name
                      ; are defined in [MIME-MTSRP].

      from-concrete-mime-type = concrete-mime-type

      to-mime-type = concrete-mime-type
          
      command-auth =/ conversions-cmd
		
      conversions-cmd = "CONVERSIONS" SP from-mime-type-req SP
                        to-mime-type-req
       
      from-mime-type-req = astring
        ; "mime-type-req" represented as IMAP <atom>,
        ; <quoted> or <literal>
       
      to-mime-type-req = astring
        ; <mime-type-req> represented as IMAP <atom>,
        ; <quoted> or <literal>.
        ; Note that <mime-type-req> allows for "*",
        ; which is not allowed in <atom>.  Such values must
        ; be represented as <quoted> or <literal>.

      any-mime-type  = "*"

      mime-type-req = any-mime-type /
                      (type-name "/" any-mime-type) /
                      concrete-mime-type
        ; '*', 'type/*' or 'type/subtype'.
        ; type-name is defined in [MIME-MTSRP].

      response-payload =/ conversion-data

      conversion-data = "CONVERSION" SP quoted-from-mime-type SP
                        quoted-to-mime-type
                        [SP "(" transcoding-param-name
                         *(SP transcoding-param-name) ")"]
]]></artwork></figure>

		</section>

		<section title="Manageability Considerations">

			<t>The monitoring of CONVERT operation is similar
			to monitoring of the IMAP FETCH operation.</t>

			<t>At the time of writing this document, there is no standard IMAP MIB defined.
			Similarly, a standard MIB for monitoring CONVERT operations and their failures
			does not exist. However, the authors believe that
			in the absence of such a MIB, server implementations SHOULD provide operators
			with tools to report the following information:
				<list style="symbols">
					<t>which conversions (source and target MIME types and possibly
					conversion parameters used) are invoked more frequently and
					how long they take,</t>
					
					<t>information about conversion errors and which error condition
					caused them (see
					<xref target="responses"/>), and</t>
					
					<t>information about users which invoke conversion operation.</t>
				</list>
					
			This information can help operators to detect client abuse of this extension
			and scalability issues that might arise from its use.
			</t>

			<t>Standardizing these tools may be the subject of future work.</t>
		</section>		
		
		<section title="IANA Considerations">
			
			<t>
			IMAP4 capabilities are registered by publishing a Standards Track or 
			IESG-approved Experimental RFC. This document 
			defines the CONVERT IMAP capability.  IANA has added this
			extension to the IANA IMAP Capability registry.
			</t>
			
			<t>
			IANA has performed registrations as defined in
			the following
			subsections.
			</t>
			
			<section anchor="unknown-character-replacement-reg" title="Registration of unknown-character-replacement Media Type Parameter">
				<t>
				IANA has added the following registration to the registry
				established by RFC 2506.
				</t>

<figure><artwork><![CDATA[
   To: "Media feature tags mailing list"
       <media-feature-tags@apps.ietf.org>
   Subject: Registration of media feature tag
            unknown-character-replacement

   Media feature tag name:
      unknown-character-replacement

   ASN.1 identifier associated with feature tag:
      1.3.6.1.8.1.33

   Summary of the media feature indicated by this feature tag:
       Allows servers that can perform charset conversion for text/plain
       text/html, text/css, text/csv, text/enriched, and text/xml MIME
       types to replace characters not supported by the target charset
       with a fixed string, such as "?".
       This feature tag is also applicable to other conversions
       to text, e.g., conversion of images using OCR (optical
       character recognition).

   Values appropriate for use with this feature tag:
       The feature tag contains a UTF-8 string used to replace any
       characters from the source media type that can't be
       represented in the target media type.

   The feature tag is intended primarily for use in the following
   applications, protocols, services, or negotiation mechanisms:
       IMAP CONVERT extension [RFC5259]

   Examples of typical use:
      C: b001 CONVERT 2 BINARY[3 ("text/plain" ("charset"
          "us-ascii" "unknown-character-replacement" "?"))]

   Related standards or documents:
      [RFC5259]
      [CHARSET-REG]

   Considerations particular to use in individual applications,
   protocols, services, or negotiation mechanisms:
      None

   Interoperability considerations: None

   Security considerations: None

   Additional information:
      This media feature only make sense for MIME types that
      also support the "charset" media type parameter
      [CHARSET-REG].

   Name(s) & email address(es) of person(s) to contact for further
   information:
      Alexey Melnikov <alexey.melnikov@isode.com>

   Intended usage:
      COMMON

   Author/Change controller:
      IETF

   Requested IANA publication delay:
      None

   Other information:
      None
]]></artwork></figure>
				
		</section>
		
		</section>
		
		<section title="Security Considerations">
			
			<t>
			It is to be noted that some conversions may present security threats 
			(e.g., converting a document to a damaging executable, exploiting a 
			buffer overflow in a media codec/parser, or a denial-of-service 
			attack against a client or a server such as requesting an image be 
			scaled to extremely large dimensions). Server SHOULD refuse to execute
			CPU-expensive conversions.  Servers should avoid dangerous
			conversions if possible.  Whenever possible, servers should perform
			verification of the converted  attachments before returning them
			to the client. Clients should be careful when requesting conversions
			or processing transformed attachments. Clients SHOULD use mutual
			Simple Authentication and Security Layer (SASL) authentication and the SASL/TLS integrity layer, to make sure
			they are talking to trusted servers.
			</t>
			
			<t>
			When the client requests a server-side conversion of a signed body
			part (e.g., a part inside multipart/signed), there is no way for
			the client to verify that the converted content is authentic.
			A client not trusting the server to perform conversion of a signed
			body part can download the signed object, verify the signature, and
			perform the conversion itself.
			</t>
			
			<t>
			A client can create a carefully crafted bad message with the APPEND
			command followed by the CONVERT command to attack the server. If the
			server's conversion function or library has a security problem
			(such as vulnerability to a buffer overflow),
			this could result in privilege escalation or denial of service.
			In order to mitigate such attacks, servers SHOULD log the client
			authentication identity on APPEND and/or CONVERT operations in order
			to facilitate tracking of abusive clients.
			Also server implementors SHOULD isolate the conversion function or library
			from the privileged mailstore, perhaps by running it within a distinct process.
			</t>
			
			<t>
			Deployments in which the actual transcoding is done outside the IMAP 
			server in a separate server are recommended to keep the servers in 
			the same trusted domain (e.g., subnet).
			</t>

		</section>

		<section title="Acknowledgments">
			
			<t>
			Stephane H. Maes and Ray Cromwell from Oracle edited several
			earlier versions of this document. Their contribution is gratefully
			acknowledged.
			</t>
			
			<t>
			The authors want to specifically acknowledge the excellent criticism 
			and comments received from Randall Gellens (Qualcomm), Arnt
			Gulbrandsen (Oryx), Zoltan Ordogh (Nokia), Ben Last (Emccsoft),
			Dan Karp (Zimbra), Pete Resnick (Qualcomm), Chris Newman (Sun),
			Ted Hardie (Qualcomm), Larry Masinter (Adobe), Philip Guenther
			(Sendmail), Greg Vaudreuil (Alcatel-Lucent), David Harrington
			(Comcast), Dave Cridland (Isode), Pasi Eronen (Nokia),
			Magnus Westerlund (Ericsson), and Jari Arkko (Ericsson),
			which improved the quality of this specification considerably.
			</t>

			<t>The authors would also like to specially thank Dave Cridland for the MEDIACAPS
			command proposal and Dan Karp for the CONVERSIONS command proposal.
			</t>
			
			<t>
			The authors also want to thank all who have contributed key insight 
			and extensively reviewed and discussed the concepts of CONVERT and 
			its predecessor P-IMAP. In particular, this includes 
			the authors of the LCONVERT document: Rafiul Ahad (Oracle Corporation),
			Eugene Chiu (Oracle Corporation), Ray Cromwell (Oracle Corporation),
			Jia-der Day (Oracle Corporation), Vi Ha (Oracle Corporation), Wook-Hyun
			Jeong (Samsung Electronics Co.&nbsp;LTF), Chang Kuang (Oracle 
			Corporation), Rodrigo Lima (Oracle Corporation), Stephane H. Maes  
			(Oracle Corporation), Gustaf Rosell (Sony Ericsson), Jean Sini
			(Symbol Technologies), Sung-Mu Son (LG Electronics), Fan Xiaohui
			(China Mobile Communications Corporation
			(CMCC)), and Zhao Lijun (China
			Mobile Communications Corporation (CMCC)).
			</t>

		</section>
	</middle>
	<back>
		
		<references title="Normative References">
			&rfc2119;
			&rfc2047;
			&rfc2231;
			&rfc3501;
			&rfc3516;
			<reference anchor="ABNF">
				<front>
					<title>Augmented BNF for Syntax Specifications: ABNF</title>
					<author initials="D" surname="Crocker" fullname="Dave Crocker" role="editor">
						<organization />
					</author>
					<author initials="P" surname="Overell" fullname="Paul Overell">
						<organization />
					</author>
					<date year="2008" month="January"/>
				</front>
				<seriesInfo name="STD" value="68" /> 
				<seriesInfo name="RFC" value="5234" /> 
				<format type="TXT" target="ftp://ftp.isi.edu/in-notes/rfc5234.txt" />
			</reference>

			<reference anchor='MIME-MTSRP'>
				<front>
					<title>Media Type Specifications and Registration Procedures</title>
					<author initials='N.' surname='Freed' fullname='N. Freed'>
					<organization /></author>
					<author initials='J.' surname='Klensin' fullname='J. Klensin'>
					<organization /></author>
					<date year='2005' month='December' />
					<abstract>
					<t>This document defines procedures for the specification and registration of media types for use in MIME and other Internet protocols.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
					</abstract>
				</front>

				<seriesInfo name='BCP' value='13' />
				<seriesInfo name='RFC' value='4288' />
				<format type='TXT' octets='52667' target='ftp://ftp.isi.edu/in-notes/rfc4288.txt' />
			</reference>

			<reference anchor='MEDIAFEAT-REG'>
				<front>
					<title>Media Feature Tag Registration Procedure</title>
					<author initials='K.' surname='Holtman' fullname='Koen Holtman'>
					<organization>Technische Universiteit Eindhoven</organization>
					<address>
					<postal>
					<street>Postbus 513</street>
					<street>Kamer HG 6.57</street>
					<city>Eindhoven</city>
					<code>5600 MB</code>
					<country>NL</country></postal>
					<email>koen@win.tue.nl</email></address></author>
					<author initials='A.' surname='Mutz' fullname='Andrew H. Mutz'>
					<organization>Hewlett-Packard Company</organization>
					<address>
					<postal>
					<street>11000 Wolfe Road</street>
					<street>42UO</street>
					<city>Cupertino</city>
					<region>CA</region>
					<code>95014</code>
					<country>US</country></postal>
					<email>andy_mutz@hp.com</email></address></author>
					<author initials='T.' surname='Hardie' fullname='Ted Hardie'>
					<organization>Equinix</organization>
					<address>
					<postal>
					<street>901 Marshall Street</street>
					<city>Redwood City</city>
					<region>CA</region>
					<code>94063</code>
					<country>US</country></postal>
					<email>hardie@equinix.com</email></address></author>
					<date year='1999' month='March' />
					<abstract>
						<t>Recent Internet applications, such as the World Wide Web, tie together a great diversity in data formats, client and server platforms, and communities. This has created a need for media feature descriptions and negotiation mechanisms in order to identify and reconcile the form of information to the capabilities and preferences of the parties involved.</t>
						<t>Extensible media feature identification and negotiation mechanisms require a common vocabulary in order to positively identify media features. A registration process and authority for media features is defined with the intent of sharing this vocabulary between communicating parties. In addition, a URI tree is defined to enable sharing of media feature definitions without registration.</t>
						<t>This document defines a registration procedure which uses the Internet Assigned Numbers Authority (IANA) as a central registry for the media feature vocabulary.</t>
						<t>Please send comments to the CONNEG working group at&lt;ietf-medfree@imc.org&gt;.Discussions of the working group are archived at&lt;URL: http://www.imc.org/ietf-medfree/&gt;.</t>
					</abstract>
				</front>

				<seriesInfo name='BCP' value='31' />
				<seriesInfo name='RFC' value='2506' />
				<format type='TXT' octets='24892' target='ftp://ftp.isi.edu/in-notes/rfc2506.txt' />
			</reference>

			<reference anchor='CHARSET-REG'>
				<front>
					<title>Registration of Charset and Languages Media Features Tags</title>
					<author initials='P.' surname='Hoffman' fullname='P. Hoffman'>
					<organization /></author>
					<date year='2000' month='November' />
					<abstract>
					<t>This document contains the registration for two media feature tags: "charset" and "language". [STANDARDS TRACK]</t>
					</abstract>
				</front>

				<seriesInfo name='RFC' value='2987' />
				<format type='TXT' octets='8799' target='ftp://ftp.isi.edu/in-notes/rfc2987.txt' />
			</reference>

			<reference anchor='IMAPABNF'>
				<front>
					<title>Collected Extensions to IMAP4 ABNF</title>
					<author initials='A.' surname='Melnikov' fullname='A. Melnikov'>
					<organization /></author>
					<author initials='C.' surname='Daboo' fullname='C. Daboo'>
					<organization /></author>
					<date year='2006' month='April' />
					<abstract>
					<t>Over the years, many documents from IMAPEXT and LEMONADE working groups, as well as many individual documents, have added syntactic extensions to many base IMAP commands described in RFC 3501. For ease of reference, this document collects most of such ABNF changes in one place.&lt;/t>&lt;t> This document also suggests a set of standard patterns for adding options and extensions to several existing IMAP commands defined in RFC 3501. The patterns provide for compatibility between existing and future extensions.&lt;/t>&lt;t> This document updates ABNF in RFCs 2088, 2342, 3501, 3502, and 3516. It also includes part of the errata to RFC 3501. This document doesn't specify any semantic changes to the listed RFCs. [STANDARDS TRACK]</t>
					</abstract>
				</front>

				<seriesInfo name='RFC' value='4466' />
				<format type='TXT' octets='33752' target='ftp://ftp.isi.edu/in-notes/rfc4466.txt' />
			</reference>
			
			
		</references>
		<references title="Informative References">

			<reference anchor='OMA-ME-RD'>
				<front>
				<title>Open Mobile Alliance Mobile Email Requirement Document</title>
				<author><organization>OMA</organization></author>
				<date day='20' month='December' year='2007' />
				</front>

				<seriesInfo name='OMA' value='55.919 3.0.0' />
				<format type='HTML' target='http://www.openmobilealliance.org/' />
			</reference>

			<reference anchor='OMA-STI'>
				<front>
				<title>Open Mobile Alliance, Standard Transcoding Interface Specification</title>
				<author><organization>OMA</organization></author>
				<date day='20' month='December' year='2005' />
				</front>

				<seriesInfo name='OMA' value='OMA-STI-V1_0' />
				<format type='HTML' target='http://member.openmobilealliance.org/ftp/Public_documents/BAC/STI/Permanent_documents/OMA-STI-V1_0-20050209-D.zip' />
			</reference>

			<reference anchor='DISP-FEATURES'>
				<front>
					<title>Media Features for Display, Print, and Fax</title>
					<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
					<organization>Xerox Corporation, Palo Alto Research Center</organization>
					<address>
					<postal>
					<street>3333 Coyote Hill Road</street>
					<city>Palo Alto</city>
					<region>CA</region>
					<code>94304</code>
					<country>US</country></postal>
					<facsimile>+1 650 812 4333</facsimile>
					<email>masinter@parc.xerox.com</email></address></author>
					<author initials='D.' surname='Wing' fullname='Dan Wing'>
					<organization>Cisco Systems, Inc.</organization>
					<address>
					<postal>
					<street>101 Cooper Street</street>
					<city>Santa Cruz</city>
					<region>CA</region>
					<code>95060</code>
					<country>US</country></postal>
					<phone>+1 831 457 5200</phone>
					<facsimile>+1 831 457 5208</facsimile>
					<email>dwing@cisco.com</email></address></author>
					<author initials='A.' surname='Mutz' fullname='Andrew H. Mutz'>
					<organization>Jutvision Corporation</organization>
					<address>
					<postal>
					<street>124 University Avenue</street>
					<street>Suite 202</street>
					<city>Palo Alto</city>
					<region>CA</region>
					<code>94301</code>
					<country>US</country></postal>
					<phone>+1 650 325 6787</phone>
					<facsimile>+1 650 325 9337</facsimile>
					<email>mutz@alum.mit.edu</email></address></author>
					<author initials='K.' surname='Holtman' fullname='Koen Holtman'>
					<organization>Technische Universiteit Eindhoven</organization>
					<address>
					<postal>
					<street>Postbus 513</street>
					<street>Kamer HG 6.57</street>
					<street>5600 MB Eindhoven</street>
					<country>NL</country></postal>
					<email>koen@win.tue.nl</email></address></author>
					<date year='1999' month='March' />
					<abstract>
					<t>This specification defines some common media features for describing image resolution, size, color, and image representation methods that are common to web browsing, printing, and facsimile applications. These features are registered for use within the framework of.</t>
					</abstract>
				</front>

				<seriesInfo name='RFC' value='2534' />
				<format type='TXT' octets='15466' target='ftp://ftp.isi.edu/in-notes/rfc2534.txt' />
			</reference>
			
			<reference anchor='LEM-STREAMING'>
				<front>
					<title>Streaming Internet Messaging Attachments</title>
					<author initials='N' surname='Cook' fullname='Neil L Cook'>
					<organization>Cloudmark</organization>
					</author>

					<date month='June' year='2008' />
				</front>
				<seriesInfo name='Work in'
				value='Progress' />
			</reference>
			
			<reference anchor='IMAP-I18N'>
				<front>
					<title>Internet Message Access Protocol Internationalization</title>
					<author initials='C' surname='Newman' fullname='Chris Newman'>
					<organization>Sun Microsystems</organization>
					</author>
					<author initials='A' surname='Gulbrandsen' fullname='Arnt Gulbrandsen'>
					<organization>Oryx Mail Systems GmhH</organization>
					</author>
					<author initials='A' surname='Melnikov' fullname='Alexey Melnikov'>
					<organization>Isode Limited</organization>
					</author>
					
					<date month='June' year='2008' />
				</front>
				<seriesInfo name='RFC' value='5255' />

			</reference>
			
		</references>
	</back>
</rfc>
