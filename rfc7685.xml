<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd"[
]>

<?rfc toc="yes" ?>  
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>


<rfc number="7685" category="std" submissionType="IETF" consensus="yes"
  ipr="trust200902" updates="5246">

  <front>
    <title abbrev="TLS ClientHello Padding Extension">A Transport Layer
    Security (TLS) ClientHello Padding Extension</title>
    <author initials="A." surname="Langley" fullname="Adam Langley">
      <organization>Google Inc</organization>
      <address>
        <email>agl@google.com</email>
      </address>
    </author>

    <date month="October" year="2015" />
    <area>Security</area>
    <abstract>
      <t>
        This memo describes a Transport Layer Security (TLS) extension that can be used to pad ClientHello messages to a desired size.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction" anchor="intro">
      <t>
        Successive <xref target="RFC5246">TLS</xref> versions have added support for more cipher suites and, over time, more TLS extensions have been defined. This has caused the size of the TLS ClientHello to grow, and the additional size has caused some implementation bugs to come to light. At least one of these implementation bugs can be ameliorated by making the ClientHello even larger. This is desirable given that fully comprehensive patching of affected implementations is difficult to achieve.
      </t>

      <t>
        This memo describes a TLS extension that can be used to pad a ClientHello to a desired size in order to avoid implementation bugs caused by certain ClientHello sizes.
      </t>
    </section>

    <section title="Requirements Notation">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
          target="RFC2119">RFC 2119</xref>.
      </t>
    </section>

    <section title="Padding Extension">
      <t>
        A new extension type (<spanx style="verb">padding(21)</spanx>) is defined and MAY be included by the client in its ClientHello message.
      </t>

      <figure>
        <artwork align="left">enum {
    padding(21), (65535)
} ExtensionType;</artwork>
      </figure>

      <t>
        The <spanx style="verb">extension_data</spanx> for the extension consists of an arbitrary number of zero bytes. For example, the smallest <spanx style="verb">padding</spanx> extension is four bytes long and is encoded as 0x00 0x15 0x00 0x00. A ten-byte extension would include six bytes of <spanx style="verb">extension_data</spanx> and would be encoded as:
      </t>

      <figure>
        <artwork align="left">
00 15 00 06 00 00 00 00 00 00
|---| |---| |---------------|
  |     |           |
  |     |           \- extension_data: 6 zero bytes
  |     |
  |     \------------- 16-bit, extension_data length
  |
  \------------------- extension_type for padding extension
        </artwork>
      </figure>

      <t>
        The client MUST fill the padding extension completely with zero bytes, although the padding extension_data field may be empty.
      </t>

      <t>
        The server MUST NOT echo the extension.
      </t>
    </section>

    <section title="Example Usage">
      <t>
        As an example, consider a client that wishes to avoid sending a ClientHello with a TLSCiphertext.length between 256 and 511 bytes (inclusive). This case is considered because at least one TLS implementation is known to hang the connection when such a ClientHello record is received.
      </t>

      <t>
        After building a ClientHello as normal, the client can add four bytes to the
	length (to account for the <spanx style="verb">msg_type</spanx> and
	<spanx style="verb">length</spanx> fields of the handshake protocol)
	and test whether the resulting length falls into that range. If it
	does, a padding extension can be added in order to push the length to
	(at least) 512 bytes.
      </t>

      <t>
        Note that if the original ClientHello size was between 505 and 507 bytes, then, with the handshake protocol overhead, the record payload would be between 509 and 511 bytes long. Since it's not possible for an extension to take less than four bytes of space, the additional padding would have to expand the ClientHello record payload beyond 512 bytes in these cases.
      </t>
    </section>

    <section title="Security Considerations">
      <t>
        The contents of the padding extension could be used as a covert channel. In order to prevent this, the contents are required to be all zeros, although the length of the extension can still be used as a much smaller covert channel.
      </t>
    </section>

    <section title="IANA Considerations">
      <t>
        IANA has permanently registered value 21 (padding) in the "ExtensionType
	Values" registry. 
      </t>
    </section>


  </middle>

  <back>


    <references title="Normative References">
<?rfc include="reference.RFC.2119"?>
<?rfc include="reference.RFC.5246"?>
    </references>
    <section title="Acknowledgements" numbered="no">
      <t>
        The author gratefully acknowledges the contributions of Wan-Teh Chang and the suggestions of Eric Rescorla.
      </t>
    </section>
  </back>
</rfc>
