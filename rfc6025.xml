<?xml version='1.0' encoding="US-ASCII"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc2560 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2560.xml'>
  <!ENTITY rfc5652 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5652.xml'>
  <!ENTITY rfc5280 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml'>
  <!ENTITY rfc5911 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5911.xml'>
  <!ENTITY rfc5912 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5912.xml'>
  <!ENTITY x690 PUBLIC ''
  'http://xml.resource.org/public/rfc/bibxml2/reference.CCITT.X690.2002.xml'>
  <!ENTITY x209 PUBLIC ''
      'http://xml.resource.org/public/rfc/bibxml2/reference.CCITT.X209.1988.xml'>
]>
  <?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc number="6025" category="info">
  <front>
    <title abbrev="ASN.1 Translation">ASN.1 Translation</title>
    <author initials="C.W." surname="Wallace" fullname="Carl Wallace">
      <organization>Cygnacom Solutions</organization>
      <address>
        <postal>
          <street>Suite 5400</street>
          <street>7925 Jones Branch Drive</street>
          <city>McLean</city>
          <region>VA</region>
          <code>22102</code>
        </postal>
        <email>cwallace@cygnacom.com</email>
      </address>
    </author>
    <author initials="C.G." surname="Gardiner" fullname="Charles Gardiner">
      <organization>BBN Technologies</organization>
      <address>
        <postal>
          <street>10 Moulton Street</street>
          <city>Cambridge</city>
          <region>MA</region>
          <code>02138</code>
        </postal>
        <email>gardiner@bbn.com</email>
      </address>
    </author>
    <date month="October" year="2010" />
    <area>Security</area>

    <abstract>
      <t>
        Abstract Syntax Notation One (ASN.1) is widely used throughout the IETF
Security Area and has been for many years.  Some specifications were written
using a now deprecated version of ASN.1 and some were written using the current
version of ASN.1.  Not all ASN.1 compilers support both older and current
syntax.  This document is intended to provide guidance to specification authors
and to implementers converting ASN.1 modules from one version of ASN.1 to
another version without causing changes to the "bits on the wire".  This
document does not provide a comprehensive tutorial of any version of ASN.1.
Instead, it addresses ASN.1 features that are used in IETF Security Area
specifications with a focus on items that vary with the ASN.1 version.  
      </t>
    </abstract>
  </front>
  <middle>
  <section title="Introduction">
        <t>
          This document is intended to serve as a tutorial for converting ASN.1 modules written using <xref target="CCITT.X208.1988"/> to <xref target="CCITT.X680.2002"/>, or vice versa.  Preparation of this document was motivated by <xref target="RFC5911"/> and <xref target="RFC5912"/>, which provide updated ASN.1 modules for a number of RFCs.
        </t>
    <t>The intent of this specification is to assist with translation of ASN.1
from one version to another without resulting in any changes to the encoded
results when using the Basic Encoding Rules or Distinguished Encoding Rules
<xref target="CCITT.X209.1988"/> <xref target="CCITT.X690.2002"/>.  Other encoding rules were not considered.</t>
    <t>
      Transforming a new ASN.1 module to an older ASN.1 module can be performed in a fairly mechanical manner; much of the transformation consists of deleting new constructs.  Transforming an older ASN.1 module to a newer ASN.1 module can also be done fairly mechanically, if one does not wish to move many of the constraints that are contained in the prose into the ASN.1 module.  If the constraints are to be added, then the conversion can be a complex process.
    </t>
        <section title="Terminology">
          <t>This document addresses two different versions of ASN.1. The old (1988) version was defined in a single document (X.208) and the newer (1998, 2002) version is defined in a series of documents (X.680, X.681, X.682, and X.683).  For convenience, the series of documents is henceforth referred to as X.68x.  Specific documents from the series are referenced by name where appropriate.</t>
        </section>
      </section>
  <section title="ASN.1 Design Elements">
        <t>
          When translating an ASN.1 module from X.208 syntax to X.68x syntax, or vice versa, many definitions do not require or benefit from change.  Review of the original ASN.1 modules updated by <xref target="RFC5911"/> and <xref target="RFC5912"/> and the revised modules included in those documents indicates that most changes can be sorted into one of a few categories.  This section describes these categories.
        </t>
      <section title="Open Types">
        <t>Protocols often feature flexible designs that enable other (later)
specifications to define the syntax and semantics of some features.  For
example, <xref target="RFC5280"/> includes the definition of the Extension
structure.  There are many instances of extensions defined in other
specifications.  Several mechanisms to accommodate this practice are available in X.208, X.68x, or both, as described below.</t>
        <section title="ANY DEFINED BY">
          <t>
            X.208 defines the ANY DEFINED BY production for specifying open types.  This typically appears in a SEQUENCE along with an OBJECT IDENTIFIER that indicates the type of object that is encoded.  The ContentInfo structure, shown below from <xref target="RFC5652"/>, uses ANY DEFINED BY along with an OBJECT IDENTIFIER field to identify and convey arbitrary types of data.  Each content type to be wrapped in a ContentInfo is assigned a unique OBJECT IDENTIFIER, such as the id&nbhy;signedData shown below.  However, X.208 does not provide a formal means for establishing a relationship between a type and the type identifier.  Any associations are done in the comments of the module and/or the text of the associated document.
          </t>
          <figure>
            <artwork>
              <![CDATA[
-- from RFC 5652
ContentInfo ::= SEQUENCE {
    contentType ContentType,
    content [0] EXPLICIT ANY DEFINED BY contentType }

ContentType ::= OBJECT IDENTIFIER    

id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
   us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }
 ]]>
            </artwork>
          </figure>
          <t>ANY DEFINED BY may also appear using an INTEGER to indicate the type of object that is encoded, as shown in the following example from <xref target="RFC5280"/>.</t>
          <figure>
            <artwork>
              <![CDATA[
-- from RFC 5280
ExtensionAttribute ::=  SEQUENCE {
    extension-attribute-type [0] IMPLICIT INTEGER
        (0..ub-extension-attributes),
    extension-attribute-value [1]
        ANY DEFINED BY extension-attribute-type }
 ]]>
      </artwork>
    </figure>
          <t>Though the usage of ANY DEFINED BY was deprecated in 1994, it appears in some active specifications. The AttributeValue definition in <xref target="RFC5280"/> uses ANY with a DEFINED BY comment to bind the value to a type identifier field.</t>

          <figure>
            <artwork>
              <![CDATA[
-- from RFC 5280
AttributeTypeAndValue ::= SEQUENCE {
    type     AttributeType,
    value    AttributeValue }

AttributeType ::= OBJECT IDENTIFIER

AttributeValue ::= ANY -- DEFINED BY AttributeType
 ]]>
</artwork>
</figure>

</section>

        <section title="OCTET STRINGs and BIT STRINGs">
          <t>
            Both X.208 and X.68x allow open types to be implemented using OCTET STRINGs and BIT STRINGs as containers.  The definitions of Extension and SubjectPublicKeyInfo in <xref target="RFC5280"/> demonstrate the usage of OCTET STRING and BIT STRING, respectively, to convey information that is further defined using ASN.1.
          </t>
          <figure>
            <artwork>
              <![CDATA[
-- from RFC 5280              
Extension  ::=  SEQUENCE  {
    extnID      OBJECT IDENTIFIER,
    critical    BOOLEAN DEFAULT FALSE,
    extnValue   OCTET STRING
    -- contains the DER encoding of an ASN.1 value
    -- corresponding to the extension type identified
    -- by extnID
}

SubjectPublicKeyInfo  ::=  SEQUENCE  {
     algorithm            AlgorithmIdentifier,
     subjectPublicKey     BIT STRING  }
 ]]>
            </artwork>
          </figure>

          <t>In both cases, the prose of the specification describes that the adjacent OBJECT IDENTIFIER value indicates the type of structure within the value of the primitive OCTET STRING or BIT STRING type.  For example, where an extnID field contains the value id&nbhy;ce&nbhy;basicConstraints, the extnValue field contains an encoded BasicConstraints as the value of the OCTET STRING, as shown in the dump of an encoded extension below.</t>

          <figure>
            <artwork>
              <![CDATA[
Tag Length      Value             
30   15:         SEQUENCE {
06    3:           OBJECT IDENTIFIER basicConstraints (2 5 29 19)
01    1:           BOOLEAN TRUE
04    5:           OCTET STRING, encapsulates {
30    3:               SEQUENCE {
01    1:                 BOOLEAN TRUE
       :                 }
       :               }
       :           }
  ]]>
            </artwork>
          </figure>

        </section>
        
          <section title="Information Object Classes">
            <t>
              Information object classes are defined in <xref target="CCITT.X681.2002"/>.  Object classes allow protocol designers to relate pieces of data that are in some way associated.  In the most generic of terms, an Information Object class can be thought of as a database schema, with Information Object Sets being instances of the databases.
            </t>

          <t>Unlike type definitions, object classes with the same structure are not equivalent.  Thus, if you have:</t>

          <t>
          <list>
            <t>FOO ::= TYPE-IDENTIFIER</t>
            <t>BAR ::= TYPE-IDENTIFIER</t>
          </list>
          </t>

          <t>FOO and BAR are not interchangeable.</t>

          <t>TYPE-IDENTIFIER is one of the predefined information object classes in Annex A of <xref target="CCITT.X681.2002"/>.  This provides for a simple mapping from an OBJECT IDENTIFIER to a data type.  The tag UNIQUE on &amp;id means that this value may appear only once in an Information Object Set; however, multiple objects can be defined with the same &amp;id value.
        </t>

          <t><xref target="RFC5911"/> uses the TYPE-IDENTIFIER construction to update the definition of ContentInfo, as shown below.</t>
            <figure>
              <artwork>
                <![CDATA[
-- TYPE-IDENTIFIER definition from X.681
TYPE-IDENTIFIER ::= CLASS
{
    &id OBJECT IDENTIFIER UNIQUE,
    &Type
}
WITH SYNTAX {&Type IDENTIFIED BY &id}

-- from updated RFC 5652 module in [RFC5911]
CONTENT-TYPE ::= TYPE-IDENTIFIER
ContentType ::= CONTENT-TYPE.&id

ContentInfo ::= SEQUENCE {
    contentType        CONTENT-TYPE.
                    &id({ContentSet}),
    content            [0] EXPLICIT CONTENT-TYPE.
                    &Type({ContentSet}{@contentType})}

ContentSet CONTENT-TYPE ::= {
    --  Define the set of content types to be recognized.
    ct-Data | ct-SignedData | ct-EncryptedData | ct-EnvelopedData |
    ct-AuthenticatedData | ct-DigestedData, ... }

-- other CONTENT-TYPE instances not shown for brevity
ct-SignedData CONTENT-TYPE ::=
     { SignedData IDENTIFIED BY id-signedData}
 ]]>
              </artwork>
            </figure>

            <t>
            This example illustrates the following:
            <list style="symbols">
              <t>Definition of an information object class: TYPE-IDENTIFIER and CONTENT-TYPE are information object classes.</t>
              <t>Definition of an information object, or an instance of an information object class: ct-SignedData is an information object.</t>
              <t>Definition of an information object set: ContentSet is an information object set.</t>
              <t>Usage of an information object: The definition of ContentInfo uses information from the CONTENT-TYPE information object class.</t>
              <t>Defining constraints using an object set: Both the contentType and content fields are constrained by ContentSet.</t>
            </list>
            </t>
            <t>As noted above, TYPE-IDENTIFIER simply associates an OBJECT IDENTIFIER with an arbitrary data type.  CONTENT-TYPE is a TYPE-IDENTIFIER.  The WITH SYNTAX component allows for a more natural language expression of information object definitions.</t>
            <t>ct-SignedData is the name of an information object that
associated the identifier id-signedData with the data type SignedData.  It is
an instance of the CONTENT-TYPE information object class.  The &amp;Type field
is assigned the value SignedData, and the &amp;id field is assigned the value
id-signedData.  The example above uses the syntax provided by the WITH SYNTAX
component of the TYPE-IDENTIFIER definition.  An equivalent definition that
does not use the provided syntax is as follows: </t>
            <figure>
              <artwork>
                <![CDATA[
ct-SignedData CONTENT-TYPE ::=
{ 
    &id id-signedData, 
    &Type SignedData
}    
 ]]>
              </artwork>
            </figure>
            <t>ContentSet is the name of a set of information objects derived
from the CONTENT-TYPE information object class.  The set contains six
information objects and is extensible, as indicated by the ellipsis (see <xref target="ver_and_ext"/>, "Versioning and Extensibility").</t>
            <t>ContentInfo is defined using type information from an information object, i.e., the type of the contentType field is that of the &amp;id field from CONTENT-TYPE.  An equivalent definition is as follows:</t>
            <figure>
              <artwork>
                <![CDATA[
ContentType ::= OBJECT IDENTIFIER    
 ]]>
              </artwork>
            </figure>
            <t>Both fields in ContentInfo are constrained.  The contentType field is constrained using a simple table constraint that restricts the values to those from the corresponding field of the objects in ContentSet.  The content field is constrained using a component relationship constraint.  Constraints are discussed in the next section.</t>
          </section>
        </section>
        <section title="Constraints">
			<t>The X.68x versions of the ASN.1 specifications introduced the ability to use the object information sets as part of the constraint on the values that a field can take.   Simple table constraints are used to restrict the set of values that can occur in a field.  Component relation constraints allow for the restriction of a field based on contents of other fields in the type.</t>
          <section title="Simple Table Constraints">
            <t>
              Simple table constraints are widely used in <xref
target="RFC5911"/> and <xref target="RFC5912"/> to limit implementer options
(although the constraints are almost always followed by or include
extensibility markers, which make the parameters serve as information not as limitations).  Table constraints are defined in <xref target="CCITT.X682.2002"/>.
            </t>
            <t>Some ASN.1 compilers have the ability to use the simple table constraint to check that a field contains one of the legal values.</t>
            <t>
              The following example from <xref target="RFC5911"/> demonstrates using table constraints to clarify the intended usage of a
particular field. 


 The parameters indicate the types of attributes that are typically found in the signedAttrs and unsignedAttrs fields.  In this example, the object sets are disjoint but this is not required.  For example, in <xref target="RFC5912"/>, there is some overlap between the CertExtensions and CrlExtensions sets.
            </t>
            <figure>
              <artwork>
                <![CDATA[
-- from updated RFC 5652 module in [RFC5911]                
SignerInfo ::= SEQUENCE {
    version CMSVersion,
    sid SignerIdentifier,
    digestAlgorithm DigestAlgorithmIdentifier,
    signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,
    signatureAlgorithm SignatureAlgorithmIdentifier,
    signature SignatureValue,
    unsignedAttrs [1] IMPLICIT Attributes
         {{UnsignedAttributes}} OPTIONAL }

SignedAttributes ::= Attributes {{ SignedAttributesSet }}

SignedAttributesSet ATTRIBUTE ::=
       { aa-signingTime | aa-messageDigest | aa-contentType, ... }

UnsignedAttributes ATTRIBUTE ::= { aa-countersignature, ... }
]]>
              </artwork>
            </figure>

          </section>
          <section title="Component Relation Constraints" anchor="component_relation_constraints">
            <t>
              Component relation constraints are often used to bind the type
field of an open type to the identifier field.  Using the binding in this way
allows a compiler to immediately decode the associated type when the containing
structure is defined.  The following example from <xref target="RFC2560"/> as
updated in <xref target="RFC5912"/> demonstrates this usage.
          </t>
            <figure>
              <artwork>
                <![CDATA[
-- from updated RFC 2560 module in [RFC5912]
RESPONSE ::= TYPE-IDENTIFIER

ResponseSet RESPONSE ::= {basicResponse, ...}

ResponseBytes ::=       SEQUENCE {
    responseType        RESPONSE.
                            &id ({ResponseSet}),
    response            OCTET STRING (CONTAINING RESPONSE.
                            &Type({ResponseSet}{@responseType}))}
 ]]>
              </artwork>
            </figure>
<t>
In this example, the response field is constrained to contain a type identified by the responseType field.  The controlling field is identified using atNotation, e.g., "@responseType".  atNotation can be defined relative to the outermost SEQUENCE, SET, or CHOICE or relative to the field with which the atNotation is associated.  When there is no '.' immediately after the '@', the field appears as a member of the outermost SEQUENCE, SET, or CHOICE.  When there is a '.' immediately after the '@', each '.' represents a SEQUENCE, SET, or CHOICE starting with the SEQUENCE, SET, or CHOICE that contains the field with which the atNotation is associated.  For example, ResponseBytes could have been written as shown below.  In this case, the syntax is very similar since the innermost and outermost SEQUENCE, SET, or CHOICE are the same.</t>
            <figure>
              <artwork>
                <![CDATA[
ResponseBytes ::=       SEQUENCE {
    responseType        RESPONSE.
                            &id ({ResponseSet}),
    response            OCTET STRING (CONTAINING RESPONSE.
                            &Type({ResponseSet}{@.responseType}))}
 ]]>
              </artwork>
            </figure>

<t>The TaggedRequest example from <xref target="RFC5912"/> provides an example where the outermost and innermost SEQUENCE, SET, or CHOICE are different.  Relative to the atNotation included in the definition of the requestMessageValue field, the outermost SEQUENCE, SET, or CHOICE is TaggedRequest, and the innermost is the SEQUENCE used to define the orm field.
</t>

            <figure>
              <artwork>
                <![CDATA[
TaggedRequest ::= CHOICE {
   tcr               [0] TaggedCertificationRequest,
   crm               [1] CertReqMsg,
   orm               [2] SEQUENCE {
       bodyPartID            BodyPartID,
       requestMessageType    OTHER-REQUEST.&id({OtherRequests}),
       requestMessageValue   OTHER-REQUEST.&Type({OtherRequests}
                                 {@.requestMessageType})
   }
}
 ]]>
              </artwork>
            </figure>

<t>
  When referencing a field using atNotation, the definition of the field must be included within the outermost SEQUENCE, SET, or CHOICE.  References to fields within structures that are defined separately are not allowed.  For example, the following example includes invalid atNotation in the definition of the signature field within the SIGNED parameterized type.
</t>
            <figure>
              <artwork>
                <![CDATA[
AlgorithmIdentifier{ALGORITHM-TYPE, ALGORITHM-TYPE:AlgorithmSet} ::=
          SEQUENCE {
              algorithm   ALGORITHM-TYPE.&id({AlgorithmSet}),
              parameters  ALGORITHM-TYPE.
                     &Params({AlgorithmSet}{@algorithm}) OPTIONAL
          }

-- example containing invalid atNotation
SIGNED{ToBeSigned} ::= SEQUENCE {
   toBeSigned           ToBeSigned,
   algorithmIdentifier  AlgorithmIdentifier 
                            { SIGNATURE-ALGORITHM, {...}}
   },
   signature BIT STRING (CONTAINING SIGNATURE-ALGORITHM.&Value(
                            {SignatureAlgorithms}
                            {@algorithmIdentifier.algorithm}))
}
 ]]>
              </artwork>
            </figure>

<t>Alternatively, the above example could be written with correct atNotation as follows, with the definition of the algorithm field included within ToBeSigned.</t>

            <figure>
              <artwork>
                <![CDATA[
  SIGNED{ToBeSigned} ::= SEQUENCE {
     toBeSigned           ToBeSigned,
     algorithmIdentifier  SEQUENCE {
         algorithm        SIGNATURE-ALGORITHM.
                              &id({SignatureAlgorithms}),
         parameters       SIGNATURE-ALGORITHM.
                              &Params({SignatureAlgorithms}
                                  {@algorithmIdentifier.algorithm})
     },
     signature BIT STRING (CONTAINING SIGNATURE-ALGORITHM.&Value(
                              {SignatureAlgorithms}
                              {@algorithmIdentifier.algorithm}))
  }
 ]]>
              </artwork>
            </figure>
            <t>In the above example, the outermost SEQUENCE, SET, or CHOICE relative to the parameters field is the SIGNED parameterized type.  The innermost structure is the SEQUENCE used as the type for the algorithmIdentifier field.  The atNotation for the parameters field could be expressed using any of the following representations:</t>
            <t>
              <list>
                <t>@algorithmIdentifier.algorithm</t>
                <t>@.algorithm</t>
              </list>
            </t>

            <t>The atNotation for the signature field has only one representation.</t>
          </section>
            <section title="Content Constraints">
            <t>
              Open types implemented as OCTET STRINGs or BIT STRINGs can be
constrained using the contents constraints syntax defined in <xref
target="CCITT.X682.2002"/>.  Below are the revised definitions from <xref
target="RFC5911"/> and <xref target="RFC5912"/>.  These show usage of OCTET
STRING and BIT STRING along with constrained sets of identifiers.  The
Extension definition uses a content constraint that requires the value of the
OCTET STRING to be an encoding of the type associated with the information
object selected from the ExtensionSet object set using the value of the extnID
field.  For reasons described in <xref target="component_relation_constraints"/>, "Component Relation Constraints", the SubjectPublicKeyInfo definition relies on prose to bind the BIT STRING to the type identifier because it is not possible to express a content constraint that includes a component relationship constraint to bind the type value within the algorithm field to the subjectPublicKey field.
            </t>
            <figure>
              <artwork>
                <![CDATA[
-- from updated RFC 5280 module in [RFC5912]
Extension{EXTENSION:ExtensionSet} ::= SEQUENCE {
    extnID      EXTENSION.&id({ExtensionSet}),
    critical    BOOLEAN
    -- (EXTENSION.&Critical({ExtensionSet}{@extnID}))
                       DEFAULT FALSE,
    extnValue   OCTET STRING (CONTAINING
                  EXTENSION.&ExtnType({ExtensionSet}{@extnID}))
                  --  contains the DER encoding of the ASN.1 value
                  --  corresponding to the extension type identified
                  --  by extnID
}

SubjectPublicKeyInfo  ::=  SEQUENCE  {
    algorithm            AlgorithmIdentifier{PUBLIC-KEY,
                             {PublicKeyAlgorithms}},
    subjectPublicKey     BIT STRING  
}
 ]]>
              </artwork>
            </figure>
          </section>
      </section>
      <section title="Parameterization">
        <t>
          Parameterization is defined in <xref target="CCITT.X683.2002"/> and can also be used to define new types in a way similar to the macro notation described in Annex A of X.208.  The following example from <xref target="RFC5912"/> shows this usage.  The toBeSigned field takes the type passed as a parameter.
      </t>
        <figure>
          <artwork>
            <![CDATA[
-- from [RFC5912]
SIGNED{ToBeSigned} ::= SEQUENCE {
    toBeSigned  ToBeSigned,
    algorithm   AlgorithmIdentifier{SIGNATURE-ALGORITHM,
                    {SignatureAlgorithms}},
    signature   BIT STRING
}

-- from updated RFC5280 module in [RFC5912]
Certificate  ::=  SIGNED{TBSCertificate}
]]>
          </artwork>
        </figure>
        <t>Parameters need not be simple types.  The following example demonstrates the usage of an information object class and an information object set as parameters.  The first parameter in the definition of AlgorithmIdentifier is an information object class.  Information object classes used for this parameter must have &amp;id and &amp;Params fields, which determine the type of the algorithm and parameters fields.  Other fields may be present in the information object class, but they are not used by the definition of AlgorithmIdentifier, as demonstrated by the SIGNATURE-ALGORITHM class shown below.  The second parameter is an information object set that is used to constrain the values that appear in the algorithm and parameters fields.</t>
        <figure>
          <artwork>
            <![CDATA[
-- from [RFC5912]
AlgorithmIdentifier{ALGORITHM-TYPE, ALGORITHM-TYPE:AlgorithmSet} 
    ::= SEQUENCE 
{
    algorithm   ALGORITHM-TYPE.&id({AlgorithmSet}),
    parameters  ALGORITHM-TYPE.&Params
                  ({AlgorithmSet}{@algorithm}) OPTIONAL
}

SIGNATURE-ALGORITHM ::= CLASS {
    &id             OBJECT IDENTIFIER,
    &Params         OPTIONAL,
    &Value          OPTIONAL,
    &paramPresence  ParamOptions DEFAULT absent,
    &HashSet        DIGEST-ALGORITHM OPTIONAL,
    &PublicKeySet   PUBLIC-KEY OPTIONAL,
    &smimeCaps      SMIME-CAPS OPTIONAL
} WITH SYNTAX {
    IDENTIFIER &id
    [VALUE &Value]
    [PARAMS [TYPE &Params] ARE &paramPresence ]
    [HASHES &HashSet]
    [PUBLIC KEYS &PublicKeySet]
    [SMIME CAPS &smimeCaps]
}

-- from updated RFC 2560 module in [RFC5912]
BasicOCSPResponse       ::= SEQUENCE {
    tbsResponseData      ResponseData,
    signatureAlgorithm   AlgorithmIdentifier{SIGNATURE-ALGORITHM,
                          {sa-dsaWithSHA1 | sa-rsaWithSHA1 |
                               sa-rsaWithMD5 | sa-rsaWithMD2, ...}},
    signature            BIT STRING,
    certs            [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL 
}
 ]]>
          </artwork>
        </figure>

      </section>
      <section title="Versioning and Extensibility" anchor="ver_and_ext">
        <t>Specifications are often revised and ASN.1 modules updated to include new components.  <xref target="CCITT.X681.2002"/> provides two mechanisms useful in supporting extensibility: extension markers and version brackets.  
        </t>
        <section title="Extension Markers">
          <t>An extension marker is represented by an ellipsis (i.e., three
adjacent periods).  Extension markers are included in specifications at points
where the protocol designer anticipates future changes.  This can also be
achieved by including EXTENSIBILITY IMPLIED in the ASN.1 module definition.
EXTENSIBILITY IMPLIED is the equivalent to including an extension marker in
each type defined in the ASN.1 module.  Extensibility markers are used
throughout <xref target="RFC5911"/> and <xref target="RFC5912"/> where object sets are defined.  In other instances, the updated modules retroactively added extension markers where fields were added to an earlier version by an update, as shown in the CertificateChoices example below.</t>
        <t>Examples: </t>
        <figure>
          <artwork>
            <![CDATA[
-- from updated RFC 3370 module in [RFC5911]
KeyAgreementAlgs KEY-AGREE ::= { kaa-esdh | kaa-ssdh, ...}

-- from updated RFC 5652 module in [RFC5911]
CertificateChoices ::= CHOICE {
    certificate Certificate,
    extendedCertificate [0] IMPLICIT ExtendedCertificate,
         -- Obsolete
    ...,
    [[3: v1AttrCert [1] IMPLICIT AttributeCertificateV1]],
         -- Obsolete
    [[4: v2AttrCert [2] IMPLICIT AttributeCertificateV2]],
    [[5: other      [3] IMPLICIT OtherCertificateFormat]] 
}
]]>
          </artwork>
        </figure>

<t>Protocol designers should use extension markers within definitions that are likely to change.  For example, extensibility markers should be used when enumerating error values.</t>
        </section>
        <section title="Version Brackets">
          <t>Version brackets can be used to indicate features that are available in later versions of an ASN.1 module but not in earlier versions.  <xref target="RFC5912"/> added version brackets to the definition of TBSCertificate to illustrate the addition of the issuerUniqueID, subjectUniqueID, and extensions fields, as shown below.
        </t>
          <figure>
            <artwork>
              <![CDATA[
-- from updated RFC 5280 module in [RFC5912]
TBSCertificate  ::=  SEQUENCE  {
    version         [0]  Version DEFAULT v1,
    serialNumber         CertificateSerialNumber,
    signature            AlgorithmIdentifier{SIGNATURE-ALGORITHM,
                              {SignatureAlgorithms}},
    issuer               Name,
    validity             Validity,
    subject              Name,
    subjectPublicKeyInfo SubjectPublicKeyInfo,
    ... ,
    [[2:               -- If present, version MUST be v2
    issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
    subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL
    ]],
    [[3:               -- If present, version MUST be v3 --
    extensions      [3]  ExtensionSet{{CertExtensions}} OPTIONAL
    ]], ... }
    ]]>
            </artwork>
          </figure>
        </section>
      </section>
    </section>
    <section title="Character Set Differences">
      <t>X.68s uses a character set that is a superset of the character set defined in X.208.  The character set defined in X.208 includes the following: </t>
            <t><list>
<t>A to Z</t>
<t>a to z</t>
<t>0 to 9</t>
<t>:=,{}&lt;.</t>
<t>()[]-'"</t>
</list></t>
<t>The character set in X.68x additionally includes the following:</t>
            <t><list>
<t>!&amp;*/;&gt;@^_|</t>
</list></t>
<t>The &gt; and | characters can also be used in X.208 syntax in macro definitions.</t>
    </section>
    <section title="ASN.1 Translation">
      <section title="Downgrading from X.68x to X.208">
        <t>At a minimum, downgrading an ASN.1 module from X.68x syntax to X.208
requires the removal of features not supported by X.208.  As indicated above,
the features most commonly used in IETF Security Area ASN.1 modules are
information object classes (and object sets), content constraints,
parameterization, extension markers, and version brackets.  Extension markers and version brackets can simply be deleted (or commented out).  The definitions for information object classes and object sets can also be deleted or commented out, as these will not be used.  The following checklist can be used in most cases:</t>
        <t>
        <list style="symbols">
          <t>Remove all Information Set Class, Information Set Object, and Information Set Object Set definitions and imports from the file.</t>
          <t>Replace all fixed Type Information Set Class element references
with the fixed type.  (That is, replace FOO.&amp;id with OBJECT IDENTIFIER.)</t>
          <t>Delete all simple constraints.</t>
          <t>Delete all CONTAINING statements.</t>
          <t>Replace all variable Type Information Set Class element references with either ANY or ANY DEFINED BY statements.</t>
          <t>Remove version and extension markers.</t>
          <t>Manually enforce all instances of parameterized types.</t>

        </list>
        </t>
      </section>
      <section title="Upgrading from X.208 to X.68x">
        <t>The amount of change associated with upgrading from X.208 syntax to X.68x syntax is dependent on the reasons for changing and personal style.  A minimalist approach could consist of altering any deprecated features, most commonly ANY DEFINED BY, and adding any necessary extensibility markers.  A more comprehensive approach may include the introduction of constraints, parameterization, versioning, extensibility, etc.</t>
        <t>The following checklist can be used when upgrading a module without introducing constraints:</t>
        <t><list>
          <t>Use TYPE-IDENTIFIER.&amp;Type for "ANY".</t>
          <t>Use TYPE-IDENTIFIER.&amp;Type for "ANY DEFINED BY ...".</t>
        </list>
        </t>
        <t>When constraints are introduced during an upgrade, additional steps are necessary:</t>
        <t><list style="numbers">
          <t>Identify each unique class that should be defined based on what types of things exist.</t>
          <t>Define an Information Object Class for each of the classes above with the appropriate elements.</t>
          <t>Define all of the appropriate Information Object Sets based on the classes defined in step 2 along with the different places that they should be used.</t>
          <t>Replace ANY by the appropriate class and variable type element.</t>
          <t>Replace ANY DEFINED BY with the appropriate variable type element and the components constraint.  Replace the element used in the constraint with the appropriate fixed type element and simple constraint.</t>
          <t>Add any simple constraints as appropriate.</t>
          <t>Define any objects and fill in elements for object sets as appropriate.</t>
      </list>
        </t>
      </section>
    </section>

      <section title="Security Considerations">
<t>
Where a module is downgraded from X.68x syntax to X.208 there is loss of potential automated enforcement of constraints expressed by the author of the module being downgraded.  These constraints should be captured in prose or ASN.1 comments and enforced through other means, as necessary.
</t>
<t>Depending on the feature set of the ASN.1 compiler being used, the code to enforce and use constraints may be generated automatically or may require the programmer to do this independently.  It is the responsibility of the programmer to ensure that the constraints on the ASN.1 expressed either in prose or in the ASN.1 module are actually enforced.</t>
      </section>
    </middle>
    <back>
      <references title="Normative References">
          
<reference anchor="CCITT.X208.1988">
<front>
<title>Specification of Abstract Syntax Notation One (ASN.1)</title>
<author>
<organization>International Telephone and Telegraph
Consultative Committee</organization>
</author>
<date month="November" year="1988" />
</front>

<seriesInfo name="CCITT" value="Recommendation X.208" />

</reference>

                                                                     
<reference anchor="CCITT.X680.2002">
<front>
<title>Abstract Syntax Notation One (ASN.1): Specification of basic
notation</title>
<author>
<organization>International Telephone and Telegraph
Consultative Committee</organization>
</author>
<date month="July" year="2002" />
</front>

<seriesInfo name="CCITT" value="Recommendation X.680" />

</reference>

        <reference anchor="CCITT.X681.2002">
          <front>
            <title>
              Abstract Syntax Notation One (ASN.1): Information object specification
            </title>
            <author>
              <organization>
                International Telephone and Telegraph
                Consultative Committee
              </organization>
            </author>
            <date month="July" year="2002"/>
          </front>
          <seriesInfo name="CCITT" value="Recommendation X.681"/>
        </reference>   
        <reference anchor="CCITT.X682.2002">
          <front>
            <title>
              Abstract Syntax Notation One (ASN.1): Constraint specification
            </title>
            <author>
              <organization>
                International Telephone and Telegraph
                Consultative Committee
              </organization>
            </author>
            <date month="July" year="2002"/>
          </front>
          <seriesInfo name="CCITT" value="Recommendation X.682"/>
        </reference>
        <reference anchor="CCITT.X683.2002">
          <front>
            <title>
              Abstract Syntax Notation One (ASN.1): Parameterization of ASN.1 specifications
            </title>
            <author>
              <organization>
                International Telephone and Telegraph
                Consultative Committee
              </organization>
            </author>
            <date month="July" year="2002"/>
          </front>
          <seriesInfo name="CCITT" value="Recommendation X.683"/>
        </reference>
      </references>
      <references title="Informative References">
&rfc2560;
&rfc5652;
&rfc5280;
&rfc5911;
&rfc5912;
&x209;


<reference anchor="CCITT.X690.2002">
<front>
<title>ASN.1 encoding rules: Specification of basic encoding Rules (BER),
Canonical encoding rules (CER) and Distinguished encoding rules (DER)</title>
<author>
<organization>International Telephone and Telegraph
Consultative Committee</organization>
</author>
<date month="July" year="2002" />
</front>

<seriesInfo name="CCITT" value="Recommendation X.690" />

</reference>

      </references>
  </back>
</rfc>
