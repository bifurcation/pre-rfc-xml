<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='http://xml2rfc.tools.ietf.org/authoring/rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>

<rfc submissionType="IETF" category="std" consensus="yes" ipr="trust200902" number="7518">

  <front>
    <title>JSON Web Algorithms (JWA)</title>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>

    <date month="May" year="2015"/>

    <area>Security</area>
    <workgroup>JOSE Working Group</workgroup>

    <keyword>JavaScript Object Notation</keyword>
    <keyword>JSON</keyword>
    <keyword>JSON Object Signing and Encryption</keyword>
    <keyword>JOSE</keyword>
    <keyword>JSON Web Signature</keyword>
    <keyword>JWS</keyword>
    <keyword>JSON Web Encryption</keyword>
    <keyword>JWE</keyword>
    <keyword>JSON Web Key</keyword>
    <keyword>JWK</keyword>
    <keyword>JSON Web Algorithms</keyword>
    <keyword>JWA</keyword>

    <abstract>
      <t>
	This specification registers
	cryptographic algorithms and identifiers to be used with the
	JSON Web Signature (JWS),
	JSON Web Encryption (JWE), and
	JSON Web Key (JWK) specifications.
	It defines several IANA registries for these identifiers.
      </t>

    </abstract>

  </front>

  <middle>
    <section title="Introduction" anchor="Introduction">
      <t>
	This specification registers
	cryptographic algorithms and identifiers to be used with the
	JSON Web Signature (JWS) <xref target="JWS"/>,
	JSON Web Encryption (JWE) <xref target="JWE"/>, and
	JSON Web Key (JWK) <xref target="JWK"/> specifications.
	It defines several IANA registries for these identifiers.
	All these specifications utilize
	JSON-based <xref target="RFC7159"/>
	 data structures.
	This specification also describes the semantics and operations
	that are specific to these algorithms and key types.
      </t>
      <t>
	Registering the algorithms and identifiers here,
	rather than in the JWS, JWE, and JWK
	specifications, is intended to allow them to remain unchanged
	in the face of changes in the set of Required, Recommended,
	Optional, and Deprecated algorithms over time.
	This also allows changes to the JWS, JWE, and JWK specifications
	without changing this document.
      </t>
      <t>
	Names defined by this specification are short because a core goal is
	for the resulting representations to be compact.
      </t>

      <section title="Notational Conventions" anchor="NotationalConventions">
        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
          "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY",
          and "OPTIONAL" in this document are to be interpreted as
          described in
	  "Key words for use in RFCs to Indicate Requirement Levels" <xref target='RFC2119' />.
	  The interpretation should only be applied when the terms appear in all capital letters.
        </t>
	<t>
	  BASE64URL(OCTETS) denotes the base64url encoding of OCTETS,
	  per Section 2 of <xref target="JWS" />.
	</t>
	<t>
	  UTF8(STRING) denotes the octets of the
	  UTF-8 <xref target="RFC3629"/> representation of STRING,
	  where STRING is a sequence of zero or more Unicode <xref target="UNICODE"/> characters.
	</t>
	<t>
	  ASCII(STRING) denotes the octets of the
	  ASCII <xref target="RFC20"/> representation of STRING,
	  where STRING is a sequence of zero or more ASCII characters.
	</t>
	<t>
	  The concatenation of two values A and B
	  is denoted as A&nbsp;||&nbsp;B.
	</t>
      </section>

    </section>

    <section title="Terminology" anchor="Terminology">

      <t>
	The terms 
	"JSON Web Signature (JWS)",
	"Base64url Encoding",
	"Header Parameter",
	"JOSE Header",
	"JWS Payload",
	"JWS Protected Header",
	"JWS Signature",
	"JWS Signing Input",
	and "Unsecured JWS" are defined by
	the JWS specification <xref target="JWS"/>.
      </t>

      <t>
	The terms "JSON Web Encryption (JWE)",
	"Additional Authenticated Data (AAD)",
	"Authentication Tag",
	"Content Encryption Key (CEK)",
	"Direct Encryption",
	"Direct Key Agreement",
	"JWE Authentication Tag",
	"JWE Ciphertext",
	"JWE Encrypted Key",
	"JWE Initialization Vector",
	"JWE Protected Header",
	"Key Agreement with Key Wrapping",
	"Key Encryption",
	"Key Management Mode",
	and "Key Wrapping" are defined by
	the JWE specification <xref target="JWE"/>.
      </t>

      <t>
	The terms "JSON Web Key (JWK)" and
	"JWK Set" are defined by
	the JWK specification <xref target="JWK"/>.
      </t>

      <t>
	The terms
	"Ciphertext",
	"Digital Signature", "Initialization Vector", 
	"Message Authentication Code (MAC)",
	and "Plaintext" are defined by
	the <xref target="RFC4949">"Internet Security Glossary, Version 2"</xref>.
      </t>

      <t>
	This term is defined by this specification:
      </t>

      <t>
	<list style="hanging">

	  <t hangText="Base64urlUInt">
	    <vspace/>
	    The representation of a positive or zero integer value
	    as the base64url encoding of the value's
	    unsigned big-endian representation as an octet sequence.
	    The octet sequence MUST utilize the minimum
	    number of octets needed to represent the value.
	    Zero is represented as BASE64URL(single zero-valued octet), which is "AA".
	  </t>

        </list>
      </t>
    </section>

    <section title="Cryptographic Algorithms for Digital Signatures and MACs" anchor="SigningAlgs">
      <t>
	JWS uses cryptographic algorithms to digitally sign or
	create a MAC of the contents
	of the JWS Protected Header and the JWS Payload.
      </t>

      <section title='"alg" (Algorithm) Header Parameter Values for JWS' anchor="JWSAlgValues">
	<t>
	  The table below is the set of
	  <spanx style="verb">alg</spanx> (algorithm) Header
	  Parameter values defined by this specification for use with JWS, each of which
	  is explained in more detail in the following sections:
	</t>

	<texttable>

	  <ttcol align="left">"alg" Param Value</ttcol>
	  <ttcol align="left">Digital Signature or MAC Algorithm</ttcol>
	  <ttcol align="left" width="22%">Implementation Requirements</ttcol>

	  <c>HS256</c>
	  <c>HMAC using SHA-256</c>
	  <c>Required</c>

	  <c>HS384</c>
	  <c>HMAC using SHA-384</c>
	  <c>Optional</c>

	  <c>HS512</c>
	  <c>HMAC using SHA-512</c>
	  <c>Optional</c>

	  <c>RS256</c>
	  <c>RSASSA-PKCS1-v1_5 using SHA-256</c>
	  <c>Recommended</c>

	  <c>RS384</c>
	  <c>RSASSA-PKCS1-v1_5 using SHA-384</c>
	  <c>Optional</c>

	  <c>RS512</c>
	  <c>RSASSA-PKCS1-v1_5 using SHA-512</c>
	  <c>Optional</c>

	  <c>ES256</c>
	  <c>ECDSA using P-256 and SHA-256</c>
	  <c>Recommended+</c>

	  <c>ES384</c>
	  <c>ECDSA using P-384 and SHA-384</c>
	  <c>Optional</c>

	  <c>ES512</c>
	  <c>ECDSA using P-521 and SHA-512</c>
	  <c>Optional</c>

	  <c>PS256</c>
	  <c>RSASSA-PSS using SHA-256 and MGF1 with SHA-256</c>
	  <c>Optional</c>

	  <c>PS384</c>
	  <c>RSASSA-PSS using SHA-384 and MGF1 with SHA-384</c>
	  <c>Optional</c>

	  <c>PS512</c>
	  <c>RSASSA-PSS using SHA-512 and MGF1 with SHA-512</c>
	  <c>Optional</c>

	  <c>none</c>
	  <c>No digital signature or MAC performed</c>
	  <c>Optional</c>

	</texttable>

	<t>
	  The use of "+" in the Implementation Requirements column
	  indicates that the requirement strength is likely
	  to be increased in a future version of the specification. 
	</t>
	<t>
	  See <xref target="SigAlgXref" /> for a table cross-referencing the
	  JWS digital signature and MAC <spanx style="verb">alg</spanx> (algorithm)
	  values defined in this specification with the equivalent identifiers
	  used by other standards and software packages.
	</t>
      </section>

      <section title="HMAC with SHA-2 Functions" anchor="DefiningHMAC">
	<t>
	  Hash-based Message Authentication Codes (HMACs) enable one to
	  use a secret plus a cryptographic hash function to generate a
	  MAC. This can be used to
	  demonstrate that whoever generated the MAC was in possession of the MAC key.
	  The algorithm for implementing and validating HMACs is
	  provided in <xref target="RFC2104">RFC 2104</xref>.
	</t>
	<t>
	  A key of the same size as the hash output (for instance, 256
	  bits for <spanx style="verb">HS256</spanx>) or larger MUST
	  be used with this algorithm.
	  (This requirement is based on Section 5.3.4 (Security Effect of the HMAC Key)
	  of <xref target="NIST.800-107">NIST SP 800-117</xref>, which states that the
	  effective security strength is the minimum of the security strength of the key
	  and two times the size of the internal hash value.)
	</t>
	<t>
	  The HMAC SHA-256 MAC is generated per RFC 2104,
	  using SHA-256 as the hash algorithm "H",
	  using the JWS Signing Input as the "text" value,
	  and using the shared key.
	  The HMAC output value is the JWS Signature.
	</t>
	<t>
	  The following <spanx style="verb">alg</spanx> (algorithm)
	  Header Parameter values are used to indicate that the JWS Signature
	  is an HMAC value computed using the corresponding algorithm:
	</t>
	<texttable>

	  <ttcol align="left">"alg" Param Value</ttcol>
	  <ttcol align="left">MAC Algorithm</ttcol>

	  <c>HS256</c>
	  <c>HMAC using SHA-256</c>

	  <c>HS384</c>
	  <c>HMAC using SHA-384</c>

	  <c>HS512</c>
	  <c>HMAC using SHA-512</c>

	</texttable>

	<t>
	  The HMAC SHA-256 MAC for a JWS is validated by computing an HMAC value per RFC 2104,
	  using SHA-256 as the hash algorithm "H",
	  using the received JWS Signing Input as the "text" value,
	  and using the shared key.
	  This computed HMAC value is then compared to the result of
	  base64url decoding the received encoded JWS Signature value.
	  The comparison of the computed HMAC value to the JWS Signature value
	  MUST be done in a constant-time manner to thwart timing attacks.
	  Alternatively, the computed HMAC value can be base64url encoded
	  and compared to the received encoded JWS Signature value
	  (also in a constant-time manner),
	  as this comparison produces the same result as comparing
	  the unencoded values.
	  In either case, if the values match, the HMAC has been validated.
	</t>
	<t>
	  Securing content and validation with the HMAC SHA-384 and HMAC SHA-512
	  algorithms is performed identically to the procedure for
	  HMAC SHA-256 --
	  just using the corresponding hash algorithms
	  with correspondingly larger minimum key sizes and result values:
	  384 bits each for HMAC SHA-384 and 512 bits each for HMAC SHA-512.
	</t>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.1 of <xref target="JWS"/>.
	</t>
      </section>

      <section title="Digital Signature with RSASSA-PKCS1-v1_5" anchor="DefiningRSA">
	<t>
	  This section defines the use of the RSASSA-PKCS1-v1_5
	  digital signature algorithm as defined in
	  Section 8.2 of <xref target="RFC3447">RFC 3447</xref>
	  (commonly known as PKCS #1),
	  using SHA-2 <xref target="SHS"/> hash functions.
	</t>
	<t>
	  A key of size 2048 bits or larger MUST be used with these algorithms.
	</t>
	<t>
	  The RSASSA-PKCS1-v1_5 SHA-256 digital signature is generated as follows:
	  generate a digital signature of the JWS Signing Input
	  using RSASSA-PKCS1-v1_5-SIGN
	  and the SHA-256 hash function
	  with the desired private key.
	  This is the JWS Signature value.
	</t>
	<t>
	  The following <spanx style="verb">alg</spanx> (algorithm)
	  Header Parameter values are used to indicate that the JWS Signature
	  is a digital signature value computed using the corresponding algorithm:
	</t>
	<texttable>

	  <ttcol align="left">"alg" Param Value</ttcol>
	  <ttcol align="left">Digital Signature Algorithm</ttcol>

	  <c>RS256</c>
	  <c>RSASSA-PKCS1-v1_5 using SHA-256</c>

	  <c>RS384</c>
	  <c>RSASSA-PKCS1-v1_5 using SHA-384</c>

	  <c>RS512</c>
	  <c>RSASSA-PKCS1-v1_5 using SHA-512</c>

	</texttable>
	<t>
	  The RSASSA-PKCS1-v1_5 SHA-256 digital signature for a JWS is validated as follows:
	  submit the JWS Signing Input,
	  the JWS Signature,
	  and the public key corresponding to the private key used
	  by the signer to the RSASSA-PKCS1-v1_5-VERIFY algorithm
	  using SHA-256 as the hash function.
	</t>
	<t>
	  Signing and validation with the RSASSA-PKCS1-v1_5 SHA-384 and RSASSA-PKCS1-v1_5 SHA-512
	  algorithms is performed identically to the procedure for
	  RSASSA-PKCS1-v1_5 SHA-256 --
	  just using the corresponding hash algorithms
	  instead of SHA-256.
	</t>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.2 of <xref target="JWS"/>.
	</t>
      </section>

      <section title="Digital Signature with ECDSA" anchor="DefiningECDSA">
	<t>
	  The Elliptic Curve Digital Signature Algorithm (ECDSA) <xref target="DSS"/>
	  provides for the use of Elliptic Curve Cryptography, which is
	  able to provide equivalent security to RSA cryptography but
	  using shorter key sizes and with greater processing
	  speed for many operations.
	  This means that ECDSA digital signatures will be substantially
	  smaller in terms of length than equivalently strong RSA
	  digital signatures.
	</t>
	<t>
	  This specification defines the use of ECDSA with the P-256
	  curve and the SHA-256 cryptographic hash function, ECDSA
	  with the P-384 curve and the SHA-384 hash function, and
	  ECDSA with the P-521 curve and the SHA-512 hash
	  function. The P-256, P-384, and P-521 curves are
	  defined in <xref target="DSS"/>.
	</t>
	<t>
	  The ECDSA P-256 SHA-256 digital signature is generated as follows:

	  <list style="numbers">
	    <t>
	      Generate a digital signature of the JWS Signing Input
	      using ECDSA P-256 SHA-256 with
	      the desired private key. The output will be the pair
	      (R, S), where R and S are 256-bit unsigned integers.
	    </t>
	    <t>
	      Turn R and S into octet sequences in big-endian order,
	      with each array being be 32 octets long.
	      The octet sequence representations MUST NOT be shortened
	      to omit any leading zero octets contained in the values.
	    </t>
	    <t>
	      Concatenate the two octet sequences in the order R and then S.
	      (Note that many ECDSA implementations will directly produce
	      this concatenation as their output.)
	    </t>
	    <t>
	      The resulting 64-octet sequence is the JWS Signature value.
	    </t>
	  </list>
	</t>
	<t>
	  The following <spanx style="verb">alg</spanx> (algorithm)
	  Header Parameter values are used to indicate that the JWS Signature
	  is a digital signature value computed using the corresponding algorithm:
	</t>
	<texttable>

	  <ttcol align="left">"alg" Param Value</ttcol>
	  <ttcol align="left">Digital Signature Algorithm</ttcol>

	  <c>ES256</c>
	  <c>ECDSA using P-256 and SHA-256</c>

	  <c>ES384</c>
	  <c>ECDSA using P-384 and SHA-384</c>

	  <c>ES512</c>
	  <c>ECDSA using P-521 and SHA-512</c>

	</texttable>
	<t>
	  The ECDSA P-256 SHA-256 digital signature for a JWS is validated as follows:

	  <list style="numbers">
	    <t>
	      The JWS Signature value MUST be a 64-octet sequence.
	      If it is not a 64-octet sequence, the validation has failed.
	    </t>
	    <t>
	      Split the 64-octet sequence into two 32-octet sequences. The first
	      octet sequence represents R and the second S.
	      The values R and S are represented as octet sequences
	      using the Integer-to-OctetString Conversion defined in
	      Section 2.3.7 of <xref target="SEC1">SEC1</xref>
	      (in big-endian octet order).
	    </t>
	    <t>
	      Submit the JWS Signing Input,
	      R, S, and the public key (x, y) to the ECDSA P-256
	      SHA-256 validator.
	    </t>
	  </list>
	</t>
	<t>
	  Signing and validation with the ECDSA P-384 SHA-384 and ECDSA P-521 SHA-512
	  algorithms is performed identically to the procedure for
	  ECDSA P-256 SHA-256 --
	  just using the corresponding hash algorithms
	  with correspondingly larger result values.
	  For ECDSA P-384 SHA-384, R and S will be 384 bits each,
	  resulting in a 96-octet sequence.
	  For ECDSA P-521 SHA-512, R and S will be 521 bits each,
	  resulting in a 132-octet sequence.
	  (Note that the Integer-to-OctetString Conversion defined in
	  Section 2.3.7 of <xref target="SEC1">SEC1</xref>
	  used to represent R and S as octet sequences adds zero-valued high-order
	  padding bits when needed to round the size up to a multiple of 8 bits;
	  thus, each 521-bit integer is represented using 528 bits in 66 octets.)
	</t>
	<t>
	  Examples using these algorithms are shown in
	  Appendices A.3 and A.4 of <xref target="JWS"/>.
	</t>
      </section>

      <section title="Digital Signature with RSASSA-PSS" anchor="DefiningPSS">
	<t>
	  This section defines the use of the RSASSA-PSS
	  digital signature algorithm as defined in
	  Section 8.1 of <xref target="RFC3447">RFC 3447</xref>
	  with the MGF1 mask generation function and SHA-2 hash functions,
	  always using the
	  same hash function for both the RSASSA-PSS hash function
	  and the MGF1 hash function.
	  The size of the salt value is the same size as the hash function output.
	  All other algorithm parameters use the defaults specified
	  in Appendix A.2.3 of RFC 3447.
	</t>
	<t>
	  A key of size 2048 bits or larger MUST be used with this algorithm.
	</t>
	<t>
	  The RSASSA-PSS SHA-256 digital signature is generated as follows:
	  generate a digital signature of the JWS Signing Input
	  using RSASSA-PSS-SIGN,
	  the SHA-256 hash function, and
	  the MGF1 mask generation function with SHA-256
	  with the desired private key.
	  This is the JWS Signature value.
	</t>
	<t>
	  The following <spanx style="verb">alg</spanx> (algorithm)
	  Header Parameter values are used to indicate that the JWS Signature
	  is a digital signature value computed using the corresponding algorithm:
	</t>
	<texttable>

	  <ttcol align="left">"alg" Param Value</ttcol>
	  <ttcol align="left">Digital Signature Algorithm</ttcol>

	  <c>PS256</c>
	  <c>RSASSA-PSS using SHA-256 and MGF1 with SHA-256</c>

	  <c>PS384</c>
	  <c>RSASSA-PSS using SHA-384 and MGF1 with SHA-384</c>

	  <c>PS512</c>
	  <c>RSASSA-PSS using SHA-512 and MGF1 with SHA-512</c>

	</texttable>
	<t>
	  The RSASSA-PSS SHA-256 digital signature for a JWS is validated as follows:
	  submit the JWS Signing Input,
	  the JWS Signature,
	  and the public key corresponding to the private key used
	  by the signer to the RSASSA-PSS-VERIFY algorithm
	  using SHA-256 as the hash function and using
	  MGF1 as the mask generation function with SHA-256.
	</t>
	<t>
	  Signing and validation with the RSASSA-PSS SHA-384 and RSASSA-PSS SHA-512
	  algorithms is performed identically to the procedure for
	  RSASSA-PSS SHA-256 --
	  just using the alternative hash algorithm in both roles.
	</t>
      </section>

      <section title='Using the Algorithm "none"' anchor="UsingNone">
	<t>
	  JWSs MAY also be created that do not provide integrity protection.
	  Such a JWS is called an Unsecured JWS.
	  An Unsecured JWS uses the <spanx style="verb">alg</spanx>
	  value <spanx style="verb">none</spanx> and is formatted
	  identically to other JWSs, but
	  MUST use the empty octet sequence as its JWS Signature value.
	  Recipients MUST verify that the JWS Signature value is the empty octet sequence.
	</t>
	<t>
	  Implementations that support Unsecured JWSs
	  MUST NOT accept such objects as valid unless the application
	  specifies that it is acceptable for a specific object to not be
	  integrity protected.
	  Implementations MUST NOT accept Unsecured JWSs by default.
	  In order to mitigate downgrade attacks, applications MUST NOT signal
	  acceptance of Unsecured JWSs at a global level,
	  and SHOULD signal acceptance on a per-object basis.
	  See <xref target="NoneSecCon"/> for security considerations
	  associated with using this algorithm.
	</t>
      </section>

    </section>

    <section title="Cryptographic Algorithms for Key Management" anchor="KeyManagementAlgs">
      <t>
	JWE uses cryptographic algorithms to encrypt or determine the
	Content Encryption Key (CEK).
      </t>

      <section title='"alg" (Algorithm) Header Parameter Values for JWE' anchor="JWEAlgValues">

	<t>
	  The table below is the set of <spanx
	  style="verb">alg</spanx> (algorithm) Header Parameter values
	  that are defined by this specification for use with JWE.
	  These algorithms are used to encrypt the CEK, producing the
	  JWE Encrypted Key, or to use key agreement to agree upon the CEK.
	</t>

	<texttable>

	  <ttcol align="left" width="13%">"alg" Param Value</ttcol>
	  <ttcol align="left">Key Management Algorithm</ttcol>
	  <ttcol align="left">More Header Params</ttcol>
	  <ttcol align="left" width="22%">Implementation Requirements</ttcol>

	  <c>RSA1_5</c>
	  <c>RSAES-PKCS1-v1_5</c>
	  <c>(none)</c>
	  <c>Recommended-</c>

	  <c>RSA-OAEP</c>
	  <c>RSAES OAEP using default parameters</c>
	  <c>(none)</c>
	  <c>Recommended+</c>

	  <c>RSA-OAEP-256</c>
	  <c>RSAES OAEP using SHA-256 and MGF1 with SHA-256</c>
	  <c>(none)</c>
	  <c>Optional</c>

	  <c>A128KW</c>
	  <c>AES Key Wrap with default initial value using 128-bit key</c>
	  <c>(none)</c>
	  <c>Recommended</c>

	  <c>A192KW</c>
	  <c>AES Key Wrap with default initial value using 192-bit key</c>
	  <c>(none)</c>
	  <c>Optional</c>

	  <c>A256KW</c>
	  <c>AES Key Wrap with default initial value using 256-bit key</c>
	  <c>(none)</c>
	  <c>Recommended</c>

	  <c>dir</c>
	  <c>Direct use of a shared symmetric key as the CEK</c>
	  <c>(none)</c>
	  <c>Recommended</c>

	  <c>ECDH-ES</c>
	  <c>Elliptic Curve Diffie-Hellman Ephemeral Static
	  key agreement using Concat KDF
	  </c>
	  <c>
	    <spanx style="verb">epk</spanx>,
	    <spanx style="verb">apu</spanx>,
	    <spanx style="verb">apv</spanx>
	  </c>
	  <c>Recommended+</c>

	  <c>ECDH-ES+A128KW</c>
	  <c>ECDH-ES using Concat KDF and CEK wrapped with
	  <spanx style="verb">A128KW</spanx></c>
	  <c>
	    <spanx style="verb">epk</spanx>,
	    <spanx style="verb">apu</spanx>,
	    <spanx style="verb">apv</spanx>
	  </c>
	  <c>Recommended</c>

	  <c>ECDH-ES+A192KW</c>
	  <c>ECDH-ES using Concat KDF and CEK wrapped with
	  <spanx style="verb">A192KW</spanx></c>
	  <c>
	    <spanx style="verb">epk</spanx>,
	    <spanx style="verb">apu</spanx>,
	    <spanx style="verb">apv</spanx>
	  </c>
	  <c>Optional</c>

	  <c>ECDH-ES+A256KW</c>
	  <c>ECDH-ES using Concat KDF and CEK wrapped with
	  <spanx style="verb">A256KW</spanx></c>
	  <c>
	    <spanx style="verb">epk</spanx>,
	    <spanx style="verb">apu</spanx>,
	    <spanx style="verb">apv</spanx>
	  </c>
	  <c>Recommended</c>

	  <c>A128GCMKW</c>
	  <c>Key wrapping with AES GCM using 128-bit key</c>
	  <c>
	    <spanx style="verb">iv</spanx>,
	    <spanx style="verb">tag</spanx>
	  </c>
	  <c>Optional</c>

	  <c>A192GCMKW</c>
	  <c>Key wrapping with AES GCM using 192-bit key</c>
	  <c>
	    <spanx style="verb">iv</spanx>,
	    <spanx style="verb">tag</spanx>
	  </c>
	  <c>Optional</c>

	  <c>A256GCMKW</c>
	  <c>Key wrapping with AES GCM using 256-bit key</c>
	  <c>
	    <spanx style="verb">iv</spanx>,
	    <spanx style="verb">tag</spanx>
	  </c>
	  <c>Optional</c>

	  <c>PBES2-HS256+A128KW</c>
	  <c>
	    PBES2 with HMAC SHA-256
	    and <spanx style="verb">A128KW</spanx> wrapping
	  </c>
	  <c>
	    <spanx style="verb">p2s</spanx>,
	    <spanx style="verb">p2c</spanx>
	  </c>
	  <c>Optional</c>

	  <c>PBES2-HS384+A192KW</c>
	  <c>
	    PBES2 with HMAC SHA-384
	    and <spanx style="verb">A192KW</spanx> wrapping
	  </c>
	  <c>
	    <spanx style="verb">p2s</spanx>,
	    <spanx style="verb">p2c</spanx>
	  </c>
	  <c>Optional</c>

	  <c>PBES2-HS512+A256KW</c>
	  <c>
	    PBES2 with HMAC SHA-512
	    and <spanx style="verb">A256KW</spanx> wrapping
	  </c>
	  <c>
	    <spanx style="verb">p2s</spanx>,
	    <spanx style="verb">p2c</spanx>
	  </c>
	  <c>Optional</c>

	</texttable>

	<t>
	  The More Header Params column indicates what
	  additional Header Parameters are used by the algorithm,
	  beyond <spanx style="verb">alg</spanx>, which all use.
	  All but <spanx style="verb">dir</spanx> and
	  <spanx style="verb">ECDH-ES</spanx> also produce a JWE Encrypted Key value.
	</t>
	<t>
	  The use of "+" in the Implementation Requirements column
	  indicates that the requirement strength is likely
	  to be increased in a future version of the specification. The use of "-" indicates that the requirement strength is likely to be decreased in a future version of the specification.
	</t>

	<t>
	  See <xref target="EncAlgXref" /> for a table cross-referencing the
	  JWE <spanx style="verb">alg</spanx> (algorithm)
	  values defined in this specification with the equivalent identifiers
	  used by other standards and software packages.
	</t>
      </section>

      <section title="Key Encryption with RSAES-PKCS1-v1_5" anchor="KeyEncryptionRSA15">
	<t>
	  This section defines the specifics of encrypting a JWE CEK with
	  RSAES-PKCS1-v1_5 <xref target="RFC3447"/>.
	  The <spanx style="verb">alg</spanx> (algorithm) Header Parameter value
	  <spanx style="verb">RSA1_5</spanx> is used for this algorithm.
	</t>
	<t>
	  A key of size 2048 bits or larger MUST be used with this algorithm.
	</t>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.2 of <xref target="JWE"/>.
	</t>
      </section>

      <section title="Key Encryption with RSAES OAEP" anchor="KeyEncryptionRSAOAEP">
	<t>
	  This section defines the specifics of encrypting a JWE CEK with
	  RSAES using Optimal Asymmetric Encryption Padding (OAEP)
	  <xref target="RFC3447"/>.
	  Two sets of parameters for using OAEP are defined,
	  which use different hash functions.
	  In the first case,
	  the default parameters specified in Appendix A.2.1 of RFC 3447 are used.
	  (Those default parameters are the SHA-1 hash function and
	  the MGF1 with SHA-1 mask generation function.)
	  In the second case, the SHA-256 hash function and
	  the MGF1 with SHA-256 mask generation function are used.
	</t>
	<t>
	  The following <spanx style="verb">alg</spanx> (algorithm)
	  Header Parameter values are used to indicate that the JWE Encrypted Key
	  is the result of encrypting the CEK
	  using the corresponding algorithm:
	</t>
	<texttable>

	  <ttcol align="left">"alg" Param Value</ttcol>
	  <ttcol align="left">Key Management Algorithm</ttcol>

	  <c>RSA-OAEP</c>
	  <c>RSAES OAEP using default parameters</c>

	  <c>RSA-OAEP-256</c>
	  <c>RSAES OAEP using SHA-256 and MGF1 with SHA-256</c>

	</texttable>
	<t>
	  A key of size 2048 bits or larger MUST be used with these algorithms.
	  (This requirement is based on Table 4 (Security-strength time frames)
	  of <xref target="NIST.800-57">NIST SP 800-57</xref>,
	  which requires 112 bits of security for new uses,
	  and Table 2 (Comparable strengths) of the same,
	  which states that 2048-bit RSA keys provide 112 bits of security.)
	</t>
	<t>
	  An example using RSAES OAEP with the default parameters is shown in
	  Appendix A.1 of <xref target="JWE"/>.
	</t>
      </section>

      <section title="Key Wrapping with AES Key Wrap" anchor="KeyEncryptionAESKW">
	<t>
	  This section defines the specifics of encrypting a JWE CEK with
	  the Advanced Encryption Standard (AES) Key Wrap Algorithm
	  <xref target="RFC3394"/>
	  using the default initial value specified in Section 2.2.3.1 of that document.
	</t>
	<t>
	  The following <spanx style="verb">alg</spanx> (algorithm)
	  Header Parameter values are used to indicate that the JWE Encrypted Key
	  is the result of encrypting the CEK
	  using the corresponding algorithm and key size:
	</t>
	<texttable>

	  <ttcol align="left">"alg" Param Value</ttcol>
	  <ttcol align="left">Key Management Algorithm</ttcol>

	  <c>A128KW</c>
	  <c>AES Key Wrap with default initial value using 128-bit key</c>

	  <c>A192KW</c>
	  <c>AES Key Wrap with default initial value using 192-bit key</c>

	  <c>A256KW</c>
	  <c>AES Key Wrap with default initial value using 256-bit key</c>

	</texttable>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.3 of <xref target="JWE"/>.
	</t>
      </section>

      <section title="Direct Encryption with a Shared Symmetric Key" anchor="DirectEncryption">
	<t>
	  This section defines the specifics of directly performing symmetric key
	  encryption without performing a key wrapping step.  In this case,
	  the shared symmetric key is used directly as the Content Encryption Key (CEK)
	  value for the <spanx style="verb">enc</spanx> algorithm.
	  An empty octet sequence is used as the JWE Encrypted Key value.
	  The <spanx style="verb">alg</spanx> (algorithm) Header Parameter value
	  <spanx style="verb">dir</spanx>
	  is used in this case.
	</t>
	<t>
	  Refer to the security considerations on key lifetimes
	  in <xref target="KeyLifetimes"/> and AES GCM in <xref target="GCMSecCon"/>
	  when considering utilizing direct encryption.
	</t>
      </section>

      <section title="Key Agreement with Elliptic Curve Diffie-Hellman Ephemeral Static (ECDH-ES)" anchor="ECDHES">
	<t>
	  This section defines the specifics of key agreement with
	  Elliptic Curve Diffie-Hellman Ephemeral Static <xref target="RFC6090"/>,
	  in combination with the
	  Concat KDF, as defined in Section 5.8.1 of <xref target="NIST.800-56A" />.
	  The key agreement result can be used in one of two ways:
	  <list style='numbers'>
	    <t>
	      directly as the Content Encryption Key (CEK) for the
	      <spanx style="verb">enc</spanx> algorithm, in the Direct Key Agreement mode, or
	    </t>
	    <t>
	      as a symmetric key used to wrap the CEK with the
	      <spanx style="verb">A128KW</spanx>,
	      <spanx style="verb">A192KW</spanx>,
	      or <spanx style="verb">A256KW</spanx>
	      algorithms, in the Key Agreement with Key Wrapping mode.
	    </t>
	  </list>
	</t>
	<t>
	  A new ephemeral public key
	  value MUST be generated for each key agreement operation.
	</t>
	<t>
	  In Direct Key Agreement mode,
	  the output of the Concat KDF MUST be a key of the
	  same length as that used by the
	  <spanx style="verb">enc</spanx> algorithm.
	  In this case, the empty octet sequence is used as the JWE Encrypted Key value.
	  The <spanx style="verb">alg</spanx> (algorithm) Header Parameter value
	  <spanx style="verb">ECDH-ES</spanx>
	  is used in the Direct Key Agreement mode.
	</t>
	<t>
	  In Key Agreement with Key Wrapping mode,
	  the output of the Concat KDF MUST be a key of the
	  length needed for the specified key wrapping algorithm.
	  In this case, the JWE Encrypted Key is the CEK wrapped with the agreed-upon key.
	</t>
	<t>
	  The following <spanx style="verb">alg</spanx> (algorithm)
	  Header Parameter values are used to indicate that the JWE Encrypted Key
	  is the result of encrypting the CEK
	  using the result of the key agreement algorithm
	  as the key encryption key for the corresponding key wrapping algorithm:
	</t>
	<texttable>

	  <ttcol align="left">"alg" Param Value</ttcol>
	  <ttcol align="left">Key Management Algorithm</ttcol>

	  <c>ECDH-ES+A128KW</c>
	  <c>ECDH-ES using Concat KDF and CEK wrapped with
	  <spanx style="verb">A128KW</spanx></c>

	  <c>ECDH-ES+A192KW</c>
	  <c>ECDH-ES using Concat KDF and CEK wrapped with
	  <spanx style="verb">A192KW</spanx></c>

	  <c>ECDH-ES+A256KW</c>
	  <c>ECDH-ES using Concat KDF and CEK wrapped with
	  <spanx style="verb">A256KW</spanx></c>

	</texttable>

	<section title="Header Parameters Used for ECDH Key Agreement" anchor="ParamsECDHES">
	  <t>
	    The following Header Parameter names
	    are used for key agreement as defined below.
	  </t>

	  <section title='"epk" (Ephemeral Public Key) Header Parameter' anchor="epkDef">
	    <t>
	      The <spanx style="verb">epk</spanx> (ephemeral public key)
	      value created by the originator for the use in key agreement algorithms.
	      This key is represented as a JSON Web Key <xref target="JWK" />
	      public key value.
	      It MUST contain only public key parameters and
	      SHOULD contain only the minimum JWK parameters necessary to represent the key;
	      other JWK parameters included can be checked for consistency and honored, or they can be ignored.
	      This Header Parameter MUST be present and MUST be understood and processed
	      by implementations when these algorithms are used.
	    </t>
	  </section>

	  <section title='"apu" (Agreement PartyUInfo) Header Parameter' anchor="apuDef">
	    <t>
	      The <spanx style="verb">apu</spanx> (agreement PartyUInfo)
	      value for key agreement algorithms using it
	      (such as <spanx style="verb">ECDH-ES</spanx>),
	      represented as a base64url-encoded string.
	      When used, the PartyUInfo value contains information about the producer.
	      Use of this Header Parameter is OPTIONAL.
	      This Header Parameter MUST be understood and processed
	      by implementations when these algorithms are used.
	    </t>
	  </section>

	  <section title='"apv" (Agreement PartyVInfo) Header Parameter' anchor="apvDef">
	    <t>
	      The <spanx style="verb">apv</spanx> (agreement PartyVInfo)
	      value for key agreement algorithms using it
	      (such as <spanx style="verb">ECDH-ES</spanx>),
	      represented as a base64url encoded string.
	      When used, the PartyVInfo value contains information about the recipient.
	      Use of this Header Parameter is OPTIONAL.
	      This Header Parameter MUST be understood and processed
	      by implementations when these algorithms are used.
	    </t>
	  </section>

	</section>

	<section title='Key Derivation for ECDH Key Agreement' anchor="KeyDerivECDHES">
	  <t>
	    The key derivation process derives the agreed-upon key from the
	    shared secret Z established through the ECDH algorithm,
	    per Section 6.2.2.2 of <xref target="NIST.800-56A" />.
	  </t>
	  <t>
	    Key derivation is performed using the Concat KDF, as
	    defined in Section 5.8.1 of <xref target="NIST.800-56A" />, where the Digest
	    Method is SHA-256.
	    The Concat KDF parameters are set as follows:
	    <list style='hanging'>
	      <t hangText="Z">
		<vspace/>
		This is set to the representation of the shared secret Z as an octet sequence.
	      </t>
	      <t hangText="keydatalen">
		<vspace/>
		This is set to the number of bits in the desired output key.
		For <spanx style="verb">ECDH-ES</spanx>, this is length of the key
		used by the <spanx style="verb">enc</spanx> algorithm.
		For <spanx style="verb">ECDH-ES+A128KW</spanx>,
		<spanx style="verb">ECDH-ES+A192KW</spanx>,
		and <spanx style="verb">ECDH-ES+A256KW</spanx>,
		this is 128, 192, and 256, respectively.
	      </t>
	      <t hangText="AlgorithmID">
		<vspace/>
		The AlgorithmID value is of the form Datalen || Data, where
		Data is a variable-length string of zero or more octets,
		and Datalen is a fixed-length, big-endian 32-bit counter that
		indicates the length (in octets) of Data.
		In the Direct Key Agreement case,
		Data is set to
		the octets of the ASCII representation of the
		<spanx style="verb">enc</spanx> Header Parameter value.
		In the Key Agreement with Key Wrapping case,
		Data is set to
		the octets of the ASCII representation of the
		<spanx style="verb">alg</spanx> (algorithm) Header Parameter value.
	      </t>
	      <t hangText="PartyUInfo">
		<vspace/>
		The PartyUInfo value is of the form Datalen || Data, where
		Data is a variable-length string of zero or more octets,
		and Datalen is a fixed-length, big-endian 32-bit counter that
		indicates the length (in octets) of Data.
		If an <spanx style="verb">apu</spanx> (agreement PartyUInfo)
		Header Parameter is present, Data is set to the result of
		base64url decoding the <spanx style="verb">apu</spanx> value
		and Datalen is set to the number of octets in Data.
		Otherwise, Datalen is set to 0 and Data is set to the empty octet sequence.
	      </t>
	      <t hangText="PartyVInfo">
		<vspace/>
		The PartyVInfo value is of the form Datalen || Data, where
		Data is a variable-length string of zero or more octets,
		and Datalen is a fixed-length, big-endian 32-bit counter that
		indicates the length (in octets) of Data.
		If an <spanx style="verb">apv</spanx> (agreement PartyVInfo)
		Header Parameter is present, Data is set to the result of
		base64url decoding the <spanx style="verb">apv</spanx> value
		and Datalen is set to the number of octets in Data.
		Otherwise, Datalen is set to 0 and Data is set to the empty octet sequence.
	      </t>
	      <t hangText="SuppPubInfo">
		<vspace/>
		This is set to the keydatalen represented as a
		32-bit big-endian integer.
	      </t>
	      <t hangText="SuppPrivInfo">
		<vspace/>
		This is set to the empty octet sequence.
	      </t>
	    </list>
	  </t>
	  <t>
	    Applications need to specify how the
	    <spanx style="verb">apu</spanx> and <spanx style="verb">apv</spanx> Header Parameters
	    are used for that application.
	    The <spanx style="verb">apu</spanx> and <spanx style="verb">apv</spanx>
	    values MUST be distinct, when used.
	    Applications wishing to conform to <xref target="NIST.800-56A" />
	    need to provide values that meet the requirements of that document,
	    e.g., by using values that identify the producer and consumer.
	    Alternatively, applications MAY conduct key derivation in a manner similar to
	    "Diffie-Hellman Key Agreement Method" <xref target="RFC2631"/>:
	    in that case, the <spanx style="verb">apu</spanx> parameter MAY either be omitted
	    or represent a random 512-bit value
	    (analogous to PartyAInfo in Ephemeral-Static mode in RFC 2631)
	    and the <spanx style="verb">apv</spanx> parameter SHOULD NOT be present.
	  </t>
	  <t>
	    See <xref target="ECDHESExample"/> for an example key agreement computation
	    using this method.
	  </t>
	</section>
      </section>

      <section title="Key Encryption with AES GCM" anchor="KeyEncryptionGCM">
	<t>
	  This section defines the specifics of encrypting a
	  JWE Content Encryption Key (CEK) with
	  Advanced Encryption Standard (AES) in Galois/Counter Mode (GCM)
	  (<xref target="AES"/> and <xref target="NIST.800-38D"/>).
	</t>
	<t>
	  Use of an Initialization Vector (IV) of size 96 bits is
	  REQUIRED with this algorithm.
	  The IV is represented in base64url-encoded form
	  as the <spanx style="verb">iv</spanx> (initialization vector)
	  Header Parameter value.
	</t>
	<t>
	  The Additional Authenticated Data value used is
	  the empty octet string.
	</t>
	<t>
	  The requested size of the Authentication Tag output MUST be
	  128 bits, regardless of the key size.
	</t>
	<t>
	  The JWE Encrypted Key value is the ciphertext output.
	</t>
	<t>
	  The Authentication Tag output is represented in base64url-encoded form
	  as the <spanx style="verb">tag</spanx> (authentication tag)
	  Header Parameter value.
	</t>
	<t>
	  The following <spanx style="verb">alg</spanx> (algorithm)
	  Header Parameter values are used to indicate that the JWE Encrypted Key
	  is the result of encrypting the CEK
	  using the corresponding algorithm and key size:
	</t>
	<texttable>

	  <ttcol align="left">"alg" Param Value</ttcol>
	  <ttcol align="left">Key Management Algorithm</ttcol>

	  <c>A128GCMKW</c>
	  <c>Key wrapping with AES GCM using 128-bit key</c>

	  <c>A192GCMKW</c>
	  <c>Key wrapping with AES GCM using 192-bit key</c>

	  <c>A256GCMKW</c>
	  <c>Key wrapping with AES GCM using 256-bit key</c>

	</texttable>

	<section title="Header Parameters Used for AES GCM Key Encryption"
		 anchor="ParamsGCMKeyWrap">
	  <t>
	    The following Header Parameters are used for AES GCM key encryption.
	  </t>

	  <section title='"iv" (Initialization Vector) Header Parameter' anchor="ivDef">
	    <t>
	      The <spanx style="verb">iv</spanx> (initialization vector)
	      Header Parameter value is the base64url-encoded representation of the
	      96-bit IV value used for the key encryption operation.
	      This Header Parameter MUST be present and MUST be understood and processed
	      by implementations when these algorithms are used.
	    </t>
	  </section>

	  <section title='"tag" (Authentication Tag) Header Parameter' anchor="tagDef">
	    <t>
	      The <spanx style="verb">tag</spanx> (authentication tag)
	      Header Parameter value is the base64url-encoded representation of the
	      128-bit Authentication Tag value resulting from the key encryption operation.
	      This Header Parameter MUST be present and MUST be understood and processed
	      by implementations when these algorithms are used.
	    </t>
	  </section>

	</section>

      </section>

      <section title="Key Encryption with PBES2" anchor="pbcrypto-pbes2-jwe">
        <t>
	  This section defines the specifics of
	  performing password-based encryption of a JWE CEK,
	  by first deriving a key encryption key from a user-supplied password
	  using PBES2 schemes as specified in Section 6.2 of <xref target="RFC2898"/>,
	  then by encrypting the JWE CEK using the derived key.
	</t>
	<t>
	  These algorithms use HMAC SHA-2 algorithms as the Pseudorandom Function (PRF)
	  for the PBKDF2 key derivation and
	  AES Key Wrap <xref target="RFC3394"/> for the encryption scheme.
	  The PBES2 password input is an octet sequence;
	  if the password to be used is represented as a text string
	  rather than an octet sequence, the UTF-8 encoding of the text string
	  MUST be used as the octet sequence.
	  The salt parameter MUST be computed from
	  the <spanx style="verb">p2s</spanx> (PBES2 salt input) Header Parameter value
	  and the <spanx style="verb">alg</spanx> (algorithm) Header Parameter value
	  as specified in the <spanx style="verb">p2s</spanx> definition below.
	  The iteration count parameter MUST be provided as the
	  <spanx style="verb">p2c</spanx> (PBES2 count) Header Parameter value.
	  The algorithms respectively use HMAC SHA-256, HMAC SHA-384, and HMAC SHA-512
	  as the PRF and use 128-, 192-, and 256-bit AES Key Wrap keys.
	  Their derived-key lengths respectively are 16, 24, and 32 octets.
	</t>
	<t>
	  The following <spanx style="verb">alg</spanx> (algorithm)
	  Header Parameter values are used to indicate that the JWE Encrypted Key
	  is the result of encrypting the CEK
	  using the result of the corresponding password-based encryption algorithm
	  as the key encryption key for the corresponding key wrapping algorithm:
	</t>
	<texttable>

	  <ttcol align="left">"alg" Param Value</ttcol>
	  <ttcol align="left">Key Management Algorithm</ttcol>

	  <c>PBES2-HS256+A128KW</c>
	  <c>
	    PBES2 with HMAC SHA-256
	    and <spanx style="verb">A128KW</spanx> wrapping
	  </c>

	  <c>PBES2-HS384+A192KW</c>
	  <c>
	    PBES2 with HMAC SHA-384
	    and <spanx style="verb">A192KW</spanx> wrapping
	  </c>

	  <c>PBES2-HS512+A256KW</c>
	  <c>
	    PBES2 with HMAC SHA-512
	    and <spanx style="verb">A256KW</spanx> wrapping
	  </c>

	</texttable>
	<t>
	  See Appendix C of the JWK specification <xref target="JWK"/>
	  for an example key encryption computation using
	  <spanx style="verb">PBES2-HS256+A128KW</spanx>.
	</t>

	<section title="Header Parameters Used for PBES2 Key Encryption"
		 anchor="ParamsPBES2">
	  <t>
	    The following Header Parameters are used for
	    Key Encryption with PBES2.
	  </t>

	  <section title='"p2s" (PBES2 Salt Input) Header Parameter' anchor="p2sDef">
	    <t>
	      The <spanx style="verb">p2s</spanx> (PBES2 salt input) Header Parameter
	      encodes a Salt Input value, which is used as part of the PBKDF2 salt value.
	      The <spanx style="verb">p2s</spanx> value is BASE64URL(Salt Input).
	      This Header Parameter MUST be present and MUST be understood and processed
	      by implementations when these algorithms are used.
	    </t>
	    <t>
	      The salt expands the possible keys that can be derived
	      from a given password.
	      A Salt Input value containing 8 or more octets MUST be used.
	      A new Salt Input value MUST be generated randomly for every encryption operation;
	      see <xref target="RFC4086">RFC 4086</xref> for considerations on generating random values.
	      The salt value used is (UTF8(Alg) || 0x00 || Salt Input),
	      where Alg is the <spanx style="verb">alg</spanx> (algorithm) Header Parameter value.
	    </t>
	  </section>

	  <section title='"p2c" (PBES2 Count) Header Parameter' anchor="p2cDef">
	    <t>
	      The <spanx style="verb">p2c</spanx> (PBES2 count) Header Parameter contains
	      the PBKDF2 iteration count, represented as a positive JSON integer.
	      This Header Parameter MUST be present and MUST be understood and processed
	      by implementations when these algorithms are used.
	    </t>
	    <t>
	      The iteration count adds computational expense,
	      ideally compounded by the possible range
	      of keys introduced by the salt.
	      A minimum iteration count of 1000 is RECOMMENDED.
	    </t>
	  </section>

	</section>

      </section>

    </section>

    <section title="Cryptographic Algorithms for Content Encryption" anchor="ContentEncryptionAlgs">
      <t>
	JWE uses cryptographic algorithms to encrypt and integrity-protect the plaintext
	and to integrity-protect the Additional Authenticated Data.
      </t>

      <section title='"enc" (Encryption Algorithm) Header Parameter Values for JWE' anchor="JWEEncValues">
	<t>
	  The table below is the set of
	  <spanx style="verb">enc</spanx> (encryption algorithm) Header Parameter values that
	  are defined by this specification for use with JWE.
	</t>

	<texttable>

	  <ttcol align="left" width="22%">"enc" Param Value</ttcol>
	  <ttcol align="left">Content Encryption Algorithm</ttcol>
	  <ttcol align="left" width="22%">Implementation Requirements</ttcol>

	  <c>A128CBC-HS256</c>
	  <c>
	    AES_128_CBC_HMAC_SHA_256 authenticated encryption algorithm,
	    as defined in <xref target="CBC_HMAC_256"/>
	  </c>
	  <c>Required</c>

	  <c>A192CBC-HS384</c>
	  <c>
	    AES_192_CBC_HMAC_SHA_384 authenticated encryption algorithm,
	    as defined in <xref target="CBC_HMAC_384"/>
	  </c>
	  <c>Optional</c>

	  <c>A256CBC-HS512</c>
	  <c>
	    AES_256_CBC_HMAC_SHA_512 authenticated encryption algorithm,
	    as defined in <xref target="CBC_HMAC_512"/>
	  </c>
	  <c>Required</c>

	  <c>A128GCM</c>
	  <c>AES GCM using 128-bit key</c>
	  <c>Recommended</c>

	  <c>A192GCM</c>
	  <c>AES GCM using 192-bit key</c>
	  <c>Optional</c>

	  <c>A256GCM</c>
	  <c>AES GCM using 256-bit key</c>
	  <c>Recommended</c>

	</texttable>

	<t>
	  All also use a JWE Initialization Vector value and
	  produce JWE Ciphertext and JWE Authentication Tag values.
	</t>
	<t>
	  See <xref target="EncEncXref" /> for a table cross-referencing the
	  JWE <spanx style="verb">enc</spanx> (encryption algorithm)
	  values defined in this specification with the equivalent identifiers
	  used by other standards and software packages.
	</t>
      </section>

      <section title="AES_CBC_HMAC_SHA2 Algorithms" anchor="AES_CBC_HMAC_SHA2">
	<t>
	  This section defines a family of authenticated encryption algorithms
	  built using a composition of
	  AES <xref target="AES"/>
	  in Cipher Block Chaining (CBC) mode <xref target="NIST.800-38A"/>
	  with PKCS #7 padding operations per Section 6.3 of <xref target="RFC5652"/> and
	  HMAC (<xref target="RFC2104"/> and <xref target="SHS"/>) operations.
	  This algorithm family is called AES_CBC_HMAC_SHA2.
	  It also defines three instances of this family:
	  the first using 128-bit CBC keys and HMAC SHA-256,
	  the second using 192-bit CBC keys and HMAC SHA-384,
	  and the third using 256-bit CBC keys and HMAC SHA-512.
	  Test cases for these algorithms can be found in
	  <xref target="CBC_HMAC_TestCases"/>.
	</t>
	<t>
	  These algorithms are based upon
	  "Authenticated Encryption with AES-CBC and HMAC-SHA" <xref target="AEAD-CBC-SHA"/>,
	  performing the same cryptographic computations,
	  but with the Initialization Vector (IV) and Authentication Tag values remaining
	  separate, rather than being concatenated with
	  the ciphertext value in the output representation.
	  This option is discussed in Appendix B of that specification.
	  This algorithm family is a generalization of the algorithm family in
	  <xref target="AEAD-CBC-SHA"/> and can be used to
	  implement those algorithms.
	</t>
	
	<section title="Conventions Used in Defining AES_CBC_HMAC_SHA2">
	  <t>
	    We use the following notational conventions.  
	    <list>
	      <t>
		CBC-PKCS7-ENC(X, P) denotes the AES-CBC encryption of&nbsp;P
		using PKCS #7 padding utilizing the cipher with the key&nbsp;X.
	      </t>
	      <t> 
		MAC(Y, M) denotes the application of the MAC to the message&nbsp;M using the key&nbsp;Y.
	      </t>
	    </list>
	  </t>
	</section>

	<section anchor="generic" title="Generic AES_CBC_HMAC_SHA2 Algorithm">
	  <t>
	    This section defines AES_CBC_HMAC_SHA2 in a manner that is
	    independent of the AES-CBC key size or hash function to be used.
	    Sections <xref target="CBC_HMAC_Enc" format="counter"/> and <xref target="CBC_HMAC_Dec" format="counter"/> define the
	    generic encryption and decryption algorithms.
	    Sections <xref target="CBC_HMAC_256" format="counter"/>
	    through <xref target="CBC_HMAC_512" format="counter"/>
	    define instances of AES_CBC_HMAC_SHA2 that
	    specify those details.
	  </t>

	  <section anchor="CBC_HMAC_Enc" title="AES_CBC_HMAC_SHA2 Encryption">
	    <t> 
	      The authenticated
	      encryption algorithm takes as input four octet strings: a
	      secret key K, a plaintext P, Additional Authenticated Data A, and
	      an Initialization Vector IV.
	      The authenticated ciphertext value E
	      and the Authentication Tag value T
	      are provided as outputs.
	      The data in the plaintext are encrypted and
	      authenticated, and the Additional Authenticated Data are authenticated,
	      but not encrypted.
	    </t>
	    <t>
	      The encryption process is as follows, or
	      uses an equivalent set of steps:
	      <list style="numbers">
		<t>
		  The secondary keys MAC_KEY and ENC_KEY are generated
		  from the input key K as follows.  Each of these two
		  keys is an octet string.
		  <list style="empty">
		    <t>MAC_KEY consists of the initial MAC_KEY_LEN octets of
		    K, in order.</t>

		    <t>ENC_KEY consists of the final ENC_KEY_LEN octets of
		    K, in order.</t>
		  </list> 
		  The number of octets in the
		  input key K MUST be the sum of MAC_KEY_LEN and ENC_KEY_LEN.
		  The values of these parameters are specified
		  by the Authenticated Encryption algorithms
		  in Sections <xref target="CBC_HMAC_256" format="counter"/>
		  through <xref target="CBC_HMAC_512" format="counter"/>.
		  Note that the MAC key comes before the encryption key in the input key K;
		  this is in the opposite order of the algorithm names in
		  the identifier "AES_CBC_HMAC_SHA2".
		</t>

		<t>
		  The IV used is a 128-bit value
		  generated randomly or pseudorandomly
		  for use in the cipher.
		</t>

		<t>
		  The plaintext is CBC encrypted using PKCS #7 padding
		  using ENC_KEY as the key and the IV.
		  We denote the ciphertext output from this step as E.
		</t>

		<t>
		  The octet string AL is equal to the number of bits in
		  the Additional Authenticated Data A
		  expressed as a 64-bit unsigned big-endian integer.
		</t>

		<t>A message Authentication Tag T is computed by applying
		HMAC <xref target="RFC2104"/> to the following data, in
		order:
		<list style="empty">
		  <t> the Additional Authenticated Data A, </t>
		  <t> the Initialization Vector IV, </t>
		  <t> the ciphertext E computed in the previous step, and </t>
		  <t> the octet string AL defined above. </t>
		</list>
		The string MAC_KEY is used as the MAC key.  We denote
		the output of the MAC computed in this step as M.
		The first T_LEN bits of M are used as T.
		</t>

		<t>
		  The ciphertext E and the Authentication Tag T
		  are returned as the outputs of the authenticated encryption.
		</t>
	      </list>
	    </t>

	    <t>
	      The encryption process can be illustrated as follows.  Here
	      K, P, A, IV, and E denote the key, plaintext, Additional Authenticated Data,
	      Initialization Vector, and
	      ciphertext, respectively.
	      <list>
		<t>
		  MAC_KEY = initial MAC_KEY_LEN octets of K,
		</t>
		<t>
		  ENC_KEY = final ENC_KEY_LEN octets of K,
		</t>
		<t>
		  E = CBC-PKCS7-ENC(ENC_KEY, P), 
		</t>
		<t>
		  M = MAC(MAC_KEY, A || IV || E || AL), 
		</t>
		<t>
		  T = initial T_LEN octets of M.
		</t>
	      </list>
	    </t>

	  </section>

	  <section anchor="CBC_HMAC_Dec" title="AES_CBC_HMAC_SHA2 Decryption">
	    <t>
	      The authenticated decryption operation has five inputs:
	      K, A, IV, E, and T as defined above.
	      It has only
	      a single output: either a plaintext value P or a special
	      symbol FAIL that indicates that the inputs are not
	      authentic.  The authenticated decryption algorithm is
	      as follows, or uses an equivalent set of steps:

	      <list style="numbers">

		<t>
		  The secondary keys MAC_KEY and ENC_KEY are generated
		  from the input key K as in Step 1 of <xref target="CBC_HMAC_Enc"/>.
		</t>

		<t>
		  The integrity and authenticity of A and E are checked
		  by computing an HMAC with the inputs as in Step 5 of 
		  <xref target="CBC_HMAC_Enc"/>.  
		  The value T, from the previous step, is compared to the
		  first MAC_KEY length bits of the
		  HMAC output.  If those values are identical, then A and
		  E are considered valid, and processing is
		  continued. Otherwise, all of the data used in the MAC
		  validation are discarded, and the authenticated decryption
		  operation returns an indication that it failed, and the
		  operation halts.
		  (But see Section 11.5 of <xref target="JWE"/> for
		  security considerations on thwarting timing attacks.)
		</t>

		<t>
		  The value E is decrypted and the PKCS #7 padding is checked and removed.
		  The value IV is used as the Initialization Vector.
		  The value ENC_KEY is used as the decryption key.
		</t>

		<t> The plaintext value is returned.</t>
	      </list>
	    </t>
	  
	  </section>
	</section>

	<section anchor="CBC_HMAC_256" title="AES_128_CBC_HMAC_SHA_256">
	  <t>
	    This algorithm is a concrete instantiation of the
	    generic AES_CBC_HMAC_SHA2 algorithm above.
	    It uses the HMAC message
	    authentication code <xref target="RFC2104"/> with the
	    SHA-256 hash function <xref target="SHS"/> to provide
	    message authentication, with the HMAC output
	    truncated to 128 bits, corresponding to the
	    HMAC-SHA-256-128 algorithm defined in <xref target="RFC4868"/>.
	    For encryption, it uses AES
	    in the CBC mode of operation as
	    defined in Section 6.2 of <xref target="NIST.800-38A"/>, with
	    PKCS #7 padding and a 128-bit IV value.
	  </t>
	  <t>
	    The AES_CBC_HMAC_SHA2 parameters specific to AES_128_CBC_HMAC_SHA_256 are:
	    <list>
	      <t>
		The input key K is 32 octets long. 
	      </t>
	      <t>
		ENC_KEY_LEN is 16 octets.
	      </t>
	      <t>
		MAC_KEY_LEN is 16 octets.
	      </t>
	      <t>
		The SHA-256 hash algorithm is used for the HMAC.
	      </t>
	      <t>
		The HMAC-SHA-256 output is truncated to T_LEN=16 octets,
		by stripping off the final 16 octets.
	      </t>
	    </list>
	  </t>

	</section>

	<section anchor="CBC_HMAC_384" title="AES_192_CBC_HMAC_SHA_384">
	  <t>
	    AES_192_CBC_HMAC_SHA_384 is based on AES_128_CBC_HMAC_SHA_256,
	    but with the following differences:
	    <list>
	      <t>
		The input key K is 48 octets long instead of 32.
	      </t>
	      <t>
		ENC_KEY_LEN is 24 octets instead of 16.
	      </t>
	      <t>
		MAC_KEY_LEN is 24 octets instead of 16.
	      </t>
	      <t>
		SHA-384 is used for the HMAC instead of SHA-256.  
	      </t>
	      <t>
		The HMAC SHA-384 value is truncated to T_LEN=24 octets instead of 16.
	      </t>
	    </list>
	  </t>
	</section>

	<section anchor="CBC_HMAC_512" title="AES_256_CBC_HMAC_SHA_512">
	  <t>
	    AES_256_CBC_HMAC_SHA_512 is based on AES_128_CBC_HMAC_SHA_256,
	    but with the following differences:
	    <list>
	      <t>
		The input key K is 64 octets long instead of 32.
	      </t>
	      <t>
		ENC_KEY_LEN is 32 octets instead of 16.
	      </t>
	      <t>
		MAC_KEY_LEN is 32 octets instead of 16.
	      </t>
	      <t>
		SHA-512 is used for the HMAC instead of SHA-256.  
	      </t>
	      <t>
		The HMAC SHA-512 value is truncated to T_LEN=32 octets instead of 16.
	      </t>
	    </list>
	  </t>
	</section>

	<section title="Content Encryption with AES_CBC_HMAC_SHA2"
		 anchor="JWE_CBC_HMAC">
	  <t>
	    This section defines the specifics of performing authenticated encryption with
	    the AES_CBC_HMAC_SHA2 algorithms.
	  </t>
	  <t>
	    The CEK is used as the secret key K.
	  </t>
	  <t>
	    The following <spanx style="verb">enc</spanx> (encryption algorithm)
	    Header Parameter values are used to indicate that the JWE Ciphertext
	    and JWE Authentication Tag values
	    have been computed using the corresponding algorithm:
	  </t>
	  <texttable>

	    <ttcol align="left">"enc" Param Value</ttcol>
	    <ttcol align="left">Content Encryption Algorithm</ttcol>

	    <c>A128CBC-HS256</c>
	    <c>
	      AES_128_CBC_HMAC_SHA_256 authenticated encryption algorithm,
	      as defined in <xref target="CBC_HMAC_256"/>
	    </c>

	    <c>A192CBC-HS384</c>
	    <c>
	      AES_192_CBC_HMAC_SHA_384 authenticated encryption algorithm,
	      as defined in <xref target="CBC_HMAC_384"/>
	    </c>

	    <c>A256CBC-HS512</c>
	    <c>
	      AES_256_CBC_HMAC_SHA_512 authenticated encryption algorithm,
	      as defined in <xref target="CBC_HMAC_512"/>
	    </c>

	  </texttable>
	</section>
      </section>

      <section title="Content Encryption with AES GCM" anchor="ContentEncryptionGCM">
	<t>
	  This section defines the specifics of performing authenticated encryption with
	  AES in Galois/Counter Mode (GCM)
	  (<xref target="AES"/> and <xref target="NIST.800-38D"/>).
	</t>
	<t>
	  The CEK is used as the encryption key.
	</t>
	<t>
	  Use of an IV of size 96 bits is
	  REQUIRED with this algorithm.
	</t>
	<t>
	  The requested size of the Authentication Tag output MUST be
	  128 bits, regardless of the key size.
	</t>
	<t>
	  The following <spanx style="verb">enc</spanx> (encryption algorithm)
	  Header Parameter values are used to indicate that the JWE Ciphertext
	  and JWE Authentication Tag values
	  have been computed using the corresponding algorithm and key size:
	</t>
	<texttable>

	  <ttcol align="left">"enc" Param Value</ttcol>
	  <ttcol align="left">Content Encryption Algorithm</ttcol>

	  <c>A128GCM</c>
	  <c>AES GCM using 128-bit key</c>

	  <c>A192GCM</c>
	  <c>AES GCM using 192-bit key</c>

	  <c>A256GCM</c>
	  <c>AES GCM using 256-bit key</c>

	</texttable>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.1 of <xref target="JWE"/>.
	</t>
      </section>

    </section>

    <section title="Cryptographic Algorithms for Keys" anchor="JWKKeyTypes">
      <t>
	A JSON Web Key (JWK) <xref target="JWK" /> is a
	JSON
	data structure that represents a cryptographic key.
	These keys can be either asymmetric or symmetric.
	They can hold both public and private information about the key.
	This section defines the parameters for keys
	using the algorithms specified by this document.
      </t>

      <section title='"kty" (Key Type) Parameter Values' anchor="JWKKtyValues">
	<t>
	  The table below is the set of
	  <spanx style="verb">kty</spanx> (key type) parameter
	  values that are defined by this specification for use in JWKs.
	</t>

<?rfc subcompact="yes"?>
	<texttable>

	  <ttcol align="left">"kty" Param Value</ttcol>
	  <ttcol align="left">Key Type</ttcol>
	  <ttcol align="left" width="22%">Implementation Requirements</ttcol>

	  <c>EC</c>
	  <c>Elliptic Curve <xref target="DSS"/></c>
	  <c>Recommended+</c>

	  <c>RSA</c>
	  <c>RSA <xref target="RFC3447" /></c>
	  <c>Required</c>

	  <c>oct</c>
	  <c>Octet sequence (used to represent symmetric keys)</c>
	  <c>Required</c>

	</texttable>
<?rfc subcompact="no"?>

	<t>
	  The use of "+" in the Implementation Requirements column
	  indicates that the requirement strength is likely
	  to be increased in a future version of the specification. 
	</t>
      </section>

      <section title="Parameters for Elliptic Curve Keys" anchor="JWKEC">
	<t>
	  JWKs can represent Elliptic Curve <xref target="DSS"/> keys.  In
	  this case, the <spanx style="verb">kty</spanx>
	  member value is <spanx style="verb">EC</spanx>.
	</t>

	<section title="Parameters for Elliptic Curve Public Keys" anchor="ECPublic">

	  <t>
	    An Elliptic Curve public key is represented by a pair of coordinates  
	    drawn from a finite field, which together define a point on an Elliptic Curve.
	    The following members MUST be present for all Elliptic Curve public keys:  
	  </t>
	  <t>
	    <?rfc subcompact="yes"?>
	    <list style="symbols">  
	      <t><spanx style="verb">crv</spanx></t>
	      <t><spanx style="verb">x</spanx></t>
	    </list>
	    <?rfc subcompact="no"?>
	  </t>
	  <t>
	    The following member MUST also be present for Elliptic Curve
	    public keys for the three curves defined in the following section:
	  </t>
	  <t>
	    <?rfc subcompact="yes"?>
	    <list style="symbols">  
	      <t><spanx style="verb">y</spanx></t>
	    </list>
	    <?rfc subcompact="no"?>
	  </t>

	  <section title='"crv" (Curve) Parameter' anchor="crvECDef">
	    <t>
	      The <spanx style="verb">crv</spanx> (curve) parameter identifies
	      the cryptographic curve used with the key.  Curve values
	      from <xref target="DSS"/> used by this specification are:
	    </t>
	    <t>
	      <?rfc subcompact="yes"?>
	      <list style='symbols'>
		<t><spanx style="verb">P-256</spanx></t>
		<t><spanx style="verb">P-384</spanx></t>
		<t><spanx style="verb">P-521</spanx></t>
	      </list>
	      <?rfc subcompact="no"?>
	    </t>
	    <t>
	      These values are registered in the IANA
	      "JSON Web Key Elliptic Curve" registry
	      defined in
	      <xref target="CurveReg"/>.
	      Additional <spanx style="verb">crv</spanx> values can be registered by other specifications.
	      Specifications registering additional curves must define what parameters
	      are used to represent keys for the curves registered.
	      The <spanx style="verb">crv</spanx> value is a case-sensitive string.
	    </t>
	  <t>
	    SEC1 <xref target="SEC1"/> point compression is not supported for any of
	    these three curves.
	  </t>
	  </section>

	  <section title='"x" (X Coordinate) Parameter' anchor="xECDef">


	    <t>
	      The <spanx style="verb">x</spanx> (x coordinate) parameter contains the
	      x coordinate for the Elliptic Curve point.
	      It is represented as the base64url encoding of the
	      octet string representation of the coordinate,
	      as defined in Section 2.3.5 of <xref target="SEC1">SEC1</xref>.  
	      The length of this octet string MUST be the full size of a coordinate  
	      for the curve specified in the <spanx style="verb">crv</spanx> parameter.
	      For example, if the value of <spanx style="verb">crv</spanx> is
	      <spanx style="verb">P-521</spanx>, the octet string must be 66 octets long.
	    </t>
	  </section>

	  <section title='"y" (Y Coordinate) Parameter' anchor="yECDef">
	    <t>
	      The <spanx style="verb">y</spanx> (y coordinate) parameter contains the
	      y coordinate for the Elliptic Curve point.
	      It is represented as the base64url encoding of the
	      octet string representation of the coordinate,
	      as defined in Section 2.3.5 of <xref target="SEC1">SEC1</xref>.  
	      The length of this octet string MUST be the full size of a coordinate  
	      for the curve specified in the <spanx style="verb">crv</spanx> parameter.
	      For example, if the value of <spanx style="verb">crv</spanx> is
	      <spanx style="verb">P-521</spanx>, the octet string must be 66 octets long.  
	    </t>
	  </section>

	</section>

	<section title="Parameters for Elliptic Curve Private Keys" anchor="ECPrivate">
	  <t>
	    In addition to the members used to represent Elliptic Curve public keys,
	    the following member MUST be present to represent Elliptic Curve private keys.
	  </t>

	  <section title='"d" (ECC Private Key) Parameter' anchor="dECDef">
	    <t>
	      The <spanx style="verb">d</spanx> (ECC private key) parameter contains
	      the Elliptic Curve private key value.
	      It is represented as the base64url encoding of the
	      octet string representation of the private key value,
	      as defined in Section 2.3.7 of <xref target="SEC1">SEC1</xref>.  
	      The length of this octet string MUST be ceiling(log-base-2(n)/8)
	      octets (where n is the order of the curve).
	    </t>
	  </section>

	</section>
      </section>

      <section title="Parameters for RSA Keys" anchor="JWKRSA">
	<t>
	  JWKs can represent RSA <xref target="RFC3447" /> keys.  In
	  this case, the <spanx style="verb">kty</spanx>
	  member value is <spanx style="verb">RSA</spanx>.
	  The semantics of the parameters defined below are the same as those defined in
	  Sections 3.1 and 3.2 of RFC 3447.
	</t>

	<section title="Parameters for RSA Public Keys" anchor="RSAPublic">

	  <t>
	    The following members MUST be present for RSA public keys.
	  </t>

	  <section title='"n" (Modulus) Parameter' anchor="nRSADef">
	    <t>
	      The <spanx style="verb">n</spanx> (modulus) parameter contains
	      the modulus value for the RSA public key.
	      It is represented as a Base64urlUInt-encoded value.
	    </t>
	    <t>
	      Note that implementers have found that some cryptographic libraries
	      prefix an extra zero-valued octet to the modulus representations they return,
	      for instance, returning 257 octets for a 2048-bit key, rather than 256.
	      Implementations using such libraries will need to take care to omit
	      the extra octet from the base64url-encoded representation.
	    </t>
	  </section>

	  <section title='"e" (Exponent) Parameter' anchor="eRSADef">
	    <t>
	      The <spanx style="verb">e</spanx> (exponent) parameter contains
	      the exponent value for the RSA public key.
	      It is represented as a Base64urlUInt-encoded value.
	    </t>
	    <t>
	      For instance, when representing the value 65537,
	      the octet sequence to be base64url-encoded MUST consist of the
	      three octets [1, 0, 1];
	      the resulting representation for this value is "AQAB".
	    </t>
	  </section>

	</section>

	<section title="Parameters for RSA Private Keys" anchor="RSAPrivate">
	  <t>
	    In addition to the members used to represent RSA public keys,
	    the following members are used to represent RSA private keys.
	    The parameter <spanx style="verb">d</spanx> is REQUIRED for RSA private keys.
	    The others enable optimizations and SHOULD be included by producers
	    of JWKs representing RSA private keys.
	    If the producer includes any of the other private key parameters, 
	    then all of the others MUST be present,
	    with the exception of <spanx style="verb">oth</spanx>,
	    which MUST only be present when more than two prime factors were used.
	  </t>

	  <section title='"d" (Private Exponent) Parameter' anchor="dRSADef">
	    <t>
	      The <spanx style="verb">d</spanx> (private exponent) parameter contains
	      the private exponent value for the RSA private key.
	      It is represented as a Base64urlUInt-encoded value.
	    </t>
	  </section>

	  <section title='"p" (First Prime Factor) Parameter' anchor="pRSADef">
	    <t>
	      The <spanx style="verb">p</spanx> (first prime factor) parameter contains
	      the first prime factor.
	      It is represented as a Base64urlUInt-encoded value.
	    </t>
	  </section>

	  <section title='"q" (Second Prime Factor) Parameter' anchor="qRSADef">
	    <t>
	      The <spanx style="verb">q</spanx> (second prime factor) parameter contains
	      the second prime factor.
	      It is represented as a Base64urlUInt-encoded value.
	    </t>
	  </section>

	  <section title='"dp" (First Factor CRT Exponent) Parameter' anchor="dpRSADef">
	    <t>
	      The <spanx style="verb">dp</spanx> (first factor CRT exponent)
	      parameter contains the Chinese Remainder Theorem (CRT) exponent
	      of the first factor.
	      It is represented as a Base64urlUInt-encoded value.
	    </t>
	  </section>

	  <section title='"dq" (Second Factor CRT Exponent) Parameter' anchor="dqRSADef">
	    <t>
	      The <spanx style="verb">dq</spanx> (second factor CRT exponent)
	      parameter contains the CRT exponent
	      of the second factor.
	      It is represented as a Base64urlUInt-encoded value.
	    </t>
	  </section>

	  <section title='"qi" (First CRT Coefficient) Parameter' anchor="qiRSADef">
	    <t>
	      The <spanx style="verb">qi</spanx> (first CRT coefficient)
	      parameter contains the CRT
	      coefficient of the second factor.
	      It is represented as a Base64urlUInt-encoded value.
	    </t>
	  </section>

	  <section title='"oth" (Other Primes Info) Parameter' anchor="othRSADef">
	    <t>
	      The <spanx style="verb">oth</spanx> (other primes info)
	      parameter contains an array of information about any third and subsequent
	      primes, should they exist.
	      When only two primes have been used (the normal case),
	      this parameter MUST be omitted.
	      When three or more primes have been used, the number of array
	      elements MUST be the number of primes used minus two.
	      For more information on this case,
	      see the description of the OtherPrimeInfo parameters in
	      Appendix A.1.2 of <xref target="RFC3447">RFC 3447</xref>,
	      upon which the following parameters are modeled.
	      If the consumer of a JWK does not support private keys with
	      more than two primes and it encounters a private key that includes
	      the <spanx style="verb">oth</spanx> parameter,
	      then it MUST NOT use the key.
	      Each array element MUST be an object with the following members.
	    </t>

	    <section title='"r" (Prime Factor)' anchor="othRSArDef">
	      <t>
		The <spanx style="verb">r</spanx> (prime factor) parameter
		within an <spanx style="verb">oth</spanx> array member
		represents the value of a subsequent prime factor.
		It is represented as a Base64urlUInt-encoded value.
	      </t>
	    </section>

	    <section title='"d" (Factor CRT Exponent)' anchor="othRSAdDef">
	      <t>
		The <spanx style="verb">d</spanx> (factor CRT exponent) parameter
		within an <spanx style="verb">oth</spanx> array member
		represents the CRT exponent of the corresponding prime factor.
		It is represented as a Base64urlUInt-encoded value.
	      </t>
	    </section>

	    <section title='"t" (Factor CRT Coefficient)' anchor="othRSAtDef">
	      <t>
		The <spanx style="verb">t</spanx> (factor CRT coefficient) parameter
		within an <spanx style="verb">oth</spanx> array member
		represents the CRT coefficient of the corresponding prime factor.
		It is represented as a Base64urlUInt-encoded value.
	      </t>
	    </section>

	  </section>

	</section>

      </section>

      <section title="Parameters for Symmetric Keys" anchor="JWKoct">
	<t>

	  When the JWK <spanx style="verb">kty</spanx>
	  member value is <spanx style="verb">oct</spanx> (octet sequence),
	  the member <spanx style="verb">k</spanx> (see <xref target="kOctDef" />) is used to represent
	  a symmetric key (or another key whose value is a single octet sequence).
	  An <spanx style="verb">alg</spanx> member SHOULD also be present
	  to identify the algorithm intended to be used with the key,
	  unless the application uses another means
	  or convention to determine the algorithm used.
	</t>

	<section title='"k" (Key Value) Parameter' anchor="kOctDef">
	  <t>
	    The <spanx style="verb">k</spanx> (key value) parameter contains
	    the value of the symmetric (or other single-valued) key.
	    It is represented as the base64url encoding of the
	    octet sequence containing the key value.
	  </t>
	</section>

      </section>

    </section>

    <section title="IANA Considerations" anchor="IANA">
      <t>
	The following registration procedure is used for all the
	registries established by this specification.
      </t>
      <t>
	The registration procedure for values is Specification Required
	<xref target="RFC5226"/> after a three-week review period on the jose&nbhy;reg&nbhy;review@ietf.org mailing
	list, on the advice of one or more Designated Experts. However, to allow for the
	allocation of values prior to publication, the Designated Experts may approve
	registration once they are satisfied that such a specification will be published.
      </t>

      <t>Registration requests sent to the mailing list for review should use
  an appropriate subject
	(e.g., "Request to register algorithm: example").
      </t>
      <t>
	Within the review period, the Designated Experts will either approve or
	deny the registration request, communicating this decision to the review list and IANA.
	Denials should include an explanation and, if applicable, suggestions as to how to make
	the request successful.
	Registration requests that are undetermined for
	a period longer than 21 days can be brought to the IESG's attention
	(using the iesg@ietf.org mailing list) for resolution.
      </t>
      <t>
	Criteria that should be applied by the Designated Experts include
	determining whether the proposed registration duplicates existing functionality,
	whether it is likely to be of general applicability
	or useful only for a single application,
	and whether the registration description is clear.
      </t>
      <t>
	IANA must only accept registry updates from the Designated Experts and should direct
	all requests for registration to the review mailing list.
      </t>
      <t>
	It is suggested that multiple Designated Experts be appointed who are able to
	represent the perspectives of different applications using this specification,
	in order to enable broadly informed review of registration decisions.
	In cases where a registration decision could be perceived as
	creating a conflict of interest for a particular Expert,
	that Expert should defer to the judgment of the other Experts.
      </t>
  

      <section title="JSON Web Signature and Encryption Algorithms Registry" anchor="JWSJWEAlgsReg">
	<t>
	  This specification establishes the
	  IANA "JSON Web Signature and Encryption Algorithms" registry
	  for values of the JWS and JWE
	  <spanx style="verb">alg</spanx> (algorithm) and
	  <spanx style="verb">enc</spanx> (encryption algorithm)
	  Header Parameters.
	  The registry records the algorithm name, the algorithm description,
	  the algorithm usage locations,
	  the implementation requirements, the change controller,
	  and a reference to the specification that defines it.
	  The same algorithm name can be registered multiple times,
	  provided that the sets of usage locations are disjoint.
	</t>
	<t>
	     It is suggested that the length of the key be included in the algorithm 
   name when multiple variations of algorithms are being
   registered that use keys of different lengths and the key lengths for
   each need to be fixed (for instance, because they will be created by
   key derivation functions).
	  This allows readers of the JSON text to more easily make security decisions.
	</t>
	<t>
	  The Designated Experts should perform reasonable due diligence
	  that algorithms being registered either are currently considered
	  cryptographically credible or are being registered as Deprecated
	  or Prohibited.
	</t>
	<t>
	  The implementation requirements of an algorithm may be changed
	  over time as the
	  cryptographic landscape evolves, for instance,
	  to change the status of an algorithm to Deprecated or
	  to change the status of an algorithm from Optional
	  to Recommended+ or Required.
	  Changes of implementation requirements are only permitted
	  on a Specification Required basis after review by the Designated Experts,
	  with the new specification
	  defining the revised implementation requirements level.
	</t>

        <section title="Registration Template" anchor="AlgsTemplate">
          <t>
            <list style='hanging'>
              <t hangText='Algorithm Name:'>
                <vspace/>
                The name requested (e.g., "HS256").
		This name is a case-sensitive ASCII string.
		Names may not match other registered names in a case-insensitive manner
		unless the Designated Experts state that there is a compelling reason
		to allow an exception.
              </t>
              <t hangText='Algorithm Description:'>
                <vspace/>
                Brief description of the algorithm (e.g., "HMAC using SHA-256").
              </t>
              <t hangText='Algorithm Usage Location(s):'>
                <vspace/>
                The algorithm usage locations. This must be one or more of the values
		<spanx style="verb">alg</spanx> or
		<spanx style="verb">enc</spanx>
		if the algorithm is to be used with JWS or JWE.
		The value <spanx style="verb">JWK</spanx> is used if the algorithm
		identifier will be used as a JWK <spanx style="verb">alg</spanx>
		member value, but will not be used with JWS or JWE;
		this could be the case, for instance, for non-authenticated encryption algorithms.
		Other values may be used with the approval of a Designated Expert.
              </t>
              <t hangText='JOSE Implementation Requirements:'>
                <vspace/>
                The algorithm implementation requirements for JWS and JWE, which must be one the words
		Required, Recommended, Optional, Deprecated, or Prohibited.
		Optionally, the word can be followed by a "+" or "-".
		The use of "+" indicates that the requirement strength is likely
		to be increased in a future version of the specification. 
		The use of "-" indicates that the requirement strength is likely
		to be decreased in a future version of the specification.
		Any identifiers registered for non-authenticated encryption algorithms
		or other algorithms that are otherwise unsuitable for direct use
		as JWS or JWE algorithms must be registered as "Prohibited".
              </t>	      
              <t hangText='Change Controller:'>
                <vspace/>
                For Standards Track RFCs, list the "IESG". For others, give the name of the
                responsible party. Other details (e.g., postal address, email address, home page
                URI) may also be included.
              </t>
              <t hangText='Specification Document(s):'>
                <vspace/>
                Reference to the document or documents that specify the parameter,
		preferably including URIs that
                can be used to retrieve copies of the documents.
		An indication of the relevant
                sections may also be included but is not required.
              </t>
              <t hangText='Algorithm Analysis Documents(s):'>
                <vspace/>
                References to a publication or publications in well-known cryptographic conferences,
		by national standards bodies, or by other authoritative sources analyzing
		the cryptographic soundness of the algorithm to be registered.
		The Designated Experts may require convincing evidence of
		the cryptographic soundness of a new algorithm to be provided
		with the registration request
		unless the algorithm is being registered as Deprecated or Prohibited.
		Having gone through working group and IETF review, the initial
		registrations made by this document are exempt from
		the need to provide this information.
              </t>
            </list>
          </t>
        </section>

        <section title="Initial Registry Contents" anchor="AlgsContents">
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">HS256</spanx>
              </t>
              <t>
                Algorithm Description: HMAC using SHA-256
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Required
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="DefiningHMAC" />
		of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">HS384</spanx>
              </t>
              <t>
                Algorithm Description: HMAC using SHA-384
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
	      <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="DefiningHMAC" />
		of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">HS512</spanx>
              </t>
              <t>
                Algorithm Description: HMAC using SHA-512
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
	      <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="DefiningHMAC" />
		of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">RS256</spanx>
              </t>
              <t>
                Algorithm Description: RSASSA-PKCS1-v1_5 using SHA-256
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Recommended
              </t>
	      <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="DefiningRSA" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">RS384</spanx>
              </t>
              <t>
                Algorithm Description: RSASSA-PKCS1-v1_5 using SHA-384
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="DefiningRSA" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">RS512</spanx>
              </t>
              <t>
                Algorithm Description: RSASSA-PKCS1-v1_5 using SHA-512
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="DefiningRSA" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ES256</spanx>
              </t>
              <t>
                Algorithm Description: ECDSA using P-256 and SHA-256
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Recommended+
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="DefiningECDSA" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ES384</spanx>
              </t>
              <t>
                Algorithm Description: ECDSA using P-384 and SHA-384
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="DefiningECDSA" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ES512</spanx>
              </t>
              <t>
                Algorithm Description: ECDSA using P-521 and SHA-512
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="DefiningECDSA" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">PS256</spanx>
              </t>
              <t>
                Algorithm Description: RSASSA-PSS using SHA-256 and MGF1 with SHA-256
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
	      <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="DefiningPSS" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">PS384</spanx>
              </t>
              <t>
                Algorithm Description: RSASSA-PSS using SHA-384 and MGF1 with SHA-384
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
	      <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="DefiningPSS" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">PS512</spanx>
              </t>
              <t>
                Algorithm Description: RSASSA-PSS using SHA-512 and MGF1 with SHA-512
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
	      <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="DefiningPSS" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">none</spanx>
              </t>
              <t>
                Algorithm Description: No digital signature or MAC performed
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="UsingNone" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">RSA1_5</spanx>
              </t>
              <t>
                Algorithm Description: RSAES-PKCS1-v1_5
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Recommended-
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="KeyEncryptionRSA15" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">RSA-OAEP</spanx>
              </t>
              <t>
                Algorithm Description: RSAES OAEP using default parameters
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Recommended+
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="KeyEncryptionRSAOAEP" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">RSA-OAEP-256</spanx>
              </t>
              <t>
                Algorithm Description: RSAES OAEP using SHA-256 and MGF1 with SHA-256
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="KeyEncryptionRSAOAEP" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A128KW</spanx>
              </t>
              <t>
                Algorithm Description: AES Key Wrap using 128-bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Recommended
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="KeyEncryptionAESKW" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A192KW</spanx>
              </t>
              <t>
                Algorithm Description: AES Key Wrap using 192-bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="KeyEncryptionAESKW" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A256KW</spanx>
              </t>
              <t>
                Algorithm Description: AES Key Wrap using 256-bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Recommended
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="KeyEncryptionAESKW" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">dir</spanx>
              </t>
              <t>
                Algorithm Description: Direct use of a shared symmetric key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Recommended
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="DirectEncryption" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ECDH-ES</spanx>
              </t>
              <t>
                Algorithm Description: ECDH-ES using Concat KDF
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Recommended+
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="ECDHES" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ECDH-ES+A128KW</spanx>
              </t>
              <t>
                Algorithm Description: ECDH-ES using Concat KDF
		and <spanx style="verb">A128KW</spanx> wrapping
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Recommended
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="ECDHES" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ECDH-ES+A192KW</spanx>
              </t>
              <t>
                Algorithm Description: ECDH-ES using Concat KDF
		and <spanx style="verb">A192KW</spanx> wrapping
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="ECDHES" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ECDH-ES+A256KW</spanx>
              </t>
              <t>
                Algorithm Description: ECDH-ES using Concat KDF
		and <spanx style="verb">A256KW</spanx> wrapping
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Recommended
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="ECDHES" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
          <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A128GCMKW</spanx>
              </t>
              <t>
                Algorithm Description: Key wrapping with AES GCM using 128-bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="KeyEncryptionGCM" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A192GCMKW</spanx>
              </t>
              <t>
                Algorithm Description: Key wrapping with AES GCM using 192-bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="KeyEncryptionGCM" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A256GCMKW</spanx>
              </t>
              <t>
                Algorithm Description: Key wrapping with AES GCM using 256-bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="KeyEncryptionGCM" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>

	  <t>
	    <list style="symbols">
	      <t>
		Algorithm Name: <spanx style="verb">PBES2-HS256+A128KW</spanx>
	      </t>
	      <t>
		Algorithm Description: PBES2 with HMAC SHA-256
		and <spanx style="verb">A128KW</spanx> wrapping
	      </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
	      <t>
		JOSE Implementation Requirements: Optional
	      </t>
	      <t>
		Change Controller: IESG
	      </t>
	      <t>
		Specification Document(s): <xref target="pbcrypto-pbes2-jwe"/> of RFC 7518
	      </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
	    </list>
	  </t>
	  <t>
	    <list style="symbols">
	      <t>
		Algorithm Name: <spanx style="verb">PBES2-HS384+A192KW</spanx>
	      </t>
	      <t>
		Algorithm Description: PBES2 with HMAC SHA-384
		and <spanx style="verb">A192KW</spanx> wrapping
	      </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
	      <t>
		JOSE Implementation Requirements: Optional
	      </t>
	      <t>
		Change Controller: IESG
	      </t>
	      <t>
		Specification Document(s): <xref target="pbcrypto-pbes2-jwe"/> of RFC 7518
	      </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
	    </list>
	  </t>
	  <t>
	    <list style="symbols">
	      <t>
		Algorithm Name: <spanx style="verb">PBES2-HS512+A256KW</spanx>
	      </t>
	      <t>
		Algorithm Description: PBES2 with HMAC SHA-512
		and <spanx style="verb">A256KW</spanx> wrapping
	      </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
	      <t>
		JOSE Implementation Requirements: Optional
	      </t>
	      <t>
		Change Controller: IESG
	      </t>
	      <t>
		Specification Document(s): <xref target="pbcrypto-pbes2-jwe"/> of RFC 7518
	      </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
	    </list>
	  </t>

	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A128CBC-HS256</spanx>
              </t>
              <t>
                Algorithm Description: 
		AES_128_CBC_HMAC_SHA_256 authenticated encryption algorithm
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">enc</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Required
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="CBC_HMAC_256" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A192CBC-HS384</spanx>
              </t>
              <t>
                Algorithm Description: 
		AES_192_CBC_HMAC_SHA_384 authenticated encryption algorithm
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">enc</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="CBC_HMAC_384" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A256CBC-HS512</spanx>
              </t>
              <t>
                Algorithm Description: 
		AES_256_CBC_HMAC_SHA_512 authenticated encryption algorithm
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">enc</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Required
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="CBC_HMAC_512" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A128GCM</spanx>
              </t>
              <t>
                Algorithm Description: AES GCM using 128-bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">enc</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Recommended
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="ContentEncryptionGCM" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A192GCM</spanx>
              </t>
              <t>
                Algorithm Description: AES GCM using 192-bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">enc</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="ContentEncryptionGCM" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
          </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A256GCM</spanx>
              </t>
              <t>
                Algorithm Description: AES GCM using 256-bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">enc</spanx>
              </t>
              <t>
                JOSE Implementation Requirements: Recommended
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="ContentEncryptionGCM" /> of RFC 7518
              </t>
              <t>
                Algorithm Analysis Documents(s): n/a
              </t>
            </list>
          </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

      <section title="Header Parameter Names Registration" anchor="HdrReg">
	<t>
	  This section registers the Header Parameter names defined in Sections
	  <xref target="ParamsECDHES" format="counter"/>,
	  <xref target="ParamsGCMKeyWrap" format="counter"/>,
	  and <xref target="ParamsPBES2" format="counter"/>
	  of this specification in the IANA
	  "JSON Web Signature and Encryption Header Parameters" registry
	  established by
	  <xref target="JWS" />.
	</t>

        <section title="Registry Contents" anchor="HdrContents">
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">epk</spanx>
              </t>
              <t>
                Header Parameter Description: Ephemeral Public Key
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="epkDef"/> of RFC 7518
              </t>
            </list>
	  </t>
	  <t>
 	    <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">apu</spanx>
              </t>
              <t>
                Header Parameter Description: Agreement PartyUInfo
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="apuDef"/> of RFC 7518
              </t>
            </list>
	  </t>
	  <t>
 	    <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">apv</spanx>
              </t>
              <t>
                Header Parameter Description: Agreement PartyVInfo
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="apvDef"/> of RFC 7518
              </t>
            </list>
	  </t>
          <t>
            <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">iv</spanx>
              </t>
              <t>
                Header Parameter Description: Initialization Vector
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="ivDef"/> of RFC 7518
              </t>
            </list>
	  </t>
	  <t>
 	    <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">tag</spanx>
              </t>
              <t>
                Header Parameter Description: Authentication Tag
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="tagDef"/> of RFC 7518
              </t>
            </list>
	  </t>
          <t>
            <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">p2s</spanx>
              </t>
              <t>
                Header Parameter Description: PBES2 Salt Input
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="p2sDef"/> of RFC 7518
              </t>
            </list>
	  </t>
	  <t>
 	    <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">p2c</spanx>
              </t>
              <t>
                Header Parameter Description: PBES2 Count
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="p2cDef"/> of RFC 7518
              </t>
            </list>
	  </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

      <section title="JSON Web Encryption Compression Algorithms Registry" anchor="ZipReg">
	<t>
	  This specification establishes the
	  IANA "JSON Web Encryption Compression Algorithms" registry
	  for JWE <spanx style="verb">zip</spanx> member values.
	  The registry records the compression algorithm value
	  and a reference to the specification that defines it.
	</t>

        <section title="Registration Template" anchor="ZipTemplate">
          <t>
            <list style='hanging'>
              <t hangText='Compression Algorithm Value:'>
                <vspace/>
                The name requested (e.g., "DEF").
		Because a core goal of this specification is for the resulting
		representations to be compact, it is RECOMMENDED that the name be short
		-- not to exceed 8 characters without a compelling reason to do so.
		This name is case sensitive.
		Names may not match other registered names in a case-insensitive manner
		unless the Designated Experts state that there is a compelling reason
		to allow an exception.
              </t>
              <t hangText='Compression Algorithm Description:'>
                <vspace/>
                Brief description of the compression algorithm (e.g., "DEFLATE").
              </t>
              <t hangText='Change Controller:'>
                <vspace/>
                For Standards Track RFCs, list "IESG". For others, give the name of the
                responsible party. Other details (e.g., postal address, email address, home page
                URI) may also be included.
              </t>
              <t hangText='Specification Document(s):'>
                <vspace/>
                Reference to the document or documents that specify the parameter,
		preferably including URIs that
                can be used to retrieve copies of the documents.
		An indication of the relevant
                sections may also be included but is not required.
              </t>
            </list>
          </t>
        </section>

        <section title="Initial Registry Contents" anchor="ZipContents">
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                Compression Algorithm Value: <spanx style="verb">DEF</spanx>
              </t>
              <t>
                Compression Algorithm Description: DEFLATE
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): JSON Web Encryption (JWE) <xref target="JWE"/>
              </t>
            </list>
          </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

      <section title="JSON Web Key Types Registry" anchor="KeyTypesRegistry">
	<t>
	  This specification establishes the
	  IANA "JSON Web Key Types" registry
	  for values of the JWK
	  <spanx style="verb">kty</spanx> (key type) parameter.
	  The registry records the <spanx style="verb">kty</spanx> value,
	  implementation requirements,
	  and a reference to the specification that defines it.
	</t>
	<t>
	  The implementation requirements of a key type may be changed
	  over time as the
	  cryptographic landscape evolves, for instance,
	  to change the status of a key type to Deprecated or
	  to change the status of a key type from Optional
	  to Recommended+ or Required.
	  Changes of implementation requirements are only permitted
	  on a Specification Required basis after review by the Designated Experts,
	  with the new specification
	  defining the revised implementation requirements level.
	</t>

        <section title="Registration Template" anchor="KtyTemplate">
          <t>
            <list style='hanging'>
              <t hangText='"kty" Parameter Value:'>
                <vspace/>
                The name requested (e.g., "EC").
		Because a core goal of this specification is for the resulting
		representations to be compact, it is RECOMMENDED that the name be short
		-- not to exceed 8 characters without a compelling reason to do so.
		This name is case sensitive.
		Names may not match other registered names in a case-insensitive manner
		unless the Designated Experts state that there is a compelling reason
		to allow an exception.
              </t>
              <t hangText='Key Type Description:'>
                <vspace/>
                Brief description of the Key Type (e.g., "Elliptic Curve").
              </t>
              <t hangText='Change Controller:'>
                <vspace/>
                For Standards Track RFCs, list "IESG". For others, give the name of the
                responsible party. Other details (e.g., postal address, email address, home page
                URI) may also be included.
              </t>
              <t hangText='JOSE Implementation Requirements:'>
                <vspace/>
                The key type implementation requirements for JWS and JWE, which must be one the words
		Required, Recommended, Optional, Deprecated, or Prohibited.
		Optionally, the word can be followed by a "+" or "-".
		The use of "+" indicates that the requirement strength is likely
		to be increased in a future version of the specification. 
		The use of "-" indicates that the requirement strength is likely
		to be decreased in a future version of the specification.
              </t>	      
              <t hangText='Specification Document(s):'>
                <vspace/>
                Reference to the document or documents that specify the parameter,
		preferably including URIs that
                can be used to retrieve copies of the documents.
		An indication of the relevant
                sections may also be included but is not required.
              </t>
            </list>
          </t>
        </section>


        <section title="Initial Registry Contents" anchor="KtyContents">
	  <t>
	    This section registers the values defined in
	    <xref target="JWKKtyValues" />.
	  </t>
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                "kty" Parameter Value: <spanx style="verb">EC</spanx>
              </t>
              <t>
                Key Type Description: Elliptic Curve
              </t>
              <t>
                JOSE Implementation Requirements: Recommended+
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWKEC" /> of RFC 7518
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                "kty" Parameter Value: <spanx style="verb">RSA</spanx>
              </t>
              <t>
                Key Type Description: RSA
              </t>
              <t>
                JOSE Implementation Requirements: Required
              </t>
	      <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWKRSA" /> of RFC 7518
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                "kty" Parameter Value: <spanx style="verb">oct</spanx>
              </t>
              <t>
                Key Type Description: Octet Sequence
              </t>
              <t>
                JOSE Implementation Requirements: Required
              </t>
	      <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWKoct" /> of RFC 7518
              </t>
            </list>
	  </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

      <section title="JSON Web Key Parameters Registration" anchor="KeyRegistration">
	<t>
	  This section registers the parameter names defined in
	  Sections <xref target="JWKEC" format="counter"/>,
	  <xref target="JWKRSA" format="counter"/>, and
	  <xref target="JWKoct" format="counter"/>
	  of this specification in the
	  IANA "JSON Web Key Parameters" registry
	  established by
	  <xref target="JWK"/>.
	</t>

        <section title="Registry Contents" anchor="KeyContents">
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">crv</spanx>
              </t>
              <t>
                Parameter Description: Curve
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">EC</spanx>
	      </t>
	      <t>
                Parameter Information Class: Public
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="crvECDef" /> of RFC 7518
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">x</spanx>
              </t>
              <t>
                Parameter Description: X Coordinate
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">EC</spanx>
	      </t>
	      <t>
                Parameter Information Class: Public
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="xECDef" /> of RFC 7518
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">y</spanx>
              </t>
              <t>
                Parameter Description: Y Coordinate
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">EC</spanx>
	      </t>
	      <t>
                Parameter Information Class: Public
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="yECDef" /> of RFC 7518
              </t>
            </list>
	  </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">d</spanx>
              </t>
              <t>
                Parameter Description: ECC Private Key
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">EC</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="dECDef"/> of RFC 7518
              </t>
            </list>
	  </t>

	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">n</spanx>
              </t>
              <t>
                Parameter Description: Modulus
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Public
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="nRSADef" /> of RFC 7518
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">e</spanx>
              </t>
              <t>
                Parameter Description: Exponent
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Public
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="eRSADef" /> of RFC 7518
              </t>
            </list>
	  </t>


	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">d</spanx>
              </t>
              <t>
                Parameter Description: Private Exponent
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="dRSADef"/> of RFC 7518
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">p</spanx>
              </t>
              <t>
                Parameter Description: First Prime Factor
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="pRSADef"/> of RFC 7518
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">q</spanx>
              </t>
              <t>
                Parameter Description: Second Prime Factor
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="qRSADef"/> of RFC 7518
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">dp</spanx>
              </t>
              <t>
                Parameter Description: First Factor CRT Exponent
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="dpRSADef"/> of RFC 7518
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">dq</spanx>
              </t>
              <t>
                Parameter Description: Second Factor CRT Exponent
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="dqRSADef"/> of RFC 7518
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">qi</spanx>
              </t>
              <t>
                Parameter Description: First CRT Coefficient
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="qiRSADef"/> of RFC 7518
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">oth</spanx>
              </t>
              <t>
                Parameter Description: Other Primes Info
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="othRSADef"/> of RFC 7518
              </t>
            </list>
	  </t>

	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">k</spanx>
              </t>
              <t>
                Parameter Description: Key Value
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">oct</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="kOctDef"/> of RFC 7518
              </t>
            </list>
	  </t>

	</section>
	<?rfc subcompact="no"?>
      </section>

      <section title="JSON Web Key Elliptic Curve Registry" anchor="CurveReg">
	<t>
	  This section establishes the
	  IANA "JSON Web Key Elliptic Curve" registry
	  for JWK <spanx style="verb">crv</spanx> member values.
	  The registry records the curve name,
	  implementation requirements,
	  and a reference to the specification that defines it.
	  This specification registers the parameter names defined in
	  <xref target="crvECDef" />.
	</t>
	<t>
	  The implementation requirements of a curve may be changed
	  over time as the
	  cryptographic landscape evolves, for instance,
	  to change the status of a curve to Deprecated or
	  to change the status of a curve from Optional
	  to Recommended+ or Required.
	  Changes of implementation requirements are only permitted
	  on a Specification Required basis after review by the Designated Experts,
	  with the new specification
	  defining the revised implementation requirements level.
	</t>

        <section title="Registration Template" anchor="CurveTemplate">
          <t>
            <list style='hanging'>
              <t hangText='Curve Name:'>
                <vspace/>
                The name requested (e.g., "P-256").
		Because a core goal of this specification is for the resulting
		representations to be compact, it is RECOMMENDED that the name be short
		-- not to exceed 8 characters without a compelling reason to do so.
		This name is case sensitive.
		Names may not match other registered names in a case-insensitive manner
		unless the Designated Experts state that there is a compelling reason
		to allow an exception.
              </t>
              <t hangText='Curve Description:'>
                <vspace/>
                Brief description of the curve (e.g., "P-256 Curve").
              </t>
              <t hangText='JOSE Implementation Requirements:'>
                <vspace/>
                The curve implementation requirements for JWS and JWE, which must be one the words
		Required, Recommended, Optional, Deprecated, or Prohibited.
		Optionally, the word can be followed by a "+" or "-".
		The use of "+" indicates that the requirement strength is likely
		to be increased in a future version of the specification. 
		The use of "-" indicates that the requirement strength is likely
		to be decreased in a future version of the specification.
              </t>	      
              <t hangText='Change Controller:'>
                <vspace/>
                For Standards Track RFCs, list "IESG". For others, give the name of the
                responsible party. Other details (e.g., postal address, email address, home page
                URI) may also be included.
              </t>
              <t hangText='Specification Document(s):'>
                <vspace/>
                Reference to the document or documents that specify the parameter,
		preferably including URIs that
                can be used to retrieve copies of the documents.
		An indication of the relevant
                sections may also be included but is not required.
              </t>
            </list>
          </t>
        </section>

        <section title="Initial Registry Contents" anchor="CurveContents">
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                Curve Name: <spanx style="verb">P-256</spanx>
              </t>
              <t>
                Curve Description: P-256 Curve
              </t>
              <t>
                JOSE Implementation Requirements: Recommended+
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="crvECDef" /> of RFC 7518
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Curve Name: <spanx style="verb">P-384</spanx>
              </t>
              <t>
                Curve Description: P-384 Curve
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="crvECDef" /> of RFC 7518
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Curve Name: <spanx style="verb">P-521</spanx>
              </t>
              <t>
                Curve Description: P-521 Curve
              </t>
              <t>
                JOSE Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="crvECDef" /> of
		RFC 7518 
              </t>
            </list>
          </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

    </section>

    <section title="Security Considerations" anchor="Security">
      <t>
	All of the security issues that are pertinent to any cryptographic application
	must be addressed by JWS/JWE/JWK agents.  Among these issues are protecting
	the user's asymmetric private and symmetric secret keys and
	employing countermeasures to various attacks.
      </t>
      <t>
	The security considerations in
	<xref target="AES"/>,
	<xref target="DSS"/>,
	<xref target="JWE"/>,
	<xref target="JWK"/>,
	<xref target="JWS"/>,
	<xref target="NIST.800-38D"/>,
	<xref target="NIST.800-56A"/>,
	<xref target="NIST.800-107"/>,
	<xref target="RFC2104"/>,
	<xref target="RFC3394"/>,
	<xref target="RFC3447"/>,
	<xref target="RFC5116"/>,
	<xref target="RFC6090"/>, and
	<xref target="SHS"/> apply to this specification.
      </t>

      <section title="Cryptographic Agility" anchor="CryptoAgility">
	<t>
	  Implementers should be aware that cryptographic algorithms become
	  weaker with time.  As new cryptanalysis techniques are developed and
	  computing performance improves, the work factor to break a particular
	  cryptographic algorithm will be reduced.
	  Therefore, implementers and deployments must be prepared for
	  the set of algorithms that are supported and used to change over time.
	  Thus, cryptographic algorithm implementations should be modular,
	  allowing new algorithms to be readily inserted.
	</t>
      </section>

      <section title="Key Lifetimes" anchor="KeyLifetimes">
	<t>
	  Many algorithms have associated security considerations related to
	  key lifetimes and/or the number of times that a key may be used.
	  Those security considerations continue to apply when using
	  those algorithms with JOSE data structures.
	  See <xref target="NIST.800-57">NIST SP 800-57</xref> for specific
	  guidance on key lifetimes.
	</t>
      </section>

      <section title="RSAES-PKCS1-v1_5 Security Considerations" anchor="RSASecCon">
	<t>
	  While Section 8 of <xref target="RFC3447">RFC 3447</xref>
	  explicitly calls for people not to adopt RSASSA-PKCS1-v1_5 for new
	  applications and instead requests that people transition to
	  RSASSA-PSS, this specification does include RSASSA-PKCS1-v1_5, for
	  interoperability reasons, because it is commonly implemented.
	</t>
	<t>
	  Keys used with RSAES-PKCS1-v1_5 must follow the constraints in
	  Section 7.2 of RFC 3447.
	  Also, keys with a low public key exponent value,
	  as described in Section 3 of
	  <xref target="Boneh99">"Twenty Years of Attacks on the RSA Cryptosystem"</xref>,
	  must not be used.
	</t>
      </section>

      <section title="AES GCM Security Considerations" anchor="GCMSecCon">
	<t>
	  Keys used with AES GCM must follow the constraints in
	  Section 8.3 of <xref target="NIST.800-38D"/>, which states:
	  "The total number of invocations of the authenticated
	  encryption function shall not exceed 2^32, including all IV
	  lengths and all instances of the authenticated encryption
	  function with the given key".
	  In accordance with this rule, AES GCM MUST NOT be used
	  with the same key value
	  more than 2^32 times.
	</t>
	<t>
	  An IV value MUST NOT ever be used multiple times
	  with the same AES GCM key.
	  One way to prevent this is to store a counter with the key
	  and increment it with every use.
	  The counter can also be used to prevent exceeding the 2^32 limit above.
	</t>
	<t>
	  This security consideration does not apply to the
	  composite AES-CBC HMAC SHA-2 or AES Key Wrap algorithms.
	</t>
      </section>

      <section title="Unsecured JWS Security Considerations" anchor="NoneSecCon">
	<t>
	  Unsecured JWSs (JWSs that use the <spanx style="verb">alg</spanx>
	  value <spanx style="verb">none</spanx>) provide no integrity protection.
	  Thus, they must only be used in contexts in which the payload is secured by
	  means other than a digital signature or MAC value, or they need not be secured.
	</t>
	<t>
	  An example means of preventing accepting Unsecured JWSs by default
	  is for the "verify" method of a hypothetical JWS software library
	  to have a Boolean "acceptUnsecured" parameter
	  that indicates <spanx style="verb">none</spanx> is
	  an acceptable <spanx style="verb">alg</spanx> value.
	  As another example, the "verify" method might take a list of algorithms
	  that are acceptable to the application as a parameter and would reject
	  Unsecured JWS values if <spanx style="verb">none</spanx> is not in that list.
	</t>
	<t>
	  The following example illustrates the reasons for not accepting
	  Unsecured JWSs at a global level.
	  Suppose an application accepts JWSs over two channels,
	  (1) HTTP and (2) HTTPS with client authentication.
	  It requires a JWS Signature on objects received over HTTP,
	  but accepts Unsecured JWSs over HTTPS.
	  If the application were to globally indicate that
	  <spanx style="verb">none</spanx> is acceptable, then an attacker could
	  provide it with an Unsecured JWS over HTTP and still have
	  that object successfully validate.
	  Instead, the application needs to indicate acceptance of
	  <spanx style="verb">none</spanx> for each object received over HTTPS
	  (e.g., by setting "acceptUnsecured" to "true" for the first hypothetical
	  JWS software library above), but not for each object received over HTTP.
	</t>
      </section>

      <section title="Denial-of-Service Attacks" anchor="DOSAttacks">
	<t>
	  Receiving agents that validate signatures and sending agents that
	  encrypt messages need to be cautious of cryptographic processing
	  usage when validating signatures and encrypting messages using keys
	  larger than those mandated in this specification.  An attacker could
	  supply content using keys that would result in excessive
	  cryptographic processing, for example, keys larger than those
	  mandated in this specification.
	  Implementations should set and enforce upper limits
	  on the key sizes they accept.
	  Section 5.6.1 (Comparable Algorithm Strengths)
	  of <xref target="NIST.800-57">NIST SP 800-57</xref>
	  contains statements on largest approved key sizes that may be applicable.
	</t>
      </section>

      <section title="Reusing Key Material when Encrypting Keys" anchor="security-reuse">
	<t>
	  It is NOT RECOMMENDED to reuse the same entire set of key material
	  (Key Encryption Key, Content Encryption Key, Initialization Vector, etc.)
	  to encrypt multiple JWK or JWK Set objects, or to encrypt
	  the same JWK or JWK Set object multiple times.
	  One suggestion for preventing reuse is to always generate
	  at least one new piece of key material for each encryption operation
	  (e.g., a new Content Encryption Key, a new IV, and/or a new PBES2 Salt),
	  based on the considerations noted in this document
	  as well as from <xref target="RFC4086">RFC 4086</xref>.
	</t>
      </section>

      <section title="Password Considerations" anchor="security-pwd">
	<t>
	  Passwords are vulnerable to
	  a number of attacks.  To help mitigate some of these
	  limitations, this document applies principles from
	  <xref target="RFC2898">RFC 2898</xref> to derive cryptographic keys from
	  user-supplied passwords.
	</t>
	<t>
	  However, the strength of the password still has a
	  significant impact. A high-entropy password has greater
	  resistance to dictionary attacks.
	  <xref target="NIST.800-63-2"/> contains guidelines for
	  estimating password entropy, which can help applications and
	  users generate stronger passwords.
	</t>
	<t>
	  An ideal password is one that is as large as (or larger than)
	  the derived key length. However, passwords larger than
	  a certain algorithm-specific size are first
	  hashed, which reduces an attacker's effective search space
	  to the length of the hash algorithm.
	  It is RECOMMENDED that a password used for
	  <spanx style="verb">PBES2-HS256+A128KW</spanx> be
	  no shorter than 16 octets and no longer than 128 octets and
	  a password used for <spanx style="verb">PBES2-HS512+A256KW</spanx> be
	  no shorter than 32 octets and no longer than 128 octets long.
	</t>
	<t>
	  Still, care needs to be taken in where and how
	  password-based encryption is used.  These algorithms can still be
	  susceptible to dictionary-based attacks if the iteration count is too small;
	  this is of particular concern if these algorithms are used to protect data
	  that an attacker can have indefinite number of attempts to circumvent
	  the protection, such as protected data stored on a file system.
	</t>
      </section>

      <section title="Key Entropy and Random Values" anchor="KeyEntropy">
	<t>
	  See Section 10.1 of <xref target="JWS"/> for security considerations on
	  key entropy and random values.
	</t>
      </section>

      <section title="Differences between Digital Signatures and MACs"
	       anchor="SignaturesAndMacs">
	<t>
	  See Section 10.5 of <xref target="JWS"/> for security considerations on
	  differences between digital signatures and MACs.
	</t>
      </section>

      <section title="Using Matching Algorithm Strengths" anchor="MatchingStrengths">
	<t>
	  See Section 11.3 of <xref target="JWE"/> for security considerations on
	  using matching algorithm strengths.
	</t>
      </section>

      <section title="Adaptive Chosen-Ciphertext Attacks" anchor="Chosen-Ciphertext">
	<t>
	  See Section 11.4 of <xref target="JWE"/> for security considerations on
	  adaptive chosen-ciphertext attacks.
	</t>
      </section>

      <section title="Timing Attacks" anchor="TimingAttacks">
	<t>
	  See Section 10.9 of <xref target="JWS"/>
	  and Section 11.5 of <xref target="JWE"/> for security considerations on
	  timing attacks.
	</t>
      </section>

      <section title="RSA Private Key Representations and Blinding" anchor="RSABlinding">
	<t>
	  See Section 9.3 of <xref target="JWK"/> for security considerations on
	  RSA private key representations and blinding.
	</t>
      </section>

    </section>

    <section title="Internationalization Considerations" anchor="i18n">
      <t>
	Passwords obtained from users are likely to require
	preparation and normalization to account for differences of
	octet sequences generated by different input devices, locales, etc.
	It is RECOMMENDED that applications perform the steps
	outlined in <xref target="PRECIS"/>
	to prepare a password supplied directly by a user
	before performing key derivation and encryption.
      </t>
    </section>

  </middle>

  <back>
    <references title="Normative References">

<?rfc include="reference.RFC.2104.xml"?>
<?rfc include="reference.RFC.2119.xml"?>
<?rfc include="reference.RFC.2898.xml"?>
<?rfc include="reference.RFC.3394.xml"?>
<?rfc include="reference.RFC.3447.xml"?>
<?rfc include="reference.RFC.3629.xml"?>
<?rfc include="reference.RFC.4868.xml"?>
<?rfc include="reference.RFC.4949.xml"?>
<?rfc include="reference.RFC.5652.xml"?>
<?rfc include="reference.RFC.6090.xml"?>
<?rfc include="reference.RFC.7159.xml"?>

      <reference anchor="RFC20" target="http://www.rfc-editor.org/info/rfc20">
	<front>
	  <title>ASCII format for Network Interchange</title>
	  <author fullname="Vint Cerf" surname="Cerf" initials="V.">
	    <organization>University California Los Angeles (UCLA)</organization>
	  </author>
	  <date month="October" year="1969"/>
	</front>
	<seriesInfo name="STD" value="80"/>
	<seriesInfo name="RFC" value="20"/>
      </reference>

      <reference anchor="UNICODE" target="http://www.unicode.org/versions/latest/">
	<front>
	  <title abbrev="Unicode">The Unicode Standard</title>
	  <author>
	    <organization>The Unicode Consortium</organization>
	    <address />
	  </author>
	  <date/>
	</front>

      </reference>

      <reference anchor="SHS" target="http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf">
        <front>
          <title>Secure Hash Standard (SHS)</title>

          <author>
            <organization>National Institute of Standards and
            Technology (NIST)</organization>
          </author>

          <date month="March" year="2012" />
        </front>
        <seriesInfo name="FIPS" value="PUB 180-4" />
   
      </reference>

      <reference anchor="DSS" target="http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf">
        <front>
          <title>Digital Signature Standard (DSS)</title>

          <author>
            <organization>National Institute of Standards and
            Technology (NIST)</organization>
          </author>

          <date month="July" year="2013" />
        </front>
        <seriesInfo name="FIPS" value="PUB 186-4" />
      </reference>

      <reference anchor="AES" target="http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf">
        <front>
          <title>Advanced Encryption Standard (AES)</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="November" year="2001" />
        </front>
        <seriesInfo name="FIPS" value="PUB 197" />

      </reference>

      <reference anchor="NIST.800-38A" target="http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf">
        <front>
          <title>Recommendation for Block Cipher Modes of Operation</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="December" year="2001" />
        </front>
        <seriesInfo name="NIST Special Publication" value="800-38A" />
      </reference>

      <reference anchor="NIST.800-38D" target="http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf">
        <front>
          <title>Recommendation for Block Cipher Modes of Operation:
	  Galois/Counter Mode (GCM) and GMAC</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="December" year="2001" />
        </front>
        <seriesInfo name="NIST Special Publication" value="800-38D" />
      </reference>

      <reference anchor="NIST.800-56A" target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar2.pdf">
        <front>
          <title>Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="May" year="2013" />
        </front>
        <seriesInfo name="NIST" value="Special Publication 800-56A, Revision 2" />
      </reference>

      <reference anchor="NIST.800-57" target="http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57_part1_rev3_general.pdf">
        <front>
          <title>Recommendation for Key Management - Part 1: General (Revision 3)</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="July" year="2012" />
        </front>
        <seriesInfo name="NIST" value="Special Publication 800-57, Part 1, Revision 3" />

      </reference>

<!--draft-ietf-jose-json-web-signature; companion document; RFC 7515 -->
      <reference anchor="JWS" target="http://www.rfc-editor.org/info/rfc7515">
        <front>
          <title>JSON Web Signature (JWS)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization abbrev="Ping Identity">Ping Identity</organization>
	    <address>
	      <email>ve7jtb@ve7jtb.com</email>
	    </address>
	  </author>

	  <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
	    <organization abbrev="NRI">Nomura Research Institute</organization>
	    <address>
	      <email>n-sakimura@nri.co.jp</email>
	    </address>
	  </author>

	  <date month="May" year="2015"/>
        </front>
        <seriesInfo name="RFC" value="7515"/>
      </reference>

<!--draft-ietf-jose-json-web-encryption; companion document; RFC 7516 -->
      <reference anchor="JWE" target="http://www.rfc-editor.org/info/rfc7516">
        <front>
          <title>JSON Web Encryption (JWE)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <author fullname="Joe Hildebrand" initials="J." surname="Hildebrand">
	    <organization abbrev="Cisco">Cisco Systems, Inc.</organization>
	    <address>
	      <email>jhildebr@cisco.com</email>
	    </address>
	  </author>

	  <date month="May" year="2015"/>
        </front>
        <seriesInfo name="RFC" value="7516"/>
      </reference>

<!--companion document, RFC 7517 -->
      <reference anchor="JWK" target="http://www.rfc-editor.org/info/rfc7517">
        <front>
	  <title>JSON Web Key (JWK)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <date  month="May" year="2015"/>
        </front>
        <seriesInfo name="RFC" value="7517"/>
      </reference>

      <reference anchor="SEC1" target="http://www.secg.org/sec1-v2.pdf">
        <front>
          <title>SEC 1: Elliptic Curve Cryptography</title>
          <author>
            <organization>Standards for Efficient Cryptography Group</organization>
          </author>
          <date day="21" month="May" year="2009" />
        </front>
        <seriesInfo name="Version" value="2.0" />
      </reference>

      <reference anchor="Boneh99" target="http://crypto.stanford.edu/~dabo/pubs/papers/RSA-survey.pdf">
        <front>
          <title>Twenty Years of Attacks on the RSA Cryptosystem</title>

          <author fullname="Dan Boneh">
            <organization />
          </author>

	  <date year="1999" />
        </front>

        <seriesInfo name="Notices of the American Mathematical Society (AMS), Vol. 46, No. 2,"
                    value="pp. 203-213" />
      </reference>

    </references>

    <references title="Informative References">


<?rfc include="reference.RFC.2631.xml"?>
<?rfc include="reference.RFC.3275.xml"?>
<?rfc include="reference.RFC.4086.xml"?>
<?rfc include="reference.RFC.5116.xml"?>
<?rfc include="reference.RFC.5226.xml"?>


<!--<?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xmlenc-core-20021210.xml" ?> -->



<reference anchor='W3C.REC-xmlenc-core-20021210'
           target='http://www.w3.org/TR/2002/REC-xmlenc-core-20021210'>
<front>
<title>XML Encryption Syntax and Processing</title>

<author initials='D.' surname='Eastlake' fullname='Donald Eastlake'>
    <organization />
</author>

<author initials='J.' surname='Reagle' fullname='Joseph Reagle'>
    <organization />
</author>

<date month='December' day='10' year='2002' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-xmlenc-core-20021210' />
<format type='HTML' target='http://www.w3.org/TR/2002/REC-xmlenc-core-20021210' />
</reference>

<!--  draft-ietf-precis-saslprepbis-15: In Last Call -->
<reference anchor='PRECIS'>
<front>
<title>Preparation, Enforcement, and Comparison of Internationalized Strings Representing Usernames and Passwords</title>

<author initials='P' surname='Saint-Andre' fullname='Peter Saint-Andre'>
    <organization />
</author>

<author initials='A' surname='Melnikov' fullname='Alexey Melnikov'>
    <organization />
</author>

<date month='April' year='2015' />

<abstract><t>This document describes methods for handling Unicode strings representing usernames and passwords.  The methods specified in this document provide a more sustainable approach to the handling of internationalized usernames and passwords than the previous approach, known as SASLprep (RFC 4013) and based on Stringprep (RFC 3454). This document obsoletes RFC 4013.</t></abstract>

</front>

<seriesInfo name='Work in Progress,' value='draft-ietf-precis-saslprepbis-15' />

</reference>



 <!-- draft-mcgrew-aead-aes-cbc-hmac-sha2-05: Expired -->
<reference anchor="AEAD-CBC-SHA">
<front>
<title>Authenticated Encryption with AES-CBC and HMAC-SHA</title>

<author initials='D' surname='McGrew' fullname='David McGrew'>
    <organization />
</author>

<author initials='J' surname='Foley' fullname='John Foley'>
    <organization />
</author>

<author initials='K' surname='Paterson' fullname='Kenny Paterson'>
    <organization />
</author>

<date month='July' day='4' year='2014' />

<abstract><t>This document specifies algorithms for authenticated encryption with associated data (AEAD) that are based on the composition of the Advanced Encryption Standard (AES) in the Cipher Block Chaining (CBC) mode of operation for encryption, and the HMAC-SHA message authentication code (MAC).  These are randomized encryption algorithms, and thus are suitable for use with applications that cannot provide distinct nonces to each invocation of the AEAD encrypt operation.</t></abstract>

</front>

<seriesInfo name='Work in Progress,' value='draft-mcgrew-aead-aes-cbc-hmac-sha2-05' />

</reference>



<!-- draft-rescorla-jsms-00: Expired -->
<reference anchor='JSMS'>
<front>
<title>JavaScript Message Security Format</title>

<author initials='E' surname='Rescorla' fullname='Eric Rescorla'>
    <organization />
</author>

<author initials='J' surname='Hildebrand' fullname='Joe Hildebrand'>
    <organization />
</author>

<date month='March' day='7' year='2011' />

<abstract><t>Many applications require the ability to send cryptographically secured messages.  While the IETF has defined a number of formats for such messages (e.g.  CMS) those formats use encodings which are not congenial for Web applications.  This document describes a new cryptographic message format which is based on JavaScript Object Notation (JSON) and thus is easy for Web applications to generate and parse.</t></abstract>

</front>

<seriesInfo name='Work in Progress,' value='draft-rescorla-jsms-00' />

</reference>


<!-- draft-miller-jose-jwe-protected-jwk-02: Expired-->
<reference anchor='JWE-JWK'>
<front>
<title>Using JavaScript Object Notation (JSON) Web Encryption (JWE) for Protecting JSON Web Key (JWK) Objects</title>

<author initials='M' surname='Miller' fullname='Matthew Miller'>
    <organization />
</author>

<date month='June' day='13' year='2013' />

<abstract><t>This document specifies an approach to protecting a private key formatted as a JavaScript Syntax Object Notation (JSON) Web Key (JWK) object using JSON Web Encryption (JWE).  This document also specifies a set of algorithms for protecting such content using password-based cryptography.</t></abstract>

</front>

<seriesInfo name='Work in Progress,' value='draft-miller-jose-jwe-protected-jwk-02' />

</reference>


      <reference target="http://www.w3.org/TR/2013/NOTE-xmldsig-core2-20130411/" anchor="W3C.NOTE-xmldsig-core2-20130411">
	<front>
	  <title>XML Signature Syntax and Processing Version 2.0</title>
	  <author fullname="Donald Eastlake" surname="Eastlake" initials="D."><organization/></author>
	  <author fullname="Joseph Reagle" surname="Reagle" initials="J."><organization/></author>
	  <author fullname="David Solo" surname="Solo" initials="D."><organization/></author>
	  <author fullname="Frederick Hirsch" surname="Hirsch" initials="F."><organization/></author>
	  <author fullname="Thomas Roessler" surname="Roessler" initials="T."><organization/></author>
	  <author fullname="Kelvin Yiu" surname="Yiu" initials="K."><organization/></author>
	  <author fullname="Pratik Datta" surname="Datta" initials="P."><organization/></author>
	  <author fullname="Scott Cantor" surname="Cantor" initials="S."><organization/></author>
	  <date year="2013" day="11" month="April"/>
	</front>
	<seriesInfo value="NOTE-xmldsig-core2-20130411" name="World Wide Web Consortium Note"/>

      </reference>

      <reference target="http://www.w3.org/TR/2013/REC-xmlenc-core1-20130411/" anchor="W3C.REC-xmlenc-core1-20130411">
	<front>
	  <title>XML Encryption Syntax and Processing Version 1.1</title>
	  <author fullname="Donald Eastlake" surname="Eastlake" initials="D."><organization/></author>
	  <author fullname="Joseph Reagle" surname="Reagle" initials="J."><organization/></author>
	  <author fullname="Frederick Hirsch" surname="Hirsch" initials="F."><organization/></author>
	  <author fullname="Thomas Roessler" surname="Roessler" initials="T."><organization/></author>
	  <date year="2013" day="11" month="April"/>
	</front>
	<seriesInfo value="REC-xmlenc-core1-20130411" name="World Wide Web Consortium Recommendation"/>

      </reference>

      <reference anchor="MagicSignatures" target="http://salmon&nbhy;protocol.googlecode.com/svn/trunk/draft-panzer-magicsig-01.html">
        <front>
          <title>Magic Signatures</title>

          <author fullname="John Panzer" initials="J." surname="Panzer" role="editor"></author>

          <author fullname="Ben Laurie" initials="B." surname="Laurie"></author>

          <author fullname="Dirk Balfanz" initials="D." surname="Balfanz"></author>

          <date day="7" month="January" year="2011" />
        </front>
      </reference>


      <reference anchor="JSS" target="http://jsonenc.info/jss/1.0/">
        <front>
          <title>JSON Simple Sign 1.0</title>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization>independent</organization>
	  </author>

	  <author fullname="Nat Sakimura" initials="N. " surname="Sakimura" role="editor">
	    <organization abbrev="NRI">Nomura Research Institute</organization>
	  </author>

          <date month="September" year="2010" />
        </front>
        <seriesInfo name="Draft" value="01" />
     
      </reference>



      <reference anchor="JSE" target="http://jsonenc.info/enc/1.0/">
        <front>
          <title>JSON Simple Encryption</title>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization>independent</organization>
	  </author>

	  <author fullname="Nat Sakimura (editor)" initials="N. " surname="Sakimura (editor)">
	    <organization abbrev="NRI">Nomura Research Institute</organization>
	  </author>

          <date month="September" year="2010" />
        </front>
      </reference>


      <reference anchor="CanvasApp" target="http://developers.facebook.com/docs/authentication/canvas">
        <front>
          <title>Canvas Applications</title>

<author><organization>Facebook</organization></author>

          <date year="2010" />
        </front>
      
      </reference>

      <reference anchor="JCA" target="http://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html">
        <front>
          <title>Java Cryptography Architecture (JCA) Reference Guide</title>

<author><organization>Oracle</organization></author>

 
         <date year="2014" />
        </front>
      </reference>

      <reference anchor="NIST.800-63-2" target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-63-2.pdf">
        <front>
          <title>Electronic Authentication Guideline</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)</organization>
          </author>
          <date month="August" year="2013"/>
        </front>
        <seriesInfo name="NIST" value="Special Publication 800-63-2"/>

      </reference>

      <reference anchor="NIST.800-107" target="http://csrc.nist.gov/publications/nistpubs/800-107-rev1/sp800-107-rev1.pdf">
        <front>
          <title>Recommendation for Applications Using Approved Hash Algorithms</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)</organization>
          </author>
          <date month="August" year="2012"/>
        </front>
        <seriesInfo name="NIST" value="Special Publication 800-107, Revision 1"/>
    
      </reference>

    </references>

    <section title="Algorithm Identifier Cross-Reference" anchor="AlgXref">

      <t>
	This appendix contains tables cross-referencing the
	cryptographic algorithm identifier
	values defined in this specification with the equivalent identifiers
	used by other standards and software packages.
	See <xref target="RFC3275">XML DSIG</xref>,
	<xref target="W3C.NOTE-xmldsig-core2-20130411">XML DSIG 2.0</xref>,
	<xref target="W3C.REC-xmlenc-core-20021210">XML Encryption</xref>,
	<xref target="W3C.REC-xmlenc-core1-20130411">XML Encryption 1.1</xref>,
	and <xref target="JCA">Java Cryptography Architecture</xref>
	for more information about the names defined by those
	documents.
      </t>

      <section title="Digital Signature/MAC Algorithm Identifier Cross-Reference"
	       anchor="SigAlgXref">
	<t>
	  This section contains a table cross-referencing the
	  JWS digital signature and MAC <spanx style="verb">alg</spanx> (algorithm)
	  values defined in this specification with the equivalent identifiers
	  used by other standards and software packages.
	</t>


	<figure><artwork><![CDATA[
+-------------------------------------------------------------------+
| JWS      | XML DSIG                                               |
| | JCA                                   | OID                     |
+-------------------------------------------------------------------+
| HS256    | http://www.w3.org/2001/04/xmldsig-more#hmac-sha256     |
| | HmacSHA256                            | 1.2.840.113549.2.9      |
+-------------------------------------------------------------------+
| HS384    | http://www.w3.org/2001/04/xmldsig-more#hmac-sha384     |
| | HmacSHA384                            | 1.2.840.113549.2.10     |
+-------------------------------------------------------------------+
| HS512    | http://www.w3.org/2001/04/xmldsig-more#hmac-sha512     |
| | HmacSHA512                            | 1.2.840.113549.2.11     |
+-------------------------------------------------------------------+
| RS256    | http://www.w3.org/2001/04/xmldsig-more#rsa-sha256      |
| | SHA256withRSA                         | 1.2.840.113549.1.1.11   |
+-------------------------------------------------------------------+
| RS384    | http://www.w3.org/2001/04/xmldsig-more#rsa-sha384      |
| | SHA384withRSA                         | 1.2.840.113549.1.1.12   |
+-------------------------------------------------------------------+
| RS512    | http://www.w3.org/2001/04/xmldsig-more#rsa-sha512      |
| | SHA512withRSA                         | 1.2.840.113549.1.1.13   |
+-------------------------------------------------------------------+
| ES256    | http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256    |
| | SHA256withECDSA                       | 1.2.840.10045.4.3.2     |
+-------------------------------------------------------------------+
| ES384    | http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384    |
| | SHA384withECDSA                       | 1.2.840.10045.4.3.3     |
+-------------------------------------------------------------------+
| ES512    | http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512    |
| | SHA512withECDSA                       | 1.2.840.10045.4.3.4     |
+-------------------------------------------------------------------+
| PS256    | http://www.w3.org/2007/05/xmldsig-more#sha256-rsa-MGF1 |
| | SHA256withRSAandMGF1                  | 1.2.840.113549.1.1.10   |
+-------------------------------------------------------------------+
| PS384    | http://www.w3.org/2007/05/xmldsig-more#sha384-rsa-MGF1 |
| | SHA384withRSAandMGF1                  | 1.2.840.113549.1.1.10   |
+-------------------------------------------------------------------+
| PS512    | http://www.w3.org/2007/05/xmldsig-more#sha512-rsa-MGF1 |
| | SHA512withRSAandMGF1                  | 1.2.840.113549.1.1.10   |
+-------------------------------------------------------------------+
]]></artwork></figure>
      </section>

      <section title="Key Management Algorithm Identifier Cross-Reference"
	       anchor="EncAlgXref">
	<t>
	  This section contains a table cross-referencing the
	  JWE <spanx style="verb">alg</spanx> (algorithm)
	  values defined in this specification with the equivalent identifiers
	  used by other standards and software packages.
	</t>


	<figure><artwork><![CDATA[
+-------------------------------------------------------------------+
| JWE           | XML ENC                                           |
| | JCA                                   | OID                     |
+-------------------------------------------------------------------+
| RSA1_5        | http://www.w3.org/2001/04/xmlenc#rsa-1_5          |
| | RSA/ECB/PKCS1Padding                  | 1.2.840.113549.1.1.1    |
+-------------------------------------------------------------------+
| RSA-OAEP      | http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p   |
| | RSA/ECB/OAEPWithSHA-1AndMGF1Padding   | 1.2.840.113549.1.1.7    |
+-------------------------------------------------------------------+
| RSA-OAEP-256  | http://www.w3.org/2009/xmlenc11#rsa-oaep          |
|               | & http://www.w3.org/2009/xmlenc11#mgf1sha256      |
| | RSA/ECB/OAEPWithSHA-256AndMGF1Padding |                         |
| | & MGF1ParameterSpec.SHA256            | 1.2.840.113549.1.1.7    |
+-------------------------------------------------------------------+
| ECDH-ES       | http://www.w3.org/2009/xmlenc11#ECDH-ES           |
| | ECDH                                  | 1.3.132.1.12            |
+-------------------------------------------------------------------+
| A128KW        | http://www.w3.org/2001/04/xmlenc#kw-aes128        |
| | AESWrap                               | 2.16.840.1.101.3.4.1.5  |
+-------------------------------------------------------------------+
| A192KW        | http://www.w3.org/2001/04/xmlenc#kw-aes192        |
| | AESWrap                               | 2.16.840.1.101.3.4.1.25 |
+-------------------------------------------------------------------+
| A256KW        | http://www.w3.org/2001/04/xmlenc#kw-aes256        |
| | AESWrap                               | 2.16.840.1.101.3.4.1.45 |
+-------------------------------------------------------------------+
]]></artwork></figure>


      </section>

      <section title="Content Encryption Algorithm Identifier Cross-Reference"
	       anchor="EncEncXref">
	<t>
	  This section contains a table cross-referencing the
	  JWE <spanx style="verb">enc</spanx> (encryption algorithm)
	  values defined in this specification with the equivalent identifiers
	  used by other standards and software packages.
	</t>
	<t>
	  For the composite algorithms <spanx style="verb">A128CBC-HS256</spanx>,
	  <spanx style="verb">A192CBC-HS384</spanx>,
	  and <spanx style="verb">A256CBC-HS512</spanx>, the corresponding AES-CBC
	  algorithm identifiers are listed.
	</t>

	<figure><artwork><![CDATA[
+-------------------------------------------------------------------+
| JWE           | XML ENC                                           |
| | JCA                                   | OID                     |
+-------------------------------------------------------------------+
| A128CBC-HS256 | http://www.w3.org/2001/04/xmlenc#aes128-cbc       |
| | AES/CBC/PKCS5Padding                  | 2.16.840.1.101.3.4.1.2  |
+-------------------------------------------------------------------+
| A192CBC-HS384 | http://www.w3.org/2001/04/xmlenc#aes192-cbc       |
| | AES/CBC/PKCS5Padding                  | 2.16.840.1.101.3.4.1.22 |
+-------------------------------------------------------------------+
| A256CBC-HS512 | http://www.w3.org/2001/04/xmlenc#aes256-cbc       |
| | AES/CBC/PKCS5Padding                  | 2.16.840.1.101.3.4.1.42 |
+-------------------------------------------------------------------+
| A128GCM       | http://www.w3.org/2009/xmlenc11#aes128-gcm        |
| | AES/GCM/NoPadding                     | 2.16.840.1.101.3.4.1.6  |
+-------------------------------------------------------------------+
| A192GCM       | http://www.w3.org/2009/xmlenc11#aes192-gcm        |
| | AES/GCM/NoPadding                     | 2.16.840.1.101.3.4.1.26 |
+-------------------------------------------------------------------+
| A256GCM       | http://www.w3.org/2009/xmlenc11#aes256-gcm        |
| | AES/GCM/NoPadding                     | 2.16.840.1.101.3.4.1.46 |
+-------------------------------------------------------------------+
]]></artwork></figure>
      </section>

    </section>

    <section title="Test Cases for AES_CBC_HMAC_SHA2 Algorithms"
	     anchor="CBC_HMAC_TestCases">
      <t>
	The following test cases can be used to validate implementations of
	the AES_CBC_HMAC_SHA2 algorithms defined in <xref target="AES_CBC_HMAC_SHA2"/>.
	They are also intended to correspond to test cases that may appear in a
	future version of <xref target="AEAD-CBC-SHA"/>,
	demonstrating that the cryptographic computations performed are the same.
      </t>
      <t>
	The variable names are those defined in <xref target="AES_CBC_HMAC_SHA2"/>.
	All values are hexadecimal.
      </t>

      <section title="Test Cases for AES_128_CBC_HMAC_SHA_256"
	     anchor="CBC_HMAC_256_TestCases">
	<figure>
	  <artwork><![CDATA[
AES_128_CBC_HMAC_SHA_256

  K =       00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f

  MAC_KEY = 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f

  ENC_KEY = 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f

  P =       41 20 63 69 70 68 65 72 20 73 79 73 74 65 6d 20
            6d 75 73 74 20 6e 6f 74 20 62 65 20 72 65 71 75
            69 72 65 64 20 74 6f 20 62 65 20 73 65 63 72 65
            74 2c 20 61 6e 64 20 69 74 20 6d 75 73 74 20 62
            65 20 61 62 6c 65 20 74 6f 20 66 61 6c 6c 20 69
            6e 74 6f 20 74 68 65 20 68 61 6e 64 73 20 6f 66
            20 74 68 65 20 65 6e 65 6d 79 20 77 69 74 68 6f
            75 74 20 69 6e 63 6f 6e 76 65 6e 69 65 6e 63 65

  IV =      1a f3 8c 2d c2 b9 6f fd d8 66 94 09 23 41 bc 04

  A =       54 68 65 20 73 65 63 6f 6e 64 20 70 72 69 6e 63
            69 70 6c 65 20 6f 66 20 41 75 67 75 73 74 65 20
            4b 65 72 63 6b 68 6f 66 66 73

  AL =      00 00 00 00 00 00 01 50

  E =       c8 0e df a3 2d df 39 d5 ef 00 c0 b4 68 83 42 79
            a2 e4 6a 1b 80 49 f7 92 f7 6b fe 54 b9 03 a9 c9
            a9 4a c9 b4 7a d2 65 5c 5f 10 f9 ae f7 14 27 e2
            fc 6f 9b 3f 39 9a 22 14 89 f1 63 62 c7 03 23 36
            09 d4 5a c6 98 64 e3 32 1c f8 29 35 ac 40 96 c8
            6e 13 33 14 c5 40 19 e8 ca 79 80 df a4 b9 cf 1b
            38 4c 48 6f 3a 54 c5 10 78 15 8e e5 d7 9d e5 9f
            bd 34 d8 48 b3 d6 95 50 a6 76 46 34 44 27 ad e5
            4b 88 51 ff b5 98 f7 f8 00 74 b9 47 3c 82 e2 db

  M =       65 2c 3f a3 6b 0a 7c 5b 32 19 fa b3 a3 0b c1 c4
            e6 e5 45 82 47 65 15 f0 ad 9f 75 a2 b7 1c 73 ef

  T =       65 2c 3f a3 6b 0a 7c 5b 32 19 fa b3 a3 0b c1 c4
]]></artwork>
	</figure>
      </section>

      <section title="Test Cases for AES_192_CBC_HMAC_SHA_384"
	     anchor="CBC_HMAC_384_TestCases">
	<figure>
	  <artwork><![CDATA[
  K =       00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
            20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f

  MAC_KEY = 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17

  ENC_KEY = 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27
            28 29 2a 2b 2c 2d 2e 2f

  P =       41 20 63 69 70 68 65 72 20 73 79 73 74 65 6d 20
            6d 75 73 74 20 6e 6f 74 20 62 65 20 72 65 71 75
            69 72 65 64 20 74 6f 20 62 65 20 73 65 63 72 65
            74 2c 20 61 6e 64 20 69 74 20 6d 75 73 74 20 62
            65 20 61 62 6c 65 20 74 6f 20 66 61 6c 6c 20 69
            6e 74 6f 20 74 68 65 20 68 61 6e 64 73 20 6f 66
            20 74 68 65 20 65 6e 65 6d 79 20 77 69 74 68 6f
            75 74 20 69 6e 63 6f 6e 76 65 6e 69 65 6e 63 65

  IV =      1a f3 8c 2d c2 b9 6f fd d8 66 94 09 23 41 bc 04

  A =       54 68 65 20 73 65 63 6f 6e 64 20 70 72 69 6e 63
            69 70 6c 65 20 6f 66 20 41 75 67 75 73 74 65 20
            4b 65 72 63 6b 68 6f 66 66 73

  AL =      00 00 00 00 00 00 01 50

  E =       ea 65 da 6b 59 e6 1e db 41 9b e6 2d 19 71 2a e5
            d3 03 ee b5 00 52 d0 df d6 69 7f 77 22 4c 8e db
            00 0d 27 9b dc 14 c1 07 26 54 bd 30 94 42 30 c6
            57 be d4 ca 0c 9f 4a 84 66 f2 2b 22 6d 17 46 21
            4b f8 cf c2 40 0a dd 9f 51 26 e4 79 66 3f c9 0b
            3b ed 78 7a 2f 0f fc bf 39 04 be 2a 64 1d 5c 21
            05 bf e5 91 ba e2 3b 1d 74 49 e5 32 ee f6 0a 9a
            c8 bb 6c 6b 01 d3 5d 49 78 7b cd 57 ef 48 49 27
            f2 80 ad c9 1a c0 c4 e7 9c 7b 11 ef c6 00 54 e3

  M =       84 90 ac 0e 58 94 9b fe 51 87 5d 73 3f 93 ac 20
            75 16 80 39 cc c7 33 d7 45 94 f8 86 b3 fa af d4
            86 f2 5c 71 31 e3 28 1e 36 c7 a2 d1 30 af de 57

  T =       84 90 ac 0e 58 94 9b fe 51 87 5d 73 3f 93 ac 20
            75 16 80 39 cc c7 33 d7
]]></artwork>
	</figure>
      </section>


      <section title="Test Cases for AES_256_CBC_HMAC_SHA_512"
	     anchor="CBC_HMAC_512_TestCases">
	<figure>
	  <artwork><![CDATA[
  K =       00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
            20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
            30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f

  MAC_KEY = 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f

  ENC_KEY = 20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
            30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f

  P =       41 20 63 69 70 68 65 72 20 73 79 73 74 65 6d 20
            6d 75 73 74 20 6e 6f 74 20 62 65 20 72 65 71 75
            69 72 65 64 20 74 6f 20 62 65 20 73 65 63 72 65
            74 2c 20 61 6e 64 20 69 74 20 6d 75 73 74 20 62
            65 20 61 62 6c 65 20 74 6f 20 66 61 6c 6c 20 69
            6e 74 6f 20 74 68 65 20 68 61 6e 64 73 20 6f 66
            20 74 68 65 20 65 6e 65 6d 79 20 77 69 74 68 6f
            75 74 20 69 6e 63 6f 6e 76 65 6e 69 65 6e 63 65

  IV =      1a f3 8c 2d c2 b9 6f fd d8 66 94 09 23 41 bc 04

  A =       54 68 65 20 73 65 63 6f 6e 64 20 70 72 69 6e 63
            69 70 6c 65 20 6f 66 20 41 75 67 75 73 74 65 20
            4b 65 72 63 6b 68 6f 66 66 73

  AL =      00 00 00 00 00 00 01 50

  E =       4a ff aa ad b7 8c 31 c5 da 4b 1b 59 0d 10 ff bd
            3d d8 d5 d3 02 42 35 26 91 2d a0 37 ec bc c7 bd
            82 2c 30 1d d6 7c 37 3b cc b5 84 ad 3e 92 79 c2
            e6 d1 2a 13 74 b7 7f 07 75 53 df 82 94 10 44 6b
            36 eb d9 70 66 29 6a e6 42 7e a7 5c 2e 08 46 a1
            1a 09 cc f5 37 0d c8 0b fe cb ad 28 c7 3f 09 b3
            a3 b7 5e 66 2a 25 94 41 0a e4 96 b2 e2 e6 60 9e
            31 e6 e0 2c c8 37 f0 53 d2 1f 37 ff 4f 51 95 0b
            be 26 38 d0 9d d7 a4 93 09 30 80 6d 07 03 b1 f6

  M =       4d d3 b4 c0 88 a7 f4 5c 21 68 39 64 5b 20 12 bf
            2e 62 69 a8 c5 6a 81 6d bc 1b 26 77 61 95 5b c5
            fd 30 a5 65 c6 16 ff b2 f3 64 ba ec e6 8f c4 07
            53 bc fc 02 5d de 36 93 75 4a a1 f5 c3 37 3b 9c

  T =       4d d3 b4 c0 88 a7 f4 5c 21 68 39 64 5b 20 12 bf
            2e 62 69 a8 c5 6a 81 6d bc 1b 26 77 61 95 5b c5
]]></artwork>
	</figure>
      </section>

    </section>

    <section title='Example ECDH-ES Key Agreement Computation' anchor="ECDHESExample">
      <t>
	This example uses ECDH-ES Key Agreement and the Concat KDF to derive the
	CEK in the manner described in
	<xref target="ECDHES"/>.
	In this example, the ECDH-ES Direct Key Agreement mode
	(<spanx style="verb">alg</spanx> value <spanx style="verb">ECDH-ES</spanx>)
	is used to produce an agreed-upon key for AES GCM with a 128-bit key
	(<spanx style="verb">enc</spanx> value <spanx style="verb">A128GCM</spanx>).
      </t>
      <t>
	In this example, a producer Alice is encrypting content to a consumer Bob.
	The producer (Alice) generates an ephemeral key for the key agreement computation.
	Alice's ephemeral key (in JWK format) used for the key agreement computation
	in this example (including the private part) is:
      </t>
      <figure><artwork><![CDATA[
  {"kty":"EC",
   "crv":"P-256",
   "x":"gI0GAILBdu7T53akrFmMyGcsF3n5dO7MmwNBHKW5SV0",
   "y":"SLW_xSffzlPWrHEVI30DHM_4egVwt3NQqeUD7nMFpps",
   "d":"0_NxaRPUMQoAJt50Gz8YiTr8gRTwyEaCumd-MToTmIo"
  }
]]></artwork></figure>
      <t>
	The consumer's (Bob's) key (in JWK format) used for the key agreement computation
	in this example (including the private part) is:
      </t>
      <figure><artwork><![CDATA[
  {"kty":"EC",
   "crv":"P-256",
   "x":"weNJy2HscCSM6AEDTDg04biOvhFhyyWvOHQfeF_PxMQ",
   "y":"e8lnCO-AlStT-NJVX-crhB7QRYhiix03illJOVAOyck",
   "d":"VEmDZpDXXK8p8N0Cndsxs924q6nS1RXFASRl6BfUqdw"
  }
]]></artwork></figure>
      <t>
	Header Parameter values used in this example are as follows.
	The <spanx style="verb">apu</spanx> (agreement PartyUInfo) Header Parameter value
	is the base64url encoding of the UTF-8 string "Alice" and
	the <spanx style="verb">apv</spanx> (agreement PartyVInfo) Header Parameter value
	is the base64url encoding of the UTF-8 string "Bob".
	The <spanx style="verb">epk</spanx> (ephemeral public key) Header Parameter is used to communicate
	the producer's (Alice's) ephemeral public key value to the consumer (Bob).
      </t>
      <figure><artwork><![CDATA[
  {"alg":"ECDH-ES",
   "enc":"A128GCM",
   "apu":"QWxpY2U",
   "apv":"Qm9i",
   "epk":
    {"kty":"EC",
     "crv":"P-256",
     "x":"gI0GAILBdu7T53akrFmMyGcsF3n5dO7MmwNBHKW5SV0",
     "y":"SLW_xSffzlPWrHEVI30DHM_4egVwt3NQqeUD7nMFpps"
    }
  }
]]></artwork></figure>

      <t>
	The resulting Concat KDF <xref target="NIST.800-56A" /> parameter values are:
	<list style='hanging'>
	  <t hangText="Z">
	    <vspace/>
	    This is set to the ECDH-ES key agreement output.
	    (This value is often not directly exposed by libraries,
	    due to NIST security requirements, and only serves as an input to a KDF.)
	    In this example, Z is following the octet sequence (using JSON array notation):
	    <vspace blankLines="0" />
	    [158, 86, 217, 29, 129, 113, 53, 211, 114, 131, 66, 131, 191, 132, 38, 156, 251, 49, 110, 163, 218, 128, 106, 72, 246, 218, 167, 121, 140, 254, 144, 196].
	  </t>
	  <t hangText="keydatalen">
	    <vspace/>
	    This value is 128 - the number of bits in the desired output key
	    (because <spanx style="verb">A128GCM</spanx> uses a 128-bit key).
	  </t>
	  <t hangText="AlgorithmID">
	    <vspace/>
	    This is set to the octets representing the 32-bit big-endian value 7
	    - [0, 0, 0, 7] - the number of octets in the AlgorithmID content "A128GCM",
	    followed, by the octets representing the ASCII string "A128GCM"
	    - [65, 49, 50, 56, 71, 67, 77].
	  </t>
	  <t hangText="PartyUInfo">
	    <vspace/>
	    This is set to the octets representing the 32-bit big-endian value 5
	    - [0, 0, 0, 5] - the number of octets in the PartyUInfo content "Alice",
	    followed, by the octets representing the UTF-8 string "Alice"
	    - [65, 108, 105, 99, 101].
	  </t>
	  <t hangText="PartyVInfo">
	    <vspace/>
	    This is set to the octets representing the 32-bit big-endian value 3
	    - [0, 0, 0, 3] - the number of octets in the PartyUInfo content "Bob",
	    followed, by the octets representing the UTF-8 string "Bob"
	    - [66, 111, 98].
	  </t>
	  <t hangText="SuppPubInfo">
	    <vspace/>
	    This is set to the octets representing the 32-bit big-endian value 128
	    - [0, 0, 0, 128] - the keydatalen value.
	  </t>
	  <t hangText="SuppPrivInfo">
	    <vspace/>
	    This is set to the empty octet sequence.
	  </t>
	</list>
      </t>
      <t>
	Concatenating the parameters AlgorithmID through SuppPubInfo results in
	an OtherInfo value of: <vspace blankLines="0" />
	[0, 0, 0, 7, 65, 49, 50, 56, 71, 67, 77, 0, 0, 0, 5, 65, 108, 105, 99, 101, 0, 0, 0, 3, 66, 111, 98, 0, 0, 0, 128]
      </t>
      <t>
	Concatenating the round number 1 ([0, 0, 0, 1]), Z,
	and the OtherInfo value results in the Concat KDF round 1 hash input of:
	<vspace blankLines="0" />
	[0, 0, 0, 1, <vspace blankLines="0" />
	158, 86, 217, 29, 129, 113, 53, 211, 114, 131, 66, 131, 191, 132, 38, 156, 251, 49, 110, 163, 218, 128, 106, 72, 246, 218, 167, 121, 140, 254, 144, 196, <vspace blankLines="0" />
	0, 0, 0, 7, 65, 49, 50, 56, 71, 67, 77, 0, 0, 0, 5, 65, 108, 105, 99, 101, 0, 0, 0, 3, 66, 111, 98, 0, 0, 0, 128]
      </t>
      <t>
	The resulting derived key, which is the first 128 bits of the round 1 hash output is:
	<vspace blankLines="0" />
	[86, 170, 141, 234, 248, 35, 109, 32, 92, 34, 40, 205, 113, 167, 16, 26]
      </t>
      <figure>
	<preamble>The base64url-encoded representation of this derived key is:</preamble>
	<artwork><![CDATA[
  VqqN6vgjbSBcIijNcacQGg
]]></artwork></figure>
    </section>

    <section title="Acknowledgements" anchor="Acknowledgements" numbered="no">
      <t>
	Solutions for signing and encrypting JSON content were
	previously explored by <xref target="MagicSignatures">"Magic
	Signatures"</xref>, <xref target="JSS">"JSON Simple Sign 1.0"</xref>,
	<xref target="CanvasApp">"Canvas Applications"</xref>, <xref
	target="JSE">"JSON Simple Encryption"</xref>, and <xref
	target="JSMS">"JavaScript Message Security
	Format"</xref>, all of which influenced this document.
      </t>
      <t>
	The "Authenticated Encryption with AES-CBC and HMAC-SHA" <xref target="AEAD-CBC-SHA"/>
	specification, upon which the AES_CBC_HMAC_SHA2 algorithms are based,
	was written by David A.&nbsp;McGrew and Kenny Paterson.
	The test cases for AES_CBC_HMAC_SHA2 are based upon those
	for <xref target="AEAD-CBC-SHA"/> by John Foley.
      </t>
      <t>
	Matt Miller wrote
	<xref target="JWE-JWK">"Using JavaScript Object Notation (JSON)
	Web Encryption (JWE) for Protecting JSON Web Key (JWK) Objects"</xref>,
	upon which the password-based encryption content of this document is based.
      </t>
      <t>
        This specification is the work of the JOSE working group,
	which includes dozens of active and dedicated participants.
	In particular, the following individuals contributed ideas,
        feedback, and wording that influenced this specification:
      </t>
      <t>
	Dirk Balfanz,
	Richard Barnes,
	Carsten Bormann,
	John Bradley,
	Brian Campbell,
	Alissa Cooper,
	Breno de Medeiros,
	Vladimir Dzhuvinov,
	Roni Even,
	Stephen Farrell,
	Yaron Y.&nbsp;Goland,
	Dick Hardt,
	Joe Hildebrand,
	Jeff Hodges,
	Edmund Jay,
	Charlie Kaufman,
	Barry Leiba,
	James Manger,
	Matt Miller,
	Kathleen Moriarty,
	Tony Nadalin,
	Axel Nennker,
	John Panzer,
	Emmanuel Raviart,
	Eric Rescorla,
	Pete Resnick,
	Nat Sakimura,
	Jim Schaad,
	Hannes Tschofenig,
	and Sean Turner.
      </t>
      <t>
	Jim Schaad and Karen O'Donoghue chaired the JOSE working group and
	Sean Turner, Stephen Farrell, and Kathleen Moriarty served as Security Area Directors
	during the creation of this specification.
      </t>
    </section>

   

  </back>
</rfc>
