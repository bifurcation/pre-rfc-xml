<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM "reference.RFC.2119.xml">
<!ENTITY rfc4251 SYSTEM "reference.RFC.4251.xml">
<!ENTITY rfc4252 SYSTEM "reference.RFC.4252.xml">
<!ENTITY rfc4253 SYSTEM "reference.RFC.4253.xml">
<!ENTITY rfc4254 SYSTEM "reference.RFC.4254.xml">
<!ENTITY rfc5246 SYSTEM "reference.RFC.5246.xml">
<!ENTITY rfc6125 SYSTEM "reference.RFC.6125.xml">
<!ENTITY rfc6187 SYSTEM "reference.RFC.6187.xml">
<!ENTITY rfc6241 SYSTEM "reference.RFC.6241.xml">
<!ENTITY rfc6242 SYSTEM "reference.RFC.6242.xml">
<!ENTITY rfc6335 SYSTEM "reference.RFC.6335.xml">
<!ENTITY rfc6520 SYSTEM "reference.RFC.6520.xml">
<!ENTITY rfc7589 SYSTEM "reference.RFC.7589.xml">
<!ENTITY rfc7616 SYSTEM "reference.RFC.7616.xml">
<!ENTITY rfc7617 SYSTEM "reference.RFC.7617.xml">
<!ENTITY rfc7950 SYSTEM "reference.RFC.7950.xml">
<!ENTITY rfc8040 SYSTEM "reference.RFC.8040.xml">
]>


<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-index="no" ?>

<rfc number="8071" category="std"
     ipr="trust200902"
     submissionType="IETF"
     consensus="yes">
    <front>
        <title abbrev="NETCONF Call Home and RESTCONF Call Home">NETCONF Call Home and RESTCONF Call Home</title>
        <author initials="K.W." surname="Watsen" fullname="Kent Watsen">
            <organization>Juniper Networks</organization>
            <address>
                <email>kwatsen@juniper.net</email>
            </address>
        </author>
        <date month="February" year="2017"/>
        <area>Operations</area>
        <workgroup>NETCONF Working Group</workgroup>
        <keyword>call-home</keyword>
        <abstract>
            <t>This RFC presents NETCONF Call Home and RESTCONF Call Home,
            which enable a NETCONF or RESTCONF server to initiate a secure 
            connection to a NETCONF or RESTCONF client, respectively.</t>
        </abstract>

      </front>

    <middle>

        <section title="Introduction" anchor="introduction">

          <t>This RFC presents NETCONF Call Home and RESTCONF Call Home,
          which enable a NETCONF or RESTCONF server to initiate a secure 
          connection to a NETCONF or RESTCONF client, respectively.</t>

	  <t>NETCONF Call Home supports both of the secure transports used 
          by the Network Configuration Protocol (NETCONF) <xref target="RFC6241"/>, Secure Shell (SSH),
	  and Transport Layer Security (TLS).
          The NETCONF protocol's binding to SSH is defined in <xref target="RFC6242"/>.
          The NETCONF protocol's binding to TLS is defined in 
          <xref target="RFC7589"/>.</t>

          <t>RESTCONF Call Home only supports TLS, the same as the RESTCONF protocol
          <xref target="RFC8040"/>.  The RESTCONF protocol's
          binding to TLS is defined in <xref target="RFC8040"/>.</t>

          <t>The SSH protocol is defined in <xref target="RFC4253"/>.  The TLS
          protocol is defined in <xref target="RFC5246"/>.  Both the SSH and TLS
          protocols are layered on top of the TCP protocol, which is defined in
          <xref target="RFC0793"/>.</t>

          <t>Both NETCONF Call Home and RESTCONF Call Home preserve all but one 
          of the client/server roles in their respective protocol stacks, as 
          compared to client-initiated NETCONF and RESTCONF connections.  The one and only
          role reversal that occurs is at the TCP layer; that is, which peer is
          the TCP client and which is the TCP server.</t>

          <t>For example, a network element is traditionally the TCP server.
          However, when calling home, the network element initially assumes
	  the role of the TCP client.
          The network element's secure transport-layer roles (SSH server, 
          TLS server) and its application-layer roles (NETCONF server, 
          RESTCONF server) all remain the same.</t>

          <t>Having consistency in both the secure transport-layer (SSH, TLS) and 
          application-layer (NETCONF, RESTCONF) roles conveniently enables
	  deployed network management infrastructure to support call home also.  For instance, 
	  existing certificate chains and user authentication mechanisms are
	  unaffected by call home.</t>

          <section title="Motivation" anchor="motivation">
            <t>Call home is generally useful for both the initial deployment
            and ongoing management of networking elements.  Here are some
            scenarios enabled by call home:
              <list style="symbols">
                <t>The network element may proactively "call home" after
                being powered on for the first time in order to register
                itself with its management system.</t>
                <t>The network element may access the network in a way that
                dynamically assigns it an IP address, but does not register
                its assigned IP address to a mapping service (e.g., dynamic DNS).</t>
                <t>The network element may be deployed behind a firewall
                that implements Network Address Translation (NAT)
                for all internal network IP addresses.</t>
                <t>The network element may be deployed behind a firewall
                that does not allow any management access to the internal 
                network.</t>
                <t>The network element may be configured in "stealth mode",
                and thus does not have any open ports for the management
                system to connect to.</t>
                <t>The operator may prefer to have network elements initiate
                management connections, believing it is easier to secure one
                open port in the data center than to have an open port on
                each network element in the network.</t>
              </list>
            </t>
          </section>

          <section title="Requirements Terminology">
            <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
            "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
            and "OPTIONAL" in this document are to be interpreted as
            described in RFC 2119 <xref target="RFC2119"/>.</t>
          </section>

          <section title="Applicability Statement">
            <t>The techniques described in this document are
            suitable for network management scenarios such
            as the ones described in <xref target="motivation"/>. However,
            these techniques are only defined for NETCONF Call Home
            and RESTCONF Call Home, as described in this document.</t>

            <t>The reason for this restriction is that different
            protocols have different security assumptions.  The NETCONF 
            and RESTCONF protocols require clients and servers to 
            verify the identity of the other party.  This requirement
            is specified for the NETCONF protocol in Section 2.2 of
            <xref target="RFC6241"/>, and is specified for the RESTCONF
            protocol in Sections 2.4 and 2.5 of 
            <xref target="RFC8040"/>.</t>

            <t>This contrasts with the base SSH and TLS protocols, which
            do not require programmatic verification of the other party
            (Section 9.3.4 of <xref target="RFC4251"/>, Section 4 of 
            <xref target="RFC4252"/>, and Section 7.3 of <xref target="RFC5246"/>).
            In such circumstances, allowing the SSH/TLS server to contact the
            SSH/TLS client would open new vulnerabilities. Any use of call home
            with SSH/TLS for purposes other than NETCONF or RESTCONF will need 
            a thorough contextual risk assessment.  A risk assessment for this
            RFC is in the Security Considerations section (<xref target="sec-con"/>).</t>
          </section>

          <section title="Relation to RFC 4253">
            <t>This document uses the SSH Transport Layer Protocol
            <xref target="RFC4253"/> with the exception that the statement "The client
            initiates the connection" made in Section 4 of RFC 4253  does not apply.
	    Assuming the reference to the client means "SSH client" and
	    the reference to the connection means "TCP connection", this statement
	    doesn't hold true in call home, where the network element is the
	    SSH server and yet still initiates the TCP connection.  Security
            implications related to this change are discussed in <xref target="sec-con"/>.</t>
          </section>

          <section title="The NETCONF/RESTCONF Convention">
            <t>Throughout the remainder of this document, the term "NETCONF/RESTCONF"
            is used as an abbreviation in place of the text "the NETCONF or the RESTCONF".  
            The NETCONF/RESTCONF abbreviation is not intended to require or to imply that
            a client or server must implement both the NETCONF standard and the RESTCONF
            standard.</t>
          </section>
        </section>

        <section title="Solution Overview">
            <t>The diagram below illustrates call home
            from a protocol-layering perspective:</t>
            <figure title="Call Home Sequence Diagram" anchor="Fig1">
              <artwork><![CDATA[
       NETCONF/RESTCONF                    NETCONF/RESTCONF
            Server                              Client
              |                                    |
              |         1. TCP                     |
              |----------------------------------->|
              |                                    |
              |                                    |
              |         2. SSH/TLS                 |
              |<-----------------------------------|
              |                                    |
              |                                    |
              |         3. NETCONF/RESTCONF        |
              |<-----------------------------------|
              |                                    |
             Note: Arrows point from the "client" to 
               the "server" at each protocol layer. 
]]></artwork>
            </figure>
            <t>This diagram makes the following points:
              <list style="numbers">
                <t>The NETCONF/RESTCONF server begins by initiating a TCP connection to the NETCONF/RESTCONF client.</t>
                <t>Using this TCP connection, the NETCONF/RESTCONF client initiates an SSH/TLS session to the NETCONF/RESTCONF server.</t>
                <t>Using this SSH/TLS session, the NETCONF/RESTCONF client initiates a NETCONF/RESTCONF session to the NETCONF/RESTCONF server.</t>
              </list>
            </t>

        </section>

        <section title="The NETCONF or RESTCONF Client">
          <t>The term "client" is defined in <xref target="RFC6241"/>, Section
	  1.1.  In the context of network management, the NETCONF/RESTCONF client might be a network management system.</t>
          <section title="Client Protocol Operation">
          <t>
            <list style="format C%d">
              <t>The NETCONF/RESTCONF client listens for TCP connection requests
	      from NETCONF/RESTCONF servers.  The client MUST support accepting
              TCP connections on the IANA-assigned ports defined in <xref
              target="iana-con"/>, but MAY be configured to listen to a different port.</t>
              <t>The NETCONF/RESTCONF client accepts an incoming TCP connection request and a TCP connection is established.</t>
              <t>Using this TCP connection, the NETCONF/RESTCONF client 
              starts either the SSH client <xref target="RFC4253"/> or the TLS
	      client <xref target="RFC5246"/> protocol.  For example, assuming the use of the 
	      IANA-assigned ports, the SSH client protocol is started when the connection
	      is accepted on port 4334 and the TLS client protocol is started when the
	      connection is accepted on either port 4335 or port 4336.</t>
              <t>When using TLS, the NETCONF/RESTCONF client MUST advertise
              "peer_allowed_to_send", as defined by <xref target="RFC6520"/>.  This is
              required so that NETCONF/RESTCONF servers can depend on it being there for
              call home connections, when keep-alives are needed the most.</t>
	      <t>As part of establishing an SSH or TLS connection, the NETCONF/RESTCONF
	      client MUST validate the server's presented host key or certificate.
              This validation MAY be accomplished by certificate path validation or by
              comparing the host key or certificate to a previously trusted or 
              "pinned" value.  If a certificate is presented and it contains
              revocation-checking information, the NETCONF/RESTCONF client
              SHOULD check the revocation status of the certificate.  If it is
              determined that a certificate has been revoked, the client MUST
              immediately close the connection.</t>
              <t>If certificate path validation is used, the NETCONF/RESTCONF client MUST
              ensure that the presented certificate has a valid chain of trust to a
              preconfigured issuer certificate, and that the presented certificate encodes an 
              "identifier" <xref target="RFC6125"/> that the client was aware
              of before the connection attempt.
              How identifiers are encoded in certificates MAY be
              determined by a policy associated with the certificate's issuer.
              For instance, a given issuer may be known to only sign IDevID
              certificates <xref target="Std-802.1AR-2009"/> having a unique identifier
              (e.g., a serial number) in the X.509 certificate's "CommonName" field.</t>
              <t>After the server's host key or certificate is validated, the SSH or TLS
              protocol proceeds as normal to establish an SSH or TLS connection.
              When performing client authentication with the NETCONF/RESTCONF
              server, the NETCONF/RESTCONF client MUST only use
              credentials that it had previously associated for the NETCONF/RESTCONF
              server's presented host key or server certificate.</t>
              <t>Once the SSH or TLS connection is established, the NETCONF/RESTCONF client
              starts either the NETCONF client <xref target="RFC6241"/>
              or RESTCONF client <xref target="RFC8040"/> protocol. 
              Assuming the use of the IANA-assigned ports, the NETCONF client protocol is
	      started when the connection is accepted on either port 4334 or
	      port 4335 and
	      the RESTCONF client protocol is started when the connection is accepted 
	      on port 4336.</t>
            </list>
          </t>
          </section>
          <section title="Client Configuration Data Model">
              <t>How a NETCONF or RESTCONF client is configured is outside the 
	      scope of this document.  For instance, such a configuration might
	      be used to enable listening for call home connections, configuring
	      trusted certificate issuers, or configuring identifiers for
              expected connections. That said, YANG <xref target="RFC7950"/> data modules for configuring NETCONF
and RESTCONF clients, including call home, are provided in <xref
target="NETCONF-MODELS"/> and <xref target="RESTCONF-MODELS"/>.

</t>
          </section>
        </section>

        <section title="The NETCONF or RESTCONF Server">
          <t>The term "server" is defined in <xref target="RFC6241"/>, Section 1.1.  In the context of network management, the NETCONF/RESTCONF server might be a network element or a device.</t>
          <section title="Server Protocol Operation">
          <t>
            <list style="format S%d">
              <t>The NETCONF/RESTCONF server initiates a TCP connection request to
              the NETCONF/RESTCONF client.  The source port may be per local
	      policy or randomly assigned by the operating system. The server
	      MUST support connecting 
              to one of the IANA-assigned ports defined in <xref target="iana-con"/>,
              but MAY be configured to connect to a different port.  Using the IANA-assigned
	      ports, the server connects to port 4334 for NETCONF over SSH,
	      port 4335 for NETCONF over TLS, and port 4336 for RESTCONF over TLS.</t>
              <t>The TCP connection request is accepted and a TCP connection is
              established.</t>
              <t>Using this TCP connection, the NETCONF/RESTCONF server 
              starts either the SSH server <xref target="RFC4253"/> or the TLS
	      server <xref target="RFC5246"/> protocol, depending on how it is configured.  For
              example, assuming the use of the IANA-assigned ports, the SSH server protocol
	      is used after connecting to the remote port 4334 and the TLS server protocol
	      is used after connecting to either remote port 4335 or remote port 4336.</t>
              <t>As part of establishing the SSH or TLS connection, the NETCONF/RESTCONF
              server will send its host key or certificate to the client.  If a certificate
              is sent, the server MUST also send all intermediate certificates leading up
              to a well-known and trusted issuer.  How to send a
              list of certificates is defined for SSH in <xref target="RFC6187"/>, Section
              2.1, and for TLS in <xref target="RFC5246"/>, Section 7.4.2.</t>
              <t>Establishing an SSH or TLS session requires server authentication
              of client credentials in all cases except with RESTCONF, where some 
              client authentication schemes occur after the secure transport connection
              (TLS) has been established.  If transport-level (SSH or TLS)
	      client authentication is required, and
              the client is unable to successfully authenticate itself to the server
              in an amount of time defined by local policy, the server MUST close the
              connection.</t>
              <t>Once the SSH or TLS connection is established, the NETCONF/RESTCONF server
              starts either the NETCONF server <xref target="RFC6241"/>
              or RESTCONF server <xref target="RFC8040"/> protocol, 
              depending on how it is configured.  Assuming the use of the IANA-assigned 
              ports, the NETCONF server protocol is used after connecting to
	      remote port
	      4334 or port 4335, and the RESTCONF server protocol is used after 
	      connecting to remote port 4336.</t>
              <t>If a persistent connection is desired, the NETCONF/RESTCONF server,
              as the connection initiator, SHOULD actively test the aliveness of 
              the connection using a keep-alive mechanism.  For TLS-based connections,
              the NETCONF/RESTCONF server
              SHOULD send HeartbeatRequest messages, as defined by <xref target="RFC6520"/>.
              For SSH-based connections, per Section 4 of <xref
	      target="RFC4254"/>, the server SHOULD send an SSH_MSG_GLOBAL_REQUEST message
              with a purposely nonexistent "request name" value (e.g., keepalive@ietf.org)
              and the "want reply" value set to '1'.</t>
            </list>
          </t>
          </section>
          <section title="Server Configuration Data Model">
              <t>How a NETCONF or RESTCONF server is configured is outside the 
	      scope of this document. This includes configuration that might
	      be used to specify hostnames, IP addresses, ports, algorithms, 
	      or other relevant parameters.  That said, YANG <xref target="RFC7950"/>
              data modules for configuring NETCONF and RESTCONF servers, including call home,
              are provided in <xref target="NETCONF-MODELS" /> and <xref target="RESTCONF-MODELS"/>.</t>
          </section>
        </section>

        <section anchor="sec-con" title="Security Considerations">

            <t>The security considerations described in <xref target="RFC6242"/>
            and <xref target="RFC7589"/>, and by extension <xref target="RFC4253"/>, 
            <xref target="RFC5246"/>, and <xref target="RFC8040"/>
            apply here as well.</t>

            <t>This RFC deviates from standard SSH and TLS usage by having the 
	    SSH/TLS server initiate the underlying TCP connection.  This reversal
            is incongruous with <xref target="RFC4253"/>, which says "the client
	    initiates the connection" and also <xref target="RFC6125"/>, which says
	    "the client MUST construct a list of acceptable reference identifiers,
	    and MUST do so independently of the identifiers presented by the service."</t>

            <t>Risks associated with these variances are centered around server
            authentication and the inability for clients to compare an independently
            constructed reference identifier to one presented by the server.
	    To mitigate against these risks, this RFC requires that the 
	    NETCONF/RESTCONF client validate the server's SSH host key or 
            certificate, by certificate path validation to a preconfigured issuer
            certificate, or by comparing the host key or certificate to a 
            previously trusted or "pinned" value.  Furthermore, when a certificate
            is used, this RFC requires that the client be able to match an 
            identifier encoded in the presented certificate with an identifier
            the client was preconfigured to expect (e.g., a serial number).</t>

            <t>For cases when the NETCONF/RESTCONF server presents an X.509
            certificate, NETCONF/RESTCONF clients should ensure that the 
            preconfigured issuer certificate used for certificate path validation is 
            unique to the manufacturer of the server.  That is, the certificate
            should not belong to a third-party certificate authority that
            might issue certificates for more than one manufacturer.
            This is especially important when a client authentication mechanism
            passing a shared secret (e.g., a password) to the server is used.
            Not doing so could otherwise lead to a case where the client sends
            the shared secret to another server that happens to have the same
            identity (e.g., a serial number) as the server the client was
            configured to expect.</t>

            <t>Considerations not associated with server authentication follow next.</t>

            <t>Internet-facing hosts running NETCONF Call Home or RESTCONF Call Home
            will be fingerprinted via scanning tools such as "zmap" 
            <xref target="zmap"/>.  Both SSH and TLS provide many ways
            in which a host can be fingerprinted.  SSH and TLS servers
            are fairly mature and able to withstand attacks, but SSH and TLS
            clients may not be as robust.  Implementers and deployments 
            need to ensure that software update mechanisms are provided
            so that vulnerabilities can be fixed in a timely fashion.</t>

            <t>An attacker could launch a denial-of-service (DoS) attack
	    on the NETCONF/RESTCONF client by having it perform 
            computationally expensive operations, before deducing that
            the attacker doesn't possess a valid key.  For instance, in
            TLS 1.3 <xref target="TLS1.3"/>, the ClientHello
            message contains a Key Share value based on an expensive
            asymmetric key operation.  Common precautions mitigating DoS
            attacks are recommended, such as temporarily blacklisting
            the source address after a set number of unsuccessful login
            attempts.</t>

            <t>When using call home with the RESTCONF protocol, special
            care is required when using some HTTP authentication schemes,
            especially the Basic <xref target="RFC7617"/> and Digest
            <xref target="RFC7616"/> schemes, which convey a shared secret
            (e.g., a password).  Implementers and deployments should 
            be sure to review the Security Considerations section in the RFC
	    for any HTTP client authentication scheme used.</t>

        </section>

        <section title="IANA Considerations" anchor="iana-con">
          <t>IANA has assigned three TCP port numbers
          in the "User Ports" range with the service names
          "netconf-ch-ssh", "netconf-ch-tls", and "restconf-ch-tls".  These
          ports will be the default ports for NETCONF Call Home and RESTCONF
          Call Home protocols.  Below is the registration template following
          the rules in <xref target="RFC6335"/>.</t>

          <t>
            <figure align="center">
                <artwork><![CDATA[
Service Name:           netconf-ch-ssh
Port Number:            4334
Transport Protocol(s):  TCP
Description:            NETCONF Call Home (SSH)
Assignee:               IESG <iesg@ietf.org>
Contact:                IETF Chair <chair@ietf.org>
Reference:              RFC 8071


Service Name:           netconf-ch-tls
Port Number:            4335
Transport Protocol(s):  TCP
Description:            NETCONF Call Home (TLS)
Assignee:               IESG <iesg@ietf.org>
Contact:                IETF Chair <chair@ietf.org>
Reference:              RFC 8071


Service Name:           restconf-ch-tls
Port Number:            4336
Transport Protocol(s):  TCP
Description:            RESTCONF Call Home (TLS)
Assignee:               IESG <iesg@ietf.org>
Contact:                IETF Chair <chair@ietf.org>
Reference:              RFC 8071
]]></artwork>
            </figure>
          </t>
        </section>


    </middle>
    <back>

        <references title="Normative References">
<?rfc include="reference.RFC.0793" ?>

          &rfc2119;
          &rfc4251;
          &rfc4252;
          &rfc4253;
          &rfc4254;
          &rfc5246;
          &rfc6125;
          &rfc6187;
          &rfc6241;
          &rfc6242;
          &rfc6335;
          &rfc6520;
          &rfc7589;
          &rfc8040;

<!-- draft-ietf-netconf-restconf; Expired-->

      
        </references>
        <references title="Informative References">

          &rfc7616;
          &rfc7617;
          &rfc7950;

          <reference anchor="Std-802.1AR-2009" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
              <front>
                  <title>IEEE Standard for Local and metropolitan area networks - Secure Device Identity</title>
                  <author fullname="WG802.1 - Higher Layer LAN Protocols Working Group">
                      <organization>IEEE</organization>
                  </author>
                  <date month="December" year="2009"/>
              </front>
<seriesInfo name="IEEE" value="Std 802.1AR-2009" />
<seriesInfo name="DOI" value="10.1109/IEEESTD.2009.5367679" />
          </reference>


<!-- draft-ietf-tls-tls13 IESG state: I-D Exists -->

<reference anchor='TLS1.3'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.3</title>

<author initials='E' surname='Rescorla' fullname='Eric Rescorla'>
    <organization />
</author>

<date month='October' year='2016' />

</front>

<seriesInfo name='Work in Progress,' value='draft-ietf-tls-tls13-18' />

</reference>
 
<reference anchor='RESTCONF-MODELS'>
<front>
<title>RESTCONF Client and Server Models</title>

<author initials='K' surname='Watsen' fullname='Kent Watsen'>
    <organization />
</author>

<author initials='J' surname='Schoenwaelder' fullname='Juergen Schoenwaelder'>
    <organization />
</author>

<date month='November' day='3' year='2016' />

</front>

<seriesInfo name='Work in Progress' value='draft-ietf-netconf-restconf-client-server-01' />

</reference>

<reference anchor='NETCONF-MODELS'>

<front>
<title>NETCONF Client and Server Models</title>

<author initials='K' surname='Watsen' fullname='Kent Watsen'>
    <organization />
</author>

<author initials='G' surname='Wu' fullname='Gary Wu'>
    <organization />
</author>

<author initials='J' surname='Schoenwaelder' fullname='Juergen Schoenwaelder'>
    <organization />
</author>

<date month='November' day='3' year='2016' />

</front>

<seriesInfo name='Work in Progress,' value='draft-ietf-netconf-netconf-client-server-01' />

</reference>

          <reference anchor="zmap" target="https://zmap.io/paper.html">
              <front>
                  <title>ZMap: Fast Internet-Wide Scanning and its Security Applications</title>
                  <author initials="Z.D." surname="Durumeric" fullname="Zakir Durumeric"/>
                  <author initials="E.W." surname="Wustrow" fullname="Eric Wustrow"/>
                  <author initials="J.H." surname="Halderman" fullname="J. Alex Halderman"/>
                  <date month="August" year="2013" />
              </front>
<seriesInfo name="22nd" value="Usenix Security Symposium" />

          </reference>
      </references>

        <section title="Acknowledgements" numbered="no">
            <t>The author would like to thank the following (ordered by last name) for
            lively discussions on the mailing list and in the halls: Jari Arkko, Andy Bierman, Martin Bjorklund,
            Ben Campbell, Spencer Dawkins, Mehmet Ersue, Stephen Farrell, 
            Wes Hardaker, Stephen Hanna, David Harrington, Jeffrey Hutzelman,
            Simon Josefsson, Radek Krejci, Suresh Krishnan, Barry Leiba,
            Alan Luchuk, Kathleen Moriarty, Mouse, Russ Mundy, Tom Petch, 
            Peter Saint-Andre, Joseph Salowey, Juergen Schoenwaelder,
            Martin Stiemerling, Joe Touch, Hannes Tschofenig, Sean Turner,
            and Bert Wijnen.</t>
        </section>

    </back>

</rfc>

