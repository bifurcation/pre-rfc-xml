<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>

<rfc number="6346" category="exp" ipr="trust200902" consensus="yes" submissionType="IETF">
  <front>
    <title abbrev="A+P Addressing Extension">The Address plus Port (A+P) Approach to the IPv4 Address Shortage</title> 

    <author role="editor" fullname="Randy Bush" initials="R.B." surname="Bush">
      <organization>Internet Initiative Japan</organization>
      <address>
        <postal>
          <street>5147 Crystal Springs</street>
          <city>Bainbridge Island</city>
          <region>Washington</region>
          <code>98110</code>
          <country>US</country>
          </postal>
        <phone>+1 206 780 0431 x1</phone>
        <email>randy@psg.com</email>
        </address>
      </author>

    <date month="August" year="2011" />

<keyword>IPv6 Transition</keyword>
<keyword>IP Address Sharing</keyword>

    <abstract>

      <t>We are facing the exhaustion of the IANA IPv4 free IP address
      pool. Unfortunately, IPv6 is not yet deployed widely enough to fully
      replace IPv4, and it is unrealistic to expect that this is going to
      change before the depletion of IPv4 addresses. Letting hosts seamlessly
      communicate in an IPv4 world without assigning a unique globally
      routable IPv4 address to each of them is a challenging problem. </t>

      <t>This document proposes an IPv4 address sharing scheme, treating
      some of the port number bits as part of an extended IPv4 address
      (Address plus Port, or A+P). Instead of assigning a single IPv4
      address to a single customer device, we propose to extend the address field by
      using bits from the port number range in the TCP/UDP header as 
      additional endpoint identifiers, thus leaving a reduced range of ports
      available to applications. This means assigning the
      same IPv4 address to multiple clients (e.g., Customer Premises
      Equipment (CPE), mobile phones),
      each with its assigned port range. In the face of IPv4 address
      exhaustion, the need for addresses is stronger than the need to be
      able to address thousands of applications on a single host. If address
      translation is needed, the end-user should be in control of the
      translation process -- not some smart boxes in the core. </t>

 </abstract>


   </front>

  <middle>

<section title="Introduction">
  <t>This document describes a technique to deal with the imminent IPv4
  address space exhaustion. Many large Internet Service Providers (ISPs) face
  the problem that their networks' customer edges are so large that it will
  soon not be possible to provide each customer with a unique public IPv4
  address. Therefore, although undesirable, address sharing, in the same molds 
  as NAT, is inevitable.</t>

  <t>To allow end-to-end connectivity between IPv4-speaking applications, we
  propose to extend the semantics of the IPv4 address with bits from the
  UDP/TCP header. Assuming we could limit the applications' port addressing to
any number of bits lower than 16, we can increase the effective size of an IPv4 
address by remaining additional bits of up to 16. In this scenario, 1 to 65536 
customers could be multiplexed on the same IPv4 address, while allowing them a 
fixed or dynamic range of 1 to 65536 ports. Customers could, for example, receive 
an initial fixed port range, defined by the operator, and dynamically request additional 
blocks, depending on their contract. We call
  this "extended addressing" or "A+P" (Address plus Port) addressing. The main
  advantage of A+P is that it preserves the Internet "end-to-end" paradigm by
  not requiring translation (at least for some ports) of an IP address.</t>

  <section title="Problems with Carrier Grade NATs">
    <t>Various forms of NATs will be installed at different levels and places in
    the IPv4 Internet to achieve address compression. This document argues for
    mechanisms where this happens as close to the edge of the network as
    possible, thereby minimizing damage to the End-to-End Principle and
    allowing end-customers to retain control over the address and port
    translation. Therefore, it is essential to create mechanisms to "bypass"
    NATs in the core, when applicable, and keep the control at the end-user.</t>

    <t>With Carrier Grade NATs (CGNs) in the core of the network, the user is trapped
    behind unchangeable application policies, and the deployment of new
    applications is hindered by the need to implement the corresponding
    Application Level Gateways (ALGs) on the CGNs. This is the opposite of the
    "end-to-end" model of the Internet.</t>

    <t>With the smarts at the edges, one can easily deploy new applications
    between consenting endpoints by merely tweaking the NATs at the
    corresponding CPE, or even upgrading them to
    a new version that supports a specific ALG.</t>

    <t>Today's NATs are typically mitigated by offering the customers
    limited control over them, e.g., port forwarding, Universal Plug and
    Play or the NAT Port Mapping Protocol (UPnP/NAT-PMP).

    However, this is
    not expected to work with CGNs. CGN proposals -- other than <xref
    target="RFC6333">DS&nbhy;Lite</xref> with A+P or
    <xref target="PCP-BASE">the Port Control Protocol (PCP)</xref> -- admit
    that it is not expected that applications that require specific port
    assignment or port mapping from the NAT box will keep working. </t>

    <t>Another issue with CGNs is the trade-off between session state and
    network placement. The farther from the edge the CGN is placed, the more
    session state needs to be kept due to larger subscriber aggregation and
    the more disruption that occurs in the case of a failure. In order to reduce the state,
    CGNs would end up somewhere closer to the edge. Thus, the CGN trades
    scalability for the amount of state that needs to be kept, which makes
    optimally placing a CGN a hard engineering problem.</t>
    
    <t>In some deployment scenarios, a CGN can be seen as the single point of 
    failure, and therefore the availability of delivered services can be impacted 
    by a single CGN device. 
Means to ensure state synchronization and 
    failover would be required to allow for service continuity whenever a failure 
    occurs.</t>
    
    <t>Intra-domain paths may not be optimal for communications between two nodes 
    connected to the same domain deploying CGNs; they may lead to path stretches.</t>

  </section>

    <section title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
       NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
       "OPTIONAL" in this document are to be interpreted as described
       in <xref target="RFC2119">RFC 2119</xref>. 
       </t>
     </section>
</section>

<section title="Terminology">

<t>This document makes use of the following terms:</t>
  <t><list style="empty">
      <t>Public Realm: This realm contains only public routable IPv4
      addresses. Packets in this realm are forwarded based on the destination
      IPv4 address.</t>

      <t>A+P Realm: This realm contains both public routable IPv4 and A+P
      addresses. </t>

      <t>A+P Packet: A regular IPv4 packet is forwarded based on the
      destination IPv4 address and the TCP/UDP port numbers. </t>

      <t>Private Realm: This realm contains IPv4 addresses that are not
      globally routed. They may be taken from the <xref
      target="RFC1918"></xref> range. However, this document does not make such
      an assumption. We regard as private address space any IPv4 address
      that needs to be translated in order to gain global connectivity,
      irrespective of whether or not it falls in <xref target="RFC1918"></xref> space.
      </t>

      <t>Port-Range Router (PRR): A device that forwards A+P packets.</t>

      <t>Customer Premises Equipment (CPE): cable or DSL modem.</t>

      <t>Provider Edge (PE) Router: Customer aggregation router.</t>

      <t>Provider Border Router (BR): Provider's edge to other providers.</t>

      <t>Network Core Routers (Core): Provider routers that are not at the
      edges. </t>
    </list></t>
</section>

<section title="Design Constraints and Functions">

  <t>The problem of address space shortage is first felt by providers with a
  very large end-user customer base, such as broadband providers and
  mobile service providers. Though the cases and requirements are slightly
  different, they share many commonalities. In the following text, we develop a
  set of overall design constraints for solutions addressing the IPv4 address shortage
  problem.</t>

  <section title="Design Constraints">
    <t>We regard several constraints as important for our design: 
 <list style="format %d)">
        <t anchor="const:control">End-to-end is under customer control:
        Customers shall have the ability to deploy new application protocols
        at will. IPv4 address shortage should not be a license to break the
        Internet's end-to-end paradigm.</t>

        <t anchor="const:legacy">Backward compatibility: Approaches should be
        transparent to unaware users. Devices or existing applications should
        be able to work without modification. Emergence of new applications
        should not be limited.</t>

        <t anchor="const:state">Highly scalable and minimal state core:
        Minimal state should be kept inside the ISP's network. If the operator
        is rolling out A+P incrementally, it is understood there may be state
        in the core in the non-A+P part of such a roll-out.</t>

        <t anchor="const:complex">Efficiency versus complexity: Operators should
        have the flexibility to trade off port multiplexing efficiency and
        scalability and end-to-end transparency.</t>

        <t anchor="const:doubleNAT">"Double-NAT" should be avoided: Multiple
        gateway devices might be present in a path, and once one has done some
        translation, those packets should not be retranslated.</t>

        <t anchor="const:traceable">Legal traceability: ISPs must be able to
        provide the identity of a customer from the knowledge of the IPv4
        public address and the port. This should have as low an impact as is
        reasonable on storage by the ISP. We assume that NATs on customer
        premises do not pose much of a problem, while provider NATs need to
        keep additional logs.</t>

        <t anchor="const:v6">IPv6 deployment should be encouraged. NAT444
        strongly biases the users to the deployment of RFC 1918
        addressing.</t>
      </list></t>

    <t>Constraint <xref format="counter" target="const:doubleNAT"></xref> is
    important: while many techniques have been deployed to allow applications
    to work through a NAT, traversing cascaded NATs is crucial if NATs are
    being deployed in the core of a provider network.</t>
  </section>

  <section title="A+P Functions">
    <t>The A+P architecture can be split into three distinct functions:
    encaps/decaps, NAT, and signaling.</t>

    <t>Encaps/decaps function: is used to forward port-restricted A+P packets
    over intermediate legacy devices. The encapsulation function takes an IPv4
    packet, looks up the IP and TCP/UDP headers, and puts the packet into the
    appropriate tunnel. The state needed to perform this action is comparable
    to a forwarding table. The decapsulation device SHOULD check if the source
    address and port of packets coming out of the tunnel are legitimate (e.g.,
    see <xref target="BCP38"></xref>). Based on the result of such a check,
    the packet MAY be forwarded untranslated, MAY be discarded, or MAY be
    NATed. In this document, we refer to a device that provides this encaps/decaps
    functionality as a Port-Range Router (PRR).</t>

    <t>Network Address Translation (NAT) function: is used to connect
    legacy end-hosts. Unless upgraded, end-hosts or end-systems are not
    aware of A+P restrictions and therefore assume a full IP
    address. The NAT function performs any address or port translation,
    including Application Level Gateways (ALGs) whenever required. The
    state that has to be kept to implement this function is the mapping
    for which external addresses and ports have been mapped to which
    internal addresses and ports, just as in CPEs embedding NAT today. A
    subtle, but very important, difference should be noted here: the
    customer has control over the NATing process or might choose to
    "bypass" the NAT. If this is done, we call the NAT a Large-Scale NAT
    (LSN). However, if the NAT does NOT allow the customer to control
    the translation process, we call it a CGN.</t>

    <t>Signaling function: is used to allow A+P-aware devices to get to
    know which ports are assigned to be passed through untranslated and what
    will happen to packets outside the assigned port range (e.g., could be
    NATed or discarded). Signaling may also be used to learn the encapsulation
    method and any endpoint information needed. In addition, the signaling
    function may be used to dynamically assign the requested port range.</t>
  </section>

  <section title="Overview of the A+P Solution">
    <t>As mentioned above, the core architectural elements of the A+P solution are three separated
    and independent functions: the NAT function, the encaps/decaps function,
    and the signaling function. The NAT function is similar to a NAT as we
    know it today: it performs a translation between two different address
    realms. When the external realm is public IPv4 address space, we assume
    that the translation is many-to-one, in order to multiplex many customers
    on a single public IPv4 address. The only difference with a traditional
    NAT (<xref target="fig:NAT"></xref>) is that the translator might only be
    able to use a restricted range of ports when mapping multiple internal
    addresses onto an external one, e.g., the external address realm might be
    port-restricted.</t>

    <figure align="center" anchor="fig:NAT" title="Traditional NAT">
      <preamble></preamble>

      <artwork><![CDATA[
 "internal-side"          "external-side"
                 +-----+
    internal     |  N  |     external
    address  <---|  A  |---> address 
     realm       |  T  |      realm 
                 +-----+
                 ]]></artwork>
    </figure>

    <t>The encaps/decaps function, on the other hand, is the ability to
    establish a tunnel with another endpoint providing the same function.
    This implies some form of signaling to establish a tunnel. Such signaling
    can be viewed as integrated with DHCP or as a separate service. <xref
    target="sec:sig"></xref> discusses the constraints of this signaling
    function. The tunnel can be an IPv6 or IPv4 encapsulation, a layer-2
    tunnel, or some other form of softwire. Note that the presence of a tunnel
    allows unmodified, naive, or even legacy devices between the two
    endpoints.</t>

    <t>Two or more devices that provide the encaps/decaps function are
    linked by tunnels to form an A+P subsystem. The function of each gateway
    is to encapsulate and decapsulate, respectively. <xref
    target="fig:basic-a+p"></xref> depicts the simplest possible A+P
    subsystem, that is, two devices providing the encaps/decaps function.</t>

    <figure align="center" anchor="fig:basic-a+p" title="A Simple A+P Subsystem">
      <preamble></preamble>

      <artwork><![CDATA[
                +------------------------------------+                                   
     Private    | +----------+  tunnel  +----------+ |   Public
     address  --|-| gateway  |==========| gateway  |-|-- address
     realm      | +----------+          +----------+ |    realm
                +------------------------------------+
                             A+P subsystem            
                 
                 ]]></artwork>
    </figure>

    <t>Within an A+P subsystem, the public address realm is extended by using
    bits from the port number when forwarding packets. Each device is assigned
    one address from the external realm and a range of port numbers. Hence,
    devices that are part of an A+P subsystem can communicate with the public
    realm without the need for address translation (i.e., preserving
    end-to-end packet integrity): an A+P packet originated from within the A+P
    subsystem can be simply forwarded over tunnels up to the endpoint, where
    it gets decapsulated and routed in the external realm.</t>

    <section anchor="sec:sig" title="Signaling">
      <t>The following information needs to be available on all the gateways
      in the A+P subsystem. It is expected that there will be a signaling
      protocols such as <xref target="PR-ADDR-ASSIGN"></xref>, <xref
      target="SHARED-ADDR-OPT"></xref>, <xref
      target="PORT-RANGE-OPT"></xref>, or <xref
      target="PCP-BASE"></xref>.</t>

      <t>The information that needs to be shared is the following: <list
          style="symbols">
          <t>a set of public IPv4 addresses,</t>

          <t>for each IPv4 address, a starting point for the allocated
          port range,</t>

          <t>the number of delegated ports,</t>

          <t>the optional key that enables partial or full preservation of entropy
          in port randomization -- see <xref
          target="PR-ADDR-ASSIGN"></xref>,</t>

          <t>the lifetime for each IPv4 address and set of allocated ports,</t>

          <t>the tunneling technology to be used (e.g.,
          "IPv6-encapsulation"),</t>

          <t>addresses of the tunnel endpoints (e.g., IPv6 address of tunnel
          endpoints),</t>

          <t>whether or not NAT function is provided by the gateway,</t>

          <t>a device identification number and some authentication
          mechanisms, and</t>

          <t>a version number and some reserved bits for future use.</t>
        </list> Note that the functions of encapsulation and decapsulation
      have been separated from the NAT function. However, to accommodate
      legacy hosts, NATing is likely to be provided at some point in the path;
      therefore, the availability or absence of NATing MUST be communicated in
      signaling, as A+P is agnostic about NAT placement.</t>

      <t>The port ranges can be allocated in two different ways: <list
          style="symbols">
          <t>If applications or end-hosts behind the CPE are not
          UPnPv2/NAT-PMP-aware, then the CPE SHOULD request ports via
          mechanisms, e.g., as described in <xref
          target="PR-ADDR-ASSIGN"></xref> and <xref
          target="PORT-RANGE-OPT"></xref>. Note that
          different port ranges can have different lifetimes, and the CPE is
          not entitled to use them after they expire -- unless it refreshes
          those ranges. It is up to the ISP to put mechanisms in place
          (to prevent denial-of-service attacks) that 
          determine what percentage of already allocated port ranges should be
          exhausted before a CPE may request additional ranges, how often the
          CPE can request additional ranges, and so on.</t>

          <t>If applications behind the CPE are UPnPv2/NAT-PMP-aware,
          additional ports MAY be requested through that mechanism. In this
          case, the CPE should forward those requests to the LSN, and the LSN
          should reply reporting if the requested ports are available or not
          (and if they are not available, some alternatives should be offered).
          Here again, to prevent potential denial-of-service attacks,
          mechanisms should be in place to prevent UPnPv2/NAT-PMP packet storms
          and fast port allocation. A detailed description of this mechanism,
          called PCP, is in <xref target="PCP-BASE"></xref>.</t>
        </list></t>

      <t>Whatever signaling mechanism is used inside the tunnels
      -- DHCP, IP Control Protocol (IPCP),
      or PCP based, synchronization between the signaling server and PRR must be
      established in both directions. For example, if we use DHCP as
      the signaling
      mechanism, the PRR must communicate to the DHCP server at least its IP
      range. The DHCP server then starts to allocate IP addresses and port ranges to
      CPEs and communicates back to the PRR which IP and port range have been
      allocated to which CPE, so the PRR knows to which tunnel to redirect
      incoming traffic. 

In addition, DHCP MUST also communicate lifetimes of
      port ranges assigned to CPE via the PRR. DHCP server may be co-located 
      with the PRR function to ease address management and also to avoid the 
      need to introduce a communication protocol between the PRR and DHCP. </t>

      <t>If UPnPv2/NAT-PMP is used as the dynamic port allocation mechanism, the
      PRR must also communicate to the DHCP (or IPCP) server to avoid those
      ports. The PRR must somehow (e.g., using DHCP or IPCP options) communicate back to
      CPE that the allocation of ports was successful, so CPE adds those ports to
      existing port ranges.</t>


      <t>Note that operation can be even simplified if a fixed length of port 
      ranges is assigned to all customers and no differentiation is implemented 
      based on port-range length. In such case, the binding table maintained by 
      the PRR can be dynamically built upon the receipt of a first packet from a 
      port-restricted device.</t>


    </section>

    <section title="Address Realm">
      <t>Each gateway within the A+P subsystem manages a certain portion of
      A+P address space; that is, a portion of IPv4 space that is extended by
      borrowing bits from the port number. This address space may be a single,
      port-restricted IPv4 address. The gateway MAY use its managed A+P
      address space for several purposes: <list style="symbols">
          <t>Allocation of a sub-portion of the A+P address space to other
          authenticated A+P gateways in the A+P subsystem (referred to as
          delegation). We call the allocated sub-portion delegated address
          space.</t>

          <t>Exchange of (untranslated) packets with the external address
          realm. For this to work, such packets MUST use a source address and
          port belonging to the non-delegated address space.</t>
        </list> If the gateway is also capable of performing the NAT function,
      it MAY translate packets arriving on an internal interface that are
      outside of its managed A+P address space into non-delegated address
      space.</t>

      <t>Hence, a provider may have 'islands' of A+P as they slowly deploy
      over time. The provider does not have to replace CPE until they want to
      provide the A+P function to an island of users or even to one particular
      user in a sea of non-A+P users.</t>

      <t>An A+P gateway ("A"), accepts incoming connections from other A+P
      gateways ("B"). Upon connection establishment (provided appropriate
      authentication), B would "ask" A for delegation of an A+P address. In
      turn, A will inform B about its public IPv4 address and will delegate a
      portion of its port range to B. &nbsp;In addition, A will also negotiate the
      encaps/decaps function with B (e.g., let B know the address of the
      decaps device at the endpoint of the tunnel).</t>

      <t>This could be implemented, for example, via a NAT-PMP- or DHCP-like
      solution. In general, the following rule applies: a sub-portion of the
      managed A+P address space is delegated as long as devices below ask for
      it; otherwise, private IPv4 is provided to support legacy hosts.</t>
      
      <t>
  The following examples use an IPv4 address from the blocks reserved
  for documentation as defined in <xref target="RFC5737"/>.
</t>

      <t><figure align="center" anchor="fig:a+p-example" title="Configuration Example">
          <preamble></preamble>

          <artwork><![CDATA[
 private    +-----+          +-----+     public
 address ---|  B  |==========|  A  |---  Internet
  realm     +-----+          +-----+     
  
            Address space realm of A:
            public IPv4 address = 192.0.2.1
            port range = 0-65535
            
            Address space realm of B:
            public IPv4 address = 192.0.2.1
            port range = 2560-3071
                 ]]></artwork>
        </figure> </t>
        
       <t>
       <xref target="fig:a+p-example"></xref> illustrates a sample
      configuration. Note that A might actually consist of three different
      devices: one that handles signaling requests from B; one that
      performs encapsulation and decapsulation; and, if provided, one device
      that performs the NATing function (e.g., an LSN). Packet forwarding is assumed
      to be as follows: in the "outbound" case, a packet arrives from the
      private address realm to B. &nbsp;As stated above, B has two options: it can
      either apply or not apply the NAT function. The decision depends upon
      the specific configuration and/or the capabilities of A and B. &nbsp;Note that
      NAT functionality is required to support legacy hosts; however, this can
      be done at either of the two devices A or B. &nbsp;The term "NAT" refers to
      translating the packet into the managed A+P address (B has address
      192.0.2.1 and ports 2560-3071 in the example above). We then have two
      options: <list style="format %d)">
          <t>B NATs the packet. The translated packet is then tunneled
          to A. &nbsp;A
          recognizes that the packet has already been translated because the
          source address and port match the delegated space. A decapsulates
          the packet and releases it in the public Internet.</t>

          <t>B does not NAT the packet. The untranslated packet is then
          tunneled to A. &nbsp;A recognizes that the packet has not been translated,
          so A forwards the packet to a co-located NATing device, which
          translates the packet and routes it in the public Internet. This
          device, e.g., an LSN, has to store the mapping between the source
          port used to NAT and the tunnel where the packet came from, in order
          to correctly route the reply. Note that A cannot use a port number
          from the range that has been delegated to B. &nbsp;As a consequence, A has
          to assign a part of its non-delegated address space to the NATing
          function.</t>
        </list> "Inbound" packets are handled in the following way: a packet
      from the public realm arrives at A. &nbsp;A analyzes the destination port
      number to understand whether or not the packet needs to be NATed. <list
          style="format %d)">
          <t>If the destination port number belongs to the range that A
          delegated to B, then A tunnels the packet to B. &nbsp;B NATs the packet
          using its stored mapping and forwards the translated packet to the
          private domain.</t>

          <t>If the destination port number is from the address space of the
          LSN, then A passes the packet on to the co-located LSN, which uses
          its stored mapping to NAT the packet into the private address realm
          of B. &nbsp;The appropriate tunnel is stored as well in the mapping of the
          initial NAT. The LSN then encapsulates the packet to B, which
          decapsulates it and normally routes it within its private realm.</t>

          <t>Finally, if the destination port number falls in neither a
          delegated range nor the address range of the LSN, A discards
          the packet. If the packet is passed to the LSN, but no mapping can
          be found, the LSN discards the packet.</t>
        </list></t>

      <t>Observe that A must be able to receive all IPv4 packets destined to
      the public IPv4 address (192.0.2.1 in the example), so that it can make
      routing decisions according to the port number. On the other hand, B
      receives IPv4 packets destined to the public IPv4 address only via the
      established tunnel with A. &nbsp;In other words, B uses the public IPv4
      address just for translation purposes, but it is not used to make
      routing decisions. This allows us to keep the routing logic at B as
      simple as described above, while enabling seamless communication between
      A+P devices sharing the same public IPv4 address. <figure align="center"
          anchor="fig:cpe-to-cpe" title="Hierarchical A+P">
          <preamble></preamble>

          <artwork><![CDATA[
 private    +-----+          +-----+     public
 address ---|  B  |==========|  A  |---  Internet
 realm 1    +-----+          +-----+     
                               |
 private    +-----+            |
 address ---|  C  |============/
 realm 2    +-----+
 
            Address space realm of A:
            public IPv4 address = 192.0.2.1
            port range = 0-65535
            
            Address space realm of B:
            public IPv4 address = 192.0.2.1
            port range = 2560-3071
            
            Address space realm of C:
            public IPv4 address = 192.0.2.1
            port range = 0-2559
                 ]]></artwork>
        </figure> 

Consider the example shown in <xref
      target="fig:cpe-to-cpe"></xref>. Here, both B and C use the encaps/decaps
      function to establish a tunnel with A, and they are assigned the same
      public IPv4 address with different, non-overlapping port ranges. Assume
      that a host in B's private realm sends a packet destined to address
      192.0.2.1 and port 2000, and that B has been instructed to NAT all
      packets destined to 192.0.2.1. Under these assumptions, B receives the
      packet and NATs it using its own public IPv4 address (192.0.2.1) and a
      port selected from its configured port range (e.g., 3000). B then
      tunnels the translated packet to A. &nbsp;When A receives the packet via the
      tunnel, it looks at the destination address and port, recognizes C's
      delegated range, and then tunnels the packet to C. &nbsp;Observe that, apart
      from stripping the tunnel header, A handles the packet as if it came
      from the public Internet. When C receives the packet, it NATs the
      destination address into one address chosen from its private address
      realm, while keeping the source address (192.0.2.1) and port (3000)
      untranslated. Return traffic is handled the same way. Such a mechanism
      allows hosts behind A+P devices to communicate seamlessly even when they
      share the same public IPv4 address.</t>
      <t>Please refer to <xref target="sec:smap"></xref> for a discussion of an
      alternative A+P mechanism that does not incur path-stretch penalties
      for intra-domain communication.</t>
    </section>

    <section anchor="sec:stackable"
             title="Reasons for Allowing Multiple A+P Gateways">
      <t>Since each device in an A+P subsystem provides the encaps/decaps
      function, new devices can establish tunnels and become in turn part of
      an A+P subsystem. As noted above, being part of an A+P subsystem implies
      the capability of talking to the external address realm without any
      translation. In particular, as described in the previous section, a
      device X in an A+P subsystem can be reached from the external domain by
      simply using the public IPv4 address and a port that has been delegated
      to X. &nbsp;<xref target="fig:stackedA+P"></xref> shows an example where three
      devices are connected in a chain. In other words, A+P signaling can be
      used to extend end-to-end connectivity to the devices that are in an
      A+P subsystem. This allows A+P-aware applications (or OSes) running on
      end-hosts to enter an A+P subsystem and exploit untranslated
      connectivity.</t>

      <t>There are two modes for end-hosts to gain fine-grained control of
      end-to-end connectivity. The first is where actual end-hosts perform the
      NAT function and the encaps/decaps function that is required to join
      the A+P subsystem. This option works in a similar way to the
      NAT-in-the-host trick employed by virtualization software such as
      VMware, where the guest operating system is connected via a NAT to the
      host operating system. The second mode is when applications 
      autonomously ask for an A+P address and use it to join the A+P
      subsystem. This capability is necessary for some applications that
      require end-to-end connectivity (e.g., applications that need to be
      contacted from outside).</t>

      <figure align="center" anchor="fig:stackedA+P" title="An A+P
      Subsystem with Multiple Devices">
        <preamble></preamble>

        <artwork><![CDATA[
          +---------+      +---------+      +---------+
internal  | gateway |      | gateway |      | gateway |  external
realm   --|    1    |======|    2    |======|    3    |-- realm
          +---------+      +---------+      +---------+
                 ]]></artwork>
      </figure>

      <t>Whatever the reasons might be, the Internet was built on a paradigm
      that end-to-end connectivity is important.  A+P makes this still possible
      in a time where address shortage forces ISPs to use NATs at various
      levels. In that sense, A+P can be regarded as a way to bypass NATs.</t>

      <figure align="center" anchor="fig:stackable" title="A Complex A+P Subsystem">
        <preamble></preamble>

        <artwork><![CDATA[
  +---+          (customer2)
  |A+P|-.         +---+
  +---+  \     NAT|A+P|-.
          \       +---+ |  
           \            |       forward if in range
  +---+     \+---+    +---+    / 
  |A+P|------|A+P|----|A+P|----  
  +---+     /+---+    +---+    \
           /                    NAT if necessary
          / (cust1)   (prov.    (e.g., provider NAT)
  +---+  /            router)
  |A+P|-'
  +---+
                 ]]></artwork>
      </figure>

      <t><xref target="fig:stackable"></xref> depicts a complex scenario,
      where the A+P subsystem is composed of multiple devices organized in a
      hierarchy. Each A+P gateway decapsulates the packet and then
      re-encapsulates it again to the next tunnel.</t>

      <t>A packet can be NATed either when it enters the A+P subsystem, at
      intermediate devices, or when it exits the A+P subsystem. This could be,
      for example, a gateway installed within the provider's network, together
      with an LSN. Then, each customer operates its own CPE. However, behind the
      CPE, applications might also be A+P-aware and run their own A+P-gateways;
     this enables them to have end-to-end connectivity.</t>

      <t>One limitation applies when "delayed translation" is used (e.g.,
      translation at the LSN instead of the CPE). If devices using "delayed
      translation" want to talk to each other, they SHOULD use A+P addresses or
      out-of-band addressing.</t>
    </section>

<section anchor="sec:architecture" title="Overall A+P Architecture">
  <figure align="center" anchor="architecture"
          title="A+P Overall Architecture">
    <preamble></preamble>

    <artwork align="left"><![CDATA[
                        A+P architecture

      IPv4         Full-A+P          AFTR             CGN 
       |              |               |                |
<-- Full IPv4 ---- Port range ---- Port range  ---- Provider --->
    allocated      & dynamic         & LSN          NAT ONLY
                   allocation      (NAT on CPE      (No mechanism)           
    (no NAT)      (NAT on CPE)     and on LSN)      for customer to
                                                    bypass CGN)
            ]]></artwork>
  </figure>

  <t>The A+P architecture defines various deployment options within an ISP.
  <xref target="architecture"></xref> shows the spectrum of deployment
  options. On the far left is the common deployment method for broadband
  subscribers today, an IPv4 address unrestricted with full port range.
  Full-A+P refers to a port-range allocation from the ISP. The customer must
  operate an A+P-aware CPE device, and no NATing functionality is provided by
  the ISP.  The Address Family Transition Router (AFTR), such as DS&nbhy;Lite <xref
  target="RFC6333"></xref>, is a hybrid. There is
  NAT present in the core (in this document, referred to as LSN), but the user has
  the option to "bypass" that NAT in one form or an other, for example, via
  A+P, NAT&nbhy;PMP, etc. &nbsp;Finally, a service provider that only deploys CGN
  will place a NAT in the provider's core and does not allow the customer to 
  "bypass" the translation process or modify ALGs on the NAT. The customer is 
  provider-locked. Notice that all options (besides full IPv4) require some form 
  of tunneling mechanism (e.g., 4in6) and a signaling mechanism (see <xref
  target="sec:sig"></xref>).</t>
</section>

  </section>

<section anchor="sec:experiments" title="A+P Experiments">
 
  <t>There are implementations of A+P as well as documented
  experiments. France Telecom did experiments that are described
  in <xref target="A+P-EXPERIMENTS"></xref>.  As seen
  in that experiment, most tested applications are unaffected.  There
  are problems with torrent protocol and applications, as the listening port
  is out of A+P port range and some UPnP may be required to make it work
  with A+P.
  </t>
  <t>Problems with BitTorrent have already been experienced in the wild
  by users trapped behind a non-UPnP-capable CPE. The current workaround
  for the end-user is to statically map ports, which can be done in the
  A+P scenario as well.
  </t>
  <t>BitTorrent tests and experiments in shared IP and port-range
  environments are well described
  in <xref target="BITTORRENT-ADDR-SHARING"></xref>.
  Conclusions in that document tell us that two limitations were
  experienced.  The first occurred when two clients sharing the same IP
  address tried to simultaneously retrieve the SAME file located in a
  SINGLE remote peer.  The second limitation occurred when a client tried
  to download a file located on several seeders, when those seeders
  shared the same IP address.  Mutual file sharing between hosts having
  the same IP address has been checked.  Indeed, machines having the
  same IP address can share files with no alteration compared to current
  IP architectures.
  </t><t> Working implementations of A+P can be found in: 

    <list style="symbols">
      <t>
	Internet Systems Consortium AFTR (http://www.isc.org/software/aftr), 
      </t>
      <t>
	FT Orange opensource A+P (http://opensourceaplusp.weebly.com/)
	developed by Xiaoyu Zhao, Xiaohong Deng, Tao Zheng, and 
      </t>
      <t>
	4rd (IPv4 Residual Deployment) from ipinfusion.com, which is
	stateless A+P. 
      </t>
    </list>
  </t>
</section>

</section>

<section title="Stateless A+P Mapping Function" anchor="sec:smap">
<section title="Stateless A+P Mapping (SMAP) Gateway Function Description">

<t>SMAP stands for Stateless A+P Mapping. 
   This function is responsible for, in a stateless scheme,
   encapsulating IPv4 packets in IPv6 ones as well as decapsulating
   IPv4 packets from IPv6 ones.

An SMAP function
      may be hosted in a PRR, end-user device, etc.</t>

<t>As mentioned in Section 4.1 of <xref target="RFC6052"/>, the suffix 
	part may enclose the port.</t>

<t>   The Stateless A+P Mapping (SMAP) gateway consists in two basic functions
   as described in <xref target="fig:a+p-smap1"/>.

<list style="numbers">
   <t>SMAP encapsulates an IPv4 packet, destined to a shared IPv4
       address, in an IPv6 one.  The IPv6 source address is constructed
       using an IPv4-embedded IPv6 address <xref target="RFC6052"/>
       from the IPv4 source address and port number
       plus the IPv6 prefix that has been provisioned to the node
       performing the SMAP function.  The destination IPv6 address is
       constructed using the shared IPv4 destination address and port
       number plus the IPv6 prefix that has been provisioned to the
       SMAP function and that is dedicated to IPv4 destination
       addresses.</t>

   <t>SMAP extracts IPv4 incoming packets from IPv6 incoming ones that
       have IPv6 source addresses belonging to the prefix of the node
       performing the SMAP function.  Extracted IPv4 packets are then
       forwarded to the point identified by the IPv4 destination address
       and port number.</t>
</list>
</t>

<figure anchor="fig:a+p-smap1" align="center" title="Stateless A+P Mapping Gateway Function">
                <preamble></preamble>
                <artwork><![CDATA[
            +-------------------+
            |                   |----IPv6---\
----IPv4---\|                   |----IPv4---\\
-----------/|                   |-----------//
            |                   |-----------/
            |       SMAP        |
            |                   | /--IPv6-----
/---IPv4----|                   |//---IPv4----
\-----------|                   |\\-----------
            |                   | \-----------
            +-------------------+
]]>
                </artwork>
	  </figure>

   <t>An SMAP-enabled node will perform the stateless 6/4 mapping function
   for all public shared IPv4 addresses for which it was designated as a
   stateless 6/4 mapping gateway.</t>

   <t>To perform the stateless 6/4 mapping function, an SMAP gateway must:

<list style="symbols">
   <t>be provided with an IPv6 prefix (i.e., Pref6).  The SMAP gateway
      uses this prefix to construct IPv6 source addresses for all IPv4
      shared addresses for which it was designated as an SMAP gateway.
      The IPv6 prefix may be provisioned statically or dynamically
      (e.g., DHCP).</t>

   <t>be able to know the IPv6 prefix of the node serving as another
      SMAP gateway for IPv4 destination addresses.  This prefix may be
      known in various ways:

<list style="symbols">
      <t>Default or Well-Known Prefix (i.e., 64:ff9b::/96) that was 
      provisioned statically or dynamically;</t>

      <t>Retained at the reception of incoming IPv4-in-IPv6 encapsulated
         packets;</t>

      <t>Discovered at the start of communication, thanks to mechanisms
         such as DNS resolution, for example.</t>
</list>
</t>
</list>
</t>

   <t>When the SMAP-enabled node receives IPv4 packets with IPv4 source
   addresses for which it was not designated as an smap gateway, it will
   not perform stateless 6/4 mapping function for those packets.  Those
   packets will be handled in a classical way (i.e., forwarded, dropped,
   or locally processed).</t>

   <t>When the SMAP-enabled node receives IPv6 packets with IPv6 addresses
   that do not match with its IPv6 prefix, it will not perform the
   stateless 6/4 mapping function for those packets.  Those packets will
   be handled in a classical way (i.e., forwarded, dropped, or locally
   processed).</t>
</section>
<section title="Implementation Mode">

   <t>In this configuration, the node A performs the stateless mapping
   function on the received IPv4 traffic (encapsulated in IPv6 packets)
   before forwarding to the node B. &nbsp;The node B performs the stateless
   mapping function on the received IPv6 traffic (extracting IPv4
   packets) before forwarding the IPv4 traffic to the destination
   identified by the IPv4 destination address and port number.  In the
   opposite direction, and as previously, the node B performs the
   stateless mapping function on the received IPv4 traffic
   (encapsulating in IPv6 packets) before forwarding to the node A. &nbsp;The
   node A performs the stateless mapping function on the received IPv6
   traffic (extracting IPv4 packets) before forwarding the IPv4 traffic
   to the point identified by the IPv4 destination address and port
   number.  In this case, only IPv6 traffic is managed in the network
   segment between the nodes A and B.</t>

<figure anchor="fig:a+p-smap2" align="center">
                <preamble></preamble>
                <artwork><![CDATA[
            +------+             +------+
            |      |----IPv6---\ |      |
----IPv4---\|      |----IPv4---\\|      |----IPv4---\
-----------/|      |-----------//|      |-----------/
            |      |-----------/ |      |
            | SMAP |             | SMAP |
            |      | /----IPv6---|      |
/---IPv4----|      |//---IPv4----|      |/---IPv4----
\-----------|      |\\-----------|      |\-----------
            |      | \-----------|      |
            +------+             +------+
             node A               node B
]]>
                </artwork>
	  </figure>

   <t>
   Several deployment scenarios of the SMAP function may be envisaged in
   the context of port-range-based solutions:

<list style="symbols">
   <t>An SMAP function is embedded in a port-restricted device.  Other
      SMAP-enabled nodes are deployed in the boundaries between IPv6-enabled realms and IPv4 ones.  This scenario may be deployed
      particularly for intra-domain communications so as to interconnect
      heterogeneous realms (i.e., IPv6/IPv4) within the same
      Autonomous System (AS).</t>

   <t>An SMAP function is embedded in a port-restricted device.  Other
      SMAP-enabled nodes are deployed in the interconnection segment
      (with adjacent IPv4-only ones) of a given AS.  This deployment
      scenario is more suitable for service providers targeting the
      deployment of IPv6 since it eases the migration to full IPv6.
      Core nodes are not required to continue to activate both IPv4 and IPv6
      transfer capabilities.</t>
</list>
</t>

   <t>Other considerations regarding the interconnection of SMAP-enabled
   domains should be elaborated.  The following provides a non-exhaustive list of interconnection schemes.

<list style="symbols">
   <t>The interconnection of two domains implementing the SMAP function
      may be deployed via IPv4 Internet (<xref target="fig:a+p-smap3"/>): this means that IPv4
      packets encapsulated in IPv6 packets are transferred using IPv6 until
      reaching the first SMAP-enabled node.

  Then, these packets are decapsulated and are forwarded using IPv4
  transfer capabilities.  A remote SMAP-enabled node will receive
  those packets and proceed to an IPv4-in-IPv6 encapsulation.  These
  packets are then routed normally until reaching the port-restricted
  devices that decapsulate the packets.

<figure anchor="fig:a+p-smap3" align="center" title="Interconnection Scenario 1">
                <preamble></preamble>
                <artwork><![CDATA[
+------+          +------+   +--------+   +------+           +------+
|      |--IPv6--\ |      |   |        |   |      |---IPv6--\ |      |
|      |--IPv4--\\|      |---|-IPv4---|--\|      |---IPv4--\\|      |
|      |--------//|      |---|--------|--/|      |---------//|      |
|      |--------/ |      |   |Internet|   |      |---------/ |      |
| SMAP |          | SMAP |   |  IPv4  |   | SMAP |           | SMAP |
|      | /--IPv6--|      |   |        |   |      | /---IPv6--|      |
|      |//--IPv4--|      |/--|-IPv4---|---|      |//--IPv4---|      |
|      |\\--------|      |\--|--------|---|      |\\---------|      |
|      | \--------|      |   |        |   |      | \---------|      |
+------+          +------+   +--------+   +------+           +------+
 Source           node A                  node B          Destination
]]>
                </artwork>
	  </figure>
</t>
                     
   <t>A second scheme is to use IPv6 to interconnect two realms that implement the
      SMAP function (<xref target="fig:a+p-smap4"></xref>).  

      An IPv6 prefix (i.e., Pref6) assigned by IANA is used for this
      service.  If appropriate routing configurations have been
      enforced, then the IPv6-encapsulated packets will be routed
      until the final destination. In order to implement this model,
      IPv4-inferred IPv6 prefixes are required to be injected in the IPv6
      inter-domain routing tables.</t>
</list>
</t>

<figure anchor="fig:a+p-smap4" align="center" title="Interconnection Scenario
2">
                <preamble></preamble>
                <artwork><![CDATA[
   +------+             +------------+              +------+
   |      |             |            |              |      |
   |      |----IPv6-----|----IPv6----|----IPv6----\ |      |
   |      |----IPv4-----|------------|----IPv4----\\|      |
   |      |-------------|------------|------------//|      |
   |      |-------------|------------|------------/ |      |
   | SMAP |             | Internet v6|              | SMAP |
   |      | /-----IPv6--|------------|-----IPv6-----|      |
   |      |//---IPv4----|------------|-------IPv4---|      |
   |      |\\-----------|------------|--------------|      |
   |      | \-----------|------------|--------------|      |
   |      |             |            |              |      |
   +------+             +------------+              +------+
    Source                                            Destination
]]>
                </artwork>
	  </figure>
</section>
<section title="Towards IPv6-Only Networks">
<t>
The deployment of the SMAP function allows for smooth migration of networks 
to an IPv6-only scheme while maintaining the delivery of IPv4 connectivity 
services to customers. The delivery of IPv4 connectivity services over an 
IPv6-only network does not require any stateful function to be deployed on 
the core network. Owing to this A+P mode, both the IPv4 service continuity 
and the migration to an IPv6-only deployment model are facilitated.
</t>
</section>

<section title="PRR: On Stateless and Binding Table Modes">

<t>
The SMAP section (<xref target="sec:smap"/>) discusses two modes: the binding and the stateless
modes. Dynamic port allocation is not a feature of the stateless mode,
but it is supported in the binding mode. In the binding mode,
distinct external IPv4 addresses may be used, but this is not
recommended.
</t>

<t>o &nbsp;Stateless Mode

<list>
  <t>Complete stateless mapping implies that the IPv4 address and the
    significant bits coding the port range are reflected inside the IPv6
    prefix assigned to the port-restricted device. This can be achieved either 
    by embedding the full IPv4 address and the significant bits in the IPv6 
    prefix or by applying an algorithmic approach. Two alternatives are
    offered when such a stateless mapping is to be enabled:
  
  <?rfc text-list-symbols="-"?>
  <list style="symbols">
    <t>use the IPv6 prefix already used for native IPv6
      traffic, or </t>
    
    <t>provide two prefixes to the port-restricted device: one for
      the native IPv6 traffic and one for the IPv4 traffic.</t>
  </list>
  </t>  

  <t>Note that:
  
  <list style="symbols">
    <t>Providing two IPv6 prefixes has the advantages of allowing a /64
      prefix for the port-restricted device along with another prefix
      (e.g., a /56 or /64) for native IPv6 traffic.  This alternative
      allows the service provider to relate the native IPv6 traffic
      addressing plan to the IPv4 addressing plan. 

 The drawback is having to allocate two prefixes to each port-restricted device and
      to route them.  In addition, an address selection issue may be
      encountered.</t>
    
    <t>Providing one prefix for both needs (e.g., a /56 or a /64)
      allows the service provider to handle two types of IPv6 prefix for
      the port-restricted device and in routing tables.  But the
      drawback is that it strongly links the IPv4 addressing
      plan to the allocated IPv6 prefixes.</t>
  </list>     
  </t>  

  <t>As mentioned in Section 4.1 of <xref target="RFC6052"/>, the 
    suffix part may enclose the port.</t>
</list>
</t>

<t>o &nbsp;Binding Table Mode

<list>
  <t>Another alternative is to assign a "normal" IPv6 prefix to the port-restricted device and to use a binding table, which can be hosted by
    a service node to correlate the (shared IPv4 address, port range)
    with an IPv6 address part of the assigned IPv6 prefix.  For
    scalability reasons, this table should be instantiated within
    PRR-enabled nodes that are close to the port-restricted devices.  The
    number of required entries if hosted at the interconnection segment would
    be equal to the amount of subscribed users (one per port-restricted
    device).
  </t>
</list>  
</t>
</section>

<section title="General Recommendations on SMAP">
<t>If a Stateless A+P Mapping (SMAP) type of implementation is deployed over intermediate 
IPv6-only-capable devices, it is recommended that default routes are configured,
and the IPv4 routing table is not "leaked" into the IPv6 routing table in terms of having 
reachability for the packets going towards the Internet.</t>
<t>One of the stateless A+P variants is 4rd <xref target="4rd"></xref>.</t>
</section>
</section>    

   <section title="Deployment Scenarios">

<section title="A+P Deployment Models">
  <section title="A+P for Broadband Providers">
    <t>Some large broadband providers will not have enough public IPv4 address
    space to provide every customer with a single IP address. The natural solution is
    sharing a single IP address among many customers. Multiplexing customers
    is usually accomplished by allocating different port numbers to different
    customers somewhere within the network of the provider.</t>

    <t>It is expected that, when the provider wishes to enable A+P for a
    customer or a range of customers, the CPE can be upgraded or replaced to
    support A+P encaps/decaps functionality. Ideally, the CPE also provides
    NATing functionality. Further, it is expected that at least another
    component in the ISP network provides the corresponding A+P functionality,
    and hence is able to establish an A+P subsystem with the CPE. This device
    is referred to as an A+P router or Port-Range Router (PRR), and could be
    located close to PE routers. The core of the network MUST support the
    tunneling protocol (which SHOULD be IPv6, as per Constraint <xref
    format="counter" target="const:v6"></xref>) but MAY be another tunneling
    technology when necessary. In addition, we do not wish to restrict any
    initiative of customers who might want to run an A+P-capable network on or
    behind their CPE. To satisfy both Constraints <xref format="counter"
    target="const:control"></xref> and <xref format="counter"
    target="const:legacy"></xref>, unmodified legacy hosts should keep working
    seamlessly, while upgraded/new end-systems should be given the opportunity
    to exploit enhanced features.</t>
  </section>

  <section title="A+P for Mobile Providers">
    <t>In the case of mobile service providers, the situation is slightly
    different. The A+P border is assumed to be the gateway (e.g.,
    Gateway GPRS Support Node (GGSN) / Packet Data Network (PDN) gateway (GW)
    of 3GPP, or Access Service Network (ASN) GW of Worldwide Interoperability for Microwave Access (WiMAX)). The need to extend the address is not within
    the provider network, but on the edge between the mobile phone devices and
    the gateway. While desirable, IPv6 connectivity may or may not be
    provided.</t>

    <t>For mobile providers, we use the following terms and assumptions: <list
        style="numbers">
        <t>provider network (PN)</t>

        <t>gateway (GW)</t>

        <t>mobile phone device (phone)</t>

        <t>devices behind the phone, e.g., laptop computer connecting via phone to
        Internet</t>
      </list> We expect that the gateway has a pool of IPv4 addresses and is
    always in the data-path of the packets. Transport between the gateway and
    phone devices is assumed to be an end-to-end layer-2 tunnel. We assume
    that the phone as well as gateway can be upgraded to support
    A+P. &nbsp;However,
    some applications running on the phone or devices behind the phone (such
    as laptop computers connecting via the phone) are not expected to be
    upgraded. Again, while we do not expect that devices behind the phone will
    be A+P-aware or upgraded, we also do not want to hinder their evolution. 
  In this sense, the mobile phone would be comparable to the CPE in
  the broadband provider case; it would be the gateway to the
  PRR/LSN box in the network of the broadband provider.
</t>

  </section>

  <section title="A+P from the Provider Network Perspective">
    <t>ISPs suffering from IPv4 address space exhaustion are interested in
    achieving a high address space compression ratio. In this respect, an A+P
    subsystem allows much more flexibility than traditional NATs: the NAT can
    be placed at the customer and/or in the provider network. In addition,
    hosts or applications can request ports and thus have untranslated
    end-to-end connectivity.</t>

    <figure align="center" anchor="fig:a+p-msn" title="A Simple A+P Subsystem Example">
      <preamble></preamble>

      <artwork><![CDATA[
             +---------------------------+                                   
 private     | +------+  A+P-in  +-----+ |   dual-stacked 
(RFC 1918) --|-| CPE  |==-IPv6-==| PRR |-|-- network 
  space      | +------+  tunnel  +-----+ |   (public addresses)
             |    ^              +-----+ |  
             |    |  IPv6-only   | LSN | |
             |    |   network    +-----+ | 
             +----+----------------- ^ --+
                  |                  |
             on customer        within provider
        premises and control      network  
                ]]></artwork>
    </figure>

    <t>Consider the deployment scenario in <xref target="fig:a+p-msn"></xref>,
 where an A+P
   subsystem is formed by the CPE and a PRR within the ISP core
   network and preferably is close to the customer edge.  Inside the
   subsystem, packets are forwarded based on address and port.


 The provider MAY deploy an LSN co-located with the PRR to handle
    packets that have not been translated by the CPE. In such a configuration,
    the ISP allows the customer to freely decide whether the translation is
    done at the CPE or at the LSN. In order to establish the A+P subsystem,
    the CPE will be configured automatically (e.g., via a signaling protocol
    that conforms to the requirements stated above).</t>

    <t>Note that the CPE in the example above is provisioned with only
    an IPv6
    address on the external interface.</t>

    <figure align="center" anchor="fig:a+p-extended" title="An Extended
    A+P Subsystem with End-Host Running A+P-Aware Applications">
      <preamble></preamble>

      <artwork><![CDATA[
+------------ IPv6-only transport ------------+
| +---------------+ |              |          |
| |A+P-application| |  +--------+  |  +-----+ |   dual-stacked
| | on end-host   |=|==| CPE w/ |==|==| PRR |-|-- network 
| +---------------+ |  +--------+  |  +-----+ |   (public addresses)
+---------------+   |  +--------+  |  +-----+ |
  private IPv4 <-*--+->| NAT    |  |  | LSN | |
  address space   \ |  +--------+  |  +-----+ | 
  for legacy       +|--------------|----------+
    hosts           |              |
                    |              |
  end-host with     |  CPE device  |  provider
    upgraded        |  on customer |  network
   application      |   premises   | 
                 
                ]]></artwork>
    </figure>

    <t><xref target="fig:a+p-extended"></xref> shows an example of how an
    upgraded application running on a legacy end-host can connect to another
    host in the public realm. The legacy host is provisioned with a private
    IPv4 address allocated by the CPE. Any packet sent from the legacy host
    will be NATed either at the CPE (if configured to do so) or at the LSN
    (if available).</t>

    <t>An A+P-aware application running on the end-host MAY use the signaling
    described in <xref target="sec:sig"></xref> to connect to the
    A+P subsystem. In this case, the application will be delegated some space
    in the A+P address realm, and will be able to contact the public realm
    (i.e., the public Internet) without the need for translation.</t>

    <t>Note that part of A+P signaling is that the NATs are optional. However,
    if neither the CPE nor the PRR provides NATing functionality, then it will
    not be possible to connect legacy end-hosts.</t>

    <t>To enable packet forwarding with A+P, the ISP MUST install at its A+P
    border a PRR that encaps/decaps packets. However, to achieve a higher
    address space compression ratio and/or to support CPEs without NATing
    functionality, the ISP MAY decide to provide an LSN as well. If no LSN is
    installed in some part of the ISP's topology, all CPEs in that part of the
    topology MUST support NAT functionality. For reasons of scalability, it is
    assumed that the PRR is located within the access portion of the network.

   The CPE would be configured automatically (e.g., via an extended
   DHCP or NAT-PMP, which has the signaling requirements stated above)
   with the address of the PRR and of the LSN (if one is being provided).

<xref
    target="fig:a+p-msn"></xref> illustrates a possible deployment
    scenario.</t>


  </section>
</section>

<section anchor="sec:dynamic" title="Dynamic Allocation of Port Ranges">
  <t>Allocating a fixed number of ports to all CPEs may lead to exhaustion of
  ports for high-usage customers. This is a perfect recipe for upsetting more
  demanding customers. On the other hand, allocating to all customers ports
  sufficiently to match the needs of peak users will not be very efficient. A
  mechanism for dynamic allocation of port ranges allows the ISP to achieve
  two goals: a more efficient compression ratio of the number of customers on one
  IPv4 address and, on the other hand, no limit of the more demanding
  customers' communication.</t>

  <t>Additional allocation of ports or port ranges may be made after an
  initial static allocation of ports.</t>



  <t>The mechanism would prefer allocations of port ranges from the same IP
  address as the initial allocation. If it is not possible to allocate an
  additional port range from the same IP, then the mechanism can allocate a port
  range from another IP within the same subnet. With every additional port
  range allocation, the PRR updates its routing table. The mechanism for
  allocating additional port ranges may be part of normal signaling that is
  used to authenticate the CPE to the ISP.</t>


  <t>The ISP controls the dynamic allocation of port ranges by the PRR by
  setting the initial allocation size and maximum number of allocations per
  CPE, or the maximum allocations per subscription, depending on subscription
  level. There is a general observation that the more demanding customer uses
  around 1024 ports when heavily communicating. So, for example, a first
  suggestion might be 128 ports initially and then dynamic allocations of
  ranges of 128 ports up to 511 more allocations maximum. A configured maximum
  number of allocations could be used to prevent one customer acting
  in a
  destructive manner should they become infected. The maximum number of
  allocations might also be more finely grained, with parameters of how many
  allocations a user may request per some time frame. If this is used, evasive
  applications may need to be limited in their bad behavior; for example, one
  additional allocation per minute would considerably slow a port request
  storm.</t>

  <t>There is likely no minimum request size. This is because A+P-aware
  applications running on end-hosts MAY request a single port (or a few ports)
  for the CPE to be contacted on (e.g., Voice over IP (VoIP) clients register a public IP and
  a single delegated port from the CPE, and accept incoming calls on that
  port). The implementation on the CPE or PRR will dictate how to handle such
  requests for smaller blocks: for example, half of available blocks might be
  used for "block-allocations", 1/6 for single port requests, and the rest for
  NATing.</t>

  <t>Another possible mechanism to allocate additional ports is UPnP/NAT-PMP
  (as defined in <xref target="sec:sig"></xref>), if applications behind CPE
  support it. In the case of the LSN implementation (DS-Lite), as described in 
  <xref target="sec:architecture"/> about the A+P overall architecture, signaling packets are simply forwarded by
  the CPE to the LSN and back to the host running the application that
  requested the ports, and the PRR allocates the requested port to the
  appropriate CPE.
  The same behavior may be chosen with AFTR, if requested ports are outside of
  the static initial port allocation. If a full A+P implementation is selected,
  then UPnPv2/NAT-PMP packets are accepted by the CPE, processed, and the
  requested port number is communicated through the normal signaling mechanism
  between CPE and PRR tunnel endpoints (PCP).</t>
</section>

<section title="Example of A+P-Forwarded Packets">
  <t>This section provides a detailed example of A+P setup, configuration, and
  packet flow from an end-host connected to an A+P service provider to any host
  in the IPv4 Internet, and how the return packets flow back. The following
  example discusses an A+P-unaware end-host, where the NATing is done at the
  CPE. <xref target="outbound-dg"></xref> illustrates how the CPE receives an
  IPv4 packet from the end-user device. We first describe the case where the
  CPE has been configured to provide the NAT functionality (e.g., by the
  customer through interaction with a website or by automatic signaling). In the
  following, we call a packet that is translated at the CPE an "A+P-forwarded
  packet", an analogy with the port-forwarding function employed in today's
  CPEs.  Upon receiving a packet from the internal interface, the CPE
  translates, encapsulates, and forwards it to the PRR. The NAT on the CPE is
  assumed to have a default route to the public realm through its tunnel
  interface. </t>

  <t>When the PRR receives the A+P-forwarded packet, it decapsulates the
  inner IPv4 packet and checks the source address. If the source address does
  match the range assigned to A+P-enabled CPEs, then the PRR simply forwards
  the decapsulated packet onward. This is always the case for A+P-forwarded
  packets. Otherwise, the PRR assumes that the packet is not A+P-forwarded
  and passes it to the LSN function, which in turn translates and forwards the
  packet based on the destination address. <xref target="outbound-dg"></xref>
  shows the packet flow for an outgoing A+P-forwarded packet.</t>

  <figure align="center" anchor="outbound-dg"
          title="Forwarding of Outgoing A+P-Forwarded Packets">
    <preamble></preamble>

    <artwork align="left"><![CDATA[
                +-----------+
                |    Host   |
                +-----+-----+
                   |  |  198.51.100.2 
   IPv4 datagram 1 |  |
                   |  |
                   v  |  198.51.100.1
            +---------|---------+
            |CPE      |         |
            +--------|||--------+
                   | |||     2001:db8::2
                   | ||| 192.0.2.3 (100-200)
    IPv6 datagram 2| |||
                   | |||<-IPv4-in-IPv6
                   | |||
              -----|-|||-------
            /      | |||        \
           |  ISP access network |
            \      | |||        /
              -----|-|||-------
                   | |||
                   v |||     2001:db8::1
            +--------|||--------+
            |PRR     |||        |
            +---------|---------+
                   |  |  192.0.2.1
   IPv4 datagram 3 |  |
              -----|--|--------
            /      |  |         \
           |   ISP network /     |
            \      Internet     /
              -----|--|--------
                   |  |
                   v  | 203.0.113.1
                +-----+-----+
                | IPv4 Host |
                +-----------+
            
            ]]></artwork>
  </figure>

  <texttable title="Datagram Header Contents">
    <ttcol align="right">Datagram</ttcol>

    <ttcol align="right">Header field</ttcol>

    <ttcol align="left">Contents</ttcol>

    <c>IPv4 datagram 1</c>

    <c>IPv4 Dst</c>

    <c>203.0.113.1</c>

    <c></c>

    <c>IPv4 Src</c>

    <c>198.51.100.2</c>

    <c></c>

    <c>TCP Dst</c>

    <c>80</c>

    <c></c>

    <c>TCP Src</c>

    <c>8000</c>

    <c>---------------</c>

    <c>------------</c>

    <c>---------------------------</c>

    <c>IPv6 datagram 2</c>

    <c>IPv6 Dst</c>

    <c>2001:db8::1</c>

    <c></c>

    <c>IPv6 Src</c>

    <c>2001:db8::2</c>

    <c></c>

    <c>IPv4 Dst</c>

    <c>203.0.113.1</c>

    <c></c>

    <c>IPv4 Src</c>

    <c>192.0.2.3</c>

    <c></c>

    <c>TCP Dst</c>

    <c>80</c>

    <c></c>

    <c>TCP Src</c>

    <c>100</c>

    <c>---------------</c>

    <c>------------</c>

    <c>---------------------------</c>

    <c>IPv4 datagram 3</c>

    <c>IPv4 Dst</c>

    <c>203.0.113.1</c>

    <c></c>

    <c>IPv4 Src</c>

    <c>192.0.2.3</c>

    <c></c>

    <c>TCP Dst</c>

    <c>80</c>

    <c></c>

    <c>TCP Src</c>

    <c>100</c>
  </texttable>

  <t>An incoming packet undergoes the reverse process. When the PRR receives
  an IPv4 packet on an external interface, it first checks whether or
  not the
  destination address falls within the A+P CPE delegated range. If the
  address space was delegated, then the PRR encapsulates the incoming packet and
  forwards it through the appropriate tunnel for that IP/port range. If the
  address space was not delegated, the packet would be handed to the LSN to
  check if a mapping is available.</t>

  <t><xref target="inbound-dg"></xref> shows how an incoming packet is
  forwarded, under the assumption that the port number matches the port range
    that was delegated to the CPE.</t>

  <figure align="center" anchor="inbound-dg"
          title="Forwarding of Incoming A+P-Forwarded Packets">
    <preamble></preamble>

    <artwork align="left"><![CDATA[
                +-----------+
                |    Host   |
                +-----+-----+
                   ^  |  198.51.100.2 
   IPv4 datagram 3 |  |
                   |  |
                   |  |  198.51.100.1
            +---------|---------+
            |CPE      |         |
            +--------|||--------+
                   ^ |||     2001:db8::2
                   | ||| 192.0.2.3 (100-200)
    IPv6 datagram 2| |||
                   | |||<-IPv4-in-IPv6
                   | |||
              -----|-|||-------
            /      | |||        \
           | ISP access network  |
            \      | |||        /
              -----|-|||-------
                   | |||
                   | |||     2001:db8::1
            +--------|||--------+
            |PRR     |||        |
            +---------|---------+
                   ^  |  192.0.2.1
   IPv4 datagram 1 |  |
              -----|--|--------
            /      |  |         \
           |  ISP network /      | 
            \      Internet     /
              -----|--|--------
                   |  |
                   |  | 203.0.113.1
                +-----+-----+
                | IPv4 Host |
                +-----------+
            ]]></artwork>
  </figure>

  <texttable title="Datagram Header Contents">
    <ttcol align="right">Datagram</ttcol>

    <ttcol align="right">Header field</ttcol>

    <ttcol align="left">Contents</ttcol>

    <c>IPv4 datagram 1</c>

    <c>IPv4 Dst</c>

    <c>198.51.100.3</c>

    <c></c>

    <c>IPv4 Src</c>

    <c>203.0.113.1</c>

    <c></c>

    <c>TCP Dst</c>

    <c>100</c>

    <c></c>

    <c>TCP Src</c>

    <c>80</c>

    <c>---------------</c>

    <c>------------</c>

    <c>---------------------------</c>

    <c>IPv6 datagram 2</c>

    <c>IPv6 Dst</c>

    <c>2001:db8::2</c>

    <c></c>

    <c>IPv6 Src</c>

    <c>2001:db8::1</c>

    <c></c>

    <c>IPv4 Dst</c>

    <c>198.51.100.3</c>

    <c></c>

    <c>IP Src</c>

    <c>203.0.113.1</c>

    <c></c>

    <c>TCP Dst</c>

    <c>100</c>

    <c></c>

    <c>TCP Src</c>

    <c>80</c>

    <c>---------------</c>

    <c>------------</c>

    <c>---------------------------</c>

    <c>IPv4 datagram 3</c>

    <c>IPv4 Dst</c>

    <c>198.51.100.2</c>

    <c></c>

    <c>IPv4 Src</c>

    <c>203.0.113.1</c>

    <c></c>

    <c>TCP Dst</c>

    <c>8000</c>

    <c></c>

    <c>TCP Src</c>

    <c>80</c>
  </texttable>

  <t>Note that datagram 1 travels untranslated up to the CPE; thus, the
  customer has the same control over the translation as he has today --
  a home gateway with customizable port-forwarding.</t>

  <section title="Forwarding of Standard Packets">
    <t>Packets for which the CPE does not have a corresponding port-forwarding
    rule are tunneled to the PRR that provides the LSN function. We underline
    that the LSN MUST NOT use the delegated space for NATing. See <xref
    target="RFC6333"></xref> for network diagrams that illustrate the packet flow in this case.</t>
  </section>

  <section title="Handling ICMP">
    <t>ICMP is problematic for all NATs because it lacks port numbers. A+P
    routing exacerbates the problem.</t>

    <t>Most ICMP messages fall into one of two categories: error reports or
    ECHO/ECHO replies (commonly known as "pings"). For error reports, the
    offending packet header is embedded within the ICMP packet; NAT devices
    can then rewrite that portion and route the packet to the actual
    destination host. This functionality will remain the same with A+P;
    however, the PRR will need to examine the embedded header to extract the
    port number, while the A+P gateway will do the necessary rewriting.</t>

    <t>ECHO and ECHO replies are more problematic. For ECHO, the A+P gateway
    device must rewrite the "Identifier" and perhaps "Sequence Number" fields
    in the ICMP request, treating them as if they were port numbers. This way,
    the PRR can build the correct A+P address for the returning ECHO replies,
    so they can be correctly routed back to the appropriate host in the same
    way as TCP/UDP packets. Pings originated from the public realm (Internet)
    towards an A+P device are not supported. </t>
  </section>

  <section title="Fragmentation">
    <t>In order to deliver a fragmented IP packet to its final destination
    (among those having the same IP address), the PRR should activate a
    dedicated procedure similar to the one used by <xref
    target="RFC6146"></xref>, Section 3.5, in the
    sense that it should reassemble the fragments in order to look at the
    destination port number.</t>

    <t>Note that it is recommended to use a Path MTU Discovery (PMTUD) mechanism
    (e.g., <xref target="RFC1191"></xref>).</t>

    <t>Security issues related to fragmentation are out of scope of this
    document. For more details, refer to <xref target="RFC1858"></xref>.</t>
  </section>

  <section anchor="sec:limitations" title="Limitations of the A+P Approach">
    <t>One limitation that A+P shares with any other IP-address-sharing
    mechanism is the availability of well-known ports. In fact, services run
    by customers that share the same IP address will be distinguished by the
    port number. As a consequence, it will be impossible for two customers who
    share the same IP address to run services on the same port (e.g., port
    80). Unfortunately, working around this limitation usually implies
    application-specific hacks (e.g., HTTP and HTTPS redirection), discussion
    of which is out of the scope of this document. Of course, a provider might
    charge more for giving a customer the well-known port range, 0..1024, thus
    allowing the customer to provide externally available services. Many
    applications require the availability of well-known ports. However, those
    applications are not expected to work in an A+P environment unless they can
    adapt to work with different ports. Such applications do not work
    behind today's NATs either.</t>

    <t>Another problem that is common to all NATs is coexistence with IPsec.
    In fact, a NAT that also translates port numbers prevents
    the Authentication Header (AH) and
    Encapsulating Security Payload (ESP) from
    functioning properly, both in tunnel and in transport mode. In this
    respect, we stress that, since an A+P subsystem exhibits the same external
    behavior as a NAT, well-known workarounds (such as <xref
    target="RFC3715"></xref>) can be employed.</t>

	<t>A+P, as all other port-sharing solutions, suffers from the issues 
	documented in <xref target="RFC6269"></xref>, 
	but that's something we'll have to live with.
	</t>
	
	<t>For the host-based A+P, issues related to application
	conflicts when trying to 
	bind to an out-of-range port are to be further assessed. Note that extensions 
	to the host-based model have been proposed in the past (e.g.,
	the Port-Enhanced Address Resolution Protocol (ARP)
	extension documented in http://software.merit.edu/pe-arp/).
	</t>
  </section>
  
  <section anchor="sec:strategy" title="Port Allocation Strategy Agnostic">

	<t>Issues raised by <xref target="PR-IP-ISSUES"></xref> 
	have been analyzed in <xref target="STATELESS-4v6"></xref>. As seen in that document,
	most of the issues apply to host-based port-sharing
	solutions. A+P is not intended to be a host-based 
	port-sharing solution.
	</t>
	<t>
   The conclusion of <xref target="STATELESS-4v6"></xref> is that the
   set of issues specifically attributed to A+P 
   either do not apply to CPE-based flavors or can be mitigated. The A+P solution represents a 
   reasonable trade-off compared to alternatives in areas such as
   binding logging (for data storage purposes) and 
   ease of deployment and operations, all of which are actually facilitated by such a solution.
	</t>
  </section>
</section>

   </section>

<section anchor="Security" title="Security Considerations">

  <t>With CGNs/LSNs, tracing hackers, spammers, and other criminals will be
  difficult, requiring logging, recording, and storing of all connection-based
  mapping information. The need for storage implies a trade-off. On one hand,
  the LSNs can manage addresses and ports as dynamically as possible in order
  to maximize aggregation. On the other hand, the more quickly the mapping
  between private and public space changes, the more information needs to be
  recorded. This would cause concern not only for law enforcement services,
  but also for privacy advocates.</t>

  <t>A+P offers a better set of trade-offs. All that needs to be logged is the
  allocation of a range of port numbers to a customer. By design, this will be
  done rarely, improving scalability. If the NAT functionality is moved
  further up the tree, the logging requirement will be as well, increasing the
  load on one node, but giving it more resources to allocate to a busy
  customer, perhaps decreasing the frequency of allocation requests.</t>

  <t>The other extreme is A+P NAT on the customer premises. Such a node would
  be no different than today's NAT boxes, which do no such logging. We thus
  conclude that A+P is no worse than today's situation, while being
  considerably better than CGNs.</t>

</section>


    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>The authors wish to especially thank Remi Despres and Pierre
      Levis for their help on the development of the A+P approach.
     
      We also thank David Ward for review, constructive criticism, and
      interminable questions, and Dave Thaler for useful criticism on
      "stackable" A+P gateways.  We would also like to thank the
      following persons for their feedback on earlier versions of this
      work: Rob Austein, Gert Doering, Dino Farinacci, Russ Housley, 
      Ruediger Volk, Tina Tsou, and Pasi Sarolahti.</t>
    </section>
  </middle>

  <back>

<?rfc rfcedstyle="no"?>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
    </references>

    <references title="Informative References">

<!-- ietf-softwire-dual-stack-lite = 6333; pub -->
<reference anchor='RFC6333'>
<front>
<title>Dual-Stack Lite Broadband Deployments Following IPv4 Exhaustion</title>

<author initials='A' surname='Durand' fullname='Alain Durand'>
    <organization />
</author>

<author initials='R' surname='Droms' fullname='Ralph Droms'>
    <organization />
</author>

<author initials='J' surname='Woodyatt' fullname='James Woodyatt'>
    <organization />
</author>

<author initials='Y' surname='Lee' fullname='Yiu Lee'>
    <organization />
</author>

<date month='August' year='2011' />

</front>

<seriesInfo name='RFC' value='6333'/>

</reference>


<!-- boucadair-dhcpv6-shared-address-option; expired -->
<reference anchor='SHARED-ADDR-OPT'>
<front>
<title>Dynamic Host Configuration Protocol (DHCPv6) Options for Shared IP Addresses Solutions</title>

<author initials='M' surname='Boucadair' fullname='Mohammed Boucadair'>
    <organization />
</author>

<author initials='P' surname='Levis' fullname='Pierre Levis'>
    <organization />
</author>

<author initials='J' surname='Grimault' fullname='Jean-Luc Grimault'>
    <organization />
</author>

<author initials='T' surname='Savolainen' fullname='Teemu Savolainen'>
    <organization />
</author>

<author initials='G' surname='Bajko' fullname='Gabor Bajko'>
    <organization />
</author>

<date month='December' day='20' year='2009' />

</front>

<seriesInfo name='Work' value='in Progress'/>

</reference>


<!-- boucadair-pppext-portrange-option -->
<reference anchor='PORT-RANGE-OPT'>
<front>
<title>Huawei Port Range Configuration Options for PPP IPCP</title>

<author initials='M' surname='Boucadair' fullname='Mohammed Boucadair'>
    <organization />
</author>

<author initials='P' surname='Levis' fullname='Pierre Levis'>
    <organization />
</author>

<author initials='G' surname='Bajko' fullname='Gabor Bajko'>
    <organization />
</author>

<author initials='T' surname='Savolainen' fullname='Teemu Savolainen'>
    <organization />
</author>

<author initials='T' surname='ZOU)' fullname='Tina Tsou (Ting ZOU)'>
    <organization />
</author>

<date month='June' day='28' year='2011' />

</front>

<seriesInfo name='Work' value='in Progress'/>

</reference>


      <!-- bajko-pripaddrassign; expired -->
<reference anchor='PR-ADDR-ASSIGN'>
<front>
<title>Port Restricted IP Address Assignment</title>

<author initials='G' surname='Bajko' fullname='Gabor Bajko'>
    <organization />
</author>

<author initials='T' surname='Savolainen' fullname='Teemu Savolainen'>
    <organization />
</author>

<author initials='M' surname='Boucadair' fullname='Mohammed Boucadair'>
    <organization />
</author>

<author initials='P' surname='Levis' fullname='Pierre Levis'>
    <organization />
</author>

<date month='September' day='27' year='2010' />

</front>

<seriesInfo name='Work' value='in Progress'/>

</reference>

      <!-- ietf-pcp-base; I-D exists -->
<reference anchor='PCP-BASE'>
<front>
<title>Port Control Protocol (PCP)</title>

<author initials='D' surname='Wing' fullname='Dan Wing'>
    <organization />
</author>

<author initials='S' surname='Cheshire' fullname='Stuart Cheshire'>
    <organization />
</author>

<author initials='M' surname='Boucadair' fullname='Mohammed Boucadair'>
    <organization />
</author>

<author initials='R' surname='Penno' fullname='Reinaldo Penno'>
    <organization />
</author>

<author initials='P' surname='Selkirk' fullname='Paul Selkirk'>
    <organization />
</author>

<date month='July' day='5' year='2011' />

</front>

<seriesInfo name='Work' value='in Progress'/>

</reference>


      <!-- deng-aplusp-experiment-results - I-D Exists-->
<reference anchor='A+P-EXPERIMENTS'>
<front>
<title>Implementing A+P in the provider's IPv6-only network</title>

<author initials='X' surname='Deng' fullname='Xiaohong Deng'>
    <organization />
</author>

<author initials='M' surname='Boucadair' fullname='Mohammed Boucadair'>
    <organization />
</author>

<author initials='F' surname='Telecom' fullname='France Telecom'>
    <organization />
</author>

<date month='March' day='7' year='2011' />

</front>

<seriesInfo name='Work' value='in Progress'/>

</reference>

      <!-- thaler-port-restricted-ip-issues - Expired-->
<reference anchor='PR-IP-ISSUES'>
<front>
<title>Issues With Port-Restricted IP Addresses</title>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<date month='February' day='28' year='2010' />

</front>

<seriesInfo name='Work' value='in Progress'/>
</reference>


      <!-- dec-stateless-4v6 - I-D Exists-->
<reference anchor='STATELESS-4v6'>
<front>
<title>Stateless 4Via6 Address Sharing</title>

<author initials='W' surname='Dec' fullname='Wojciech Dec'>
    <organization />
</author>

<author initials='R' surname='Asati' fullname='Rajiv Asati'>
    <organization />
</author>

<author initials='C' surname='Bao' fullname='Congxiao Bao'>
    <organization />
</author>

<author initials='H' surname='Deng' fullname='Hui Deng'>
    <organization />
</author>

<date month='July' day='11' year='2011' />

</front>

<seriesInfo name='Work' value='in Progress'/>

</reference>

<!-- 
draft-boucadair-behave-bittorrent-address-sharing
(which replaced boucadair-behave-bittorrent-portrange)
-->

<reference anchor='BITTORRENT-ADDR-SHARING'>
<front>
<title>Behavior of BitTorrent service in an IP Shared Address Environment</title>

<author initials='M' surname='Boucadair' fullname='Mohammed Boucadair'>
    <organization />
</author>

<author initials='J' surname='Grimault' fullname='Jean-Luc Grimault'>
    <organization />
</author>

<author initials='P' surname='Levis' fullname='Pierre Levis'>
    <organization />
</author>

<author initials='A' surname='Villefranque' fullname='Alain Villefranque'>
    <organization />
</author>

<date month='March' day='29' year='2011' />

</front>

<seriesInfo name='Work' value='in Progress'/>

</reference>

      <!-- despres-intarea-4rd - I-D Exists -->
<reference anchor='4rd'>
<front>
<title>IPv4 Residual Deployment across IPv6-Service networks (4rd) ISP-NAT's made optional</title>

<author initials='R' surname='Despres' fullname='Remi Despres'>
    <organization />
</author>

<author initials='S' surname='Matsushima' fullname='Satoru Matsushima'>
    <organization />
</author>

<author initials='T' surname='Murakami' fullname='Tetsuya Murakami'>
    <organization />
</author>

<author initials='O' surname='Troan' fullname='Ole Troan'>
    <organization />
</author>

<date month='March' day='14' year='2011' />

</front>

<seriesInfo name='Work' value='in Progress'/>

</reference>

      <?rfc include="reference.RFC.1918"?>
      <?rfc include="reference.RFC.3715"?>
      <?rfc include="reference.RFC.1191"?>
      <?rfc include="reference.RFC.1858"?>

      <?rfc include="reference.RFC.5737"?>
      <?rfc include="reference.RFC.6052"?>
      <?rfc include="reference.RFC.6146"?>
      <?rfc include="reference.RFC.6269"?>

<reference anchor='BCP38'>

<front>
<title>Network Ingress Filtering: Defeating Denial of Service Attacks which employ IP Source Address Spoofing</title>
<author initials='P.' surname='Ferguson' fullname='P. Ferguson'>
<organization /></author>
<author initials='D.' surname='Senie' fullname='D. Senie'>
<organization /></author>
<date year='2000' month='May' />
<abstract>

<t>This paper discusses a simple, effective, and straightforward
method for using ingress traffic filtering to prohibit DoS (Denial of
Service) attacks which use forged IP addresses to be propagated from
'behind' an Internet Service Provider's (ISP) aggregation point.  This
document specifies an Internet Best Current Practices for the Internet
Community, and requests discussion and suggestions for
improvements.</t></abstract>
</front>

<seriesInfo name='BCP' value='38' />
<seriesInfo name='RFC' value='2827' />
<format type='TXT' octets='21258' target='http://www.rfc-editor.org/rfc/rfc2827.txt' />
</reference>

    </references>
<?rfc rfcedstyle="yes"?>

    <section anchor="authors" title="Contributing Authors">

   <t>This document has nine primary authors.</t>

<figure align="left"><artwork align="left">
      Gabor Bajko
      Nokia
      EMail: gabor.bajko@nokia.com

      Mohamed Boucadair
      France Telecom
      3, Av Francois Chateaux
      Rennes  35000
      France
      EMail: mohamed.boucadair@orange-ftgroup.co

      Steven M. Bellovin
      Columbia University
      1214 Amsterdam Avenue
      MC 0401
      New York, NY  10027
      US
      Phone: +1 212 939 7149
      EMail: bellovin@acm.org

      Randy Bush
      Internet Initiative Japan
      5147 Crystal Springs
      Bainbridge Island, Washington  98110
      US
      Phone: +1 206 780 0431 x1
      EMail: randy@psg.com

      Luca Cittadini
      Universita' Roma Tre
      via della Vasca Navale, 79
      Rome,   00146
      Italy
      Phone: +39 06 5733 3215
      EMail: luca.cittadini@gmail.com

      Olaf Maennel
      Loughborough University
      Department of Computer Science - N.2.03
      Loughborough
      United Kingdom
      Phone: +44 115 714 0042
      EMail: o@maennel.net

      Reinaldo Penno
      Juniper Networks
      1194 North Mathilda Avenue
      Sunnyvale, California  94089
      US
      EMail: rpenno@juniper.net

      Teemu Savolainen
      Nokia
      Hermiankatu 12 D
      TAMPERE, FI-33720
      Finland
      EMail: teemu.savolainen@nokia.com

      Jan Zorz
      Go6 Institute Slovenia
      Frankovo naselje 165
      Skofja Loka,  4220
      Slovenia
      EMail: jan@go6.si
</artwork></figure>

    </section>

  </back>

</rfc>
