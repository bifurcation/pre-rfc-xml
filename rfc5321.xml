<?xml version='1.0' encoding='US-ASCII'?>

<!-- Final RFC5321 version -- all tracking notes removed -->
<!-- Comments with content ... #.#.# ... refer to section numbers in
      2821. -->
	  
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY rfc2119 PUBLIC ''
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
<!ENTITY rfc1123 PUBLIC ''
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1123.xml'>
<!ENTITY rfc5234 PUBLIC ''
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml'>
<!ENTITY rfc4291 PUBLIC ''
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4291.xml'>
<!ENTITY rfc1035 PUBLIC ''
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1035.xml'>
<!ENTITY rfc1034 PUBLIC ''
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1034.xml'>
<!ENTITY rfc0793 PUBLIC ''
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.0793.xml'>
<!ENTITY rfc0821 PUBLIC ''
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.0821.xml'>
<!ENTITY rfc3864 PUBLIC ''
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3864.xml'>
<!ENTITY rfc3848 PUBLIC ''
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3848.xml'>
<!ENTITY rfc3974 PUBLIC ''
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3974.xml'>
<!ENTITY rfc4880 PUBLIC ''
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4880.xml'>
<!ENTITY rfc0937 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.0937.xml'>
<!ENTITY rfc1176 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1176.xml'>
<!ENTITY rfc3501 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3501.xml'>
<!ENTITY rfc0822 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.0822.xml'>
<!ENTITY rfc2821 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2821.xml'>
<!ENTITY rfc1985 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1985.xml'>
<!ENTITY rfc3798 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3798.xml'>
<!ENTITY rfc2979 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2979.xml'>
<!ENTITY rfc2045 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2045.xml'>
<!ENTITY rfc2920 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2920.xml'>
<!ENTITY rfc1847 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1847.xml'>
<!ENTITY rfc4409 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4409.xml'>
<!ENTITY rfc2156 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2156.xml'>
<!ENTITY rfc1870 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1870.xml'>
<!ENTITY rfc1869 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1869.xml'>
<!ENTITY rfc1652 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1652.xml'>
<!ENTITY rfc1056 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1056.xml'>
<!ENTITY rfc2047 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2047.xml'>
<!ENTITY rfc2231 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2231.xml'>
<!ENTITY rfc3461 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3461.xml'>
<!ENTITY rfc3464 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3464.xml'>
<!ENTITY rfc1939 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1939.xml'>
<!ENTITY rfc0974 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.0974.xml'>
<!ENTITY rfc0959 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.0959.xml'>
<!ENTITY rfc1047 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1047.xml'>
<!ENTITY rfc3851 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3851.xml'>
<!ENTITY rfc3030 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3030.xml'>
<!ENTITY rfc3463 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3463.xml'>
<!ENTITY rfc5248 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5248.xml'>
<!ENTITY rfc3552 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml'>
<!ENTITY rfc4408 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4408.xml'>
<!ENTITY rfc4686 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4686.xml'>
<!ENTITY rfc4871 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4871.xml'>
<!ENTITY rfc2181 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2181.xml'>
   ]>
   
<?rfc toc='yes' ?>

<!-- Symrefs no means reference numbers, yes is anchors -->
<?rfc symrefs='no' ?>
<?rfc sortrefs='yes'?>
<?rfc linkmailto='no'?>

<?rfc rfcedstyle="yes"?>
<?rfc subcompact="no" ?>

<!-- Expand crefs and put them inline -->
<?rfc comments='no' ?>
<?rfc inline='yes' ?>  

<?rfc-ext parse-xml-in-artwork='yes' ?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<rfc number="5321" obsoletes='2821' updates='1123' category='std' >
  <front>
    <title abbrev='SMTP'>Simple Mail Transfer Protocol</title>
    <author initials='J.' surname='Klensin' fullname='John C. Klensin'>
      <organization/>
      <address>
        <postal>
      <street>1770 Massachusetts Ave, Suite 322</street>
      <city>Cambridge</city>
      <region>MA</region>
      <code>02140</code>
      <country>USA</country>
    </postal>
    <email>john+smtp@jck.com</email>
      </address>
    </author>
    <date month='September' year='2008' />
    <keyword>SMTP</keyword>
	<keyword>Email</keyword>

    <abstract>
      <t> This document is a specification of the
    basic protocol for Internet electronic mail transport.  It consolidates,
    updates, and clarifies several previous documents, making all or parts
    of most of them obsolete.  It covers the SMTP extension mechanisms and
    best practices for the contemporary Internet, but does not provide details
    about particular extensions.  Although SMTP was designed as a mail transport
    and delivery protocol, this specification also contains information that
    is important to its use as a "mail submission" protocol for "split-UA" (User Agent)
    mail reading systems and mobile environments.
      </t>
    </abstract>
  </front>

  <middle>
    <section title='Introduction' anchor="intro"><!-- 1 -->
     

      <section title='Transport of Electronic Mail'><!-- 1.1 -->
        <t>
      The objective of the Simple Mail Transfer Protocol (SMTP) is to transfer
      mail reliably and efficiently.
    </t><t>
      SMTP is independent of the particular transmission subsystem and requires
      only a reliable ordered data stream channel.  While this document specifically
      discusses transport over TCP, other transports are possible.  Appendices
      to <xref target='RFC0821'>RFC 821</xref> describe some of them.
    </t><t>
      An important feature of SMTP is its capability to transport mail across
      multiple networks, usually referred to as "SMTP mail relaying" (see
      <xref target='relaying'/>).  A network consists of the mutually-TCP-accessible
      hosts on the public Internet, the mutually-TCP-accessible hosts on a
      firewall-isolated TCP/IP Intranet, or hosts in some other LAN or WAN
      environment utilizing a non-TCP transport-level protocol.  Using SMTP,
      a process can transfer mail to another process on the same network or
      to some other network via a relay or gateway process accessible to both networks.
    </t><t>
      In this way, a mail message may pass through a number of intermediate
      relay or gateway hosts on its path from sender to ultimate recipient.
      The Mail eXchanger mechanisms of the domain name system
	  (<xref target='RFC1035'>RFC 1035</xref>,
      <xref target='RFC0974'>RFC 974</xref>, and <xref target='address_resolution'/>
      of this document) are used to identify the appropriate next-hop destination
      for a message being transported.
    </t>
      </section><!-- 1.1 -->
      <section title='History and Context for This Document'><!-- 1.2 -->
        <t>
      This document is a specification of the basic protocol
      for the Internet electronic mail transport.  It consolidates, updates
      and clarifies, but does not add new or change existing functionality
      of the following:
    </t><t>
      <list style='symbols'>
        <t>the original SMTP (Simple Mail Transfer Protocol) specification
           of <xref target='RFC0821'>RFC 821</xref>,
        </t><t>domain name system requirements and implications for mail transport
           from <xref target='RFC1035'>RFC 1035</xref> and
		   <xref target='RFC0974'>RFC 974</xref>,
        </t><t>the clarifications and applicability statements in
		   <xref target='RFC1123'>RFC 1123</xref>,
        and
        </t><t>material drawn from the SMTP Extension mechanisms in
		   <xref target='RFC1869'>RFC 1869</xref>.
        </t>
        <t>Editorial and clarification changes
           to <xref target="RFC2821">RFC 2821</xref> to bring that
           specification to Draft Standard.</t>
      </list>
    </t><t>
      It obsoletes RFC 821, RFC 974, RFC 1869, and RFC 2821
	  and updates RFC 1123 (replacing
      the mail transport materials of RFC 1123).  However, RFC 821 specifies
      some features that were not in significant use in the Internet by the
      mid-1990s and (in appendices) some additional transport models. Those
      sections are omitted here in the interest of clarity and brevity; readers
      needing them should refer to RFC 821.
    </t><t>
      It also includes some additional material from RFC 1123 that required
      amplification.  This material has been identified in multiple ways,
      mostly by tracking flaming on various lists and newsgroups and problems
      of unusual readings or interpretations that have appeared as the SMTP
      extensions have been deployed.  Where this specification moves beyond
      consolidation and actually differs from earlier documents, it supersedes
      them technically as well as textually.
    </t><t>
      Although SMTP was designed as a mail transport and delivery protocol,
      this specification also contains information that is important to its
      use as a "mail submission" protocol, as recommended for
      Post Office Protocol (POP) (<xref target='RFC0937'>RFC 937</xref>,
      <xref target='RFC1939'>RFC 1939</xref>) and
      IMAP (<xref target='RFC3501'>RFC 3501</xref>).
      In general, the separate mail submission protocol specified
	  in <xref target='RFC4409'>RFC 4409</xref> is now preferred to
	  direct use of SMTP; 
	  more discussion of that subject appears in that document. </t>
   <t> <xref target='terminology'/> provides definitions of terms specific
      to this document. Except when the historical terminology is necessary
      for clarity, this document uses the current 'client' and 'server' terminology
      to identify the sending and receiving SMTP processes, respectively.
    </t><t>
      A companion document, <xref target='RFC5322'>RFC 5322</xref>, discusses
      message header sections and
      bodies and specifies formats and structures for them. 
    </t>
      </section><!-- 1.2 -->

	  <section title="Document Conventions">  <!-- 1.5 -->
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
		   NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
		   "OPTIONAL" in this document are to be interpreted as described in
		   <xref target="RFC2119">RFC 2119</xref>.  As each of these
		   terms was intentionally and carefully chosen to improve
		   the interoperability of email, each use of these terms is
		   to be treated as a conformance requirement. </t>

		<t>Because this document has a long history and to avoid
			the risk of various errors and of confusing readers and
			documents that point to this one, most examples and the
			domain names they contain are preserved from RFC 2821.
			Readers are cautioned that these are illustrative
			examples that should not actually be used in either 
		    code or configuration files.</t>
	  </section>
    </section><!-- 1 -->

    <section title='The SMTP Model'><!-- 2 -->
      <section anchor='basic_structure' title='Basic Structure'><!-- 2.1 -->
        <t>
      The SMTP design can be pictured as:
    </t>
<figure>
<artwork><![CDATA[
               +----------+                +----------+
   +------+    |          |                |          |
   | User |<-->|          |      SMTP      |          |
   +------+    |  Client- |Commands/Replies| Server-  |
   +------+    |   SMTP   |<-------------->|    SMTP  |    +------+
   | File |<-->|          |    and Mail    |          |<-->| File |
   |System|    |          |                |          |    |System|
   +------+    +----------+                +----------+    +------+
                SMTP client                SMTP server
]]></artwork></figure>
        <t>
      When an SMTP client has a message to transmit, it establishes a two-
      way transmission channel to an SMTP server.  The responsibility of an
      SMTP client is to transfer mail messages to one or more SMTP servers,
      or report its failure to do so.
    </t><t>
      The means by which a mail message is presented to an SMTP client, and
      how that client determines the identifier(s) ("names") of the
      domain(s) to which mail messages 
      are to be transferred, is a local matter, and is not addressed by this
      document.  In some cases, the designated domain(s), or those determined
      by an SMTP client, will identify the final destination(s) of the mail
      message.  In other cases, common with SMTP clients associated
      with implementations 
      of the POP (<xref target='RFC0937'>RFC 937</xref>,
      <xref target='RFC1939'>RFC 1939</xref>)
      or IMAP (<xref target='RFC3501'>RFC 3501</xref>) protocols, or when the
      SMTP client is inside an isolated transport service environment, the
      domain determined will identify an intermediate destination through
      which all mail messages are to be relayed.  SMTP clients that transfer
      all traffic regardless of the target domains associated with the
      individual messages, or that do not maintain queues for retrying message
      transmissions that initially cannot be completed, may otherwise conform
      to this specification but are not considered fully-capable.
      Fully-capable
      SMTP implementations, including the relays used by these less capable
      ones, and their destinations, are expected to support all of the queuing,
      retrying, and alternate address functions discussed in this
      specification.
      In many situations and configurations, the less-capable clients
      discussed above SHOULD be using the message submission protocol
      (<xref target="RFC4409">RFC 4409</xref>) rather than SMTP.</t>
   <t> The means by which an SMTP client, once it has determined a
      target domain, determines the identity of an SMTP server to which a copy of a
      message is to be transferred, and then performs that transfer, is covered
      by this document.  To effect a mail transfer to an SMTP server, an SMTP
      client establishes a two-way transmission channel to that SMTP server.
      An SMTP client determines the address of an appropriate host running
      an SMTP server by resolving a destination domain name to either an intermediate
      Mail eXchanger host or a final target host.
    </t><t>
      An SMTP server may be either the ultimate destination or an intermediate
      "relay" (that is, it may assume the role of an SMTP client after receiving
      the message) or "gateway" (that is, it may transport the message further
      using some protocol other than SMTP). SMTP commands are generated by
      the SMTP client and sent to the SMTP server.  SMTP replies are sent
      from the SMTP server to the SMTP client in response to the commands.
    </t><t>
      In other words, message transfer can occur in a single connection between
      the original SMTP-sender and the final SMTP-recipient, or can occur
      in a series of hops through intermediary systems.
	  In either case, once the server has issued a success response at
      the end of the mail data, a formal handoff of responsibility for
      the message occurs: the protocol requires that a server MUST
	  accept responsibility for either delivering the message 
  	  or properly reporting the failure to do so (see Sections
	  <xref target='reliable_delivery' format="counter"/>,
	  <xref target='unwanted_messages' format="counter"/>, and
	  <xref target='resistance_to_attacks' format="counter"/>, below).
    </t><t>
      Once the transmission channel is established and initial handshaking is
      completed, the SMTP client normally initiates a mail transaction. Such
      a transaction consists of a series of commands to specify the originator
      and destination of the mail and transmission of the message content
      (including any lines in the header section or other structure)
	  itself.  When the same message 
      is sent to multiple recipients, this protocol encourages the transmission
      of only one copy of the data for all recipients at the same destination
      (or intermediate relay) host.
    </t><t>
      The server responds to each command with a reply; replies may indicate
      that the command was accepted, that additional commands are expected,
      or that a temporary or permanent error condition exists.  Commands specifying
      the sender or recipients may include server- permitted SMTP service
      extension requests, as discussed in <xref target='extension_model'/>.
      The dialog is purposely lock-step, one-at-a-time, although this can
      be modified by mutually agreed upon extension requests such as command pipelining
      (<xref target='RFC2920'>RFC 2920</xref>).
    </t><t>
      Once a given mail message has been transmitted, the client may either
      request that the connection be shut down or may initiate other mail
      transactions.  In addition, an SMTP client may use a connection to an
      SMTP server for ancillary services such as verification of email addresses
      or retrieval of mailing list subscriber addresses.
    </t><t>
      As suggested above, this protocol provides mechanisms for the transmission
      of mail.  Historically, this transmission normally occurred directly
      from the sending user's host to the receiving user's host when the two
      hosts are connected to the same transport service. When they are not
      connected to the same transport service, transmission occurs via one
      or more relay SMTP servers.  A very common case in the Internet today
      involves submission of the original message to an intermediate, "message
      submission" server, which is similar to a relay but has some additional
      properties; such servers are discussed in <xref target='ODRGsystems'/>
      and at some length in
      <xref target='RFC4409'>RFC 4409</xref>.  An intermediate
      host that acts as either an SMTP relay or as a gateway into some other
      transmission environment is usually selected through the use of the
      domain name service (DNS) Mail eXchanger mechanism.
    </t><t>
      Usually, intermediate hosts are determined via the DNS MX record, not
      by explicit "source" routing (see <xref target='address_resolution'/>
      and <xref target='source_routes'/> and <xref target='source_routing'/>).
    </t>
      </section><!-- 2.1 -->
      <section anchor='extension_model' title='The Extension Model'><!-- 2.2 -->
        <section title='Background'><!-- 2.2.1 -->
      <t>
        In an effort that started in 1990, approximately a decade after RFC
        821 was completed, the protocol was modified with a "service extensions"
        model that permits the client and server to agree to utilize shared
        functionality beyond the original SMTP requirements. The SMTP extension
        mechanism defines a means whereby an extended SMTP client and server
        may recognize each other, and the server can inform the client as
        to the service extensions that it supports.
      </t><t>
        Contemporary SMTP implementations MUST support the basic extension
        mechanisms.  For instance, servers MUST support the EHLO command even
        if they do not implement any specific extensions and clients SHOULD
        preferentially utilize EHLO rather than HELO.  (However, for compatibility
        with older conforming implementations, SMTP clients and servers MUST
        support the original HELO mechanisms as a fallback.) Unless the different
        characteristics of HELO must be identified for interoperability purposes,
        this document discusses only EHLO.
      </t><t>
        SMTP is widely deployed and high-quality implementations have proven
        to be very robust.  However, the Internet community now considers
        some services to be important that were not anticipated when the protocol
        was first designed.  If support for those services is to be added,
        it must be done in a way that permits older implementations to continue
        working acceptably.  The extension framework consists of:
      </t><t>
        <list style='symbols'>
          <t>
            The SMTP command EHLO, superseding the earlier HELO,
          </t><t>
            a registry of SMTP service extensions,
          </t><t>
            additional parameters to the SMTP MAIL and RCPT commands, and
          </t><t>
            optional replacements for commands defined in this protocol, such
        as for DATA in non-ASCII transmissions
		(<xref target='RFC3030'>RFC 3030</xref>).
          </t>
        </list>
      </t><t>
        SMTP's strength comes primarily from its simplicity.  Experience with
        many protocols has shown that protocols with few options tend towards
        ubiquity, whereas protocols with many options tend towards obscurity.
      </t><t>
        Each and every extension, regardless of its benefits, must be carefully
        scrutinized with respect to its implementation, deployment, and interoperability
        costs.  In many cases, the cost of extending the SMTP service will
        likely outweigh the benefit.
      </t>
        </section><!-- 2.2.1 -->
    <section anchor='definition_and_registration_of_extensions'
              title='Definition and Registration of Extensions'><!-- 2.2.2 -->
          <t>The IANA maintains a registry of SMTP service extensions.  A corresponding
        EHLO keyword value is associated with each extension. Each service
        extension registered with the IANA must be defined in a formal Standards-Track
        or IESG-approved Experimental protocol document.  The definition must
        include:
      </t><t>
        <list style='symbols'>
          <t>the textual name of the SMTP service extension;
          </t><t>the EHLO keyword value associated with the extension;
          </t><t>the syntax and possible values of parameters associated with
             the EHLO keyword value;
          </t><t>any additional SMTP verbs associated with the extension (additional
             verbs will usually be, but are not required to be, the same as the EHLO keyword value);
          </t><t>any new parameters the extension associates with the MAIL or RCPT verbs;
          </t><t>a description of how support for the extension affects the
             behavior of a server and client SMTP; and
          </t><t>the increment by which the extension is increasing the maximum
             length of the commands MAIL and/or RCPT, over that specified in this Standard.
          </t>
        </list>
      </t><t>
        In addition, any EHLO keyword value starting with an upper or lower
        case "X" refers to a local SMTP service extension used exclusively
        through bilateral agreement.  Keywords beginning with "X" MUST NOT
        be used in a registered service extension.  Conversely, keyword values
        presented in the EHLO response that do not begin with "X" MUST correspond
        to a Standard, Standards-Track, or IESG-approved Experimental SMTP
        service extension registered with IANA.  A conforming server MUST
        NOT offer non-"X"-prefixed keyword values that are not described in
        a registered extension.
      </t><t>
        Additional verbs and parameter names are bound by the same rules as
        EHLO keywords; specifically, verbs beginning with "X" are local extensions
        that may not be registered or standardized.  Conversely, verbs not
        beginning with "X" must always be registered. 
      </t>
        </section><!-- 2.2.2 -->
        <section title="Special Issues with Extensions">
           <t> Extensions that change fairly basic
               properties of SMTP operation are permitted.  The
			   text in other sections 
               of this document must be understood in that context.  In
               particular, extensions can change the minimum limits
               specified in <xref target="sizesTimeouts"/>, can change the
               ASCII character set requirement as mentioned above, or can
               introduce some optional modes of message handling.</t>
            <t>In particular, if an extension implies that the
               delivery path normally supports special features of
               that extension, and an intermediate SMTP system
               finds a next hop that does not support the
               required extension, it MAY choose, based on the
               specific extension and circumstances, to requeue the
               message and try later and/or try an alternate MX
               host.  If this strategy is employed, the
               timeout to fall back to an unextended format (if one is
               available) SHOULD be less than the normal
               timeout for bouncing as undeliverable (e.g., if normal
               timeout is three days, the requeue timeout before
               attempting to transmit the mail without the extension
               might be one day).</t>
            </section>
      </section><!-- 2.2 -->
      <section anchor='terminology' title='SMTP Terminology'><!-- 2.3 -->

        <section anchor='mail_objects' title='Mail Objects'><!-- 2.3.1 -->
          <t>
        SMTP transports a mail object.  A mail object contains an envelope and content.
      </t><t>
        The SMTP envelope is sent as a series of SMTP protocol units (described
        in <xref target='overview'/>).  It consists of an originator address
        (to which error reports should be directed), one or more recipient
        addresses, and optional protocol extension material.  Historically,
        variations on the reverse-path (originator) address
        specification command (MAIL)
        could be used to specify alternate delivery modes, such as immediate
        display; those variations have now been deprecated
        (see <xref target='deprecated_features'/>
        and <xref target='sending_versus_mailing'/>).</t>
     <t>The SMTP content is sent in the SMTP DATA protocol unit and has two
        parts: the header section and the body.  If the content
		conforms to other  
        contemporary standards, the header section consists of a
        collection of header fields, each consisting of a header name,
        a colon, and data, structured as in the message format
        specification (<xref target='RFC5322'>RFC 5322</xref>);
        the body, if structured, is defined according to
        MIME (<xref target='RFC2045'>RFC 2045</xref>).
        The content is textual in nature, expressed using the US-ASCII repertoire
        <xref target='ASCII'/>.  Although SMTP extensions (such as "8BITMIME",
        <xref target='RFC1652'>RFC 1652</xref>) may relax this restriction
        for the content body, the content header fields are always encoded using
        the US-ASCII repertoire.  Two MIME extensions
		(<xref target='RFC2047'>RFC 2047</xref> and
		<xref target="RFC2231">RFC 2231</xref>)
        define an algorithm for representing header values outside the US-ASCII
        repertoire, while still encoding them using the US-ASCII
		repertoire.</t>
	 
        </section><!-- 2.3 -->
        <section title='Senders and Receivers'><!-- 2.3.2 -->
          <t>
        In RFC 821, the two hosts participating in an SMTP transaction were
        described as the "SMTP-sender" and "SMTP-receiver".  This document
        has been changed to reflect current industry terminology and hence
        refers to them as the "SMTP client" (or sometimes just "the client")
        and "SMTP server" (or just "the server"), respectively.  Since a given
        host may act both as server and client in a relay situation, "receiver"
        and "sender" terminology is still used where needed for clarity.
      </t>
        </section><!-- 2.3.2 -->
        <section title='Mail Agents and Message Stores'><!-- 2.3.3 -->
          <t>
        Additional mail system terminology became common after RFC 821 was
        published and, where convenient, is used in this specification.  In
        particular, SMTP servers and clients provide a mail transport service
        and therefore act as "Mail Transfer Agents" (MTAs).  "Mail User Agents"
        (MUAs or UAs) are normally thought of as the sources and targets of
        mail.  At the source, an MUA might collect mail to be transmitted
        from a user and hand it off to an MTA; the final ("delivery") MTA
        would be thought of as handing the mail off to an MUA (or at least
        transferring responsibility to it, e.g., by depositing the message
        in a "message store").  However, while these terms are used with at
        least the appearance of great precision in other environments, the
        implied boundaries between MUAs and MTAs often do not accurately match
        common, and conforming, practices with Internet mail.  Hence, the
        reader should be cautious about inferring the strong relationships
        and responsibilities that might be implied if these terms were used elsewhere.
          </t>
        </section><!-- 2.3.3 -->
        <section title="Host"><!-- 2.3.4 -->
          <t>
        For the purposes of this specification, a host is a computer system
        attached to the Internet (or, in some cases, to a private TCP/IP network)
        and supporting the SMTP protocol.  Hosts are known by names (see the
        next section); they SHOULD NOT be identified by numerical addresses, i.e.,
        by address literals as described in
        <xref target='command_argument_syntax'/>.</t>

		</section><!-- 2.3.4 -->
        <section anchor='domain_names' title="Domain Names">
           <t> <!--   2.3.5 -->
        A domain name (or often just a "domain") consists of one or
        more components, separated by dots if more than one appears.
        In the case of a top-level domain used by itself
        in an email address, a single string is used without any dots.
        This makes the requirement, described in more detail below,
        that only fully-qualified domain names appear in SMTP
        transactions on the public Internet, particularly important
        where top-level domains are involved.  These components ("labels" in DNS
        terminology, <xref target='RFC1035'>RFC 1035</xref>) are
        restricted for SMTP purposes 
        to consist of a sequence of letters, digits, and hyphens drawn from
        the ASCII character set <xref target='ASCII'/>.  Domain names are
        used as names of hosts and of other entities in the domain name hierarchy.
        For example, a domain may refer to an alias (label of a CNAME RR)
        or the label of Mail eXchanger records to be used to deliver mail
        instead of representing a host name.
        See <xref target='RFC1035'>RFC 1035</xref>
        and <xref target='address_resolution'/> of this specification.
      </t><t>
        The domain name, as described in this document and in
        <xref target='RFC1035'>RFC 1035</xref>,
        is the entire, fully-qualified name (often referred to as an "FQDN").
        A domain name that is not in FQDN form is no more than a local alias.
        Local aliases MUST NOT appear in any SMTP transaction.
      </t><t>
        Only resolvable, fully-qualified domain names (FQDNs) are permitted
        when domain names are used in SMTP.  In other words, names that can
        be resolved to MX RRs or address (i.e., A or AAAA) RRs (as
        discussed in <xref target='address_resolution'/>)
        are permitted, as are CNAME RRs whose targets can be resolved, in
        turn, to MX or address RRs.
        Local nicknames or unqualified names MUST NOT
        be used.  There are two exceptions to the rule requiring FQDNs:
      </t><t>
        <list style='symbols'>
          <t>The domain name given in the EHLO command MUST be either a primary
             host name (a domain name that resolves to an address RR) or, if the
         host has no name, an address literal, as described
         in <xref target='address_literals'/> and discussed further in
         the EHLO discussion
         of <xref target='order_of_commands'/>.</t> 
       <t>The reserved mailbox name "postmaster" may be used in a RCPT
             command without domain qualification (see <xref target='recipient'/>)
         and MUST be accepted if so used.
          </t>
        </list>
      </t>
        </section><!-- 2.3.5 -->
        <section title='Buffer and State Table'><!-- 2.3.6 -->
          <t>
        SMTP sessions are stateful, with both parties carefully maintaining
        a common view of the current state.  In this document, we model this
        state by a virtual "buffer" and a "state table" on the server that
        may be used by the client to, for example, "clear the buffer" or "reset
        the state table", causing the information in the buffer to be discarded
        and the state to be returned to some previous state.
          </t>
        </section><!-- 2.3.6 -->
        <section anchor='lines' title='Commands and Replies'><!-- 2.3.7 -->
          <t>SMTP commands and, unless altered by a service extension, message
        data, are transmitted from the sender to the receiver via the
		transmission channel in "lines".</t>
	 <t>An SMTP reply is an acknowledgment (positive or negative) sent
	   in "lines" from
	   receiver to sender via the transmission channel in response to a
	   command.  The general form of a reply is a numeric completion code
	   (indicating failure or success) usually followed by a text string.
	   The codes are for use by programs and the text is usually intended
	   for human users.  <xref target='RFC3463'>RFC 3463</xref>,
	   specifies further structuring of the 
	   reply strings, including the use of supplemental and more specific
	   completion codes (see also
	   <xref target="RFC5248">RFC 5248</xref>).</t>
	</section>
	<section title="Lines"> <!-- new 2.3.8 -->
	   <t>Lines consist of zero or more data 
        characters terminated by the sequence ASCII character "CR" (hex value
        0D) followed immediately by ASCII character "LF" (hex value 0A).
        This termination sequence is denoted as &lt;CRLF&gt; in this document.
        Conforming implementations MUST NOT recognize or generate any other
        character or character sequence as a line terminator.  Limits MAY
        be imposed on line lengths by servers
		(see <xref target='smtp_specifications'/>). </t>

		<t>
        In addition, the appearance of "bare" "CR" or "LF" characters in text
        (i.e., either without the other) has a long history of causing problems
        in mail implementations and applications that use the mail system
        as a tool.  SMTP client implementations MUST NOT transmit these characters
        except when they are intended as line terminators and then MUST, as
        indicated above, transmit them only as a &lt;CRLF&gt; sequence.
          </t>
        </section><!-- 2.3.7 -->

        <section title='Message Content and Mail Data'><!-- 2.3.9 -->
          <t>
        The terms "message content" and "mail data" are used interchangeably
        in this document to describe the material transmitted after the DATA
        command is accepted and before the end of data indication is transmitted.
        Message content includes the message header section and the possibly structured
        message body.  The MIME specification
     (<xref target='RFC2045'>RFC 2045</xref>) provides the standard
	 mechanisms for structured message bodies. </t>
        </section><!-- 2.3.9 -->

		<section anchor='ODRGsystems'
                  title='Originator, Delivery, Relay, and Gateway Systems'><!-- 2.3.8 -->
          <t>
        This specification makes a distinction among four types of SMTP systems,
        based on the role those systems play in transmitting electronic mail.
        An "originating" system (sometimes called an SMTP originator) introduces
        mail into the Internet or, more generally, into a transport service
        environment.  A "delivery" SMTP system is one that receives mail from
        a transport service environment and passes it to a mail user agent
        or deposits it in a message store that a mail user agent is expected
        to subsequently access.  A "relay" SMTP system (usually referred to
        just as a "relay") receives mail from an SMTP client and transmits
        it, without modification to the message data other than adding trace
        information, to another SMTP server for further relaying or for delivery.
          </t><t>
        A "gateway" SMTP system (usually referred to just as a "gateway")
        receives mail from a client system in one transport environment and
        transmits it to a server system in another transport environment.
        Differences in protocols or message semantics between the transport
        environments on either side of a gateway may require that the gateway
        system perform transformations to the message that are not permitted
        to SMTP relay systems.  For the purposes of this specification, firewalls
        that rewrite addresses should be considered as gateways, even if SMTP
        is used on both sides of them
        (see <xref target='RFC2979'>RFC 2979</xref>).</t>
        </section><!-- 2.3.8 -->

        <section title='Mailbox and Address'>
          <t>As used in this specification, an "address" is a character string
        that identifies a user to whom mail will be sent or a location into
        which mail will be deposited.  The term "mailbox" refers to that depository.
        The two terms are typically used interchangeably unless the distinction
        between the location in which mail is placed (the mailbox) and a reference
        to it (the address) is important.  An address normally consists of
        user and domain specifications.  The standard mailbox naming convention
        is defined to be "local-part@domain"; contemporary usage permits
        a much broader set of applications than simple "user names".  Consequently,
        and due to a long history of problems when intermediate hosts have
        attempted to optimize transport by modifying them, the local-part
        MUST be interpreted and assigned semantics only by the host specified
        in the domain part of the address.</t>
        </section>

      </section><!-- 2.3 -->
	  
      <section anchor='general_syntax_principles'
          title='General Syntax Principles and Transaction Model'><!-- 2.4 -->
        <t>
          SMTP commands and replies have a rigid syntax.  All commands
      begin with a command verb.  All replies begin with a three digit numeric
      code.  In some commands and replies, arguments are required
      following the verb or reply code.  Some commands do not accept
	  arguments (after the verb), 
      and some reply codes are followed, sometimes optionally, by free form
      text.  In both cases, where text appears, it is separated from the verb
      or reply code by a space character.  Complete definitions of commands
      and replies appear in <xref target='smtp_specifications'/>.
        </t><t>
          Verbs and argument values (e.g., "TO:" or "to:" in the RCPT command
      and extension name keywords) are not case sensitive, with the sole exception
      in this specification of a mailbox local-part (SMTP Extensions may explicitly
      specify case-sensitive elements).  That is, a command verb, an argument
      value other than a mailbox local-part, and free form text MAY be encoded
      in upper case, lower case, or any mixture of upper and lower case with
      no impact on its meaning.
      The local-part of a mailbox MUST BE treated as case sensitive.  Therefore,
      SMTP implementations MUST take care to preserve the case of mailbox
      local-parts.  In particular,
      for some hosts, the user "smith" is different from the user "Smith".
      However, exploiting the case sensitivity of mailbox local-parts impedes
      interoperability and is discouraged.
      Mailbox domains follow normal DNS rules and are hence not case
      sensitive.
        </t><t>
          A few SMTP servers, in violation of this specification (and
		  RFC 821) require that command verbs be encoded by clients in upper case.
      Implementations MAY wish to employ this encoding to accommodate those servers.
        </t><t>
          The argument clause consists of a variable-length character string
      ending with the end of the line, i.e., with the character sequence &lt;CRLF&gt;.
      The receiver will take no action until this sequence is received.
        </t><t>
          The syntax for each command is shown with the discussion of that
      command.  Common elements and parameters are shown in <xref target='command_argument_syntax'/>.
        </t><t>
          Commands and replies are composed of characters from the ASCII
      character set <xref target='ASCII'/>.  When the transport service provides
      an 8-bit byte (octet) transmission channel, each 7-bit character is
      transmitted, right justified, in an octet with the high-order bit cleared
      to zero.  More specifically, the unextended SMTP service provides 7-bit transport only.  An originating SMTP client that has not successfully
      negotiated an appropriate extension with a particular server
      (see the next paragraph) MUST NOT
      transmit messages with information in the high-order bit of octets.
      If such messages are transmitted in violation of this rule, receiving
      SMTP servers MAY clear the high-order bit or reject the message as invalid.
      In general, a relay SMTP SHOULD assume that the message content it has
      received is valid and, assuming that the envelope permits doing so,
      relay it without inspecting that content.  Of course, if the content
      is mislabeled and the data path cannot accept the actual content, this
      may result in the ultimate delivery of a severely garbled message to the
      recipient.  Delivery SMTP systems MAY reject such messages, or
      return them as undeliverable,
      rather than deliver them.  In the absence of a server-offered
	  extension explicitly permitting it, a sending SMTP system is not
	  permitted to send
      envelope commands in any character set other than US-ASCII. Receiving
      systems SHOULD reject such commands, normally using "500 syntax error
      - invalid character" replies.</t>
	  <t>8-bit message content transmission MAY be requested of the
      server by a client using extended SMTP facilities, notably the "8BITMIME"
      extension, <xref target='RFC1652'>RFC 1652</xref>.  8BITMIME SHOULD be
      supported by SMTP servers.  However, it MUST NOT be construed
      as authorization 
      to transmit unrestricted 8-bit material, nor does 8BITMIME
      authorize transmission of any envelope material in other than
      ASCII.  8BITMIME MUST NOT be requested
      by senders for material with the high bit on that is not in MIME format
      with an appropriate content-transfer encoding; servers MAY
      reject such messages. 
        </t><t>
          The metalinguistic notation used in this document corresponds
      to the "Augmented BNF" used in other Internet mail system documents.
      The reader who is not familiar with that syntax should consult the ABNF
      specification in <xref target='RFC5234'>RFC 5234</xref>.  Metalanguage
      terms used in running text are surrounded by pointed brackets
	  (e.g., &lt;CRLF&gt;) for clarity.
	  The reader is cautioned that the grammar expressed in
	  the metalanguage is not comprehensive.  There are many
	  instances in which provisions in the text constrain or
	  otherwise modify the syntax or semantics implied by the
	  grammar. </t>
      </section><!-- 2.4 -->
    </section><!-- 2 -->
    <section anchor='overview' title='The SMTP Procedures: An Overview'><!-- 3 -->
      <t>
        This section contains descriptions of the procedures used in SMTP:
    session initiation, mail transaction, forwarding mail, verifying mailbox
    names and expanding mailing lists, and opening and closing exchanges.
    Comments on relaying, a note on mail domains, and a discussion of changing
    roles are included at the end of this section.  Several complete scenarios
    are presented in <xref target='scenarios'/>.
      </t>
      <section anchor='session_initiation' title='Session Initiation'><!-- 3.1 -->
        <t>
          An SMTP session is initiated when a client opens a connection
      to a server and the server responds with an opening message.
        </t><t>
          SMTP server implementations MAY include identification of their
      software and version information in the connection greeting reply after
      the 220 code, a practice that permits more efficient isolation and repair
      of any problems.  Implementations MAY make provision for SMTP servers
      to disable the software and version announcement where it causes security
      concerns.  While some systems also identify their contact point for
      mail problems, this is not a substitute for maintaining the required
      "postmaster" address (see <xref target='smtp_specifications'/>).
        </t><t>
          The SMTP protocol allows a server to formally reject a mail
		  session
      while still allowing the initial connection as follows: a 554 response
      MAY be given in the initial connection opening message instead of the
      220.  A server taking this approach MUST still wait for the client to
      send a QUIT (see <xref target='QUIT'/>) before closing the connection
      and SHOULD respond to any intervening commands with "503 bad sequence
      of commands".  Since an attempt to make an SMTP connection to such a
      system is probably in error, a server returning a 554 response on connection
      opening SHOULD provide enough information in the reply text to facilitate
      debugging of the sending system.
        </t>
      </section><!-- 3.1 -->
      <section title='Client Initiation'><!-- 3.2 -->
        <t>
          Once the server has sent the greeting (welcoming) message and the client
      has received it, the client normally sends the EHLO command to the server,
      indicating the client's identity.  In addition to opening the session,
      use of EHLO indicates that the client is able to process service extensions
      and requests that the server provide a list of the extensions it supports.
      Older SMTP systems that are unable to support service
      extensions, and
      contemporary clients that do not require service extensions in the
      mail session being initiated, MAY use HELO instead of EHLO.  Servers
      MUST NOT return the extended EHLO-style response to a HELO command.
      For a particular connection attempt, if the server returns a "command
      not recognized" response to EHLO, the client SHOULD be able to fall
      back and send HELO.
        </t><t>
          In the EHLO command, the host sending the command identifies itself;
      the command may be interpreted as saying "Hello, I am &lt;domain&gt;"
      (and, in the case of EHLO, "and I support service extension requests").
        </t>
      </section><!-- 3.2 -->
      <section anchor='mail_transactions' title='Mail Transactions'><!-- 3.3 -->
        <t>
          There are three steps to SMTP mail transactions.  The transaction
      starts with a MAIL command that gives the sender identification.  (In
      general, the MAIL command may be sent only when no mail transaction
      is in progress; see <xref target='order_of_commands'/>.)  A series of
      one or more RCPT commands follows, giving the receiver information.
      Then, a DATA command initiates transfer of the mail data and is terminated
      by the "end of mail" data indicator, which also confirms the transaction.
        </t><t>
          The first step in the procedure is the MAIL command.
      </t><t>
          <list>
        <t>
              MAIL FROM:&lt;reverse-path&gt; [SP &lt;mail-parameters&gt; ] &lt;CRLF&gt;
        </t>
      </list>
        </t><t>
          This command tells the SMTP-receiver that a new mail transaction
      is starting and to reset all its state tables and buffers, including
      any recipients or mail data.  The &lt;reverse-path&gt; portion of the
      first or only argument contains the source mailbox (between "&lt;" and
      "&gt;" brackets), which can be used to report errors (see <xref target='smtp_replies'/>
      for a discussion of error reporting).  If accepted, the SMTP server
      returns a "250 OK" reply.  If the mailbox specification is not acceptable
      for some reason, the server MUST return a reply indicating whether the
      failure is permanent (i.e., will occur again if the client tries to
      send the same address again) or temporary (i.e., the address might be
      accepted if the client tries again later).  Despite the apparent scope
      of this requirement, there are circumstances in which the acceptability
      of the reverse-path may not be determined until one or more forward-paths
      (in RCPT commands) can be examined.  In those cases, the server MAY
      reasonably accept the reverse-path (with a 250 reply) and then report
      problems after the forward-paths are received and examined.  Normally,
      failures produce 550 or 553 replies.
        </t><t>
          Historically, the &lt;reverse-path&gt; was permitted to contain more than
      just a mailbox; however, contemporary systems SHOULD NOT use source
      routing (see <xref target='source_routes'/>).
        </t><t>
          The optional &lt;mail-parameters&gt; are associated with negotiated
      SMTP service extensions (see <xref target='extension_model'/>).
        </t><t>
          The second step in the procedure is the RCPT command.  This
		  step of the procedure can be repeated any number of times.</t>
	   <t>
          <list>
            <t>
          RCPT TO:&lt;forward-path&gt; [ SP &lt;rcpt-parameters&gt; ] &lt;CRLF&gt;
            </t>
          </list>
        </t><t>
          The first or only argument to this command includes a forward-path
      (normally a mailbox and domain, always surrounded by "&lt;" and "&gt;"
      brackets) identifying one recipient.  If accepted, the SMTP server returns
      a "250 OK" reply and stores the forward-path.  If the recipient is known
      not to be a deliverable address, the SMTP server returns a 550 reply,
      typically with a string such as "no such user - " and the mailbox name
      (other circumstances and reply codes are possible).
        </t><t>
          The &lt;forward-path&gt; can contain more than just a mailbox.
      Historically, the &lt;forward-path&gt; was permitted to contain
      a source routing list 
      of hosts and the destination mailbox; however, contemporary SMTP clients
      SHOULD NOT utilize source routes (see <xref target='source_routes'/>).
      Servers MUST be prepared to encounter a list of source routes in the
      forward-path, but they SHOULD ignore the routes or MAY decline to support
      the relaying they imply.  Similarly, servers MAY decline to accept mail
      that is destined for other hosts or systems.  These restrictions make
      a server useless as a relay for clients that do not support full SMTP
      functionality.  Consequently, restricted-capability clients MUST NOT
      assume that any SMTP server on the Internet can be used as their mail
      processing (relaying) site.  If a RCPT command appears without a previous
      MAIL command, the server MUST return a 503 "Bad sequence of commands"
      response.  The optional &lt;rcpt-parameters&gt; are associated with
      negotiated SMTP service extensions
	  (see <xref target='extension_model'/>).</t>
      <t>Since it has been a common source of errors, it is worth
      noting that spaces are not permitted on either side of the colon
      following FROM in the MAIL command or TO in the RCPT command. 
      The syntax is exactly as given above.</t>

      <t> The third step in the procedure is the DATA command (or some
      alternative specified in a service extension).
      </t><t>
          <list>
            <t>
          DATA &lt;CRLF&gt;
            </t>
          </list>
        </t><t>
          If accepted, the SMTP server returns a 354 Intermediate reply
      and considers all succeeding lines up to but not including the end of
      mail data indicator to be the message text.  When the end of text is
      successfully received and stored, the SMTP-receiver sends a "250 OK" reply.
        </t><t>
          Since the mail data is sent on the transmission channel, the
      end of mail data must be indicated so that the command and reply dialog
      can be resumed.  SMTP indicates the end of the mail data by sending
      a line containing only a "." (period or full stop).  A transparency
      procedure is used to prevent this from interfering with the user's text
      (see <xref target='Transparency'/>).
        </t><t>
          The end of mail data indicator also confirms the mail transaction
      and tells the SMTP server to now process the stored recipients and mail
      data.  If accepted, the SMTP server returns a "250 OK" reply.  The DATA
      command can fail at only two points in the protocol exchange:
        </t><t>
          If there was no MAIL, or no RCPT, command, or all such commands
      were rejected, the server MAY return a "command out of sequence" (503)
      or "no valid recipients" (554) reply in response to the DATA command.
      If one of those replies (or any other 5yz reply) is received, the client
      MUST NOT send the message data; more generally, message data MUST NOT
      be sent unless a 354 reply is received.
        </t><t>
          If the verb is initially accepted and the 354 reply issued, the
      DATA command should fail only if the mail transaction was incomplete
      (for example, no recipients), if resources were unavailable (including,
      of course, the server unexpectedly becoming unavailable), or if the
      server determines that the message should be rejected for policy or other reasons.
        </t><t>
          However, in practice, some servers do not perform recipient verification
      until after the message text is received.  These servers SHOULD treat
      a failure for one or more recipients as a "subsequent failure" and return
      a mail message as discussed in
    <xref target='problem_detection'/> and, in particular, in
    <xref target='reliable_delivery'/>.
      Using a "550 mailbox not found" (or equivalent) reply code after the
      data are accepted makes it difficult or impossible for the client to
      determine which recipients failed.
        </t><t>
          When the RFC 822 format (<xref target='RFC0822'/>,
          <xref target='RFC5322'/>) is being used, the mail data include
      the header fields such as those named Date, Subject, To, Cc,
	  and From.  Server SMTP 
      systems SHOULD NOT reject messages based on perceived defects in the
      RFC 822 or MIME (<xref target='RFC2045'>RFC 2045</xref>) message
      header section or message body.  In particular, they MUST NOT
	  reject messages in which 
      the numbers of Resent-header fields do not match or Resent-to appears without
      Resent-from and/or Resent-date.
        </t><t>
          Mail transaction commands MUST be used in the order discussed above.
        </t>
      </section><!-- 3.3 -->
      <section anchor='forwarding_for_address_correction'
                title='Forwarding for Address Correction or Updating'><!-- 3.4 -->
        <t>
          Forwarding support is most often required to consolidate and
      simplify addresses within, or relative to, some enterprise and less
      frequently to establish addresses to link a person's prior address with
      a current one.  Silent forwarding of messages (without server notification
      to the sender), for security or non-disclosure purposes, is common in
      the contemporary Internet.
        </t><t>
          In both the enterprise and the "new address" cases, information
      hiding (and sometimes security) considerations argue against exposure
      of the "final" address through the SMTP protocol as a side effect of
      the forwarding activity.  This may be especially important when the
      final address may not even be reachable by the sender.  Consequently,
      the "forwarding" mechanisms described in Section 3.2 of RFC 821, and
      especially the 251 (corrected destination) and 551 reply codes from
      RCPT must be evaluated carefully by implementers and, when they are
      available, by those configuring systems
	  (see also <xref target="Reroute_251_551"/>).</t>
   <t> In particular:
      </t><t>
      <list style='symbols'>
        <t>Servers MAY forward messages when they are aware of an address
           change.  When they do so, they MAY either provide address-updating
           information with a 251 code, or may forward "silently" and return
           a 250 code.  However, if a 251 code is used, they MUST NOT assume that
           the client will actually update address information or even return
           that information to the user.
        </t>
      </list>
      </t><t>
      Alternately,
      </t><t>
      <list style='symbols'>
        <t>Servers MAY reject messages or return them as
           non-deliverable when they cannot be delivered precisely as
           addressed.  When they do so, they MAY either provide address-updating 
           information with a 551 code, or may reject the message as undeliverable
           with a 550 code and no address-specific information.
           However, if a
           551 code is used, they MUST NOT assume that the client will actually
           update address information or even return that information to the user.
        </t>
      </list>
        </t><t>
          SMTP server implementations that support the 251 and/or 551 reply
      codes SHOULD provide configuration mechanisms so
      that sites that conclude that they would undesirably disclose information
      can disable or restrict their use.</t>
      </section><!-- 3.4 -->
      <section anchor='commands_for_debugging_addresses'
                title='Commands for Debugging Addresses'><!-- 3.5 -->
        <section title='Overview'><!-- 3.5.1 -->
          <t>
        SMTP provides commands to verify a user name or obtain the content
        of a mailing list.  This is done with the VRFY and EXPN commands,
        which have character string arguments.  Implementations SHOULD support
        VRFY and EXPN (however, see <xref target='vrfy_normal_response'/>
        and <xref target='vrfy_expn_security'/>). 
      </t><t>
        For the VRFY command, the string is a user name or a user name and
        domain (see below).  If a normal (i.e., 250) response is returned,
        the response MAY include the full name of the user and MUST include
        the mailbox of the user.  It MUST be in either of the following forms:
      </t><t>
        <list>
          <t>
        User Name &lt;local-part@domain&gt;<vspace/>
        local-part@domain
          </t>
        </list>
      </t><t>
        When a name that is the argument to VRFY could identify more than
        one mailbox, the server MAY either note the ambiguity or identify
        the alternatives.  In other words, any of the following are legitimate
        responses to VRFY:
      </t><t>
        <list>
          <t>
        553 User ambiguous
          </t>
        </list>
        or
        <list>
          <t>
        553- Ambiguous;  Possibilities are<vspace/>
        553-Joe Smith &lt;jsmith@foo.com&gt;<vspace/>
        553-Harry Smith &lt;hsmith@foo.com&gt;<vspace/>
        553 Melvin Smith &lt;dweep@foo.com&gt;
          </t>
        </list>
        or
        <list>
          <t>
        553-Ambiguous;  Possibilities<vspace/>
        553- &lt;jsmith@foo.com&gt;<vspace/>
        553- &lt;hsmith@foo.com&gt;<vspace/>
        553 &lt;dweep@foo.com&gt;
          </t>
        </list>
      </t><t>
        Under normal circumstances, a client receiving a 553 reply would be
        expected to expose the result to the user.  Use of exactly the forms
        given, and the "user ambiguous" or "ambiguous" keywords, possibly
        supplemented by extended reply codes, such as those described
		in <xref target='RFC3463'>RFC 3463</xref>, will facilitate
		automated translation 
        into other languages as needed.  Of course, a client that was highly
        automated or that was operating in another language than English
        might choose to try to translate the response to return some other
        indication to the user than the literal text of the reply, or to take
        some automated action such as consulting a directory service for additional
        information before reporting to the user.
      </t><t>
        For the EXPN command, the string identifies a mailing list, and the
        successful (i.e., 250) multiline response MAY include the full name
        of the users and MUST give the mailboxes on the mailing list.
      </t><t>
        In some hosts, the distinction between a mailing list and an alias
        for a single mailbox is a bit fuzzy, since a common data structure
        may hold both types of entries, and it is possible to have mailing
        lists containing only one mailbox.  If a request is made to apply
        VRFY to a mailing list, a positive response MAY be given if a message
        so addressed would be delivered to everyone on the list, otherwise
        an error SHOULD be reported (e.g., "550 That is a mailing list, not
        a user" or "252 Unable to verify members of mailing list").  If a
        request is made to expand a user name, the server MAY return a positive
        response consisting of a list containing one name, or an error MAY
        be reported (e.g., "550 That is a user name, not a mailing list").
      </t><t>
        In the case of a successful multiline reply (normal for EXPN), exactly
        one mailbox is to be specified on each line of the reply.  The case
        of an ambiguous request is discussed above.
      </t><t>
        "User name" is a fuzzy term and has been used deliberately.  An implementation
        of the VRFY or EXPN commands MUST include at least recognition of
        local mailboxes as "user names".  However, since current Internet
        practice often results in a single host handling mail for multiple
        domains, hosts, especially hosts that provide this functionality,
        SHOULD accept the "local-part@domain" form as a "user name"; hosts
        MAY also choose to recognize other strings as "user names".
      </t><t>
        The case of expanding a mailbox list requires a multiline reply, such as:
      </t><t>
        <list style="empty">
          <t>
        C: EXPN Example-People<vspace/>
        S: 250-Jon Postel &lt;Postel@isi.edu&gt;<vspace/>
        S: 250-Fred Fonebone &lt;Fonebone@physics.foo-u.edu&gt;<vspace/>
        S: 250 Sam Q. Smith &lt;SQSmith@specific.generic.com&gt;
          </t>
        </list>
        or
        <list style="empty">
          <t>
        C: EXPN Executive-Washroom-List<vspace/>
        S: 550 Access Denied to You.
          </t>
        </list>
      </t><t>
        The character string arguments of the VRFY and EXPN commands cannot
        be further restricted due to the variety of implementations of the
        user name and mailbox list concepts.  On some systems, it may be appropriate
        for the argument of the EXPN command to be a file name for a file
        containing a mailing list, but again there are a variety of file naming
        conventions in the Internet.  Similarly, historical variations in
        what is returned by these commands are such that the response SHOULD
        be interpreted very carefully, if at all, and SHOULD generally only
        be used for diagnostic purposes.
      </t>
    </section><!-- 3.5.1 -->
    <section anchor='vrfy_normal_response' title='VRFY Normal Response'><!-- 3.5.2 -->
      <t>
        When normal (2yz or 551) responses are returned from a VRFY or EXPN
        request, the reply MUST include the &lt;Mailbox&gt; name using a
        "&lt;local-part@domain&gt;" construction,
        where "domain" is a fully-qualified domain name.
		In circumstances exceptional enough to justify violating
        the intent of this specification, free-form text MAY be returned.
        In order to facilitate parsing by both computers and people, addresses
        SHOULD appear in pointed brackets.  When addresses, rather than free-form
        debugging information, are returned, EXPN and VRFY MUST return only
        valid domain addresses that are usable in SMTP RCPT commands.  Consequently,
        if an address implies delivery to a program or other system, the mailbox
        name used to reach that target MUST be given.  Paths (explicit source
        routes) MUST NOT be returned by VRFY or EXPN.
      </t><t>
        Server implementations SHOULD support both VRFY and EXPN.  For security
        reasons, implementations MAY provide local installations a way to
        disable either or both of these commands through configuration options
        or the equivalent (see <xref target='vrfy_expn_security'/>).
		When these commands are supported, they are not 
        required to work across relays when relaying is supported.  Since
        they were both optional in RFC 821, but VRFY was made mandatory in
        <xref target='RFC1123'>RFC 1123</xref>, if EXPN is supported,
		it MUST be listed as a service
        extension in an EHLO response.  VRFY MAY
        be listed as a convenience but, since support for it is required,
        SMTP clients are not required to check for its presence on the extension
        list before using it.</t>
    </section><!-- 3.5.2 -->
    <section anchor='meaning_vrfy_expn_success'
              title='Meaning of VRFY or EXPN Success Response'><!-- 3.5.3 -->
      <t>
        A server MUST NOT return a 250 code in response to a VRFY or EXPN
        command unless it has actually verified the address.  In particular,
        a server MUST NOT return 250 if all it has done is to verify that
        the syntax given is valid.  In that case, 502 (Command not implemented)
        or 500 (Syntax error, command unrecognized) SHOULD be returned.  As
        stated elsewhere, implementation (in the sense of actually validating
        addresses and returning information) of VRFY and EXPN are strongly
        recommended.  Hence, implementations that return 500 or 502 for VRFY
        are not in full compliance with this specification.
      </t><t>
        There may be circumstances where an address appears to be valid but
        cannot reasonably be verified in real time, particularly when a server
        is acting as a mail exchanger for another server or domain.  "Apparent
        validity", in this case, would normally involve at least syntax checking
        and might involve verification that any domains specified were ones
        to which the host expected to be able to relay mail.  In these situations,
        reply code 252 SHOULD be returned.  These cases parallel the discussion
        of RCPT verification in <xref target='basic_structure'/>.
        Similarly, the discussion
        in <xref target='forwarding_for_address_correction'/> applies to the use of
        reply codes 251 and 551 with VRFY (and EXPN) to indicate addresses
        that are recognized but that would be forwarded or rejected were mail
        received for them.  Implementations generally SHOULD be more aggressive
        about address verification in the case of VRFY than in the case of
        RCPT, even if it takes a little longer to do so.
      </t>
    </section><!-- 3.5.3 -->
    <section title='Semantics and Applications of EXPN'><!-- 3.5.4 -->
      <t>
        EXPN is often very useful in debugging and understanding problems
        with mailing lists and multiple-target-address aliases.  Some systems
        have attempted to use source expansion of mailing lists as a means
        of eliminating duplicates.  The propagation of aliasing systems with
        mail on the Internet for hosts (typically with MX and CNAME DNS records),
        for mailboxes (various types of local host aliases), and in various
        proxying arrangements has made it nearly impossible for these strategies
        to work consistently, and mail systems SHOULD NOT attempt them.
      </t>
    </section><!-- 3.5.4 -->
      </section><!-- 3.5 -->

<section anchor='relaying' title='Relaying and Mail Routing'><!-- 3.6
   -->
   <section title="Source Routes and Relaying"> 
    <t>
      In general, the availability of Mail eXchanger records in the domain
      name system (<xref target='RFC1035'>RFC 1035</xref>,
      <xref target='RFC0974'>RFC 974</xref>)
      makes the use of explicit source routes in the Internet mail system
      unnecessary.  Many historical problems with the interpretation
      of explicit source routes have
      made their use undesirable.  SMTP clients SHOULD NOT generate explicit
      source routes except under unusual circumstances.  SMTP servers MAY
      decline to act as mail relays or to accept addresses that specify source
      routes.  When route information is encountered, SMTP servers
      MAY ignore the route information and simply send to the final 
      destination specified as the last element in the route and SHOULD do
      so.  There has been an invalid practice of using names that do not appear
      in the DNS as destination names, with the senders counting on the intermediate
      hosts specified in source routing to resolve any problems.  If source
      routes are stripped, this practice will cause failures.  This is one
      of several reasons why SMTP clients MUST NOT generate invalid source
      routes or depend on serial resolution of names.
    </t><t>
      When source routes are not used, the process described in RFC 821 for
      constructing a reverse-path from the forward-path is not applicable
      and the reverse-path at the time of delivery will simply be the address
      that appeared in the MAIL command.</t>
   </section>
   <section title="Mail eXchange Records and Relaying">
	  <t>A relay SMTP server is usually the target of a DNS MX record that designates
      it, rather than the final delivery system.  The relay server may accept
      or reject the task of relaying the mail in the same way it accepts or
      rejects mail for a local user.  If it accepts the task, it then becomes
      an SMTP client, establishes a transmission channel to the next SMTP
      server specified in the DNS (according to the rules in <xref target='address_resolution'/>),
      and sends it the mail.  If it declines to relay mail to a particular
      address for policy reasons, a 550 response SHOULD be
	  returned.</t>
   <t>This specification does not deal with the verification of return
      paths for use in delivery notifications. Recent work, such as
	  that on <xref target="RFC4408">SPF</xref> and
	  <xref target="RFC4686">DKIM</xref>
	  <xref target="RFC4871"/>,
	  has been done to provide ways to
      ascertain that an address is valid or belongs to the person who
      actually sent the message. A server MAY attempt to verify the return
      path before using its address for delivery notifications, but
      methods of doing so are not defined here nor is any particular
      method recommended at this time.</t>
   </section>
   <section title="Message Submission Servers as Relays">
	  <t>Many mail-sending clients exist, especially in conjunction
		 with facilities 
      that receive mail via POP3 or IMAP, that have limited capability to
      support some of the requirements of this specification, such as the
      ability to queue messages for subsequent delivery attempts.  For these
      clients, it is common practice to make private arrangements to send
      all messages to a single server for processing and subsequent distribution.
      SMTP, as specified here, is not ideally suited for this role.  A standardized
      mail submission protocol has been developed that is gradually
      superseding practices based on SMTP
      (see <xref target='RFC4409'>RFC 4409</xref>).
      In any event, because these arrangements are private and fall outside
      the scope of this specification, they are not described here.
    </t><t>
      It is important to note that MX records can point to SMTP servers that
      act as gateways into other environments, not just SMTP relays and final
      delivery systems; see Sections <xref target='mail_gatewaying' format="counter"/> and <xref target='address_resolution' format="counter"/>.
    </t><t>
      If an SMTP server has accepted the task of relaying the mail and later
      finds that the destination is incorrect or that the mail cannot be delivered
      for some other reason, then it MUST construct an "undeliverable mail"
      notification message and send it to the originator of the undeliverable
      mail (as indicated by the reverse-path).  Formats specified for non-delivery
      reports by other standards (see, for example,
	  <xref target='RFC3461'>RFC 3461</xref>
      and <xref target='RFC3464'>RFC 3464</xref>) SHOULD be used if possible.
    </t><t>
      This notification message must be from the SMTP server at the relay
      host or the host that first determines that delivery cannot be accomplished.
      Of course, SMTP servers MUST NOT send notification messages about problems
      transporting notification messages.  One way to prevent loops in error
      reporting is to specify a null reverse-path in the MAIL command of a
      notification message.  When such a message is transmitted, the reverse-path
      MUST be set to null (see <xref target='messages_null_reverse_path'/>
      for additional discussion).  A MAIL command with a null reverse-path
      appears as follows:
      </t><t>
      <list style='empty'>
        <t>
          MAIL FROM:&lt;&gt;
        </t>
      </list>
    </t><t>
      As discussed in <xref target='compensating_for_irregularities'/>, a
      relay SMTP has no need to inspect or act upon the header section
      or body of
      the message data and MUST NOT do so except to add its own "Received:"
      header field (<xref target='trace_information'/>) and, optionally, to attempt
      to detect looping in the mail system (see <xref target='loop_detection'/>).
      Of course, this prohibition also applies to any modifications of these
      header fields or text
	  (see also <xref target='scope_of_operation'/>).</t> 
	</section>
      </section><!-- 3.6 -->
      <section anchor='mail_gatewaying' title='Mail Gatewaying'><!-- 3.7 -->
    <t>
      While the relay function discussed above operates within the Internet
      SMTP transport service environment, MX records or various forms of explicit
      routing may require that an intermediate SMTP server perform a translation
      function between one transport service and another.  As discussed in
      <xref target='ODRGsystems'/>, when such a system is at the boundary
      between two transport service environments, we refer to it as a "gateway"
      or "gateway SMTP".
    </t><t>
      Gatewaying mail between different mail environments, such as different
      mail formats and protocols, is complex and does not easily yield to
      standardization.  However, some general requirements may be given for
      a gateway between the Internet and another mail environment.
    </t>
    <section title='Header Fields in Gatewaying'><!-- 3.7.1 -->
      <t>
        Header fields MAY be rewritten when necessary as messages are gatewayed
        across mail environment boundaries.  This may involve inspecting the
        message body or interpreting the local-part of the destination address
        in spite of the prohibitions in <xref target='compensating_for_irregularities'/>.
      </t><t>
        Other mail systems gatewayed to the Internet often use a subset of
        the RFC 822 header section or
        provide similar functionality with a different 
        syntax, but some of these mail systems do not have an equivalent to
        the SMTP envelope.  Therefore, when a message leaves the Internet
        environment, it may be necessary to fold the SMTP envelope information
        into the message header section.
        A possible solution would be to create new
        header fields to carry the envelope information (e.g., "X-SMTP-MAIL:"
        and "X-SMTP-RCPT:"); however, this would require changes in mail programs
        in foreign environments and might risk disclosure of private information
        (see <xref target='blind_copies'/>).
      </t>
    </section><!-- 3.7.1 -->
    <section title='Received Lines in Gatewaying'><!-- 3.7.2 -->
      <t>
        When forwarding a message into or out of the Internet environment,
        a gateway MUST prepend a Received: line, but it MUST NOT alter in
        any way a Received: line that is already in the header
        section.</t>
	 <t>"Received:" header fields of messages originating from other environments
        may not conform exactly to this specification.  However, the most
        important use of Received: lines is for debugging mail faults, and
        this debugging can be severely hampered by well-meaning gateways that
        try to "fix" a Received: line.  As another consequence of
		trace header fields
        arising in non-SMTP environments, receiving systems MUST NOT reject
        mail based on the format of a trace header field and SHOULD be extremely
        robust in the light of unexpected information or formats in
		those header fields.
      </t><t>
        The gateway SHOULD indicate the environment and protocol in the "via"
        clauses of Received header field(s) that it supplies.
      </t>
    </section><!-- 3.7.2 -->
    <section title='Addresses in Gatewaying'><!-- 3.7.3 -->
      <t>
        From the Internet side, the gateway SHOULD accept all valid address
        formats in SMTP commands and in the RFC 822 header section,
        and all valid RFC 822
        messages.  Addresses and header fields generated by gateways MUST conform 
        to applicable standards (including this one
		and <xref target="RFC5322">RFC 5322</xref>).
        Gateways are, of course, subject to the same rules for handling source
        routes as those described for other SMTP systems
        in <xref target='mail_transactions'/>.
      </t>
    </section><!-- 3.7.3 -->
    <section title='Other Header Fields in Gatewaying'><!-- 3.7.4 -->
      <t>
        The gateway MUST ensure that all header fields of a message that it
        forwards into the Internet mail environment meet the requirements
        for Internet mail.  In particular, all addresses in "From:", "To:",
        "Cc:", etc., header fields MUST be transformed (if necessary)
		to satisfy the standard header syntax
        of <xref target='RFC5322'> RFC 5322 </xref>,
        MUST reference only fully-qualified domain names,
        and MUST be effective and useful for sending replies.  The translation
        algorithm used to convert mail from the Internet protocols to another
        environment's protocol SHOULD ensure that error messages from the
        foreign mail environment are delivered to the reverse-path from the
        SMTP envelope, not to an address in the "From:", "Sender:", or
		similar header fields of the message.</t>
    </section><!-- 3.7.4 -->
    <section title='Envelopes in Gatewaying'><!-- 3.7.5 -->
      <t>
        Similarly, when forwarding a message from another environment into
        the Internet, the gateway SHOULD set the envelope return path in accordance
        with an error message return address, if supplied by the foreign environment.
        If the foreign environment has no equivalent concept, the gateway
        must select and use a best approximation, with the message originator's
        address as the default of last resort.
      </t>
    </section><!-- 3.7.5 -->
      </section><!-- 3.7 -->
      <section title='Terminating Sessions and Connections'><!-- 3.8 -->
    <t>
      An SMTP connection is terminated when the client sends a QUIT command.
      The server responds with a positive reply code, after which it closes
      the connection.
    </t><t>
      An SMTP server MUST NOT intentionally close the connection under normal
      operational circumstances (see <xref target='resistance_to_attacks'/>) except:
      </t><t>
      <list style='symbols'>
        <t>After receiving a QUIT command and responding with a 221 reply.
        </t><t>After detecting the need to shut down the SMTP service and
           returning a 421 response code.  This response code can be issued
           after the server receives any command or, if necessary, asynchronously
           from command receipt (on the assumption that the client will receive
           it after the next command is issued).
        </t><t>After a timeout, as specified in <xref target='timeouts'/>,
           occurs waiting for the client to send a command
           or data.
        </t>
      </list>
    </t><t>
      In particular, a server that closes connections in response to commands
      that are not understood is in violation of this specification.
      Servers are expected to be tolerant of unknown commands, issuing a 500
      reply and awaiting further instructions from the client.
    </t><t>
      An SMTP server that is forcibly shut down via external means SHOULD
      attempt to send a line containing a 421 response code to the SMTP client
      before exiting.  The SMTP client will normally read the 421 response
      code after sending its next command.
    </t><t>
      SMTP clients that experience a connection close, reset, or other communications
      failure due to circumstances not under their control (in violation of
      the intent of this specification but sometimes unavoidable) SHOULD,
      to maintain the robustness of the mail system, treat the mail transaction
      as if a 451 response had been received and act accordingly.
    </t>
      </section><!-- 3.8 -->
      <section title='Mailing Lists and Aliases'><!-- 3.9 -->
        <t>
      An SMTP-capable host SHOULD support both the alias and the list models
      of address expansion for multiple delivery.  When a message is delivered
      or forwarded to each address of an expanded list form, the return address
      in the envelope ("MAIL FROM:") MUST be changed to be the address of
      a person or other entity who administers the list.  However, in this
      case, the message header section
      (<xref target='RFC5322'>RFC 5322</xref>) MUST 
      be left unchanged; in particular, the "From" field of the header
      section is unaffected.
        </t><t>
      An important mail facility is a mechanism for multi-destination delivery
      of a single message, by transforming (or "expanding" or "exploding")
      a pseudo-mailbox address into a list of destination mailbox addresses.
      When a message is sent to such a pseudo-mailbox (sometimes called an
      "exploder"), copies are forwarded or redistributed to each mailbox in
      the expanded list.  Servers SHOULD simply utilize the addresses on the
      list; application of heuristics or other matching rules to eliminate
      some addresses, such as that of the originator, is strongly discouraged.
      We classify such a pseudo-mailbox as an "alias" or a "list", depending
      upon the expansion rules.
        </t>
    <section title='Alias' anchor="aliases"><!-- 3.9.1 -->
      <t>
        To expand an alias, the recipient mailer simply replaces the pseudo-
        mailbox address in the envelope with each of the expanded addresses
        in turn; the rest of the envelope and the message body are left unchanged.
        The message is then delivered or forwarded to each expanded address.
      </t>
    </section><!-- 3.9.1 -->
    <section title='List'><!-- 3.9.2 -->
      <t>
        A mailing list may be said to operate by "redistribution" rather than
        by "forwarding".  To expand a list, the recipient mailer replaces
        the pseudo-mailbox address in the envelope with each of the
        expanded addresses in turn.  The return (backward-pointing)
        address in the envelope is changed so that 
        all error messages generated by the final deliveries will be returned
        to a list administrator, not to the message originator, who generally
        has no control over the contents of the list and will typically find
        error messages annoying.  Note that the key difference between
        handling aliases (<xref target="aliases"/>) and forwarding
        (this subsection) is the change to the backward-pointing
        address in this case.
		When a list constrains its processing to the very limited set of
		modifications and actions described here, it is attempting to emulate
		an MTA; such lists can be treated as a continuation in email
		transit.</t>
	 <t>There exist mailing lists that perform additional, sometimes
		extensive, modifications to a message and its envelope. Such mailing
		lists need to be viewed as full MUAs, which accept a delivery and
		post a new message.</t>
    </section><!-- 3.9.2 -->
      </section><!-- 3.9 -->
    </section><!-- 3 -->
      <section anchor='smtp_specifications'
                title='The SMTP Specifications'><!-- 4 -->
    <section title='SMTP Commands'><!-- 4.1 -->
      <section anchor='command_semantics_and_syntax'
                title='Command Semantics and Syntax'><!-- 4.1.1 -->
        <t>
          The SMTP commands define the mail transfer or the mail system function
          requested by the user.  SMTP commands are character strings terminated
          by &lt;CRLF&gt;.  The commands themselves are alphabetic characters
          terminated by &lt;SP&gt; if parameters follow and &lt;CRLF&gt; otherwise.
          (In the interest of improved interoperability, SMTP receivers SHOULD tolerate trailing white space before the terminating
          &lt;CRLF&gt;.)  The syntax of the local part of a mailbox MUST conform
          to receiver site conventions and the syntax specified
          in <xref target='command_argument_syntax'/>.
          The SMTP commands are discussed below.  The SMTP replies are discussed
          in <xref target='smtp_replies'/>.
        </t><t>
          A mail transaction involves several data objects that are communicated
          as arguments to different commands.  The reverse-path is the argument
          of the MAIL command, the forward-path is the argument of the RCPT
          command, and the mail data is the argument of the DATA command.
          These arguments or data objects must be transmitted and held, pending
          the confirmation communicated by the end of mail data indication
          that finalizes the transaction.  The model for this is that distinct
          buffers are provided to hold the types of data objects; that is,
          there is a reverse-path buffer, a forward-path buffer, and a mail
          data buffer.  Specific commands cause information to be appended
          to a specific buffer, or cause one or more buffers to be cleared.
        </t><t>
          Several commands (RSET, DATA, QUIT) are specified as not permitting
          parameters.  In the absence of specific extensions offered by the
          server and accepted by the client, clients MUST NOT send such parameters
          and servers SHOULD reject commands containing them as having invalid syntax.
        </t>
        <section anchor='extended_hello'
                  title='Extended HELLO (EHLO) or HELLO (HELO)'><!-- 4.1.1.1 -->
          <t>
        These commands are used to identify the SMTP client to the SMTP server.
        The argument clause contains the fully-qualified domain name of the SMTP
        client, if one is available.  In situations in which the SMTP client system
        does not have a meaningful domain name (e.g., when its address is dynamically
        allocated and no reverse mapping record is available), the client SHOULD
        send an address literal
        (see <xref target='address_literals'/>). </t>
	 <t>RFC 2821, and some earlier informal practices, encouraged
		following the literal by information that would help to identify the
        client system.  That convention was not widely supported, and
		many SMTP servers considered it an error.  In the interest of
		interoperability, it is probably wise for servers to be
		prepared for this string to occur, but SMTP clients SHOULD NOT
		send it.</t>
	<t>The SMTP server identifies itself to the SMTP client in
        the connection greeting reply and in the response to this
        command.</t>
        <t>
        A client SMTP SHOULD start an SMTP session by issuing the EHLO command.
        If the SMTP server supports the SMTP service extensions, it will give
        a successful response, a failure response, or an error response.  If
        the SMTP server, in violation of this specification, does not support
        any SMTP service extensions, it will generate an error response.  Older
        client SMTP systems MAY, as discussed above, use HELO (as specified in
        RFC 821) instead of EHLO, and servers MUST support the HELO command and
        reply properly to it.  In any event, a client MUST issue HELO or EHLO
        before starting a mail transaction.
          </t><t>
        These commands, and a "250 OK" reply to one of them, confirm that both
        the SMTP client and the SMTP server are in the initial state, that is,
        there is no transaction in progress and all state tables and buffers
        are cleared.
          </t><t>
        Syntax:

        <list style='hanging' hangIndent='15'>
          <t hangText='ehlo'>
              = "EHLO" SP ( Domain / address-literal ) CRLF</t>
          <t hangText='helo'>
              = "HELO" SP Domain CRLF</t>
		   </list></t>
          
        <t>Normally, the response to EHLO will be a multiline reply.  Each line
        of the response contains a keyword and, optionally, one or more parameters.
        Following the normal syntax for multiline replies, these keywords follow
        the code (250) and a hyphen for all but the last line, and the code and
        a space for the last line.  The syntax for a positive response, using
        the ABNF notation and terminal symbols of
		<xref target='RFC5234'>RFC 5234</xref>, is:
          </t><t>
        <list style='hanging' hangIndent='17'>
          <t hangText='ehlo-ok-rsp    ='>
               ( "250" SP Domain [ SP ehlo-greet ] CRLF )<vspace/>
               / ( "250-" Domain [ SP ehlo-greet ] CRLF<vspace/>
               *( "250-" ehlo-line CRLF )<vspace/>
                  "250" SP ehlo-line CRLF  )
          </t><t hangText='ehlo-greet     ='>
             1*(%d0-9 / %d11-12 / %d14-127)<vspace/>
               ; string of any characters other than CR or LF
          </t><t hangText='ehlo-line      ='>
              ehlo-keyword *( SP ehlo-param )
          </t><t hangText='ehlo-keyword   ='>
             (ALPHA / DIGIT) *(ALPHA / DIGIT / "-")<vspace/>
               ; additional syntax of ehlo-params depends on<vspace/>
               ; ehlo-keyword
          </t><t hangText='ehlo-param     ='>
             1*(%d33-126)<vspace/>
               ; any CHAR excluding &lt;SP&gt; and all<vspace/>
               ; control characters (US-ASCII 0-31 and 127<vspace/>
			   ; inclusive)
          </t>
        </list>
          </t><t>
        Although EHLO keywords may be specified in upper, lower, or mixed case,
        they MUST always be recognized and processed in a case-insensitive manner.
        This is simply an extension of practices specified in RFC 821
        and <xref target='general_syntax_principles'/>.</t>
        <t>The EHLO response MUST contain keywords (and associated parameters if
            required) for all commands not listed as "required"
            in <xref target='minimum_implementation'/>
            excepting only private-use commands as described
            in <xref target='private_use_commands'/>.
            Private-use commands MAY be listed.
          </t>
        </section>
        <section title='MAIL (MAIL)'><!-- 4.1.1.2 -->
          <t>
        This command is used to initiate a mail transaction in which the mail
        data is delivered to an SMTP server that may, in turn, deliver it to
        one or more mailboxes or pass it on to another system (possibly using
        SMTP).  The argument clause contains a reverse-path and may contain optional
        parameters.  In general, the MAIL command may be sent only when no mail
        transaction is in progress, see <xref target='order_of_commands'/>.
          </t><t>
        The reverse-path consists of the sender mailbox.  Historically, that
        mailbox might optionally have been preceded by a list of hosts, but that
        behavior is now deprecated (see <xref target='source_routes'/>).  In
        some types of reporting messages for which a reply is likely to cause
        a mail loop (for example, mail delivery and non-delivery notifications),
        the reverse-path may be null (see <xref target='relaying'/>).
          </t><t>
        This command clears the reverse-path buffer, the forward-path buffer,
        and the mail data buffer, and it inserts the reverse-path information from
        its argument clause into the reverse-path buffer.
          </t><t>
        If service extensions were negotiated, the MAIL command may also carry
        parameters associated with a particular service extension.
          </t>
		  <t>Syntax:
			 <list style="hanging" hangIndent="15">
          <t hangText='  mail = "MAIL FROM:" Reverse-path'>
		  <vspace/>
             [SP Mail-parameters] CRLF</t>
          </list>
          </t>
        </section>
        <section anchor='recipient' title='RECIPIENT (RCPT)'>
          <t>
        This command is used to identify an individual recipient of the mail
        data; multiple recipients are specified by multiple uses of this command.
        The argument clause contains a forward-path and may contain
		optional parameters. </t>
	 <t>The forward-path normally consists of the required destination mailbox.
        Sending systems SHOULD NOT generate the optional list of hosts known
        as a source route.  Receiving systems MUST recognize source route syntax
        but SHOULD strip off the source route specification and utilize the domain
        name associated with the mailbox as if the source route had not been provided.
          </t><t>
        Similarly, relay hosts SHOULD strip or ignore source routes, and names
        MUST NOT be copied into the reverse-path.  When mail reaches its ultimate
        destination (the forward-path contains only a destination mailbox), the
        SMTP server inserts it into the destination mailbox in accordance with
        its host mail conventions.</t>
	 <t>This command appends its forward-path argument to the
		forward-path buffer; it does not change the reverse-path
		buffer nor the mail data buffer.</t>
	 <t>For example, mail received at relay host xyz.com with envelope commands
          </t><t>
            <list><t>
          MAIL FROM:&lt;userx@y.foo.org&gt;<vspace/>
          RCPT TO:&lt;@hosta.int,@jkl.org:userc@d.bar.org&gt;
            </t></list>
          </t><t>
        will normally be sent directly on to host d.bar.org with envelope commands
          </t><t>
            <list><t>
          MAIL FROM:&lt;userx@y.foo.org&gt;<vspace/>
          RCPT TO:&lt;userc@d.bar.org&gt;
        </t></list>
          </t><t>
        As provided in <xref target='source_routes'/>, xyz.com MAY also choose
        to relay the message to hosta.int, using the envelope
        commands</t>
     <t>
            <list><t>
          MAIL FROM:&lt;userx@y.foo.org&gt;<vspace/>
          RCPT TO:&lt;@hosta.int,@jkl.org:userc@d.bar.org&gt;
        </t></list>
          </t><t>
        or to jkl.org, using the envelope commands
          </t><t>
            <list><t>
          MAIL FROM:&lt;userx@y.foo.org&gt;<vspace/>
          RCPT TO:&lt;@jkl.org:userc@d.bar.org&gt;
        </t></list>
          </t><t>
        Attempting to use relaying this way is now strongly
        discouraged. 
        Since hosts are not required to relay mail at all, xyz.com
        MAY also reject the message entirely when the RCPT command is received,
        using a 550 code (since this is a "policy reason").
          </t><t>
        If service extensions were negotiated, the RCPT command may also carry
        parameters associated with a particular service extension offered by
        the server.  The client MUST NOT transmit parameters other than those
        associated with a service extension offered by the server in
		its EHLO response. </t>
	 <t>Syntax:
		<list style="hanging" hangIndent="15">
       <t
		hangText='   rcpt = "RCPT TO:" ( "&lt;Postmaster@" Domain "&gt;" / "&lt;Postmaster&gt;" /'>
		  <vspace/>
			  Forward-path ) [SP Rcpt-parameters] CRLF
          <vspace blankLines="1"/>
                 Note that, in a departure from the usual rules for
                 local-parts, the "Postmaster" string shown above is treated as
                 case-insensitive.</t>
           </list>
          </t>
        </section>
        <section anchor='DATA' title='DATA (DATA)'><!-- 4.1.1.4 -->
          <t>The receiver normally sends a 354 response to DATA, and then treats the
                lines (strings ending in &lt;CRLF&gt; sequences, as described
                in <xref target='lines'/>) following the command as mail data from the sender.
                This command causes the mail data to be appended to the mail data buffer.
                The mail data may contain any of the 128 ASCII character codes, although
                experience has indicated that use of control characters other than SP,
                HT, CR, and LF may cause problems and SHOULD be
                avoided when possible.</t>
          <t>The mail data are terminated by a line containing only a period, that
                is, the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;", where the first
                &lt;CRLF&gt; is actually the terminator of the previous line
                (see <xref target='Transparency'/>).  This is the end of mail data indication.
                The first &lt;CRLF&gt; of this terminating sequence is also the &lt;CRLF&gt;
                that ends the final line of the data (message text) or, if there was
                no mail data, ends the DATA command itself (the "no mail data" case does
                not conform to this specification since it would require that neither
                the trace header fields required by this specification nor
                the message header section
                required by <xref target='RFC5322'>RFC 5322</xref>
                be transmitted).  An extra &lt;CRLF&gt;
                MUST NOT be added, as that would cause an empty line to be added to the
                message.  The only exception to this rule would arise if the message
                body were passed to the originating SMTP-sender with a final "line" that
                did not end in &lt;CRLF&gt;; in that case, the originating SMTP system
                MUST either reject the message as invalid or add &lt;CRLF&gt; in order
                to have the receiving SMTP server recognize the "end
                of data" condition. </t>
             <t>The custom of accepting lines ending only in &lt;LF&gt;, as a concession
                to non-conforming behavior on the part of some UNIX systems, has proven
                to cause more interoperability problems than it solves, and SMTP server
                systems MUST NOT do this, even in the name of improved robustness.  In
                particular, the sequence "&lt;LF&gt;.&lt;LF&gt;" (bare line feeds, without
                carriage returns) MUST NOT be treated as equivalent to &lt;CRLF&gt;.&lt;CRLF&gt;
                as the end of mail data indication.</t>
             <t>Receipt of the end of mail data indication requires the server to process
                the stored mail transaction information.  This processing consumes the
                information in the reverse-path buffer, the forward-path buffer, and
                the mail data buffer, and on the completion of this command these buffers
                are cleared.  If the processing is successful, the receiver MUST send
                an OK reply.  If the processing fails, the receiver MUST send a failure
                reply.  The SMTP model does not allow for partial failures at this point:
                either the message is accepted by the server for delivery and a positive
                response is returned or it is not accepted and a failure reply is returned.
                In sending a positive "250 OK" completion reply to the end of data indication,
                the receiver takes full responsibility for the
				message  (see <xref target='reliable_delivery'/>).
                Errors that are diagnosed subsequently MUST be reported in a mail message,
                as discussed in <xref target='trace_information'/>.</t>
             <t>When the SMTP server accepts a message either for relaying or for final
                delivery, it inserts a trace record (also referred to interchangeably
                as a "time stamp line" or "Received" line) at the top of the mail data.
                This trace record indicates the identity of the host that sent the message,
                the identity of the host that received the message (and is inserting
                this time stamp), and the date and time the message was received.  Relayed
                messages will have multiple time stamp lines.  Details for formation
                of these lines, including their syntax, is specified
                in <xref target='trace_information'/>.</t>
             <t>Additional discussion about the operation of the DATA command appears
                in <xref target='mail_transactions'/>.</t>
             <t>Syntax:
                <list>
                   <t>data = "DATA" CRLF</t>
                </list>
                </t>
        </section>
        <section title='RESET (RSET)'><!-- 4.1.1.5 -->
          <t>
        This command specifies that the current mail transaction will be aborted.
        Any stored sender, recipients, and mail data MUST be discarded, and all
        buffers and state tables cleared.  The receiver MUST send a "250 OK"
        reply to a RSET command with no arguments.  A reset command may be issued
        by the client at any time.  It is effectively equivalent to a NOOP (i.e.,
        it has no effect) if issued immediately after EHLO, before EHLO is issued
        in the session, after an end of data indicator has been sent and acknowledged,
        or immediately before a QUIT.  An SMTP server MUST NOT close the connection
        as the result of receiving a RSET; that action is reserved for QUIT (see
        <xref target='QUIT'/>).
          </t><t>
        Since EHLO implies some additional processing and response by the server,
        RSET will normally be more efficient than reissuing that command, even
        though the formal semantics are the same.
          </t><t>
        There are circumstances, contrary to the intent of this specification,
        in which an SMTP server may receive an indication that the underlying
        TCP connection has been closed or reset.  To preserve the robustness
        of the mail system, SMTP servers SHOULD be prepared for this condition
        and SHOULD treat it as if a QUIT had been received before the connection
        disappeared.
          </t><t>
            Syntax:
        <list><t>
          rset = "RSET" CRLF
        </t></list>
          </t>
        </section>
        <section title='VERIFY (VRFY)'><!-- 4.1.1.6 -->
          <t>
        This command asks the receiver to confirm that the argument identifies
        a user or mailbox.  If it is a user name, information is returned as
        specified in <xref target='commands_for_debugging_addresses'/>.
          </t><t>
        This command has no effect on the reverse-path buffer, the forward-path
        buffer, or the mail data buffer.
          </t><t>
            Syntax:
            <list><t>
              vrfy = "VRFY" SP String CRLF</t>
			</list>
          </t>
        </section>
        <section title='EXPAND (EXPN)'><!-- 4.1.1.7 -->
          <t>
        This command asks the receiver to confirm that the argument identifies
        a mailing list, and if so, to return the membership of that list.  If
        the command is successful, a reply is returned containing information
        as described in <xref target='commands_for_debugging_addresses'/>.  This
        reply will have multiple lines except in the trivial case of a one-member list.
          </t><t>
        This command has no effect on the reverse-path buffer, the forward-path
        buffer, or the mail data buffer, and it may be issued at any time.
          </t><t>
            Syntax:
            <list><t>
           expn = "EXPN" SP String CRLF</t>
		</list>
        </t>
        </section>
		
        <section title='HELP (HELP)'><!-- 4.1.1.8 -->
          <t>
        This command causes the server to send helpful information to the client.
        The command MAY take an argument (e.g., any command name) and return
        more specific information as a response.
          </t><t>
        This command has no effect on the reverse-path buffer, the
		forward-path
        buffer, or the mail data buffer, and it may be issued at any time.
          </t><t>
        SMTP servers SHOULD support HELP without arguments and MAY support it
        with arguments.
          </t><t>
            Syntax:
        <list><t>
          help = "HELP" [ SP String ] CRLF
        </t></list>
          </t>
        </section>
        <section title='NOOP (NOOP)'><!-- 4.1.1.9 -->
          <t>
        This command does not affect any parameters or previously entered commands.
        It specifies no action other than that the receiver send a
		"250 OK" reply.
          </t><t>
        This command has no effect on the reverse-path buffer, the forward-path
        buffer, or the mail data buffer, and it may be issued at any time.  If a
        parameter string is specified, servers SHOULD ignore it.
          </t><t>
            Syntax:
        <list><t>
          noop = "NOOP" [ SP String ] CRLF
        </t></list>
          </t>
        </section>
        <section anchor='QUIT' title='QUIT (QUIT)'><!-- 4.1.1.10 -->
          <t>
        This command specifies that the receiver MUST send
		a "221 OK" reply, and then close the transmission channel.
          </t><t>
        The receiver MUST NOT intentionally close the transmission channel until
        it receives and replies to a QUIT command (even if there was an error).
        The sender MUST NOT intentionally close the transmission channel until
        it sends a QUIT command, and it SHOULD wait until it receives the reply (even
        if there was an error response to a previous command).  If the connection
        is closed prematurely due to violations of the above or system or network
        failure, the server MUST cancel any pending transaction, but not undo
        any previously completed transaction, and generally MUST act as if the
        command or transaction in progress had received a temporary error (i.e.,
        a 4yz response).</t>
     <t>The QUIT command may be issued at any time.  Any current
		uncompleted mail transaction will be aborted.</t>
     <t>Syntax:
        <list><t>
          quit = "QUIT" CRLF
        </t></list>
        </t>
        </section>
 <section title="Mail-Parameter and Rcpt-Parameter Error Responses">
	<t>If the server SMTP does not recognize or cannot implement one or more
		of the parameters associated with a particular MAIL FROM or RCPT TO
		command, it will return code 555.</t>
	 <t>If, for some reason, the server is temporarily unable to accommodate
		one or more of the parameters associated with a MAIL FROM or RCPT TO
		command, and if the definition of the specific parameter does not
		mandate the use of another code, it should return code
		455.</t>
	 <t>Errors specific to particular parameters and their values will be
		specified in the parameter's defining RFC.</t>
  </section>
     </section>

	 <section anchor='command_argument_syntax'
                title='Command Argument Syntax'> <!-- 4.1.2 -->
        <t>The syntax of the argument clauses of the above commands (using the
          syntax specified in <xref target='RFC5234'>RFC 5234</xref> where
          applicable) is given below.  Some of the productions given below
          are used only in conjunction with source routes as described in
          <xref target='source_routes'/>.  Terminals not defined in this document,
          such as ALPHA, DIGIT, SP, CR, LF, CRLF, are as defined in the "core"
          syntax in Section 6 of <xref target='RFC5234'>RFC 5234</xref> or
          in the message format syntax
          in <xref target='RFC5322'>RFC 5322</xref>.</t>
         <t>
          <list style='hanging' hangIndent='15'>
             <t hangText='Reverse-path'>
                = Path  / "&lt;&gt;"</t>
            <t hangText='Forward-path'>
               = Path</t>
            <t hangText='Path'>
               = "&lt;" [ A-d-l ":" ] Mailbox "&gt;"</t>
            <t hangText='A-d-l'>
               = At-domain *( "," At-domain )<vspace/>
                  ; Note that this form, the so-called "source<vspace/>
                     ; route", MUST BE accepted, SHOULD NOT be<vspace/>
                     ; generated, and SHOULD be ignored.</t>
            <t hangText='At-domain'>
               = "@" Domain</t>
            <t hangText='Mail-parameters'>
               = esmtp-param *(SP esmtp-param)</t>
            <t hangText='Rcpt-parameters'>
               = esmtp-param *(SP esmtp-param)</t>
            <t hangText='esmtp-param'>
               = esmtp-keyword ["=" esmtp-value]</t>
            <t hangText='esmtp-keyword'>
               = (ALPHA / DIGIT) *(ALPHA / DIGIT / "-")</t>
            <t hangText='esmtp-value'>
               = 1*(%d33-60 / %d62-126)<vspace/>
                  ; any CHAR excluding "=", SP, and control<vspace/>
                     ; characters.  If this string is an email
                     address,<vspace/>
                     ;  i.e., a Mailbox, then the "xtext" syntax
                     <xref target="RFC3461"/> <vspace/>
					 ; SHOULD be used.</t>
            <t hangText='Keyword'>
               = Ldh-str</t>
            <t hangText='Argument'>
               = Atom</t>
            <t hangText='Domain'>
               = sub-domain *("." sub-domain)</t>
            <t hangText='sub-domain'>
               = Let-dig [Ldh-str]</t>
            <t hangText='Let-dig'>
              = ALPHA / DIGIT</t>
            <t hangText='Ldh-str'>
              = *( ALPHA / DIGIT / "-" ) Let-dig</t>
            <t hangText='address-literal'>
               = "[" ( IPv4-address-literal /
               <vspace/>
                 IPv6-address-literal /<vspace/>
                    General-address-literal ) "]"<vspace/>
                    ; See <xref target='address_literals'/></t>
            <t hangText='Mailbox'>
               = Local-part "@" ( Domain / address-literal )</t>
            <t hangText='Local-part'>
               = Dot-string / Quoted-string
               <vspace/>
                 ; MAY be case-sensitive</t>
               <vspace blankLines="1" />
            <t hangText='Dot-string'>
               = Atom *("." Atom)</t>
            <t hangText='Atom'>
               = 1*atext</t>
            <t hangText='Quoted-string'>
               = DQUOTE *QcontentSMTP DQUOTE</t>
			<t hangText='QcontentSMTP'>
			   = qtextSMTP / quoted-pairSMTP</t>
			<t hangText='quoted-pairSMTP'>
			   = %d92 %d32-126
			   <vspace/>
	           ; i.e., backslash followed by any ASCII
			   <vspace/>
	           ; graphic (including itself) or SPace</t>
			<t hangText='qtextSMTP'>
			   = %d32-33 / %d35-91 / %d93-126
               <vspace/>
			   ; i.e., within a quoted string, any
			   <vspace/>
			  ; ASCII graphic or space is permitted
			  <vspace/>
			  ; without blackslash-quoting except
			  <vspace/>
			  ; double-quote and the backslash itself.</t>

            <t hangText='String'>
               = Atom / Quoted-string</t>
            </list></t>
        <t>While the above definition for Local-part is relatively permissive,
          for maximum interoperability, a host that expects to receive mail
          SHOULD avoid defining mailboxes where the Local-part requires (or
          uses) the Quoted-string form or where the Local-part is case-sensitive.
          For any purposes that require generating or comparing Local-parts
          (e.g., to specific mailbox names), all quoted forms MUST be treated
          as equivalent, and the sending system SHOULD transmit the form that
          uses the minimum quoting possible.</t>
        <t>Systems MUST NOT define mailboxes in such a way as to require the
          use in SMTP of non-ASCII characters (octets with the high order
          bit set to one) or ASCII "control characters" (decimal value 0-31
          and 127).  These characters MUST NOT be used in MAIL or RCPT commands
          or other commands that require mailbox names.</t>
        <t>Note that the backslash, "\", is a quote character, which is used
          to indicate that the next character is to be used literally (instead
          of its normal interpretation).  For example, "Joe\,Smith" indicates
          a single nine-character user name string with the comma being the fourth
          character of that string.</t>
        <t>To promote interoperability and consistent with long-standing guidance
          about conservative use of the DNS in naming and applications (e.g.,
          see Section 2.3.1 of the
          base DNS document, <xref target='RFC1035'>RFC 1035</xref>),
          characters outside the set of alphabetic characters, digits, and hyphen MUST NOT
          appear in domain name labels for SMTP clients or servers.  In particular,
          the underscore character is not permitted.  SMTP servers that receive
          a command in which invalid character codes have been employed, and
          for which there are no other reasons for rejection, MUST reject
          that command with a 501 response (this rule, like others,
		  could be overridden by appropriate SMTP extensions).</t>
      </section>
      <section anchor='address_literals' title='Address Literals'><!-- 4.1.3 -->
        <t>Sometimes a host is not known to the domain name system and communication
          (and, in particular, communication to report and repair the error)
          is blocked.  To bypass this barrier, a special literal form of the
          address is allowed as an alternative to a domain name.  For IPv4
          addresses, this form uses four small decimal integers separated
          by dots and enclosed by brackets such as [123.255.37.2], which indicates
          an (IPv4) Internet Address in sequence-of-octets form.  For IPv6
          and other forms of addressing that might eventually be standardized,
          the form consists of a standardized "tag" that identifies the address
          syntax, a colon, and the address itself, in a format specified as
          part of the relevant standards
		  (i.e., <xref target='RFC4291'>RFC 4291</xref> for IPv6).</t>
	   <t>
          Specifically:
            </t><t>
        <list style='hanging' hangIndent='15'>
          <t hangText='IPv4-address-literal'>
             = Snum 3("." Snum)</t>
          <t hangText='IPv6-address-literal'>
             = "IPv6:" IPv6-addr</t>
          <t hangText='General-address-literal'>
             = Standardized-tag ":" 1*dcontent</t>
		  <t hangText='Standardized-tag'>
			 = Ldh-str<vspace/>
                  ; Standardized-tag MUST be specified in a<vspace/>
                  ; Standards-Track RFC and registered with IANA</t>
		  <t hangText="dcontent">
			 = %d33-90 /        ; Printable US-ASCII<vspace/>
               %d94-126         ; excl. "[", "\", "]"</t>
          <t hangText='Snum'>
              = 1*3DIGIT <vspace/>
			  ; representing a decimal integer<vspace/>
                 ; value in the range 0 through 255</t>
          <t hangText='IPv6-addr'>
              = IPv6-full / IPv6-comp / IPv6v4-full / IPv6v4-comp</t>
          <t hangText='IPv6-hex'>
              = 1*4HEXDIG </t>
          <t hangText='IPv6-full'>
              = IPv6-hex 7(":" IPv6-hex)</t>
          <t hangText='IPv6-comp'>
              = [IPv6-hex *5(":" IPv6-hex)] "::" <vspace/>
			   [IPv6-hex *5(":" IPv6-hex)]
              <vspace/>
                 ; The "::" represents at least 2 16-bit groups of<vspace/>
                    ; zeros. No more than 6 groups in addition to the<vspace/>
                    ; "::" may be present.</t>
          <t hangText='IPv6v4-full'>
              = IPv6-hex 5(":" IPv6-hex) ":" IPv4-address-literal</t>
          <t hangText='IPv6v4-comp'>
              = [IPv6-hex *3(":" IPv6-hex)] "::"
              <vspace/>
                 [IPv6-hex *3(":" IPv6-hex) ":"] <vspace/>
                    IPv4-address-literal<vspace/>
					; The "::" represents at least 2 16-bit groups of<vspace/>
                    ; zeros. No more than 4 groups in addition to the<vspace/>
                    ; "::" and IPv4-address-literal may be
                    present.</t>
        </list>
        </t>
      </section>
      
      <section anchor='order_of_commands' title='Order of Commands'><!-- 4.1.4 -->
        <t>There are restrictions on the order in which these commands may
          be used.
        </t><t>
          A session that will contain mail transactions MUST first be initialized
          by the use of the EHLO command.  An SMTP server SHOULD accept commands
          for non-mail transactions (e.g., VRFY or EXPN) without this initialization.
        </t><t>
          An EHLO command MAY be issued by a client later in the session.
          If it is issued after the session begins and the EHLO command is
		  acceptable to the SMTP server, the SMTP server MUST clear
          all buffers and reset the state exactly as if a RSET command had
          been issued.  In other words, the sequence of RSET followed immediately
          by EHLO is redundant, but not harmful other than in the performance
          cost of executing unnecessary commands.
        </t><t>
          If the EHLO command is not acceptable to the SMTP server, 501, 500,
          502, or 550 failure replies MUST be returned as appropriate.  The
          SMTP server MUST stay in the same state after transmitting these replies that it was in before the EHLO was received.
        </t><t>
          The SMTP client MUST, if possible, ensure that the domain parameter
          to the EHLO command is a primary host name as specified for
          this command in <xref target='domain_names'/>.
          If this is not possible (e.g., when the
          client's address is dynamically assigned and the client does not
          have an obvious name), an address literal SHOULD be substituted
          for the domain name.</t>
	   <t>An SMTP server MAY verify that the domain name argument in the
          EHLO command actually corresponds to the IP address of the client.
          However, if the verification fails, the server MUST NOT refuse to
          accept a message on that basis.  Information captured in the verification
          attempt is for logging and tracing purposes.  Note that this prohibition
          applies to the matching of the parameter to its IP address only; see
          <xref target='scope_of_operation'/> for a more extensive discussion
          of rejecting incoming connections or mail messages.
        </t><t>
          The NOOP, HELP, EXPN, VRFY, and RSET commands can be used at any
          time during a session, or without previously initializing a session.
          SMTP servers SHOULD process these normally (that is, not return
          a 503 code) even if no EHLO command has yet been received; clients
          SHOULD open a session with EHLO before sending these commands.
        </t><t>
          If these rules are followed, the example in RFC 821 that shows "550
          access denied to you" in response to an EXPN command is incorrect
          unless an EHLO command precedes the EXPN or the denial of access
          is based on the client's IP address or other authentication
		  or authorization-determining mechanisms.
        </t><t>
          The MAIL command (or the obsolete SEND, SOML, or SAML commands)
          begins a mail transaction.  Once started, a mail transaction consists
          of a transaction beginning command, one or more RCPT commands, and
          a DATA command, in that order.  A mail transaction may be aborted
          by the RSET, a new EHLO, or the QUIT command.
		  There may be zero or more
          transactions in a session.  MAIL (or SEND, SOML, or SAML) MUST NOT
          be sent if a mail transaction is already open, i.e., it should be
          sent only if no mail transaction had been started in the session,
          or if the previous one successfully concluded with a successful
          DATA command, or if the previous one was aborted, e.g., with a RSET
		  or new EHLO.
        </t><t>
          If the transaction beginning command argument is not acceptable,
          a 501 failure reply MUST be returned and the SMTP server MUST stay
          in the same state.  If the commands in a transaction are out of
          order to the degree that they cannot be processed by the server,
          a 503 failure reply MUST be returned and the SMTP server MUST stay
          in the same state.
        </t><t>
          The last command in a session MUST be the QUIT command.  The QUIT
          command SHOULD
          be used by the client SMTP to request connection closure, even when
          no session opening command was sent and accepted.
        </t>
      </section>
      <section anchor='private_use_commands' title='Private-Use Commands'><!-- 4.1.5 -->
        <t>
          As specified in <xref target='definition_and_registration_of_extensions'/>,
          commands starting in "X" may be used by bilateral agreement between
          the client (sending) and server (receiving) SMTP agents.  An SMTP
          server that does not recognize such a command is expected to reply
          with "500 Command not recognized".  An extended SMTP server MAY
          list the feature names associated with these private commands in
          the response to the EHLO command.
        </t><t>
          Commands sent or accepted by SMTP systems that do not start with
          "X" MUST conform to the requirements of
          <xref target='definition_and_registration_of_extensions'/>.
          </t>
      </section>
    </section>
    <section anchor='smtp_replies' title='SMTP Replies'><!-- 4.2 -->
      <t>
        Replies to SMTP commands serve to ensure the synchronization of requests
        and actions in the process of mail transfer and to guarantee that
        the SMTP client always knows the state of the SMTP server.  Every
        command MUST generate exactly one reply.
      </t><t>
        The details of the command-reply sequence are described in <xref target='sequencing_of_commands'/>.
        </t><t>
        An SMTP reply consists of a three digit number (transmitted as three
        numeric characters) followed by some text unless specified otherwise
        in this document.  The number is for use by automata to determine
        what state to enter next; the text is for the human user.  The three
        digits contain enough encoded information that the SMTP client need
        not examine the text and may either discard it or pass it on to the
        user, as appropriate.  Exceptions are as noted elsewhere in this document.
        In particular, the 220, 221, 251, 421, and 551 reply codes are associated
        with message text that must be parsed and interpreted by machines.
        In the general case, the text may be receiver dependent and context
        dependent, so there are likely to be varying texts for each reply
        code.  A discussion of the theory of reply codes is given in <xref
        target='reply_code_severities'/>.  Formally, a reply is defined to
        be the sequence: a three-digit code, &lt;SP&gt;, one line of text,
        and &lt;CRLF&gt;, or a multiline reply (as defined in the same section).
        Since, in violation of this specification, the text is sometimes not
        sent, clients that do not receive it SHOULD be prepared to process
        the code alone (with or without a trailing space character).  Only
        the EHLO, EXPN, and HELP commands are expected to result in multiline
        replies in normal circumstances; however, multiline replies are allowed
        for any command.
      </t><t>
        In ABNF, server responses are:
            </t><t>
        <list style='hanging' hangIndent='15'>
      <t hangText='Greeting'>
          = ( "220 " (Domain / address-literal) <vspace/> [ SP textstring ] CRLF ) /
          <vspace/>
          ( "220-" (Domain / address-literal) <vspace/> [ SP textstring ] CRLF
          <vspace/>
             *( "220-" [ textstring ] CRLF ) <vspace/>
             "220" [ SP textstring ] CRLF )</t>

	  <t hangText='textstring'>
          = 1*(%d09 / %d32-126)	; HT, SP, Printable US-ASCII</t>

      <t hangText='Reply-line'>
          = *( Reply-code "-" [ textstring ] CRLF )  <vspace/>
          Reply-code [ SP textstring ] CRLF</t>
       <t hangText="Reply-code">
           = %x32-35 %x30-35 %x30-39</t>
        </list>
            </t><t>
        where "Greeting" appears only in the 220 response that announces that
        the server is opening its part of the connection.
		(Other possible server responses upon connection follow the
		syntax of Reply-line.)
      </t><t>
        An SMTP server SHOULD send only the reply codes listed in this document.
        An SMTP server SHOULD use the text shown in the examples whenever appropriate.
      </t><t>
        An SMTP client MUST determine its actions only by the reply code,
        not by the text (except for the "change of address" 251 and 551 and,
        if necessary, 220, 221, and 421 replies); in the general case, any
        text, including no text at all (although senders SHOULD NOT send bare
        codes), MUST be acceptable.  The space (blank) following the reply
        code is considered part of the text.  Whenever possible, a receiver-
        SMTP SHOULD test the first digit (severity indication) of the reply code.
      </t><t>
        The list of codes that appears below MUST NOT be construed as permanent.
        While the addition of new codes should be a rare and significant activity,
        with supplemental information in the textual part of the response
        being preferred, new codes may be added as the result of new Standards
        or Standards-Track specifications.  Consequently, a sender-SMTP MUST
        be prepared to handle codes not specified in this document and MUST
        do so by interpreting the first digit only.</t>
     <t>In the absence of extensions negotiated with the client, SMTP
        servers MUST NOT send reply codes whose first digits are
        other than 2, 3, 4, or 5.   Clients that receive such
        out-of-range codes SHOULD normally treat them as fatal errors
        and terminate the mail transaction.</t>
        
      <section anchor='reply_code_severities'
                title='Reply Code Severities and Theory'><!-- 4.2.1 -->
        <t>
          The three digits of the reply each have a special significance.
          The first digit denotes whether the response is good, bad, or incomplete.
          An unsophisticated SMTP client, or one that receives an unexpected
          code, will be able to determine its next action (proceed as planned,
          redo, retrench, etc.) by examining this first digit.  An SMTP client
          that wants to know approximately what kind of error occurred (e.g.,
          mail system error, command syntax error) may examine the second
          digit.  The third digit and any supplemental information that may
          be present is reserved for the finest gradation of information.
        </t><t>
          There are four values for the first digit of the reply code:</t>
        <t>
          <list style='hanging'>
        <t hangText='2yz'>
          Positive Completion reply<vspace/>
          The requested action has been successfully
          completed.  A new request may be initiated.
        </t><t hangText='3yz'>
          Positive Intermediate reply<vspace/>
          The command has been accepted, but the
          requested action is being held in abeyance, pending receipt of further
          information.  The SMTP client should send another command specifying
          this information.  This reply is used in command sequence groups (i.e., in DATA).
        </t><t hangText='4yz'>
          Transient Negative Completion reply<vspace/>
          The command was not accepted, and
          the requested action did not occur.  However, the error condition is
          temporary, and the action may be requested again.  The sender should
          return to the beginning of the command sequence (if any).  It is difficult
          to assign a meaning to "transient" when two different sites (receiver-
          and sender-SMTP agents) must agree on the interpretation.  Each reply
          in this category might have a different time value, but the SMTP client
          SHOULD try again.  A rule of thumb to determine whether a 
          reply fits into the 4yz or the 5yz category (see below) is that replies
          are 4yz if they can be successful if repeated without any change in
          command form or in properties of the sender or receiver (that is, the
          command is repeated identically and the receiver does not put up a
          new implementation).
        </t><t hangText='5yz'>
          Permanent Negative Completion reply<vspace/>
          The command was not accepted and
          the requested action did not occur.  The SMTP client SHOULD
          NOT repeat the exact request (in the same sequence).  Even some
          "permanent" error conditions can be corrected, so the human user may
          want to direct the SMTP client to reinitiate the command sequence by
          direct action at some point in the future (e.g., after the spelling
          has been changed, or the user has altered the account status).
        </t>
          </list>
          It is worth noting that the file transfer protocol (FTP)
          <xref target="RFC0959"></xref> uses a very similar code
          architecture and that the SMTP codes are based on the FTP
          model.  However, SMTP uses a one-command, one-response
          model (while FTP is asynchronous) and FTP's 1yz codes are not
          part of the SMTP model.</t>
       <t>The second digit encodes responses in specific categories:

          <list style='hanging'>
        <t hangText='x0z'>
          Syntax: These replies refer to syntax errors, syntactically correct
          commands that do not fit any functional category, and unimplemented
          or superfluous commands.
        </t><t hangText='x1z'>
          Information: These are replies to requests for information, such as
          status or help.
        </t><t hangText='x2z'>
          Connections: These are replies referring to the transmission channel.
        </t><t hangText='x3z'>
          Unspecified.
        </t><t hangText='x4z'>
          Unspecified.
        </t><t hangText='x5z'>
          Mail system: These replies indicate the status of the receiver mail
          system vis-a-vis the requested transfer or other mail system action.
        </t>
          </list>
        </t><t>
          The third digit gives a finer gradation of meaning in each category
          specified by the second digit.  The list of replies illustrates
          this.  Each reply text is recommended rather than mandatory, and
          may even change according to the command with which it is associated.
          On the other hand, the reply codes must strictly follow the specifications
          in this section.  Receiver implementations should not invent new
          codes for slightly different situations from the ones described
          here, but rather adapt codes already defined.
        </t><t>
          For example, a command such as NOOP, whose successful execution
          does not offer the SMTP client any new information, will return
          a 250 reply.  The reply is 502 when the command requests an unimplemented
          non-site-specific action.  A refinement of that is the 504 reply
          for a command that is implemented, but that requests an unimplemented parameter.
        </t><t>
          The reply text may be longer than a single line; in these cases
          the complete text must be marked so the SMTP client knows when it
          can stop reading the reply.  This requires a special format to indicate
          a multiple line reply.
        </t><t>
          The format for multiline replies requires that every line, except
          the last, begin with the reply code, followed immediately by a hyphen,
          "-" (also known as minus), followed by text.  The last line will
          begin with the reply code, followed immediately by &lt;SP&gt;, optionally
          some text, and &lt;CRLF&gt;.  As noted above, servers SHOULD send
          the &lt;SP&gt; if subsequent text is not sent, but clients MUST
          be prepared for it to be omitted.
        </t><t>
          For example:
            </t><t>
          <list><t>
          250-First line<vspace/>
          250-Second line<vspace/>
          250-234 Text beginning with numbers <vspace/>
          250 The last line
          </t></list>
        </t>
        <t>In a multiline reply, the reply code on each of the lines
           MUST be the same. It is reasonable for the client to rely
           on this, so it can make processing decisions based on the
           code in any line, assuming that all others will be the
           same.  In a few cases, there is important
          data for the client in the reply "text".  The client will be able
          to identify these cases from the current context.
        </t>
      </section>
      <section title='Reply Codes by Function Groups'><!-- 4.2.2 -->
        <t>
          <list style='hanging'>
          <t hangText='500'>Syntax error, command unrecognized (This may include errors such as command line too long)
          </t><t hangText='501'>Syntax error in parameters or arguments
          </t><t hangText='502'>Command not implemented (see <xref target='reply_code_502'/>)
          </t><t hangText='503'>Bad sequence of commands
          </t><t hangText='504'>Command parameter not implemented
          <vspace blankLines="1"/>
          </t><t hangText='211'>System status, or system help reply
          </t><t hangText='214'>Help message (Information on how to use the
             receiver or the meaning of a particular non-standard command; this reply is useful only to the human user)
          <vspace blankLines="1"/>
          </t><t hangText='220'>&lt;domain&gt; Service ready
          </t><t hangText='221'>&lt;domain&gt; Service closing transmission channel
          </t><t hangText='421'>&lt;domain&gt; Service not available, closing
            transmission channel (This may be a reply to any command if the service knows it must shut down)
          <vspace blankLines="1"/>
          </t><t hangText='250'>Requested mail action okay, completed
          </t><t hangText='251'>User not local; will forward to &lt;forward-path&gt; (See <xref target='forwarding_for_address_correction'/>)
          </t><t hangText='252'>Cannot VRFY user, but will accept
			 message and attempt delivery
			 (See <xref target='meaning_vrfy_expn_success'/>) </t>
		  <t hangText='455'>Server unable to accommodate
			 parameters</t>
		  <t hangText='555'>MAIL FROM/RCPT TO parameters not
			 recognized or not implemented</t>
          <t hangText='450'>Requested mail action not taken:
			 mailbox unavailable (e.g., mailbox busy or temporarily
			 blocked for policy reasons)
          </t><t hangText='550'>Requested action not taken: mailbox unavailable (e.g., mailbox not found, no access, or command rejected for policy reasons)
          </t><t hangText='451'>Requested action aborted: error in processing
          </t><t hangText='551'>User not local; please try &lt;forward-path&gt; (See <xref target='forwarding_for_address_correction'/>)
          </t><t hangText='452'>Requested action not taken: insufficient system storage
          </t><t hangText='552'>Requested mail action aborted: exceeded storage allocation
          </t><t hangText='553'>Requested action not taken: mailbox name not allowed (e.g., mailbox syntax incorrect)
          </t><t hangText='354'>Start mail input; end with &lt;CRLF&gt;.&lt;CRLF&gt;
          </t><t hangText='554'>Transaction failed (Or, in the case of a connection-opening response, "No SMTP service here")
          </t></list>
        </t>
      </section>
      <section title='Reply Codes in Numeric Order'><!-- 4.2.3 -->
        <t>
          <list style='hanging'>
          <t hangText='211'>System status, or system help reply
          </t><t hangText='214'>Help message (Information on how to use the
            receiver or the meaning of a particular non-standard command; this
        reply is useful only to the human user)
          </t><t hangText='220'>&lt;domain&gt; Service ready 
          </t><t hangText='221'>&lt;domain&gt; Service closing transmission channel
          </t><t hangText='250'>Requested mail action okay, completed
          </t><t hangText='251'>User not local; will forward to &lt;forward-path&gt;
            (See <xref target='forwarding_for_address_correction'/>)
          </t><t hangText='252'>Cannot VRFY user, but will accept message
            and attempt delivery (See <xref target='meaning_vrfy_expn_success'/>)
          <vspace blankLines="1"/>
          </t><t hangText='354'>Start mail input; end with &lt;CRLF&gt;.&lt;CRLF&gt;
          <vspace blankLines="1"/>
          </t><t hangText='421'>&lt;domain&gt; Service not available, closing
            transmission channel (This may be a reply to any command if the
        service knows it must shut down)
          </t><t hangText='450'>Requested mail action not taken:
			 mailbox unavailable (e.g., mailbox busy or temporarily
			 blocked for policy reasons)
          </t><t hangText='451'>Requested action aborted: local error in processing
          </t><t hangText='452'>Requested action not taken:
			 insufficient system storage</t>
		  		  <t hangText='455'>Server unable to accommodate
			 parameters</t>

          <vspace blankLines="1"/>
          <t hangText='500'>Syntax error, command unrecognized (This may
            include errors such as command line too long)
          </t><t hangText='501'>Syntax error in parameters or arguments
          </t><t hangText='502'>Command not implemented (see <xref target='reply_code_502'/>)
          </t><t hangText='503'>Bad sequence of commands
          </t><t hangText='504'>Command parameter not implemented
          </t><t hangText='550'>Requested action not taken: mailbox unavailable
            (e.g., mailbox not found, no access, or command rejected for policy reasons)
          </t><t hangText='551'>User not local; please try &lt;forward-path&gt;
            (See <xref target='forwarding_for_address_correction'/>)
          </t><t hangText='552'>Requested mail action aborted: exceeded storage allocation
          </t><t hangText='553'>Requested action not taken: mailbox name not
            allowed (e.g., mailbox syntax incorrect)
          </t><t hangText='554'>Transaction failed (Or, in the case of a connection-opening
            response, "No SMTP service here")</t>
		  <t hangText='555'>MAIL FROM/RCPT TO parameters not
			 recognized or not implemented</t>
		  </list>
        </t>
      </section>
      <section anchor='reply_code_502' title='Reply Code 502'><!-- 4.2.4 -->
        <t>
          Questions have been raised as to when reply code 502 (Command not
          implemented) SHOULD be returned in preference to other codes.  502
          SHOULD be used when the command is actually recognized by the SMTP
          server, but not implemented.  If the command is not recognized,
          code 500 SHOULD be returned.  Extended SMTP systems MUST NOT list
          capabilities in response to EHLO for which they will return 502
          (or 500) replies.
        </t>
      </section>
      <section title='Reply Codes after DATA and the Subsequent &lt;CRLF&gt;.&lt;CRLF&gt;'>
         <!-- 4.2.5 -->
        <t>
          When an SMTP server returns a positive completion status (2yz code)
          after the DATA command is completed with &lt;CRLF&gt;.&lt;CRLF&gt;,
          it accepts responsibility for:
            </t><t>
          <list style='symbols'>
        <t>delivering the message (if the recipient mailbox exists), or
        </t><t>if attempts to deliver the message fail due to transient conditions,
          retrying delivery some reasonable number of times at intervals as specified
          in <xref target='retry_strategies'/>.
        </t><t>if attempts to deliver the message fail due to permanent conditions,
          or if repeated attempts to deliver the message fail due to transient
          conditions, returning appropriate notification to the sender of the
          original message (using the address in the SMTP MAIL command).
        </t>
          </list>
        </t><t>
          When an SMTP server returns a temporary error status (4yz)
          code after the DATA command is completed with &lt;CRLF&gt;.&lt;CRLF&gt;,
          it MUST NOT make a subsequent attempt to deliver that message.
          The SMTP client retains responsibility for the delivery of that message
          and may either return it to the user or requeue it for a subsequent
          attempt (see <xref target='sending_strategy'/>).
        </t><t>
          The user who originated the message SHOULD be able to interpret
          the return of a transient failure status (by mail message or otherwise)
          as a non-delivery indication, just as a permanent failure would
          be interpreted.  If the client SMTP successfully handles these conditions,
          the user will not receive such a reply.
        </t><t>
          When an SMTP server returns a permanent error status (5yz) code
          after the DATA command is completed
          with &lt;CRLF&gt;.&lt;CRLF&gt;, it MUST
          NOT make any subsequent attempt to deliver the message.  As with
          temporary error status codes, the SMTP client retains responsibility
          for the message, but SHOULD not again attempt delivery to the same
          server without user review of the message and response and appropriate
          intervention.
        </t>
      </section>
    </section>
    <section anchor='sequencing_of_commands'
              title='Sequencing of Commands and Replies'><!-- 4.3 -->
      <section title='Sequencing Overview'><!-- 4.3.1 -->
        <t>
          The communication between the sender and receiver is an alternating
          dialogue, controlled by the sender.  As such, the sender issues
          a command and the receiver responds with a reply.  Unless other
          arrangements are negotiated through service extensions, the sender
          MUST wait for this response before sending further commands.  One
          important reply is the connection greeting.  Normally, a receiver
          will send a 220 "Service ready" reply when the connection is completed.
          The sender SHOULD wait for this greeting message before sending any commands.
        </t><t>
          Note: all the greeting-type replies have the official name (the
          fully-qualified primary domain name) of the server host as the first
          word following the reply code.  Sometimes the host will have no
          meaningful name.  See <xref target='address_literals'/> for a discussion
          of alternatives in these situations.
        </t><t>
          For example,
            </t><t>
          <list style='empty'>
        <t>220 ISIF.USC.EDU Service ready
        </t>
          </list>
          or
          <list style='empty'>
        <t>220 mail.example.com SuperSMTP v 6.1.2 Service ready
        </t>
          </list>
          or
          <list style='empty'>
        <t>220 [10.0.0.1] Clueless host service ready
        </t>
          </list>
        </t><t>
          The table below lists alternative success and failure replies for
          each command.  These SHOULD be strictly adhered to. A receiver MAY
          substitute text in the replies, but the meanings and actions implied
          by the code numbers and by the specific command reply
          sequence MUST be preserved.</t>
      </section>
      <section title='Command-Reply Sequences'><!-- 4.3.2 -->
        <t>
          Each command is listed with its usual possible replies.  The prefixes
          used before the possible replies are "I" for intermediate, "S" for
          success, and "E" for error.  Since some servers may generate other
          replies under special circumstances, and to allow for future extension,
          SMTP clients SHOULD, when possible, interpret only the first digit
          of the reply and MUST be prepared to deal with unrecognized reply
          codes by interpreting the first digit only.  Unless extended using
          the mechanisms described in <xref target='extension_model'/>, SMTP
          servers MUST NOT transmit reply codes to an SMTP client that are
          other than three digits or that do not start in a digit between
          2 and 5 inclusive.
        </t><t>
          These sequencing rules and, in principle, the codes themselves,
          can be extended or modified by SMTP extensions offered by the server
          and accepted (requested) by the client.   However, if the
          target is more precise granularity in the codes, rather than
          codes for completely new purposes, the system described in
          <xref target="RFC3463"> RFC 3463</xref> SHOULD be used in
          preference to the invention of new codes.</t>
       <t>In addition to the codes listed below, any SMTP command can return
          any of the following codes if the corresponding unusual circumstances
          are encountered:
            </t><t>
          <list style='hanging'>
        <t hangText='500'>For the "command line too long" case or if the command
          name was not recognized.  Note that producing a "command not recognized"
          error in response to the required subset of these commands is a violation
          of this specification.  Similarly, producing a "command too
		  long" message for a command line shorter than 512 characters
		  would violate the provisions of
		  <xref target="MaxCommandLine"/>.</t>
        <t hangText='501'>Syntax error in command or arguments.  In order
          to provide for future extensions, commands that are specified in this
          document as not accepting arguments (DATA, RSET, QUIT) SHOULD return
          a 501 message if arguments are supplied in the absence of EHLO- advertised
          extensions.
        </t><t hangText='421'>Service shutting down and closing transmission channel
        </t>
          </list>
        </t><t>
          Specific sequences are:
            </t>
            <t><list>
               <t> CONNECTION ESTABLISHMENT
                  <list>
                     <t>S: 220<vspace/>
                        E: 554
                     </t></list>
                  EHLO or HELO
                  <list>
                     <t>S: 250<vspace/>
                        E: 504 (a conforming implementation could
                        return this code only in fairly obscure
                        cases), 550, 502 (permitted only with an
                        old-style server that does not support
                        EHLO)</t>
                  </list>
                  MAIL
                  <list>
                     <t>S: 250<vspace/>
                        E: 552, 451, 452, 550, 553, 503, 455, 555</t>
                  </list>
                  RCPT
                  <list>
                     <t>S: 250, 251 (but see
                        <xref target='forwarding_for_address_correction'/>
                         for discussion of 251 and 551)<vspace/>
                        E: 550, 551, 552, 553, 450, 451, 452, 503,
                        455, 555</t>
                  </list>
                  DATA
                  <list>
                     <t>I: 354 -&gt; data -&gt; S: 250<vspace/>
                        <list hangIndent='18'>
                           <t>E: 552, 554, 451, 452</t>
                           <t>E: 450, 550 (rejections for policy
                              reasons)</t>
                        </list>
                      </t>
					  <t> E: 503, 554</t>
                  </list>
                  RSET
                  <list>
                     <t>S: 250</t>
                  </list>
                  VRFY
                  <list>
                     <t>S: 250, 251, 252<vspace/>
                        E: 550, 551, 553, 502, 504</t>
                  </list>
                  EXPN
                  <list>
                     <t>S: 250, 252<vspace/>
                        E: 550, 500, 502, 504</t>
                  </list>
                  HELP
                  <list>
                     <t>S: 211, 214<vspace/>
                        E: 502, 504</t>
                  </list>
                  NOOP
                  <list>
                     <t>S: 250</t>
                  </list>
                  QUIT
                  <list>
                     <t>S: 221</t>
                  </list>
               </t></list>
            </t>
          </section>
     </section>
     
    <section anchor='trace_information' title='Trace Information'><!-- 4.4 -->
      <t>
        When an SMTP server receives a message for delivery or further processing,
        it MUST insert trace ("time stamp" or "Received") information at the
        beginning of the message content, as discussed in <xref target='DATA'/>.
      </t><t>
        This line MUST be structured as follows:
            </t><t>
        <list style='symbols'>
          <t>The FROM clause, which MUST be supplied in an SMTP environment,
            SHOULD contain both (1) the name of the source host as presented
        in the EHLO command and (2) an address literal containing the IP address
        of the source, determined from the TCP connection.
          </t><t>The ID clause MAY contain an "@" as suggested in RFC 822,
            but this is not required.</t>
		 <t>If the FOR clause appears, it MUST contain exactly one
			&lt;path&gt; entry, even
            when multiple RCPT commands have been given.  Multiple
			&lt;path&gt;s raise some security issues and have been
			deprecated, see <xref target='blind_copies'/>.</t>
        </list>
      </t><t>
        An Internet mail program MUST NOT change or delete a
		Received: line that was 
        previously added to the message header section.
        SMTP servers MUST prepend
        Received lines to messages; they MUST NOT change the order of existing
        lines or insert Received lines in any other location.
      </t><t>
        As the Internet grows, comparability of Received header fields is important
        for detecting problems, especially slow relays.  SMTP servers that
        create Received header fields SHOULD use explicit offsets in the dates (e.g.,
        -0800), rather than time zone names of any type.  Local time (with
        an offset) SHOULD be used rather than UT when feasible.
        This formulation allows
        slightly more information about local circumstances to be specified.
        If UT is needed, the receiver need merely do some simple arithmetic
        to convert the values.  Use of UT loses information about the time
        zone-location of the server.  If it is desired to supply a time zone
        name, it SHOULD be included in a comment.
      </t><t>
        When the delivery SMTP server makes the "final delivery" of a message,
        it inserts a return-path line at the beginning of the mail data.
        This use of return-path is required; mail systems MUST support it.
        The return-path line preserves the information in the &lt;reverse-
        path&gt; from the MAIL command.  Here, final delivery means the message
        has left the SMTP environment.  Normally, this would mean it had been
        delivered to the destination user or an associated mail drop, but
        in some cases it may be further processed and transmitted by another mail system.
      </t><t>
        It is possible for the mailbox in the return path to be different
        from the actual sender's mailbox, for example, if error responses
        are to be delivered to a special error handling mailbox rather than
        to the message sender.  When mailing lists are involved, this arrangement
        is common and useful as a means of directing errors to the list maintainer
        rather than the message originator.
      </t><t>
        The text above implies that the final mail data will begin with a
        return path line, followed by one or more time stamp lines.  These
        lines will be followed by the rest of the mail data: first the
		balance of the mail header section and then the
        body (<xref target='RFC5322'>RFC 5322</xref>).
      </t><t>
        It is sometimes difficult for an SMTP server to determine whether
        or not it is making final delivery since forwarding or other operations
        may occur after the message is accepted for delivery.  Consequently,
        any further (forwarding, gateway, or relay) systems MAY remove the
        return path and rebuild the MAIL command as needed to ensure that
        exactly one such line appears in a delivered message.
      </t><t>
        A message-originating SMTP system SHOULD NOT send a message that already
        contains a Return-path header field.  SMTP servers performing a relay function
        MUST NOT inspect the message data, and especially not to the extent
        needed to determine if Return-path header fields are present.  SMTP servers
        making final delivery MAY remove Return-path header fields
        before adding their own.
      </t><t>
        The primary purpose of the Return-path is to designate the address
        to which messages indicating non-delivery or other mail system failures
        are to be sent.  For this to be unambiguous, exactly one return path
        SHOULD be present when the message is delivered.  Systems
		using RFC 822 syntax with non-SMTP transports SHOULD designate an unambiguous
        address, associated with the transport envelope, to which error reports
        (e.g., non-delivery messages) should be sent.
      </t><t>
        Historical note: Text in RFC 822 that appears to contradict the use
        of the Return-path header field (or the envelope reverse-path address from
        the MAIL command) as the destination for error messages is not applicable
        on the Internet.  The reverse-path address (as copied into the Return-path)
        MUST be used as the target of any mail containing delivery error messages.
      </t><t>
        In particular:
            </t><t>
        <list style='symbols'>
          <t>a gateway from SMTP -&gt; elsewhere SHOULD insert a return-path
          header field, unless it is known that the "elsewhere" transport also uses
          Internet domain addresses and maintains the envelope sender address separately.
          </t><t>a gateway from elsewhere -&gt; SMTP SHOULD delete any return-path
          header field present in the message, and either copy that information
          to the SMTP envelope or combine it with information present in the
          envelope of the other transport system to construct the reverse-path argument to the MAIL command in the SMTP envelope.
          </t>
        </list>
      </t><t>
        The server must give special treatment to cases in which the processing
        following the end of mail data indication is only partially successful.
        This could happen if, after accepting several recipients and the mail
        data, the SMTP server finds that the mail data could be successfully
        delivered to some, but not all, of the recipients.  In such cases,
        the response to the DATA command MUST be an OK reply.  However, the
        SMTP server MUST compose and send an "undeliverable mail" notification
        message to the originator of the message.
      </t><t>
        A single notification listing all of the failed recipients or separate
        notification messages MUST be sent for each failed recipient.  For
        economy of processing by the sender, the former SHOULD be used
        when possible.  Note that the key difference between
        handling aliases (<xref target="aliases"/>) and forwarding
        (this subsection) is the change to the backward-pointing
        address in this case.
        All notification messages about undeliverable mail
        MUST be sent using
        the MAIL command (even if they result from processing the obsolete
        SEND, SOML, or SAML commands) and MUST use a null return path as discussed
        in <xref target='relaying'/>.
      </t><t>
        The time stamp line and the return path line are formally defined
        as follows (the definitions for "FWS" and "CFWS" appear in
		<xref target='RFC5322'>RFC 5322</xref>):
        </t><t>
    <list style='hanging' hangIndent='15'>
        <t hangText='Return-path-line'>
            = "Return-Path:" FWS Reverse-path &lt;CRLF&gt;</t>
        <t hangText='Time-stamp-line'>
            = "Received:" FWS Stamp &lt;CRLF&gt; </t>

        <t hangText='Stamp'>
          = From-domain By-domain Opt-info [CFWS]
          ";" <vspace/> FWS date-time
          <vspace/>
             ; where "date-time" is as defined
                in <xref target='RFC5322'>RFC 5322</xref><vspace/>
                ; but the "obs-" forms, especially two-digit<vspace/>
                ; years, are prohibited in SMTP and MUST NOT
				be used.</t>

        <t hangText='From-domain'>
           = "FROM" FWS Extended-Domain</t>
        <t hangText='By-domain'>
           = CFWS "BY" FWS Extended-Domain</t>
        <t hangText='Extended-Domain'>
           = Domain /<vspace/>
           ( Domain FWS "(" TCP-info ")" ) /<vspace/>
           ( address-literal FWS "(" TCP-info ")" )</t>
        <t hangText='TCP-info'>
           = address-literal / ( Domain FWS address-literal )
           <vspace />
              ; Information derived by server from TCP connection<vspace/>
                 ; not client EHLO.</t>
        <t hangText='Opt-info'>
           = [Via] [With] [ID] [For]<vspace/>
		   [Additional-Registered-Clauses]</t>
        <t hangText='Via'>
           = CFWS "VIA" FWS Link</t>
        <t hangText='With'>
           = CFWS "WITH" FWS Protocol</t>
        <t hangText='ID'>
           = CFWS "ID" FWS ( Atom / msg-id  )
		   <vspace/>
		   ; msg-id is defined
		   in <xref target='RFC5322'>RFC 5322</xref></t>
        <t hangText='For'>
           = CFWS "FOR" FWS ( Path / Mailbox )</t>
		<t hangText='Additional-Registered-Clauses'>
		   = CFWS Atom FWS String
		   <vspace />
		   ;  Additional standard clauses may be added in this
		   <vspace/>
		   ;  location by future standards and registration with
		   <vspace/>
		   ;  IANA.  SMTP servers SHOULD NOT use unregistered<vspace/>
		   ;  names. See <xref target="IANAConsid"/>.</t>
        <t hangText='Link'>
           = "TCP" / Addtl-Link</t>
        <t hangText='Addtl-Link'>
           = Atom
           <vspace/>
              ; Additional standard names for links are <vspace/>
                 ; registered with the Internet Assigned Numbers<vspace/>
                 ; Authority (IANA).  "Via" is primarily of value<vspace/>
                 ; with non-Internet transports.  SMTP servers<vspace/>
                 ; SHOULD NOT use unregistered names.</t>
        <t hangText='Protocol'>
           = "ESMTP" / "SMTP" / Attdl-Protocol</t>
        <t hangText='Attdl-Protocol'>
           = Atom
           <vspace />
              ; Additional standard names for protocols are<vspace/>
                ; registered with the Internet Assigned Numbers<vspace/>
                ; Authority (IANA) in the "mail parameters"<vspace/>
                ; registry <xref target="RFC3848"/>. SMTP servers 
                SHOULD NOT<vspace/>
				; use unregistered names.</t>
         </list>
	  </t>
    </section>
    
    <section title='Additional Implementation Issues'><!-- 4.5 -->
      <section anchor='minimum_implementation'
                title='Minimum Implementation'><!-- 4.5.1 -->
        <t>In order to make SMTP workable, the following minimum
           implementation MUST be provided by all receivers.  The
           following commands MUST be supported to conform to this
           specification:</t>
        <t><list>
           <t>EHLO<vspace/>
              HELO<vspace/>
              MAIL<vspace/>
              RCPT<vspace/>
              DATA<vspace/>
              RSET<vspace/>
              NOOP<vspace/>
              QUIT<vspace/>
              VRFY</t></list>
        </t>
        <t>Any system that includes an SMTP server supporting mail relaying
          or delivery MUST support the reserved mailbox "postmaster" as a
          case-insensitive local name.  This postmaster address is not strictly
          necessary if the server always returns 554 on connection opening
          (as described in <xref target='session_initiation'/>).  The requirement
          to accept mail for postmaster implies that RCPT commands that specify
          a mailbox for postmaster at any of the domains for which the SMTP
          server provides mail service, as well as the special case of "RCPT
          TO:&lt;Postmaster&gt;" (with no domain specification), MUST
          be supported. </t>
       <t>SMTP systems are expected to make every reasonable effort to accept
          mail directed to Postmaster from any other system on the Internet.
          In extreme cases -- such as to contain a denial of service attack
          or other breach of security -- an SMTP server may block mail directed
          to Postmaster.  However, such arrangements SHOULD be narrowly tailored
          so as to avoid blocking messages that are not part of such
          attacks. </t>
      </section>
      <section anchor='Transparency' title='Transparency'><!-- 4.5.2 -->
        <t>Without some provision for data transparency, the character sequence
          "&lt;CRLF&gt;.&lt;CRLF&gt;" ends the mail text and cannot be sent
          by the user.  In general, users are not aware of such "forbidden"
          sequences.  To allow all user composed text to be transmitted transparently,
          the following procedures are used:</t>
       <t>
          <list style='symbols'>
             <t>Before sending a line of mail text, the SMTP client checks the first
              character of the line.  If it is a period, one additional period is
              inserted at the beginning of the line.</t>       
             <t>When a line of mail text is received by the SMTP server, it checks
              the line.  If the line is composed of a single period, it is treated
              as the end of mail indicator.  If the first character is a period and
              there are other characters on the line, the first
              character is deleted. </t>
          </list></t>
        <t> The mail data may contain any of the 128 ASCII characters.  All
          characters are to be delivered to the recipient's mailbox, including
          spaces, vertical and horizontal tabs, and other control characters.
          If the transmission channel provides an 8-bit byte (octet) data
          stream, the 7-bit ASCII codes are transmitted, right justified, in
          the octets, with the high-order bits cleared to zero.
          See <xref target='relaying'/> for special treatment of these conditions in
          SMTP systems serving a relay function.</t>
        <t>In some systems, it may be necessary to transform the data as it
          is received and stored.  This may be necessary for hosts that use
          a different character set than ASCII as their local character set,
          that store data in records rather than strings, or which use special
          character sequences as delimiters inside mailboxes.  If such transformations
          are necessary, they MUST be reversible, especially if they are applied
          to mail being relayed.</t>
      </section>
	  
      <section title='Sizes and Timeouts' anchor="sizesTimeouts"><!-- 4.5.3 -->
        <section title='Size Limits and Minimums' toc="include"><!-- 4.5.3.1 -->
          <t>There are several objects that have required minimum/maximum sizes.
            Every implementation MUST be able to receive objects of at least these
            sizes.  Objects larger than these sizes SHOULD be avoided when possible.
            However, some Internet mail constructs such as encoded X.400 addresses
            (<xref target='RFC2156'>RFC 2156</xref>) will often
			require larger objects.
            Clients MAY attempt to transmit these, but MUST be prepared for a server
            to reject them if they cannot be handled by it.  To the maximum extent
            possible, implementation techniques that impose no limits on the length
            of these objects should be used.</t>
		 <t> Extensions to SMTP may involve the use of characters that
			occupy more than a single octet each.  This section
			therefore specifies lengths in octets where absolute
			lengths, rather than character counts, are intended.</t> 
        
            <section title="Local-part" toc="include">
                  <t>The maximum total length of a user name or other
                  local-part is 64 octets.</t>
               </section>
            <section title='Domain' toc="include">
               <t>The maximum total length of a domain name or number
                  is 255 octets.</t>
               </section>
            <section title='Path' toc="include">
               <t>The maximum total length of a reverse-path or forward-path is 256
                  octets (including the punctuation and element
                  separators).</t>
               </section>
             <section title='Command Line' toc="include"
					 anchor="MaxCommandLine">
                <t>The maximum total length of a command line including the command
                    word and the &lt;CRLF&gt; is 512 octets.  SMTP extensions may
                    be used to increase this limit.</t>
                </section>
             <section title='Reply Line' toc="include">
                <t>The maximum total length of a reply line including the reply code
                    and the &lt;CRLF&gt; is 512 octets.  More information may be
                    conveyed through multiple-line replies.</t>
                 </section>
             <section title='Text Line' toc="include">
                <t>The maximum total length of a text line including the &lt;CRLF&gt;
                    is 1000 octets (not counting the leading dot duplicated for transparency).
                    This number may be increased by the use of SMTP
                    Service Extensions.</t>
                 </section>
             <section title='Message Content' toc="include">
                <t>The maximum total length of a message content (including any message
                    header section
                    as well as the message body) MUST BE at least 64K octets.
                    Since the introduction of Internet Standards for multimedia mail
                    (<xref target='RFC2045'>RFC 2045</xref>), message
					lengths on the Internet 
                    have grown dramatically, and message size restrictions should be
                    avoided if at all possible.  SMTP server systems that must impose
                    restrictions SHOULD implement the "SIZE" service
					extension of
					<xref target='RFC1870'>RFC 1870</xref>, and SMTP client systems that will 
                    send large messages SHOULD utilize it when
                    possible.</t>
                 </section>
             <section title='Recipients Buffer' toc="include">
                <t>The minimum total number of recipients that MUST be buffered is 100
                    recipients.  Rejection of messages (for excessive recipients) with
                    fewer than 100 RCPT commands is a violation of
					this specification.  The general principle
                    that relaying SMTP server MUST NOT, and delivery SMTP servers SHOULD
                    NOT, perform validation tests on message header
                    fields suggests that messages SHOULD NOT be rejected
                    based on the total number of recipients shown in header
                    fields.  A server that imposes a limit on the
                    number of recipients MUST behave in an orderly fashion,  such as
                    rejecting additional addresses over its limit rather than silently
                    discarding addresses previously accepted.  A client that needs to
                    deliver a message containing over 100 RCPT commands SHOULD be prepared
                    to transmit in 100-recipient "chunks" if the server declines to accept
                    more than 100 recipients in a single message.</t>
                 </section>
                 <section title="Treatment When Limits Exceeded"
                            toc="include">
                 <t>Errors due to exceeding these limits may be
                    reported by using the reply codes.  Some examples
                    of reply codes are: </t>
                 <t>
                    <list style='empty'>
                       <t>500 Line too long.</t>
                    </list>
                    or
                    <list style='empty'>
                       <t>501 Path too long</t>
                    </list>
                    or
                    <list style='empty'>
                       <t>452 Too many recipients  (see below)</t>
                    </list>
                    or
                    <list style='empty'>
                       <t>552 Too much mail data.</t>
                    </list>
                    </t>
                    </section>
                    <section title="Too Many Recipients Code"
                               toc="include">
                    <t><xref target='RFC0821'>RFC 821</xref> incorrectly listed the error
                      where an SMTP server exhausts its implementation limit on the number
                      of RCPT commands ("too many recipients") as having reply code 552.
                      The correct reply code for this condition is 452.  Clients SHOULD
                      treat a 552 code in this case as a temporary, rather than permanent,
                      failure so the logic below works.</t>
                   <t>When a conforming SMTP server encounters this condition, it has
                      at least 100 successful RCPT commands in its recipients buffer.
                      If the server is able to accept the message, then at least these
                      100 addresses will be removed from the SMTP client's queue.  When
                      the client attempts retransmission of those addresses that received
                      452 responses, at least 100 of these will be able to fit in the
                      SMTP server's recipients buffer.  Each retransmission attempt that
                      is able to deliver anything will be able to dispose of at least
                      100 of these recipients.</t>
                   <t>If an SMTP server has an implementation limit on the number of RCPT
                      commands and this limit is exhausted, it MUST use a response code
                      of 452 (but the client SHOULD also be prepared for a 552, as noted
                      above).  If the server has a configured site-policy limitation on
                      the number of RCPT commands, it MAY instead use a 5yz response code.
                      In particular, if the intent is to prohibit messages with more than
                      a site-specified number of recipients, rather than merely limit
                      the number of recipients in a given mail transaction, it would be
                      reasonable to return a 503 response to any DATA command received
                      subsequent to the 452 (or 552) code or to simply return the 503
                      after DATA without returning any previous
                      negative response.</t>
                    </section>
      </section>
      <section anchor='timeouts' title='Timeouts' toc="include"><!-- 4.5.3.2 -->
        <t>An SMTP client MUST provide a timeout mechanism.  It MUST use per-
          command timeouts rather than somehow trying to time the entire mail
          transaction.  Timeouts SHOULD be easily reconfigurable, preferably
          without recompiling the SMTP code.  To implement this, a timer is
          set for each SMTP command and for each buffer of the data transfer.
          The latter means that the overall timeout is inherently proportional
          to the size of the message.</t>
       <t> Based on extensive experience with busy mail-relay hosts, the minimum
          per-command timeout values SHOULD be as follows:</t>
       <section title='Initial 220 Message: 5 Minutes' toc="include">
          <t>An SMTP client process needs to distinguish between a failed TCP connection
          and a delay in receiving the initial 220 greeting message.  Many SMTP
          servers accept a TCP connection but delay delivery of the 220 message
          until their system load permits more mail to be
          processed.</t>
          </section>
        <section title='MAIL Command: 5 Minutes' toc="include">
           <t> </t>
           </section>
        <section title='RCPT Command: 5 Minutes' toc="include">
           <t>A longer timeout is required if processing of mailing lists and aliases
          is not deferred until after the message was accepted.</t>
           </section>
        <section title='DATA Initiation: 2 Minutes' toc="include">
           <t>This is while awaiting the "354 Start Input" reply to a
              DATA command.</t>
           </section>
        <section title='Data Block: 3 Minutes' toc="include">
           <t>This is while awaiting the completion of each TCP SEND
              call transmitting a chunk of data.</t>
           </section>
        <section title='DATA Termination: 10 Minutes.' toc="include">
           <t> This is while awaiting the "250 OK" reply.  When the receiver gets
          the final period terminating the message data, it typically performs
          processing to deliver the message to a user mailbox.  A spurious timeout
          at this point would be very wasteful and would typically result in
          delivery of multiple copies of the message, since it has been successfully
          sent and the server has accepted responsibility for delivery.  See
          <xref target='reliable_delivery'/> for additional
          discussion.</t>
          </section>
		<section title='Server Timeout: 5 Minutes.' toc="include">
          <t>An SMTP server SHOULD have a timeout of at least 5 minutes while
          it is awaiting the next command from the sender.</t>
	    </section>
      </section>
    </section>
    
    <section anchor='retry_strategies' title='Retry Strategies'><!-- 4.5.4 -->
      <t>
        The common structure of a host SMTP implementation includes user mailboxes,
        one or more areas for queuing messages in transit, and one or more
        daemon processes for sending and receiving mail.  The exact structure
        will vary depending on the needs of the users on the host and the
        number and size of mailing lists supported by the host.  We describe
        several optimizations that have proved helpful, particularly for mailers
        supporting high traffic levels.
      </t><t>
        Any queuing strategy MUST include timeouts on all activities on a
        per-command basis.  A queuing strategy MUST NOT send error messages
        in response to error messages under any circumstances.
      </t>
      <section anchor='sending_strategy' title='Sending Strategy'><!-- 4.5.4.1 -->
        <t>
          The general model for an SMTP client is one or more processes that
          periodically attempt to transmit outgoing mail.  In a typical system,
          the program that composes a message has some method for requesting
          immediate attention for a new piece of outgoing mail, while mail
          that cannot be transmitted immediately MUST be queued and periodically
          retried by the sender.  A mail queue entry will include not only
          the message itself but also the envelope information.
        </t><t>
          The sender MUST delay retrying a particular destination after one
          attempt has failed.  In general, the retry interval SHOULD be at
          least 30 minutes; however, more sophisticated and variable strategies
          will be beneficial when the SMTP client can determine the reason
          for non-delivery.
        </t><t>
          Retries continue until the message is transmitted or the sender
          gives up; the give-up time generally needs to be at least 4-5 days.
          It MAY be appropriate to set a shorter maximum number of retries
          for non-delivery notifications and equivalent error messages than
          for standard messages.
          The parameters to the retry algorithm MUST be configurable.
        </t><t>
          A client SHOULD keep a list of hosts it cannot reach and corresponding
          connection timeouts, rather than just retrying queued mail items.
        </t><t>
          Experience suggests that failures are typically transient (the target
          system or its connection has crashed), favoring a policy of two
          connection attempts in the first hour the message is in the queue,
          and then backing off to one every two or three hours.
        </t><t>
          The SMTP client can shorten the queuing delay in cooperation with
          the SMTP server.  For example, if mail is received from a particular
          address, it is likely that mail queued for that host can now be
          sent.  Application of this principle may, in many cases, eliminate
          the requirement for an explicit "send queues now" function such
          as ETRN, <xref target='RFC1985'>RFC 1985</xref>.
        </t><t>
          The strategy may be further modified as a result of multiple addresses
          per host (see below) to optimize delivery time versus resource usage.
        </t><t>
          An SMTP client may have a large queue of messages for each unavailable
          destination host.  If all of these messages were retried in every
          retry cycle, there would be excessive Internet overhead and the
          sending system would be blocked for a long period.  Note that an
          SMTP client can generally determine that a delivery attempt has
          failed only after a timeout of several minutes, and even a one-minute
          timeout per connection will result in a very large delay if retries
          are repeated for dozens, or even hundreds, of queued messages to
          the same host.
        </t><t>
          At the same time, SMTP clients SHOULD use great care in caching
          negative responses from servers.  In an extreme case, if EHLO is
          issued multiple times during the same SMTP connection, different
          answers may be returned by the server.  More significantly, 5yz
          responses to the MAIL command MUST NOT be cached.
        </t><t>
          When a mail message is to be delivered to multiple recipients, and
          the SMTP server to which a copy of the message is to be sent is
          the same for multiple recipients, then only one copy of the message
          SHOULD be transmitted.  That is, the SMTP client SHOULD use the
          command sequence: MAIL, RCPT, RCPT, ..., RCPT, DATA instead of the
          sequence: MAIL, RCPT, DATA, ..., MAIL, RCPT, DATA.  However, if
          there are very many addresses, a limit on the number of RCPT commands
          per MAIL command MAY be imposed.  This efficiency
          feature SHOULD be implemented.</t>
	   <t>
          Similarly, to achieve timely delivery, the SMTP client MAY support
          multiple concurrent outgoing mail transactions.  However, some limit
          may be appropriate to protect the host from devoting all its resources
          to mail.
        </t>
      </section>
      <section title='Receiving Strategy'><!-- 4.5.4.2 -->
        <t>The SMTP server SHOULD attempt to keep a pending listen on the SMTP
          port (specified by IANA as port 25)
          at all times.  This requires the support
          of multiple incoming TCP connections for SMTP.  Some limit MAY be
          imposed, but servers that cannot handle more than one SMTP transaction
          at a time are not in conformance with the intent of this specification.
        </t><t>
          As discussed above, when the SMTP server receives mail from a particular
          host address, it could activate its own SMTP queuing mechanisms
          to retry any mail pending for that host address.
        </t>
      </section>
    </section>
    <section anchor='messages_null_reverse_path'
              title='Messages with a Null Reverse-Path'><!-- 4.5.5 -->
      <t>
        There are several types of notification messages that are required
        by existing and proposed Standards 
		to be sent with a null reverse-path, namely non-delivery notifications as discussed in <xref target='mail_gatewaying'/>,
        other kinds of Delivery Status Notifications
		(DSNs, <xref target='RFC3461'>RFC 3461</xref>),
        and Message Disposition Notifications
		(MDNs, <xref target='RFC3798'>RFC 3798</xref>).
        All of these kinds of messages are notifications about a previous
        message, and they are sent to the reverse-path of the previous mail
        message.  (If the delivery of such a notification message fails, that
        usually indicates a problem with the mail system of the host to which
        the notification message is addressed.  For this reason, at some hosts
        the MTA is set up to forward such failed notification messages to
        someone who is able to fix problems with the mail system, e.g., via
        the postmaster alias.)
      </t><t>
        All other types of messages (i.e., any message which is not required
        by a Standards-Track RFC to have a null reverse-path) SHOULD be sent
        with a valid, non-null reverse-path.
      </t><t>
        Implementers of automated email processors should be careful to make
        sure that the various kinds of messages with a null reverse-path are
        handled correctly. In particular, such systems SHOULD NOT reply to
        messages with a null reverse-path, and they SHOULD NOT add a
		non-null reverse-path, or change a null reverse-path to a
		non-null one, to such messages when forwarding.</t>
    </section>
      </section>
    </section>
    <section anchor='address_resolution'
              title='Address Resolution and Mail Handling'><!-- 5 -->
       <section title="Locating the Target Host">
      <t>Once an SMTP client lexically identifies a domain to which mail will be
    delivered for processing (as described in Sections
	<xref target='domain_names' format="counter"/>
    and <xref target='relaying' format="counter"/>), a DNS lookup MUST be performed to resolve
    the domain name (<xref target='RFC1035'>RFC 1035</xref>).  The names are
    expected to be fully-qualified domain names (FQDNs): mechanisms for inferring
    FQDNs from partial names or local aliases are outside of this
    specification.  Due to a history of problems,
    SMTP servers used for initial submission of messages SHOULD NOT
    make such inferences (<xref target="RFC4409">Message Submission
       Servers</xref> have somewhat more flexibility) and intermediate
    (relay) SMTP servers MUST NOT make them.</t>
	<t>The lookup first attempts to locate an MX record associated
	   with the name. If a CNAME record is found, the resulting name
	   is processed as if it were the initial name. If a non-existent
	   domain error is returned, this situation MUST be reported as
	   an error. If a temporary error is returned, the message MUST
	   be queued and
	   retried later (see <xref target='sending_strategy'/>).
	   If an empty list of MXs is returned, the address is
	   treated as if it was associated with an implicit MX RR, with a
	   preference of 0, pointing to that host. If MX records are
	   present, but none of them are usable, or the implicit MX is
	   unusable, this situation MUST be reported as an error.</t>
 <t>If one or more MX RRs are found
    for a given name, SMTP systems MUST NOT utilize any address RRs associated with
    that name unless they are located using the MX RRs; the "implicit MX"
    rule above applies only if there are no MX records present.  If MX records
    are present, but none of them are usable, this situation MUST be reported
    as an error.</t>
 <t>When a domain name associated with an MX RR is looked up and the
	associated data field obtained, the data field of that response
	MUST contain a domain name.  That domain name, when queried, MUST
	return at least one address record (e.g., A or AAAA RR) that
	gives the IP address of the SMTP server to which the message
	should be directed. Any other response, specifically including a value that
	will return a CNAME record when queried, lies outside the scope of
	this Standard.  The prohibition on labels in the
	data that resolve to CNAMEs is discussed in more detail in
	<xref target="RFC2181">RFC 2181, Section 10.3</xref>.</t>
 <t> When the lookup succeeds, the mapping can result in a list of alternative
    delivery addresses rather than a single address, because of multiple MX
    records, multihoming, or both.  To provide reliable mail transmission,
    the SMTP client MUST be able to try (and retry) each of the relevant addresses
    in this list in order, until a delivery attempt succeeds.  However, there
    MAY also be a configurable limit on the number of alternate addresses
    that can be tried.  In any case, the SMTP client SHOULD try at least two
    addresses.
      </t><t>
    Two types of information are used to rank the host addresses: multiple
    MX records, and multihomed hosts.
      </t><t>
    MX records contain a preference indication that MUST be used in sorting
    if more than one such record appears (see below).  Lower numbers are more
    preferred than higher ones.  If there are multiple destinations with the
    same preference and there is no clear reason to favor one (e.g., by recognition
    of an easily reached address), then the sender-SMTP MUST randomize them
    to spread the load across multiple mail exchangers for a specific
    organization.</t>
 <t>
    The destination host (perhaps taken from the preferred MX record) may
    be multihomed, in which case the domain name resolver will return a list
    of alternative IP addresses.  It is the responsibility of the domain name
    resolver interface to have ordered this list by decreasing preference
    if necessary, and the SMTP sender MUST try them in the order presented.
      </t><t>
    Although the capability to try multiple alternative addresses is required,
    specific installations may want to limit or disable the use of alternative
    addresses.  The question of whether a sender should attempt retries using
    the different addresses of a multihomed host has been controversial.
    The main argument for using the multiple addresses is that it maximizes
    the probability of timely delivery, and indeed sometimes the probability
    of any delivery; the counter-argument is that it may result in unnecessary
    resource use.  Note that resource use is also strongly determined by the
    sending strategy discussed in <xref target='sending_strategy'/>.
      </t><t>
    If an SMTP server receives a message with a destination for which it is
    a designated Mail eXchanger, it MAY relay the message (potentially after
    having rewritten the MAIL FROM and/or RCPT TO addresses), make final delivery
    of the message, or hand it off using some mechanism outside the SMTP-provided
    transport environment.  Of course, neither of the latter require that
    the list of MX records be examined further.
      </t><t>
    If it determines that it should relay the message without rewriting the
    address, it MUST sort the MX records to determine candidates for delivery.
    The records are first ordered by preference, with the lowest-numbered
    records being most preferred.  The relay host MUST then inspect the list
    for any of the names or addresses by which it might be known in mail transactions.
    If a matching record is found, all records at that preference level and
    higher-numbered ones MUST be discarded from consideration.  If there are
    no records left at that point, it is an error condition, and the message
    MUST be returned as undeliverable.  If records do remain, they SHOULD
    be tried, best preference first, as described above.</t>
    </section>
    <section title="IPv6 and MX Records">
       <t>In the contemporary Internet, SMTP clients and servers
            may be hosted on IPv4 systems, IPv6 systems, or
            dual-stack systems that are compatible with either
            version of the Internet Protocol.  The host domains to
            which MX records point may, consequently, contain "A
            RR"s (IPv4), "AAAA RR"s (IPv6), or any combination of
            them.  While <xref target="RFC3974">RFC 3974</xref>
			discusses some operational 
            experience in mixed environments, it was not
            comprehensive enough to justify standardization, and some
            of its recommendations appear to be inconsistent with
            this specification.  The appropriate actions to be taken
            either will depend on local circumstances, such as
            performance of the relevant networks and any conversions
            that might be necessary, or will be obvious (e.g., an
            IPv6-only client need not attempt to look up A RRs or
            attempt to reach
            IPv4-only servers).  Designers of SMTP implementations
            that might run in IPv6 or dual-stack environments should study
            the procedures above, especially the comments about
            multihomed hosts, and, preferably, provide mechanisms to
            facilitate operational tuning and mail interoperability
            between IPv4 and IPv6 systems while considering local
            circumstances.</t>
    </section>
    </section>

    <section anchor='problem_detection'
              title='Problem Detection and Handling'><!-- 6 -->
      <section anchor='reliable_delivery'
                title='Reliable Delivery and Replies by Email'><!-- 6.1 -->
    <t>
      When the receiver-SMTP accepts a piece of mail (by sending a "250 OK"
      message in response to DATA), it is accepting responsibility for delivering
      or relaying the message.  It must take this responsibility seriously.
      It MUST NOT lose the message for frivolous reasons, such as because
      the host later crashes or because of a predictable resource shortage.
      Some reasons that are not considered frivolous are discussed in the
      next subsection and in <xref target='resistance_to_attacks'/>.
    </t><t>
      If there is a delivery failure after acceptance of a message, the receiver-SMTP
      MUST formulate and mail a notification message.  This notification MUST
      be sent using a null ("&lt;&gt;") reverse-path in the envelope.  The
      recipient of this notification MUST be the address from the envelope
      return path (or the Return-Path: line).  However, if this address is
      null ("&lt;&gt;"), the receiver-SMTP MUST NOT send a notification.
      Obviously, nothing in this section can or should prohibit local decisions
      (i.e., as part of the same system environment as the receiver-SMTP)
      to log or otherwise transmit information about null address events locally
      if that is desired.  If the address is an explicit source route, it
      MUST be stripped down to its final hop.
    </t><t>
      For example, suppose that an error notification must be sent for a message
      that arrived with:
        </t><t>
      <list style='empty'><t>
        MAIL FROM:&lt;@a,@b:user@d&gt;
      </t></list>
    </t><t>
      The notification message MUST be sent using:
        </t><t>
      <list style='empty'><t>
        RCPT TO:&lt;user@d&gt;
      </t></list>
    </t><t>
      Some delivery failures after the message is accepted by SMTP will be
      unavoidable.  For example, it may be impossible for the receiving SMTP
      server to validate all the delivery addresses in RCPT command(s) due
      to a "soft" domain system error, because the target is a mailing list
      (see earlier discussion of RCPT), or because the server is acting as
      a relay and has no immediate access to the delivering system.
    </t><t>
      To avoid receiving duplicate messages as the result of timeouts, a receiver-SMTP
      MUST seek to minimize the time required to respond to the final &lt;CRLF&gt;.&lt;CRLF&gt;
      end of data indicator.  See <xref target='RFC1047'>RFC 1047</xref> for a discussion of this problem.
    </t>
      </section>
      <section anchor='unwanted_messages'
                title='Unwanted, Unsolicited, and "Attack" Messages'> <!-- 6.2 --> 
    <t>Utility and predictability of the Internet mail system requires that
      messages that can be delivered should be delivered, regardless of any
      syntax or other faults associated with those messages and regardless
      of their content.  If they cannot be delivered, and cannot be rejected
      by the SMTP server during the SMTP transaction, they should be
      "bounced" (returned with non-delivery notification messages)
      as described above.  In today's world, in which many SMTP server operators
      have discovered that the quantity of undesirable bulk email vastly exceeds
      the quantity of desired mail and in which accepting a message may trigger
      additional undesirable traffic by providing verification of the address,
      those principles may not be practical.
    </t><t>
      As discussed in <xref target='resistance_to_attacks'/>
      and <xref target='scope_of_operation'/>
      below, dropping mail without notification of the sender is permitted
      in practice.  However, it is extremely dangerous and violates a long
      tradition and community expectations that mail is either delivered or
      returned.  If silent message-dropping is misused, it could easily undermine
      confidence in the reliability of the Internet's mail systems.  So silent
      dropping of messages should be considered only in those cases where
      there is very high confidence that the messages are seriously fraudulent
      or otherwise inappropriate.
    </t><t>
      To stretch the principle of delivery if possible even further, it may
      be a rational policy to not deliver mail that has an invalid return
      address, although the history of the network is that users are typically
      better served by delivering any message that can be delivered.  Reliably
      determining that a return address is invalid can be a difficult and
      time-consuming process, especially if the putative sending system is
      not directly accessible or does not  fully and accurately support VRFY
      and, even if a "drop messages with invalid return addresses" policy
      is adopted, it SHOULD be applied only when there is near-certainty that 
      the return addresses are, in fact, invalid.
    </t><t>
      Conversely, if a message is rejected because it is found to contain
      hostile content (a decision that is outside the scope of an SMTP server
      as defined in this document), rejection ("bounce") messages SHOULD NOT
      be sent unless the receiving site is confident that those messages will
      be usefully delivered.  The preference and default in these cases is
      to avoid sending non-delivery messages when the incoming message is
      determined to contain hostile content.
    </t>
      </section>
      <section anchor='loop_detection' title='Loop Detection'><!-- 6.3 -->
    <t>
      Simple counting of the number of "Received:" header fields
      in a message has
      proven to be an effective, although rarely optimal, method of detecting
      loops in mail systems.  SMTP servers using this technique SHOULD use
      a large rejection threshold, normally at least 100 Received entries.
      Whatever mechanisms are used, servers MUST contain provisions for detecting
      and stopping trivial loops.
    </t>
      </section>
      <section anchor='compensating_for_irregularities'
                title='Compensating for Irregularities'><!-- 6.4 -->
    <t>Unfortunately, variations, creative interpretations, and outright violations
      of Internet mail protocols do occur; some would suggest that they occur
      quite frequently.  The debate as to whether a well- behaved SMTP receiver
      or relay should reject a malformed message, attempt to pass it on unchanged,
      or attempt to repair it to increase the odds of successful delivery
      (or subsequent reply) began almost with the dawn of structured network
      mail and shows no signs of abating.  Advocates of rejection claim that
      attempted repairs are rarely completely adequate and that rejection
      of bad messages is the only way to get the offending software repaired.
      Advocates of "repair" or "deliver no matter what" argue that users prefer
      that mail go through it if at all possible and that there are significant
      market pressures in that direction.  In practice, these market pressures
      may be more important to particular vendors than strict conformance
      to the standards, regardless of the preference of the actual developers.
    </t><t>
      The problems associated with ill-formed messages were exacerbated by
      the introduction of the split-UA mail reading
      protocols (<xref target='RFC0937'>Post Office Protocol (POP) version 2</xref>,
      <xref target='RFC1939'>Post Office Protocol (POP) version 3</xref>,
      <xref target='RFC1176'>IMAP version 2</xref>, and
      <xref target='RFC1056'>PCMAIL</xref>).  These protocols encouraged
      the use of SMTP as a posting (message submission) protocol, and
      SMTP servers as relay systems 
      for these client hosts (which are often only intermittently connected
      to the Internet).  Historically, many of those client machines lacked
      some of the mechanisms and information assumed by SMTP (and indeed,
      by the mail format protocol, <xref target='RFC0822'>RFC 822</xref>).
      Some could not keep adequate track of time; others had no concept of
      time zones; still others could not identify their own names or addresses;
      and, of course, none could satisfy the assumptions that
	  underlay RFC 822's conception of authenticated addresses.
    </t><t>
      In response to these weak SMTP clients, many SMTP systems now complete
      messages that are delivered to them in incomplete or incorrect form.
      This strategy is generally considered appropriate when the server can
      identify or authenticate the client, and there are prior agreements
      between them.  By contrast, there is at best great concern about fixes
      applied by a relay or delivery SMTP server that has little or no knowledge
      of the user or client machine.  Many of these issues are
      addressed by using a separate protocol, such as that defined in
      <xref target="RFC4409">RFC 4409</xref>, for message submission,
      rather than using originating SMTP servers for that purpose.</t>
   <t>The following changes to a message being processed MAY be applied when
      necessary by an originating SMTP server, or one used as the target of
      SMTP as an initial posting (message submission) protocol:
        </t><t>
      <list style='symbols'>
        <t>Addition of a message-id field when none appears
        </t><t>Addition of a date, time, or time zone when none appears
        </t><t>Correction of addresses to proper FQDN format
        </t>
      </list>
    </t><t>
      The less information the server has about the client, the less likely
      these changes are to be correct and the more caution and conservatism
      should be applied when considering whether or not to perform fixes and
      how.  These changes MUST NOT be applied by an SMTP server that provides
      an intermediate relay function.
    </t><t>
      In all cases, properly operating clients supplying correct information
      are preferred to corrections by the SMTP server.  In all cases,
      documentation SHOULD be provided in trace header fields and/or header
      field comments for actions performed by the servers.</t>
      </section>
    </section>


    <section title='Security Considerations'
            anchor="security-consider"> <!-- 7 -->

      <section anchor='mail_security_and_spoofing'
                title='Mail Security and Spoofing'><!-- 7.1 -->
    <t>SMTP mail is inherently insecure in that it is feasible for even fairly
      casual users to negotiate directly with receiving and relaying SMTP
      servers and create messages that will trick a naive recipient into believing
      that they came from somewhere else.  Constructing such a message so
      that the "spoofed" behavior cannot be detected by an expert is somewhat
      more difficult, but not sufficiently so as to be a deterrent to someone
      who is determined and knowledgeable.  Consequently, as knowledge of
      Internet mail increases, so does the knowledge that SMTP mail inherently
      cannot be authenticated, or integrity checks provided, at the transport
      level.  Real mail security lies only in end-to-end methods involving
      the message bodies, such as those that use digital signatures (see
      <xref target='RFC1847'>RFC 1847</xref> and, e.g.,
      Pretty Good Privacy (PGP) in <xref target='RFC4880'>RFC 4880</xref>
      or Secure/Multipurpose Internet Mail Extensions (S/MIME) in <xref target='RFC3851'>RFC 3851</xref>).
    </t><t>
      Various protocol extensions and configuration options that provide authentication
      at the transport level (e.g., from an SMTP client to an SMTP server)
      improve somewhat on the traditional situation described above.
      However, in general, they only authenticate one server to another
      rather than a chain of relays and servers, much less
      authenticating users or user machines.  Consequently,
      unless they are accompanied by careful handoffs of responsibility in
      a carefully designed trust environment, they remain inherently weaker
      than end-to-end mechanisms that use digitally signed messages rather
      than depending on the integrity of the transport system.
    </t><t>
      Efforts to make it more difficult for users to set envelope return path
      and header "From" fields to point to valid addresses other than their
      own are largely misguided: they frustrate legitimate applications in
      which mail is sent by one user on behalf of another, in which error
      (or normal) replies should be directed to a special address, or
      in which a single message is sent to multiple recipients on
      different hosts.  (Systems
      that provide convenient ways for users to alter these header fields on a per-message
      basis should attempt to establish a primary and permanent mailbox address
      for the user so that Sender header fields within the message data can be generated
      sensibly.)
    </t><t>
      This specification does not further address the authentication issues
      associated with SMTP other than to advocate that useful functionality
      not be disabled in the hope of providing some small margin of protection
      against a user who is trying to fake mail.
    </t>
      </section>
      <section anchor='blind_copies' title='"Blind" Copies'><!-- 7.2 -->
    <t>Addresses that do not appear in the message header section
      may appear in the
      RCPT commands to an SMTP server for a number of reasons.  The two most
      common involve the use of a mailing address as a "list exploder" (a
      single address that resolves into multiple addresses) and the appearance
      of "blind copies".  Especially when more than one RCPT command is present,
      and in order to avoid defeating some of the purpose of these mechanisms,
      SMTP clients and servers SHOULD NOT copy the full set of RCPT command
      arguments into the header section,
      either as part of trace header fields or as informational 
      or private-extension header fields.  Since this rule is often violated in
      practice, and cannot be enforced, sending SMTP systems that are aware
      of "bcc" use MAY find it helpful to send each blind copy as a separate
      message transaction containing only a single RCPT command.
    </t><t>
      There is no inherent relationship between either "reverse" (from MAIL,
      SAML, etc., commands) or "forward" (RCPT) addresses in the SMTP transaction
      ("envelope") and the addresses in the header section.
      Receiving systems SHOULD
      NOT attempt to deduce such relationships and use them to alter
      the header section
      of the message for delivery.  The popular "Apparently-to" header
      field is
      a violation of this principle as well as a common source of unintended
      information disclosure and SHOULD NOT be used.
    </t>
      </section>
      <section anchor='vrfy_expn_security'
                title='VRFY, EXPN, and Security'><!-- 7.3 -->
    <t>As discussed in <xref target='commands_for_debugging_addresses'/>, individual
      sites may want to disable either or both of VRFY or EXPN for security
      reasons (see below).  As a corollary to the above, implementations that permit this
      MUST NOT appear to have verified addresses that are not, in fact, verified.
      If a site disables these commands for security reasons, the SMTP server
      MUST return a 252 response, rather than a code that could be confused
      with successful or unsuccessful verification.
    </t><t>
      Returning a 250 reply code with the address listed in the VRFY command
      after having checked it only for syntax violates this rule.  Of course,
      an implementation that "supports" VRFY by always returning 550 whether
      or not the address is valid is equally not in conformance.</t>
   <t>
	  On the public Internet, the contents of mailing lists have become
     popular as an address information source for so-called "spammers."
     The use of EXPN to "harvest" addresses has increased as list
     administrators have installed protections against inappropriate uses
     of the lists themselves.
     However, VRFY and EXPN are still useful for authenticated users and
     within an administrative domain. For example, VRFY and EXPN are
	 useful for performing internal audits of how email gets routed
	 to check and to make sure no one is automatically forwarding
	 sensitive mail outside the organization.
     Sites implementing SMTP authentication may choose to make VRFY
     and EXPN available only to authenticated requestors.
     Implementations SHOULD still provide support for EXPN, but sites
	 SHOULD carefully evaluate the tradeoffs.</t>
    <t>Whether disabling VRFY provides any real marginal security
      depends on a series of other conditions.  In many cases, RCPT
      commands can be used to 
      obtain the same information about address validity.   On the
      other hand, especially in situations where determination of address validity
      for RCPT commands is deferred until after the DATA command is
      received, RCPT may return no information at all, while VRFY is
      expected to make a serious attempt to determine validity before
      generating a response code (see discussion above). </t>
      </section>
      <section title="Mail Rerouting Based on the 251 and 551 Response
               Codes" anchor="Reroute_251_551">
         <t>Before a client uses the 251 or 551 reply codes from a
			RCPT command to automatically update its future behavior
			(e.g., updating the user's address book), it should be
			certain of the server's authenticity. If it does not, it
			may be subject to a man in the middle attack.</t>
         </section>
      <section title='Information Disclosure in Announcements'>
                     <!-- 7.4 -->
         <t>There has been an ongoing debate about the tradeoffs between the debugging
      advantages of announcing server type and version (and, sometimes, even
      server domain name) in the greeting response or in response to the HELP
      command and the disadvantages of exposing information that might be
      useful in a potential hostile attack.  The utility of the debugging
      information is beyond doubt.  Those who argue for making it available
      point out that it is far better to actually secure an SMTP server rather
      than hope that trying to conceal known vulnerabilities by hiding the
      server's precise identity will provide more protection.  Sites are encouraged
      to evaluate the tradeoff with that issue in mind;
      implementations SHOULD minimally provide for making type and version
      information available in some way to other network hosts.</t>
      </section>
    <section title='Information Disclosure in Trace Fields'><!-- 7.5 -->
    <t>In some circumstances, such as when mail originates from within a LAN
      whose hosts are not directly on the public Internet, trace ("Received")
      header fields produced in conformance with this specification may disclose
      host names and similar information that would not normally be available.
      This ordinarily does not pose a problem, but sites with special concerns
      about name disclosure should be aware of it.  Also, the optional FOR
      clause should be supplied with caution or not at all when multiple recipients
      are involved lest it inadvertently disclose the identities of "blind
      copy" recipients to others.
    </t>
      </section>
      <section title='Information Disclosure in Message Forwarding'><!-- 7.6 -->
    <t>
      As discussed in <xref target='forwarding_for_address_correction'/>,
      use of the 251 or 551 reply codes to identify the replacement address
      associated with a mailbox may inadvertently disclose sensitive information.
      Sites that are concerned about those issues should ensure that they
      select and configure servers appropriately.
    </t>
      </section>
      <section anchor='resistance_to_attacks' title='Resistance to Attacks'><!-- 7.7 -->
    <t>
      In recent years, there has been an increase of attacks on SMTP
      servers, either in conjunction with attempts
      to discover addresses for sending unsolicited messages or simply to
      make the servers inaccessible to others (i.e., as an
      application-level denial of service attack).  While the means of doing so
      are beyond the scope of this Standard, rational operational behavior
      requires that servers be permitted to detect such attacks and take action
      to defend themselves.  For example, if a server determines that a large
      number of RCPT TO commands are being sent, most or all with invalid
      addresses, as part of such an attack, it would be reasonable for the
      server to close the connection after generating an appropriate number
      of 5yz (normally 550) replies.
    </t>
      </section>
      <section anchor='scope_of_operation'
                title='Scope of Operation of SMTP Servers'><!-- 7.8 -->
    <t>
      It is a well-established principle that an SMTP server may refuse to
      accept mail for any operational or technical reason that makes sense
      to the site providing the server.  However, cooperation among sites
      and installations makes the Internet possible.  If sites take excessive
      advantage of the right to reject traffic, the ubiquity of email availability
      (one of the strengths of the Internet) will be threatened; considerable
      care should be taken and balance maintained if a site decides to be
      selective about the traffic it will accept and process.
    </t><t>
      In recent years, use of the relay function through arbitrary sites has
      been used as part of hostile efforts to hide the actual origins of mail.
      Some sites have decided to limit the use of the relay function to known
      or identifiable sources, and implementations SHOULD provide the capability
      to perform this type of filtering.  When mail is rejected for these
      or other policy reasons, a 550 code SHOULD be used in response to EHLO
      (or HELO), MAIL, or RCPT as appropriate.</t>
      </section>
    </section>
	
    <section title='IANA Considerations' anchor="IANAConsid"><!-- 8 -->
      <t>
    IANA maintains three registries in support of this
	specification, all of which were created for RFC 2821 or earlier.
	This document expands the third one as specified below.
	The registry references listed are as of the time of publication;
	IANA does not guarantee the locations associated with the URLs.
	The registries are as follows:
	<list style="symbols">
    <t>The first, "Simple Mail Transfer Protocol (SMTP) Service
	Extensions" <xref target="SMTPIANARegistry"/>, consists of SMTP
	service extensions with the associated keywords, 
    and, as needed, parameters and verbs.
    As specified in <xref target='definition_and_registration_of_extensions'/>,
    no entry may be made in this registry that starts in an "X".  Entries
    may be made only for service extensions (and associated keywords, parameters,
    or verbs) that are defined in Standards-Track or Experimental RFCs specifically
    approved by the IESG for this purpose.</t>
    <t>The second registry, "Address Literal Tags"
 <xref target="DomainLiteralRegistry"/>,
	   consists of "tags" that identify forms of domain literals
    other than those for IPv4 addresses (specified in RFC 821 and in this
    document).  The initial entry in that registry is for
	IPv6 addresses (specified in this document).  Additional 
    literal types require standardization before being used; none are
    anticipated at this time. </t>
   <t>  The third,
	"Mail Transmission Types" <xref target="SMTPIANARegistry"/>,
	established by RFC 821 and renewed by this specification, is 
    a registry of link and protocol identifiers to be used with the "via"
    and "with" subclauses of the time stamp ("Received:" header
	field) described 
    in <xref target='trace_information'/>.  Link and protocol identifiers
    in addition to those specified in this document may be registered only
    by standardization or by way of an RFC-documented, IESG-approved,
    Experimental protocol extension.   This name space is for
    identification and not limited
    in size: the IESG is encouraged to approve on the basis of clear
    documentation and a distinct method rather than preferences about
    the properties of the method itself.
   <vspace blankLines="1"/>
   An additional subsection has been added to the "VIA link types" and
   "WITH protocol types" subsections of this registry to contain
   registrations of "Additional-registered-clauses" as described
   above.  The registry will contain clause names, a description, a
   summary of the syntax of the associated String, and a reference.
   As new clauses are defined, they may, in principle, specify
   creation of their own registries if the Strings consist of reserved
   terms or keywords rather than less restricted strings.
   As with link and protocol identifiers, additional clauses 
     may be registered only
    by standardization or by way of an RFC-documented, IESG-approved,
    Experimental protocol extension.   The additional clause name
	space is for identification and is not limited
    in size: the IESG is encouraged to approve on the basis of clear
    documentation, actual use or strong signs that the clause will be used,
    and a distinct requirement rather than preferences about
    the properties of the clause itself. </t>
    </list>  </t>
    <t>In addition, if additional trace header fields (i.e., in addition to
	Return-path and Received) are ever created, those trace
    fields MUST be added to the IANA registry established by
	<xref target='RFC3864'>BCP 90 (RFC 3864)</xref> for use
    with <xref target='RFC5322'>RFC 5322</xref>.
      </t>
    </section>
    <section title='Acknowledgments'><!-- 11 -->
    <t>Many people contributed to the development of RFC 2821. That
    document should be consulted for those acknowledgments.  For the
    present document, the editor and the community owe thanks to Dawn
    Mann and Tony Hansen who assisted in the very painful process of
    editing and converting the internal format of the document from
    one system to another.</t>
     <t>Neither this document nor RFC 2821 would have been possible
		without the many contribution and insights of the late Jon
		Postel.  Those contributions of course include the original
		specification of SMTP in RFC 821.   A considerable quantity of
		text from RFC 821 still appears in this document as do several
		of Jon's original examples that have been updated only as
		needed to reflect other changes in the specification.</t> 
    <t> Many people made comments or suggestions on the mailing list
       or in notes to the author.  Important corrections or
       clarifications were suggested by several people, including
       Matti Aarnio, Glenn Anderson,
       Derek J. Balling, Alex van den Bogaerdt, Stephane Bortzmeyer,
       Vint Cerf, Jutta Degener,
       Steve Dorner, Lisa Dusseault, Frank Ellerman, Ned Freed,
        Randy Gellens, Sabahattin Gucukoglu, Philip Guenther, Arnt Gulbrandsen,
        Eric Hall, Richard O. Hammer, Tony Hansen, Peter J. Holzer,
		Kari Hurtta,
        Bryon Roche Kain, Valdis Kletnieks, Mathias Koerber,
        John Leslie, Bruce Lilly,
        Jeff Macdonald, Mark E. Mallett, Mark Martinec,
		S. Moonesamy, Lyndon Nerenberg, Chris Newman, Douglas Otis,
        Pete Resnick, Robert A. Rosenberg,
        Vince Sabio, Hector Santos, David F. Skoll, Paul Smith, 
        and Brett Watson. </t>
     <t> The efforts of the Area Directors -- Lisa Dusseault, Ted
        Hardie, and Chris Newman -- to get this effort restarted and
        keep it moving, and of an ad hoc committee with the same
        purpose, are gratefully acknowledged.  The members of that
        committee were (in alphabetical order) Dave Crocker,
        Cyrus Daboo, Tony Finch, Ned Freed, Randall Gellens,
        Tony Hansen, the author, and Alexey Melnikov.  Tony Hansen
        also acted as ad hoc chair on the mailing list reviewing this
        document; without his efforts, sense of balance and fairness,
		and patience, it clearly would not have been possible.</t>
    </section>

  </middle>

  <back>
    <references title='Normative References'>
	   
	   &rfc2119;
	   
      <reference anchor='ASCII'>
        <front>
          <title>USA Code for Information Interchange</title>
          <author>
            <organization abbrev="ANSI">
              American National Standards Institute
                (formerly United States of America Standards Institute)
        </organization>
          </author>
          <date year="1968"/>
        </front>
      <seriesInfo name="ANSI" value="X3.4-1968" />
      <annotation>ANSI X3.4-1968 has been replaced by newer
      versions with slight modifications, but the 1968 version
      remains definitive for the Internet. </annotation>
      </reference>

	&rfc1123;
	&rfc1870;   <!-- SIZE -->
	&rfc5234;
	&rfc4291;
	&rfc1035;
	&rfc0821;
    	&rfc3848;
	&rfc3864;

	<reference anchor="RFC5322">
	   <front>
		  <title>Internet Message Format</title>
		  <author surname="Resnick" initials="P."
				 fullname="Pete Resnick">
			 <organization>Qualcomm Incorporated</organization>
			 <address />
			 </author>
		  <date month="September" year='2008' />
		</front>
		<seriesInfo name="RFC"
               value='5322' />
</reference>
	   

	</references>
   
    <references title='Informative References'>
	&rfc3461;	<!-- DSN service extension -->
	&rfc3464;	<!-- DSN format -->
	   
	&rfc3974;   <!-- SMTP IPv6 experience -->
	&rfc4880;   <!-- OpenPGP -->

	&rfc0822;
	&rfc0937;
	&rfc0959;
	&rfc0974;
	&rfc1047;
	&rfc1056;
	&rfc1176;
	&rfc1652;
	&rfc1847;
	&rfc1869;
	&rfc1939;
	&rfc1985;
	&rfc2045;
	&rfc2047;
	&rfc2156;
	&rfc2181;
	&rfc2231;
	&rfc2821;
	&rfc2920;
	&rfc2979;
	&rfc3030;
	&rfc3463;
	&rfc3501;
	&rfc3798;
	&rfc3851;
	&rfc4408;
	&rfc4409;
	&rfc4686;
	&rfc4871;    <!-- DKIM -->
	&rfc5248;	 <!-- Enhanced code registry -->


<reference anchor="SMTPIANARegistry"
   target="http://www.iana.org/assignments/mail-parameters">
   <front>
	<title>IANA Mail Parameters</title>
	<author>
		<organization>Internet Assigned Number Authority (IANA) </organization> 
	</author>
	<date  year='2007' />
	</front>
</reference>

<reference anchor="DomainLiteralRegistry"
   target="http://www.iana.org/assignments/address-literal-tags">
   <front>
	<title>Address Literal Tags</title>
	<author>
		<organization>Internet Assigned Number Authority (IANA) </organization> 
	</author>
	<date  year='2007' />
	</front>
</reference>

</references>


    

<!-- Appendices 12 -->
      <section title='TCP Transport Service'><!-- A. -->
    <t>
      The TCP connection supports the transmission of 8-bit bytes.  The SMTP
      data is 7-bit ASCII characters.  Each character is transmitted as an
      8-bit byte with the high-order bit cleared to zero.  Service extensions
      may modify this rule to permit transmission of full 8-bit data bytes
      as part of the message body, or, if specifically designed to do
	  so, in SMTP commands or responses. 
    </t>
      </section>
      <section
       title='Generating SMTP Commands from RFC 822 Header Fields'><!-- B. -->
    <t>
      Some systems use an RFC 822 header section (only) in a mail submission protocol,
      or otherwise generate SMTP commands from RFC 822 header fields
      when such a
      message is handed to an MTA from a UA.  While the MTA-UA protocol is
      a private matter, not covered by any Internet Standard, there are problems
      with this approach.  For example, there have been repeated problems
      with proper handling of "bcc" copies and redistribution lists when information
      that conceptually belongs to the mail envelope is not separated early
      in processing from header field information (and kept separate).
    </t><t>
      It is recommended that the UA provide its initial ("submission client")
      MTA with an envelope separate from the message itself.  However, if
      the envelope is not supplied, SMTP commands SHOULD be generated
	  as follows: </t>
    <t>
      <list style='numbers'>
        <t>Each recipient address from a TO, CC, or BCC header field SHOULD
          be copied to a RCPT command (generating multiple message copies
          if that is required for queuing or delivery).  This includes any
          addresses listed in a RFC 822 "group".  Any BCC header fields SHOULD then
          be removed from the header section.  Once this process is completed, the
          remaining header fields SHOULD be checked to verify that at least one
          TO, CC, or BCC header field remains.  If none do, then a BCC
          header field with no additional information SHOULD be inserted as
          specified in <xref target="RFC5322"/>.  </t>
       <t>The return address in the MAIL command SHOULD, if possible,
          be derived from the system's identity for the submitting (local)
          user, and the "From:" header field otherwise.  If there is a system
          identity available, it SHOULD also be copied to the Sender header
          field if it is different from the address in the From header field.
          (Any Sender header field that was already there SHOULD be
		  removed.)  Systems 
          may provide a way for submitters to override the envelope return
          address, but may want to restrict its use to privileged users.
          This will not prevent mail forgery, but may lessen its incidence;
          see <xref target='mail_security_and_spoofing'/>.
        </t>
      </list>
    </t><t>
      When an MTA is being used in this way, it bears responsibility for ensuring
      that the message being transmitted is valid.  The mechanisms for checking
      that validity, and for handling (or returning) messages that are not
      valid at the time of arrival, are part of the MUA-MTA interface and
      not covered by this specification.
    </t><t>
      A submission protocol based on Standard RFC 822 information alone MUST
      NOT be used to gateway a message from a foreign (non-SMTP) mail system
      into an SMTP environment.  Additional information to construct an envelope
      must come from some source in the other environment, whether supplemental
      header fields or the foreign system's envelope.
    </t><t>
      Attempts to gateway messages using only their header "To" and
	  "Cc" fields
      have repeatedly caused mail loops and other behavior adverse to the
      proper functioning of the Internet mail environment.  These problems
      have been especially common when the message originates from an Internet
      mailing list and is distributed into the foreign environment using envelope
      information.  When these messages are then processed by a
      header-section-only
      remailer, loops back to the Internet environment (and the mailing list)
      are almost inevitable.
    </t>
      </section>
      <section anchor='source_routes' title='Source Routes'><!-- C. -->
    <t> Historically, the &lt;reverse-path&gt; was a reverse source routing
      list of hosts and a source mailbox.  The first host in the &lt;reverse-path&gt;
      was historically the host sending the MAIL command; today,
      source routes SHOULD NOT appear in the reverse-path.
      Similarly, the &lt;forward-path&gt;
      may be a source routing lists of hosts and a destination mailbox.  However,
      in general, the &lt;forward-path&gt; SHOULD contain only a mailbox and
      domain name, relying on the domain name system to supply routing information
      if required.  The use of source routes is deprecated
      (see <xref target='source_routing'/>); while servers
      MUST be prepared to receive and handle them as discussed
      in <xref target='mail_transactions'/>
      and <xref target='source_routing'/>, clients SHOULD NOT transmit them
      and this section is included in the current specification only
      to provide context.  It has 
      been modified somewhat from the material in RFC 821 to prevent
      server actions that might confuse clients or subsequent servers
      that do not expect a full source route implementation.</t>
   <t>For relay purposes, the forward-path may be a source route of the form
      "@ONE,@TWO:JOE@THREE", where ONE, TWO, and THREE MUST be fully-qualified
      domain names.  This form is used to emphasize the distinction between
      an address and a route.  The mailbox (here, JOE@THREE) is an
      absolute address, and the 
      route is information about how to get there.  The two concepts should
      not be confused.
    </t><t>
      If source routes are used, RFC 821 and the text below should be consulted
      for the mechanisms for constructing and updating the
      forward-path.  A server that is reached by means of a source
      route (e.g., its domain name appears first in the list in the
      forward-path) MUST remove its domain name from any forward-paths
      in which that domain name appears before forwarding the message
      and MAY remove all other source routing information.  The
      reverse-path SHOULD NOT be updated by servers 
      conforming to this specification. </t>
   <t> Notice that the forward-path and reverse-path appear in the SMTP commands
      and replies, but not necessarily in the message.  That is, there is
      no need for these paths and especially this syntax to appear in the
      "To:" , "From:", "CC:", etc. fields of the message header
      section.  Conversely,
      SMTP servers MUST NOT derive final message routing information from
      message header fields.</t>
   <t> When the list of hosts is present despite the recommendations
      above, it is a "reverse" source route and
      indicates that the mail was relayed through each host on the list (the
      first host in the list was the most recent relay).  This list is used
      as a source route to return non-delivery notices to the sender.
      If, contrary to the recommendations here, a relay host adds
      itself to the beginning of the list, it MUST use 
      its name as known in the transport environment to which it is relaying
      the mail rather than that of the transport environment from which the
      mail came (if they are different).  Note that a situation could
      easily arise in which some relay hosts add their names to the
      reverse source route and others do not, generating
      discontinuities in the routing list.   This is another reason
      why servers needing to return a message SHOULD ignore the source
      route entirely and simply use the domain as specified in the
      Mailbox.</t>
      </section>
   <section anchor='scenarios' title='Scenarios'><!-- D. -->
     <t> This section presents complete scenarios of several types of SMTP sessions.
      In the examples, "C:" indicates what is said by the SMTP client, and
      "S:" indicates what is said by the SMTP server.
    </t>
    <section title='A Typical SMTP Transaction Scenario'><!-- D.1 -->
      <t>
        This SMTP example shows mail sent by Smith at host
		bar.com, and to Jones,
        Green, and Brown at host foo.com.  Here we assume that host bar.com
        contacts host foo.com directly.  The mail is accepted for Jones and
        Brown.  Green does not have a mailbox at host foo.com.
          </t><t>
        <list><t>
          S: 220 foo.com Simple Mail Transfer Service Ready<vspace/>
          C: EHLO bar.com<vspace/>
          S: 250-foo.com greets bar.com<vspace/>
          S: 250-8BITMIME<vspace/>
          S: 250-SIZE<vspace/>
          S: 250-DSN<vspace/>
          S: 250 HELP<vspace/>
          C: MAIL FROM:&lt;Smith@bar.com&gt;<vspace/>
          S: 250 OK<vspace/>
          C: RCPT TO:&lt;Jones@foo.com&gt;<vspace/>
          S: 250 OK<vspace/>
          C: RCPT TO:&lt;Green@foo.com&gt;<vspace/>
          S: 550 No such user here<vspace/>
          C: RCPT TO:&lt;Brown@foo.com&gt;<vspace/>
          S: 250 OK<vspace/>
          C: DATA<vspace/>
          S: 354 Start mail input; end with &lt;CRLF&gt;.&lt;CRLF&gt;<vspace/>
          C: Blah blah blah...<vspace/>
          C: ...etc. etc. etc.<vspace/>
          C: .<vspace/>
          S: 250 OK<vspace/>
          C: QUIT<vspace/>
          S: 221 foo.com Service closing transmission channel<vspace/>
        </t></list>
      </t>
    </section>
    <section title='Aborted SMTP Transaction Scenario'><!-- D.2 -->
      <t>
            <list><t>
          S: 220 foo.com Simple Mail Transfer Service Ready<vspace/>
          C: EHLO bar.com<vspace/>
          S: 250-foo.com greets bar.com<vspace/>
          S: 250-8BITMIME<vspace/>
          S: 250-SIZE<vspace/>
          S: 250-DSN<vspace/>
          S: 250 HELP<vspace/>
          C: MAIL FROM:&lt;Smith@bar.com&gt;<vspace/>
          S: 250 OK<vspace/>
          C: RCPT TO:&lt;Jones@foo.com&gt;<vspace/>
          S: 250 OK<vspace/>
          C: RCPT TO:&lt;Green@foo.com&gt;<vspace/>
          S: 550 No such user here<vspace/>
          C: RSET<vspace/>
          S: 250 OK<vspace/>
          C: QUIT<vspace/>
          S: 221 foo.com Service closing transmission channel<vspace/>
            </t></list>
      </t>
    </section>
    <section title='Relayed Mail Scenario'><!-- D.3 -->
      <t>
        Step 1  --  Source Host to Relay Host
	  <vspace blankLines="1"/>
	  	The source host performs a DNS lookup on XYZ.COM (the
		destination address) and finds DNS MX records specifying
		xyz.com as the best preference and foo.com as a lower
		preference.  It attempts to open a connection to xyz.com
		and fails.  It then opens a connection to foo.com, with
		the following dialogue:</t>
	  <t>
		 <list><t>
          S: 220 foo.com Simple Mail Transfer Service Ready<vspace/>
          C: EHLO bar.com<vspace/>
          S: 250-foo.com greets bar.com<vspace/>
          S: 250-8BITMIME<vspace/>
          S: 250-SIZE<vspace/>
          S: 250