<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3688 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml">
<!ENTITY RFC4648 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml">
<!ENTITY RFC5730 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5730.xml">
<!ENTITY RFC5731 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5731.xml">
<!ENTITY RFC7942 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7942.xml">
<!ENTITY RFC7451 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7451.xml">
<!ENTITY RFC8174 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="yes"?>

<rfc number="8495"
     category="std" 
     submissionType="IETF"
     consensus="yes"
     ipr="trust200902">

  <front>
    <title abbrev="Allocation Token">
    Allocation Token Extension for&nbsp;the&nbsp;Extensible&nbsp;Provisioning&nbsp;Protocol&nbsp;(EPP)</title>

    <author fullname="James Gould" initials="J.G" surname="Gould">
      <organization>VeriSign, Inc.</organization>

      <address>
        <postal>
          <street>12061 Bluemont Way</street>

          <city>Reston</city>

          <region>VA</region>

          <code>20190</code>

          <country>United States of America</country>
        </postal>

        <email>jgould@verisign.com</email>

        <uri>http://www.verisign.com</uri>
      </address>
    </author>

 	<author fullname="Kal Feher" initials="K.F" surname="Feher">
       <organization>Neustar</organization>

       <address>
          <postal>
             <street>lvl 8/10 Queens Road</street>

             <city>Melbourne</city>

             <region>VIC</region>

             <code>3004</code>

             <country>Australia</country>
          </postal>

         <email>ietf@feherfamily.org</email>

         <uri>http://www.neustar.biz</uri>
      </address>
    </author>

    <date month="November" year="2018"/>

    <abstract>
      <t>This document describes an Extensible Provisioning Protocol (EPP)
      extension for including an Allocation Token in "query" and "transform" commands.
      The Allocation Token is used as a credential that authorizes a client to
      request the allocation of a specific object from the server using one
      of the EPP transform commands, including "create" and "transfer".</t>
    </abstract>

  </front>

  <middle>
    <section title="Introduction">
      <t>This document describes an extension mapping for version 1.0 of the
      <xref target="RFC5730">Extensible Provisioning Protocol (EPP)</xref>.
      This mapping, which is an extension to EPP object mappings similar to the <xref
      target="RFC5731">EPP domain name mapping</xref>, supports passing
      an Allocation Token as a credential
      that authorizes a client to request the allocation of a specific object
      from the server using one of the EPP transform commands, including "create" and "transfer".</t>
      <t>Allocation is when a server assigns the sponsoring client of an object based on the
      use of an Allocation Token credential.  Examples include allocating a registration based on a
      pre-eligibility Allocation Token, allocating a premium domain name registration based on an
      auction Allocation Token, allocating a registration based on a founders Allocation Token,
      and allocating an existing domain name held by the server or by a different sponsoring
      client based on an Allocation Token that is passed with a transfer command.</t>
      <t>Clients pass an Allocation Token to the server for validation,
      and the server determines if the supplied Allocation Token is one supported by the server.
      It is up to server policy which EPP transform commands and which objects require
      the Allocation Token.  The Allocation Token MAY be returned to an
      authorized client for passing out-of-band to a client that
      uses it with an EPP transform command.</t>

      <section title="Conventions Used in This Document">
        <t>
    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
    "MAY", and "OPTIONAL" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>

        <t>XML is case sensitive. Unless stated otherwise, XML specifications
        and examples provided in this document MUST be interpreted in the
        character case presented in order to develop a conforming
        implementation.</t>

        <t>In examples, "C:" represents lines sent by a protocol client and "S:" represents lines returned by a protocol server.
        Indentation and white space in the examples are provided only to
        illustrate element relationships and are not REQUIRED in the protocol.</t>

        <t>The XML namespace prefix "allocationToken" is used for the namespace
   "urn:ietf:params:xml:ns:allocationToken-1.0", but implementations MUST NOT depend on
        it and instead employ
        a proper namespace-aware XML parser and serializer to interpret and
        output the XML documents.</t>

        <t>The "abc123" token value is used as a placeholder value in the examples.  The server MUST
        support token values that follow the Security Considerations 
	(<xref target="securityConsiderations"/>).</t>

        <t>The domain-object attribute values, including the "2fooBAR" &lt;domain:pw&gt; value, in the examples are
        provided for illustration purposes only.  Refer to <xref target="RFC5731"/> for
        details on the domain-object attributes.</t>
      </section>
    </section>

    <section anchor="attrs" title="Object Attributes">

      <t>This extension adds additional elements to EPP object mappings
      similar to the <xref
      target="RFC5731">EPP domain name mapping</xref>. Only those new elements
      are described here.</t>

      <section anchor="allocationToken" title="Allocation Token">

        <t>The Allocation Token is a simple XML "token" type.  The exact
        format of the Allocation Token is up to server policy.  The server
        MAY have the Allocation Token for each object to match against the
        Allocation Token passed by the client to authorize the allocation of
        the object.  The &lt;allocationToken:allocationToken&gt; element
        is used for all of the supported EPP commands as well as the
        info response.  If the supplied Allocation Token passed to the server does not
        apply to the object, the server MUST
        return an EPP error result code of 2201.</t>

        <t>Authorization information, similar to what is defined in the <xref
        target="RFC5731">EPP domain name mapping</xref>,
        is associated with objects to facilitate transfer operations.
        The authorization information is assigned when an object is created.
        The Allocation Token and the authorization information are both credentials
        but are used for different purposes and in different ways.  The Allocation Token is
        used to facilitate the allocation of an object instead of transferring the
        sponsorship of the object.  The Allocation Token is not managed by the client
        but is validated by the server to authorize assigning the initial
        sponsoring client of the object.</t>


       <figure>
            <preamble>An example &lt;allocationToken:allocationToken&gt; element
            with value of "abc123":</preamble>

            <artwork><![CDATA[
<allocationToken:allocationToken xmlns:allocationToken=
          "urn:ietf:params:xml:ns:allocationToken-1.0">
  abc123
</allocationToken:allocationToken>]]></artwork>
       </figure>

      </section>

    </section>

    <section anchor="commands" title="EPP Command Mapping">
      <t>A detailed description of the EPP syntax and semantics can be found
      in the EPP core protocol specification <xref target="RFC5730"/>.</t>

      <section anchor="queryCommands" title="EPP Query Commands">

        <t>EPP provides three commands to retrieve object information: &lt;check&gt; to determine
        if an object can be provisioned, &lt;info&gt; to retrieve  information associated
        with an object, and &lt;transfer&gt; to retrieve object-transfer status information.</t>

      <section anchor="checkCommand" title="EPP &lt;check&gt; Command">

       <t>This extension defines additional elements to extend the EPP &lt;check&gt;
        command of an object mapping similar to the mapping specified in <xref target="RFC5731"/>.</t>
	   <t>This extension allows clients to check the availability of an
	   object with an Allocation Token, as described in <xref target="allocationToken"/>.
	   Clients can check if an object can be created using the Allocation Token.  The Allocation Token is applied to all object names included
	   in the EPP &lt;check&gt; command.</t>

       <figure>
            <preamble>The following is an example &lt;check&gt; command for the allocation.example domain name using
            the &lt;allocationToken:allocationToken&gt; extension with the allocation
            token of 'abc123':</preamble>

            <artwork><![CDATA[
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <check>
C:      <domain:check
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
C:        <domain:name>allocation.example</domain:name>
C:      </domain:check>
C:    </check>
C:    <extension>
C:      <allocationToken:allocationToken
C:        xmlns:allocationToken=
C:          "urn:ietf:params:xml:ns:allocationToken-1.0">
C:        abc123
C:      </allocationToken:allocationToken>
C:    </extension>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>]]></artwork>
       </figure>
          <t>If the query was successful, the server replies with a &lt;check&gt; response providing
             the availability status of the queried object based on the following Allocation Token cases where the object is otherwise available:</t>
          <t><list style="numbers">
            <t>If an object requires an Allocation Token and the Allocation Token does apply to the object,
            then the server MUST return the availability status as available
	    (e.g., the "avail" attribute is "1" or "true").</t>
            <t>If an object requires an Allocation Token and the Allocation Token does not apply to the object,
            then the server SHOULD return the availability status as
	    unavailable (e.g., the "avail" attribute is "0" or "false").</t>
            <t>If an object does not require an Allocation Token, the server
	    MAY return the availability status as available (e.g., the "avail" attribute is "1" or "true").</t>
          </list></t>

          <figure>
            <preamble>The following is an example &lt;check&gt; domain response for a &lt;check&gt; command
            using the &lt;allocationToken:allocationToken&gt; extension:</preamble>

            <artwork>
<![CDATA[
S:<?xml version="1.0" encoding="UTF-8"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S: <response>
S:  <result code="1000">
S:   <msg lang="en-US">Command completed successfully</msg>
S:  </result>
S:  <resData>
S:   <domain:chkData
S:     xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
S:    <domain:cd>
S:     <domain:name avail="1">allocation.example</domain:name>
S:    </domain:cd>
S:   </domain:chkData>
S:  </resData>
S:  <trID>
S:   <clTRID>ABC-DEF-12345</clTRID>
S:   <svTRID>54321-XYZ</svTRID>
S:  </trID>
S: </response>
S:</epp>]]></artwork>
          </figure>


       <figure>
            <preamble>The following is an example &lt;check&gt; command with the &lt;allocationToken:allocationToken&gt;
            extension for the allocation.example and allocation2.example domain names.  Availability of
			allocation.example and allocation2.example domain names are based on the Allocation Token 'abc123':</preamble>

            <artwork>
<![CDATA[
C:<?xml version="1.0" encoding="UTF-8"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C: <command>
C:  <check>
C:   <domain:check
C:     xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
C:    <domain:name>allocation.example</domain:name>
C:    <domain:name>allocation2.example</domain:name>
C:   </domain:check>
C:  </check>
C:  <extension>
C:   <allocationToken:allocationToken
C:     xmlns:allocationToken=
C:       "urn:ietf:params:xml:ns:allocationToken-1.0">
C:     abc123
C:   </allocationToken:allocationToken>
C:  </extension>
C:  <clTRID>ABC-DEF-12345</clTRID>
C: </command>
C:</epp>]]></artwork>
       </figure>

          <figure>
            <preamble>The following is an example &lt;check&gt; domain response for multiple domain names in
            the &lt;check&gt; command using the &lt;allocationToken:allocationToken&gt;
            extension, where the Allocation Token 'abc123' matches allocation.example but
            does not match allocation2.example:</preamble>

            <artwork>
<![CDATA[
S:<?xml version="1.0" encoding="UTF-8"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S: <response>
S:  <result code="1000">
S:   <msg lang="en-US">Command completed successfully</msg>
S:  </result>
S:  <resData>
S:   <domain:chkData
S:     xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
S:    <domain:cd>
S:     <domain:name avail="1">allocation.example</domain:name>
S:    </domain:cd>
S:    <domain:cd>
S:     <domain:name avail="0">allocation2.example</domain:name>
S:     <domain:reason>Allocation Token mismatch</domain:reason>
S:    </domain:cd>
S:   </domain:chkData>
S:  </resData>
S:  <trID>
S:   <clTRID>ABC-DEF-12345</clTRID>
S:   <svTRID>54321-XYZ</svTRID>
S:  </trID>
S: </response>
S:</epp>]]></artwork>
          </figure>

       <t>This extension does not add any elements to the EPP &lt;check&gt; response
       described in <xref target="RFC5730"/>.</t>

      </section>

      <!-- end CHECK command -->

      <section anchor="infoCommand" title="EPP &lt;info&gt; Command">

        <t>This extension defines additional elements to extend the EPP
        &lt;info&gt; command of an object mapping similar to the mapping specified in <xref target="RFC5731"/>.</t>

       <t>The EPP &lt;info&gt; command allows a client to request information associated with an
       existing object.
       Authorized clients MAY retrieve the Allocation Token (<xref target="allocationToken"/>) along with the
       other object information by supplying the &lt;allocationToken:info&gt; element in the command.


       The &lt;allocationToken:info&gt;
       element is an empty element that serves as a marker to the server to
       return the &lt;allocationToken:allocationToken&gt; element in the info response.  If the client is not
       authorized to receive the Allocation Token, the server MUST
       return an EPP error result code of 2201.  If the client is authorized to
       receive the Allocation Token, but there is no Allocation Token
       associated with the object, the server MUST return an EPP error result code of
       2303.  The
       authorization is subject to server policy.</t>

       <figure>
            <preamble>The following is an example &lt;info&gt; command with the allocationToken:info
            extension for the allocation.example domain name:</preamble>

            <artwork><![CDATA[
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:   <info>
C:    <domain:info
C:      xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
C:      <domain:name>allocation.example</domain:name>
C:    </domain:info>
C:   </info>
C:   <extension>
C:      <allocationToken:info
C:        xmlns:allocationToken=
C:          "urn:ietf:params:xml:ns:allocationToken-1.0"/>
C:   </extension>
C:   <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>]]></artwork>
       </figure>

          <t>
          If the query was successful, the server replies with an &lt;allocationToken:allocationToken&gt; element
          along with the regular EPP &lt;resData&gt;.  The &lt;allocationToken:allocationToken&gt; element is
          described in <xref target="allocationToken"/>.
          </t>

          <figure>
            <preamble>The following is an example &lt;info&gt; domain response using the
            &lt;allocationToken:allocationToken&gt; extension:</preamble>

            <artwork><![CDATA[
S:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
S:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
S:  <response>
S:    <result code="1000">
S:      <msg>Command completed successfully</msg>
S:    </result>
S:    <resData>
S:      <domain:infData
S:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
S:        <domain:name>allocation.example</domain:name>
S:        <domain:roid>EXAMPLE1-REP</domain:roid>
S:        <domain:status s="pendingCreate"/>
S:        <domain:registrant>jd1234</domain:registrant>
S:        <domain:contact type="admin">sh8013</domain:contact>
S:        <domain:contact type="tech">sh8013</domain:contact>
S:        <domain:clID>ClientX</domain:clID>
S:        <domain:crID>ClientY</domain:crID>
S:        <domain:crDate>2012-04-03T22:00:00.0Z</domain:crDate>
S:        <domain:authInfo>
S:          <domain:pw>2fooBAR</domain:pw>
S:        </domain:authInfo>
S:      </domain:infData>
S:    </resData>
S:    <extension>
S:      <allocationToken:allocationToken
S:        xmlns:allocationToken=
S:          "urn:ietf:params:xml:ns:allocationToken-1.0">
S:        abc123
S:      </allocationToken:allocationToken>
S:    </extension>
S:    <trID>
S:      <clTRID>ABC-12345</clTRID>
S:      <svTRID>54321-XYZ</svTRID>
S:    </trID>
S:  </response>
S:</epp>]]></artwork>
          </figure>

      </section>
      <!-- end INFO command -->

      <section anchor="transferQueryCommand" title="EPP &lt;transfer&gt; Query Command">

       <t>This extension does not add any elements to the EPP &lt;transfer&gt; query command
       or &lt;transfer&gt; query response described in <xref target="RFC5730"/>.</t>

      </section>
      <!-- end TRANSFER QUERY command -->

      </section>

      <section anchor="transformCommands" title="EPP Transform Commands">

        <t>EPP provides five commands to transform objects: &lt;create&gt; to create an instance of an object,
        &lt;delete&gt; to delete an instance of an object, &lt;renew&gt; to extend the validity period of an object,
        &lt;transfer&gt; to manage object sponsorship changes, and &lt;update&gt; to change information associated
        with an object.</t>

      <section anchor="createCommand" title="EPP &lt;create&gt; Command">

       <t>This extension defines additional elements to extend the EPP
        &lt;create&gt; command of an object mapping similar to the mapping specified in <xref target="RFC5731"/>.</t>

       <t>The EPP &lt;create&gt; command provides a transform operation that allows a client to create an instance of an object.
       In addition to the EPP command elements described in an object mapping similar to the mapping specified in <xref target="RFC5731"/>, the command MUST contain a
       child &lt;allocationToken:allocationToken&gt; element for the client to be authorized to create and allocate the object.
       If the Allocation Token does not apply to the object, the server MUST return an EPP error result code of 2201.</t>

       <figure>
            <preamble>The following is an example &lt;create&gt; command to create a domain object with an Allocation Token:</preamble>

            <artwork><![CDATA[
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <create>
C:      <domain:create
C:       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
C:        <domain:name>allocation.example</domain:name>
C:        <domain:registrant>jd1234</domain:registrant>
C:        <domain:contact type="admin">sh8013</domain:contact>
C:        <domain:contact type="tech">sh8013</domain:contact>
C:        <domain:authInfo>
C:          <domain:pw>2fooBAR</domain:pw>
C:        </domain:authInfo>
C:      </domain:create>
C:    </create>
C:    <extension>
C:      <allocationToken:allocationToken
C:        xmlns:allocationToken=
C:          "urn:ietf:params:xml:ns:allocationToken-1.0">
C:        abc123
C:      </allocationToken:allocationToken>
C:    </extension>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>]]></artwork>
       </figure>

       <t>This extension does not add any elements to the EPP &lt;create&gt; response described
       in <xref target="RFC5730"/>.</t>

      </section>
      <!-- end CREATE command -->

      <section anchor="deleteCommand" title="EPP &lt;delete&gt; Command">

       <t>This extension does not add any elements to the EPP &lt;delete&gt; command
       or &lt;delete&gt; response described in <xref target="RFC5730"/>.</t>

      </section>
      <!-- end DELETE command -->

      <section anchor="renewCommand" title="EPP &lt;renew&gt; Command">

       <t>This extension does not add any elements to the EPP &lt;renew&gt; command
       or &lt;renew&gt; response described in <xref target="RFC5730"/>.</t>

      </section>
      <!-- end RENEW command -->

      <section anchor="transferCommand" title="EPP &lt;transfer&gt; Command">

       <t>This extension defines additional elements to extend the EPP
        &lt;transfer&gt; command of an object mapping similar to the mapping specified in <xref target="RFC5731"/>.</t>

       <t>The EPP &lt;transfer&gt; command provides a transform operation that allows a client to request the
       transfer of an object.
       In addition to the EPP command elements described in an object mapping similar to the mapping specified in <xref target="RFC5731"/>, the command MUST contain a
       child &lt;allocationToken:allocationToken&gt; element for the client to be authorized to
       transfer and allocate the object.  The authorization associated with the Allocation Token is in addition to, and
       does not replace, the authorization mechanism defined for the object's &lt;transfer&gt; command.
       If the Allocation Token is invalid or not required for the object,
       the server MUST return an EPP error result code of 2201.</t>
       <t>
       </t>

       <figure>
            <preamble>The following is an example &lt;transfer&gt; command to allocate the domain object with
            the Allocation Token:</preamble>

            <artwork><![CDATA[
C:<?xml version="1.0" encoding="UTF-8" standalone="no"?>
C:<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
C:  <command>
C:    <transfer op="request">
C:      <domain:transfer
C:        xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
C:        <domain:name>example1.tld</domain:name>
C:        <domain:period unit="y">1</domain:period>
C:        <domain:authInfo>
C:          <domain:pw>2fooBAR</domain:pw>
C:        </domain:authInfo>
C:      </domain:transfer>
C:    </transfer>
C:    <extension>
C:      <allocationToken:allocationToken
C:        xmlns:allocationToken=
C:          "urn:ietf:params:xml:ns:allocationToken-1.0">
C:        abc123
C:      </allocationToken:allocationToken>
C:    </extension>
C:    <clTRID>ABC-12345</clTRID>
C:  </command>
C:</epp>]]></artwork>
       </figure>

       <t>This extension does not add any elements to the EPP &lt;transfer&gt; response described
       in <xref target="RFC5730"/>.</t>

      </section>
      <!-- end TRANSFER command -->

      <section anchor="updateCommand" title="EPP &lt;update&gt; Command">

       <t>This extension does not add any elements to the EPP &lt;update&gt; command
       or &lt;update&gt; response described in <xref target="RFC5730"/>.</t>

      </section>
      <!-- end UPDATE command -->

    </section>

    </section>

    <!-- EPP command mapping -->

    <section anchor="syntax" title="Formal Syntax">

<t>
   One schema is presented here: the EPP Allocation Token
   Extension schema.
</t>

      <t>The formal
      syntax presented here is a complete schema representation of the object
      mapping suitable for automated validation of EPP XML instances. The
      BEGIN and END tags are not part of the schema; they are used to note the
      beginning and ending of the schema for URI registration purposes.</t>

    <section title="Allocation Token Extension Schema">

      <figure>
        <artwork><![CDATA[
BEGIN
<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
  xmlns:allocationToken="urn:ietf:params:xml:ns:allocationToken-1.0"
  targetNamespace="urn:ietf:params:xml:ns:allocationToken-1.0"
  elementFormDefault="qualified">
  <annotation>
    <documentation>
      Extensible Provisioning Protocol v1.0
      Allocation Token Extension
    </documentation>
  </annotation>

  <!-- Element used in info command to get allocation token. -->
  <element name="info">
    <complexType>
      <complexContent>
        <restriction base="anyType" />
      </complexContent>
    </complexType>
  </element>

  <!-- Allocation Token used in transform
    commands and info response -->
  <element name="allocationToken"
    type="allocationToken:allocationTokenType" />
  <simpleType name="allocationTokenType">
    <restriction base="token">
      <minLength value="1" />
    </restriction>
  </simpleType>

<!-- End of schema. -->
</schema>
END]]></artwork>
      </figure>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">

    	<section anchor="IANA-XML-Namespace" title="XML Namespace">
         <t>
             This document uses URNs to describe XML namespaces and XML schemas
             conforming to a registry mechanism described in <xref target="RFC3688"/>.
         </t>

         <t>The allocationToken namespace has been registered as follows.</t>

         <t><list>
         <t>URI: urn:ietf:params:xml:ns:allocationToken-1.0</t>

         <t>Registrant Contact: IESG</t>

         <t>XML: None. Namespace URIs do not represent an XML specification.</t>
         </list></t>

         <t>The allocationToken XML schema has been registered as follows.</t>

         <t><list>
         <t>URI: urn:ietf:params:xml:schema:allocationToken-1.0</t>

         <t>Registrant Contact: IESG</t>

         <t>XML: See the "Formal Syntax" section of this document.</t>

         </list></t>

       </section>

       <section anchor="EPP-Extension-Registry" title="EPP Extension Registry">

       	<t>The following entry has been added to the Extensions for the
	Extensible Provisioning Protocol (EPP) registry, as described in <xref target="RFC7451"/>.</t>

   <t>
   Name of Extension: Allocation Token Extension for the Extensible Provisioning Protocol (EPP)
   </t>

   <t>
   Document Status: Standards Track
   </t>

   <t>
   Reference: RFC 8495
   </t>

   <t>
   Registrant: IESG &lt;iesg@ietf.org&gt;
   </t>

   <t>
   TLDs: Any
   </t>

   <t>
   IPR Disclosure: None
   </t>

   <t>
   Status: Active
   </t>

   <t>
   Notes: None
   </t>

       </section>

    </section>

    <section anchor="securityConsiderations" title="Security Considerations">
      <t>The mapping described in this document does not provide any
      security services beyond those described by <xref
      target="RFC5730">EPP</xref> and protocol layers used by EPP. The security
      considerations described in these other specifications apply to this
      specification as well.</t>
      <t>The mapping acts as a conduit for the passing of Allocation Tokens
      between a client and a server.  The definition of the Allocation Token SHOULD be defined outside of this mapping.
      The following are security considerations
      in the definition and use of an Allocation Token:</t>
      <t><list style="numbers">
        <t>An Allocation Token should be considered secret information by the
	client; it SHOULD be protected at rest and MUST be protected in transit.</t>
        <t>An Allocation Token should be single use, meaning it should be unique per object and per allocation operation.</t>
        <t>An Allocation Token should have a limited life with some form of
	expiry in the Allocation Token, if generated by a trusted third party,
        or with a server-side expiry, if generated by the server.</t>
        <t>An Allocation Token should use a strong random value if it is based on an unsigned code.</t>
        <t>An Allocation Token should leverage digital signatures to confirm its authenticity if generated by a trusted third party.</t>
        <t>An Allocation Token that is signed XML should be encoded (e.g., <xref target="RFC4648">base64</xref>) to mitigate server validation issues.</t>
      </list></t>
    </section>

  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>

    <references title="Normative References">

      &RFC2119;

      &RFC3688;

      &RFC5730;

      &RFC5731;

      &RFC8174;

    </references>

    <references title="Informative References">

      &RFC4648;

      &RFC7451;

    </references>

<section title="Acknowledgements" anchor="Acknowledgements" numbered="no">
<t>The authors wish to acknowledge the original concept for this document and
the efforts in the initial draft versions of this document by Trung Tran and Sharon
Wodjenski.</t>

<t>Special suggestions that have been incorporated into this document were
provided by Ben Campbell, Scott Hollenbeck, Benjamin Kaduk, Mirja Kuehlewind,
Rubens Kuhl, Alexander Mayrhofer, Patrick Mevzek, Eric Rescoria, and Adam Roach.</t>
</section>
  </back>

</rfc>
