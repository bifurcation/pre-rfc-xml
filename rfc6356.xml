<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY RFC0793 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.0793.xml">
  <!ENTITY RFC6181 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6181.xml">
  <!ENTITY RFC5681 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5681.xml">
  <!ENTITY RFC3465 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3465.xml">

]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="no" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc rfcedstyle="yes"?>

<rfc submissionType="IETF" consensus="yes" number="6356" category="exp" ipr="trust200902">
  <front>
    <title abbrev="MPTCP Congestion Control">Coupled Congestion Control for Multipath Transport Protocols</title>
    <author fullname="Costin Raiciu" initials="C." surname="Raiciu">
      <organization>University Politehnica of Bucharest</organization>
      <address>
        <postal>
          <street>Splaiul Independentei 313</street>
          <city>Bucharest</city>
          <code></code>
          <country>Romania</country>
        </postal>
        <email>costin.raiciu@cs.pub.ro</email>
      </address>
    </author>

    <author fullname="Mark Handley" initials="M." surname="Handley">
      <organization>University College London</organization>
      <address>
        <postal>
          <street>Gower Street</street>
          <city>London</city>
          <code>WC1E 6BT</code>
          <country>UK</country>
        </postal>
        <email>m.handley@cs.ucl.ac.uk</email>
      </address>
    </author>

    <author fullname="Damon Wischik" initials="D." surname="Wischik">
      <organization>University College London</organization>
      <address>
        <postal>
          <street>Gower Street</street>
          <city>London</city>
          <code>WC1E 6BT</code>
          <country>UK</country>
        </postal>
        <email>d.wischik@cs.ucl.ac.uk</email>
      </address>
    </author>

    <date  month="October" year="2011" />

    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>multipath tcp congestion control</keyword>


    <abstract>
      <t>Often endpoints are connected by multiple paths, but communications are 
usually restricted to a single path per connection. Resource usage within the network 
would be more efficient were it possible for these multiple paths to be used concurrently. 
Multipath TCP is a proposal to achieve multipath transport in TCP.</t>

      <t>New congestion control algorithms are needed for multipath transport protocols 
such as Multipath TCP, as single path algorithms have a series of issues in the multipath context. 
One of the prominent problems is that running existing algorithms such 
as standard TCP independently on each path would give the multipath flow 
more than its fair share at a bottleneck link traversed by more than one of its subflows. 
Further, it is desirable that 
a source with multiple paths available will transfer more traffic using the least congested of the paths, 
achieving a property called "resource pooling" where a bundle of links effectively behaves like one 
shared link with bigger capacity. 
This would increase the overall efficiency of the network and also its 
robustness to failure.</t>

      <t>This document presents a congestion control algorithm that couples the congestion control
algorithms running on different subflows by linking their increase functions, and dynamically controls 
the overall aggressiveness of the multipath flow. The result is a practical algorithm
that is fair to TCP at bottlenecks while moving traffic away from congested links. </t>
    </abstract>
  </front>

  <middle>

   <section title="Introduction" anchor="sec_intro">
      <t>Multipath TCP (MPTCP, <xref target="MPTCP-MULTIADDRESSED"/>) is a set of extensions to regular TCP 
<xref target="RFC0793"/> that allows one TCP connection to be spread across multiple paths. MPTCP distributes load 
through the creation of separate "subflows" across potentially disjoint paths.</t>

<t>How should congestion control be performed for multipath TCP? First, each subflow must have its own
congestion control state (i.e., cwnd) so that capacity on that path is matched by offered load. 
The simplest way to achieve this goal is to simply run standard TCP congestion control
on each subflow. However, this solution is unsatisfactory as it gives the multipath flow an unfair share
when the paths taken by its different subflows share a common bottleneck.</t>

<t>Bottleneck fairness is just one requirement multipath congestion control should meet. The 
following three goals capture the desirable properties of a practical multipath congestion control algorithm:
<list style="symbols">
<t>Goal 1 (Improve Throughput) A multipath flow should perform at least as well as a single path flow would on the best 
of the paths available to it. </t>
<t>Goal 2 (Do no harm) A multipath flow should not take up more
     capacity from any of the resources shared by its different paths than if it were a single flow
     using only one of these paths.  This guarantees it will not unduly harm
     other flows.</t>
<t>Goal 3 (Balance congestion) A multipath flow should move as much traffic as possible off its most congested paths, 
subject to meeting the first two goals.</t>
</list>
</t>

<t>Goals 1 and 2 together ensure fairness at the bottleneck. Goal 3 captures the concept of resource pooling 
<xref target="WISCHIK"/>: if each multipath flow sends more data through its least congested path, the traffic in the
network will move away from congested areas. This improves robustness and overall throughput, among other things. 
The way to achieve resource pooling is to effectively "couple" the congestion control loops for 
the different subflows. 
</t>

<t>We propose an algorithm that couples the additive increase function of the subflows,
and uses unmodified TCP behavior in case of a drop. The algorithm relies on the traditional
TCP mechanisms to detect drops, to retransmit data, etc.</t>

<t>Detecting shared bottlenecks reliably is quite difficult, but is just one part of a bigger question.
This bigger question is how much bandwidth a multipath user should use in total, even if there is no shared
bottleneck.</t>

<t>The congestion controller aims to set the multipath flow's aggregate bandwidth to be the same as that of a regular
TCP flow would get on the best path available to the multipath flow. 
To estimate the bandwidth of a
regular TCP flow, the multipath flow estimates loss rates and round-trip times (RTTs) and computes the target 
rate. Then, it adjusts the overall aggressiveness (parameter alpha) to achieve the desired rate. 
</t>

<t>While the mechanism above applies always, its effect depends on whether the multipath TCP flow influences or does 
not influence the link loss rates (low versus high statistical multiplexing).
If MPTCP does not influence link loss rates, MPTCP will get the same throughput as TCP on the best path.
In cases with low statistical multiplexing, where the multipath flow influences the loss rates on the 
path, the multipath throughput will be strictly higher than that a single TCP would get on any of the paths. 
In particular, if using two idle paths, multipath throughput will be sum of the two paths' throughput.</t>

<t>This algorithm ensures bottleneck fairness and fairness in the broader, network sense. 
We acknowledge that current TCP fairness criteria are far from
ideal, but a multipath TCP needs to be deployable in the current 
Internet. If needed, new fairness criteria can be implemented by 
the same algorithm we propose by appropriately scaling the overall aggressiveness.</t>

      <t>It is intended that the algorithm presented here can be applied to other multipath transport protocols, 
such as alternative multipath extensions to TCP, or indeed any other congestion-aware transport protocols. However, 
for the purposes of example, this document will, where appropriate, refer to the MPTCP.</t>

<t>The design decisions and evaluation of the congestion control algorithm are published in <xref target="NSDI"/>.
</t>

<t>The algorithm presented here only extends standard TCP congestion control for multipath operation. 
It is foreseeable that other congestion controllers will be implemented for multipath transport
 to achieve the bandwidth-scaling properties of the newer congestion control algorithms for regular TCP (such 
as Compound TCP and Cubic). </t>

<!--<t>each aiming to achieve different properties in the resource pooling/fairness/stability design space. In 
particular, solutions that give better resource pooling may be proposed. This algorithm is conservative 
from this point of view, sacrificing resource pooling for stability.</t>-->
</section>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref target="RFC2119">RFC 2119</xref>
	  .</t>
      </section>

<section title="Coupled Congestion Control Algorithm" anchor="sec_cc">

<t>The algorithm we present only applies to the increase phase of the congestion avoidance 
state specifying how the window inflates upon receiving an ACK. 
The slow start, fast retransmit, and fast 
recovery algorithms, as well as the multiplicative decrease of the congestion avoidance state
 are the same as in standard TCP <xref target="RFC5681"/>.</t>

<t>Let cwnd_i be the congestion window on the subflow i. Let cwnd_total be the sum of the congestion windows of all
subflows in the connection.
Let p_i, rtt_i, and MSS_i be the loss rate, 
round-trip time (i.e., smoothed round-trip time estimate used by TCP), 
and maximum segment size on subflow i. </t>

<t>We assume throughout this document that the congestion window is maintained 
in bytes, unless otherwise specified. We briefly describe the algorithm for
packet-based implementations of cwnd in section <xref target="sec_impl_packet"/>. 
</t>

<t>Our proposed "Linked Increases" algorithm MUST:
<list style="symbols">
<t>For each ACK received on subflow i, increase cwnd_i by 
<figure>
           <artwork align="left"><![CDATA[           
               alpha * bytes_acked * MSS_i   bytes_acked * MSS_i
         min ( --------------------------- , ------------------- )  (1)
                        cwnd_total                   cwnd_i
            ]]></artwork>
</figure>
</t>

<!--<t>For each drop event on subflow i, decrease set ssthresh_i to max(cwnd_i/2,2*MSS_i), and
set cwnd_i to ssthresh_i + 3*MSS_i. A drop
event is one or more packet drops experienced by a subflows in the same round trip time. </t>-->

</list>
</t>

<!--<t>The decrease function is the
same as in TCP New Reno, so we will not discuss it further in the remainder of this document.</t>-->

<t>The increase formula (1) takes the minimum between the computed increase for the multipath 
subflow (first argument to min), and the increase TCP would get in the same scenario (the second argument).
In this way, we ensure that any multipath subflow cannot be more aggressive than a TCP flow in the same circumstances,
hence achieving Goal 2 (do no harm).
</t> 

<t>"alpha" is a parameter of the algorithm that describes the aggresiveness of the multipath flow.
To meet Goal 1 (improve throughput), the value of alpha 
is chosen such that the aggregate throughput of the multipath flow is equal to the throughput a TCP flow would get if it ran on 
the best path. </t>

<t>To get an idea of what the algorithm is trying to do, let's take the case where all the 
subflows have the same round-trip time and Maximum Segment Size (MSS). In this case, the algorithm will grow the total 
window by approximately alpha*MSS per RTT. 
This increase is distributed to the individual flows according to their instantaneous window size. 
Subflow i will increase by alpha*cwnd_i/cwnd_total segments per RTT.</t> 

<t>Note that, as in standard TCP, when cwnd_total is large the increase may be 0. In this case, 
the increase MUST be set to 1. We discuss how to implement this formula in 
practice in the next section. </t>

<t>We assume implementations use an approach similar to appropriate byte counting (ABC, <xref target="RFC3465"/>), where
 the bytes_acked variable records the number of bytes newly acknowledged. If this is not the case, bytes_acked 
SHOULD be set to MSS_i.</t>

<t>To compute cwnd_total, it is an easy mistake to sum up cwnd_i across all subflows: when a flow is in fast retransmit,
its cwnd is typically inflated and no longer represents the real congestion window. The correct behavior is to use 
the ssthresh (slow start threshold) value for flows in fast retransmit when computing cwnd_total. To cater to connections that are app limited,
the computation should consider the minimum between flight_size_i and cwnd_i, and flight_size_i and ssthresh_i, where 
appropriate.
</t>

<t>The total throughput of a multipath flow depends on the value of alpha and the loss rates, maximum segment sizes, 
and round-trip times of its paths. Since we require
that the total throughput is no worse than the throughput a single TCP would get on the best path, it is 
impossible to choose, a priori, a single value of alpha that achieves the desired throughput in every occasion. Hence, alpha
must be computed based on the observed properties of the paths. </t>

<t>
The formula to compute alpha is:
</t>

<figure>
           <artwork align="left"><![CDATA[           

                     MAX (cwnd_i/rtt_i^2)  
alpha = cwnd_total * -------------------------           (2) 
                     (SUM (cwnd_i/rtt_i))^2 

            ]]></artwork>
</figure>
<t>Note: </t>
<t>MAX (x_i) means the maximum value for any possible value of i.</t>
<t>SUM (x_i) means the summation for all possible values of i.</t>

<t>The formula (2) is derived by equalizing the rate of the multipath flow with the 
rate of a TCP running on the best path, and solving for alpha.
</t>

</section>

<section title="Implementation Considerations">
<t>
  Equation (2) implies that alpha is a floating point value. This would require 
performing costly floating point operations whenever an ACK is received.  Further, in many kernels,
floating point operations are disabled. There is an easy way to approximate the above calculations
using integer arithmetic. 
</t>

<section title="Computing &quot;alpha&quot; in Practice">
<t>Let alpha_scale be an integer. When computing alpha, use alpha_scale * cwnd_total instead of cwnd_total and
do all the operations in integer arithmetic. </t>

<t>Then, scale down the increase per ACK by alpha_scale. The resulting algorithm is a simple change from Equation (1):
<list style="symbols">
<t>For each ACK received on subflow i, increase cwnd_i by:
<figure>
           <artwork align="left"><![CDATA[           
               alpha * bytes_acked * MSS_i   bytes_acked * MSS_i
         min ( --------------------------- , ------------------- )  (3)
                alpha_scale * cwnd_total              cwnd_i
            ]]></artwork>
</figure>
</t>
</list>
</t>

<t>The alpha_scale parameter denotes the precision we want for computing alpha. 
Observe that the errors in computing the numerator or the
denominator in the formula for alpha are quite small, as the cwnd in bytes is typically much larger than the RTT
(measured in ms). </t>

<t>With these changes, all the operations can be done using integer arithmetic. We propose alpha_scale be 
a small power of two, to allow using faster shift operations instead of multiplication and division. 
Our experiments show that using alpha_scale=512 works well in a wide range of scenarios. 
Increasing alpha_scale increases precision, but also increases the risk of overflow when computing alpha. 
Using 64-bit operations would solve this issue. Another option is to dynamically adjust alpha_scale when 
computing alpha; in this way, we avoid overflow and obtain maximum precision.
</t>

<t>
It is possible to implement the algorithm by calculating cwnd_total on each ack; however, this would be costly
especially when the number of subflows is large. To avoid this overhead, the implementation MAY choose to 
 maintain a new per-connection state variable called "cwnd_total". If it does so, the implementation will update the
cwnd_total value whenever the individual subflow's windows are updated.
Updating only requires one more addition 
or subtraction operation compared to the regular, per-subflow congestion control code, so its performance impact 
should be minimal. </t>

<t>Computing alpha per ACK is also costly. We propose alpha be a per-connection variable, 
computed whenever there is a drop and once per RTT otherwise. More specifically, let cwnd_new be the
new value of the congestion window after it is inflated or after a drop. 
Update alpha only if the quotient of cwnd_i/MSS_i differs from the quotient of cwnd_new_i/MSS_i. 
</t>

<t>In certain cases with small RTTs, computing alpha can still be expensive. We observe that if RTTs were constant, 
it is sufficient to compute alpha once per drop, as alpha does not change between drops (the insight here is that 
cwnd_i/cwnd_j = constant as long as both windows increase). Experimental 
results show that even if round-trip times are
not constant, using average round-trip time per sawtooth instead of instantaneous round-trip time (i.e., TCP's smoothed
RTT estimator) gives good precision for computing alpha. Hence, it is possible to compute  
alpha only once per drop using a modified version of equation (2) where rtt_i is replaced with rtt_avg_i. 
</t>

<t>If using average round-trip time, rtt_avg_i will be computed by sampling 
the rtt_i whenever the window can accommodate one more packet, i.e.,
when cwnd / MSS &lt; (cwnd+increase)/MSS. The samples are averaged once per sawtooth into rtt_avg_i. 
This sampling ensures that there is no sampling bias for larger windows.</t>

<t>Given cwnd_total and alpha, the congestion control algorithm is run for each subflow 
independently, with similar complexity to the standard TCP increase code
<xref target="RFC5681"/>. </t>
</section>
<section title="Implementation Considerations when CWND is Expressed in Packets" anchor="sec_impl_packet">

<t>When the congestion control algorithm maintains cwnd in packets rather than bytes, 
the algorithms above must change to take into account path MSS. 
</t>

<t>To compute the increase when an ACK is received, the implementation for multipath
congestion control is a simple extension of the standard TCP code.  
In standard, TCP cwnd_cnt is an additional state variable that tracks the number of 
segments acked since the last cwnd increment; cwnd is incremented only 
when cwnd_cnt > cwnd; then, cwnd_cnt is set to 0. </t>

<t>In the multipath case, cwnd_cnt_i is maintained for each 
subflow as above, and cwnd_i is increased by 1 when 
cwnd_cnt_i > max(alpha_scale * cwnd_total / alpha, cwnd_i). 
</t>

<t>When computing alpha for packet-based stacks, the errors in computing the
terms in the denominator are larger (this is because cwnd is much smaller and rtt may
be comparatively large). Let max be the index of the subflow used in the numerator. 
To reduce errors, it is easiest to move rtt_max (once calculated)
from the numerator to the denominator, changing equation (2) to obtain the 
equivalent formula below. </t>

<figure>
           <artwork align="left"><![CDATA[
                                                                 (4)

                                              cwnd_max
alpha = alpha_scale * cwnd_total * ------------------------------------   
                                   (SUM ((rtt_max * cwnd_i) / rtt_i))^2

            ]]></artwork>
</figure>


<t>Note that the calculation of alpha does not take into account path MSS
and is the same for stacks that keep cwnd in bytes or packets. 
With this formula, the
algorithm for computing alpha will match the rate of TCP on the best path
in B/s for byte-oriented stacks, and in packets/s in packet-based stacks. 
In practice, MSS rarely changes between paths so this shouldn't be a problem.</t>

<t> 
However, it is simple to derive formulae allowing packet-based stacks to 
achieve byte rate fairness (and vice versa) if needed. In particular, for packet-based stacks  
wanting byte-rate fairness, equation (4) above changes as follows: cwnd_max is replaced by 
cwnd_max * MSS_max * MSS_max, while cwnd_i is replaced with cwnd_i * MSS_i. 
</t>
</section>   

</section>

<section title="Discussion">

<t>The algorithm we've presented fully achieves Goals 1 and 2, but does not achieve full resource pooling (Goal 3).
Resource pooling requires that no traffic should be transferred on links with higher loss rates.
To achieve perfect resource pooling, one must couple both increase and decrease of congestion windows across subflows,
as in <xref target="KELLY"/>.</t>

<t>There are a few problems with such a fully coupled controller. First, it will insufficiently probe 
paths with high loss rates and will fail to detect free capacity when it becomes available. 
Second, such controllers tend to exhibit "flappiness": when the paths have similar levels of 
congestion, the congestion controller will tend to allocate all the window to one random subflow 
and allocate zero window to the other subflows. The controller will perform random flips between 
these stable points. This doesn't seem desirable in general, and is particularly bad when the 
achieved rates depend on the RTT (as in the current Internet): in such a case,
the resulting rate with fluctuate unpredictably depending on which state the controller is in, 
hence violating Goal 1. </t>

<t>By only coupling increases our proposal probes high loss paths, detecting free capacity quicker.
Our proposal does not suffer from flappiness but also achieves less resource pooling. 
The algorithm will allocate window to the subflows such that p_i * cwnd_i = constant, for all i. Thus, 
when the loss rates of the subflows are equal, each subflow will get an equal window, removing flappiness.  
When the loss rates differ, progressively more windows will be allocated to the flow with the lower loss rate. 
In contrast, perfect resource pooling requires that all the window should be allocated on the path with the lowest
loss rate. Further details can be found in <xref target="NSDI" />.</t>

</section>

    <section title="Security Considerations" anchor="sec_security">
      <t>One security concern relates to what we call the traffic-shifting attack: on-path attackers can 
drop packets belonging to a multipath subflow, which, in turn, makes the path seem congested and will force
 the sender's congestion controller to avoid that path and push more data over alternate
subflows. </t>
<t>The attacker's goal is to create congestion on the corresponding alternative paths. This 
behavior is entirely feasible but will only have minor effects: by design, the coupled congestion 
controller is less (or similarly) aggressive
on any of its paths than a single TCP flow. Thus, the biggest effect this attack can have is to make a multipath 
subflow be as aggressive as a single TCP flow. 
</t>

<t>
Another effect of the traffic-shifting attack is that the new path can monitor all the traffic, whereas before it could
only see a subset of traffic. We believe that if privacy is needed, splitting traffic across multiple paths
with MPTCP is not the right solution in the first place; end-to-end encryption should be used instead.
</t>

      <t>Besides the traffic-shifting attack mentioned above, the coupled congestion control algorithm defined 
in this document adds no other security considerations to those found in <xref target="MPTCP-MULTIADDRESSED" /> and
<xref target="RFC6181"/>. Detailed security analysis for the Multipath TCP protocol itself is
included in <xref target="MPTCP-MULTIADDRESSED" /> and <xref target="RFC6181"/>.  </t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>We thank Christoph Paasch for his suggestions for computing alpha in packet-based stacks. The authors are supported by Trilogy (http://www.trilogy-project.org), a research project (ICT-216372) partially funded by the European Community under its Seventh Framework Program.  The views expressed here are those of the author(s) only.  The European Commission is not liable for any use that may be made of the information in this document.</t>
</section>

    <!-- Possibly a 'Contributors' section ... -->

  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
 <?rfc rfcedstyle="no" ?>
    <references title="Normative References">

    &RFC2119;

      &RFC0793;

      &RFC5681;

    </references>

    <references title="Informative References">
      &RFC3465;

      &RFC6181;

<!--      &I-D.ietf-mptcp-multiaddressed; I-D exists-->



<reference anchor='MPTCP-MULTIADDRESSED'>
<front>
<title>TCP Extensions for Multipath Operation with Multiple Addresses</title>

<author initials='A' surname='Ford' fullname='Alan Ford'>
    <organization />
</author>

<author initials='C' surname='Raiciu' fullname='Costin Raiciu'>
    <organization />
</author>

<author initials='M' surname='Handley' fullname='Mark Handley'>
    <organization />
</author>

<author initials='O' surname='Bonaventure' fullname='Olivier Bonaventure'>
    <organization />
</author>

<date month='July' day='11' year='2011' />

<abstract><t>TCP/IP communication is currently restricted to a single path per connection, yet multiple paths often exist between peers.  The simultaneous use of these multiple paths for a TCP/IP session would improve resource usage within the network, and thus improve user experience through higher throughput and improved resilience to network failure.  Multipath TCP provides the ability to simultaneously use multiple paths between peers.  This document presents a set of extensions to traditional TCP to support multipath operation.  The protocol offers the same type of service to applications as TCP (i.e. reliable bytestream), and provides the components necessary to establish and use multiple TCP flows across potentially disjoint paths.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>
      

<reference anchor='WISCHIK' target="http://ccr.sigcomm.org/online/files/p47-handleyA4.pdf">
        <front>
          <title abbrev="The Resource Pooling Principle">The Resource Pooling Principle</title>
          <author initials='D.' surname='Wischik' fullname='Damon Wischik'>
            <organization>University College London</organization>
          </author>
          <author initials='M.' surname='Handley' fullname='Mark Handley'>
            <organization>University College London</organization>
          </author>
          <author initials='M.' surname='Bagnulo Braun' fullname='Marcelo Magnulo Braun'>
            <organization>UC3M, Madrid</organization>
          </author>
          <date month="October" year="2008"/>
        </front>
        <seriesInfo name="ACM SIGCOMM CCR" value="vol. 38 num. 5, pp. 47-52"/>
      </reference>

      <reference anchor='NSDI' target="http://www.cs.ucl.ac.uk/staff/c.raiciu/files/mptcp-nsdi.pdf">
        <front>
          <title abbrev="MPTCP-CC">Design, Implementation and Evaluation of Congestion Control for Multipath TCP</title>
          <author initials='D.' surname='Wischik' fullname='Damon Wischik'>
            <organization>University College London</organization>
          </author>
          <author initials='C.' surname='Raiciu' fullname='Costin Raiciu'>
            <organization>University College London</organization>
          </author>
          <author initials='A.' surname='Greenhalgh' fullname='Adam Greenhalgh'>
            <organization>University College London</organization>
          </author>
          <author initials='M.' surname='Handley' fullname='Mark Handley'>
            <organization>University College London</organization>
          </author>
          <date month="March" year="2011"/>
        </front>
        <seriesInfo name="Usenix NSDI" value=""/>
      </reference>

      <reference anchor='KELLY' target="http://portal.acm.org/citation.cfm?id=1064415">
        <front>
          <title abbrev="Stability of end-to-end algorithms for joint routing and rate control">Stability of end-to-end algorithms for joint routing and rate control</title>
          <author initials='F.' surname='Kelly' fullname='Frank Kelly'>
            <organization>University of Cambridge</organization>
          </author>
          <author initials='T.' surname='Voice' fullname='Thomas Voice'>
            <organization>University of Cambridge</organization>
          </author>
          <date year="2005"/>
        </front>
        <seriesInfo name="ACM SIGCOMM CCR" value="vol. 35 num. 2, pp. 5-12"/>
      </reference>
    </references>
<?rfc rfcedstyle="yes"?>
  </back>
</rfc>
