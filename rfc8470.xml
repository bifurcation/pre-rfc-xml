<?xml version="1.0" encoding="US-ASCII"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>


<rfc number="8470"
     ipr="trust200902" 
     submissionType="IETF"
     consensus="yes"
     category="std">

  <front>
    <title abbrev="HTTP Early Data">Using Early Data in HTTP</title>

    <author initials="M." surname="Thomson" fullname="Martin Thomson">
      <organization>Mozilla</organization>
      <address>
        <email>martin.thomson@gmail.com</email>
      </address>
    </author>
    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization>Fastly</organization>
      <address>
        <email>mnot@mnot.net</email>
      </address>
    </author>
    <author initials="W." surname="Tarreau" fullname="Willy Tarreau">
      <organization>HAProxy Technologies</organization>
      <address>
        <email>willy@haproxy.org</email>
      </address>
    </author>

    <date year="2018" month="September"/>

    <area>Applications and Real-Time</area>
    <workgroup>HTTP</workgroup>

    <abstract>


<t>Using TLS early data creates an exposure to the possibility of a replay attack.
This document defines mechanisms that allow clients to communicate with servers
about HTTP requests that are sent in early data.  Techniques are described that
use these mechanisms to mitigate the risk of replay.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>TLS 1.3 <xref target="TLS13"/> introduces the concept of early data (also
known as zero round-trip time (0-RTT) data). If the client has spoken to the
same server recently, early data allows a client to send
data to a server in the first round trip of a connection, without waiting for
the TLS handshake to complete.</t>

<t>When used with HTTP <xref target="HTTP"/>, early data allows clients to send
requests immediately, thus avoiding the one or two round-trip delays needed for the
TLS handshake. This is a significant performance enhancement; however, it has
significant limitations.</t>

<t>The primary risk of using early data is that an attacker might capture and
replay the request(s) it contains. TLS <xref target="TLS13"/> describes techniques that can
be used to reduce the likelihood that an attacker can successfully replay a
request, but these techniques can be difficult to deploy and still leave some
possibility of a successful attack.</t>

<t>Note that this is different from automated or user-initiated retries; replays
are initiated by an attacker without the awareness of the client.</t>

<t>To help mitigate the risk of replays in HTTP, this document gives an overview
of techniques for controlling these risks in servers and defines requirements
for clients when sending requests in early data.</t>

<t>The advice in this document also applies to use of 0-RTT in HTTP over QUIC <xref target="HQ"/>.</t>

<section anchor="conventions-and-definitions" title="Conventions and Definitions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

</section>
</section>
<section anchor="early-data-in-http" title="Early Data in HTTP">

<t>Conceptually, early data is concatenated with other application data to form a
single stream.  This can mean that requests are entirely contained within early
data or that only part of a request is early.  In a multiplexed protocol, like
HTTP/2 <xref target="RFC7540"/> or HTTP/QUIC <xref target="HQ"/>, multiple requests might be partially
delivered in early data.</t>

<t>The model that this document assumes is that once the TLS handshake completes,
the early data received on that TLS connection is known to not be a replayed copy
of that data.  However, it is important to note that this does not mean that
early data will not be or has not been replayed on another connection.</t>

</section>
<section anchor="supporting-early-data-in-http-servers" title="Supporting Early Data in HTTP Servers">

<t>A server decides whether or not to offer a client the ability to send early
data on future connections when sending the TLS session ticket.</t>

<t>TLS <xref target="TLS13"/> mandates the use of replay detection strategies that reduce the
ability of an attacker to successfully replay early data.  These anti-replay
techniques reduce but don't completely eliminate the chance of data being
replayed and ensure a fixed upper limit to the number of replays.</t>

<t>When a server enables early data, there are a number of techniques it can use
to mitigate the risks of replay:</t>

<t><list style="numbers">
  <t>The server can reject early data at the TLS layer.  A server cannot
selectively reject early data, so this results in all requests sent in early
data being discarded.</t>
  <t>The server can choose to delay processing of early data until after the TLS
handshake completes. By deferring processing, it can ensure that only a
successfully completed connection is used for the request(s) therein.  This
provides the server with some assurance that the early data was not replayed.
If the server receives multiple requests in early data, it can determine
whether to defer HTTP processing on a per-request basis.</t>
  <t>The server can cause a client to retry individual requests and not use early
data by responding with the 425 (Too Early) status code (<xref target="status"/>) in
cases where the risk of replay is judged too great.</t>
</list></t>

<t>All of these techniques are equally effective; a server can use the method
that best suits it.</t>

<t>For a given request, the level of tolerance to replay risk is specific to the
resource it operates upon (and therefore only known to the origin server). The
primary risk associated with using early data is in the actions a server takes
when processing a request; processing a duplicated request might result in
duplicated effects and side effects.  Appendix E.5 of <xref target="TLS13"/> also describes
other effects produced by processing duplicated requests.</t>

<t>The request method's safety (<xref target="RFC7231"/>, Section 4.2.1) is one way to
determine this. However, some resources produce side effects with safe
methods, so this cannot be universally relied upon.</t>

<t>It is RECOMMENDED that origin servers allow resources to explicitly configure
whether early data is appropriate in requests. Absent such explicit information,
origin servers MUST either reject early data or implement the techniques
described in this document for ensuring that requests are not processed prior to
TLS handshake completion.</t>

<t>A request might be sent partially in early data with the remainder of the
request being sent after the handshake completes.  This does not necessarily
affect handling of that request; what matters is when the server starts acting
upon the contents of a request.  Any time any server instance might initiate
processing prior to completion of the handshake, all server instances need to
account for the possibility of replay of early data and how that could affect
that processing (see also <xref target="be-consistent"/>).</t>

<t>A server can partially process requests that are incomplete.  Parsing header
fields -- without acting on the values -- and determining request routing is
likely to be safe from side effects but other actions might not be.</t>

<t>Intermediary servers do not have sufficient information to decide whether early
data can be processed, so <xref target="status"/> describes a way for the origin to signal to
them that a particular request isn't appropriate for early data. Intermediaries
that accept early data MUST implement that mechanism.</t>

<t>Note that a server cannot choose to selectively reject early data at the TLS
layer. TLS only permits a server to either accept all early data or none of it. Once
a server has decided to accept early data, it MUST process all requests in
early data, even if the server rejects the request by sending a 425 (Too Early)
response.</t>

<t>A server can limit the amount of early data with the "max_early_data_size" field
of the "early_data" TLS extension. This can be used to avoid committing an
arbitrary amount of memory for requests that it might defer until the handshake
completes.</t>

</section>
<section anchor="using-early-data-in-http-clients" title="Using Early Data in HTTP Clients">

<t>A client that wishes to use early data commences by sending HTTP requests
immediately after sending the TLS ClientHello.</t>

<t>By their nature, clients have control over whether a given request is sent in
early data, thereby giving the client control over risk of replay. Absent
other information, clients MAY send requests with safe HTTP methods (<xref
target="RFC7231"/>, Section 4.2.1) in early data when it is available and MUST NOT
send unsafe methods (or methods whose safety is not known) in early data.</t>

<t>If the server rejects early data at the TLS layer, a client MUST start sending
again as though the connection were new. This could entail using a different
negotiated protocol <xref target="ALPN"/> than the one optimistically used for the
early data. Any requests sent in early data will need to be sent again, unless
the client decides to abandon those requests.</t>

<t>Automatic retry creates the potential for a replay attack.  An attacker
intercepts a connection that uses early data and copies the early data to
another server instance.  The second server instance accepts and processes the
early data, even though it will not complete the TLS handshake.  The attacker
then allows the original connection to complete.  Even if the early data is
detected as a duplicate and rejected, the first server instance might allow the
connection to complete.  If the client then retries requests that were sent in
early data, the request will be processed twice.</t>

<t>Replays are also possible if there are multiple server instances that will
accept early data or if the same server accepts early data multiple times
(though the latter would be in violation of requirements in Section 8 of
<xref target="TLS13"/>).</t>

<t>Clients that use early data MUST retry requests upon receipt of a 425 (Too
Early) status code; see <xref target="status"/>.</t>

<t>An intermediary MUST NOT use early data when forwarding a request unless early
data was used on a previous hop, or it knows that the request can be retried
safely without consequences (typically, using out-of-band configuration).
Absent better information, that means that an intermediary can only use early
data if the request either arrived in early data or arrived with the
Early-Data header field set to "1" (see <xref target="header"/>).</t>

</section>
<section anchor="extensions-for-early-data-in-http" title="Extensions for Early Data in HTTP">

<t>Because HTTP requests can span multiple "hops", it is necessary to explicitly
communicate whether a request has been sent in early data on a previous
hop. Likewise, it is necessary to have some means of explicitly triggering a retry when early data is
not desired. Finally, it is necessary to know whether the client
will actually perform such a retry.</t>

<t>To meet these needs, two signaling mechanisms are defined:</t>

<t><list style="symbols">
  <t>The Early-Data header field is included in requests that might have been
forwarded by an intermediary prior to the completion of the TLS handshake with its client.</t>
  <t>The 425 (Too Early) status code is defined for a server to indicate that a
request could not be processed due to the consequences of a possible replay
attack.</t>
</list></t>

<t>They are designed to enable better coordination of the use of early data
between the user agent and origin server, and also when a gateway (also
"reverse proxy", "Content Delivery Network", or "surrogate") is present.</t>

<t>Gateways typically don't have specific information about whether a given
request can be processed safely when it is sent in early data. In many cases,
only the origin server has the necessary information to decide whether the risk
of replay is acceptable. These extensions allow coordination between a gateway
and its origin server.</t>

<section anchor="header" title='The Early-Data Header Field'>

<t>The Early-Data request header field indicates that the request has been
conveyed in early data and that a client understands the 425 (Too Early) status code.</t>

<t>It has just one valid value: "1". Its syntax is defined by the following ABNF
<xref target="ABNF"/>:</t>

<figure><artwork type="abnf"><![CDATA[
Early-Data = "1"
]]></artwork></figure>

<t>For example:</t>

<figure><artwork type="example"><![CDATA[
GET /resource HTTP/1.0
Host: example.com
Early-Data: 1

]]></artwork></figure>

<t>An intermediary that forwards a request prior to the completion of the TLS
handshake with its client MUST send it with the Early-Data header field set to
"1" (i.e., it adds it if not present in the request). 

An intermediary MUST use the Early-Data header field if the request might
have been subject to a replay and might already have been forwarded by it or
another instance (see <xref target="be-consistent"/>).</t>

<t>An intermediary MUST NOT remove this header field if it is present in a request.
Early-Data MUST NOT appear in a Connection header field.</t>

<t>The Early-Data header field is not intended for use by user agents (that is,
the original initiator of a request).  Sending a request in early data implies
that the client understands this specification and is willing to retry a request
in response to a 425 (Too Early) status code.  A user agent that sends a request
in early data does not need to include the Early-Data header field.</t>

<t>A server cannot make a request that contains the Early-Data header field safe
for processing by waiting for the handshake to complete. A request that is
marked with Early-Data was sent in early data on a previous hop. Requests that
contain the Early-Data header field and cannot be safely processed MUST be rejected
using the 425 (Too Early) status code.</t>

<t>The Early-Data header field carries a single bit of information, and clients
MUST include at most one instance.  Multiple or invalid instances of the header
field MUST be treated as equivalent to a single instance with a value of 1 by a
server.</t>

<t>An Early-Data header field MUST NOT be included in responses or request
trailers.</t>

</section>
<section anchor="status" title="The 425 (Too Early) Status Code">

<t>A 425 (Too Early) status code indicates that the server is unwilling to risk
processing a request that might be replayed.</t>

<t>User agents that send a request in early data are expected to retry the
request when receiving a 425 (Too Early) response status code.  A user agent
SHOULD retry automatically, but any retries MUST NOT be sent in early data.</t>

<t>In all cases, an intermediary can forward a 425 (Too Early) status code.
Intermediaries MUST forward a 425 (Too Early) status code if the request that it
received and forwarded contained an Early-Data header field. Otherwise, an
intermediary that receives a request in early data MAY automatically retry that
request in response to a 425 (Too Early) status code, but it MUST wait for the
TLS handshake to complete on the connection where it received the request.</t>

<t>The server cannot assume that a client is able to retry a request unless the
request is received in early data or the Early-Data header field is set to
"1".  A server SHOULD NOT emit the 425 status code unless one of these
conditions is met.</t>

<t>The 425 (Too Early) status code is not cacheable by default. Its payload is not
the representation of any identified resource.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Using early data exposes a client to the risk that their request is replayed.  A
retried or replayed request can produce different side effects on the server.
In addition to those side effects, replays and retries might be used for traffic
analysis to recover information about requests or the resources those requests
target.  In particular, a request that is replayed might result in a different
response, which might be observable from the length of protected data even if
the content remains confidential.</t>

<section anchor="gateways-and-early-data" title="Gateways and Early Data">

<t>A gateway MUST NOT forward requests that were received in early data unless it
knows that the origin server it will forward to understands the Early-Data
header field and will correctly generate a 425 (Too Early) status code.  A
gateway that is uncertain about origin server support for a given request SHOULD
either delay forwarding the request until the TLS handshake with its client
completes or send a 425 (Too Early) status code in response.</t>

<t>A gateway without at least one potential origin server that supports the 
Early-Data header field expends significant effort for what can at best be a
modest performance benefit from enabling early data.  If no origin server
supports early data, it is more efficient to disable early data entirely.</t>

</section>
<section anchor="be-consistent" title="Consistent Handling of Early Data">

<t>Consistent treatment of a request that arrives in, or partially in, early data
is critical to avoiding inappropriate processing of replayed requests.  If a
request is not safe to process before the TLS handshake completes, then all
instances of the server (including gateways) need to agree and either reject the
request or delay processing.</t>

<t>Disabling early data, delaying requests, or rejecting requests with the 425 (Too
Early) status code are all equally good measures for mitigating replay attacks
on requests that might be vulnerable to replay.  Server instances can implement
any of these measures and be considered consistent, even if different
instances use different methods.  Critically, this means that it is possible to
employ different mitigations in reaction to other conditions, such as server
load.</t>

<t>A server MUST NOT act on early data before the handshake completes if it and any
other server instance could make a different decision about how to handle the
same data.</t>

</section>
<section anchor="denial-of-service" title="Denial of Service">

<t>Accepting early data exposes a server to potential denial of service through the
replay of requests that are expensive to handle.  A server that is under load
SHOULD prefer rejecting TLS early data as a whole rather than accepting early
data and selectively processing requests.  Generating a 503 (Service
Unavailable) or 425 (Too Early) status code often leads to clients retrying
requests, which could result in increased load.</t>

</section>
<section anchor="out-of-order-delivery" title="Out-of-Order Delivery">

<t>In protocols that deliver data out of order (such as QUIC <xref target="HQ"/>), early data can
arrive after the handshake completes.  A server MAY process requests received in
early data after handshake completion only if it can rely on other instances
correctly handling replays of the same requests.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document registers the Early-Data header field in the "Permanent
Message Header Field Names" registry located at
&lt;https://www.iana.org/assignments/message-headers&gt;.</t> 

<t><list style="hanging">
  <t hangText='Header field name:'>
  Early-Data</t>
  <t hangText='Applicable protocol:'>
  http</t>
  <t hangText='Status:'>
  standard</t>
  <t hangText='Author/Change controller:'>
  IETF</t>
  <t hangText='Specification document(s):'>
  This document</t>
  <t hangText='Related information:'>
  (empty)</t>
</list></t>

<t>This document registers the 425 (Too Early) status code in the "HTTP Status
Codes" registry located at &lt;https://www.iana.org/assignments/http-status-codes&gt;.</t>

<t><list style="hanging">
  <t hangText='Value:'>
  425</t>
  <t hangText='Description:'>
  Too Early</t>
  <t hangText='Reference:'>
  This document</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

<reference  anchor='TLS13' target='https://www.rfc-editor.org/info/rfc8446'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2018' month='August' />
<abstract><t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t><t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='8446'/>
<seriesInfo name='DOI' value='10.17487/RFC8446'/>
</reference>

<reference  anchor='HTTP' target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>

<?rfc include="reference.RFC.2119"?>

<?rfc include="reference.RFC.8174"?>

<?rfc include="reference.RFC.7231"?>

<reference  anchor='ABNF' target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>


    </references>

    <references title='Informative References'>

<!--draft-ietf-quic-http-08: I-D Version Updated to -14-->
<reference anchor='HQ'>
<front>
<title>Hypertext Transfer Protocol (HTTP) over QUIC</title>

<author initials='M' surname='Bishop' fullname='Mike Bishop'>
    <organization />
</author>

<date month='August' year='2018' />

<abstract><t>The QUIC transport protocol has several features that are desirable in a transport for HTTP, such as stream multiplexing, per-stream flow control, and low-latency connection establishment.  This document describes a mapping of HTTP semantics over QUIC.  This document also identifies HTTP/2 features that are subsumed by QUIC, and describes how HTTP/2 extensions can be ported to QUIC.</t></abstract>

</front>

<seriesInfo name='Work in Progress,' value='draft-ietf-quic-http-14' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-http-14.txt' />
</reference>

<reference  anchor="RFC7540" target='https://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>



<reference  anchor="ALPN" target='https://www.rfc-editor.org/info/rfc7301'>
<front>
<title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
<author initials='S.' surname='Friedl' fullname='S. Friedl'><organization /></author>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Stephan' fullname='E. Stephan'><organization /></author>
<date year='2014' month='July' />
<abstract><t>This document describes a Transport Layer Security (TLS) extension for application-layer protocol negotiation within the TLS handshake. For instances in which multiple application protocols are supported on the same TCP or UDP port, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t></abstract>
</front>
<seriesInfo name='RFC' value='7301'/>
<seriesInfo name='DOI' value='10.17487/RFC7301'/>
</reference>




    </references>


<section numbered="false" anchor="acknowledgments" title="Acknowledgments">
<t>This document was not easy to produce.  The following people made substantial
contributions to the quality and completeness of the document: David Benjamin,
Subodh Iyengar, Benjamin Kaduk, Ilari Liusavaara, Kazuho Oku, Eric Rescorla,
Kyle Rose, and Victor Vasiliev.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAGsJNFsAA41cbXPbNrb+jl+B635Y+46kxEk6u+ve7tZ1kibTvG3ibmfn
zp0WIiEJNUVqCdKK6kl/+z3POQAISoqzO7ONZZEgcF6e85wXejqdqs51lb3Q
P3lXL/Uz01Y7/dR0Rrtav7i+fqfMfN7a2wv+kH2vyqaozZruLFuz6KbOdovp
qus2c+enrd1UZjd9+EQVprPLpt1daN+VSrlNe6G7tvfdo4cP//rwkTKtNRf6
crOpHF3qmtprU5f6vTXV9Nqtrdo27c2ybfqN7EDd2B39qrzQL+vOtrXtpk/x
fKV8Rzf+Yqqmpj3trFcbd6H/t2uKiab/uLq0dTfRvmm71i48/bRbhx+61hX0
VdGsNyb8sKaL6StXV662E01nXZvNhiT0f0qZvls17YXSU6Xpf672F/r1TF+v
mrVvav6dCOa1aTuSYv5F0y5N7X7nk9IFze+uqgx/Y9fGVRd6zffMOrnnuyV+
O6MN7T/tTdPRdcuVWY8feLP/zfiJz43vqt3ogXXTfYf/zEiWo6f8TGcyLemn
zx7xM214N/r9+AEvLt+1zUe6wharuqmapSNNZI/b4v7vVmaDq2Z0ryKjqBdN
u6YFbu2FUtPpVJs5KYV0oZSY5fWrD9qy6ZUwzYIe3llYirYfN43vW0s61t3K
avrk3dxVrtvpZqGNFlPUputMcTNT1yvnoc4eGtalXZB+vV7TbukQfu1pEdNp
U1XNVheVgxlgaZhEX8NELR2hW2lv21vbevKOpu/EN1r77976Li5Be/J4BlnA
sPWZFsk4XMrXlNYXrZvbkm9Tvbc4B/0331Oj165zSzwdh2ydv8Hp5GwzkRmp
0P7yBv/pml/If0psT71/fqWfla4jg9XvKmto4daum1ssRJLwtoDe9NySCkh6
/Tz6Ia361PmiJ3HS9/Qwvp59XXfmhnZPzy6spi+xJZYAfBXqYn/VUDg+Vc53
6jThw3S7/G77GKo/m+jtyhUr7SCKYkX6L0lR+n9wmb948AB3+plc/OBSrvAP
3vEmH+QLPvgbbffn8PQf+OnJqGiDhcEJ9aLp6+EBtD7+2S5nS1JoP5+55sHf
viGA6NvCqqIpLSOR8x6qwlZogTYXw9Flse+wIBlNeAT/M7UfO1tDnP5BZea2
8g9Egdg8q3DtyrKySn0FcGubsmflKAXzP5891nd3f6cfzx9/+3L6dMbn7yqP
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

-->
</rfc>

