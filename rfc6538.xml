<?xml version="1.0" encoding="US-ASCII" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY  RFC5201 SYSTEM "reference.RFC.5201" >
<!ENTITY  RFC5202 SYSTEM "reference.RFC.5202" >
<!ENTITY  RFC5203 SYSTEM "reference.RFC.5203" >
<!ENTITY  RFC5204 SYSTEM "reference.RFC.5204" >
<!ENTITY  RFC5205 SYSTEM "reference.RFC.5205" >
<!ENTITY  RFC5206 SYSTEM "reference.RFC.5206" >
<!ENTITY  RFC5207 SYSTEM "reference.RFC.5207" >
<!ENTITY  RFC5770 SYSTEM "reference.RFC.5770" >
<!ENTITY  RFC4423 SYSTEM "reference.RFC.4423" >
<!ENTITY  RFC4843 SYSTEM "reference.RFC.4843" >
<!ENTITY  RFC4380 SYSTEM "reference.RFC.4380" >
<!ENTITY  RFC6298 SYSTEM "reference.RFC.6298" >
<!ENTITY  RFC2367 SYSTEM "reference.RFC.2367" >
<!ENTITY  RFC3522 SYSTEM "reference.RFC.3522" >
<!ENTITY  RFC6253 SYSTEM "reference.RFC.6253" >
<!ENTITY  RFC6316 SYSTEM "reference.RFC.6316" >
<!ENTITY  RFC6317 SYSTEM "reference.RFC.6317" >
<!ENTITY  RFC6281 SYSTEM "reference.RFC.6281" >
<!ENTITY  paper.i3 SYSTEM "reference.paper.i3" >
<!ENTITY  paper.layered SYSTEM "reference.paper.layered" >
<!ENTITY  paper.datarouter SYSTEM "reference.paper.datarouter" >
<!ENTITY  paper.netpointers SYSTEM "reference.paper.netpointers" >
<!ENTITY  paper.fara SYSTEM "reference.paper.fara" >
<!ENTITY  paper.triad SYSTEM "reference.paper.triad" >
<!ENTITY  paper.blind SYSTEM "reference.paper.blind" >
<!ENTITY  paper.hipanalysis SYSTEM "reference.paper.hipanalysis" >
<!ENTITY  paper.namespace SYSTEM "reference.paper.namespace" >
<!ENTITY  paper.mobiarch SYSTEM "reference.paper.mobiarch" >
<!ENTITY  paper.hi3 SYSTEM "reference.paper.hi3" >
<!ENTITY  paper.usable-security SYSTEM "reference.paper.usable-security" >
<!ENTITY  paper.p2psip SYSTEM "reference.paper.p2psip" >
<!ENTITY  paper.handovers SYSTEM "reference.paper.handovers" >
<!ENTITY  paper.leap-of-faith SYSTEM "reference.paper.leap-of-faith" >
<!ENTITY  thesis.karlsson SYSTEM "reference.thesis.karlsson" >
<!ENTITY  thesis.ford SYSTEM "reference.thesis.ford" >
<!ENTITY  thesis.bishaj SYSTEM "reference.thesis.bishaj" >
<!ENTITY  RFC1498 SYSTEM "reference.RFC.1498" >
<!ENTITY  RFC1992 SYSTEM "reference.RFC.1992" >
<!ENTITY  RFC4303 SYSTEM "reference.RFC.4303" >
<!ENTITY  RFC3775 SYSTEM "reference.RFC.3775" >
<!ENTITY  RFC5338 SYSTEM "reference.RFC.5338" >
<!ENTITY  RFC5533 SYSTEM "reference.RFC.5533" >
]>

<?rfc toc="yes" ?>
<?rfc rfcedstyle="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc sortrefs="yes"?>
<rfc submissionType="IRTF" consensus="yes" category="info" ipr="trust200902" number="6538">

  <front>
    <title abbrev="HIP Experiment Report">The Host Identity Protocol (HIP) Experiment Report
    </title>

    <author initials="T." surname="Henderson"
      fullname="Thomas Henderson">
      <organization>The Boeing Company</organization>
      <address>
        <postal>
          <street>P.O. Box 3707</street>
          <city>Seattle</city>
          <region>WA</region>
          <country>USA</country>
        </postal>
        <email>thomas.r.henderson@boeing.com</email>
      </address>
    </author>
    <author initials="A." surname="Gurtov" fullname="Andrei Gurtov">
      <organization>University of Oulu</organization>
      <address>
	<postal>
          <street>Centre for Wireless Communications CWC</street>
	  <street> P.O. Box 4500 </street>
          <city>FI-90014 University of Oulu</city>
	  <country>Finland</country>
	</postal>
	<email>gurtov@ee.oulu.fi</email>
      </address>
    </author>

    <date month="March" year="2012" />
    
    <area>IRTF</area>
    <workgroup>IRTF HIP</workgroup>



    <abstract>
      <t> This document is a report from the IRTF Host Identity Protocol (HIP) research group 
          documenting the collective experiences and lessons 
          learned from studies, related experimentation, and designs 
          completed by the research group.  The document summarizes
          implications of adding HIP to host protocol stacks, 
	  Internet infrastructure,
          and applications. The perspective of a network operator, as well
          as a list of HIP experiments, are presented as well.  Portions
          of this report may be relevant also to other network 
          overlay-based architectures or to attempts to deploy alternative
          networking architectures.
          </t>
    </abstract>
  </front>

  <middle>

    <section title="Introduction">

      <t>This document summarizes the work and experiences  
      of the IRTF's Host Identity Protocol research group (HIP-RG) in
      the 2004-2009 time frame.  
      The HIP-RG was chartered to explore the 
possible benefits and
      consequences of deploying the 
      <xref target="RFC4423">Host Identity Protocol
      architecture</xref> in the Internet and to explore extensions
      to HIP.
      </t>

      <t>This document was developed over several years as the main charter
      item for the HIP research group, and it has received inputs and reviews 
      from most of the active research group participants.  There is 
      research group consensus to publish it. </t>

      <section title="What is HIP?">
        <t>The Host Identity Protocol architecture introduces a new namespace, the
        "host identity" namespace, to the Internet architecture.  The
        express purpose of this new namespace is to allow for the
        decoupling of identifiers (host identities) and locators (IP
        addresses) at the internetworking layer of the architecture.  
        The contributors to HIP have expected that HIP will enable
        alternative solutions for several of the Internet's
        challenging technical problems, including potentially host
        mobility, host multihoming, site multihoming, IPv6
        transition, NAT traversal, and network-level security.   Although
  there have been many architectural proposals to decouple identifiers
  and locators over the past 20 years, HIP is one of the most actively
  developed proposals in this area <xref target="book.gurtov" />.

        </t>

      <t> The Host Identity Protocol itself provides a rapid exchange 
      of host identities (public
      keys) between hosts and uses a Diffie-Hellman
      key exchange that is compliant with Sigma ("SIGn-and-MAc")
      to establish shared secrets between such endpoints
      <xref target="RFC5201"></xref>.  The protocol is
      designed to be resistant to Denial-of-Service (DoS) and
      Man-in-the-Middle (MitM) attacks, and when used together with
      another suitable security protocol, such as Encapsulated
      Security Payload (ESP) <xref
      target="RFC4303"></xref>, it provides encryption
      and/or authentication protection for upper-layer protocols such
      as TCP and UDP, while enabling continuity of communications
      across network-layer address changes.
      </t>

      <t>
        A number of Experimental RFC specifications were
        published by the IETF's HIP working group, including the
        <xref target="RFC5201">HIP base protocol</xref>,
        <xref target="RFC5202">ESP encapsulation</xref>, 
        <xref target="RFC5203">registration extensions</xref>,      
        <xref target="RFC5204">HIP rendezvous servers</xref>,
        <xref target="RFC5205">DNS resource records</xref>, and
        <xref target="RFC5206">mobility management</xref>.
        Host identities are represented as 
        <xref target="RFC4843">Overlay Routable Cryptographic Hash Identifiers (ORCHIDs)</xref> in Internet protocols.



        Additionally, the research group published one RFC on 
        requirements for traversing NATs and firewalls
        <xref target="RFC5207"></xref> and the working group later
        published specification text for legacy NAT traversal
        <xref target="RFC5770"></xref>.  As of this writing, work
        has commenced on moving the above specifications to Standards
        Track status.
      </t>

      </section>

      <section title="Terminology">
        <t> The terms used in this document are defined elsewhere
         in various documents.  In particular, readers are suggested to
         review Section 3 of <xref target="RFC4423" /> for a listing of 
         HIP-specific terminology.
         </t>
      </section>

      <section title="Scope">
        <t>  The research group has been tasked with producing an 
        "experiment report" documenting the collective experiences 
        and lessons learned from other studies, related experimentation, 
        and designs completed by the research group.  The question of 
        whether the basic identifier-locator split assumption is valid 
        falls beyond the scope of this research group. When indicated by 
        its studies, the HIP-RG can suggest extensions and modifications 
        to the protocol and architecture. It has also been in scope for the RG 
        to study, in a wider sense, what the consequences and effects that 
        wide-scale adoption of any type of separation of the identifier 
        and locator roles of IP addresses is likely to have. 
        </t>

        <t> During the period of time when the bulk of this report was
        drafted (2004-2009), several
        research projects and open source software projects were
        formed to study HIP.  These projects 
have been developing 
        software enabling HIP to be interoperable according to the Experimental
        RFCs as well as supporting extensions not yet specified by RFCs.
        </t>

        <t>
        The research group has been most active in two areas.  First
        and foremost,
        the research group has studied extensions to HIP 
        that went beyond the scope and charter of the IETF HIP
        working group and the set of RFCs (RFC 5201-5206) initially 
        published in April 2008.  Some of this work (NAT traversal, 
        certificate
        formats for HIP, legacy application support, and a native
        sockets API for HIP) ultimately flowed into the IETF HIP
        working group upon its recharter in 2008.  Other extensions
        (e.g., HIP in the Internet Indirection Infrastructure (i3) overlay, use of distributed hash tables
        for HIT-based (Host Identity Tag) lookups, mobile router 
        extensions, etc.) are
        either still being worked on in the research group or have been
        abandoned.  Most of the energy of the research group during
        this time period has been in studying extensions of HIPs
        or the application of HIP to new problem domains (such as the
        Internet of Things).
        Second, the research group has discussed the progress and
        outcome of the implementations and experiments conducted so
        far, as well as discussing perspectives from different participants
        (end users, operators, enterprises) on HIP deployment.  It is
        this latter category of work (and not the extensions to HIP) 
        on which this report is focused.
        </t>

        <t>Finally, the research group was chartered to study, but did not
        rigorously study (due to lack of inputs), the following issues:
        <list style="symbols"> 
          <t> Objective comparisons of HIP with other mechanisms (although
              the research group did hold some discussions concerning
              the relation of HIP to other efforts such as the 
              End-Middle-End (EME) research group, the Routing research
              group (RRG), and shim6-based protocols). </t>
          <t> Large scale deployments (thousands of hosts or greater). </t>
          <t> Exploration of whether introducing an identity-locator 
              mechanism would be architecturally sound, deployed at
              wide scale.</t>
          <t> Changes to the HIP baseline 
architecture and protocol or 
              other identity-locator separation architectures. </t>
        </list>
        </t>
        
      </section>
      <section title="Organization">

        <t> In this report, we summarize the collective experience of
        early implementers and adopters of HIP, organized as follows:
        <list style="symbols">
          <t> <xref target="sec.host" /> describes the implications
              of supporting HIP on an end host.   </t>
          <t> <xref target="sec.infra" /> covers a number of
              issues regarding the deployment of and interaction with network
              infrastructure, including middlebox traversal, name
              resolution, Access Control Lists (ACLs), and HIP infrastructure such as rendezvous
              servers. </t>
        </list>
        </t>
        <t> Whereas the two previous sections focus on the implementation and
            deployment of the network plumbing to make HIP work, the next
            three focus on the impact on users and operators of the network.

        <list style="symbols">
          <t> <xref target="sec.apps" /> examines how the support
              of HIP in the host and network infrastructure affects 
              applications; whether and how HIP provides benefits or
              drawbacks to HIP-enabled and legacy applications.</t>
          <t> <xref target="sec.operator" /> provides an operator's
              perspective on HIP deployment.  </t>
          <t> <xref target="sec.privacy" /> 
discusses user privacy issues.</t>
        </list>        </t>

       <t> In closing, in <xref target="sec.activities" />, we list the
              experimental activities and research that have contributed
              to this report, and in <xref target="sec.related" /> we
              briefly summarize related work. </t>

      </section>

    </section>

    <section anchor="sec.host" title="Host Stack Implications">
      <t>  HIP is primarily an extension to the TCP/IP stack of 
      Internet hosts, and, in this section, we summarize some experiences
      that several implementation groups have encountered in developing
      this extension.  
      Our discussion here draws on experience of implementers in 
      adding HIP to general-purpose computing platforms such as laptops,
      desktops, servers, and PDAs.  There are two primary ways to support HIP 
      on such an end host.
      The first is to make changes to the kernel implementation to
      directly support the decoupling of identifier and locator.  Although
      this type of modification has data throughput performance benefits,
      it is also the more challenging to deploy.  The second approach
      is to implement all HIP processing in the user-space and configure
      the kernel to route packets through user-space for HIP processing.
      </t>

      <t>
      The following public HIP implementations are known and actively 
      maintained:
        <list style="symbols">
        <t> HIP4BSD (http://www.hip4inter.net) -- FreeBSD kernel modifications 
            and user-space keying daemon;
        </t>
	  <t> HIPL (http://hipl.hiit.fi) -- Linux kernel and user-space
              implementation;
        </t>
	  <t> OpenHIP (http://www.openhip.org) -- User-space keying daemon
            and packet processing for Linux, Windows XP/Vista/7, and 
            Apple OS X.
        </t>

        </list>
      </t>
      <t>  In the following, we first describe issues specific to the
      way in which HIP is added to a stack, then we discuss general
      issues surrounding both implementation approaches.
      </t>

      <section title="Modifications to TCP/IP Stack Implementations">
      <t>  In this section, we focus on the support of HIP assuming the
           following:
           <list style="symbols">
           <t> HIP is implemented by directly changing the TCP/IP stack
               implementation.</t>
           <t> Applications (using the sockets API) are unaware of HIP.</t>
           </list>
           A HIP implementation typically consists of a key management process
           that coordinates with an IPsec-extended stack, as shown in 
           <xref target="fig.hip.operating.environment" />.  
           In practice, HIP has been implemented entirely in the user-space, 
           entirely in the kernel, or as a hybrid with a user-space key 
           management process and a kernel-level ESP.
      </t>


      <figure anchor="fig.hip.operating.environment" title="HIP Deployment
      Model">
      <artwork><![CDATA[
 +--------------------+                       +--------------------+
 |                    |                       |                    |
 |                    |                       |                    |
 |   +------------+   |                       |   +------------+   |
 |   |    Key     |   |         HIP           |   |    Key     |   |
 |   | Management | <-+-----------------------+-> | Management |   |
 |   |  Process   |   |                       |   |  Process   |   |
 |   +------------+   |                       |   +------------+   |
 |         ^          |                       |         ^          |
 |         |          |                       |         |          |
 |         v          |                       |         v          |
 |   +------------+   |                       |   +------------+   |
 |   |   IPsec-   |   |        ESP            |   |   IPsec-   |   |
 |   |  Extended  |   |                       |   |  Extended  |   |
 |   |   Stack    | <-+-----------------------+-> |   Stack    |   |
 |   |            |   |                       |   |            |   |
 |   +------------+   |                       |   +------------+   |
 |                    |                       |                    |
 |                    |                       |                    |
 |     Initiator      |                       |     Responder      |
 +--------------------+                       +--------------------+
      ]]></artwork>
     </figure>

    <t> <xref target="fig.hip.architecture" /> summarizes the main 
    implementation impact of supporting HIP, and is discussed further
    in subsequent sections.  To enable HIP natively in an implementation 
    requires extensions to the key management interface (here depicted as
    PF_KEY API <xref target="RFC2367" />)       
    with the security association database (SAD) and security policy
    database (SPD).  It also requires changes to the ESP implementation 
    itself to support BEET-mode (Bound End-to-End Tunnel) processing 
    <xref target="BEET-MODE"></xref>, 
    extensions to the name resolution library, and
    (in the future) interactions with transport protocols to respond
    correctly to mobility and multihoming events <xref target="TCP-RLCI" />.
    </t>

     <figure anchor="fig.hip.architecture" title="Overview of Typical
      Implementation Changes to Support HIP">
      <artwork><![CDATA[
      
                  |-----------------------|
    --------      |   ----------     ----------
    | HIP  |--    ----|  App v6 |    |  App v4 |
    -------- |    |   ----------     ----------
      |      |    |       | HIT           | LSI
      |    ------------   | AF_INET6      | AF_INET
      |    | resolver |   |               |
      |    ------------   |  sockets API  |        user-space
    --|-------------------|-------------------------------
      | sockets and       |               |        kernel
      | PF_KEY API    ---------           |
      |-------------> |TCP/UDP|<-----------
      |               ---------     
      |                   |
    ----------        ---------
    | SAD/SPD|<-----> | ESP   |  {HIT_s, HIT_d} <-> SPI
    ----------        ---------  {HIT_s, HIT_d, SPI} <-> {IP_s,IP_d,SPI}
                          |
                      ---------
                      |  IP   |
                      ---------
     ]]></artwork>
     </figure>

	<t>Legacy applications can continue to use the standard AF_INET6 (for IPv6) 
	and AF_INET (for IPv4) sockets API. IPv6 applications bind directly to a Host Identity Tag (HIT),
	which is a part of IPv6 address space reserved for ORCHIDs. IPv4 applications
	bind to a Local Scope Identifier (LSI) that has significance only within a host; the 
	HIP layer translates from LSIs and HITs to the IP addresses that are still used underneath
	for HIP base exchange.
	</t>

        <section title="ESP Implementation Extensions">
	        <t>
          HIP uses a Bound End-to-End Tunnel (BEET) mode of ESP
          operation, which mixes tunnel-mode semantics with transport-mode 
          syntax.  BEET is not supported by all operating system
          distributions at present, so kernel modifications might be needed
          to obtain true kernel support using existing IPsec code.
          At the time of writing, the BEET mode has been adopted to
          vanilla Linux and FreeBSD kernels.
          </t>
	        <t>
          The HIPL project has contributed an IPsec BEET patch for the
          Linux kernel.  The kernel-level support
          could potentially allow all Linux implementations of HIP 
          to run in the user-space
          and use a common interface towards the kernel. 
          </t>
	        <t>
          One inconvenience experienced in current Linux IPsec implementation
          (due to the native IPsec implementation, not HIP specifically) is 
          a loss of the first data packet that
          triggers the HIP association establishment. Instead, this
          packet should be cached and transmitted after the association
          is established. 
          </t>
        </section>
       </section>
       <section title="User-Space Implementations">
         <t>  HIP can be implemented entirely in the user-space, an approach
          that is essential for supporting HIP on hosts for which operating
          system modifications are not possible.  Even on modifiable
          operating systems, there is often a significant deployment
          advantage in deploying HIP only as a user-space implementation.
          All three open-source implementations provide user-space
          implementations and binary packages (RPMs, DEBs, self-extracting
          installers) typical of application deployment on the target
          systems.
          </t>

          <t> When HIP is deployed in the user-space, some technique is
          necessary to identify packets that require HIP processing and
          divert them to the user-space for such processing and to re-inject
          them into the stack for further transport protocol processing.
          A commonly used technique is to deploy a virtual device in
          the kernel such as a network tap (TAP) device, although operating systems
          may provide other means for diverting packets to user-space.
          Routing or packet filtering rules must be applied to divert
          the right packets to these devices.  
          </t>
          <t>  As an example, the user-space implementation may
          install a route that directs all packets with destination
          addresses corresponding to HITs or LSIs
          to such a virtual device.  In the user-space daemon, 
          the ESP header and possibly the UDP
          header is applied, an outer IP address replaces the HIT, and
          the packet is re-sent to the kernel.
          In the reverse direction, a socket associated to ESP or a UDP port
          number may be used
          to receive ESP-protected packets.  HIP signaling packets themselves
          may be sent and received by a raw socket bound to the HIP number or UDP port when UDP encapsulation is used.
          </t>
       </section>
       <section title="Issues Common to Both Implementation Approaches">

        <section title="User-Space Handling of HITs">
	      <t>
        Much initial experimentation with HIP has involved using HITs
        directly in IPv6 socket calls, without any resolution infrastructure
        to learn the HIT based on, for example, a domain name, or to resolve 
        the IP address.  To experiment with HIP using HITs requires
        a priori HIT exchange, in the absence of a resolution service. 
        Manual exchange of HITs has been a major inconvenience for
        experimentation. It can be overcome via 1)
        opportunistic HIP mode (RFC 5201, Section 4.1.6), 2) storing HITs 
        in DNS AAAA entries and
        looking them up by domain name, 3)
        name resolution service for HITs such as OpenDHT
        <xref target="RFC6537" />, 4) an ad hoc HIT exchange
        service to populate files on each machine, or 5)
        support for DNS extensions described in RFC 5205.
        </t>

        <t>
        Over time, support for these techniques has varied.  The HIPL
        project has experimented with all of them.  OpenHIP lacks
        support for option 2, and HIP4BSD lacks support for options 1
        and 3.  
        </t>

        <t> 
        Implementing opportunistic HIP mode in a clean way is
        challenging, as HITs need to be known when an application
        binds or connects to a socket. Approach 2 has been difficult 
        in practice due to resistance of sysadmins to 
        include AAAA entries for HITs in
        the DNS server, and is a non-standards-compliant use of the 
        resource record.
        Approach 3 is being progressed
        with two independent implementations of a HIP-OpenDHT
        interface. At the moment, the easiest way for enabling 
        experimentation appears to be 
        approach 4 when a shell script based on Secure SHell (SSH) and Secure Copy (SCP) can
        connect to a peer machine and copy HITs to the local
        configuration files.  However, this approach is not scalable
        or secure for the long run. HIPL developers have had
        positive experiences with alternative 5.
        </t>
        </section>

        <section title="Opportunistic Mode">

        <t>
        In opportunistic mode, the Initiator starts a base exchange without 
        knowledge of the Responder's HIT. The main advantage of the 
        opportunistic mode is that it does not require additional lookup 
        infrastructure for HIs <xref target="RFC5205" /> 
        <xref target="RFC6537" />.
        </t>
        
        <t>
        The opportunistic mode also has a few disadvantages. First, the 
        Initiator may not identify the Responder uniquely just based on the IP 
        address in the presence of private address realms 
        <xref target="RFC5770" />.
        Second, the Initiator has to settle for a "leap of faith"; that is, 
        assume there is no man-in-the-middle attack. However, this can be 
        partially mitigated by using certificates at the Responder side 
        <xref target="RFC6253" />
        or by prompting the user using a graphical interface 
        to explicitly accept the connection <xref target="paper.usable-security" />.
        </t>
        
        <t>
        The opportunistic mode requires only minor changes in the state machine 
        of the Responder and small changes for the Initiator 
        <xref target="paper.leap-of-faith" />. While the 
        Responder can just select a suitable HIT upon receiving 
        the first HIP base exchange packet (known as an "I1") without 
        a predefined HIT for the Responder, the Initiator should be more 
        careful in processing the first packet from the Responder, known
        as the "R1". For example, the Initiator should 
        make sure that it can disambiguate simultaneously initiated 
        opportunistic base exchanges from each other.

        </t>
        
        <t>
        In the context of the HIPL project, the opportunistic mode has been 
        successfully applied at the HIP layer for service registration 
        <xref target="RFC5203" />.
        HIP4BSD implemented opportunistic mode successfully with small 
        modifications to the FreeBSD socket layer to support opportunistic 
        mode.  However, the Linux implementation was more challenging,
        as described below.  
        </t>
        
        <t>
        The HIPL project experimented with opportunistic mode by interposing 
        a shim 
        at two different layers. In the first approach, an API-based shim was 
        implemented to capture socket calls from the application. This was 
        somewhat complicated to implement and explicitly enabling an 
        individual application (or groups of applications) to use the 
        opportunistic mode was required. In the second approach 
        <xref target="paper.leap-of-faith" />, the shim was 
        placed between the network and transport layers. 
        Upon successful base exchange, 
        the shim translated IP-based packet flows to HIT-based packet flows by 
        re-injecting the translated packets back to the networking stack.
        </t>
        
        <t>
        Unless bypassed for DNS, both of the opportunistic mode 
        implementation approaches in HIPL subjected the application(s) to 
        undergo opportunistic mode procedures also for DNS requests. Both 
        approaches also implemented an optional "fall back" to non-HIP base 
        connectivity if the peer did not support HIP. The detection of peer 
        support for HIP was based on timeouts. To avoid timeouts completely and 
        to reduce the delay to a single Round-Trip Time (RTT) for TCP, the project also
        experimented with TCP-specific extensions <xref target="thesis.bishaj" />.
        </t>
        
        <t>
        The OpenHIP project experimented with opportunistic mode through 
        the use of an opportunistic (-o) option. For the Responder, this 
        option determines whether or not HIP accepts I1s received with a 
        zeroed receiver's HIT. On the Initiator's side, this option allows 
        one to configure a name and LSI in the known Host Identities file. 
        When the HIT field is missing, an I1 is sent with a zeroed 
        receiver's HIT. The LSI is needed by an IPv4 application to trigger 
        the association.  Note that, normally, the LSI used is based on the 
        bottom 24 bits of the HIT, but in the case of opportunistic mode, 
        the HIT is unknown; thus, the LSI may differ from the HIT.
        </t>

        <t>
        As a summary of the opportunistic mode experimentation, it is possibly 
        best suited for HIP-aware applications. Either it can be used by HIP 
        itself in registration extensions or by native HIP applications 
        <xref target="RFC6317" />. 
        This way, the inherent security 
        trade-offs of the opportunistic mode are explicitly visible to the user 
        through the HIP-aware application.
        </t>
        
        </section>

        <section title="Resolving HITs to Addresses">
        <t>When HIP is used in opportunistic mode, the Initiator does not
        know the Responder's HIT, but it does know its IP address.  In
        most other cases, however, the kernel or applications may know
        the HITs and not the IP addresses; in these cases, an IP address
        resolution step for HITs must take place.
        </t>
        <t>
        A few techniques have been experimented with.  First, OpenDHT
        can also use HITs as keys for IP address records.  Second, 
        work by Ponomarev has shown that the reverse DNS tree may
        be used for reverse lookups of the ORCHID space
        <xref target="HIT2IP"></xref>.  Third, 
        the need for resolution may trigger some type of HIP bootstrap message,
        similar in some sense to an Address Resolution Protocol (ARP) message (to resolve the HIT).
        The bootstrap (BOS) packet used to be present in the early revisions
	of the HIP base specifications, but it was 
removed from the final 
        specifications due to insufficient interest at the time. The HIPL 
        implementation currently sends an I1 to a link
        broadcast IP address if it doesn't know the IP address of the peer. 
        It has
        triggered warnings in some Windows hosts running antivirus software that
         classified broadcasts with unknown protocol number as intrusion attempts.
        The utility of this technique is limited to the local link.
	</t>

        
        </section>

        <section title="IPsec Management API Extensions">
	       <t>A generic key management API for IP security is known as 
                        PF_KEY API <xref target="RFC2367" />.       
			PK_KEY is a socket protocol family that can be used by trusted applications to access the IPsec
			key engine in the operating system.  Users of this
                        interface typically need sysadmin privileges.</t>
			
			<t>HIP-related extensions to the PF_KEY interface define a new protocol IPPROTO_HIP. Their main 
			functionality is replacing the TCP and UDP checksum with a HIP-compatible checksum (because the transport pseudoheader is based on HITs) in incoming and
			outgoing packets. Recent Linux kernel versions do
not require patching for these extensions.
			</t>
        </section>

        <section title="Transport Protocol Issues">
	       
	    <t>When an application triggers a HIP base exchange through the transport protocol, the first 
	    data packet can be lost unless the HIP and IPsec implementation is able to buffer the packet
	    until the base exchange completes and IPsec SAs are set up. The loss of the data packet 
	    when it is a TCP SYN packet results in TCP timeout <xref target="RFC6298" />
		that unnecessarily 
	    delays the application. A loss of a UDP packet can cause even longer timeouts in applications.
	    Therefore, it was found to be important for HIP implementations to support the buffering of the packet.
	    On the other hand, if the HIP base exchange or UPDATE takes longer than 1 second, which is the case on 
	    lightweight devices, a spurious timeout can occur at the transport layer. The HIP implementation 
	    could prevent this scenario by manipulating timeout values at the transport layer or, 
	    alternatively, dropping the original or retransmitted duplicate packet.</t>
	 
	       <t>The multihoming support in <xref target="RFC5206" /> is intended for the purpose of failover, when a
		host starts using an alternative locator when a current locator fails.  However, a host could used this multihoming support for load balancing
across different locators.  Multihoming in this manner could potentially
cause issues with transport protocol congestion control and loss detection
mechanisms.  However, no experimental results from using HIP multihoming in
this capacity have been reported.
</t>

		<t>The use of paths with different characteristics can also impact the estimate of a
		retransmission timer at the sender's transport layer. TCP uses a smoothed average of the
		path's Round-Trip Time and its variation as the estimate for a retransmission timeout. After
		the retransmission timer expires, the sender retransmits 
		all outstanding packets in go-back-N fashion.</t>

		<t>When multihoming is used for simultaneous data transmission from several locators,
		there can easily be scenarios when the retransmission timeout does not correspond to the
		actual value. When packets simply experience different RTT, its variation is high, which sets
		the retransmission timeout value unnecessarily high. When packets are lost, the sender waits
		excessively long before retransmitting. Fortunately, modern TCP implementations deploying
		Selective Acknowledgments (SACKs) and Limited Transmit are not relying on retransmission
		timeouts except when most outstanding packets are lost.</t>
	
		<t>
		Load balancing among several paths requires some estimate of each path's capacity. The
		TCP congestion control algorithm assumes that all packets flow along the same path. To
		perform load balancing, the HIP layer can attempt to estimate parameters such as the delay,
		bandwidth, and loss rate of each path. A HIP scheduler could then distribute packets among
		the paths according to their capacity and delay, to maximize overall utilization and minimize
		reordering. The design of the scheduler is a topic of current research work; none are reported to exist.
		Different network paths can have different Maximum Transmission Unit (MTU) sizes.
		Transport protocols perform MTU discovery typically only in the beginning of a
		connection. As HIP hides mobility from the transport layer, it can happen that packets on the
		new path get fragmented without knowledge of the transport protocol. To solve this problem,
		the HIP layer could inform the transport layer of mobility events.
		Protocols to support such notifications to the transport layer
                have been proposed to the IETF in the past, including 
<xref target="TRIGTRAN">transport triggers</xref>,
                <xref target="LMDR">lightweight mobility detection and response (LMDR)</xref>, and 
<xref target="TCP-RLCI">TCP response to connectivity change
</xref>.</t>
               
        </section>

       <section title="Legacy NAT Traversal">
	      <t> Legacy NAT traversal for outbound-initiated connections
              to a publicly addressed Responder has been 
              implemented by all three HIP implementations; two
              (HIPL and HIP4BSD) implement 
              <xref target="RFC5770">Interactive Connectivity Establishment (ICE) techniques</xref> for inbound NAT 
              traversal.  It has also been reported that 
              the use of <xref target="RFC4380">Teredo</xref> over HIP was simpler
              than the modifications required for ICE techniques because Teredo
              effectively manifests itself as a routable, virtual locator to the system.
              UDP encapsulation is now the default
              mode of HIP operation for OpenHIP's IPv4 HIP implementation. 
              Finding an
	      IPv6 NAT implementation for experiments has been
	      difficult. In addition, the initial implementations of NAT
              traversal for HIP based on ICE techniques proved to be 
              complicated to implement or integrate, and a native NAT
              traversal mode is now under development for HIP
              <xref target="NAT-TRAVERSAL" />.  
              NAT traversal is expected to be a major mode
              of HIP operation in the future.</t>

      </section>


      <section title="Local Management of Host Identity Namespace ">
       <t>
        One issue not being addressed by some experimental implementations is
        how to perform source HIT selection across possibly multiple host identities (some may be
        unpublished).  This is akin to source address selection for 
        transport sockets.  How much HIP policy to expose to users is a
        user interface issue.  Default or automatic configuration guesses
        might have undesirable privacy implications for the user.  
        </t>

	      <t>
        Helsinki University of Technology (TKK, now Aalto) has implemented an extension of 
        the native HIP API to control
	      multiple host identities <xref target="thesis.karlsson" />.
              A problem with Linux routing and multiple identities was discovered
              by the HIPL development group. As Linux routing is based on longest prefix match,
              having multiple HITs on virtual devices is problematic from the viewpoint of
              access control because the stack selects the source HIT based on the destination HIT.
              A coarse-grained solution for this is to terminate the longest prefix match for 
              ORCHIDs in the Linux networking statck.  However, a more fine-grained solution
              tries to return a source HIT matching to the algorithm used for generating the
              destination HIT in order to facilitate compatibility with new algorithms 
              standardized in the future.
        </t>

        <t>
        There are security and privacy issues with storing private keys
        securely on a host. Current implementations simply store private
        keys in a file that is readable only by applications with root
        privileges. This may not be a sufficient level of protection, 
        as keys could be read directly from the disk or, e.g., some application
        with a set-user-id flag. Keys may be stored on a trusted platform
        module (TPM), but there are no reported HIP experiments with such
        a configuration.  In a Boeing pilot project, temporary certificates
        were generated from a key on a USB SIM chip and used in the HIP 
        base exchange.  Use of certificates in HIP requires extensions 
        to the HIP specifications <xref target="RFC6253" />.
        Another option is encrypting keys on disks and keeping a passkey 
        in memory (like in Secure Socket Layer (SSL) certificates on servers, that ask for a 
        password when booting Linux).
        </t>
      </section>

      <section title="Interactions with Host Firewalls">
         <t>
         HIP is presently an experimental protocol, and some default
         firewall configuration scripts on popular Linux distributions
         do not permit the HIP number.  Determining which rules 
         to modify
         without compromising other policies can be tricky; the default
         rule set on a previous SuSE Linux distribution was discovered to
         contain over one hundred rules.  Moreover, 
         it may be the case that the end user has no control over the
         firewall settings, if administered by an enterprise IT department.
         However, the use of HIP over UDP has alleviated some of these
         concerns.  When using HIP over UDP, the firewall needs to allow 
         outbound UDP packets and responses to them.
         </t>

	    </section>
      </section>

      <section title="IPv4 versus IPv6 Issues">
              <t> HIP has been oriented towards IPv6 deployment, but all
              implementations have also added support for IPv4.
	      HIP supports IPv6 applications well, as the HITs are used from the general IPv6 
	      address space using the ORCHID prefix. HITs are statistically unique, although they
	      are not routable at the IP layer. Therefore, a mapping between HITs and routable
	      IP addresses is necessary at the HIP layer, unless an overlay network or broadcast technique is available 
	      to route packets based on HITs.</t>
	      
	      <t>For IPv4 applications, a 32-bit Local Scope Identifier (LSI) is necessary at the sockets API. 
	      The LSI is an alias for a host identity and is only meaningful within one host.  
	      Note that an IPv4 address may be used as an LSI if it is configured
	to refer to a particular host identity on a given host, or LSIs may be
	drawn from an unallocated IPv4 address range, but lack of coordination
        on the LSI space may hinder implementation portability.
	      </t>
	      
	      <t>
      HIP makes it possible to use IPv6 applications over the IPv4 network
      and vice versa.  This has been called "interfamily operation" (flexibility
      between different address families) and is enabled by the fact that the
      transport pseudoheader is always based on HITs regardless of whether the 
      application or the underlying network path is based on IPv4.  
      All three open source HIP implementations have demonstrated some form of 
      interfamily handoff support.  The interfamily portion of the BEET patch
      in the Linux kernel was found more difficult to complete compared with the
      single-family processing.
              </t>
              <t>
                HIP also provides the potential
                to perform cross-family support, whereby one side of a
                transport session is IPv6 based and another is IPv4 based
                <xref target="paper.handovers" />.
	      </t>
	      
	    </section>
      

      <section title="What Have Early Adopters Learned from Experience?">
          <t> 
          Implementing HIP in current stacks or as overlays on unmodified
          stacks has generally been successful.  Below are some caveats
          and open issues. </t>

        <t>  
          Experimental
          results comparing a kernel versus user-space HIP implementations
          in terms of performance and DoS resilience would
          be useful. If the kernel implementation is shown to perform
          significantly better than the user-space implementation, it
          may be a sufficient justification to incorporate HIP within the 
          kernel.  However, experiences on general purpose laptops and
          servers suggests that for typical client use of HIP, user-space
          implementations perform adequately.</t>	

	    <t>
          Although the HIPL kernel-based keying implementation was submitted
          to the Linux kernel development process, the implementation was
          not accepted.  The kernel developers felt that since Mobile IP (MIP)
and the Internet Key Exchange Protocol (IKE) are
          implemented as user-space signaling daemons in Linux,
		  that should be the approach for HIP, too. Furthermore, the 
          kernel patch was somewhat big, affecting the kernel in many places 
          and having several databases.  The Linux kernel maintainers did
          eventually accept the BEET patch.
		</t>
          
	    <t>
          Some users have been explicitly 
   	  asking about the coexistence of HIP with other VPN and Mobile IP 
   	  software. On Windows, VPN clients tend to install their own
     versions of TAP drivers that might conflict with the driver
     used by the OpenHIP implementation. There may also be issues due
      to lack of coordination leading to unintended HIP-over-VPN sessions
      or lack of coordination of the ESP Security Parameter Index (SPI) space.  However, these
      types of conflicts are only speculation and were not reported
      to the research group; only some positive reports of HIP and VPN
      software properly coexisting have been reported by the HIPL group.   	  
   	  </t>      
          <t>
          With legacy applications, LSI support is important because
          IPv6 is not widely used in applications.  The main issues in
          getting applications to work well over HIP have been related
          to bugs in the implementations themselves, or latency related
          issues (such as TCP timeouts due to Linux IPsec implementation).
          There have been no major obstacles encountered in practice,
          and there has also  been some experience in using HIP with
          native applications <xref target="paper.p2psip" />.
          </t>

	    </section>
    </section>

    <section anchor="sec.infra" title="Infrastructure Implications">

      <t>
      This section focuses on the deployment of infrastructure 
      to support HIP hosts.
      </t>

      <section title="Impact on DNS">
	      <t> 
        HIP DNS extensions <xref target="RFC5205" /> were developed by 
        NEC Eurolabs and contributed to OpenHIP and were also developed by
        the HIPL project, both for the BIND9 DNS server.  Legacy applications 
        do not query for HIP resource records, but DNS proxies (local
        resolvers) interpose themselves in the resolution path and can
        query for HI records.  The BIND 9 deployment for HIPL uses binary blob format to store the HIP resource records; this means that no changes to the DNS server are required.
        </t>
        <t> There have been no studies reported on the impact of changes based on <xref target="RFC5205" />
        to HIP on the existing DNS.  There have been some studies
        on using DNS to store HITs in the reverse tree
        <xref target="HIT2IP" />.  
        </t>
      </section>

      <section title="HIP-Aware Middleboxes">
	    <t> A design of a HIP registration protocol for architectured
	    NATs (NATs that are HIP aware and use HIP identifiers to 
            distinguish between hosts) has been completed and published 
            as RFC 5204.  Performance measurement
	    results with a prototype are available, but experimentation on
	    a wide scale is still missing. RFC 5207 provides a problem
            statement for HIP-aware NATs and middleboxes
            <xref target="RFC5207" />.</t>

	    <t>
        As argued by Aura, et al. <xref target="paper.hipanalysis" />,
        the encryption of the
        Initiator Host Identity (HI) prevents policy-based NAT and firewall support, and 
        middlebox authentication, for HIP. The
        catch is that when the HI is encrypted, middleboxes in the
        network cannot verify the signature of the second base exchange
        packet from the Initiator (I2) and, thus, cannot
        safely create a state for the HIP association. On the other
        hand, if the HI is not encrypted, a stateful middlebox 
        can process the I2 and create protocol state for the session.
        </t>
      </section>

      <section title="HIT Resolution Infrastructure">
	    <t>
        OpenDHT HIT-to-IP address resolution has been implemented by 
        Aalborg University, Denmark, Helsinki Institute for
        Information Technology for HIPL, and by Boeing for OpenHIP
        <xref target="RFC6537" />.
        </t>

	    <t>
        The prototype of the Host Identity Indirection Infrastructure
        (Hi3) has been implemented using OpenHIP and HIPL. A
        set of 25 i3 servers was running on PlanetLab for several years.
        While a
        PlanetLab account is required to run the servers, anybody could
        openly use the provided service.</t>
	    <t>
        The main idea of Hi3 is to transmit HIP control packets using the i3
        system as a lookup and rendezvous service, while transmitting
        data packets efficiently end-to-end using IPsec. Performance
        measurements were conducted comparing the association
        setup latency, throughput, and RTT of Hi3 with plain IP, HIP,
        and i3 <xref target="paper.hi3" />.</t>
	    <t>
        One difficulty has been with debugging the i3 system. In some
        cases, the messages did not traverse i3 correctly, due to its
        distributed nature and lack of tracing tools. Making the
        system work has been challenging.  Further, since the original 
        research work was done, the i3 servers have gone offline.</t>
	    <t>
        NATs and firewalls have been a major disturbance in Hi3 
        experiments. Many networks did not allow incoming UDP
        packets to go through, therefore, preventing messages from i3
        servers to reach the client.</t>
	    <t>
        So far, the Hi3 system has been evaluated on a larger scale
        only analytically. The problem is that running a larger number
        of clients to create a sufficient load for the server is
        difficult. A cluster on the order of a hundred Linux servers
        is needed for this purpose. Contacts to a State Supercomputer
        Centre in Finland have not been successful so far. A possible
        option is to use one of the existing Emulab installations,
        e.g., in Utah, for these tests. 

</t>

      </section>

      <section title="Rendezvous Servers">
	    <t> 
        A rendezvous server (RVS) <xref target="RFC5204" />
        has been implemented by HIIT for HIPL,
        and an implementation also exists for OpenHIP.  The concept has
        been extended to a relay server in <xref target="RFC5770" />.
        Initial experimentation with the HIPL implementation produced the
        following observations:

	    <list style="symbols">
	      <t> RVS may be better than dynamic DNS updates for hosts
                  that change their address rapidly.
              </t>
        <t>
        Registration of a HIP host to RVS costs a base exchange.
        </t>

        <t>
        UPDATE and CLOSE packets sent through rendezvous servers
        is advised; RVS handling of UPDATE messages can typically solve
        the double jump <xref target="MULTI-HOMED" /> mobility problem.
        </t>
	    </list>
      </t>
	    <t>The following advanced concepts need further study:
	    <list style="symbols">

        <t> Multiple RVSs per host for fault 
tolerance (e.g., one 
        rendezvous node crashes) and an algorithm for selecting the 
        best RVS.  </t>

	      <t> Load balancing. An RVS server could distribute I1s to 
        different Responders if the Responder's identity is shared or 
        opportunistic HIP is used.  </t>
 
        <t> Offering a rendezvous service in a P2P fashion by HIP hosts.
        </t>
	    </list>
 </t>
      </section>

<section title = "Hybrid DNS-DHT Resolution">

<t>
In addition to pure DNS and pure DHT HIP name 
resolution,
a hybrid approach combining the standard DNS 
interface for clients
with last-hop DHT resolution was developed. The 
idea is that 
the benefits of DNS solution (wide deployment, 
support for legacy
applications) could be combined with advantages 
of DHT (fault tolerance,
efficiency in handling flat data keys). The DHT 
is typically run internally
by the organization managing the last-hop DNS 
zone and the DNS server.
That way, the HITs belonging to that 
organization could be stored locally
by the organization that improves deployability 
of the resolution system.
However, organizations could also share a DHT 
between themselves or connect
their DNS servers to a publicly available DHT, 
such as OpenDHT. The benefit of
running a DHT on a local server cluster compared 
to a geographically spread DHT 
is  higher performance due to decreased 
internal DHT latencies.
</t>

<t>
The system was prototyped by modifying the BIND 
DNS server to redirect the 
queries for HITs to a DHT server. The interface 
was implemented in XML according
to specifications  <xref target="RFC6537" />.
The system is completely backward compatible 
to legacy applications since the standard DNS 
resolver interface is used.
</t>

<t>
Performance of the system was evaluated by 
performing a rapid sequence of requests
for querying and updating the HIT-to-IP address 
mapping. The request rate was varied from 1 to 
200 requests per second.
The average latency of one
query request was less than 50 ms and the 
secured updated latency less than 100 ms with 
a low request rate. However, the delay was increasing
exponentially with the request rate, reaching 1 
second for 200 requests per second (update rate 0) and almost 2 
seconds (update rate 0.5). Furthermore, the maximum 
delay exceeded the mean by several times. 
</t>

<t>
Based on experiments, a multi-processor system 
could handle more than 
1000 queries per second.
The latencies are dominated by the DHT 
resolution delay, and the DNS component 
is rather small. This is explained by the 
relative inefficiency of used DHT 
implementation (Bamboo) and could be definitely 
improved in the future. 
</t>
    </section>
  </section>




    <section anchor="sec.apps" title="Application Implications">

     <t> In a deployed HIP environment, applications may be HIP aware
       or HIP unaware.  <xref target="RFC5338">RFC 5338</xref> 
       describes various techniques to allow
       HIP to support unmodified applications.
       Some additional application considerations are listed below. </t>

      <section title="Non-Intrusive HIP Insertion">
	    <t>
        One way to support legacy applications that use dynamic linking
        is to dynamically interpose a modified resolver library.
        Using HIPL, several legacy applications were shown to work
        without changes using dynamic re-linking of the resolver
        library.  For example, the Firefox web 
browser successfully worked
        with an Apache web server. The re-linking just requires
        configuring an LD_PRELOAD system variable that can be performed
        in a user shell profile file or as a start-up wrapper for
        an application.  This provides the user with fine-grained
        policy control over which applications use HIP, which could 
        alternately be considered a benefit or a drawback depending on
        whether the user is burdened with such policy choices.  The 
        technique was also found to be sensitive to loading LD_PRELOAD twice, 
        in which case the order of linking dynamic libraries must be
        coded carefully.
        </t>

     <t>
        Another method for transparently using HIP, which has no reported
        implementation experience, is via local application 
        proxies (e.g., squid web proxy) that are modified to be HIP aware.
        Discussion of proxies for HIP is a current focus of research
        group activities <xref target="HIPRG-PROXIES" />.
      </t>
      </section>

      <section title="Referrals">

        <t>A concern that 
        FTP would not
        work due to the problem of application referrals, i.e., passing
        the IP address within application messages, was discovered not to be a problem
        for FTP in practice. It
        is shown to work well both in the passive and active 
        modes <xref target="paper.namespace"></xref>.
        It remains an open question how big problem referrals really are in the practice.
        At least, they do not seem used for the client side because they are behind NATs,
        and, therefore, client addresses are unsuitable as referrals.
      </t>
      </section>    

      <section title="Latency">
        <t>
        Some applications may be sensitive to additional RTTs or processing
        due to HIP resolutions or the protocol itself.  For instance,
        page load speed for web browsers is a critical metric for
        browser designers.  Some applications or
        deployments may not wish to trade application speed for the security
        and mobility management that HIP offers.
      </t>
      </section>    

    </section>

    <section anchor="sec.operator" title="Network Operator's Perspective">

    <t> There is no known deployment of HIP by a data service provider.  
        However, some issues regarding HIP have been brought to the 
        HIP research group by a network provider and are summarized
        below and in <xref target="HIP-OPERATORS"></xref>. </t> 

      <section title="Management of the Host Identity Namespace">
	    <t>When a network operator deploys HIP for its customers, several issues with
	    management of host identities arise. The operator may prefer to generate the
	    host identity itself rather than let each host create the identities.
	    Several factors can create such a need. Public-private key generation is a 
	    demanding operation that can take tens of seconds on a lightweight device,
	    such as a mobile phone. After generating a host identity, the operator can 
	    immediately insert it into its own AAA databases and network firewalls. This way,
	    the users would not need to be concerned with technical details of host
	    identity management.</t> 


		<t>The operator may use a Public Key Infrastructure (PKI) to certify host
		identities of its customers. Then, it uses the private key of
an operator's
		Certificate Authority (CA) to sign the public key of its customers. This way,
		third parties possessing the public key of the CA can verify the customer's
		host identity and use this information, e.g., for admission control to infrastructure.
		Such practice raises the security level of HIP when self-generated host
		identities are used.</t>
	    
	    <t>When the operator is using neither PKI nor DNS Security (DNSSEC) host names, the problem
	    of securely exchanging host identities remains. When HIP is used in
	    opportunistic mode, a man-in-the-middle can
	    still intercept the exchange and replace the host identities with its own. For instance,
	    the signaling provided by SIP could be used to deliver host identities if it were secured
	    by existing mechanisms in the operator's network. 
</t>  
	    

      </section>

      <section title="Use of ESP Encryption">

	    <t> The research group has discussed whether operators
         can provide "value-added" services and priority, and comply with
         wiretapping laws, if all sessions are encrypted.  This is not
         so much a HIP issue as a general end-to-end encryption issue.
         </t>
         
         <t>
         The processing power of mobile devices also must be considered.
         One study evaluated the use of HIP and ESP on lightweight devices (Nokia
         N770 Internet Tablets having 200 MHz processors) <xref target="paper.mobiarch" />. 
         The overhead of using ESP on such a platform was found to be tolerable, about
         30% in terms of throughput. With a bulk TCP transfer over WiFi, transfer without HIP was
         producing 4.86 Mbps, while over ESP security associations set up by HIP it was
         3.27 Mbps. A lightweight HIP base exchange for this purpose is
         being developed at the time of this writing 
         <xref target="HIP-DEX" />.</t>

         <t>
         It is also possible to use HIP in a NULL encryption configuration if
         one of SHA1 or MD5 authentication are used.
         </t>
      </section>

      <section title="Access Control Lists Based on HITs">
      
	      <t>A firewall typically separates an organization's network from the rest of the Internet. An
	Access Control List (ACL) specifies packet forwarding policies in the firewall. Current
	firewalls can filter out packets based on IP addresses, transport protocol, and port values.
	These values are often unprotected in data packets and can be spoofed by an attacker. By
	trying out common well-known ports and a range of IP addresses, an attacker can often
	penetrate the firewall defenses. 
        </t>
        <t> Furthermore, legacy firewalls often disallow IPsec traffic and
	drop HIP control packets.  HIP allows ACLs to be protected based
        on packet exchanges that may be authenticated by middleboxes.  However,
        HITs are not aggregatable, so HIT-based ACLs may be longer in length
        (due to an inability to group hosts with a single entry) and
        harder to deal with by human users (due to the length of the HIT 
        compared with an IPv4 or IPv6 prefix).
        </t>

	<t>Additionally, operators would like to grant access to the clients 
           from domains such as example.com regardless of their current 
           locators or HITs.
	   This is difficult without a forward confirmed reverse DNS
           to use for non-repudiation purposes.
	</t>

      </section>

      <section title="Firewall Issues">
	      <t>
        Helsinki University of Technology (TKK, now Aalto) has implemented a HIP firewall 
        based on Linux iptables <xref target="paper.firewall" /> 
        that operates in user-space.
        </t>

        <t>
        In general, firewalls can be stateless, filtering packets based only on the ACL, and stateful, following and remembering packet flows. Stateless firewalls are simple to implement but provide
	only coarse-grained protection. However, their performance can be efficient since packet processing
	requires little memory or CPU resources. A stateful firewall determines if a packet belongs
	to an existing flow or starts a new flow. A flow identifier combines information from several
	protocol headers to classify packets. A firewall removes the state when the flow terminates
	(e.g., a TCP connection is closed) or after a timeout. A firewall can drop suspicious packets
	that fail a checksum or contain sequence 
numbers outside of the current sliding window.</t>
        <t>
	A transparent firewall does not require that hosts within the protected network register or
	even know of the existence of the firewall. An explicit firewall requires registration and
	authentication of the hosts.</t>

	<t>
	A HIP-aware firewall operating in the middle identifies flows using HITs of communicating hosts, as well as
	SPI values and IP addresses. The firewall must link together the HIP base exchange and
	subsequent IPsec ESP data packets.  During the base
	exchange, the firewall learns the SPI values from I2 and R2 packets. Then, the firewall only
	allows ESP packets with a known SPI value and arriving from the same IP address as during
	the base exchange. If the host changes its location and the IP address, the
	firewall, if still on the path, learns about the changes by following the mobility update packets.
	</t>

        <t>
        It is possible to implement a stateless, end-host-based firewall to
        reuse existing higher-layer mechanisms such as access control lists
        in the system.  In this mode of operation, HITs would be used in
        the access control lists, and while the base exchange might complete,
        ESP is not passed to the transport layer unless the HITs are allowed in
        the access control list.
        </t>

	<t>
	A HIP host can register to an explicit firewall using the usual procedure <xref target="RFC5203" />.
	The registration enables the host and the firewall to authenticate each other. In a common
	case, where the Initiator and Responder hosts are located behind different firewalls, the
	Initiator may need to first register with its own firewall, and afterward, with the Responder's firewall. 
    </t>
    <t>
         Some researchers have suggested that a firewall for security-critical 
         environments should get involved in the base exchange and UPDATE 
         procedures with middlebox-injected echo requests. Otherwise, the 
         firewall can be circumvented with replay attacks if there is a
         compromised node within the network that the firewall is trying
         to protect <xref target="HIP-MIDDLE" />.
      </t>

      </section>

    </section>

    <section anchor="sec.privacy" title="User Privacy Issues">
	    	    
    	<t>Using public keys for identifying hosts creates a privacy problem as third parties can
	determine the source host even if attached to a different location in the network. Various
	transactions of the host could be linked together if the host uses the same public key.
	Furthermore, using a static IP address also allows linking of transactions of the host.
	Multiplexing multiple hosts behind a single NAT or using short address leases from DHCP
	can reduce the problem of user tracking. However, IPv6 addresses could reduce the occurrence of NAT
	translation and cause additional privacy issues related to the use of Media Access Control (MAC) addresses in IPv6
	address autoconfiguration.  HIP does provide for the use of 
        anonymous (unpublished) HITs in cases in which the Initiator prefers
        to remain anonymous, but the Responder must be willing to accept
        sessions from anonymous peers.</t>

        <t>With mutual authentication, the HIP Initiator should not have
        to reveal its identity (public key) to either a passive adversary or 
        an active attacker.  The HIP Initiator can authenticate the
        Responder's R1 packet before encrypting its host identity with the
        Diffie-Hellman-generated keying material and sending it in the 
        I2 packet.  The authentication step upon receiving an R1 defeats
        the active attacker (impersonator) of the Responder, and the
        act of encrypting the identity defeats the passive adversary.
        Since the Responder sends its public key unencrypted in the first 
        reply message (R1) to the Initiator, the Responder's
	identity will be revealed to third-party on-path eavesdroppers.  
        However,
        if the Responder authenticates the Initiator and performs access
        controls before sending the R1, the Responder can avoid disclosing 
        its public key to an active attacker.</t>

	<t>
	DNS records can provide information combining host identity and location information,
	the host public key, and host IP address. Therefore, identity and location privacy are related
	and should be treated in an integrated approach. The goal of the BLIND is to provide a
	framework for identity and location privacy <xref target="paper.blind" /> <xref target="HIP-PRIVACY" />. 
	The identity protection is achieved by hiding
	the actual public keys from third parties so that only the trusted hosts can
	recognize the keys. Location privacy is achieved by integrating traffic forwarding with NAT
	translation and decoupling host identities from locators. The use of random IP and MAC
	addresses also reduces the issue of location privacy shifting the focus to protecting host
	identifiers from third parties.  This approach is, by its very 
nature, incompatible with middlebox authentication.</t>

	<t>To prevent revealing the identity, the host public key and its hash (HIT) can be encrypted
	with a secret key known beforehand to both Initiator and Responder. However, this is a
	requirement that cannot be easily implemented in practice. The BLIND framework provides
	protection from active and passive attackers using a modified HIP base exchange.  If the host avoids storing its public keys in the reverse DNS or DHT
	repository, the framework achieves full location and identity privacy.</t>

	<t>An alternative approach to reducing privacy threats of persistent identifiers is to replace them
	with short-lived identifiers that are changed regularly to prevent user tracking. Furthermore,
	identifiers must be changed simultaneously at all protocol layers; otherwise, an adversary
	could still link the new identifier by looking at an identifier at another protocol layer
	that remained the same after the change. The HIP privacy architecture that simultaneously
	changes identifiers on MAC, IP, and HIP/IPsec layers was developed at 
Helsinki University of Technology (TKK, now Aalto) <xref target="thesis.takkinen" />.
HIP could be extended in the future to
        allow active sessions to migrate identities.</t>

    </section>

    <section anchor="sec.activities" title="Experimental Basis of This Report">

      <t>This report is derived from reported experiences and research
         results of early adopters, implementers, and research activities.
         In particular, a number of implementations have been in development
         since 2002 (<xref target="sec.host" />). 
      </t>

      <t>One production-level deployment of HIP has been reported.  Boeing
         has described how it uses HIP to build Layer 2 VPNs over untrusted
         wireless networks <xref target="HIPLS" />.  
         This use case is not a traditional end-host-based
         use of HIP, but rather, it is one that uses HIP-aware middleboxes
         to create ESP tunnels on-demand between provider-edge (PE) devices. 
         </t>

      <t>The InfraHIP II project is deploying HIP infrastructure (test
         servers, rendezvous and relay servers) in the public Internet.</t>

       <t> The following is a possibly 
         incomplete list of past and current research activities related to HIP.

      <list style="symbols">
      <t>Boeing Research &amp; Technology (J. Ahrenholz, O. Brewer, J.
     Fang, T. Henderson, D. Mattes, J. Meegan, R. Paine, S. 
     Venema, OpenHIP implementation, Secure Mobile Architecture)</t>
      <t>NomadicLab, Ericsson (P. Jokela, P. Nikander, J. Melen. 
         BSD HIP implementation)</t>
      <t>Helsinki Institute for Information Technology (HIIT) (A. Gurtov, 
         M. Komu, A. Pathak, D. Beltrami. 
         HIPL, legacy NAT traversal, firewall, i3, native API)</t>
      <t>Helsinki University of Technology (TKK, now Aalto) (Janne Lindqvist, 
         Niklas Karlsson, Laura Takkinen, and Essi Vehmersalo. 
         HIP security and firewalls, multiple identities, and privacy 
         management)</t>
      <t>University of California, Berkeley (A. Joseph, HIP proxy 
         implementation) </t>
      <t>Laboratory of Computer Architecture and Networks, Polytechnic 
         School of University of Sao Paulo, Brazil 
        (T. Carvalho, HIP measurements, Hi3) </t>
      <t>Telecom Italia (M. Morelli, comparing existing HIP 
         implementations) </t>
      <t>NEC Heidelberg (L. Eggert, M. Esteban, V. Schmitt 
         working on RVS implementation, DNS, NAT traversal) </t>
      <t>University of Hamburg-Harburg (M. Shanmugam, A. Nagarajan, HIP 
         registration protocol) </t>
      <t>University of Tuebingen (K. Wehrle, T. Lebenslauf to work on Hi3 or 
         HIP-OpenDHT) </t>
      <t>University of Parma (UNIPR), Department of Information Engineering
     Parma, Italy. (N. Fedotova, HIP for P2P)</t> 
      <t>Siemens (H. Tschofenig, HIP middleboxes) </t>
      <t>Denmark (Aalborg University, Lars Roost, Gustav Haraldsson, 
         Per Toft, HIP evaluation project, OpenDHT-HIP interface) </t>
      <t>Microsoft Research, Cambridge (T. Aura, HIP analysis) </t>
      <t>MIT (H. Balakrishnan. Delegation-Oriented Architecture)</t>      
      <t>Huawei (D. Zhang, X. Xu, hierarchical HIP architecture, HIP proxy,
     key revocation)</t>
      </list></t>

    </section>

    <section anchor="sec.related" title="Related Work on ID-Locator Split">

      <t> This section briefly summarizes the related work on the ID-locator
      split with particular focus on recent IETF and IRTF activity.
      In the academic research community, several related 
      proposals were explored prior to the founding of this research group,
      such as the Internet Indirection Infrastructure (i3)
      <xref target="paper.i3"></xref>, IPNL <xref
      target="paper.layered"></xref>, DataRouter <xref
      target="paper.datarouter"></xref>, Network Pointers <xref
      target="paper.netpointers"></xref>, FARA <xref
      target="paper.fara"></xref>, and TRIAD <xref
      target="paper.triad"></xref>.  </t>


      <t> The topic of whether a new namespace is needed for the
      Internet has been controversial.  The Namespace Research Group (NSRG)
      at the IRTF was not able to reach consensus on the issue, nor
      even to publish a final report.  Yet, there seems to be little
      disagreement that, for many scenarios, some level of indirection
      from network name to network location is essential or highly
      desirable to provide adequate service.  Mobile IP <xref
      target="RFC3775"></xref> is one example
      that reuses an existing namespace for host naming.  Since
      Mobile IP was finalized, many new variants to providing this
      indirection have been suggested.  Even prior to Mobile IP,
      the IETF has published informational documents describing
      architectures separating network name and location, including
      the work of Jerome Saltzer <xref target="RFC1498"></xref> and
      Nimrod <xref target="RFC1992"></xref>.
      </t>

      <t>Most recently, there have been standardization and development
      efforts in the IETF and IRTF as follows:
      <list style="symbols">
        <t> The Site Multihoming in IPv6 (multi6) WG documented the 
            ways that multihoming is 
currently implemented in IPv4 
            networks and evaluated several approaches for advanced
            multihoming. The security threats and impact on transport 
            protocols were covered during the evaluation. The work continued in another WG, Site
     Multihoming by IPv6 Intermediation (shim6), which is focusing
     on specifications of one selected approach <xref target="RFC5533" />. Shim6 uses 
            the approach of inserting a shim layer between the IP and the 
            transport layers that hides effects of changes in the set of 
            available addresses. The applications are using one active 
            address that supports referrals. Shim6 relies on cryptographically 
            generated IPv6 addresses to solve the address ownership problem. 
            HIP and shim6 are architecturally similar and use a common 
            format for control packets. 
            HIP specifications define only simple multihoming scenarios 
            leaving such important issues as interface selection untouched.
            Shim6 offers complementary functionality that can be reused 
            in HIP <xref target="REAP4HIP" />.  
            The OpenHIP implementation integrates HIP and shim6 
            protocols in the same framework, with the goal of allowing 
            HIP to reuse the shim6 failure detection protocol.  Furthermore,
            HIP and shim6 socket APIs have been jointly designed
            <xref target="RFC6317" /> 
            <xref target="RFC6316" />.
         </t>

        <t>The IRTF Routing Research Group (RRG) has explored a class of 
           solutions to the global routing scalability problem that 
           involve either separation of the existing IP address space into
           those used for identifiers and locators as in LISP 
           <xref target="LISP" /> and Six/One Router 
           <xref target="SIX-ONE" /> 
           and those advocating a fuller separation of these roles including
           ILNP <xref target="ILNP" /> 
           and RANGI <xref target="RANGI" />.</t>

        <t>The End-Middle-End research group considered the potential for
           an explicit signaling and policy control plane for middleboxes 
           and endpoints <xref target="EME" />; 
           at a joint meeting at IETF 69, the HIP and EME research groups
           discussed whether the EME framework could help HIP with middlebox
           traversal. </t>

        <t>The IETF Multipath TCP working group is developing mechanisms 
           to simultaneously use multiple paths in a regular TCP session.
           The MPTCP solution aims to solve the multihoming problem also
           addressed by HIP but by solving it for TCP specifically. </t>

        <t>The Unmanaged Internet Protocol bears several similarities to
           the HIP architecture, such as the focus on identifiers that
           are not centrally managed that are also based on a cryptographic
           hash of a node's public key <xref target="thesis.ford" />. </t>

        <t>Apple Back To My Mac service provides secure connections between
           hosts using IPsec between a pair of host identifiers.  However,
           the host identifier is reported to be an IPv6 Unique Local Addressing (ULA) address rather
           than a HIP identifier <xref target="RFC6281" />.</t>
      </list>
      </t>

      <t> Although the HIP research group has not formally tried to compare
          HIP with other ID-locator split approaches, such discussions
          have occurred on other lists such as the Routing research group
          mailing list, and a comparison of HIP's mobility management 
          solution with other approaches was published in
          <xref target="MOBILITY-COMPARISON" />.
      </t>

      </section>


    <section title="Security Considerations">
      <t> This document is an informational survey of HIP-related research
          and experience.  Space precludes a full accounting of all security
          issues associated with the approaches surveyed here, but the
          individually referenced documents may discuss security 
          considerations for their respective protocol component.  HIP
          security considerations for the base HIP protocol can be found in
          Section 8 of <xref target="RFC5201"></xref>.  
      </t>
    </section>



    <section title="Acknowledgments">
      <t>
      Miika Komu, Pekka Nikander, Ari Keranen, and Jeff Ahrenholz have 
      provided helpful comments on earlier draft versions of
      this document. Miika Komu also contributed the section on opportunistic
      mode.  We also thank Dacheng Zhang 
      for contributions on hierarchical HIP
      architectures and the Crypto Forum Research Group (Adam Back and
      Paul Hoffman) for clarification of Diffie-Hellman privacy properties. 
    </t>
    </section>

    </middle>
    <back>
<?rfc rfcedstyle="no" ?>
     <references title="Informative References">

	  &RFC6298;
      &RFC4423;
      &RFC5201;
      &RFC5202;
      &RFC5203;      
      &RFC5204;
      &RFC5205;
      &RFC5206;
      &RFC5207;
      &RFC5770;
      &RFC4380;
      &RFC4843;
      &RFC4303;
      &RFC3775;
      &RFC1498;
      &RFC1992;
      &RFC2367;
      &RFC5338;
      &RFC5533;
      &RFC6253;
      &RFC6281;
      &RFC6316;
      &RFC6317;
   

<reference anchor='RFC6537'>
<front>
<title>Host Identity Protocol Distributed Hash Table Interface</title>

<author initials='J' surname='Ahrenholz' fullname='Jeff Ahrenholz'>
    <organization />
</author>

<date month='February' year='2012' />

<abstract><t>This document specifies a common interface for using HIP with a Distributed Hash Table service to provide a name-to-Host-Identity-Tag lookup service and a Host-Identity-Tag-to-address lookup service.</t></abstract>

</front>

<seriesInfo name='RFC' value='6537' />

</reference>


      &paper.i3;
      &paper.layered;
      &paper.datarouter;
      &paper.netpointers;
      &paper.fara;

<!--      &paper.triad; -->
<reference anchor='paper.triad' target="http://www-dsg.stanford.edu/triad/triad.ps.gz">
<front>
<title>TRIAD: A New Next-Generation Internet Architecture</title>

<author initials='D' surname='Cheriton' fullname='David Cheriton'>
    <organization />
</author>

<author initials='M' surname='Gritter' fullname='Mark Gritter'>
    <organization />
</author>

<date month='July' year='2000' />
</front>

</reference>





<!--      &paper.blind; -->
<reference anchor='paper.blind'>
<front>
      <title>BLIND: A complete identity protection framework for end-points</title>
      <author initials='J' surname='Ylitalo' fullname='Jukka Ylitalo'>
       <organization></organization>
</author>
      <author initials='P' surname='Nikander' fullname='Pekka Nikander'>  
       <organization></organization>    
</author>

      <date month='April' year='2004' />
</front>
<seriesInfo name='Proc. of the' value='Twelfth International Workshop on
  Security Protoc
ols' />
</reference>


<!--  &paper.usable-security; -->
<reference anchor='paper.usable-security'>
<front>
      <title>Usable Security Management with Host Identity Protocol</title>
      <author initials='K.' surname='Karvone' fullname='Kristiina Karvone'>
</author>
      <author initials='M.' surname='Komu' fullname='Miika Komu'> </author>
      <author initials='A.' surname='Gurtov' fullname='Andrei Gurtov'>
</author>
      <date month='May' year='2009' />
</front>
<seriesInfo name='' value='Proc. of the IEEE/ACS International Conference on
  Computer Systems and Applications' />
</reference>

      &paper.hipanalysis;
      &paper.namespace;
      &paper.mobiarch;

<!--      &paper.hi3; -->

<reference anchor='paper.hi3' target="http://www.cs.helsinki.fi/u/gurtov/papers/comcom_hi3.pdf">
<front>
<title>Hi3: An Efficient and Secure Networking Architecture for Mobile Hosts</title>

<author initials='A' surname='Gurtov' fullname='A. Gurtov'>
    <organization />
</author>

<author initials='D' surname='Korzon' fullname='Dmitri Korzon'>
    <organization />
</author>

<author initials='A' surname='Lukyanenko' fullname='Andrey Lukyanenko'>
    <organization />
</author>

<author initials='P' surname='Nikander' fullname='Pekka Nikander'>
    <organization />
</author>



</front>
<seriesInfo name='Computer communication, 31 (2008),' value='p. 2457-2467' />
</reference>



      &paper.p2psip;
      &paper.handovers;
      &paper.leap-of-faith;
      &thesis.takkinen;

   <reference anchor="thesis.takkinen" target="http://www.tml.tkk.fi/~anttiyj/Laura-Privacy.pdf">

     <front>
       <title>Host Identity Protocol Privacy Management</title>

       <author initials="L" surname="Takkinen" fullname="L. Takkinen">
         <organization></organization>
       </author>

       <date month="March" year="2006" />
     </front>
     <seriesInfo name="Master" value="thesis" />
   </reference>

<!--      &thesis.vehmersalo;  -->
<reference anchor='paper.firewall' target="">
<front>
<title>Enterprise Network Packet Filtering for Mobile Cryptographic Identities</title>

<author initials='J' surname='Lindqvist' fullname='Jane Lindqvist'>
    <organization />
</author>

<author initials='E' surname='Vehmersalo' fullname='Essi Vehmersalo'>
    <organization />
</author>

<author initials='M' surname='Komu' fullname='Mikka Komu'>
    <organization />
</author>

<author initials='J' surname='Manner' fullname='Jukka Manner'>
    <organization />
</author>

<date month="January" year="2010" />

</front>
<seriesInfo name='International Journal of Handheld Computing Research (IJHCR), Volume 1, Issue 1,' value='Pages 79-94' />
</reference>

      &thesis.karlsson;
      &thesis.ford;
      &thesis.bishaj;
      <!-- &I-D.nikander-esp-beet-mode; Expired--> 


<reference anchor='BEET-MODE'>
<front>
<title>A Bound End-to-End Tunnel (BEET) mode for ESP</title>

<author initials='P' surname='Nikander' fullname='Pekka Nikander'>
    <organization />
</author>

<author initials='J' surname='Melen' fullname='Jan Melen'>
    <organization />
</author>

<date month='August' day='5' year='2008' />

<abstract><t>This document specifies a new mode, called Bound End-to-End Tunnel (BEET) mode, for IPsec ESP.  The new mode augments the existing ESP tunnel and transport modes.  For end-to-end tunnels, the new mode provides limited tunnel mode semantics without the regular tunnel mode overhead.  The mode is intended to support new uses of ESP, including mobility and multi-address multi-homing.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.ietf-hip-native-nat-traversal; exists--> 



<reference anchor='NAT-TRAVERSAL'>
<front>
<title>Native NAT Traversal Mode for the Host Identity Protocol</title>

<author initials='A' surname='Keranen' fullname='Ari Keranen'>
    <organization />
</author>

<author initials='J' surname='Melen' fullname='Jan Melen'>
    <organization />
</author>

<date month='January' day='28' year='2011' />

<abstract><t>This document specifies a new Network Address Translator (NAT) traversal mode for the Host Identity Protocol (HIP).  The new mode is based on the Interactive Connectivity Establishment (ICE) methodology and UDP encapsulation of data and signaling traffic.  The main difference from the previously specified modes is the use of HIP messages for all NAT traversal procedures.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.vogt-rrg-six-one; expired--> 



<reference anchor='SIX-ONE'>
<front>
<title>Six/One: A Solution for Routing and Addressing in IPv6</title>

<author initials='C' surname='Vogt' fullname='Christian Vogt'>
    <organization />
</author>

<date month='October' day='26' year='2009' />

<abstract><t>There is heightened concern about the growth of the global routing table and the increased frequency of routing table updates.  Both is due to the use of provider-independent addressing space in edge networks, which accommodates operators' desire to move traffic quickly and easily from one provider to another.  The main recent proposals attempt to solve this problem by hiding provider- independent addressing space through a level of indirection. Unfortunately, indirection requires a non-trivial distribution of address translation information across the Internet.  This is either slow, or costly in terms of signaling overhead, or both.  Security and transitionability are further issues.  This document proposes an alternative solution, which is based on a single, provider-dependent addressing space and hence avoids the problems of indirection.  The solution meets the objectives of edge network operators while limiting the size of the routing table and its update frequency.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.irtf-eme-francis-nutss-design; expired--> 



<reference anchor='EME'>
<front>
<title>An EME Signaling Protocol Design</title>

<author initials='P' surname='Francis' fullname='Paul Francis'>
    <organization />
</author>
<author initials='S' surname='Guha' fullname='S. Guha'>
    <organization />
</author>
<author initials='S' surname='Brim' fullname='S. Brim'>
    <organization />
</author>
<author initials='M' surname='Shore' fullname='M. Shore'>
    <organization />
</author>

<date month='April' day='23' year='2007' />

<abstract><t>This document presents a high-level design for an End-Middle-End (EME) signaling protocol called NUTSS (which stands for NAT, URI, Tunnel, Signaling, STUN). While high-level, this document tries to be detailed enough that the EME RG can have a meaningful debate about its pros and cons and possible alternatives. The main attribute of NUTSS is that it couples together both path-coupled and path- decoupled signaling.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.ponomarev-hip-hit2ip; expired --> 



<reference anchor='HIT2IP'>
<front>
<title>Embedding Host Identity Tags Data in DNS</title>

<author initials='O' surname='Ponomarev' fullname='Oleg Ponomarev'>
    <organization />
</author>

<author initials='A' surname='Gurtov' fullname='Andrei Gurtov'>
    <organization />
</author>

<date month='July' day='13' year='2009' />

<abstract><t>This document proposes conventions to access and manage Host Identity Tag (HIT) mappings using the Domain Name System (DNS) interface.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.xu-rangi; expired --> 



<reference anchor='RANGI'>
<front>
<title>Routing Architecture for the Next Generation Internet (RANGI)</title>

<author initials='X' surname='Xu' fullname='Xiaohu Xu'>
    <organization />
</author>

<date month='August' day='10' year='2010' />

<abstract><t>IRTF Routing Research Group (RRG) is exploring a new routing and addressing architecture to address the issues with the current Internet, e.g., mobility, multi-homing, traffic engineering, and especially the routing scalability issue. This document describes a new identifier (ID)/locator split based routing and addressing architecture, called Routing Architecture for the Next Generation Internet (RANGI), in an attempt to deal with the above problems.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.rja-ilnp-intro; exists--> 

<reference anchor='ILNP'>
<front>
<title>ILNP Concept of Operations</title>

<author initials='R' surname='Atkinson' fullname='R. Atkinson'>
    <organization />
</author>

<date month='July' day='27' year='2011' />

<abstract><t>This document describes the Concept of Operations for the Identifier-Locator Network Protocol (ILNP), which is an experimental extension to IP.  This is a product of the IRTF Routing RG.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.ietf-lisp; exists --> 



<reference anchor='LISP'>
<front>
<title>Locator/ID Separation Protocol (LISP)</title>

<author initials='D' surname='Farinacci' fullname='Dino Farinacci'>
    <organization />
</author>

<author initials='V' surname='Fuller' fullname='Vince Fuller'>
    <organization />
</author>

<author initials='D' surname='Meyer' fullname='Dave Meyer'>
    <organization />
</author>

<author initials='D' surname='Lewis' fullname='Darrel Lewis'>
    <organization />
</author>

<date month='November' day='4' year='2011' />

<abstract><t>This draft describes a network-based protocol that enables separation of IP addresses into two new numbering spaces: Endpoint Identifiers (EIDs) and Routing Locators (RLOCs).  No changes are required to either host protocol stacks or to the "core" of the Internet infrastructure.  LISP can be incrementally deployed, without a "flag day", and offers traffic engineering, multi-homing, and mobility benefits to early adopters, even when there are relatively few LISP- capable sites.  Design and development of LISP was largely motivated by the problem statement produced by the October 2006 IAB Routing and Addressing Workshop.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.dietz-hip-operator-issues; expired--> 



<reference anchor='HIP-OPERATORS'>
<front>
<title>Issues of HIP in an Operators Networks</title>

<author initials='T' surname='Dietz' fullname='Thomas Dietz'>
    <organization />
</author>
<author initials='M' surname='Brunner' fullname='M. Brunner'>
    <organization />
</author>
<author initials='N' surname='Papadoglou' fullname='N. Papadoglou'>
    <organization />
</author>
<author initials='V' surname='Raptis' fullname='V. Raptis'>
    <organization />
</author>
<author initials='K' surname='Kypris' fullname='K. Kypris'>
    <organization />
</author>

<date month='October' day='20' year='2005' />

<abstract><t>This document discuss the potential issues that arise when the Host Identity Protocol (HIP) will be introduced in a operator network, especially in the IP Multimedia Subsystem (IMS) of the 3GPP systems. It discusses mobile network specific issues like charging, lawful interception as well as common issues like where to associate the HIP ID or privacy issues. The document tries to make the HIP community aware of those issues and wants to stimulate discussion on those topics.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.huitema-multi-homed; expired--> 

<reference anchor='MULTI-HOMED'>
<front>
<title>Multi-homed TCP</title>

<author initials='C' surname='Huitema' fullname='Christian Huitema'>
    <organization />
</author>

<date month='May' day='27' year='1995' />

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.thaler-mobility-comparison; expired--> 


<reference anchor='MOBILITY-COMPARISON'>
<front>
<title>A Comparison of IP Mobility-Related Protocols</title>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<date month='October' day='25' year='2006' />

<abstract><t>Mobile IPv6 (MIP6), the Level 3 Multihoming Shim Protocol (SHIM6), and the Host Identity Protocol (HIP) all address various aspects of mobility and multi-homing in similar ways. This document gives a brief comparison of their features.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.dawkins-trigtran-framework; expired --> 


<reference anchor='TRIGTRAN'>
<front>
<title>Framework and Requirements for TRIGTRAN</title>

<author initials='S' surname='Dawkins' fullname='Spencer Dawkins'>
    <organization />
</author>
<author initials='C' surname='Williams' fullname='C. Williams'>
    <organization />
</author>
<author initials='A' surname='Yegin' fullname='A. Yegin'>
    <organization />
</author>


<date month='February' day='26' year='2003' />
</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.schuetz-tcpm-tcp-rlci; expired --> 



<reference anchor='TCP-RLCI'>
<front>
<title>TCP Response to Lower-Layer Connectivity-Change Indications</title>

<author initials='S' surname='Schuetz' fullname='Simon Schuetz'>
    <organization />
</author>

<author initials='N' surname='Koutsianas' fullname='Nikolaos Koutsianas'>
    <organization />
</author>

<author initials='L' surname='Eggert' fullname='Lars Eggert'>
    <organization />
</author>

<author initials='W' surname='Eddy' fullname='Wesley Eddy'>
    <organization />
</author>

<author initials='Y' surname='Swami' fullname='Yogesh Swami'>
    <organization />
</author>

<author initials='K' surname='Le' fullname='Khiem Le'>
    <organization />
</author>

<date month='February' day='22' year='2008' />

<abstract><t>When the path characteristics between two hosts change abruptly, TCP can experience significant delays before resuming transmission in an efficient manner or TCP can behave unfairly to competing traffic. This document describes TCP extensions that improve transmission behavior in response to advisory, lower-layer connectivity-change indications.  The proposed TCP extensions modify the local behavior of TCP and introduce a new TCP option to signal locally received connectivity-change indications to remote peers.  Performance gains result from a more efficient transmission behavior and there is no difference in aggressiveness in comparison to a newly-started connection.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.swami-tcp-lmdr; expired--> 


<reference anchor='LMDR'>
<front>
<title>Lightweight Mobility Detection and Response (LMDR) Algorithm for TCP</title>

<author initials='Y' surname='Swami' fullname='Yogesh Swami'>
    <organization />
</author>
<author initials='K' surname='Le' fullname='K. Le'>
    <organization />
</author>
<author initials='W' surname='Eddy' fullname='W. Eddy'>
    <organization />
</author>

<date month='February' day='1' year='2006' />

<abstract><t>TCP congestion control is based on the assumption that the end-to-end path of a connection changes only insignificantly after connection establishment. Network layer mobility protocols that change a connection's point of attachment transparently to the transport layer may violate this assumption and cause TCP to make congestion control decisions based on invalid information. This document describes a TCP option that allows a connection endpoint to inform a peer when it changes location. This document also outlines the proper congestion control behavior that should take place in the face of such network layer mobility.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.henderson-hip-vpls; exists --> 

<reference anchor='HIPLS'>
<front>
<title>HIP-based Virtual Private LAN Service (HIPLS)</title>

<author initials='T' surname='Henderson' fullname='Tom Henderson'>
    <organization />
</author>

<author initials='S' surname='Venema' fullname='Steven Venema'>
    <organization />
</author>

<author initials='D' surname='Mattes' fullname='David Mattes'>
    <organization />
</author>

<date month='September' day='3' year='2011' />

<abstract><t>The Host Identity Protocol (HIP) and architecture adds a cryptographic name space to name Internet hosts.  This draft describes a use case of the HIP architecture, which is to provide a HIP-enabled virtual private LAN service (VPLS) over an untrusted network.  In this case, HIP is used to secure tunnels between the provider edge (PE) equipment.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.oliva-hiprg-reap4hip; expired --> 



<reference anchor='REAP4HIP'>
<front>
<title>Fault tolerance configurations for HIP multihoming</title>

<author initials='A' surname='Oliva' fullname='Antonio de la Oliva'>
    <organization />
</author>

<author initials='M' surname='Bagnulo' fullname='Marcelo Bagnulo'>
    <organization />
</author>

<date month='July' day='5' year='2007' />

<abstract><t>This document considers scenarios for the provision of fault tolerance capabilities in multihomed HIP nodes. In order to support such configurations, this document updates the behaviour for HIP multihoming nodes currently defined and defines the integration of the REAP protocol in HIP.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.heer-hip-middle-auth; expired --> 


<reference anchor='HIP-MIDDLE'>
<front>
<title>End-Host Authentication for HIP Middleboxes</title>

<author initials='R' surname='Hummen' fullname='Rene Hummen'>
    <organization />
</author>

<author initials='T' surname='Heer' fullname='Tobias Heer'>
    <organization />
</author>

<author initials='K' surname='Wehrle' fullname='K. Wehrle'>
    <organization />
</author>

<author initials='M' surname='Komu' fullname='Miika Komu'>
    <organization />
</author>

<date month='October' day='31' year='2011' />

<abstract><t>The Host Identity Protocol [RFC5201] is a signaling protocol for secure communication, mobility, and multihoming that introduces a cryptographic namespace.  This document specifies an extension for HIP that enables middleboxes to unambiguously verify the identities of hosts that communicate across them.  This extension allows middleboxes to verify the liveness and freshness of a HIP association and, thus, to secure access control in middleboxes.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>


      <!-- &I-D.zhang-hip-privacy-protection; exists (expires soon)--> 



<reference anchor='HIP-PRIVACY'>
<front>
<title>An Extension of HIP Base Exchange to Support Identity Privacy</title>

<author initials='D' surname='Zhang' fullname='Dacheng Zhang'>
    <organization />
</author>

<author initials='M' surname='Komu' fullname='Miika Komu'>
    <organization />
</author>

<date month='July' day='11' year='2011' />

<abstract><t>In this document, an extension of HIP Base Exchange (BEX) is proposed protect the identity privacy of HIP hosts.  Apart from describing the protocol and packet formats, the applicability and the security strength of the proposed approach are analyzed.  This work is based on BLIND [YLI04].</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.irtf-hiprg-proxies; exists--> 


<reference anchor='HIPRG-PROXIES'>
<front>
<title>Investigation in HIP Proxies</title>

<author initials='D' surname='Zhang' fullname='Dacheng Zhang'>
    <organization />
</author>

<author initials='X' surname='Xu' fullname='Xiaohu Xu'>
    <organization />
</author>

<author initials='J' surname='Yao' fullname='Jiankang Yao'>
    <organization />
</author>

<author initials='Z' surname='Cao' fullname='Zehn Cao'>
    <organization />
</author>

<date month='October' day='30' year='2011' />

<abstract><t>HIP proxies play an important role in the transition from the current Internet architecture to the HIP architecture.  A core objective of a HIP proxy is to facilitate the communication between legacy (or Non- HIP) hosts and HIP hosts while not modifying the host protocol stacks.  In this document, the legacy hosts served by proxies are referred to as Legacy Hosts (LHs).  Currently, various design solutions of HIP proxies have been proposed.  These solutions may be applicable in different working circumstances.  In this document, these solutions are investigated in detail to compare their effectiveness in different scenarios.</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

      <!-- &I-D.moskowitz-hip-rg-dex; expired --> 



<reference anchor='HIP-DEX'>
<front>
<title>HIP Diet EXchange (DEX)</title>

<author initials='R' surname='Moskowitz' fullname='Robert Moskowitz'>
    <organization />
</author>

<date month='March' day='14' year='2011' />

<abstract><t>This document specifies the details of the Host Identity Protocol Diet EXchange (HIP DEX).  HIP DEX is a variant of the HIP Base EXchange (HIP BEX) [RFC5201-bis] specifically designed to use as few crypto primitives as possible yet still deliver the same class of security features as HIP BEX.  The design goal of HIP DEX is to be usable by sensor devices that are memory and processor constrained.  Like HIP BEX it is expected to be used together with another suitable security protocol, such as the Encapsulated Security Payload (ESP).  HIP DEX can also be used directly as a keying mechanism for a MAC layer security protocol as is supported by IEEE 802.15.4 [IEEE.802-15-4.2006].</t></abstract>

</front>

<seriesInfo name='Work in' value='Progress' />

</reference>

  <reference anchor="book.gurtov">

     <front>
       <title>Host Identity Protocol (HIP): Towards the Secure Mobile
          Internet</title>

       <author initials="A" surname="Gurtov" fullname="A. Gurtov">
         <organization></organization>
       </author>

       <date month="June" year="2008" />
     </front>
     <seriesInfo name="ISBN 978-0-470-99790-1, Wiley and Sons," value="(Hardcover, p 332)" />
   </reference>
     </references>
<?rfc rfcedstyle="yes" ?>
  </back>
</rfc>

