<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
   <!ENTITY files 'draft-wilde-xml-patch-10-files'>
]>
<?xml-stylesheet type="text/xsl" href="../../XIPr/xipr-1-0.xsl"?>

<?rfc rfcedstyle="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc toc="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc symrefs="yes" ?>

<rfc category="info" ipr="trust200902" number="7351" submissionType="independent" consensus="yes">
   <front>
      <title abbrev="XML Patch">A Media Type for XML Patch Operations</title>
      <author initials="E." surname="Wilde" fullname="Erik Wilde">
         <organization>UC Berkeley</organization>
         <address>
            <email>dret@berkeley.edu</email>
            <uri>http://dret.net/netdret/</uri>
         </address>
      </author>
      <date month="August" year="2014"/>
      <abstract>
         <t>The XML patch document format defines an XML document structure for expressing a sequence of patch operations to be applied to an XML document. The XML patch document format builds on the foundations defined in RFC 5261. This specification also provides the media type registration "application/xml-patch+xml", to allow the use of XML patch documents in, for example, HTTP conversations.</t>
      </abstract>
   </front>
   <middle>
      <section title="Introduction" toc="default">
         <t>The Extensible Markup Language (XML) <xref target="RFC7303" pageno="false" format="default"/> is a common format for the exchange and storage of structured data. HTTP PATCH <xref target="RFC5789" pageno="false" format="default"/> extends HTTP <xref target="RFC7231" pageno="false" format="default"/> with a method to perform partial modifications to resources. HTTP PATCH requires that patch documents be sent along with the request, and it is therefore useful for there to be standardized patch document formats (identified by media types) for popular media types.</t>
         <t>The XML patch media type "application/xml-patch+xml" is an XML document structure for expressing a sequence of operations to apply to a target XML document, suitable for use with the HTTP PATCH method. Servers can freely choose which patch formats they want to accept, and "application/xml-patch+xml" could be a simple default format that can be used unless a server decides to use a different (maybe more sophisticated) patch format for XML.</t>

         <t>The format for patch documents is based on the XML patch framework defined in RFC 5261 <xref target="RFC5261" pageno="false" format="default"/>. While RFC 5261 does define a concrete syntax as well as the media type "application/patch-ops-error+xml" for error documents, it only defines XML Schema (XSD) <xref target="W3C.REC-xmlschema-1-20041028" pageno="false" format="default"/> types for patch operations. The concrete document format and the media type for patch operations are defined in an XSD defined in this specification.</t>

         <t>This specification relies on RFC 5261 but also requires that errata reported to date are taken into account. The main reason for the errata is the problematic ways in which RFC 5261 relies on XML Path Language (XPath) as the expression language for selecting the location of a patch, while at the same time XPath's data model does not contain sufficient information to determine whether such a selector indeed can be used for a patch operation or should result in an error. Specifically, the problem occurs with namespaces, where XPath does not expose namespace declaration attributes, while the patch model needs them to determine whether or not a namespace patch is allowed. <xref target="implementation-hints" pageno="false" format="default"/> contains more information about the general problem and errata reports.</t>
</section>

      <section title="Patch Documents" anchor="patch-documents" toc="default">
         <t>The following sections describe and illustrate the XML patch document format.</t>
         <section title="Patch Document Format" anchor="schema" toc="default">
            <t>The XML patch document format is based on a simple schema that uses a "patch" element as the document element and allows an arbitrary sequence of "add", "remove", and "replace" elements as the children of the document element. These children follow the semantics defined in RFC 5261, which means that each element is treated as an individual patch operation, and the result of each patch operation is a patched XML document that is the target XML document for the next patch operation.</t>
            <t>The following simple example patch document contains a single patch operation. This operation adds a new attribute called "new&nbhy;attribute" to the document element of the target XML document. An XML patch document always uses a "patch" element in the "urn:ietf:rfc:7351" namespace as the document element that contains zero or more patch operation elements, which are also in the "urn:ietf:rfc:7351" namespace.</t>
            <figure title="" align="left" alt="" width="" height="">
               <artwork type="xml" xml:space="preserve" name="" align="left" alt="" width="" height="">&lt;p:patch xmlns:p="urn:ietf:rfc:7351"&gt;
    &lt;p:add sel="*" type="@new-attribute"&gt;value&lt;/p:add&gt;
&lt;/p:patch&gt;</artwork>
            </figure>
            <t>The following more complex example patch document uses the example from RFC 5261, Section A.18 (but changing the example namespaces to example.com URIs); it uses the same "patch" element and XML namespace as shown in the simpler example. It shows the general structure of an XML patch document with multiple operations, as well as an example of each operation.</t>
            <figure title="" align="left" alt="" width="" height="">
               <artwork type="xml" xml:space="preserve" name="" align="left" alt="" width="" height="">&lt;p:patch xmlns="http://example.com/ns1"
         xmlns:y="http://example.com/ns2"
         xmlns:p="urn:ietf:rfc:7351"&gt;
    &lt;p:add sel="doc/elem[@a='foo']"&gt;
        &lt;!-- This is a new child --&gt;
        &lt;child id="ert4773"&gt;
            &lt;y:node/&gt;
        &lt;/child&gt;
    &lt;/p:add&gt;
    &lt;p:replace sel="doc/note/text()"&gt;Patched doc&lt;/p:replace&gt;
    &lt;p:remove sel="*/elem[@a='bar']/y:child" ws="both"/&gt;
    &lt;p:add sel="*/elem[@a='bar']" type="@b"&gt;new attr&lt;/p:add&gt;
&lt;/p:patch&gt;</artwork>
            </figure>
            <t>As this example demonstrates, both the document element "patch" and the patch operation elements are in the same XML namespace. This is the result of RFC 5261 only defining types for the patch operation elements, which then can be reused in schemas to define concrete patch elements.</t>
            <t>RFC 5261 defines XSD <xref target="W3C.REC-xmlschema-1-20041028" pageno="false" format="default"/> for the patch operation types. The following schema for the XML patch media type is based on the types defined in RFC 5261, which are imported as "rfc5261.xsd" in the following schema. The schema defines a "patch" document element, and then allows an unlimited (and possibly empty) sequence of the "add", "remove", and "replace" operation elements, which are directly based on the respective types from the schema defined in RFC 5261.</t>
            <figure title="" align="left" alt="" width="" height="">
               <artwork type="xml" xml:space="preserve" name="" align="left" alt="" width="" height="">&lt;xs:schema targetNamespace="urn:ietf:rfc:7351"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xs:import schemaLocation="rfc5261.xsd"/&gt;
    &lt;xs:element name="patch"&gt;
        &lt;xs:complexType&gt;
            &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
                &lt;xs:element name="add" type="add"/&gt;
                &lt;xs:element name="remove" type="remove"/&gt;
                &lt;xs:element name="replace" type="replace"/&gt;
            &lt;/xs:choice&gt;
        &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
&lt;/xs:schema&gt;</artwork>
            </figure>
         </section>
         <section title="Patch Examples" anchor="examples" toc="default">
            <t>Since the semantics of the XML patch operations are defined by RFC 5261, please refer to the numerous examples in that specification for more XML patch document examples. All the examples in RFC 5261 can be taken as examples for the XML patch media type, when looking at them with two minor changes in mind.</t>

            <t>The two differences are that XML patch documents always use the "patch" element as the document element and that both the "patch" element and the individual operation elements in XML patch documents have to be in the XML namespace with the URI "urn:ietf:rfc:7351".</t>

            <t>For example, consider the patch example in RFC 5261, Appendix A.1, "Adding an Element". In this example, the patch is applied to the following XML document:</t>
            <figure title="" align="left" alt="" width="" height="">
               <artwork type="xml" xml:space="preserve" name="" align="left" alt="" width="" height="">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;doc&gt;
    &lt;note&gt;This is a sample document&lt;/note&gt;
&lt;/doc&gt;</artwork>
            </figure>
            <t>The patch example is based on the following patch document (with the element and namespace changes described above):</t>
            <figure title="" align="left" alt="" width="" height="">
               <artwork type="xml" xml:space="preserve" name="" align="left" alt="" width="" height="">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;p:patch xmlns:p="urn:ietf:rfc:7351"&gt;
    &lt;p:add sel="doc"&gt;&lt;foo id="ert4773"&gt;This is a new child&lt;/foo&gt;&lt;/p:add&gt;
&lt;/p:patch&gt;</artwork>
            </figure>
            <t>Applying the patch results in the following XML document:</t>
            <figure title="" align="left" alt="" width="" height="">
               <artwork type="xml" xml:space="preserve" name="" align="left" alt="" width="" height="">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;doc&gt;
    &lt;note&gt;This is a sample document&lt;/note&gt;
&lt;foo id="ert4773"&gt;This is a new child&lt;/foo&gt;&lt;/doc&gt;</artwork>
            </figure>
         </section>
      </section>
      <section title="IANA Considerations" anchor="iana" toc="default">
         <t>The Internet media type <xref target="RFC6838" pageno="false" format="default"/> for an XML patch document is application/xml-patch+xml.</t>
         <t>
            <list>
               <t>Type name: application</t>
               <t>Subtype name: xml-patch+xml</t>
               <t>Required parameters: none</t>
               <t>Optional parameters:
                  <list>
                     <t>charset: Same as charset parameter for the media type "application/xml" as specified in RFC 7303 <xref target="RFC7303" pageno="false" format="default"/>.</t>
                  </list></t>
               <t>Encoding considerations: Same as encoding considerations of media type "application/xml" as specified in RFC 7303 <xref target="RFC7303" pageno="false" format="default"/>.</t>
               <t>Security considerations: This media type has all of the security considerations described in RFC 7303 <xref target="RFC7303" pageno="false" format="default"/>, RFC 5261 <xref target="RFC5261" pageno="false" format="default"/>, and RFC 3470 <xref target="RFC3470" pageno="false" format="default"/>, plus those listed in <xref target="security-considerations" pageno="false" format="default"/>.</t>
               <t>Interoperability considerations: N/A</t>
               <t>Published specification: RFC 7351</t>
               <t>Applications that use this media type: Applications that manipulate XML documents.</t>
               <t>Additional information:
                  <list>
                     <t>Magic number(s): N/A</t>
                     <t>File extension(s): XML documents often use ".xml" as the file extension, and this media type does not propose a specific extension other than this generic one.</t>
                     <t>Macintosh file type code(s): TEXT</t>
                  </list>
               </t>
               <t>Person &amp; email address to contact for further information: Erik Wilde &lt;dret@berkeley.edu&gt;</t>
               <t>Intended usage: COMMON</t>
               <t>Restrictions on usage: none</t>
               <t>Author: Erik Wilde &lt;dret@berkeley.edu&gt;</t>
               <t>Change controller: IETF</t>
            </list>
         </t>
      </section>
      <section title="Security Considerations" anchor="security-considerations" toc="default">
         <t>The security considerations from RFC 5261 <xref target="RFC5261" pageno="false" format="default"/> apply to the application/xml-patch+xml media type.</t>
         <t>In addition, parsing XML may entail including information from external sources through XML's mechanism of external entities. Implementations, therefore, should be aware of the fact that standard parsers may resolve external entities and thus include external information as a result of applying patch operations to an XML document.</t>
      </section>
  <section title="Acknowledgements" toc="default">
         <t>Thanks for comments and suggestions provided by Bas de Bakker, Tony Hansen, Bjoern Hoehrmann, and Julian Reschke.</t>
      </section>
   </middle>
   <back>
      <references title="Normative References">
<?rfc include="reference.RFC.7303" ?>
<?rfc include="reference.RFC.3470" ?>
<?rfc include="reference.RFC.5234" ?>
<?rfc include="reference.RFC.5261" ?>
<?rfc include="reference.RFC.6838" ?>


      </references>
     
    <references title="Informative References">
<?rfc include="reference.RFC.5789" ?>
<?rfc include="reference.RFC.7231" ?>
<reference anchor="Err3477"> 
<front> 
<title>Errata ID 3477</title>
<author><organization>RFC Errata</organization></author> 
<date></date>
</front> 
<seriesInfo name="RFC" value="5261"/>
</reference>

<reference anchor="Err3478"> 
<front> 
<title>Errata ID 3478</title>
<author><organization>RFC Errata</organization></author> 
<date></date>
</front> 
<seriesInfo name="RFC" value="5261"/>
</reference>

      
      <reference anchor="W3C.REC-xml-names-20091208" target="http://www.w3.org/TR/2009/REC-xml-names-20091208">
            <front>
               <title>Namespaces in XML 1.0 (Third Edition)</title>
               <author initials="D." surname="Hollander" fullname="Dave Hollander">
                  <organization/>
               </author>
               <author initials="A." surname="Layman" fullname="Andrew Layman">
                  <organization/>
               </author>
               <author initials="T." surname="Bray" fullname="Tim Bray">
                  <organization/>
               </author>
               <author initials="R." surname="Tobin" fullname="Richard Tobin">
                  <organization/>
               </author>
               <author initials="H." surname="Thompson" fullname="Henry S. Thompson">
                  <organization/>
               </author>
               <date month="December" year="2009"/>
            </front>
            <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-xml-names-20091208"/>
         </reference>

         <reference anchor="W3C.REC-xml-20081126" target="http://www.w3.org/TR/2008/REC-xml-20081126">
            <front>
               <title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>
               <author initials="C." surname="Sperberg-McQueen" fullname="C. M. Sperberg-McQueen">
                  <organization/>
               </author>
               <author initials="F." surname="Yergeau" fullname="Francois Yergeau">
                  <organization/>
               </author>
               <author initials="J." surname="Paoli" fullname="Jean Paoli">
                  <organization/>
               </author>
               <author initials="E." surname="Maler" fullname="Eve Maler">
                  <organization/>
               </author>
               <author initials="T." surname="Bray" fullname="Tim Bray">
                  <organization/>
               </author>
               <date month="November" year="2008"/>
            </front>
            <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-xml-20081126"/>
         </reference>

         <reference anchor="W3C.REC-xpath-19991116" target="http://www.w3.org/TR/1999/REC-xpath-19991116">
            <front>
               <title>XML Path Language (XPath) Version 1.0</title>
               <author initials="S." surname="DeRose" fullname="Steven DeRose">
                  <organization/>
               </author>
               <author initials="J." surname="Clark" fullname="James Clark">
                  <organization/>
               </author>
               <date month="November" year="1999"/>
            </front>
            <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-xpath-19991116"/>
         </reference>

         <reference anchor="W3C.REC-xpath20-20101214" target="http://www.w3.org/TR/2010/REC-xpath20-20101214">
            <front>
               <title>XML Path Language (XPath) 2.0 (Second Edition)</title>
               <author initials="S." surname="Boag" fullname="Scott Boag">
                  <organization/>
               </author>
               <author initials="A." surname="Berglund" fullname="Anders Berglund">
                  <organization/>
               </author>
               <author initials="M." surname="Kay" fullname="Michael Kay">
                  <organization/>
               </author>
               <author initials="J." surname="Simeon" fullname="Jerome Simeon">
                  <organization/>
               </author>
               <author initials="J." surname="Robie" fullname="Jonathan Robie">
                  <organization/>
               </author>
               <author initials="D." surname="Chamberlin" fullname="Don Chamberlin">
                  <organization/>
               </author>
               <author initials="M." surname="Fernandez" fullname="Mary F. Fernandez">
                  <organization/>
               </author>
               <date month="December" year="2010"/>
            </front>
            <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-xpath20-20101214"/>
         </reference>

         <reference anchor="W3C.REC-xmlschema-1-20041028" target="http://www.w3.org/TR/2004/REC-xmlschema-1-20041028">
            <front>
               <title>XML Schema Part 1: Structures Second Edition</title>
               <author initials="H." surname="Thompson" fullname="Henry S. Thompson">
                  <organization/>
               </author>
               <author initials="D." surname="Beech" fullname="David Beech">
                  <organization/>
               </author>
               <author initials="M." surname="Maloney" fullname="Murray Maloney">
                  <organization/>
               </author>
               <author initials="N." surname="Mendelsohn" fullname="Noah Mendelsohn">
                  <organization/>
               </author>
               <date month="October" year="2004"/>
            </front>
            <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-xmlschema-1-20041028"/>
         </reference>

         <reference anchor="W3C.REC-DOM-Level-3-Core-20040407" target="http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407">
            <front>
               <title>Document Object Model (DOM) Level 3 Core Specification</title>
               <author initials="J." surname="Robie" fullname="Jonathan Robie">
                  <organization/>
               </author>
               <author initials="L." surname="Wood" fullname="Lauren Wood">
                  <organization/>
               </author>
               <author initials="M." surname="Champion" fullname="Mike Champion">
                  <organization/>
               </author>
               <author initials="P." surname="Hegaret" fullname="Philippe Le Hegaret">
                  <organization/>
               </author>
               <author initials="G." surname="Nicol" fullname="Gavin Nicol">
                  <organization/>
               </author>
               <author initials="A." surname="Le Hors" fullname="Arnaud Le Hors">
                  <organization/>
               </author>
               <author initials="S." surname="Byrne" fullname="Steve Byrne">
                  <organization/>
               </author>
               <date month="April" year="2004"/>
            </front>
            <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-DOM-Level-3-Core-20040407"/>
         </reference>

      </references>

      <section title="Implementation Hints" anchor="implementation-hints" toc="default">
         <t>This section is informative. It describes some issues that might be interesting for implementers, but it might also be interesting for users of XML patch that want to understand some of the differences between standard XPath 1.0 processing and the processing model of selectors in RFC 5261.</t>
        
 <t>Specifically, the issues described in the following two sections have been identified as technical issues with RFC 5261 and have been filed as errata. Implementers interested in using XML patch are encouraged to take those errata into account when implementing XML patch documents. The issue about "Matching Namespaces" described in <xref target="namespace-matching" pageno="false" format="default"/> has been filed as RFC Errata ID 3477 <xref target="Err3477"/>. The issue about "Patching Namespaces" described in <xref target="namespace-patching" pageno="false" format="default"/> has been filed as RFC Errata ID 3478 <xref target="Err3478"/>.</t>
        
 <section title="Matching Namespaces" anchor="namespace-matching" toc="default">
          
  <t>RFC 5261 defines standard rules for matching prefixed names in expressions: any prefixes are interpreted according to the namespace bindings of the diff document (the document that the expression is applied against). This means that each prefixed name can be interpreted in the context of the diff document.</t>
          
       <t>For unprefixed names in expressions, the rules depart from XPath 1.0 <xref target="W3C.REC-xpath-19991116" pageno="false" format="default"/>. XPath 1.0 defines that unprefixed names in expressions match namespace-less names (i.e., there is no "default namespace" for names used in XPath 1.0 expressions). RFC 5261 requires, however, that unprefixed names in expressions must use the default namespace of the diff document (if there is one). This means that it is not possible to simply take a selector from a patch document and evaluate it in the context of the diff document according to the rules of XPath 1.0 because this would interpret unprefixed names incorrectly. As a consequence, it is not possible to simply take an XPath 1.0 processor and evaluate XML patch selectors in the context of the diff document.</t>
      
      <t>As an extension of XPath 1.0's simple model, XPath 2.0 <xref target="W3C.REC-xpath20-20101214" pageno="false" format="default"/> specifies different processing rules for unprefixed names: they are matched against the URI of the "default element/type namespace", which is defined as part of an expression's static context. In some XPath 2.0 applications, this can be set; XSL Transformations (XSLT) 2.0, for example, has the ability to define an "xpath-default-namespace", which then will be used to match unprefixed names in expressions. Thus, by using an XPath 2.0 implementation that allows one to set this URI, and setting it to the default namespace of the diff document (or leaving it undefined if there is no such default namespace), it is possible to use an out-of-the-box XPath 2.0 implementation for evaluating XML patch selectors.</t>
       
      <t>Please keep in mind, however, that evaluating selectors is only one part of applying patches. When it comes to applying the actual patch operation, neither XPath 1.0 nor XPath 2.0 are sufficient because they do not preserve some of the information from the XML syntax (specifically namespace declarations) that is required to correctly apply patch operations. The following section describes this issue in more detail.</t>
           
      <t>Please note that <xref target="RFC5261" />, Section 4.2.2 on namespace matching explains XPath 2.0's rules incorrectly. For this reason, RFC Errata ID 3477 is available for Section 4.2.2 of RFC 5261.</t>
         </section>

         <section title="Patching Namespaces" anchor="namespace-patching" toc="default">
            <t>One of the issues when patching namespaces based on XPath is that XPath exposes namespaces differently than the XML 1.0 <xref target="W3C.REC-xml-20081126" pageno="false" format="default"/> syntax for XML namespaces <xref target="W3C.REC-xml-names-20091208" pageno="false" format="default"/>. In the XML syntax, a namespace is declared with an attribute using the reserved name or prefix "xmlns", and this results in this namespace being available recursively through the document tree. In XPath, the namespace declaration is not exposed as an attribute (i.e., the attribute, although syntactically an XML attribute, is not accessible in XPath), but the resulting namespace nodes are exposed recursively through the tree.</t>

            <t>RFC 5261 uses the terms "namespace declaration" and "namespace" almost interchangeably, but it is important to keep in mind that the namespace declaration is an XML syntax construct that is unavailable in XPath, while the namespace itself is a logical construct that is not visible in the XML syntax, but a result of a namespace declaration. The intent of RFC 5261 is to patch namespaces as if namespace declarations were patched; thus, it only allows patching namespace nodes on the element nodes where the namespace has been declared.</t>

            <t>Patching namespaces in XML patch is supposed to "emulate" the effect of actually changing the namespace declaration (which is why a namespace can only be patched at the element where it has been declared). Therefore, when patching a namespace, even though XPath's "namespace" axis is used, implementations have to make sure that not only the single selected namespace node is being patched but that all namespaces nodes resulting from the namespace declaration of this namespace are also patched accordingly.</t>

            <t>This means that an implementation might have to descend into the tree, matching all namespace nodes with the selected prefix/URI pair recursively, until it encounters leaf elements or namespace declarations with the same prefix it is patching. Determining this requires access to the diff document beyond XPath, because, in XPath itself, namespace declarations are not represented; thus, such a recursive algorithm wouldn't know when to stop. Consider the following document:</t>
            <figure title="" align="left" alt="" width="" height="">
               <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">&lt;x xmlns:a="tag:42"&gt;
    &lt;y xmlns:a="tag:42"/&gt;
&lt;/x&gt;</artwork>
            </figure>
            <t>If this document is patched with a selector of /x/namespace::a, then only the namespace node on element x should be patched, even though the namespace node on element y has the same prefix/URI combination as the one on element x. However, determining that the repeated namespace declaration was present at all on element y is impossible when using XPath alone, which means that implementations must have an alternative way to determine the difference between the document above, and this one:</t>
            <figure title="" align="left" alt="" width="" height="">
               <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">&lt;x xmlns:a="tag:42"&gt;
    &lt;y/&gt;
&lt;/x&gt;</artwork>
            </figure>
            <t>In this second example, patching with a selector of /x/namespace::a should indeed change the namespace nodes on elements x and y, because they both have been derived from the same namespace declaration.</t>

            <t>The conclusion of these considerations is that for implementing XML patch, access closer to the XML syntax (specifically access to namespace declarations) is necessary. As a result, implementations attempting to exclusively use the XPath model for implementing XML patch will fail to correctly address certain edge cases (such as the one shown above).</t>

            <t>Note that XPath's specific limitations do not mean that it is impossible to use XML technologies other than XPath. The Document Object Model (DOM) <xref target="W3C.REC-DOM-Level-3-Core-20040407" pageno="false" format="default"/>, for example, does expose namespace declaration attributes as regular attributes in the document tree; thus, they could be used to differentiate between the two variants shown above.</t>

            <t>Please note that RFC 5261, Section 4.4.3 (on replacing namespaces) mixes the terms "namespace declaration" and "namespace". For this reason, RFC Errata ID 3478 is available for Section 4.4.3 of RFC 5261.</t>
         </section>
      </section>
      <section title="ABNF for RFC 5261" anchor="rfc5261-abnf" toc="default">
         <t>RFC 5261 <xref target="RFC5261" pageno="false" format="default"/> does not contain an ABNF grammar for the allowed subset of XPath expressions but includes an XSD-based grammar in its type definition for operation types. In order to make implementation easier, this appendix contains an ABNF grammar that has been derived from the XSD expressions in RFC 5261. In the following grammar, "xpath" is the definition for the allowed XPath expressions for remove and replace operations, and "xpath-add" is the definition for the allowed XPath expressions for add operations. The names of all grammar productions are the ones used in the XSD-based grammar of RFC 5261.</t>
         <figure title="" align="left" alt="" width="" height="">
            <artwork type="abnf" xml:space="preserve" name="" align="left" alt="" width="" height="">anychar    =  %x00-ffffffff
ncname     =  1*%x00-ffffffff
qname      =  [ ncname ":" ] ncname
aname      =  "@" qname
pos        =  "[" 1*DIGIT "]"
attr       =  ( "[" aname "='" 0*anychar "']" ) /
              ( "[" aname "=" DQUOTE 0*anychar DQUOTE "]" )
valueq     =  "[" ( qname / "." ) "=" DQUOTE 0*anychar DQUOTE "]"
value      =  ( "[" ( qname / "." ) "='" 0*anychar "']" ) / valueq
cond       =  attr / value / pos
step       =  ( qname / "*" ) 0*cond
piq        =  %x70.72.6f.63.65.73.73.69.6e.67.2d
              %x69.6e.73.74.72.75.63.74.69.6f.6e
              ; "processing-instruction", case-sensitive
              "(" [ DQUOTE ncname DQUOTE ] ")"
pi         =  ( %x70.72.6f.63.65.73.73.69.6e.67.2d
              %x69.6e.73.74.72.75.63.74.69.6f.6e
              ; "processing-instruction", case-sensitive
              "(" [ "'" ncname "'" ] ")" ) / piq
id         =  ( %x69.64 ; "id", case-sensitive
              "(" [ "'" ncname "'" ] ")" ) /
              ( %x69.64 ; "id", case-sensitive
              "(" [ DQUOTE ncname DQUOTE ] ")" )
com        =  %x63.6f.6d.6d.65.6e.74 ; "comment", case-sensitive
              "()"
text       =  %x74.65.78.74 ; "text", case-sensitive
              "()"
nspa       =  %x6e.61.6d.65.73.70.61.63.65 ; "namespace", case-sensitive
              "::" ncname
cnodes     =  ( text / com / pi ) [ pos ]
child      =  cnodes / step
last       =  child / aname / nspa
xpath      =  [ "/" ] ( ( id [ 0*( "/" step ) "/" last ] ) /
              ( 0*( step "/" ) last ) )
xpath-add  =  [ "/" ] ( ( id [ 0*( "/" step ) "/" child ] ) /
              ( 0*( step "/" ) child ) )</artwork>
         </figure>
         <t>Please note that the "ncname" production listed above does not fully capture the constraints of the original XSD-based definition, where it is defined as "\i\c*". DIGIT and DQUOTE are defined by the ABNF specification <xref target="RFC5234" pageno="false" format="default"/>.</t>
      </section>
    
   </back>
</rfc>
