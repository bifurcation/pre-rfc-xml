<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  ]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>

<rfc category="std" ipr="trust200902" number="8530" submissionType="IETF" consensus="yes">

<front>

<title abbrev="YANG LNEs">YANG Model for Logical Network Elements</title>
    <author initials='L.' surname="Berger" fullname='Lou Berger'>
     <organization>LabN Consulting, L.L.C.</organization>
     <address>
       <email>lberger@labn.net</email>
    </address>
    </author>
   <author initials='C.' surname="Hopps" fullname='Christian Hopps'>
    <organization>LabN Consulting, L.L.C.</organization>
     <address>
       <email>chopps@chopps.org</email>
    </address>
    </author>
   <author initials='A.' surname="Lindem" fullname='Acee Lindem'>
    <organization>Cisco Systems</organization>
    <address>
      <postal>
        <street>301 Midenhall Way</street>
        <city>Cary</city> <region>NC</region>
        <country>United States of America</country>
        <code>27513</code>
       </postal>
       <email>acee@cisco.com</email>
    </address>
    </author>
   <author initials='D.' surname="Bogdanovic" fullname='Dean Bogdanovic'>
<organization>Volta Networks</organization>
     <address>
       <email>ivandean@gmail.com</email>
    </address>
    </author>
   <author initials='X.' surname="Liu" fullname='Xufeng Liu'>
    <organization>Volta Networks</organization>
     <address>
       <email>xufeng.liu.ietf@gmail.com</email>
    </address>
    </author>

  <date month="January" year="2019"/>

  <abstract>
<t>
   This document defines a logical network element (LNE) YANG module that is
   compliant with the Network Management Datastore Architecture (NMDA). 
   This module can be used to manage the
   logical resource partitioning that may be present on a
   network device. Examples of common industry terms for logical
   resource partitioning are logical systems or logical routers.
   The YANG model in this document conforms with NMDA as defined in RFC 8342.
</t>
</abstract>
</front>

<middle>
<section anchor="sec-1" title="Introduction">

<t>
  This document defines an NMDA-compliant YANG module <xref target="RFC6020"/> to
  support the creation of logical network elements (LNEs) on a network
  device. An LNE is an independently managed
  virtual device made up of resources allocated to it from the host or
  parent network device. An LNE running on a host network device
  conceptually parallels a virtual machine running on a host system.
  Using host-virtualization terminology, one could refer to an LNE as
  a "Guest" and the containing network device as the "Host". While
  LNEs may be implemented via host-virtualization technologies, this
  is not a requirement.
  The YANG model in this document conforms with the Network Management
  Datastore Architecture defined in <xref target="RFC8342"/>.
</t>
<t>
  This document also defines the necessary augmentations for allocating
  host resources to a given LNE.  As the interface management model
  <xref target="RFC8343"/> is the only module that
  currently defines host resources, this document currently defines only
  a single augmentation to cover the assignment of interfaces to an LNE. Future
  modules that define support for the control of host device resources
  are expected to, where appropriate, provide parallel support for the
  assignment of controlled resources to LNEs.
</t>
<t>
  As each LNE is an independently managed device, each will have its own
  set of YANG-modeled data that is independent of the host device and
  other LNEs. For example, multiple LNEs may all have their own "Tunnel0"
  interface defined, which will not conflict with each other and will not
  exist in the host's interface model. An LNE will have its own
  management interfaces, possibly including independent instances of
  NETCONF/RESTCONF/etc servers
  to support the configuration of their YANG models. As an example of
  this independence, an implementation may choose to completely rename
  assigned interfaces; so, on the host, the assigned interface might be
  called "Ethernet0/1" while within the LNE it might be called "eth1".
</t>
<t>
  In addition to standard management interfaces, a host device
  implementation may support accessing LNE configuration and operational
  YANG models directly from the host system. When supported, such access
  is accomplished through a yang-schema-mount mount point
  <xref target="RFC8528"/> under which the root-level
  LNE YANG models may be accessed.
</t>
<t>
  Examples of vendor terminology for an LNE include logical system or
  logical router and virtual switch, chassis, or fabric.
</t>
    <section title="Terminology" anchor="sec-definitions">
      <t>
         The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
    "MAY", and "OPTIONAL" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
      </t>
      <t>
        Readers are expected to be familiar with terms and concepts of
        YANG <xref target="RFC7950"/> and YANG Schema Mount <xref
        target="RFC8528"/>.
      </t>
      <t>
        This document uses the graphical representation of data models
        defined in YANG Tree Diagrams <xref target="RFC8340"/>.
      </t>

    </section>
</section>
<section anchor="sec-2" title="Overview">
<t>
   In this document, we consider network devices that support protocols
   and functions defined within the IETF Routing Area, e.g., routers,
   firewalls, and hosts. Such devices may be physical or virtual, e.g., a
   classic router with custom hardware or one residing within a
   server-based virtual machine implementing a virtual network function
   (VNF). Each device may subdivide their resources into LNEs, each of which provides a managed logical
   device.  Examples of vendor terminology for an LNE include logical
   system or logical router and virtual switch, chassis, or fabric. 

Each LNE
   may also support VPN Routing and Forwarding (VRF) and Virtual
   Switching Instance (VSI) functions, which are referred to below as
   Network Instances (NIs). This breakdown is represented in
   Figure 1.
</t>
<t>
<figure>
<artwork>

           ,'''''''''''''''''''''''''''''''''''''''''''''''.
           |      Network Device (Physical or Virtual)     |
           | .....................   ..................... |
           | :  Logical Network  :   :  Logical Network  : |
           | :      Element      :   :      Element      : |
           | :+-----+-----+-----+:   :+-----+-----+-----+: |
           | :| Net | Net | Net |:   :| Net | Net | Net |: |
           | :|Inst.|Inst.|Inst.|:   :|Inst.|Inst.|Inst.|: |
           | :+-----+-----+-----+:   :+-----+-----+-----+: |
           | :  | |   | |   | |  :   :  | |   | |   | |  : |
           | :..|.|...|.|...|.|..:   :..|.|...|.|...|.|..: |
           |    | |   | |   | |         | |   | |   | |    |
            ''''|'|'''|'|'''|'|'''''''''|'|'''|'|'''|'|'''''
                | |   | |   | |         | |   | |   | |
                   Interfaces              Interfaces

                  Figure 1: Module Element Relationships
</artwork>
</figure>
</t>
<t>
   A model for LNEs is described in <xref target="sec-LNE"/>, and
   the model for NIs is covered in <xref
   target="RFC8529"/>.
</t>
<t>
<!-- [rfced] Similar to the question we sent for RFC-to-be 8529, should these
sentences be updated per this comment from the authors of RFC 8340?  You
approved it for RFC-to-be 8529, even though you thought the update was
unnecessary.  We ask again for this document because there are quite a few
references to the "interface management model".  

    ... The authors replied that 'this
    should probably be explicit; "ietf-interfaces"'.

Original text:
   As the interface management model
   [I-D.ietf-netmod-rfc7223bis] is the only a module ... 

   The interface management model [I-D.ietf-netmod-rfc7223bis] ... 

   The interface management model is defined by
   [I-D.ietf-netmod-rfc7223bis].

   The interface model defined in [I-D.ietf-netmod-rfc7223bis] is ... 

   An LNE root MUST contain at least the YANG library [RFC7895] and
   Interfaces [I-D.ietf-netmod-rfc7223bis] modules.

   The system created interface SHOULD be exposed via
   the LNE-specific instance of the interfaces module
   [I-D.ietf-netmod-rfc7223bis].
--> 
   The interface management model  <xref target="RFC8343"/>
   is an existing model that is impacted by the definition of LNEs and
   NIs.  This document and <xref target="RFC8529"/>
   define augmentations to the interface model to support LNEs
   and NIs.  Similar elements, although perhaps only for LNEs, may
   also need to be included as part of the definition of the
   future hardware and QoS modules.
</t>
<t>
   Interfaces are a crucial part of any network device's
   configuration and operational state.  They generally include a
   combination of raw physical interfaces, link-layer interfaces,
   addressing configuration, and logical interfaces that may not
   be tied to any physical interface.  Several system services,
   and Layer 2 and Layer 3 protocols, may also associate
   configuration or operational state data with different types of
   interfaces (these relationships are not shown for simplicity).
   The interface management model is defined by 
   <xref target="RFC8343"/>.
   The logical-network-element module
   augments existing interface management models by adding an
   identifier that is used on interfaces to
   identify an associated LNE.
</t>
<t>
   The interface-related augmentation is as follows:
<figure>
  <artwork>
    module: ietf-logical-network-element
      augment /if:interfaces/if:interface:
        +--rw bind-lne-name?   ->
             /logical-network-elements/logical-network-element/name
</artwork>
</figure>
</t>
<t>
   The interface model defined in 
   <xref target="RFC8343"/> is
   structured to include all interfaces in a flat list, without
   regard to logical assignment of resources supported
   on the device.  The bind-lne-name and
   leaf provides the association
   between an interface and its associated LNE.  Note that as currently
   defined, to assign an interface to both an LNE and NI, the interface
   would first be assigned to the LNE and then within that LNE's
   interface model, the LNE's representation of that interface would be
   assigned to an NI using the mechanisms defined in <xref
   target="RFC8529"/>.
</t>
</section>
<section anchor="sec-LNE" title="Logical Network Elements">
<t>
   Logical network elements support the ability of some
   devices to partition resources into independent logical routers
   and/or switches.  Device support for multiple logical network
   elements is implementation specific.  Systems without such
   capabilities need not include support for the
   logical-network-element module.  In physical devices, some
   hardware features are shared across partitions, but control-plane
   (e.g., routing) protocol instances, tables, and
   configuration are managed separately.  For example, in logical
   routers or VNFs, this may correspond to establishing multiple
   logical instances using a single software installation.  The
   model supports configuration of multiple instances on a single
   device by creating a list of logical network elements, each
   with their own configuration and operational state related to
   routing and switching protocols.
</t>
<t>
  The LNE model can be represented as:
</t>
<t>
<figure>
  <artwork>
module: ietf-logical-network-element
  +--rw logical-network-elements
     +--rw logical-network-element* [name]
        +--rw name           string
        +--rw managed?       boolean
        +--rw description?   string
        +--mp root
  augment /if:interfaces/if:interface:
    +--rw bind-lne-name?
          -> /logical-network-elements/logical-network-element/name

  notifications:
    +---n bind-lne-name-failed
       +--ro name             -> /if:interfaces/interface/name
       +--ro bind-lne-name
       |       -> /if:interfaces/interface/lne:bind-lne-name
       +--ro error-info?      string
</artwork>
</figure>
</t>
<t>
  'name' identifies the logical network element.  'managed'
  indicates if the server providing the host network device will
  provide the client LNE information via the 'root' structure.
  The root of an LNE's specific data is the schema mount point
  'root'. &nbsp;bind-lne-name is used to associate an interface with an LNE,
  and bind-lne-name-failed is used in certain failure cases.
</t>
<t>
  An LNE root MUST contain at least the YANG library <xref
  target="RFC7895"/> and interface module <xref target="RFC8343"/>.
</t>

<section anchor="sec-LNE.MOUNT" title="LNE Instantiation and Resource Assignment">
  <t>
    Logical network elements may be controlled by clients using existing
    list operations. When list entries are created, a new LNE is
    instantiated. The models mounted under an LNE root are expected to be
    dependent on the server implementation. When a list entry is
    deleted, an existing LNE is destroyed. For more information, see
    <xref target="RFC7950"/>, Section 7.8.6.
  </t>
  <t>
    Once instantiated, host network device resources can be
    associated with the new LNE.  As previously mentioned, this
    document augments ietf-interfaces with the bind-lne-name leaf
    to support such associations for interfaces.  When a
    bind-lne-name is set to a valid LNE name, an implementation
    MUST take whatever steps are internally necessary to assign
    the interface to the LNE or provide an error message (defined
    below) with an indication of why the assignment failed.  It is
    possible for the assignment to fail while processing the set, or
    after asynchronous processing.  Error notification in the latter
    case is supported via a notification.
  </t>
  <t>
    On a successful interface assignment to an LNE, an implementation
    MUST also make the resource available to the LNE by providing
    a system-created interface to the LNE.  The name of the system-created
    interface is a local matter and may be identical or
    completely different and mapped from and to the name used in
    the context of the host device.  The system-created interface
    SHOULD be exposed via the LNE-specific instance of the
    interface model <xref target="RFC8343"/>.
  </t>
</section>

<section anchor="sec-LNE.LNE"
 title="LNE Management -- LNE View">
<t>
  Each LNE instance is expected to support management functions
  from within the context of the LNE root, via a server that
  provides information with the LNE's root exposed as the device root.
  Management functions operating within the context of an LNE are
  accessed through the LNE's standard management interfaces, e.g., NETCONF and SNMP.  Initial configuration, much like the initial
  configuration of the host device, is a local implementation
  matter.
</t>
<t>
  When accessing an LNE via the LNE's management interface, a
  network device representation will be presented, but its scope
  will be limited to the specific LNE.  Normal YANG/NETCONF
  mechanisms, together with the required YANG library <xref
  target="RFC7895"/> instance, can be used to identify the
  available modules.  Each supported module will be presented as a
  top-level module. Only LNE-associated resources will be
  reflected in resource-related modules, e.g., interfaces,
  hardware, and perhaps QoS. From the management perspective, there
  will be no difference between the available LNE view
  (information) and a physical network device.
</t>
</section>

<section anchor="sec-LNE.HOST"
  title="LNE Management -- Host Network Device View">
<t>
   There are multiple implementation approaches possible to enable
   a network device to support the logical-network-element
   module and multiple LNEs.  Some approaches will allow the
   management functions operating at the network device level to
   access LNE configuration and operational information, while
   others will not.  Similarly, even when LNE management from the
   network device is supported by the implementation, it may be
   prohibited by user policy.
</t>
<t>
   Independent of the method selected by an implementation, the
   'managed' boolean mentioned above is used to indicate when LNE
   management from the network device context is possible. When
   the 'managed' boolean is 'false', the LNE cannot be managed by
   the host system and can only be managed from within the context
   of the LNE as described in <xref
   target="sec-LNE.LNE"/>.  Attempts to access information below a
   root node whose associated 'managed' boolean is set to 'false'
   MUST result in the error message indicated below.  In some
   implementations, it may not be possible to change this
   value. For example, when an LNE is implemented using virtual
   machine and traditional hypervisor technologies, it is likely
   that this value will be restricted to a 'false' value.
</t>
<t>
   It is an implementation choice if the information can be
   accessed and modified from within the context of the LNE, or
   even the context of the host device.  When the 'managed'
   boolean is 'true', LNE information SHALL be accessible from the
   context of the host device.  When the associated schema-mount
   definition has the 'config' leaf set to 'true', then LNE
   information SHALL also be modifiable from the context of the
   host device.  When LNE information is available from both the
   host device and from within the context of the LNE, the same
   information MUST be made available via the 'root' element, with
   paths modified as described in <xref
   target="RFC8528"/>.
</t>
<t>
  An implementation MAY represent an LNE's schema using either the
  'inline' or the 'shared-schema' approaches defined in <xref
  target="RFC8528"/>.  The choice of which to
  use is completely an implementation choice.  The inline approach is
  anticipated to be generally used in the cases where the 'managed'
  boolean will always be 'false'.  The 'shared-schema' approach is expected to be
  most useful in the case where all LNEs share the same
  schema. When 'shared-schema' is used with an LNE mount point, the
  YANG library rooted in the LNE's mount point MUST match the
  associated schema defined according to the ietf-yang-schema-mount
  module.
</t>
<t>
  Beyond the two modules that will always be present for an LNE, as 
  an LNE is a network device itself, all modules that may be present 
  at the top-level network device MAY also be present for the LNE.
  The list of available modules is expected to be implementation
  dependent, as is the method used by an implementation to support
  LNEs.  <xref target="sec-examples"/> provides example uses of LNEs.
</t>
</section>
</section>

<section anchor="sec-4" title="Security Considerations">
  <t>The YANG modules specified in this document define a schema for data that 
     is designed to be accessed via network
     management protocols such as NETCONF <xref target="RFC6241"/> or
     RESTCONF <xref target="RFC8040"/>. The lowest NETCONF layer is the secure transport
     layer, and the mandatory-to-implement secure transport is Secure Shell (SSH)
     <xref target="RFC6242"/>. The lowest RESTCONF layer is HTTPS, and the
     mandatory-to-implement secure transport is TLS <xref target="RFC8446"/>.</t>

 <t>The Network Configuration Access Control Model (NACM)  <xref target="RFC8341"/> provides the means to restrict access for particular NETCONF or RESTCONF users to a preconfigured subset of all available NETCONF or RESTCONF protocol operations and content. </t>
  <t>
    LNE information represents device and network configuration
    information. As such, the security of this information is important,
    but it is fundamentally no different than any other interface or
    device configuration information that has already been covered in
    other documents such as  <xref target="RFC8343"/>,
    <xref target="RFC7317"/>, and <xref target="RFC8349"/>.
  </t>
  <t>The vulnerable "config true" parameters and subtrees are the
  following:
  <list style="hanging">
    <t hangText="/logical-network-elements/logical-network-element:">
      This list specifies the logical network element and the related
      logical device configuration.
    </t>
    <t hangText="/logical-network-elements/logical-network-element/managed:">
      While this leaf is contained in the previous list, it is worth
      particular attention as it controls whether information under the
      LNE mount point is accessible by both the host device and within
      the LNE context.  There may be extra sensitivity to this leaf in
      environments where an LNE is managed by a different party than
      the host device, and that party does not wish to share LNE
      information with the operator of the host device.
    </t>
    <t hangText="/if:interfaces/if:interface/bind-lne-name:">
      This leaf indicates the LNE instance to which an interface is
      assigned. Implementations should pay particular attention to when
      changes to this leaf are permitted as removal of an interface from
      an LNE can have a major impact on the LNE's operation as it is
      similar to physically removing an interface from the
      device. Implementations can reject a reassignment using the
      previously described error message generation.
    </t>
  </list>
  Unauthorized access to any of these lists can adversely affect the
  security of both the local device and the network. This
  may lead to network malfunctions, delivery of packets to
  inappropriate destinations, and other problems.
  </t>
</section>
<section anchor="sec-5" title="IANA Considerations">
  <t>
    This document registers a URI in the "IETF XML
    Registry" <xref target="RFC3688"/>. 
  </t>
  <figure>
    <artwork><![CDATA[
     URI: urn:ietf:params:xml:ns:yang:ietf-logical-network-element
     Registrant Contact: The IESG.
     XML: N/A, the requested URI is an XML namespace.
     ]]></artwork>
  </figure>
  <t>
    This document registers a YANG module in the "YANG Module Names"
    registry <xref target="RFC6020"/>.
  </t>
  <figure>
    <artwork><![CDATA[
name:        ietf-logical-network-element
namespace:   urn:ietf:params:xml:ns:yang:ietf-logical-network-element
prefix:      lne
reference:   RFC 8530
]]></artwork>
  </figure>

</section>
<section anchor="sec-6.2" title="Logical Network Element Model">
<t>
   The structure of the model defined in this document is described
   by the YANG module below.
</t>
<t>

<figure>
<artwork><![CDATA[
<CODE BEGINS> file "ietf-logical-network-element@2019-01-25.yang"
module ietf-logical-network-element {
  yang-version 1.1;

  // namespace

  namespace "urn:ietf:params:xml:ns:yang:ietf-logical-network-element";
  prefix lne;

  // import some basic types

  import ietf-interfaces {
    prefix if;
    reference 
      "RFC 8343: A YANG Data Model for Interface Management";
  }
  import ietf-yang-schema-mount {
    prefix yangmnt;
    reference 
      "RFC 8528: YANG Schema Mount";
  }

  organization
    "IETF Routing Area (rtgwg) Working Group";
  contact
    "WG Web:   <https://datatracker.ietf.org/wg/rtgwg/>
     WG List:  <mailto:rtgwg@ietf.org>

     Author:   Lou Berger
               <mailto:lberger@labn.net>

     Author:   Christian Hopps
               <mailto:chopps@chopps.org>

     Author:   Acee Lindem
               <mailto:acee@cisco.com>

     Author:   Dean Bogdanovic
               <mailto:ivandean@gmail.com>";
  description
    "This module is used to support multiple logical network
     elements on a single physical or virtual system.

     Copyright (c) 2019 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 8530; see
     the RFC itself for full legal notices.";

  revision 2019-01-25 {
    description
      "Initial revision.";
    reference 
      "RFC 8530: YANG Model for Logical Network Elements";
  }

  // top level device definition statements

  container logical-network-elements {
    description
      "Allows a network device to support multiple logical
       network element (device) instances.";
    list logical-network-element {
      key "name";
      description
        "List of logical network elements.";
      leaf name {
        type string;
        description
          "Device-wide unique identifier for the
           logical network element.";
      }
      leaf managed {
        type boolean;
        default "true";
        description
          "True if the host can access LNE information
           using the root mount point.  This value
           may not be modifiable in all implementations.";
      }
      leaf description {
        type string;
        description
          "Description of the logical network element.";
      }
      container root {
        description
          "Container for mount point.";
        yangmnt:mount-point "root" {
          description
            "Root for models supported per logical
             network element.  This mount point may or may not
             be inline based on the server implementation.  It
             SHALL always contain a YANG library and interfaces
             instance.

             When the associated 'managed' leaf is 'false', any
             operation that attempts to access information below
             the root SHALL fail with an error-tag of
             'access-denied' and an error-app-tag of
             'lne-not-managed'.";
        }
      }
    }
  }

  // augment statements

  augment "/if:interfaces/if:interface" {
    description
      "Add a node for the identification of the logical network
       element associated with an interface.  Applies to
       interfaces that can be assigned per logical network
       element.

       Note that a standard error will be returned if the
       identified leafref isn't present.  If an interface
       cannot be assigned for any other reason, the operation
       SHALL fail with an error-tag of 'operation-failed' and an
       error-app-tag of 'lne-assignment-failed'.  A meaningful
       error-info that indicates the source of the assignment
       failure SHOULD also be provided.";
    leaf bind-lne-name {
      type leafref {
        path "/logical-network-elements/logical-network-element/name";
      }
      description
        "Logical network element ID to which the interface is
         bound.";
    }
  }

  // notification statements

  notification bind-lne-name-failed {
    description
      "Indicates an error in the association of an interface to an
       LNE.  Only generated after success is initially returned
       when bind-lne-name is set.";
    leaf name {
      type leafref {
        path "/if:interfaces/if:interface/if:name";
      }
      mandatory true;
      description
        "Contains the interface name associated with the
         failure.";
    }
    leaf bind-lne-name {
      type leafref {
        path "/if:interfaces/if:interface/lne:bind-lne-name";
      }
      mandatory true;
      description
        "Contains the bind-lne-name associated with the
         failure.";
    }
    leaf error-info {
      type string;
      description
        "Optionally, indicates the source of the assignment
         failure.";
    }
  }
}

<CODE ENDS>
]]></artwork>
</figure>
</t>
</section>
</middle>

<back>
<references title="Normative References">

<!--draft.ietf-netmod-schema-mount-12; in AUTH48*R: RFC-to-be 8528-->
<reference anchor='RFC8528'  target='https://www.rfc-editor.org/info/rfc8528'>
<front>
<title>YANG Schema Mount</title>
<author initials='M' surname='Bjorklund' fullname='Martin Bjorklund'>
    <organization />
</author>
<author initials='L' surname='Lhotka' fullname='Ladislav Lhotka'>
    <organization />
</author>
<date month='January' year='2019' />
</front>
<seriesInfo name='RFC' value='8528' />
<seriesInfo name='DOI' value='10.17487/RFC8528' />
</reference>

<?rfc include="reference.RFC.2119"?>
<?rfc include="reference.RFC.3688"?>
<?rfc include="reference.RFC.6020"?>
<?rfc include="reference.RFC.6241"?>
<?rfc include="reference.RFC.6242"?>

<?rfc include="reference.RFC.8040"?>
<?rfc include="reference.RFC.8174"?>
<?rfc include="reference.RFC.8341"?>

<?rfc include="reference.RFC.8342"?>

<?rfc include="reference.RFC.8343"?>
<?rfc include="reference.RFC.8446"?>


</references>

<references title="Informative References">

<!--draft-ietf-rtgwg-device-model-02; Expired-->
<reference anchor='DEVICE-MODEL'>
<front>
<title>Network Device YANG Logical Organization</title>
<author initials='A' surname='Lindem' fullname='Acee Lindem'>
    <organization />
</author>
<author initials='L' surname='Berger' fullname='Lou Berger'>
    <organization />
</author>
<author initials='D' surname='Bogdanovic' fullname='Dean Bogdanovic'>
    <organization />
</author>
<author initials='C' surname='Hopps' fullname='Christian Hopps'>
    <organization />
</author>
<date month='March' year='2017' />
</front>
<seriesInfo name='Work in Progress,' value='draft-ietf-rtgwg-device-model-02' />
</reference>


<!--draft-ietf-rtgwg-ni-model-12; in AUTH48 as RFC 8529-->
<reference anchor='RFC8529'>
<front>
<title>YANG Model for Network Instances</title>
<author initials='L' surname='Berger' fullname='Lou Berger'>
    <organization />
</author>
<author initials='C' surname='Hopps' fullname='Christian Hopps'>
    <organization />
</author>
<author initials='A' surname='Lindem' fullname='Acee Lindem'>
    <organization />
</author>
<author initials='D' surname='Bogdanovic' fullname='Dean Bogdanovic'>
    <organization />
</author>
<author initials='X' surname='Liu' fullname='Xufeng Liu'>
    <organization />
</author>
<date month='January' year='2019' />
</front>
<seriesInfo name='RFC' value='8529' />
<seriesInfo name='DOI' value='10.17487/RFC8529' />
</reference>


<!--Note: during AUTH48, authors requested the addition of this reference-->
<reference anchor='OSPF-YANG'>
<front>
<title>YANG Data Model for OSPF Protocol</title>
<author initials='D' surname='Yeung' fullname='Derek Yeung'>
    <organization />
</author>
<author initials='Y' surname='Qu' fullname='Yingzhen Qu'>
    <organization />
</author>
<author initials='Z' surname='Zhang' fullname='Zhaohui Zhang'>
    <organization />
</author>
<author initials='I' surname='Chen' fullname='Ing-Wher Chen'>
    <organization />
</author>
<author initials='A' surname='Lindem' fullname='Acee Lindem'>
    <organization />
</author>
<date month='January' year='2019' />
</front>
<seriesInfo name='Work in Progress,' value='draft-ietf-ospf-yang-21' />
</reference>


<?rfc include="reference.RFC.8340"?>
<?rfc include="reference.RFC.7317"?>
<?rfc include="reference.RFC.7895"?>
<?rfc include="reference.RFC.7950"?>
<?rfc include="reference.RFC.8349"?>
<?rfc include="reference.RFC.8348"?>

</references>



<section anchor="sec-examples" title="Examples">
  <t>
    The following subsections provide example uses of LNEs.
  </t>
<section anchor="sec-LNE.exHost" title="Example: Host-Device-Managed LNE">
  <t>
    This section describes an example of the LNE model using schema
    mount to achieve the parent management.

    An example
    device supports multiple instances of LNEs
    (logical routers), each of which supports features of Layer 2 and
    Layer 3 interfaces <xref target="RFC8343"/>, a
    routing information base <xref target="RFC8349"/>, and
    the OSPF protocol <xref target="OSPF-YANG"/>. Each of these features is specified by a YANG model, and
    they are combined using the YANG schema mount as shown
    below.  Not all possible mounted modules are shown. For example,
    implementations could also mount the model defined in <xref
    target="RFC8348"/>.
  </t>
  <t>
    <figure>
      <artwork><![CDATA[
module: ietf-logical-network-element
  +--rw logical-network-elements
     +--rw logical-network-element* [name]
        +--rw name           string
        +--mp root
           +--ro yanglib:modules-state/
           |  +--ro module-set-id    string
           |  +--ro module* [name revision]
           |     +--ro name                yang:yang-identifier
           +--rw sys:system/
           |  +--rw contact?          string
           |  +--rw hostname?         inet:domain-name
           |  +--rw authentication {authentication}?
           |     +--rw user-authentication-order*   identityref
           |     +--rw user* [name] {local-users}?
           |        +--rw name              string
           |        +--rw password?         ianach:crypt-hash
           |        +--rw authorized-key* [name]
           |           +--rw name         string
           |           +--rw algorithm    string
           |           +--rw key-data     binary
           +--ro sys:system-state/
           |     ...
           +--rw rt:routing/
           |  +--rw router-id?                 yang:dotted-quad
           |  +--rw control-plane-protocols
           |     +--rw control-plane-protocol* [type name]
           |        +--rw ospf:ospf/
           |          +--rw areas
           |             +--rw area* [area-id]
           |                +--rw interfaces
           |                   +--rw interface* [name]
           |                      +--rw name if:interface-ref
           |                      +--rw cost?   uint16
           +--rw if:interfaces/
              +--rw interface* [name]
                 +--rw name            string
                 +--rw ip:ipv4!/
                 |  +--rw address* [ip]
                 |  ...

module: ietf-interfaces
  +--rw interfaces
     +--rw interface* [name]
        +--rw name                        string
        +--rw lne:bind-lne-name?          string
        +--ro oper-status        enumeration

module: ietf-yang-library
  +--ro modules-state
     +--ro module-set-id    string
     +--ro module* [name revision]
        +--ro name                yang:yang-identifier

module: ietf-system
  +--rw system
  |  +--rw contact?          string
  |  +--rw hostname?         inet:domain-name
  |  +--rw authentication {authentication}?
  |     +--rw user-authentication-order*   identityref
  |     +--rw user* [name] {local-users}?
  |        +--rw name              string
  |        +--rw password?         ianach:crypt-hash
  |        +--rw authorized-key* [name]
  |           +--rw name         string
  |           +--rw algorithm    string
  |           +--rw key-data     binary
  +--ro system-state
     +--ro platform
     |  +--ro os-name?      string
     |  +--ro os-release?   string
]]></artwork>
    </figure>
  </t>
  <t>
To realize the above schema, the example device implements the following schema mount instance:
  </t>
  <t>
    <figure>
      <artwork><![CDATA[
"ietf-yang-schema-mount:schema-mounts": {
  "mount-point": [
    {
      "module": "ietf-logical-network-element",
      "label": "root",
      "shared-schema":  {}
    }
  ]
}
      ]]></artwork>
    </figure>
  </t>
  <t>
    By using the implementation of the YANG schema mount, an operator
    can create instances of logical routers. An interface can be
    assigned to a logical router, so that the logical router has the
    permission to access this interface. The OSPF protocol can then be
    enabled on this assigned interface.
  </t>
  <t>
    For this implementation, a parent management session has access to
    the schemas of both the parent hosting system and the child logical
    routers. In addition, each child logical router can grant its own
    management sessions, which have the following schema:
  </t>
  <t>
  </t>
  <t>
    <figure>
      <artwork><![CDATA[
module: ietf-yang-library
  +--ro modules-state
     +--ro module-set-id    string
     +--ro module* [name revision]
        +--ro name                yang:yang-identifier

module: ietf-system
  +--rw system
  |  +--rw contact?          string
  |  +--rw hostname?         inet:domain-name
  |  +--rw authentication {authentication}?
  |     +--rw user-authentication-order*   identityref
  |     +--rw user* [name] {local-users}?
  |        +--rw name              string
  |        +--rw password?         ianach:crypt-hash
  |        +--rw authorized-key* [name]
  |           +--rw name         string
  |           +--rw algorithm    string
  |           +--rw key-data     binary
  +--ro system-state
     +--ro platform
        +--ro os-name?      string
        +--ro os-release?   string

module: ietf-routing
  rw-- routing
     +--rw router-id?                 yang:dotted-quad
     +--rw control-plane-protocols
        +--rw control-plane-protocol* [type name]
           +--rw ospf:ospf/
             +--rw areas
                +--rw area* [area-id]
                   +--rw interfaces
                      +--rw interface* [name]
                         +--rw name    if:interface-ref
                         +--rw cost?   uint16

module: ietf-interfaces
  +--rw interfaces
     +--rw interface* [name]
        +--rw name                        string
        +--ro oper-status        enumeration
      ]]></artwork>
    </figure>
  </t>
 <section anchor="sec-LNE.ex1cd" title="Configuration Data">
  <t>
    The following shows an example where two customer-specific LNEs are configured:
  </t>
  <t>
    <figure>
      <artwork><![CDATA[
{
  "ietf-logical-network-element:logical-network-elements": {
    "logical-network-element": [
      {
        "name": "cust1",
        "root": {
          "ietf-system:system": {
            "authentication": {
              "user": [
                {
                  "name": "john",
                  "password": "$0$password"
                }
              ]
            }
          },
          "ietf-routing:routing": {
            "router-id": "192.0.2.1",
            "control-plane-protocols": {
              "control-plane-protocol": [
                {
                  "type": "ietf-routing:ospf",
                  "name": "1",
                  "ietf-ospf:ospf": {
                    "af": "ipv4",
                    "areas": {
                      "area": [
                        {
                          "area-id": "203.0.113.1",
                          "interfaces": {
                            "interface": [
                              {
                                "name": "eth1",
                                "cost": 10
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "ietf-interfaces:interfaces": {
            "interface": [
              {
                "name": "eth1",
                "type": "iana-if-type:ethernetCsmacd",
                "ietf-ip:ipv4": {
                  "address": [
                    {
                      "ip": "192.0.2.11",
                      "prefix-length": 24
                    }
                  ]
                },
                "ietf-ip:ipv6": {
                  "address": [
                    {
                      "ip": "2001:db8:0:2::11",
                      "prefix-length": 64
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      {
        "name": "cust2",
        "root": {
          "ietf-system:system": {
            "authentication": {
              "user": [
                {
                  "name": "john",
                  "password": "$0$password"
                }
              ]
            }
          },
          "ietf-routing:routing": {
            "router-id": "192.0.2.2",
            "control-plane-protocols": {
              "control-plane-protocol": [
                {
                  "type": "ietf-routing:ospf",
                  "name": "1",
                  "ietf-ospf:ospf": {
                    "af": "ipv4",
                    "areas": {
                      "area": [
                        {
                          "area-id": "203.0.113.1",
                          "interfaces": {
                            "interface": [
                              {
                                "name": "eth1",
                                "cost": 10
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "ietf-interfaces:interfaces": {
            "interface": [
              {
                "name": "eth1",
                "type": "iana-if-type:ethernetCsmacd",
                "ietf-ip:ipv4": {
                  "address": [
                    {
                      "ip": "192.0.2.11",
                      "prefix-length": 24
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    ]
  },

  "ietf-interfaces:interfaces": {
    "interface": [
      {
        "name": "eth0",
        "type": "iana-if-type:ethernetCsmacd",
        "ietf-ip:ipv4": {
          "address": [
            {
              "ip": "192.0.2.10",
              "prefix-length": 24
            }
          ]
        },
        "ietf-ip:ipv6": {
          "address": [
            {
              "ip": "2001:db8:0:2::10",
              "prefix-length": 64
            }
          ]
        }
      },
      {
        "name": "cust1:eth1",
        "type": "iana-if-type:ethernetCsmacd",
        "ietf-logical-network-element:bind-lne-name": "cust1"
      },
      {
        "name": "cust2:eth1",
        "type": "iana-if-type:ethernetCsmacd",
        "ietf-logical-network-element:bind-lne-name": "cust2"
      }
    ]
  },

  "ietf-system:system": {
    "authentication": {
      "user": [
        {
          "name": "root",
          "password": "$0$password"
        }
      ]
    }
  }
}
      ]]></artwork>
    </figure>
  </t>

 </section>
 <section anchor="sec-LNE.ex1sd" title="State Data">

  <t>
    The following shows possible state data associated with the above
    configuration data:
  </t>
  <t>
    <figure>
      <artwork><![CDATA[
{
  "ietf-logical-network-element:logical-network-elements": {
    "logical-network-element": [
      {
        "name": "cust1",
        "root": {
          "ietf-yang-library:modules-state": {
            "module-set-id": "123e4567-e89b-12d3-a456-426655440000",
            "module": [
              {
                "name": "iana-if-type",
                "revision": "2014-05-08",
                "namespace": "urn:ietf:params:xml:ns:yang:iana-if-type",
                "conformance-type": "import"
              },
              {
                "name": "ietf-inet-types",
                "revision": "2013-07-15",
                "namespace": 
                  "urn:ietf:params:xml:ns:yang:ietf-inet-types",
                "conformance-type": "import"
              },
              {
                "name": "ietf-interfaces",
                "revision": "2014-05-08",
                "feature": [
                  "arbitrary-names",
                  "pre-provisioning"
                ],
                "namespace": 
                  "urn:ietf:params:xml:ns:yang:ietf-interfaces",
                "conformance-type": "implement"
              },
              {
                "name": "ietf-ip",
                "revision": "2014-06-16",
                "namespace": "urn:ietf:params:xml:ns:yang:ietf-ip",
                "conformance-type": "implement"
              },
              {
                "name": "ietf-ospf",
                "revision": "2018-03-03",
                "namespace": "urn:ietf:params:xml:ns:yang:ietf-ospf",
                "conformance-type": "implement"
              },
              {
                "name": "ietf-routing",
                "revision": "2018-03-13",
                "namespace": "urn:ietf:params:xml:ns:yang:ietf-routing",
                "conformance-type": "implement"
              },
              {
                "name": "ietf-system",
                "revision": "2014-08-06",
                "namespace": "urn:ietf:params:xml:ns:yang:ietf-system",
                "conformance-type": "implement"
              },
              {
                "name": "ietf-yang-library",
                "revision": "2016-06-21",
                "namespace": 
                  "urn:ietf:params:xml:ns:yang:ietf-yang-library",
                "conformance-type": "implement"
              },
              {
                "name": "ietf-yang-types",
                "revision": "2013-07-15",
                "namespace": 
                  "urn:ietf:params:xml:ns:yang:ietf-yang-types",
                "conformance-type": "import"
              }
            ]
          },
          "ietf-system:system-state": {
            "platform": {
              "os-name": "NetworkOS"
            }
          },
          "ietf-routing:routing": {
            "router-id": "192.0.2.1",
            "control-plane-protocols": {
              "control-plane-protocol": [
                {
                  "type": "ietf-routing:ospf",
                  "name": "1",
                  "ietf-ospf:ospf": {
                    "af": "ipv4",
                    "areas": {
                      "area": [
                        {
                          "area-id": "203.0.113.1",
                          "interfaces": {
                            "interface": [
                              {
                                "name": "eth1",
                                "cost": 10
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "ietf-interfaces:interfaces": {
            "interface": [
              {
                "name": "eth1",
                "type": "iana-if-type:ethernetCsmacd",
                "oper-status": "up",
                "phys-address": "00:01:02:A1:B1:C1",
                "statistics": {
                  "discontinuity-time": "2017-06-26T12:34:56-05:00"
                },
                "ietf-ip:ipv4": {
                  "address": [
                    {
                      "ip": "192.0.2.11",
                      "prefix-length": 24
                    }
                  ]
                },
                "ietf-ip:ipv6": {
                  "address": [
                    {
                      "ip": "2001:db8:0:2::11",
                      "prefix-length": 64
                    }
                  ]
                }                
              }
            ]
          }
        }
      },
      {
        "name": "cust2",
        "root": {
          "ietf-yang-library:modules-state": {
            "module-set-id": "123e4567-e89b-12d3-a456-426655440000",
            "module": [
              {
                "name": "iana-if-type",
                "revision": "2014-05-08",
                "namespace": "urn:ietf:params:xml:ns:yang:iana-if-type",
                "conformance-type": "import"
              },
              {
                "name": "ietf-inet-types",
                "revision": "2013-07-15",
                "namespace": 
                  "urn:ietf:params:xml:ns:yang:ietf-inet-types",
                "conformance-type": "import"
              },
              {
                "name": "ietf-interfaces",
                "revision": "2014-05-08",
                "feature": [
                  "arbitrary-names",
                  "pre-provisioning"
                ],
                "namespace": 
                  "urn:ietf:params:xml:ns:yang:ietf-interfaces",
                "conformance-type": "implement"
              },
              {
                "name": "ietf-ip",
                "revision": "2014-06-16",
                "namespace": "urn:ietf:params:xml:ns:yang:ietf-ip",
                "conformance-type": "implement"
              },
              {
                "name": "ietf-ospf",
                "revision": "2018-03-03",
                "namespace": "urn:ietf:params:xml:ns:yang:ietf-ospf",
                "conformance-type": "implement"
              },
              {
                "name": "ietf-routing",
                "revision": "2018-03-13",
                "namespace": "urn:ietf:params:xml:ns:yang:ietf-routing",
                "conformance-type": "implement"
              },
              {
                "name": "ietf-system",
                "revision": "2014-08-06",
                "namespace": "urn:ietf:params:xml:ns:yang:ietf-system",
                "conformance-type": "implement"
              },
              {
                "name": "ietf-yang-library",
                "revision": "2016-06-21",
                "namespace": 
                  "urn:ietf:params:xml:ns:yang:ietf-yang-library",
                "conformance-type": "implement"
              },
              {
                "name": "ietf-yang-types",
                "revision": "2013-07-15",
                "namespace": 
                  "urn:ietf:params:xml:ns:yang:ietf-yang-types",
                "conformance-type": "import"
              }
            ]
          },
          "ietf-system:system-state": {
            "platform": {
              "os-name": "NetworkOS"
            }
          },
          "ietf-routing:routing": {
            "router-id": "192.0.2.2",
            "control-plane-protocols": {
              "control-plane-protocol": [
                {
                  "type": "ietf-routing:ospf",
                  "name": "1",
                  "ietf-ospf:ospf": {
                    "af": "ipv4",
                    "areas": {
                      "area": [
                        {
                          "area-id": "203.0.113.1",
                          "interfaces": {
                            "interface": [
                              {
                                "name": "eth1",
                                "cost": 10
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "ietf-interfaces:interfaces": {
            "interface": [
              {
                "name": "eth1",
                "type": "iana-if-type:ethernetCsmacd",
                "oper-status": "up",
                "phys-address": "00:01:02:A1:B1:C2",
                "statistics": {
                  "discontinuity-time": "2017-06-26T12:34:56-05:00"
                },
                "ietf-ip:ipv4": {
                  "address": [
                    {
                      "ip": "192.0.2.11",
                      "prefix-length": 24
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    ]
  },

  "ietf-interfaces:interfaces": {
    "interface": [
      {
        "name": "eth0",
        "type": "iana-if-type:ethernetCsmacd",
        "oper-status": "up",
        "phys-address": "00:01:02:A1:B1:C0",
        "statistics": {
          "discontinuity-time": "2017-06-26T12:34:56-05:00"
        },
        "ietf-ip:ipv4": {
          "address": [
            {
              "ip": "192.0.2.10",
              "prefix-length": 24
            }
          ]
        },
        "ietf-ip:ipv6": {
          "address": [
            {
              "ip": "2001:db8:0:2::10",
              "prefix-length": 64
            }
          ]
        }        
      },
      {
        "name": "cust1:eth1",
        "type": "iana-if-type:ethernetCsmacd",
        "oper-status": "up",
        "phys-address": "00:01:02:A1:B1:C1",
        "statistics": {
          "discontinuity-time": "2017-06-26T12:34:56-05:00"
        },
        "ietf-logical-network-element:bind-lne-name": "cust1"
      },
      {
        "name": "cust2:eth1",
        "type": "iana-if-type:ethernetCsmacd",
        "oper-status": "up",
        "phys-address": "00:01:02:A1:B1:C2",
        "statistics": {
          "discontinuity-time": "2017-06-26T12:34:56-05:00"
        },
        "ietf-logical-network-element:bind-lne-name": "cust2"
      }
    ]
  },

  "ietf-system:system-state": {
    "platform": {
      "os-name": "NetworkOS"
    }
  },

  "ietf-yang-library:modules-state": {
    "module-set-id": "123e4567-e89b-12d3-a456-426655440000",
    "module": [
      {
        "name": "iana-if-type",
        "revision": "2014-05-08",
        "namespace": "urn:ietf:params:xml:ns:yang:iana-if-type",
        "conformance-type": "import"
      },
      {
        "name": "ietf-inet-types",
        "revision": "2013-07-15",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-inet-types",
        "conformance-type": "import"
      },
      {
        "name": "ietf-interfaces",
        "revision": "2014-05-08",
        "feature": [
          "arbitrary-names",
          "pre-provisioning"
        ],
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-interfaces",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-ip",
        "revision": "2014-06-16",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-ip",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-logical-network-element",
        "revision": "2017-03-13",
        "feature": [
          "bind-lne-name"
        ],
        "namespace": 
          "urn:ietf:params:xml:ns:yang:ietf-logical-network-element",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-ospf",
        "revision": "2018-03-03",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-ospf",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-routing",
        "revision": "2018-03-13",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-routing",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-system",
        "revision": "2014-08-06",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-system",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-yang-library",
        "revision": "2016-06-21",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-library",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-yang-schema-mount",
        "revision": "2017-05-16",
        "namespace": 
          "urn:ietf:params:xml:ns:yang:ietf-yang-schema-mount",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-yang-types",
        "revision": "2013-07-15",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-types",
        "conformance-type": "import"
      }
    ]
  },

  "ietf-yang-schema-mount:schema-mounts": {
    "mount-point": [
      {
        "module": "ietf-logical-network-element",
        "label": "root",
        "shared-schema": {}
      }
    ]
  }
}
      ]]></artwork>
    </figure>
  </t>
 </section>
</section>
<section anchor="sec-LNE.exLNE" title="Example: Self-Managed LNE">
  <t>
    This section describes an example of the LNE model using schema
    mount to achieve child-independent management. An example device
    supports multiple instances of LNEs (logical
    routers), each of which has the features of Layer 2 and Layer 3
    interfaces <xref target="RFC8343"/>, a routing
    information base <xref target="RFC8349"/>, and
    the OSPF protocol. Each of these features is specified by a YANG model, and
    they are put together by the YANG schema mount as follows:
  </t>
  <t>
    <figure>
      <artwork><![CDATA[
 module: ietf-logical-network-element
   +--rw logical-network-elements
      +--rw logical-network-element* [name]
         +--rw name           string
         +--mp root
            // The internal modules of the LNE are not visible to
            // the parament management.
            // The child manages its modules, including ietf-routing
            // and ietf-interfaces

 module: ietf-interfaces
   +--rw interfaces
      +--rw interface* [name]
         +--rw name                        string
         +--rw lne:bind-lne-name?          string
         +--ro oper-status        enumeration

 module: ietf-yang-library
   +--ro modules-state
      +--ro module-set-id    string
      +--ro module* [name revision]
         +--ro name                yang:yang-identifier

 module: ietf-system
   +--rw system
   |  +--rw contact?          string
   |  +--rw hostname?         inet:domain-name
   |  +--rw authentication {authentication}?
   |     +--rw user-authentication-order*   identityref
   |     +--rw user* [name] {local-users}?
   |        +--rw name              string
   |        +--rw password?         ianach:crypt-hash
   |        +--rw authorized-key* [name]
   |           +--rw name         string
   |           +--rw algorithm    string
   |           +--rw key-data     binary
   +--ro system-state
      +--ro platform
      |  +--ro os-name?      string
      |  +--ro os-release?   string
      ]]></artwork>
    </figure>
  </t>
  <t>
    To realize the above schema, the device implements the
    following schema mount instance:
  </t>
  <t>
    <figure>
      <artwork><![CDATA[
"ietf-yang-schema-mount:schema-mounts": {
  "mount-point": [
    {
      "module": "ietf-logical-network-element",
      "label": "root",
      "inline": {}
    }
  ]
}
      ]]></artwork>
    </figure>
  </t>
  <t>
    By using the implementation of the YANG schema mount, an operator
    can create instances of logical routers, each with their logical router-specific
    inline modules. An interface can be assigned to a logical
    router, so that the logical router has the permission to access this
    interface. The OSPF protocol can then be enabled on this assigned
    interface. Each logical router independently manages its own set of
    modules, which may or may not be the same as other logical
    routers. The following is an example of schema set implemented on
    one particular logical router:
  </t>
  <t>
    <figure>
      <artwork><![CDATA[
 module: ietf-yang-library
   +--ro modules-state
      +--ro module-set-id    string
      +--ro module* [name revision]
         +--ro name                yang:yang-identifier

 module: ietf-system
   +--rw system
   |  +--rw contact?          string
   |  +--rw hostname?         inet:domain-name
   |  +--rw authentication {authentication}?
   |     +--rw user-authentication-order*   identityref
   |     +--rw user* [name] {local-users}?
   |        +--rw name              string
   |        +--rw password?         ianach:crypt-hash
   |        +--rw authorized-key* [name]
   |           +--rw name         string
   |           +--rw algorithm    string
   |           +--rw key-data     binary
   +--ro system-state
      +--ro platform
      |  +--ro os-name?      string
      |  +--ro os-release?   string

 module: ietf-routing
   +--rw routing
      +--rw router-id?                 yang:dotted-quad
      +--rw control-plane-protocols
         +--rw control-plane-protocol* [type name]
            +--rw ospf:ospf/
               +--rw areas
                 +--rw area* [area-id]
                    +--rw interfaces
                       +--rw interface* [name]
                          +--rw name    if:interface-ref
                          +--rw cost?   uint16

 module: ietf-interfaces
   +--rw interfaces
      +--rw interface* [name]
         +--rw name                        string
         +--ro oper-status        enumeration
      ]]></artwork>
    </figure>
  </t>

  <section anchor="sec-LNE.ex2cd" title="Configuration Data">
    <t>
      Each of the child virtual routers is managed through its own sessions and configuration data.
    </t>
    <section anchor="sec-LNE.ex2cd1" title="Logical Network Element 'vnf1'">
      <t>
        The following shows an example of configuration data for the LNE
        name "vnf1":
      </t>
      <t>
        <figure>
          <artwork><![CDATA[
{
  "ietf-system:system": {
    "authentication": {
      "user": [
        {
          "name": "john",
          "password": "$0$password"
        }
      ]
    }
  },
  "ietf-routing:routing": {
    "router-id": "192.0.2.1",
    "control-plane-protocols": {
      "control-plane-protocol": [
        {
          "type": "ietf-routing:ospf",
          "name": "1",
          "ietf-ospf:ospf": {
            "af": "ipv4",
            "areas": {
              "area": [
                {
                  "area-id": "203.0.113.1",
                  "interfaces": {
                    "interface": [
                      {
                        "name": "eth1",
                        "cost": 10
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    }
  },
  "ietf-interfaces:interfaces": {
    "interface": [
      {
        "name": "eth1",
        "type": "iana-if-type:ethernetCsmacd",        
        "ietf-ip:ipv4": {
          "address": [
            {
              "ip": "192.0.2.11",
              "prefix-length": 24
            }
          ]
        }
      }
    ]
  }
}
          ]]></artwork>
        </figure>
      </t>
    </section>
    <section anchor="sec-LNE.ex2cd2" title="Logical Network Element 'vnf2'">
      <t>
        The following shows an example of configuration data for the LNE
        name "vnf2":
      </t>
      <t>
        <figure>
          <artwork><![CDATA[
{
  "ietf-system:system": {
    "authentication": {
      "user": [
        {
          "name": "john",
          "password": "$0$password"
        }
      ]
    }
  },
  "ietf-routing:routing": {
    "router-id": "192.0.2.2",
    "control-plane-protocols": {
      "control-plane-protocol": [
        {
          "type": "ietf-routing:ospf",
          "name": "1",
          "ietf-ospf:ospf": {
            "af": "ipv4",
            "areas": {
              "area": [
                {
                  "area-id": "203.0.113.1",
                  "interfaces": {
                    "interface": [
                      {
                        "name": "eth1",
                        "cost": 10
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    }
  },
  "ietf-interfaces:interfaces": {
    "interface": [
      {
        "name": "eth1",
        "type": "iana-if-type:ethernetCsmacd",        
        "ietf-ip:ipv4": {
          "address": [
            {
              "ip": "192.0.2.11",
              "prefix-length": 24
            }
          ]
        }
      }
    ]
  }
}
          ]]></artwork>
        </figure>
      </t>
    </section>
  </section>

  <section anchor="sec-LNE.ex2sd" title="State Data">

  <t>
    The following sections show possible state data associated with the above
    configuration data.  Note that there are three views: the host
    device's view and each of the LNE's views.
  </t>

    <section anchor="sec-LNE.ex2sdH" title="Host Device">
      <t>
        The following shows state data for the device hosting the
        example LNEs:
      </t>
      <t>
        <figure>
          <artwork><![CDATA[
{
  "ietf-logical-network-element:logical-network-elements": {
    "logical-network-element": [
      {
        "name": "vnf1",
        "root": {
        }
      },
      {
        "name": "vnf2",
        "root": {
        }
      }
    ]
  },

  "ietf-interfaces:interfaces": {
    "interface": [
      {
        "name": "eth0",
        "type": "iana-if-type:ethernetCsmacd",
        "oper-status": "up",
        "phys-address": "00:01:02:A1:B1:C0",
        "statistics": {
          "discontinuity-time": "2017-06-26T12:34:56-05:00"
        },
        "ietf-ip:ipv4": {
          "address": [
            {
              "ip": "192.0.2.10",
              "prefix-length": 24
            }
          ]
        }
      },
      {
        "name": "vnf1:eth1",
        "type": "iana-if-type:ethernetCsmacd",
        "oper-status": "up",
        "phys-address": "00:01:02:A1:B1:C1",
        "statistics": {
          "discontinuity-time": "2017-06-26T12:34:56-05:00"
        },
        "ietf-logical-network-element:bind-lne-name": "vnf1"
      },
      {
        "name": "vnf2:eth2",
        "type": "iana-if-type:ethernetCsmacd",
        "oper-status": "up",
        "phys-address": "00:01:02:A1:B1:C2",
        "statistics": {
          "discontinuity-time": "2017-06-26T12:34:56-05:00"
        },
        "ietf-logical-network-element:bind-lne-name": "vnf2"
      }
    ]
  },
  
  "ietf-system:system-state": {
    "platform": {
      "os-name": "NetworkOS"
    }
  },

  "ietf-yang-library:modules-state": {
    "module-set-id": "123e4567-e89b-12d3-a456-426655440000",
    "module": [
      {
        "name": "iana-if-type",
        "revision": "2014-05-08",
        "namespace": "urn:ietf:params:xml:ns:yang:iana-if-type",
        "conformance-type": "import"
      },
      {
        "name": "ietf-inet-types",
        "revision": "2013-07-15",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-inet-types",
        "conformance-type": "import"
      },
      {
        "name": "ietf-interfaces",
        "revision": "2014-05-08",
        "feature": [
          "arbitrary-names",
          "pre-provisioning"
        ],
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-interfaces",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-ip",
        "revision": "2014-06-16",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-ip",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-logical-network-element",
        "revision": "2017-03-13",
        "feature": [
          "bind-lne-name"
        ],
        "namespace": 
          "urn:ietf:params:xml:ns:yang:ietf-logical-network-element",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-system",
        "revision": "2014-08-06",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-system",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-yang-library",
        "revision": "2016-06-21",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-library",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-yang-schema-mount",
        "revision": "2017-05-16",
        "namespace": 
          "urn:ietf:params:xml:ns:yang:ietf-yang-schema-mount",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-yang-types",
        "revision": "2013-07-15",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-types",
        "conformance-type": "import"
      }
    ]
  },

  "ietf-yang-schema-mount:schema-mounts": {
    "mount-point": [
      {
        "module": "ietf-logical-network-element",
        "label": "root",
        "inline": {}
      }
    ]
  }
}
          ]]></artwork>
        </figure>
      </t>
    </section>
    <section anchor="sec-LNE.ex2sd1" title="Logical Network Element 'vnf1'">
      <t>
        The following shows state data for the example LNE with the name "vnf1":
      </t>
      <t>
        <figure>
          <artwork><![CDATA[
{
  "ietf-yang-library:modules-state": {
    "module-set-id": "123e4567-e89b-12d3-a456-426655440000",
    "module": [
      {
        "name": "iana-if-type",
        "revision": "2014-05-08",
        "namespace": "urn:ietf:params:xml:ns:yang:iana-if-type",
        "conformance-type": "import"
      },
      {
        "name": "ietf-inet-types",
        "revision": "2013-07-15",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-inet-types",
        "conformance-type": "import"
      },
      {
        "name": "ietf-interfaces",
        "revision": "2014-05-08",
        "feature": [
          "arbitrary-names",
          "pre-provisioning"
        ],
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-interfaces",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-ip",
        "revision": "2014-06-16",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-ip",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-ospf",
        "revision": "2018-03-03",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-ospf",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-routing",
        "revision": "2018-03-13",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-routing",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-system",
        "revision": "2014-08-06",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-system",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-yang-library",
        "revision": "2016-06-21",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-library",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-yang-types",
        "revision": "2013-07-15",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-types",
        "conformance-type": "import"
      }
    ]
  },

  "ietf-system:system-state": {
    "platform": {
      "os-name": "NetworkOS"
    }
  },

  "ietf-routing:routing": {
    "router-id": "192.0.2.1",
    "control-plane-protocols": {
      "control-plane-protocol": [
        {
          "type": "ietf-routing:ospf",
          "name": "1",
          "ietf-ospf:ospf": {
            "af": "ipv4",
            "areas": {
              "area": [
                {
                  "area-id": "203.0.113.1",
                  "interfaces": {
                    "interface": [
                      {
                        "name": "eth1",
                        "cost": 10
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    }
  },

  "ietf-interfaces:interfaces": {
    "interface": [
      {
        "name": "eth1",
        "type": "iana-if-type:ethernetCsmacd",
        "oper-status": "up",
        "phys-address": "00:01:02:A1:B1:C1",
        "statistics": {
          "discontinuity-time": "2017-06-26T12:34:56-05:00"
        },
        "ietf-ip:ipv4": {
          "address": [
            {
              "ip": "192.0.2.11",
              "prefix-length": 24
            }
          ]
        }
      }
    ]
  }
}
          ]]></artwork>
        </figure>
      </t>
    </section>
    <section anchor="sec-LNE.ex2sd2" title="Logical Network Element 'vnf2'">
      <t>
        The following shows state data for the example LNE with the name "vnf2":
      </t>
      <t>
        <figure>
          <artwork><![CDATA[
{
  "ietf-yang-library:modules-state": {
    "module-set-id": "123e4567-e89b-12d3-a456-426655440000",
    "module": [
      {
        "name": "iana-if-type",
        "revision": "2014-05-08",
        "namespace": "urn:ietf:params:xml:ns:yang:iana-if-type",
        "conformance-type": "import"
      },
      {
        "name": "ietf-inet-types",
        "revision": "2013-07-15",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-inet-types",
        "conformance-type": "import"
      },
      {
        "name": "ietf-interfaces",
        "revision": "2014-05-08",
        "feature": [
          "arbitrary-names",
          "pre-provisioning"
        ],
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-interfaces",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-ip",
        "revision": "2014-06-16",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-ip",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-ospf",
        "revision": "2018-03-03",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-ospf",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-routing",
        "revision": "2018-03-13",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-routing",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-system",
        "revision": "2014-08-06",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-system",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-yang-library",
        "revision": "2016-06-21",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-library",
        "conformance-type": "implement"
      },
      {
        "name": "ietf-yang-types",
        "revision": "2013-07-15",
        "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-types",
        "conformance-type": "import"
      }
    ]
  },

  "ietf-system:system-state": {
    "platform": {
      "os-name": "NetworkOS"
    }
  },

  "ietf-routing:routing": {
    "router-id": "192.0.2.2",
    "control-plane-protocols": {
      "control-plane-protocol": [
        {
          "type": "ietf-routing:ospf",
          "name": "1",
          "ietf-ospf:ospf": {
            "af": "ipv4",
            "areas": {
              "area": [
                {
                  "area-id": "203.0.113.1",
                  "interfaces": {
                    "interface": [
                      {
                        "name": "eth1",
                        "cost": 10
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    }
  },

  "ietf-interfaces:interfaces": {
    "interface": [
      {
        "name": "eth1",
        "type": "iana-if-type:ethernetCsmacd",
        "oper-status": "up",
        "phys-address": "00:01:02:A1:B1:C2",
        "statistics": {
          "discontinuity-time": "2017-06-26T12:34:56-05:00"
        },
        "ietf-ip:ipv4": {
          "address": [
            {
              "ip": "192.0.2.11",
              "prefix-length": 24
            }
          ]
        }
      }
    ]
  }
}
          ]]></artwork>
        </figure>
      </t>
    </section>
  </section>
</section>
</section>
<section title="Acknowledgments" numbered="no">
   <t>The Routing Area Yang Architecture design team members included Acee
   Lindem, Anees Shaikh, Christian Hopps, Dean Bogdanovic, Lou Berger,
   Qin Wu, Rob Shakir, Stephane Litkowski, and Yan Gang. Useful review
   comments were also received by Martin Bjorklund, John Scudder,
   Dan Romascanu, and Taylor Yu.</t>
<t>
   This document was motivated by, and derived from "Network Device YANG
   Logical Organization" <xref target="DEVICE-MODEL"/>.
</t>
  <t>Thanks to Alvaro Retana for the IESG review.</t>
</section>

</back>

</rfc>


