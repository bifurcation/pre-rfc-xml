<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<rfc ipr="trust200902" obsoletes="6106" category="std" number="8106"
     submissionType="IETF" consensus="yes">

<front>
    <title abbrev="IPv6 DNS RA Options">
         IPv6 Router Advertisement Options for DNS Configuration
    </title>

    <author initials="J." surname="Jeong" fullname="Jaehoon Paul Jeong">
        <organization abbrev="Sungkyunkwan University">
           Department of Software 
        </organization>
        <address>
            <postal>
        <street>Sungkyunkwan University</street>
        <street>2066 Seobu-Ro, Jangan-Gu</street>
        <city>Suwon</city> <region>Gyeonggi-Do</region>
        <code>16419</code>
        <country>Republic of Korea</country>
            </postal>
            <phone>+82 31 299 4957</phone>
            <facsimile>+82 31 290 7996</facsimile>
            <email>pauljeong@skku.edu</email>
            <uri>http://iotlab.skku.edu/people-jaehoon-jeong.php</uri>
        </address>
    </author>
 
    <author initials="S." surname="Park" fullname="Soohong Daniel Park">
        <organization abbrev="Samsung Electronics">
           Software R&amp;D Center
        </organization>
        <address>
            <postal>
        <street>Samsung Electronics</street>
        <street>Seoul R&amp;D Campus D-Tower, 56, Seongchon-Gil, Seocho-Gu</street>
        <city>Seoul</city>
        <code>06765</code>
        <country>Republic of Korea</country>
            </postal>
            <email>soohong.park@samsung.com</email>
        </address>
    </author>

    <author initials="L." surname="Beloeil" fullname="Luc Beloeil">
        <organization abbrev="Orange">
            Orange
        </organization>
        <address>
            <postal>
        <street>5 rue Maurice Sibille</street>
        <street>BP 44211</street>
        <city>44042 Nantes Cedex 1</city>
        <country>France</country>
            </postal>
            <phone>+33 2 28 56 11 84</phone>
            <email>luc.beloeil@orange.com</email>
        </address>
    </author>

    <author initials="S." surname="Madanapalli" fullname="Syam Madanapalli">
<organization>NTT Data</organization>
        <address>
        <postal>
            <street>#H304, Shriram Samruddhi, Thubarahalli</street>
            <city>Bangalore</city>
            <code>560066</code>
            <country>India</country>
        </postal>
        <phone>+91 959 175 7926</phone>
        <email>smadanapalli@gmail.com</email>
        </address>
    </author>

    <date month="March" year="2017" />
        
<keyword>DNS Service</keyword>     
<keyword>DNS Option</keyword>
<keyword>Recursive DNS Server Address</keyword>
<keyword>DNS Search List</keyword>
<keyword>Stateless Autoconfiguration</keyword>

    <abstract>
        <t>
        This document specifies IPv6 Router Advertisement (RA) options
        (called "DNS RA options") to allow IPv6 routers to advertise a list
        of DNS Recursive Server Addresses and a DNS Search List to IPv6 hosts.
        </t>

        <t> 
        This document, which obsoletes RFC 6106, defines a higher default value 
        of the lifetime of the DNS RA options to reduce the likelihood of expiry
        of the options on links with a relatively high rate of packet loss.
        </t>
    </abstract>
</front>

<middle>

<section title="Introduction"> 
        <t>
        The purpose of this document is to standardize IPv6 Router
        Advertisement (RA) options (DNS RA options) for DNS Recursive Server
        Addresses used for DNS name resolution in IPv6 hosts, and also for
        a DNS Search List (DNSSL) of domain suffixes.
        </t>

        <t>
        IPv6 Neighbor Discovery (ND) and IPv6 Stateless Address
        Autoconfiguration (SLAAC) provide ways to configure either fixed 
        or mobile nodes with one or more IPv6 addresses, default routers, 
        and some other parameters <xref target="RFC4861" />
        <xref target="RFC4862" />.
        </t>

        <t>
        It is infeasible to manually configure nomadic hosts each time they
        connect to a different network. While a one-time static configuration
        is possible, it is generally not desirable on general-purpose hosts
        such as laptops.  For instance, locally defined namespaces would not
        be available to the host if it were to run its own recursive name
        server directly connected to the global DNS.
        </t>

        <t> 
        The DNS information can also be provided through
        DHCPv6 <xref target="RFC3315" /> <xref target="RFC3736" />
        <xref target="RFC3646" />. However, access to DNS is a fundamental
        requirement for almost all hosts, so IPv6 SLAAC cannot stand
        on its own as an alternative deployment model in any practical
        network without any support for DNS configuration.
        </t>

        <t>
        These issues are not pressing in dual-stack networks as long as a
        DNS server is available on the IPv4 side, but they become more
        critical with the deployment of IPv6-only networks.  As a result,
        this document defines a mechanism based on DNS RA options to allow
        IPv6 hosts to perform automatic DNS configuration.
        </t>

    <section title="Applicability Statements">
        <t>
        RA-based DNS configuration is a useful alternative in networks where
        an IPv6 host's address is autoconfigured through IPv6 SLAAC
        and where either (i)&nbsp;there is no DHCPv6 infrastructure at all
        or (ii)&nbsp;some hosts do not have a DHCPv6 client. The intention
        is to enable the full configuration of basic networking
        information for hosts without requiring DHCPv6. However, for
        networks that need to distribute additional information, DHCPv6 is
        likely to be employed. In these networks, RA-based DNS configuration
        may not be needed.
        </t>

        <t>
        RA-based DNS configuration allows an IPv6 host to acquire the DNS
        configuration (i.e., DNS Recursive Server Addresses and the DNSSL)
        for the link(s) to which the host is connected.  Furthermore,
        the host learns this DNS configuration from the same RA message that
        provides configuration information for the link. 
        </t>
            
        <t>
        The advantages and disadvantages of the RA-based approach are
        discussed in <xref target="RFC4339" /> along with other approaches,
        such as the DHCP and well-known anycast address approaches.
        </t>
    </section>

    <section title="Coexistence of RA Options and DHCP Options for DNS Configuration">
    <t>
    Two protocols exist to configure the DNS information on a host:
    the RA options specified in this document and the DHCPv6 options specified
    in <xref target="RFC3646" />. They can be used together. The rules
    governing the decision to use stateful configuration mechanisms are
    specified in <xref target="RFC4861" />. Hosts conforming to this
    specification MUST extract DNS information from RA messages, unless static
    DNS configuration has been specified by the user. If there is DNS
    information available from multiple RAs and/or from DHCP, the
    host MUST maintain an ordered list of this information as
    specified in <xref target="ipv6-host-proc"/>.
    </t>
    </section>
  
</section>
  
<section title="Requirements Language">
    <t>
    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
    document are to be interpreted as described in <xref target="RFC2119" />.
    </t>
</section>

<section title="Terminology">
    <t>
        This document uses the terminology defined in <xref target="RFC4861"/>
        and <xref target="RFC4862" />. In addition, six new terms are
        defined below:
    </t>
    
    <t>
    <list style="symbols"> 
        <t>
        Recursive DNS Server (RDNSS): A server that provides a recursive DNS
        resolution service for translating domain names into IP addresses or
        resolving PTR records as defined in <xref target="RFC1034" /> and
        <xref target="RFC1035" />.
        </t>

        <t>
        RDNSS Option: An IPv6 RA option to deliver the RDNSS information to
        IPv6 hosts <xref target="RFC4861" />.
        </t>

        <t>
        DNS Search List (DNSSL): The list of DNS suffix domain names used by
        IPv6 hosts when they perform DNS query searches for short, unqualified
        domain names.
        </t>

        <t>
        DNSSL Option: An IPv6 RA option to deliver the DNSSL information to
        IPv6 hosts.
        </t>

        <t>
        DNS Repository: Two data structures for managing DNS configuration
        information in the IPv6 protocol stack, in addition to the
        Neighbor Cache and Destination Cache for Neighbor Discovery
        <xref target="RFC4861" />. The first data structure is the DNS
        Server List for RDNSS addresses, and the second is the DNSSL
        for DNS search domain names.
        </t>
  
        <t>
        Resolver Repository: Configuration repository with RDNSS addresses and
        a DNSSL that a DNS resolver on the host uses for DNS
        name resolution -- for example, the UNIX resolver file
        (i.e., /etc&wj;/resolv.conf) and the Windows registry.
        </t>
    </list>
    </t>
</section>

<section title="Overview">
   <t>
   This document standardizes an ND option called the "RDNSS option", which
   contains the addresses of RDNSSes. This document also
   standardizes an ND option called the "DNSSL option", which contains the
   DNSSL. This is to maintain parity with the DHCPv6 options
   and to ensure that there is necessary functionality to determine the
   search domains.
   </t>

   <t>
   The existing ND message (i.e., RA) is used to carry this information.
   An IPv6 host can configure the IPv6 addresses of one or more
   RDNSSes via RA messages. Through the RDNSS and DNSSL options, along with
   the Prefix Information option based on the ND protocol <xref target="RFC4861"/>
   <xref target="RFC4862" />, an IPv6 host can perform the network
   configuration of its IPv6 address and the DNS information simultaneously
   without needing DHCPv6 for the DNS configuration.  The RA options for RDNSS
   and DNSSL can be used on networks that support the use of ND.
   </t>
  
   <t>
   This approach requires manual configuration or automatic mechanisms 
   (e.g., DHCPv6 or vendor-proprietary configuration mechanisms) to configure
   the DNS information in routers sending the advertisements. The automatic
   configuration of RDNSS addresses and a DNSSL in routers is
   out of scope for this document.
  </t>
</section>

<section title="Neighbor Discovery Extension">
    <t>
    The IPv6 DNS configuration mechanism described in this document needs
    two ND options in Neighbor Discovery: (i)&nbsp;the RDNSS option and
    (ii)&nbsp;the DNSSL option.
    </t>

    <section title="Recursive DNS Server Option">
        <t>
        The RDNSS option contains one or more IPv6 addresses of RDNSSes.
        All of the addresses share the same Lifetime value.  If it
        is desirable to have different Lifetime values, multiple RDNSS
        options can be used.  <xref target="rdnss-option-format"/> shows the
        format of the RDNSS option.
        </t>

        <figure anchor="rdnss-option-format" title="RDNSS Option Format">
            <artwork><![CDATA[
   0                   1                   2                   3  
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1  
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
  |     Type      |     Length    |           Reserved            | 
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
  |                           Lifetime                            | 
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
  |                                                               | 
  :            Addresses of IPv6 Recursive DNS Servers            : 
  |                                                               | 
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
            ]]></artwork>
        </figure>

<t>Fields:</t>


<t><list style="hanging" hangIndent="12">
 <t hangText="Type">8-bit identifier of the RDNSS option type as assigned
    by IANA: 25</t>

 <t hangText="Length">8-bit unsigned integer.  The length of the option
    (including the Type and Length fields) is in units of 8&nbsp;octets.
    The minimum value is 3 if one IPv6 address is contained in the option.
    Every additional RDNSS address increases the length by 2.  The
    Length field is used by the receiver to determine the number of
    IPv6 addresses in the option.</t>
  
 <t hangText="Lifetime">32-bit unsigned integer.  The maximum time in 
    seconds (relative to the time the packet is received) over which
    these RDNSS addresses MAY be used for name resolution.  The value
    of Lifetime SHOULD by default be at least 3&nbsp;*&nbsp;MaxRtrAdvInterval,
    where MaxRtrAdvInterval is the maximum RA interval as defined 
    in <xref target="RFC4861"/>.  A value of all one bits (0xffffffff)
    represents infinity.  A value of zero means that the RDNSS addresses
    MUST no longer be&nbsp;used.</t>

 <t hangText="Addresses of IPv6 Recursive DNS Servers"><vspace/>
    One or more 128-bit IPv6 addresses of the RDNSSes.
    The number of addresses is determined by the Length field.  That is,
    the number of addresses is equal to (Length - 1) / 2.</t>
 </list></t>

        <t><list style="hanging" hangIndent="6">
        <t hangText="Note:">
        The addresses for RDNSSes in the RDNSS option
        MAY be link-local addresses.  Such link-local addresses SHOULD be
        registered in the Resolver Repository along with the
        corresponding link zone indices of the links that receive the RDNSS
        option(s) for them.  The link-local addresses MAY be represented 
        in the Resolver Repository with their link zone indices in the 
        textual format for scoped addresses as described 
        in <xref target="RFC4007" />.  When a resolver sends a DNS query message
        to an RDNSS identified by a link-local address, it MUST use the
        corresponding link.
        </t>

        <t>
        The rationale of the default value of the Lifetime field is as 
        follows. The Router Lifetime field, set by AdvDefaultLifetime,
        has the default of 3 * MaxRtrAdvInterval as specified
        in <xref target="RFC4861"/>, so such a default or a larger default
        can allow for the reliability of DNS options even under the loss of
        RAs on links with a relatively high rate of packet loss. Note that
        the ratio of AdvDefaultLifetime to MaxRtrAdvInterval is the number
        of unsolicited multicast RAs sent by the router. Since the DNS 
        option entries can survive for at most three consecutive losses 
        of RAs containing DNS options, the default value of the Lifetime
        lets the DNS option entries be resilient to packet&nbhy;loss 
        environments.
        </t>
        </list></t>

    </section>

    <section title="DNS Search List Option">
        <t>
        The DNSSL option contains one or more domain names of DNS suffixes.  
        All of the domain names share the same Lifetime value.  If it
        is desirable to have different Lifetime values, multiple DNSSL
        options can be used.  <xref target="dnssl-option-format"/> shows the
        format of the DNSSL option.
        </t>

        <figure anchor="dnssl-option-format" title="DNSSL Option Format">
            <artwork><![CDATA[
   0                   1                   2                   3  
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1  
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
  |     Type      |     Length    |           Reserved            | 
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
  |                           Lifetime                            | 
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
  |                                                               | 
  :                Domain Names of DNS Search List                : 
  |                                                               | 
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
            ]]></artwork>
        </figure>

<t>Fields:</t>

<t><list style="hanging" hangIndent="12">
 <t hangText="Type">8-bit identifier of the DNSSL option type as assigned
    by IANA: 31</t>

 <t hangText="Length">8-bit unsigned integer.  The length of the option
    (including the Type and Length fields) is in units of 8&nbsp;octets.  The
    minimum value is 2 if at least one domain name is contained in the option.
    The Length field is set to a multiple of 8 octets to accommodate all the
    domain names in the "Domain Names of DNS Search List" field.</t>

 <t hangText="Lifetime">32-bit unsigned integer.  The maximum time in
    seconds (relative to the time the packet is received) over which
    these DNSSL domain names MAY be used for name resolution.  The
    Lifetime value has the same semantics as the semantics for the
    RDNSS option. That is, Lifetime SHOULD by default be at least 
    3 * MaxRtrAdvInterval.  A value of all one bits (0xffffffff)
    represents infinity.  A value of zero means that the DNSSL domain names
    MUST no longer be used.</t>

 <t hangText="Domain Names of DNS Search List"><vspace/>
    One or more domain names of the DNSSL that MUST be
    encoded as described in Section&nbsp;3.1 of <xref target="RFC1035"/>.
    With this technique, each domain name is represented as a sequence of
    labels ending in a zero octet, defined as a domain name
    representation.  For more than one domain name, the corresponding
    domain name representations are concatenated as they are.  Note
    that for the simple decoding, the domain names MUST&nbsp;NOT
    be encoded in the compressed form described in
    Section&nbsp;4.1.4 of <xref target="RFC1035"/>. Because the
    size of this field MUST be a multiple of 8&nbsp;octets, for the
    minimum multiple including the domain name representations, 
    the remaining octets other than the encoding parts of
    the domain name representations MUST be padded with 
    zeros.</t>
  </list></t>

        </section>
        
        <section title="DNS Configuration Procedure">
        <t>
        The procedure for DNS configuration through the RDNSS and DNSSL options
        is the same as it is with any other ND option <xref target="RFC4861"/>.
        </t>

            <section anchor="ipv6-host-proc" title="Procedure in IPv6 Hosts">
            <t>
            When an IPv6 host receives DNS options (i.e., RDNSS and DNSSL
            options) through RA messages, it processes the options as follows:
            </t>

            <t>
            <list style="symbols"> 
        <t>
           The validity of DNS options is checked with the Length field;
           that&nbsp;is, the value of the Length field in the RDNSS option
           is greater than or equal to the minimum value (3) and satisfies
           the requirement that
           (Length&nbsp;-&nbsp;1)&nbsp;%&nbsp;2&nbsp;==&nbsp;0.
           The value of the Length field in the DNSSL option is 
           greater than or equal to the minimum value (2). Also, the validity
           of the RDNSS option is checked with the "Addresses of IPv6
           Recursive DNS Servers" field; that is, the addresses should be
           unicast addresses.
            </t>

            <t>
    If the DNS options are valid, the host SHOULD copy the values of the options
    into the DNS Repository and the Resolver Repository in order. 
    Otherwise, the host MUST discard the options.  Refer to
    <xref target="impl-cons"/> for the detailed procedure. 

            </t>
            </list>
            </t>

            <t> 
            In the case where the DNS information of RDNSS and DNSSL can be
            obtained from multiple sources, such as RAs and DHCP, the IPv6 host
            SHOULD keep some DNS options from all sources. Unless explicitly
            specified for the discovery mechanism, the exact number of
            addresses and domain names to keep is a matter of local policy and
            implementation choice as a local configuration option.  
            However, in the case of multiple sources, the ability to store a
            total of at least three RDNSS addresses (or DNSSL domain names)  
            from the multiple sources is RECOMMENDED.  The DNS options from
            RAs and DHCP SHOULD be stored in the
            DNS Repository and Resolver Repository so that information 
            from DHCP appears there first and therefore takes precedence.
            Thus, the DNS information from DHCP takes precedence over that
            from RAs for DNS queries. On the other hand, for DNS options
            announced by RAs, if some RAs use the
            Secure Neighbor Discovery (SEND) protocol <xref target="RFC3971"/>
            for RA security, they MUST be preferred over those that do not use SEND.
            Also, DNS options announced by RAs via SEND MUST be preferred over
            those announced by unauthenticated DHCP <xref target="RFC3118" />.
            Refer to <xref target="security-considerations"/> for a detailed
            discussion of SEND for DNS RA options.
            </t>
        </section>

        <section title="Warnings for DNS Options Configuration">           
            <t>
            There are two warnings for DNS options configuration: 
            (i)&nbsp;warning for multiple sources of DNS options and 
            (ii)&nbsp;warning for multiple network interfaces. First, in
            the case of multiple sources for DNS options (e.g., RAs and DHCP),
            an IPv6 host can configure its IP addresses from these sources.
            In this case, it is not possible to control how the host uses
            DNS information and what source addresses it uses to send
            DNS queries. As a result, configurations where different
            information is provided by different mechanisms for autoconfiguration 
            may lead to problems. Therefore, the network administrator needs to 
            carefully configure different DNS options in the multiple
            mechanisms for autoconfiguration in order to minimize the impact
            of such problems <xref target="DHCPv6-SLAAC"/>. 
            </t>

            <t>
            Second, if different DNS information is provided on different 
            network interfaces, this can lead to inconsistent behavior.  
            The IETF worked on solving this problem for both DNS and 
            other information obtained from multiple interfaces 
            <xref target="RFC6418"/> <xref target="RFC6419"/> and
            standardized a DHCP&nbhy;based solution for RDNSS selection for
            multi-interfaced nodes as described in <xref target="RFC6731"/>. 
            </t>
        </section>
    </section>
</section>

<section anchor="impl-cons" title="Implementation Considerations">

    <t>The implementation considerations in this document include the
    following three: (i)&nbsp;DNS repository management,
    (ii)&nbsp;synchronization between the DNS Server List and the
    Resolver Repository, and (iii)&nbsp;synchronization between the
    DNSSL and the Resolver Repository.
    </t>

    <t><list style="hanging" hangIndent="6">
        <t hangText="Note:">
        The implementations that are updated according to this document will
        still interoperate with the existing implementations according to
        <xref target="RFC6106" />. This is because the main change in this
        document is the increase of the default Lifetime of DNS options,
        considering lossy links.
        </t>
    </list></t>

    <section anchor="dns-repos-mgmt" title="DNS Repository Management">
        <t>
        For DNS repository management, the following two data structures
        SHOULD be synchronized with the Resolver Repository: (i)&nbsp;the
        DNS Server List, which keeps the list of RDNSS addresses and
        (ii)&nbsp;the DNSSL, which keeps the list of DNS search
        domain names. Each entry in these two lists consists of a pair of an
        RDNSS address (or DNSSL domain name) and Expiration-time as follows:
        </t>
        
        <t>
        <list style="symbols"> 
          <t>
          RDNSS address for DNS Server List: IPv6 address of the RDNSS
          that is available for recursive DNS resolution service in the
          network advertising the RDNSS option.
          </t>

          <t>
          DNSSL domain name for DNSSL: DNS suffix domain name that is
          used to perform DNS query searches for short, unqualified domain names. 
          </t>

          <t>
          Expiration-time for DNS Server List or DNSSL: The time
          when this entry becomes invalid. Expiration-time is set to the value
          of the Lifetime field of the RDNSS option or DNSSL option plus the
          current time.  Whenever a new RDNSS option with the same address (or
          DNSSL option with the same domain name) is received on the same
          interface as a previous RDNSS option (or DNSSL option), this field
          is updated to have a new Expiration-time. When the current time
          becomes larger than Expiration-time, this entry is regarded as
          expired, so it should not be used any more. Note that the DNS
          information for the RDNSS and DNSSL options need not be dropped 
          if the expiry of the RA router lifetime happens. This is because
          these options have their own lifetime values.
             </t>    
        </list>
        </t>
    </section>

    <section anchor="dnsserv-resolv-sync" title="Synchronization between DNS Server List and Resolver Repository">
        <t>
        When an IPv6 host receives the information of multiple RDNSS
        addresses within a network (e.g., campus network and company network)
        through an RA message with RDNSS option(s), it stores the
        RDNSS addresses (in order) in both the DNS Server List and the
        Resolver Repository.  The processing of the RDNSS consists of
        (i)&nbsp;the processing of RDNSS option(s) included in an RA message and
        (ii)&nbsp;the handling of expired RDNSSes. The processing of
        RDNSS option(s) is as follows:
        </t>

        <t>
        <list style="symbols">
            <t>
            Step (a): Receive and parse the RDNSS option(s).  For the RDNSS
            addresses in each RDNSS option, perform Steps (b) through (d).
            </t>

            <t>
            Step (b): For each RDNSS address, check the following: If the
            RDNSS address already exists in the DNS Server List and the RDNSS
            option's Lifetime field is set to zero, delete the corresponding
            RDNSS entry from both the DNS Server List and the Resolver
            Repository in order to prevent the RDNSS address from being used
            any more for certain reasons in network management, e.g., the
            termination of the RDNSS or a renumbering scenario. That is, 
            the RDNSS can resign from its DNS service because the machine 
            running the RDNSS is out of service intentionally or unintentionally.
            Also, in the renumbering scenario, the RDNSS's IPv6 address 
            will be changed, so the previous RDNSS address should not be used
            any more. The processing of this RDNSS address is finished here.
            Otherwise, go to Step (c).
            </t>

            <t>
            Step (c): For each RDNSS address, if it already exists in the DNS
            Server List and the RDNSS option's Lifetime field is not set to
            zero, then just update the value of the Expiration-time
            field according to the procedure specified in the third bullet of
            <xref target="dns-repos-mgmt"/>.  Otherwise, go to Step (d).
            </t>

            <t>
            Step (d): For each RDNSS address, if it does not exist in the DNS
            Server List, register the RDNSS address and Lifetime with the DNS
            Server List and then insert the RDNSS address as the first one in the
            Resolver Repository.  In the case where the data structure for the
            DNS Server List is full of RDNSS entries (that is, has more RDNSSes 
            than the sufficient number discussed
            in <xref target="ipv6-host-proc"/>), delete from the
            DNS Server List the entry with the shortest Expiration-time
            (i.e., the entry that will expire first). The corresponding
            RDNSS address is also deleted from the Resolver Repository. For
            the ordering of RDNSS addresses in an RDNSS option, position the
            first RDNSS address in the RDNSS option as the first one in the
            Resolver Repository, the second RDNSS address in the option as the
            second one in the repository, and so on. This ordering allows the
            RDNSS addresses in the RDNSS option to be preferred according to
            their order in the RDNSS option for DNS name resolution. The
            processing of these RDNSS addresses is finished here.
            </t>
        </list>
        </t>

        <t>
        The handling of expired RDNSSes is as follows:
        Whenever an entry expires in the DNS Server List, the expired entry is 
        deleted from the DNS Server List, and also the RDNSS address 
        corresponding to the entry is deleted from the Resolver Repository.
        </t>
    </section>

    <section title="Synchronization between DNS Search List and Resolver Repository">
        <t>
        When an IPv6 host receives the information of multiple DNSSL domain names 
        within a network through an RA message with DNSSL option(s), it stores
        the DNSSL domain names (in order) in both the DNSSL and
        the Resolver Repository. The processing of the DNSSL consists of
        (i)&nbsp;the processing of DNSSL option(s) included in an RA message and
        (ii)&nbsp;the handling of expired DNSSLs. The processing of
        DNSSL option(s) is the same as the processing of RDNSS option(s) as
        described in <xref target="dnsserv-resolv-sync"/>.
        </t>

    </section>
</section>

<section anchor="security-considerations" title="Security Considerations">
        <t> In this section, we analyze security threats related to DNS
        options and then make recommendations to cope with such security
        threats.
        </t>

    <section title="Security Threats">
        <t>
        For the RDNSS option, an attacker could send an RA with a fraudulent
        RDNSS address, misleading IPv6 hosts into contacting an unintended DNS
        server for DNS name resolution. Also, for the DNSSL option, an
        attacker can let IPv6 hosts resolve a hostname without a DNS suffix
        into an unintended host's IP address with a fraudulent DNSSL.
        These attacks are similar to ND attacks specified in <xref
        target="RFC4861" /> that use Redirect or Neighbor Advertisement 
        messages to redirect traffic to individual addresses of malicious parties.
        </t>

        <t>
        However, the security of these RA options for DNS configuration does
        not affect ND protocol security <xref target="RFC4861" />.  This is
        because learning DNS information via the RA options cannot be worse than 
        learning bad router information via the RA options. Therefore, the
        vulnerability of ND is not worse and is a subset of the attacks 
        that any node attached to a LAN can do.
            </t>

        </section>

        <section title="Recommendations">
            <t>
        The Secure Neighbor Discovery (SEND) protocol <xref target="RFC3971" /> is 
        designed as a security mechanism for ND. In this case, ND can use SEND to 
        allow all the ND options, including the RDNSS and DNSSL options, to be 
        automatically signed with digital signatures.
        </t>
    
        <t>
        It is common for network devices such as switches to include
        mechanisms to block unauthorized ports from running a DHCPv6 server to
        provide protection from rogue DHCPv6 servers <xref target="RFC7610"/>.
        That means that an attacker on other ports cannot insert bogus DNS
        servers using DHCPv6.  The corresponding technique for network devices
        is RECOMMENDED to block rogue RA messages that include the
        RDNSS and DNSSL options from unauthorized nodes <xref
        target="RFC6104" /> <xref target="RFC6105" />.
        </t>

        <t>
         An attacker may provide a bogus DNSSL option in order
         to cause the victim to send DNS queries to a specific DNS server
         when the victim queries non-FQDNs (fully qualified domain names).  
         For this attack, the DNS resolver in IPv6 hosts can mitigate the
         vulnerability with the recommendations mentioned
         in <xref target="RFC1535" />, <xref target="RFC1536" />, and
         <xref target="RFC3646" />.
        </t>
        </section>
</section>

<section title="IANA Considerations">
    <t>
    The RDNSS option defined in this document uses the IPv6 Neighbor 
    Discovery Option type assigned by IANA as follows:  
    </t>  

    <figure>
      <artwork><![CDATA[
   Option Name                    Type
   -----------------------------------
   Recursive DNS Server Option    25
      ]]></artwork>
    </figure>

    <t>
    The DNSSL option defined in this document uses the IPv6 Neighbor 
    Discovery Option type assigned by IANA as follows:  
    </t>

    <figure>
      <artwork><![CDATA[
   Option Name                    Type
   -----------------------------------
   DNS Search List Option         31
      ]]></artwork>
    </figure>

    <t>These options are registered in the "IPv6 Neighbor Discovery Option
    Formats" registry <xref target="ICMPv6" />.</t>
</section>

</middle>

<back>
<references title="Normative References">

<?rfc include="reference.RFC.2119"?>
<?rfc include="reference.RFC.4861"?>
<?rfc include="reference.RFC.4862"?>
<?rfc include="reference.RFC.1035"?>
<?rfc include="reference.RFC.4007"?>

</references>

<references title="Informative References">

<?rfc include="reference.RFC.1034"?>
<?rfc include="reference.RFC.3315"?>
<?rfc include="reference.RFC.3736"?>
<?rfc include="reference.RFC.3646"?>
<?rfc include="reference.RFC.6106"?>
<?rfc include="reference.RFC.4339"?>
<?rfc include="reference.RFC.3971"?>
<?rfc include="reference.RFC.3118"?>
<?rfc include="reference.RFC.6104"?>
<?rfc include="reference.RFC.6105"?>
<?rfc include="reference.RFC.7610"?>
<?rfc include="reference.RFC.1535"?>
<?rfc include="reference.RFC.1536"?>

<!-- draft-ietf-v6ops-dhcpv6-slaac-problem (Expired) -->
<reference anchor='DHCPv6-SLAAC'>
<front>
<title>DHCPv6/SLAAC Interaction Problems on Address and DNS Configuration</title>
<author initials='B' surname='Liu' fullname='Bing Liu'>
    <organization />
</author>
<author initials='S' surname='Jiang' fullname='Sheng Jiang'>
    <organization />
</author>
<author initials='X' surname='Gong' fullname='Xiangyang Gong'>
    <organization />
</author>
<author initials='W' surname='Wang' fullname='Wendong Wang'>
    <organization />
</author>
<author initials='E' surname='Rey' fullname='Enno Rey'>
    <organization />
</author>
<date month='August' year='2016' />
</front>
<seriesInfo name='Work in Progress,' value='draft-ietf-v6ops-dhcpv6-slaac-problem-07' />
</reference>

<?rfc include="reference.RFC.6418"?>
<?rfc include="reference.RFC.6419"?>
<?rfc include="reference.RFC.6731"?>

<reference anchor='ICMPv6' target="http://www.iana.org/assignments/icmpv6-parameters/">
  <front>
  <title>Internet Control Message Protocol version 6 (ICMPv6) Parameters</title>
    <author fullname="IANA">
      <organization>IANA</organization>
    </author>
    <date />
  </front>
</reference>

</references>

  <section title="Changes from RFC 6106">
    <t> The following changes were made from RFC 6106 ("IPv6 Router
    Advertisement Options for DNS Configuration"):
    
    <list style="symbols"> 
        <t>
        This document allows a higher default value of the lifetime of the DNS
        RA options than RFC 6106 in order to avoid the frequent expiry of the
        options on links with a relatively high rate of packet loss; at the
        same time, this document also makes additional clarifications. The
        lifetime's lower bound of 2&nbsp;*&nbsp;MaxRtrAdvInterval was shown
        to lead to the expiry of these options on links with a relatively high
        rate of packet loss. To avoid this problem, this revision relaxes the
        lower bound and sets a higher default value of 3 * MaxRtrAdvInterval.
        </t>

        <t>
        The text regarding the generation of a Router Solicitation message
        to ensure that the RDNSS information is fresh before the expiry of the
        RDNSS option is removed in order to prevent multicast traffic on the
        link from increasing.
        </t>
  
        <t>
        The addresses for RDNSSes in the RDNSS option can be
        not only global addresses but also link-local addresses. The link-local
        addresses for RDNSSes should be registered in the Resolver Repository 
        along with the corresponding link zone indices.
        </t>

        <t>
        RFC 6106 recommended that the number of RDNSS addresses that should be
        learned and maintained through the RDNSS RA option should be limited to 
        three. This document removes that recommendation; thus, the number
        of RDNSS addresses to maintain is determined by an implementer's
        local policy.
        </t>

        <t>
        RFC 6106 recommended that the number of DNS search domains that should be
        learned and maintained through the DNSSL RA option should be limited to 
        three. This document removes that recommendation; thus, when the set
        of unique DNSSL values are not equivalent, none of them may be ignored
        for hostname lookups according to an implementer's local policy.
        </t>

        <t>
        The guidance of the specific implementation for the synchronization of
        the DNS Repository and Resolver Repository in the kernel space and
        user space is removed.
        </t>

        <t>
        The key words "SHOULD" and "RECOMMENDED" (RFC&nbsp;2119) are
        removed in the recommendation of using SEND as a security mechanism
        for ND. Instead of using these key&nbsp;words, SEND is specified
        as only a possible security mechanism for ND.
        </t>
    </list>
    </t>

  </section>

<section title="Acknowledgements" numbered="no">
    <t>
    This document has greatly benefited from inputs by Robert Hinden,
    Pekka Savola, Iljitsch van Beijnum, Brian Haberman, Tim Chown, Erik
    Nordmark, Dan Wing, Jari Arkko, Ben Campbell, Vincent Roca, Tony Cheneau,
    Fernando Gont, Jen Linkova, Ole Troan, Mark Smith, Tatuya Jinmei, Lorenzo
    Colitti, Tore Anderson, David Farmer, Bing Liu, and Tassos
    Chatzithomaoglou. The authors sincerely appreciate their contributions.
    </t>

    <t>
    This document was supported by an Institute for Information &amp;
    communications Technology Promotion (IITP) grant funded by the Korean
    government (MSIP) [10041244, Smart TV 2.0 Software Platform].
    </t>
</section>

</back>
</rfc>
