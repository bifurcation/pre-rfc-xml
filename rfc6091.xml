<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
     
<!ENTITY RFC4880 SYSTEM
"http://xml.resource.org/public/rfc/bibxml/reference.RFC.4880.xml">
<!ENTITY RFC5081 SYSTEM
"http://xml.resource.org/public/rfc/bibxml/reference.RFC.5081.xml">
<!ENTITY RFC5246 SYSTEM
"http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC5226 SYSTEM
"http://xml.resource.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC2119 SYSTEM
"http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6066 SYSTEM
"http://xml.resource.org/public/rfc/bibxml/reference.RFC.6066.xml">
<!ENTITY RFC5280 SYSTEM
"http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml">
]>
     
<?rfc rfcedstyle="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no" ?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>

<rfc obsoletes="5081" category="info" ipr="trust200902" number="6091" submissionType="IETF">
   <front>
      <title abbrev="Using OpenPGP Keys">Using OpenPGP Keys for Transport Layer Security (TLS) Authentication</title>
      <author initials="N." surname="Mavrogiannopoulos" fullname="Nikos
      Mavrogiannopoulos">
         <organization abbrev="KUL">ESAT/COSIC Katholieke Universiteit Leuven</organization>
         <address>
            <postal>
               <street>Kasteelpark Arenberg 10, bus 2446</street>
               <city>Leuven-Heverlee</city>
               <region></region>
               <code>B-3001</code>
               <country>Belgium</country>
            </postal>
            <email>nikos.mavrogiannopoulos@esat.kuleuven.be</email>
         </address>
      </author>
      <author initials="D.K." surname="Gillmor" fullname="Daniel Kahn Gillmor">
         <organization>Independent</organization>
         <address>
            <postal>
               <street>119 Herkimer St.</street>
               <city>Brooklyn</city>
               <region>NY</region>
               <code>11216-2801</code>
               <country>US</country>
            </postal>
            <email>dkg@fifthhorseman.net</email>
         </address>
      </author>
      <date month="February" year="2011"/>
      <area>Security</area>

      <abstract>
         <t>
This memo defines Transport Layer Security (TLS) extensions and
associated semantics that allow clients and servers to negotiate the use
of OpenPGP certificates for a TLS session, and specifies how to
transport OpenPGP certificates via TLS.  It also defines the registry
for non-X.509 certificate types.
         </t>
      </abstract>
   </front>

   <middle>
      <section anchor="intro" title="Introduction">
        <t>
The IETF has two sets of standards for public key certificates:
one set for the use of X.509 certificates <xref target="RFC5280"/>, and one for
OpenPGP certificates <xref target="RFC4880"/>.  At the time of this writing,
TLS <xref target="RFC5246"/> standards are defined to use X.509 certificates.
This document specifies a way to negotiate the use of OpenPGP certificates for a TLS 
session, and specifies how to transport OpenPGP certificates via TLS.  The 
proposed extensions are backward-compatible with the current TLS 
specification, so that existing client and server implementations 
that make use of X.509 certificates are not affected. 
</t>
<t>
These extensions are not backward-compatible with <xref target="RFC5081"/>, and
the major differences are summarized in <xref target="changes"/>.  Although the OpenPGP 
CertificateType value is being reused by this memo with the same number 
as that specified in <xref target="RFC5081"/> but with different semantics, we believe that this causes no interoperability issues because 
the latter was not widely deployed.
        </t>
     </section>

         <section anchor="terms" title="Terminology">

         <t>
             The term "OpenPGP key" is used in this document as in the OpenPGP specification 
             <xref target="RFC4880"/>.  We use the term "OpenPGP certificate" to refer to
             OpenPGP keys that are enabled for authentication.
         </t>
         <t>
           This document uses the same notation and terminology used in the TLS Protocol specification
           <xref target="RFC5246"/>.
 </t>
 <t>
         The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
         NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
         "OPTIONAL" in this document are to be interpreted as described in
         <xref target="RFC2119"/>.
         </t>
      </section>

         <section anchor="hsmod" title="Changes to the Handshake Message Contents">
            <t>
This section describes the changes to the TLS handshake message
contents when OpenPGP certificates are to be used for authentication. 
            </t>

      <section anchor="clihello" title="Client Hello">
         <t>
   In order to indicate the support of multiple certificate types, clients MUST include an
           extension of type "cert_type" to the extended client hello
           message.  The "cert_type" TLS extension is assigned the value of 9 from the TLS
           ExtensionType registry.  This value is used as the extension number 
           for the extensions in both the client hello message and the server hello message. 
           The hello extension mechanism is described in <xref target="RFC5246"/>.
        </t>

        <t>
   This extension carries a list of supported certificate types the client can use, sorted
           by client preference.  This extension MUST be omitted if the client only supports X.509
           certificates.  The "extension_data" field of this extension contains a
           CertificateTypeExtension structure.  Note that the
   CertificateTypeExtension structure is being used both by
   the client and the server, even though the structure is only specified once
   in this document.  Reusing a single specification for both client and server
   is common in other specifications, such as the TLS protocol
   itself <xref target="RFC5246"/>.
    </t>
    
     <figure>
      <artwork><![CDATA[
   enum { client, server } ClientOrServerExtension;

   enum { X.509(0), OpenPGP(1), (255) } CertificateType;

   struct {
      select(ClientOrServerExtension) {
         case client:
            CertificateType certificate_types<1..2^8-1>;
         case server:
            CertificateType certificate_type;
      }
   } CertificateTypeExtension;
      ]]></artwork>
        </figure>
            
     <t>
        No new cipher suites are required to use OpenPGP certificates. 
        All existing cipher suites that support a key exchange method
        compatible with the key in the certificate can be used in combination 
        with OpenPGP certificates.
            </t>
    
        </section>

        <section anchor="servhello" title="Server Hello">
        <t>
If the server receives a client hello that contains the "cert_type" extension and 
chooses a cipher suite that requires a certificate, then two outcomes are possible.  
The server MUST either select a certificate type from the certificate_types
field in the extended client hello or terminate the session with a fatal alert of type
"unsupported_certificate".
</t>
<t>
   The certificate type selected by the server is encoded in a CertificateTypeExtension structure, 
   which is included in the extended server hello message using an extension of type "cert_type". 
   Servers that only support X.509 certificates MAY omit including the "cert_type" extension in the extended server hello. 
</t>
        </section>

      <section anchor="servcert" title="Server Certificate">
        <t>
   The contents of the certificate message sent from server to client and vice versa are 
   determined by the negotiated certificate type and the selected cipher suite's key exchange algorithm. 
</t>
<t>
   If the OpenPGP certificate type is negotiated, then it is required to present an OpenPGP certificate in 
   the certificate message.  The certificate must contain a public key that matches the selected key 
   exchange algorithm, as shown below.
</t>

    <figure>
       <artwork>
   Key Exchange Algorithm    OpenPGP Certificate Type

   RSA                       RSA public key that can be used for
                             encryption.

   DHE_DSS                   DSA public key that can be used for
                             authentication.

   DHE_RSA                   RSA public key that can be used for
                             authentication.
       </artwork>
    </figure>

         <t>
   An OpenPGP certificate appearing in the certificate message is sent using 
           the binary OpenPGP format.  The certificate MUST contain all the elements required by
           Section 11.1 of <xref target="RFC4880"/>.
         </t>
         <t>
         OpenPGP certificates to be transferred are placed in the
         Certificate structure and tagged with the OpenPGPCertDescriptorType
         "subkey_cert".  Since those certificates might contain several subkeys,
         the subkey ID to be used for this session is explicitly
         specified in the OpenPGPKeyID field.
         The key ID must be specified even if the certificate has only a primary key.
         The peer, upon receiving this type, has to either use the specified subkey
         or terminate the session with a fatal alert of "unsupported_certificate". 
         </t>
         <t>
   The option is also available to send an OpenPGP fingerprint, instead of sending the
           entire certificate, by using the "subkey_cert_fingerprint" tag.
   This tag uses the OpenPGPSubKeyFingerprint structure
   and requires the primary key fingerprint to be specified, as well
   as the subkey ID to be used for this session.
   The peer shall respond with a "certificate_unobtainable" fatal alert if the certificate
           with the given fingerprint cannot be found.  The "certificate_unobtainable" fatal alert
           is defined in Section 5 of <xref target="RFC6066"/>.
         </t>
         <t>
           Implementations of this protocol MUST ensure that the sizes
           of key IDs and fingerprints in the
           OpenPGPSubKeyCert and OpenPGPSubKeyFingerprint structures
           comply with <xref target="RFC4880"/>.
           Moreover, it is RECOMMENDED that the keys to be used with this
           protocol have the authentication flag (0x20) set.
         </t>
         <t>
           The process of fingerprint generation is described in Section 12.2 of
           <xref target="RFC4880"/>.
         </t>
         <t>
          The enumerated types "cert_fingerprint" and "cert" of OpenPGPCertDescriptorType
          that were defined in <xref target="RFC5081"/> are not
          used and are marked as obsolete by this document.  The
          "empty_cert" type has replaced "cert" and is a
          backward-compatible way to specify an empty certificate;
          "cert_fingerprint" MUST NOT be used with this updated
          specification, and hence that old alternative has been removed
          from the Certificate struct description.
         </t>

    <figure>
       <artwork><![CDATA[
   enum {
        empty_cert(1), 
        subkey_cert(2), 
        subkey_cert_fingerprint(3), 
        (255)
   } OpenPGPCertDescriptorType;

   uint24 OpenPGPEmptyCert = 0;

   struct {
       opaque OpenPGPKeyID<8..255>;
       opaque OpenPGPCert<0..2^24-1>;
   } OpenPGPSubKeyCert;

   struct {
       opaque OpenPGPKeyID<8..255>;
       opaque OpenPGPCertFingerprint<20..255>;
   } OpenPGPSubKeyFingerprint;

   struct {
        OpenPGPCertDescriptorType descriptorType;
        select (descriptorType) {
             case empty_cert: OpenPGPEmptyCert;
             case subkey_cert: OpenPGPSubKeyCert;
             case subkey_cert_fingerprint: 
                 OpenPGPSubKeyCertFingerprint;
        }
   } Certificate;
       ]]></artwork>
            </figure>

            </section>

            <section anchor="certreq" title="Certificate Request">
        <t>
   The semantics of this message remain the same as in the TLS specification. 
           However, if this message is sent, and the negotiated
           certificate type is OpenPGP, the "certificate_authorities" list
           MUST be empty.
         </t>
</section>

        <section anchor="clicert" title="Client Certificate">
        <t>
     This message is only sent in response to the certificate request message.
   The client certificate message is sent using the same formatting as
   the server certificate message, and it is also required to present a certificate that
   matches the negotiated certificate type.  If OpenPGP certificates have been selected and no certificate is
   available from the client, then a certificate structure
   of type "empty_cert" that contains an OpenPGPEmptyCert value MUST be sent.
The server SHOULD respond with a "handshake_failure" fatal alert if client authentication is required.
</t>
</section>

<section anchor="resthsk" title="Other Handshake Messages">
<t>
   All the other handshake messages are identical to the TLS specification.
</t>
</section>
</section>

      <section anchor="security" title="Security Considerations">
          <t>
        All security considerations discussed in <xref target="RFC5246"/>, 
        <xref target="RFC6066"/>, and <xref target="RFC4880"/> apply to this document.
        Considerations about the use of the web of trust or identity
        and certificate verification procedures are outside the scope of
        this document.  These are considered issues to be handled by the application layer protocols.
        </t>

        <t>
        The protocol for certificate type negotiation is
        identical in operation to cipher suite negotiation as described in
        the TLS specification <xref target="RFC5246"/>,
        with the addition of default values when the extension is 
        omitted.  Since those omissions have a unique meaning and the same 
        protection is applied to the values as with cipher suites, it is 
        believed that the security properties of this negotiation are the same 
        as with cipher suite negotiation.
          </t>
          <t>
        When using OpenPGP fingerprints instead of the full certificates,
        the discussion in Section 5 of <xref target="RFC6066"/> for 
        "Client Certificate URLs" applies, especially when external servers are
        used to retrieve keys.  
However, a major difference is that although the "client_certificate_url"
        extension allows identifying certificates without including the certificate hashes, this
        is not possible in the protocol proposed here. 
        In this protocol, the certificates, when not sent, are always identified by their fingerprint, which 
        serves as a cryptographic hash of the certificate (see Section 12.2 of <xref target="RFC4880"/>).
         </t>

         <t>
        The information that is available to participating parties and 
        eavesdroppers (when confidentiality is not available through a previous 
        handshake) is the number and the 
        types of certificates they hold, plus the contents of the certificates.
        </t>
      </section>

      <section anchor="IANA" title="IANA Considerations">
  <t>
        This document uses a registry and the "cert_type" extension originally defined in <xref
  target="RFC5081"/>.  Existing IANA references have been updated to
        point to this document.
          </t>

      <t>
        In addition, the "TLS Certificate Types" registry established
        by <xref target="RFC5081"/> has been updated in the following ways:
      <list style="numbers">
        <t>Values 0 (X.509) and 1 (OpenPGP) are defined in this document.</t>
        <t>Values from 2 through 223 decimal inclusive are assigned
            via "RFC Required" <xref target="RFC5226"/>.</t>
        <t>Values from 224 decimal through 255 decimal
            inclusive are reserved for Private Use <xref target="RFC5226"/>.</t>
      </list>
      </t>
      </section>

      <section title="Acknowledgements">
 <t>The authors wish to thank Alfred Hoenes and Ted Hardie for their suggestions on improving this document.</t>
      </section>

   </middle>

   <back>
  <references title="Normative References">

   &RFC2119;
   &RFC4880;
   &RFC5226;
   &RFC5246;
   &RFC6066;
  </references>

  <references title="Informative References">

   &RFC5081;
   &RFC5280;
  </references>

  <section anchor="changes" title="Changes from RFC 5081">

  <t>This document incorporates a major change in the "Server
  Certificate" and "Client Certificate" TLS messages that will make
  implementations following this protocol incompatible with those
  following <xref target="RFC5081"/>.  This change
  requires the subkey IDs used for TLS authentication to be marked explicitly
  in the handshake procedure.  This was decided in order to place no limitation
  on the OpenPGP certificates' contents that can be used with this protocol.</t>

  <t><xref target="RFC5081"/> required that an OpenPGP key or subkey
   be marked with the authentication flag; thus, authentication
   would have failed if
   this flag was not set or if this flag was set in more than one
   subkey.  The protocol in this memo has no such limitation.</t>

  </section>

  </back>
</rfc>
