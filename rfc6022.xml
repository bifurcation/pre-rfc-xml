<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd"[]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="no" ?>
<?rfc rfcedstyle="yes" ?>
<?rfc subcompact="no" ?>

<rfc number="6022" category="std" ipr="pre5378Trust200902" submissionType="IETF" xml:lang="en" obsoletes="" updates="">

  <front>
    <title>YANG Module for NETCONF Monitoring</title>
    <author initials="M." surname="Scott" fullname="Mark Scott">
      <organization>Ericsson</organization>
      <address>
        <postal>
          <street>3500 Carling Ave</street>
          <city>Nepean</city>
          <region>Ontario</region>
          <code>K2H 8E9</code>
          <country>Canada</country>
        </postal>
        <email>mark.scott@ericsson.com</email>
      </address>
    </author>
    <author initials="M." surname="Bjorklund" fullname="Martin Bjorklund">
      <organization>Tail-f Systems</organization>
      <address>
        <postal>
          <street>Klara Norra Kyrkogata 31</street>
          <city>SE-111 22 Stockholm</city>
          <region></region>
          <code></code>
          <country>Sweden</country>
        </postal>
        <email>mbj@tail-f.com</email>
      </address>
    </author>
    <date month="September" year="2010" />
    <area>Operations and Management</area>
    <keyword>XML</keyword>
    <keyword>NETCONF</keyword>
    <keyword>YANG</keyword>
    <keyword>monitoring</keyword>

    <abstract>
 <t>This document defines a Network Configuration Protocol (NETCONF) data model to be used to
    monitor the NETCONF protocol.  The monitoring data model
    includes information about NETCONF datastores, sessions,
    locks, and statistics.  This data facilitates the management
    of a NETCONF server.

    This document also defines methods for NETCONF clients to
    discover data models supported by a NETCONF server and defines
    a new NETCONF &lt;get-schema&gt; operation to retrieve them.
            </t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction" toc="default">
      <t>
        This document defines a YANG <xref target="RFC6020" pageno="false" format="default" /> model to be used to monitor the NETCONF protocol.  It provides
        information about NETCONF sessions and supported schema as defined in <xref target="RFC4741" pageno="false" format="default" />.
        </t>
      <t>
        Considerations such as different schema formats, feature optionality,
        and access controls can all impact the applicability and level of
        detail the NETCONF server sends to a client during session setup.

        The methods defined in this document address the need for further means
        to query and retrieve schema and NETCONF state information from a 
        NETCONF server.  These are provided to complement existing base NETCONF
        capabilities and operations and in no way affect existing behaviour.
        </t>
        <t>A new &lt;get-schema&gt; operation is also defined to support explicit schema
        retrieval via NETCONF.</t>
      <section title="Definition of Terms" toc="default">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
         "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
         "OPTIONAL" in this document are to be interpreted as described in BCP
         14 <xref target="RFC2119" pageno="false" format="default" />.
        </t>
      </section>
    </section>
    <section title="Data Model to Monitor NETCONF" toc="default">
     <t>The NETCONF monitoring data model defined in this document provides
        operational information on the NETCONF server.  This includes
        details specific to the NETCONF protocol (e.g., protocol-specific
        counters such as 'in-sessions') as well as data related to schema
        retrieval (e.g., schema list).
     </t>
     <t>
        A server that implements the data model defined in this
        document ("urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring") 
        MUST advertise the capability URI as described in <xref target="RFC6020"/>. 

     </t>
     <t>
	This section presents an overview of the monitoring data
	model.  For detailed descriptions, refer to the normative YANG
	module provided in this document (see <xref target="dm"/>).
     </t>

      <section title="The /netconf-state Subtree" toc="default">
        <t>
	  The netconf-state container is the root of the monitoring
	  data model.
	  <figure title="" align="left" alt="" width="" height="">
            <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">   
netconf-state
    /capabilities
    /datastores
    /schemas
    /sessions
    /statistics
	    </artwork>
	  </figure>
	</t>
	<t>
	    <list style="hanging">
	      <t hangText="capabilities ">
		<vspace blankLines="0"/>
		List of NETCONF capabilities supported by the server.
	      </t>  
	      <t hangText="datastores">
		<vspace blankLines="0"/>
		List of NETCONF configuration datastores (e.g.,
		running, startup, candidate) supported on this device
		and related information.
	      </t>  
	      <t hangText="schemas ">
		<vspace blankLines="0"/>
		List of schemas supported on the server.  Includes all
		the information required to identify the schemas and
		to support their retrieval.
	      </t>
	      <t hangText="sessions ">
		<vspace blankLines="0"/>
		List of all active NETCONF sessions on the device.
		Includes per-session counters for all NETCONF
		sessions.
	      </t>
	      <t hangText="statistics">
		<vspace blankLines="0"/>
		Includes global counters for the NETCONF server.
	      </t>
	    </list>
        </t>
        <section title="The /netconf-state/capabilities Subtree" toc="default">
          <t>
  The /netconf-state/capabilities subtree contains the capabilities supported by the NETCONF server. 
  The list MUST include all capabilities exchanged during
  session setup still applicable at the time of the request.
  </t>
        </section>
        <section title="The /netconf-state/datastores Subtree" toc="default">
          <t>
	    The /netconf-state/datastores subtree contains the list of 
	    available datastores for the NETCONF server and includes
	    information on their lock state.
          <figure title="" align="left" alt="" width="" height="">
  <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
datastore 
    /name
    /locks
  </artwork>
	  </figure>
	  </t>
	  <t>
	    <list style="hanging">
	      <t hangText="name (leaf, netconf-datastore-type)">
		<vspace blankLines="0"/>
		Enumeration of supported datastores; candidate,
		running, startup.
	      </t>
	      <t hangText="locks (grouping, lock-info)">
		<vspace blankLines="0"/>
		List of locks for the datastore.  Information is
		provided for both global and partial locks <xref
		target="RFC5717"/>.  For partial locks, the list of
		locked nodes and the select expressions originally
		used to request the lock are returned.
	      </t>
	    </list>
	  </t>
        </section>
        <section title="The /netconf-state/schemas Subtree" toc="default">
          <t>
	    The list of supported schema for the NETCONF server.
	    <figure title="" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
schema
    /identifier   (key)
    /version      (key)
    /format       (key)
    /namespace
    /location
</artwork></figure>
	  </t>
	  <t>
	    The elements identifier, version, and format are used as a
	    key in the schema list.  These are used in the
	    &lt;get-schema&gt; operation.
	  </t>
	  <t>
	    <list style="hanging">
	      <t hangText="identifier (string)">
		<vspace blankLines="0"/>
		Identifier for the schema list entry.  The identifier is
		used in the &lt;get-schema&gt; operation and may be
		used for other means such as file retrieval.
	      </t>
	      <t hangText="version (string)">
		<vspace blankLines="0"/>
		Version of the schema supported.  Multiple versions
		MAY be supported simultaneously by a NETCONF server.
		Each version MUST be reported individually in the
		schema list, i.e., with same identifier, possibly
		different location, but different version.
		<vspace blankLines="1"/>
		For YANG data models, version is the value of the most
		recent YANG 'revision' statement in the module or
		submodule, or the empty string if no 'revision'
		statement is present.
	      </t>
	      <t hangText="format (identifyref, schema-format)">
		<vspace blankLines="0"/>
		The data modeling language the schema is written in.
		The data modeling language is represented as a YANG
		identity.  This document defines the identities "xsd",
		"yang", "yin", "rng", and "rnc" (see <xref target="dm"/>).
	      </t>
	      <t hangText="namespace (inet:uri)">
		<vspace blankLines="0"/>
		The Extensible Markup Language (XML) namespace <xref
		target="XML-NAMES"/> defined by the schema.
	      </t>
	      <t hangText="location (union: enum, inet:uri)">
		<vspace blankLines="0"/>
		One or more locations from which this specific schema
		can be retrieved.  The list SHOULD contain at least
		one entry per schema.
	      </t>
	    </list>
	  </t>
	</section>
        <section title="The /netconf-state/sessions Subtree" toc="default">
          <t>
	    Includes session-specific data for NETCONF management
	    sessions.  The session list MUST include all currently
	    active NETCONF sessions.
	  <figure title="" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
session
    /session-id (key)
    /transport
    /username
    /source-host
    /login-time
    /in-rpcs
    /in-bad-rpcs
    /out-rpc-errors
    /out-notifications
</artwork>
	    </figure>
	  </t>
	    <t>
	      <list style="hanging">
	      <t hangText="session-id (uint32, 1..max)">
		<vspace blankLines="0"/>
		Unique identifier for the session.
		This value is the NETCONF session identifier, as defined 
		in <xref target="RFC4741"/>.
	      </t>
	      <t hangText="transport (identityref, transport)">
		<vspace blankLines="0"/>
		Identifies the transport for each session.  The transport
		is represented as a YANG identity.  This document
		defines the identities "netconf-ssh",
		"netconf-soap-over-beep", "netconf-soap-over-https",
		"netconf-beep", and "netconf-tls" (see <xref
		target="dm"/>).
	      </t>
	      <t hangText="username (string)">
		<vspace blankLines="0"/>
		The username is the client identity that was
		authenticated by the NETCONF transport protocol. The
		algorithm used to derive the username is NETCONF
		transport protocol specific and in addition specific
		to the authentication mechanism used by the NETCONF
		transport protocol.
	      </t>
	      <t hangText="source-host (inet:host)">
		<vspace blankLines="0"/>
		Host identifier (IP address or name) of the NETCONF client.
	      </t>
	      <t hangText="login-time (yang:date-and-time)">
		<vspace blankLines="0"/>
		Time at the server at which the session was established.
	      </t>
	      <t hangText="in-rpcs (yang:zero-based-counter32)">
		<vspace blankLines="0"/>
		Number of correct &lt;rpc&gt; messages received.
              </t>
	      <t hangText="in-bad-rpcs (yang:zero-based-counter32)">
		<vspace blankLines="0"/>
		Number of messages received when an &lt;rpc&gt; message
		was expected, that were not correct &lt;rpc&gt;
		messages.  This includes XML parse errors and errors
		on the rpc layer.
	      </t>
	      <t hangText="out-rpc-errors (yang:zero-based-counter32)">
		<vspace blankLines="0"/>
		Number of &lt;rpc-reply&gt; messages sent that
		contained an &lt;rpc-error&gt; element.
	      </t>
	      <t hangText="out-notifications (yang:zero-based-counter32)">
		<vspace blankLines="0"/>
		Number of &lt;notification&gt; messages sent.
	      </t>
	    </list>
	    </t>
	</section>
        <section title="The /netconf-state/statistics Subtree" toc="default">
          <t>
	    Statistical data pertaining to the NETCONF server.
            <figure title="" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
statistics
    /netconf-start-time
    /in-bad-hellos
    /in-sessions
    /dropped-sessions
    /in-rpcs
    /in-bad-rpcs
    /out-rpc-errors
    /out-notifications
</artwork></figure>
	  </t>
	  <t>
	    <list style="hanging">
	      <t hangText="statistics:">
		<vspace blankLines="0"/>
		Contains management-session-related performance data
		for the NETCONF server.
	      </t>  
	      <t hangText="netconf-start-time (yang:date-and-time)">
		<vspace blankLines="0"/>
		Date and time at which the management subsystem was
		started.
	      </t>
	      <t hangText="in-bad-hellos (yang:zero-based-counter32)">
		<vspace blankLines="0"/>
		Number of sessions silently dropped because an invalid
		&lt;hello&gt; message was received.
	      </t>                
	      <t hangText="in-sessions (yang:zero-based-counter32)">
		<vspace blankLines="0"/>
		Number of sessions started.
	      </t>
	      <t hangText="dropped-sessions (yang:zero-based-counter32)">
		<vspace blankLines="0"/>
		Number of sessions that were abnormally terminated,
		e.g., due to idle timeout or transport close.
	      </t>
	      <t hangText="in-rpcs (yang:zero-based-counter32)">
		<vspace blankLines="0"/>
		Number of correct &lt;rpc&gt; messages received.
	      </t>                
	      <t hangText="in-bad-rpcs (yang:zero-based-counter32)">
		<vspace blankLines="0"/>
		Number of messages received when an &lt;rpc&gt; message
		was expected, which were not correct &lt;rpc&gt;
		messages.
	      </t>
	      <t hangText="out-rpc-errors (yang:zero-based-counter32)">
		<vspace blankLines="0"/>
		Number of &lt;rpc-reply&gt; messages sent that
		contained an &lt;rpc-error&gt; element.
	      </t> 
	      <t hangText="out-notifications (yang:zero-based-counter32)">
		<vspace blankLines="0"/>
		Number of &lt;notification&gt; messages sent.
	      </t>
	    </list>
	  </t>
	</section>
      </section>
    </section>
    <section title="Schema Specific Operations" toc="default">
      <section title="The &lt;get-schema&gt; Operation" toc="default">
	<t>
	  <list style="hanging">
	    <t hangText="Description:">
	      <vspace blankLines="1"/>
	      This operation is used to retrieve a schema from the
	      NETCONF server.
	    </t>
	    <t hangText="Parameters:">
	      <vspace blankLines="1"/>
              <list style="hanging">
		<t hangText="identifier (string):">
		  <vspace blankLines="0"/>
		  Identifier for the schema list entry.
		  <vspace blankLines="0"/>
		  Mandatory parameter.
		</t>
		<t hangText="version (string):">
		  <vspace blankLines="0"/>
		  Version of the schema requested.
		  <vspace blankLines="0"/>
		  Optional parameter.
		</t>
		<t hangText="format (identityref, schema-format):">
		  <vspace blankLines="0"/>
		  The data modeling language of the schema.
		  <vspace blankLines="0"/>
		  Default value is 'yang' when not specified.
		  <vspace blankLines="0"/>
		  Optional parameter.
		</t>
	      </list>
	    </t>
	    <t hangText="Positive Response:">
	      <vspace blankLines="1"/>
	      The NETCONF server returns the requested schema.
	    </t>
	    <t hangText="Negative Response:">
	      <vspace blankLines="1"/>
	      If the requested schema does not exist, the
	      &lt;error&#8209;tag&gt; is 'invalid&#8209;value'.
	      <vspace blankLines="1"/>
	      If more than one schema matches the requested
	      parameters, the &lt;error&#8209;tag&gt; is
	      'operation&#8209;failed', and
	      &lt;error&#8209;app&#8209;tag&gt; is
	      'data&#8209;not&#8209;unique'.
	    </t>
	  </list>
	</t>
      </section>
    </section>
    
    <section title="Examples" toc="default">
<section title="Retrieving Schema List via &lt;get&gt; Operation" toc="default">
<t>
A NETCONF client retrieves the list of supported schema from
a NETCONF server by retrieving the /netconf-state/schemas
subtree via a &lt;get&gt; operation.
</t>
<t>
Available schema for the requesting session are returned in the
reply containing the &lt;identifier&gt;, &lt;version&gt;, &lt;format&gt;,
and &lt;location&gt; elements.
</t>
<t>     
The response data can be used to determine the available schema and
their versions.  The schema itself (i.e., schema content) is not
returned in the response.  The optional &lt;location&gt; element
contains a URI, which can be used to retrieve the schema by another
protocol such as ftp <xref target="RFC0959"/> or http(s) <xref
target="RFC2616"/> <xref target="RFC2818"/>, or the special value
'NETCONF', which means that the schema can be retrieved from the
device via the &lt;get-schema&gt; operation.
</t>
<t>
Example:
</t>
        <figure title="" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
<![CDATA[
<rpc message-id="101"
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <get>
    <filter type="subtree">
      <netconf-state xmlns=
      "urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring">
        <schemas/>
      </netconf-state>
    </filter>
  </get>
</rpc>
]]>

The NETCONF server returns a list of schema available for
retrieval.

<![CDATA[
<rpc-reply message-id="101"
           xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <data>
    <netconf-state 
    xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring">
      <schemas>
        <schema>
          <identifier>foo</identifier>
          <version>1.0</version>
          <format>xsd</format>  
          <namespace>http://example.com/foo</namespace>
          <location>ftp://ftp.example.com/schemas/foo_1.0.xsd</location>
          <location>http://www.example.com/schema/foo_1.0.xsd</location>
          <location>NETCONF</location>
        </schema>
        <schema>
          <identifier>foo</identifier>
          <version>1.1</version>
          <format>xsd</format>  
          <namespace>http://example.com/foo</namespace>
          <location>ftp://ftp.example.com/schemas/foo_1.1.xsd</location>
          <location>http://www.example.com/schema/foo_1.1.xsd</location>
          <location>NETCONF</location>
        </schema>
        <schema>
          <identifier>bar</identifier>
          <version>2008-06-01</version>
          <format>yang</format>
          <namespace>http://example.com/bar</namespace>
          <location>
            http://example.com/schema/bar@2008-06-01.yang
          </location>
          <location>NETCONF</location>
        </schema>
        <schema>
          <identifier>bar-types</identifier>
          <version>2008-06-01</version>
          <format>yang</format>
          <namespace>http://example.com/bar</namespace>
          <location>
            http://example.com/schema/bar-types@2008-06-01.yang
          </location>
          <location>NETCONF</location>
        </schema>
      </schemas>
    </netconf-state>
  </data>
</rpc-reply>]]>
</artwork>
        </figure>
      </section>
      <section title="Retrieving Schema Instances" toc="default">
        <t>
    Given the reply in the previous section, the following examples
    illustrate the retrieval of 'foo', 'bar', and 'bar-types'
    schema at multiple locations, with multiple formats, and in
    multiple locations.
  </t>
        <figure title="" align="left" alt="" width="" height="">
          <artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height=""> 
  1.  foo,  version 1.0 in xsd format:

    a.  Via FTP using location 
        ftp://ftp.example.com/schemas/foo_1.0.xsd
    
    b.  Via HTTP using location
        http://www.example.com/schema/foo_1.0.xsd
      
    c.  Via &lt;get-schema&gt; using identifier, version, and
        format parameters.

    <![CDATA[
    <rpc message-id="101"
      xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
      <get-schema 
      xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring">
        <identifier>foo</identifier>
        <version>1.0</version>
        <format>xsd</format>
      </get-schema>
    </rpc>

    <rpc-reply message-id="101"
      xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
      <data 
      xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring">
        <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
          <!-- foo 1.0 xsd schema contents here -->
        </xs:schema>
      </data>
    </rpc-reply>]]>

  2. bar, version 2008-06-01 in YANG format:

    a.  Via HTTP using location
        http://example.com/schema/bar@2008-06-01.yang
           
    b.  Via &lt;get-schema&gt; using identifer and version
        parameters:
<![CDATA[
      <rpc message-id="102"
        xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
        <get-schema 
        xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring">
          <identifer>bar</identifer>
          <version>2008-06-01</version>
        </get-schema>
      </rpc>

      <rpc-reply message-id="102"
        xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
        <data 
        xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring">
          module bar {
            //default format (yang) returned
            //bar version 2008-06-01 yang module 
            //contents here ...
          }
        </data>
      </rpc-reply>
      ]]>

  3. bar-types, version 2008-06-01 in default YANG format:

    a. Via &lt;get-schema&gt; using identifer parameter:
<![CDATA[
    <rpc message-id="103"
      xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
      <get-schema 
      xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring">
        <identifer>bar-types</identifer>
      </get-schema>
    </rpc>

    <rpc-reply message-id="103"
      xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
      <data 
      xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring">
        module bar-types {
          //default format (yang) returned
          //latest revision returned
          //is version 2008-06-01 yang module 
          //contents here ...
        }
      </data>
    </rpc-reply>

]]></artwork>
        </figure>
      </section>
    </section>
      <section title="NETCONF Monitoring Data Model" toc="default" anchor="dm">
        <t>
The data model described in this memo is defined in the 
following YANG module.
	</t>
<t>
This YANG module imports typedefs from <xref target="RFC6021"/> and
references <xref target="RFC4741"/>, <xref target="RFC4742"/>, <xref
target="RFC4743"/>, <xref target="RFC4744"/>, <xref
target="RFC5539"/>, <xref target="xmlschema-1"/>, <xref
target="RFC6020"/>, <xref target="ISO/IEC19757-2:2008"/>, and <xref
target="RFC5717"/>.
</t>
      <figure title="" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
<![CDATA[
<CODE BEGINS> file "ietf-netconf-monitoring@2010-09-23.yang"

module ietf-netconf-monitoring {

  namespace "urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring";
  prefix "ncm";

  import ietf-yang-types { prefix yang; }
  import ietf-inet-types { prefix inet; }

  organization
    "IETF NETCONF (Network Configuration) Working Group";

  contact
    "WG Web:   <http://tools.ietf.org/wg/netconf/>
     WG List:  <mailto:netconf@ietf.org>

     WG Chair: Mehmet Ersue
               <mailto:mehmet.ersue@nsn.com>

     WG Chair: Bert Wijnen
               <mailto:bertietf@bwijnen.net>

     Editor:   Mark Scott
               <mailto:mark.scott@ericsson.com>

     Editor:   Martin Bjorklund
               <mailto:mbj@tail-f.com>";

  description
    "NETCONF Monitoring Module.
     All elements in this module are read-only.

     Copyright (c) 2010 IETF Trust and the persons identified as 
     authors of the code. All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD 
     License set forth in Section 4.c of the IETF Trust's 
     Legal Provisions Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 6022; see
     the RFC itself for full legal notices.";

  revision 2010-09-23 {
    description
      "Initial revision.";
    reference
      "RFC 6022: YANG Module for NETCONF Monitoring";
  }

  typedef netconf-datastore-type {
    type enumeration {
      enum running;
      enum candidate;
      enum startup;
    }
    description
      "Enumeration of possible NETCONF datastore types.";
    reference
      "RFC 4741: NETCONF Configuration Protocol";
  }

  identity transport {
    description
      "Base identity for NETCONF transport types.";
  }

  identity netconf-ssh {
    base transport;
    description
      "NETCONF over Secure Shell (SSH).";
    reference
      "RFC 4742: Using the NETCONF Configuration Protocol
                 over Secure SHell (SSH)";
  }

  identity netconf-soap-over-beep {
    base transport;
    description
      "NETCONF over Simple Object Access Protocol (SOAP) over
       Blocks Extensible Exchange Protocol (BEEP).";
    reference
      "RFC 4743: Using NETCONF over the Simple Object
                 Access Protocol (SOAP)";
  }

  identity netconf-soap-over-https {
    base transport;
    description
      "NETCONF over Simple Object Access Protocol (SOAP)
      over Hypertext Transfer Protocol Secure (HTTPS).";
    reference
      "RFC 4743: Using NETCONF over the Simple Object
                 Access Protocol (SOAP)";
  }

  identity netconf-beep {
    base transport;
    description
      "NETCONF over Blocks Extensible Exchange Protocol (BEEP).";
    reference
      "RFC 4744: Using the NETCONF Protocol over the
                 Blocks Extensible Exchange Protocol (BEEP)";
  }

  identity netconf-tls {
    base transport;
    description
      "NETCONF over Transport Layer Security (TLS).";
    reference
      "RFC 5539: NETCONF over Transport Layer Security (TLS)";
  }

  identity schema-format {
    description
      "Base identity for data model schema languages.";
  }

  identity xsd {
    base schema-format;
    description
      "W3C XML Schema Definition.";
    reference
      "W3C REC REC-xmlschema-1-20041028:
         XML Schema Part 1: Structures";
  }

  identity yang {
    base schema-format;
    description
      "The YANG data modeling language for NETCONF.";
    reference
      "RFC 6020:  YANG - A Data Modeling Language for the 
                  Network Configuration Protocol (NETCONF)";
  }

  identity yin {
    base schema-format;
    description
      "The YIN syntax for YANG.";
    reference
      "RFC 6020:  YANG - A Data Modeling Language for the 
                  Network Configuration Protocol (NETCONF)";
  }

  identity rng {
    base schema-format;
    description
      "Regular Language for XML Next Generation (RELAX NG).";
    reference
      "ISO/IEC 19757-2:2008: RELAX NG";
  }

  identity rnc {
    base schema-format;
    description
      "Relax NG Compact Syntax";
    reference
      "ISO/IEC 19757-2:2008: RELAX NG";
  }

  grouping common-counters {
    description
      "Counters that exist both per session, and also globally,
       accumulated from all sessions.";

    leaf in-rpcs {
      type yang:zero-based-counter32;
      description
        "Number of correct <rpc> messages received.";
    }
    leaf in-bad-rpcs {
      type yang:zero-based-counter32;
      description
        "Number of messages received when an <rpc> message was expected,
         that were not correct <rpc> messages.  This includes XML parse
         errors and errors on the rpc layer.";
    }
    leaf out-rpc-errors {
      type yang:zero-based-counter32;
      description
        "Number of <rpc-reply> messages sent that contained an
         <rpc-error> element.";
    }
    leaf out-notifications {
      type yang:zero-based-counter32;
      description
        "Number of <notification> messages sent.";
    }
  }

  container netconf-state {
    config false;
    description
      "The netconf-state container is the root of the monitoring
       data model.";

    container capabilities {
      description
        "Contains the list of NETCONF capabilities supported by the
         server.";

      leaf-list capability {
        type inet:uri;
        description
          "List of NETCONF capabilities supported by the server.";
      }
    }

    container datastores {
      description
        "Contains the list of NETCONF configuration datastores.";

      list datastore {
        key name;
        description
          "List of NETCONF configuration datastores supported by
           the NETCONF server and related information.";

        leaf name {
          type netconf-datastore-type;
          description
            "Name of the datastore associated with this list entry.";
        }
        container locks {
          presence
            "This container is present only if the datastore
             is locked.";
          description
            "The NETCONF <lock> and <partial-lock> operations allow
             a client to lock specific resources in a datastore.  The
             NETCONF server will prevent changes to the locked
             resources by all sessions except the one that acquired
             the lock(s).

             Monitoring information is provided for each datastore
             entry including details such as the session that acquired
             the lock, the type of lock (global or partial) and the
             list of locked resources.  Multiple locks per datastore
             are supported.";

          grouping lock-info {
            description
              "Lock related parameters, common to both global and
               partial locks.";

            leaf locked-by-session {
              type uint32;
              mandatory true;
              description
                "The session ID of the session that has locked
                 this resource.  Both a global lock and a partial
                 lock MUST contain the NETCONF session-id.

                 If the lock is held by a session that is not managed
                 by the NETCONF server (e.g., a CLI session), a session
                 id of 0 (zero) is reported.";
              reference
                "RFC 4741: NETCONF Configuration Protocol";
            }
            leaf locked-time {
              type yang:date-and-time;
              mandatory true;
              description
                "The date and time of when the resource was
                 locked.";
            }
          }

          choice lock-type {
            description
              "Indicates if a global lock or a set of partial locks
               are set.";

            container global-lock {
              description
                "Present if the global lock is set.";
              uses lock-info;
            }

            list partial-lock {
              key lock-id;
              description
                "List of partial locks.";
              reference
                "RFC 5717: Partial Lock Remote Procedure Call (RPC) for
                           NETCONF";

              leaf lock-id {
                type uint32;
                description
                  "This is the lock id returned in the <partial-lock>
                   response.";
              }
              uses lock-info;
              leaf-list select {
                type yang:xpath1.0;
                min-elements 1;
                description
                  "The xpath expression that was used to request
                   the lock.  The select expression indicates the
                   original intended scope of the lock.";
              }
              leaf-list locked-node {
                type instance-identifier;
                description
                  "The list of instance-identifiers (i.e., the
                   locked nodes).

                   The scope of the partial lock is defined by the list
                   of locked nodes.";
              }
            }
          }
        }
      }
    }

    container schemas {
      description
        "Contains the list of data model schemas supported by the
         server.";

      list schema {
        key "identifier version format";

        description
          "List of data model schemas supported by the server.";

        leaf identifier {
          type string;
          description
            "Identifier to uniquely reference the schema.  The
             identifier is used in the <get-schema> operation and may
             be used for other purposes such as file retrieval.

             For modeling languages that support or require a data
             model name (e.g., YANG module name) the identifier MUST
             match that name.  For YANG data models, the identifier is
             the name of the module or submodule.  In other cases, an
             identifier such as a filename MAY be used instead.";
        }
        leaf version {
          type string;
          description
            "Version of the schema supported.  Multiple versions MAY be
             supported simultaneously by a NETCONF server.  Each
             version MUST be reported individually in the schema list,
             i.e., with same identifier, possibly different location,
             but different version.

             For YANG data models, version is the value of the most
             recent YANG 'revision' statement in the module or
             submodule, or the empty string if no 'revision' statement
             is present.";
        }
        leaf format {
          type identityref {
            base schema-format;
          }
          description
            "The data modeling language the schema is written
             in (currently xsd, yang, yin, rng, or rnc).

             For YANG data models, 'yang' format MUST be supported and
             'yin' format MAY also be provided.";
        }
        leaf namespace {
          type inet:uri;
          mandatory true;
          description
            "The XML namespace defined by the data model.

             For YANG data models, this is the module's namespace.
             If the list entry describes a submodule, this field
             contains the namespace of the module to which the
             submodule belongs.";
        }
        leaf-list location {
          type union {
            type enumeration {
              enum "NETCONF";
            }
            type inet:uri;
          }
          description
            "One or more locations from which the schema can be
             retrieved.  This list SHOULD contain at least one
             entry per schema.

             A schema entry may be located on a remote file system
             (e.g., reference to file system for ftp retrieval) or
             retrieved directly from a server supporting the
             <get-schema> operation (denoted by the value 'NETCONF').";
        }
      }
    }

    container sessions {
      description
        "The sessions container includes session-specific data for
         NETCONF management sessions.  The session list MUST include
         all currently active NETCONF sessions.";

      list session {
        key session-id;
        description
          "All NETCONF sessions managed by the NETCONF server
           MUST be reported in this list.";

        leaf session-id {
          type uint32 {
            range "1..max";
          }
          description
            "Unique identifier for the session.  This value is the
             NETCONF session identifier, as defined in RFC 4741.";
          reference
            "RFC 4741: NETCONF Configuration Protocol";
        }
        leaf transport {
          type identityref {
            base transport;
          }
          mandatory true;
          description
            "Identifies the transport for each session, e.g.,
            'netconf-ssh', 'netconf-soap', etc.";
        }
        leaf username  {
          type string;
          mandatory true;
          description
            "The username is the client identity that was authenticated
            by the NETCONF transport protocol.  The algorithm used to 
            derive the username is NETCONF transport protocol specific
            and in addition specific to the authentication mechanism 
            used by the NETCONF transport protocol.";
        }
        leaf source-host {
          type inet:host;
          description
            "Host identifier of the NETCONF client.  The value
             returned is implementation specific (e.g., hostname,
             IPv4 address, IPv6 address)";
        }
        leaf login-time {
          type yang:date-and-time;
          mandatory true;
          description
            "Time at the server at which the session was established.";
        }
        uses common-counters {
          description
            "Per-session counters.  Zero based with following reset
             behaviour:
               - at start of a session
               - when max value is reached";
        }
      }
    }

    container statistics {
      description
        "Statistical data pertaining to the NETCONF server.";

      leaf netconf-start-time {
        type yang:date-and-time;
        description
          "Date and time at which the management subsystem was
           started.";
      }
      leaf in-bad-hellos {
        type yang:zero-based-counter32;
        description
          "Number of sessions silently dropped because an
          invalid <hello> message was received.  This includes <hello>
          messages with a 'session-id' attribute, bad namespace, and
          bad capability declarations.";
      }
      leaf in-sessions {
        type yang:zero-based-counter32;
        description
          "Number of sessions started.  This counter is incremented
           when a <hello> message with a <session-id> is sent.

          'in-sessions' - 'in-bad-hellos' = 
              'number of correctly started netconf sessions'";
      }
      leaf dropped-sessions {
        type yang:zero-based-counter32;
        description
          "Number of sessions that were abnormally terminated, e.g.,
           due to idle timeout or transport close.  This counter is not
           incremented when a session is properly closed by a
           <close-session> operation, or killed by a <kill-session>
           operation.";
      }
      uses common-counters {
        description
          "Global counters, accumulated from all sessions.
           Zero based with following reset behaviour:
             - re-initialization of NETCONF server
             - when max value is reached";
      }
    }
  }

  rpc get-schema {
    description
      "This operation is used to retrieve a schema from the
       NETCONF server.

       Positive Response:
         The NETCONF server returns the requested schema.

       Negative Response:
         If requested schema does not exist, the <error-tag> is
         'invalid-value'.

         If more than one schema matches the requested parameters, the
         <error-tag> is 'operation-failed', and <error-app-tag> is
         'data-not-unique'.";

    input {
      leaf identifier {
        type string;
        mandatory true;
        description
          "Identifier for the schema list entry.";
      }
      leaf version {
        type string;
        description
          "Version of the schema requested.  If this parameter is not
           present, and more than one version of the schema exists on
           the server, a 'data-not-unique' error is returned, as
           described above.";
      }
      leaf format {
        type identityref {
          base schema-format;
        }
        description
           "The data modeling language of the schema.  If this
            parameter is not present, and more than one formats of
            the schema exists on the server, a 'data-not-unique' error
            is returned, as described above.";
      }
    }
    output {
        anyxml data {
          description
            "Contains the schema content.";
      }
    }
  }
}

<CODE ENDS>

]]>    
        </artwork>
      </figure>
      </section>
      <section title="Security Considerations" toc="default">
	<t>
	  The YANG module defined in this memo is designed to be
	  accessed via the NETCONF protocol <xref
	  target="RFC4741"/>. The lowest NETCONF layer is the secure
	  transport layer and the mandatory to implement secure
	  transport is SSH <xref target="RFC4742"/>.
	</t>
	<t>
	  Some of the readable data nodes in this YANG module may be
	  considered sensitive or vulnerable in some network
	  environments.  It is thus important to control read access
	  (e.g., via get, get-config, or notification) to these data
	  nodes.
	</t>
	<t>
	  These are the containers, list nodes, and data nodes with
	  their specific sensitivity/vulnerability:
	</t>
	<t>
	  <list style="hanging">
	    <t hangText="/netconf-state/sessions/session/username:">
	      Contains identity information that could be used in an
	      attempt to authenticate with the server.
	      <vspace blankLines="1"/>
	      This username is only meant for monitoring, and SHOULD
	      NOT be used for other purposes, such as access control,
	      without a detailed discussion of the limitations of this
	      reported username.  For example, it is possible that
	      server A and server B might report the same username,
	      but these might be for different persons.
	    </t>
	  </list>
	</t>
    </section>
    <section title="Acknowledgements" toc="default">
      <t>The authors would like to thank Andy Bierman, Mehmet Ersue, Washam
Fan, David Harrington, Balazs Lengyel, Hideki Okita, Juergen Schoenwaelder,
Bert Wijnen, and many other members of the NETCONF WG for providing important
input to this document.  The authors would also like to specifically
acknowledge Sharon Chisholm's work on "NETCONF Monitoring Schema" and contribution to this document.
</t>
    </section>
    <section title="IANA Considerations" toc="default">
<t>
This document registers one URI in "The IETF XML Registry".  Following
the format in <xref target="RFC3688"/>, the following has been registered.
</t>

<figure title="" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
<![CDATA[     
  URI: urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring
  Registrant Contact: The IESG.
  XML: N/A, the requested URI is an XML namespace.
]]></artwork></figure>
<t>
This document registers one module in the "YANG Module Names" registry.
Following the format in <xref target="RFC6020"/>, the following has been registered.
</t>
<figure title="" align="left" alt="" width="" height="">
<artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
<![CDATA[     
  name: ietf-netconf-monitoring
  namespace: urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring
  prefix: ncm
  reference: RFC 6022
]]></artwork></figure>
    </section>

  </middle>
  <back>
    <references title="Normative References">

<reference anchor='RFC5717'>

<front>
<title>Partial Lock Remote Procedure Call (RPC) for NETCONF</title>
<author initials='B.' surname='Lengyel' fullname='B. Lengyel'>
<organization /></author>
<author initials='M.' surname='Bjorklund' fullname='M. Bjorklund'>
<organization /></author>
<date year='2009' month='December' />
<abstract>
<t>The Network Configuration protocol (NETCONF) defines the lock and unlock Remote Procedure Calls (RPCs), used to lock entire configuration datastores.  In some situations, a way to lock only parts of a configuration datastore is required.  This document defines a capability-based extension to the NETCONF protocol for locking portions of a configuration datastore. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5717' />

<format type='TXT' octets='42529' target='http://www.rfc-editor.org/rfc/rfc5717.txt' />
</reference>



      <reference anchor="XML-NAMES" target="http://www.w3.org/TR/2009/REC-xml-names-20091208">
	<front>
        <title>Namespaces in XML 1.0 (Third Edition)</title>
        <author initials="D." surname="Hollander" fullname="Dave Hollander">
          <organization/>
        </author>
        <author initials="R." surname="Tobin" fullname="Richard Tobin">
          <organization/>
        </author>
        <author initials="H." surname="Thompson" fullname="Henry S. Thompson">
          <organization/>
        </author>
        <author initials="T." surname="Bray" fullname="Tim Bray">
          <organization/>
        </author>
        <author initials="A." surname="Layman" fullname="Andrew Layman">
          <organization/>
        </author>
        <date month="December" day="8" year="2009"/>
      </front>
      <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-xml-names-20091208"/>
      <format type="HTML" target="http://www.w3.org/TR/2009/REC-xml-names-20091208"/>
    </reference>

<reference anchor='RFC2119'>

<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>

<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year='1997' month='March' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.

</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='http://www.rfc-editor.org/rfc/rfc2119.txt' />
<format type='HTML' octets='17491' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5777' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>

<reference anchor='RFC4741'>

<front>
<title>NETCONF Configuration Protocol</title>
<author initials='R.' surname='Enns' fullname='R. Enns'>
<organization /></author>
<date year='2006' month='December' />
<abstract>
<t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized on top of a simple Remote Procedure Call (RPC) layer. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4741' />
<format type='TXT' octets='173914' target='http://www.rfc-editor.org/rfc/rfc4741.txt' />
</reference>
<reference anchor='RFC4742'>

<front>
<title>Using the NETCONF Configuration Protocol over Secure SHell (SSH)</title>
<author initials='M.' surname='Wasserman' fullname='M. Wasserman'>
<organization /></author>
<author initials='T.' surname='Goddard' fullname='T. Goddard'>
<organization /></author>
<date year='2006' month='December' />
<abstract>
<t>This document describes a method for invoking and running the Network Configuration Protocol (NETCONF) within a Secure Shell (SSH) session as an SSH subsystem. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4742' />

<format type='TXT' octets='17807' target='http://www.rfc-editor.org/rfc/rfc4742.txt' />
</reference>

<reference anchor='RFC4743'>

<front>
<title>Using NETCONF over the Simple Object Access Protocol (SOAP)</title>
<author initials='T.' surname='Goddard' fullname='T. Goddard'>
<organization /></author>
<date year='2006' month='December' />
<abstract>
<t>The Network Configuration Protocol (NETCONF) is applicable to a wide range of devices in a variety of environments.  Web Services is one such environment and is presently characterized by the use of the Simple Object Access Protocol (SOAP).  NETCONF finds many benefits in this environment: from the reuse of existing standards, to ease of software development, to integration with deployed systems.  Herein, we describe SOAP over HTTP and SOAP over Blocks Exchange Extensible Protocol (BEEP) bindings for NETCONF. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4743' />
<format type='TXT' octets='39734' target='http://www.rfc-editor.org/rfc/rfc4743.txt' />
</reference>

<reference anchor='RFC4744'>

<front>
<title>Using the NETCONF Protocol over the Blocks Extensible Exchange Protocol (BEEP)</title>
<author initials='E.' surname='Lear' fullname='E. Lear'>
<organization /></author>
<author initials='K.' surname='Crozier' fullname='K. Crozier'>
<organization /></author>
<date year='2006' month='December' />
<abstract>
<t>This document specifies an application protocol mapping for the Network Configuration Protocol (NETCONF) over the Blocks Extensible Exchange Protocol (BEEP). [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4744' />

<format type='TXT' octets='19287' target='http://www.rfc-editor.org/rfc/rfc4744.txt' />
</reference>

<reference anchor='RFC5539'>

<front>
<title>NETCONF over Transport Layer Security (TLS)</title>
<author initials='M.' surname='Badra' fullname='M. Badra'>
<organization /></author>
<date year='2009' month='May' />
<abstract>
<t>The Network Configuration Protocol (NETCONF) provides mechanisms to install, manipulate, and delete the configuration of network devices.  This document describes how to use the Transport Layer Security (TLS) protocol to secure NETCONF exchanges. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5539' />
<format type='TXT' octets='16073' target='http://www.rfc-editor.org/rfc/rfc5539.txt' />
</reference>


<reference anchor="RFC6020" >
        <front>
          <title>YANG - A Data Modeling Language for the Network Configuration Protocol (NETCONF)</title>
          <author initials="M.B." surname="Bjorklund" fullname="Martin" role="editor">
            <organization>Tail-f Systems</organization>
          </author>
          <date month="September" year="2010" />
        </front>
      </reference>
      
<reference anchor="RFC6021" >
        <front>
          <title>Common YANG Data Types</title>
          <author initials="J.S." surname="Schoenwaelder" fullname="Juergen" role="editor">
            <organization>Jacobs University</organization>
          </author>
          <date month="September" year="2010" />
        </front>
      </reference>

<reference anchor="xmlschema-1" target="http://www.w3.org/TR/xmlschema-1">
        <front>
          <title>XML Schema Part 1: Structures Second Edition W3C Recommendation 28 October 2004</title>
          <author initials="Paul V." surname="Biron" fullname="Paul V. Biron">
            <organization>Kaiser Permanente, for Health Level Seven</organization>
          </author>
          <author initials="Ashok" surname="Malhotra" fullname="Ashok Malhotra">
            <organization>Microsoft (formerly of IBM)</organization>
          </author>
          <date month="October" year="2004" />
        </front>
</reference>

<reference anchor="ISO/IEC19757-2:2008" target="http://www.iso.org/iso/catalogue_detail.htm?csnumber=37605">
        <front>
          <title>Document Schema Definition Language (DSDL) -- Part 2: Regular-grammar-based validation -- RELAX NG</title>
          <author initials="" surname="" fullname="">
                  <organization>ISO/IEC</organization>
          </author>
          <date month="December" year="2008" />
        </front>
</reference>

</references>


<references title="Informative References">

<reference anchor='RFC0959'>

<front>
<title abbrev='File Transfer Protocol'>File Transfer Protocol</title>
<author initials='J.' surname='Postel' fullname='J. Postel'>
<organization>Information Sciences Institute (ISI)</organization></author>
<author initials='J.' surname='Reynolds' fullname='J. Reynolds'>
<organization /></author>
<date year='1985' day='1' month='October' /></front>

<seriesInfo name='STD' value='9' />
<seriesInfo name='RFC' value='959' />
<format type='TXT' octets='147316' target='http://www.rfc-editor.org/rfc/rfc959.txt' />

</reference>

<reference anchor='RFC2616'>

<front>
<title abbrev='HTTP/1.1'>Hypertext Transfer Protocol -- HTTP/1.1</title>
<author initials='R.' surname='Fielding' fullname='Roy T. Fielding'>
<organization abbrev='UC Irvine'>Department of Information and Computer Science</organization>
<address>
<postal>
<street>University of California, Irvine</street>
<city>Irvine</city>
<region>CA</region>

<code>92697-3425</code></postal>
<facsimile>+1(949)824-1715</facsimile>
<email>fielding@ics.uci.edu</email></address></author>
<author initials='J.' surname='Gettys' fullname='James Gettys'>
<organization abbrev='Compaq/W3C'>World Wide Web Consortium</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>545 Technology Square</street>
<city>Cambridge</city>

<region>MA</region>
<code>02139</code></postal>
<facsimile>+1(617)258-8682</facsimile>
<email>jg@w3.org</email></address></author>
<author initials='J.' surname='Mogul' fullname='Jeffrey C. Mogul'>
<organization abbrev='Compaq'>Compaq Computer Corporation</organization>
<address>
<postal>
<street>Western Research Laboratory</street>
<street>250 University Avenue</street>

<city>Palo Alto</city>
<region>CA</region>
<code>94305</code></postal>
<email>mogul@wrl.dec.com</email></address></author>
<author initials='H.' surname='Frystyk' fullname='Henrik Frystyk Nielsen'>
<organization abbrev='W3C/MIT'>World Wide Web Consortium</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>545 Technology Square</street>

<city>Cambridge</city>
<region>MA</region>
<code>02139</code></postal>
<facsimile>+1(617)258-8682</facsimile>
<email>frystyk@w3.org</email></address></author>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization abbrev='Xerox'>Xerox Corporation</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>

<street>3333 Coyote Hill Road</street>
<city>Palo Alto</city>
<region>CA</region>
<code>94034</code></postal>
<email>masinter@parc.xerox.com</email></address></author>
<author initials='P.' surname='Leach' fullname='Paul J. Leach'>
<organization abbrev='Microsoft'>Microsoft Corporation</organization>
<address>
<postal>
<street>1 Microsoft Way</street>

<city>Redmond</city>
<region>WA</region>
<code>98052</code></postal>
<email>paulle@microsoft.com</email></address></author>
<author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
<organization abbrev='W3C/MIT'>World Wide Web Consortium</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>545 Technology Square</street>

<city>Cambridge</city>
<region>MA</region>
<code>02139</code></postal>
<facsimile>+1(617)258-8682</facsimile>
<email>timbl@w3.org</email></address></author>
<date year='1999' month='June' />
<abstract>
<t>
   The Hypertext Transfer Protocol (HTTP) is an application-level
   protocol for distributed, collaborative, hypermedia information
   systems. It is a generic, stateless, protocol which can be used for
   many tasks beyond its use for hypertext, such as name servers and
   distributed object management systems, through extension of its
   request methods, error codes and headers . A feature of HTTP is
   the typing and negotiation of data representation, allowing systems
   to be built independently of the data being transferred.
</t>
<t>

   HTTP has been in use by the World-Wide Web global information
   initiative since 1990. This specification defines the protocol
   referred to as "HTTP/1.1", and is an update to RFC 2068 .
</t></abstract></front>

<seriesInfo name='RFC' value='2616' />
<format type='TXT' octets='422317' target='http://www.rfc-editor.org/rfc/rfc2616.txt' />
<format type='PS' octets='5529857' target='http://www.rfc-editor.org/rfc/rfc2616.ps' />
<format type='PDF' octets='550558' target='http://www.rfc-editor.org/rfc/rfc2616.pdf' />
<format type='HTML' octets='636125' target='http://xml.resource.org/public/rfc/html/rfc2616.html' />
<format type='XML' octets='493420' target='http://xml.resource.org/public/rfc/xml/rfc2616.xml' />
</reference>

<reference anchor='RFC2818'>

<front>
<title>HTTP Over TLS</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'>
<organization /></author>
<date year='2000' month='May' />
<abstract>
<t>This memo describes how to use Transport Layer Security (TLS) to secure Hypertext Transfer Protocol (HTTP) connections over the Internet.  This memo provides information for the Internet community.</t></abstract></front>

<seriesInfo name='RFC' value='2818' />
<format type='TXT' octets='15170' target='http://www.rfc-editor.org/rfc/rfc2818.txt' />
</reference>

<reference anchor='RFC3688'>

<front>
<title>The IETF XML Registry</title>
<author initials='M.' surname='Mealling' fullname='M. Mealling'>
<organization /></author>
<date year='2004' month='January' />
<abstract>
<t>This document describes an IANA maintained registry for IETF standards which use Extensible Markup Language (XML) related items such as Namespaces, Document Type Declarations (DTDs), Schemas, and Resource Description Framework (RDF) Schemas.</t></abstract></front>

<seriesInfo name='BCP' value='81' />
<seriesInfo name='RFC' value='3688' />
<format type='TXT' octets='17325' target='http://www.rfc-editor.org/rfc/rfc3688.txt' />

</reference>

<reference anchor='NETCONF'>
<front>
<title>NETCONF Monitoring Schema</title>
<author initials='S.' surname='Chisholm' fullname='S. Chisholm'>
<organization/> </author>
<author initials='H.' surname='Trevino' fullname='H. Trevino'>
<organization/></author>
<date month='February' year='2007' />
</front>

<seriesInfo name='Work in' value='Progress' />
</reference>

</references>

  </back>
</rfc>


