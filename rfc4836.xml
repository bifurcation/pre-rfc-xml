<?xml version="1.0" encoding="US-ASCII" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<?rfc rfcedstyle="yes" ?>

<!-- xml2rfc processing instructions (for a complete list and description
     see http://xml.resource.org/authoring/README.html -->

<?rfc strict="no" ?>    <!-- enforce ID-nits conventions and DTD validity -->

    <!-- Handling of comments/editing marks, turn off in published RFC -->
<?rfc comments="no" ?>  <!-- controls display of <cref> elements -->
<?rfc inline="no" ?>    <!-- put comments inline instead of
                             at the end in comments section -->
<?rfc editing="no" ?>   <!-- insert editing marks -->

    <!-- Table Of Contents (TOC), may be omitted for very short documents --> 
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>

<?rfc symrefs="yes"?>    <!-- use symbolic tags in -->
                         <!-- references/citations instead of numbers -->
<?rfc sortrefs="yes" ?>

    <!-- Minimize amount of vertical whitespace in txt file,
         e.g. start new paragraphs from the same page etc.
         Default is the value of rfcedstyle -->
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<!-- end of list of processing instructions -->

    <!-- Information about the document.
         categories values: std, bcp, info, exp, and historic
         For Internet-Drafts, specify attribute "ipr".
         (ipr values are: full3978, noModification3978, noDerivatives3978),
         Also for Internet-Drafts, can specify values for
         attributes "iprExtract", and "docName".  Note
         that the value for iprExtract is the anchor attribute
         value of a section that can be extracted, and is only
         useful when the value of "ipr" is not "full3667". -->

<rfc category="std" number="4836" obsoletes="3636">
 
<!-- $Id$ -->
 
<front>

<title abbrev="MAU MIB">
  Definitions of Managed Objects for
  IEEE&nbsp;802.3&nbsp;Medium&nbsp;Attachment&nbsp;Units&nbsp;(MAUs) 
</title>

<author initials="E." surname="Beili" fullname="Edward Beili">
  <organization>Actelis Networks</organization>
  <address>
    <postal>
      <street>Bazel 25</street>
      <city>Petach-Tikva</city>
      <country>Israel</country>
    </postal>
    <phone>+972-3-924-3491</phone>
    <email>edward.beili@actelis.com</email>
  </address>
</author>

<date month="April" year="2007"/>

<area>Operations and Management</area>

<keyword>Network Management</keyword>
<keyword>Simple Network Management Protocol</keyword>
<keyword>SNMP</keyword>
<keyword>Management Information Base</keyword>
<keyword>MIB</keyword>
<keyword>Textual Conventions</keyword>

<abstract>
  <t>
   This document defines a portion of the Management Information Base (MIB)
   for use with network management protocols in the Internet community.
   In particular, it defines objects for managing IEEE 802.3 Medium
   Attachment Units (MAUs).  This document obsoletes RFC 3636. It amends
   that specification by moving MAU type OBJECT-IDENTITY definitions
   and relevant textual conventions into a separate Internet Assigned
   Number Authority (IANA) maintained MIB module. In addition,
   management information is added to enable support for Ethernet in
   the First Mile (EFM) and 10GBASE-CX4 MAUs.
  </t>
</abstract>

</front>
 
<middle>

<section title="Introduction">
  <t>
   This document defines a portion of the Management Information Base (MIB)
   for use with network management protocols in the Internet community.
   In particular, it defines objects for managing IEEE 802.3
   <xref target="IEEE802.3"/> Medium Attachment Units (MAUs).
  </t>
  <t>
   The previous version of this document, RFC 3636 <xref target="RFC3636"/>,
   defined a single MIB module. This document splits the original MIB
   module into two, putting frequently updated object identities and
   textual conventions into a separate, IANA-maintained MIB module, in
   order to decrease the need of updating the basic MAU MIB module.
  </t>
  <t>
   The first version of the IANA-maintained MIB module also extends the
   list of managed objects to support Ethernet in the First Mile (EFM) and
   10GBASE-CX4 interfaces.
  </t>
  <t>
   Ethernet technology, as defined by the 802.3 Working Group of the
   IEEE, continues to evolve, with scalable increases in speed, new
   types of cabling and interfaces, and new features.  This evolution
   may require changes in the managed objects in order to reflect this
   new functionality.  This document, as with other documents issued by
   this working group, reflects a certain stage in the evolution of
   Ethernet technology.  In the future, this document might be revised,
   or new documents might be issued by the Ethernet Interfaces and Hub
   MIB Working Group, in order to reflect the evolution of Ethernet
   technology.
  </t>
</section>

<section title="The Internet-Standard Management Framework">
  <t>
   For a detailed overview of the documents that describe the current
   Internet-Standard Management Framework, please refer to
   section 7 of RFC 3410 <xref target="RFC3410"/>.
  </t>
  <t>
   Managed objects are accessed via a virtual information store,
   termed the Management Information Base or MIB.  MIB objects are
   generally accessed through the Simple Network Management Protocol
   (SNMP).  Objects in the MIB are defined using the mechanisms
   defined in the Structure of Management Information (SMI).  This
   memo specifies a MIB module that is compliant to the SMIv2, which
   is described in STD 58, RFC 2578 <xref target="RFC2578"/>,
   STD 58, RFC 2579 <xref target="RFC2579"/> and STD 58, RFC
   2580 <xref target="RFC2580"/>.
  </t>
  <t>
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119
   <xref target="RFC2119"/>.
  </t>
</section>

<section title="Overview">
  <t>
   Instances of these object types represent attributes of an IEEE 802.3
   MAU.  Several types of MAUs are defined in the IEEE 802.3 CSMA/CD
   standard <xref target="IEEE802.3"/>.
   These MAUs may be connected to IEEE 802.3
   repeaters or to 802.3 (Ethernet-like) interfaces. For convenience,
   this document refers to these devices as "repeater MAUs" and
   "interface MAUs."
  </t>
  <t>
   The definitions presented here are based on Section 30.5, "Layer
   Management for 10 Mb/s, 100 Mb/s, 1000 Mb/s, and 10 Gb/s Medium
   Attachment Units (MAUs)", Section 30.6, "Management for link Auto-
   Negotiation", and Annex 30A, "GDMO Specifications for 802.3 managed
   object classes" of IEEE Std. 802.3-2005  <xref target="IEEE802.3"/>.
   This specification is intended to provide for management of all
   types of Ethernet/802.3 MAUs.
  </t>
  <section title="Relationship to RFC 3636">
    <t>
     The management definitions provided in this document are intended to
     be a superset of those defined by RFC 3636 <xref target="RFC3636"/>.
    </t>
    <t>
     In order to decrease the need of updating the basic MAU MIB module
     due to the new MAU type, Media Available state, Auto Negotiation capability
     and/or Jack type introduction, all relevant object
     identities and textual conventions have been moved to a separate,
     IANA-maintained MIB module IANA-MAU-MIB, the first version of
     which is defined in this document. Thus when a new MAU type,
     Media Available state, Auto Negotiation capability, and/or
     Jack type is defined by the IEEE 802.3 working group, only
     the IANA-maintained module needs to be revised, leaving the
     basic MAU-MIB module defined in this document unchanged.
    </t>
    <t>
     In addition, the new definitions are added to the IANA-maintained
     MIB module, to support Ethernet in the First Mile (EFM) and
     10GBASE-CX4 interfaces, defined in IEEE Std 802.3ah-2004
     <xref target="IEEE802.3ah"/> and IEEE Std 802.3ak-2004
     <xref target="IEEE802.3ak"/> respectively, now part of IEEE Std 802.3-2005
     <xref target="IEEE802.3"/>.
    </t>
    <t>
     It should be noted that the changes made in this revision will not be
     entirely backward-compatible with MIB modules that currently import
     MAU type object identity descriptors from the MAU-MIB;  such modules
     will need to be revised to import those DESCRIPTORS from the
     IANA-MAU-MIB.  Similarly, any management applications that process
     the object identity definitions (e.g., to present the DESCRIPTION
     text to a user) will need to get those definitions from the
     IANA-MAU-MIB instead of the MAU-MIB.  While it is true that changes
     that require such adjustments are not strictly compliant with the
     SMIv2 rules governing MIB module revisions (see <xref
     target="RFC2578"/> Section 10), in this case continued high
     maintenance costs that would result
     from not making these changes make the deviation from the rules
     justified.  It should be noted that the working group was not able
     to find any examples of MIB modules or management applications that
     would actually be negatively affected by the changes.
    </t>
  </section>
  <section title="Relationship to Other MIBs">
    <t>
     It is assumed that an agent implementing MAU-MIB will also implement
     (at least) the 'system' group defined in the SNMPv2 MIB
     <xref target="RFC3418"/>. The following sections identify other MIBs
     that such an agent should implement.
    </t>
      <section title="Relationship to the Interfaces MIB">
        <t>
   The sections of this document that define interface MAU-related
   objects specify an extension to the Interfaces MIB <xref target="RFC2863"/>.
   An agent implementing these interface-MAU related objects MUST also
   implement the relevant groups of the ifCompliance3 MODULE-COMPLIANCE
   statement of the Interface MIB.  The value of the object ifMauIfIndex
   is the same as the value of 'ifIndex' used to instantiate the
   interface to which the given MAU is connected.
        </t>
        <t>
   It is REQUIRED that an agent implementing the interface-MAU related
   objects in the MAU-MIB will also fully comply with the dot3Compliance2
   MODULE-COMPLIANCE statement of the Ethernet-like Interfaces MIB,
   <xref target="RFC3635"/>.  Furthermore, when the interface-MAU related objects are
   used to manage a 10GBASE-W PHY -- i.e., when ifMauType is equal to
   dot3MauType10GigBaseW or any other 10GBASE-W variant -- then the
   agent MUST also support the Ethernet WAN Interface Sublayer (WIS) MIB
   <xref target="RFC3637"/> and must follow the interface layering model specified
   therein.  In that case the value of the object ifMauIfIndex is the
   same as the value of 'ifIndex' for the layer at the top of the stack,
   i.e., for the ifTable entry that has 'ifType' equal to
   ethernetCsmacd(6).  If the interface-MAU related objects are used to
   manage a PHY that allows the MAU type to be changed dynamically, then
   the agent SHALL create ifTable, ifStackTable, and ifInvStackTable
   entries that pertain to the WIS when ifMauDefaultType is changed to a
   10GBASEW variant (i.e., one of dot3MauType10GigBaseW,
   dot3MauType10GigBaseEW, dot3MauType10GigBaseLW, or
   dot3MauType10GigBaseSW) from any other type, and shall destroy the
   WIS-related entries when ifMauDefaultType is changed to a non-
   10GBASE-W type.  The agent SHALL also change the values of
   'ifConnectorPresent' and 'ifHighSpeed' in the ifTable entry indexed
   by ifMauIfIndex as specified in <xref target="RFC3635"/> and <xref target="RFC3637"/> when
   ifMauDefaultType is manipulated in this way, but SHALL NOT otherwise
   alter that entry.
        </t>
        <t>
   (Note that repeater ports are not represented as interfaces in the
   Interface MIB.)
        </t>
      </section>
      <section title="Relationship to the 802.3 Repeater MIB Module">
        <t>
   The section of this document that defines repeater MAU-related
   objects specifies an extension to the 802.3 Repeater MIB defined in
   <xref target="RFC2108"/>.  An agent implementing these repeater-MAU related objects
   MUST also comply with the snmpRptrModCompl compliance statement of
   the 802.3 Repeater MIB module.
        </t>
        <t>
   The values of 'rpMauGroupIndex' and 'rpMauPortIndex' used to
   instantiate a repeater MAU variable SHALL be the same as the values
   of 'rptrPortGroupIndex' and 'rptrPortIndex' used to instantiate the
   port that the given MAU is connected to.
        </t>
      </section>
  </section>
  <section title="Management of Internal MAUs">
    <t>
   In some situations, a MAU can be "internal" -- i.e., its
   functionality is implemented entirely within a device.  For example,
   a managed repeater may contain an internal repeater-MAU and/or an
   internal interface-MAU through which management communications
   originating on one of the repeater's external ports pass, in order to
   reach the management agent associated with the repeater.  Such
   internal MAUs may or may not be managed.  If they are managed,
   objects describing their attributes should appear in the appropriate
   MIB subtree:  dot3RpMauBasicGroup for internal repeater-MAUs and
   dot3IfMauBasicGroup for internal interface-MAUs.
    </t>
  </section>
  <section title="Mapping of IEEE 802.3 Managed Objects">
  <t>
   This section contains the mapping between relevant managed objects
   (attributes) defined in <xref target="IEEE802.3"/> Clause 30, and managed
   objects defined in this document.
  </t>
   <texttable anchor='table1' style='all'
              title='Mapping of IEEE 802.3 Managed Objects'>
    <ttcol align='left'>IEEE 802.3 Managed Object</ttcol>
    <ttcol align='left'>Corresponding SNMP Object</ttcol>
    <c>oMAU</c><c></c>
    <c>.aMAUID</c>                    <c>rpMauIndex or
                                         ifMauIndex or
                                         broadMauIndex</c>
    <c>.aMAUType</c>                  <c>rpMauType or
                                         ifMauType</c>
    <c>.aMAUTypeList</c>              <c>ifMauTypeListBits</c>
    <c>.aMediaAvailable</c>           <c>rpMauMediaAvailable or
                                         ifMauMediaAvailable</c>
    <c>.aLoseMediaCounter</c>         <c>rpMauMediaAvailableStateExits
                                         or
                                         ifMauMediaAvailableStateExits</c>
    <c>.aJabber</c>                   <c>rpMauJabberState and
                                         rpMauJabberingStateEnters or
                                         ifMauJabberState and
                                         ifMauJabberingStateEnters</c>
    <c>.aMAUAdminState</c>            <c>rpMauStatus or
                                         ifMauStatus </c>
    <c>.aBbMAUXmitRcvSplitType</c>    <c>broadMauXmtRcvSplitType</c>
    <c>.aBroadbandFrequencies</c>     <c>broadMauXmtCarrierFreq and
                                         broadMauTranslationFreq</c>
    <c>.aFalseCarriers</c>            <c>rpMauFalseCarriers or
                                         ifMauFalseCarriers</c>
    <c>.acResetMAU</c>                <c>rpMauStatus or
                                         ifMauStatus</c>
    <c>.acMAUAdminControl</c>         <c>rpMauStatus or
                                         ifMauStatus</c>
    <c>.nJabber</c>                   <c>rpMauJabberTrap or
                                         ifMauJabberTrap</c>

    <c>oAutoNegotiation</c>           <c></c>
    <c>.aAutoNegID</c>                <c>ifMauIndex</c>
    <c>.aAutoNegAdminState</c>        <c>ifMauAutoNegAdminStatus</c>
    <c>.aAutoNegRemoteSignalling</c>  <c>ifMauAutoNegRemoteSignalling</c>
    <c>.aAutoNegAutoConfig</c>        <c>ifMauAutoNegConfig</c>
    <c>.aAutoNegLocalTechnologyAbility</c><c>ifMauAutoNegCapabilityBits</c>
    <c>.aAutoNegAdvertisedTechnologyAbility</c><c>ifMauAutoNegAdvertisedBits and
                                       ifMauAutoNegRemoteFaultAdvertised </c>
    <c>.aAutoNegReceivedTechnologyAbility</c><c>ifMauAutoNegReceivedBits and
                                         ifMauAutoNegRemoteFaultReceived</c>
    <c>.acAutoNegRestartAutoConfig</c><c>ifMauAutoNegRestart</c>
    <c>.acAutoNegAdminControl</c>     <c>ifMauAutoNegAdminStatus</c>
   </texttable>
   <t>
    The following IEEE 802.3 managed objects have not been included in
    the MAU-MIB for the following reasons.
   </t>
   <texttable anchor='table2' style='all'
              title='Unmapped IEEE 802.3 Managed Objects'>
    <ttcol align='left'>IEEE 802.3 Managed Object</ttcol>
    <ttcol align='left'>Reason for exclusion</ttcol>
    <c>oMAU</c><c></c>
    <c>.aIdleErrorCount</c>           <c>Only useful for 100BaseT2,
                                         which is not widely
                                         implemented.</c>
    <c>oAutoNegotiation</c>            <c></c>
    <c>.aAutoNegLocalSelectorAbility</c><c>Only needed for support of
                                          isoethernet (802.9a), which is
                                          not supported by MAU-MIB.</c>
    <c>.aAutoNegAdvertisedSelectorAbility</c><c></c>
    <c>.aAutoNegReceivedSelectorAbility</c>  <c></c>
   </texttable>
  </section>

  <section title="Addition of New MAU Types">
    <section title="dot3MauType OBJECT-IDENTITIES">
     <t>
      The dot3MauType OBJECT IDENTIFIER and its OBJECT-IDENTITY
      definitions has been moved from the MAU-MIB into the
      IANA-maintained IANA-MAU-MIB, the first version of which is defined
      in this document.
     </t>
     <t>
      When a new IEEE 802.3 MAU is defined, IANA can re-issue a
      version of IANA-MAU-MIB with the new dot3MauType 
      OBJECT-IDENTITY and its matching IANAifMauTypeListBits
      textual convention value and, possibly, with new
      IANAifMauMediaAvailable, IANAifMauAutoNegCapBits, and/or
      IANAifJackType values.
     </t>
     <t>
      An Expert Review, as defined in RFC 2434 <xref target="RFC2434"/>, 
      is REQUIRED for the addition of the new MAU, Media Available
      states, Auto Negotiation capabilities, and/or Jack types.
     </t>
     <t>
      In some cases, new MAU types may require additional managed objects
      or may have side effects on the behavior of existing managed objects.
      In such cases a standards-track specification (which may be a new
      document or a revision of this document) is also REQUIRED.  Any such
      document is REQUIRED to note any special properties of the MAU types
      that it defines - for example, side effects on the ifStackTable as
      noted in this document for 10GBASE-W MAUs. 
     </t>
    </section>

    <section title="IANAifMauTypeListBits TEXTUAL-CONVENTION">
     <t>
      The syntax of ifMauTypeListBits is changed to be a textual convention,
      such that the enumerated integer values are now defined in the textual
      convention IANAifMauTypeListBits, which can be re-specified
      (with additional values, when defined by IEEE 802.3) in the
      IANA-maintained MIB module without issuing a new version of this document.
     </t>
    </section>

    <section title="IANAifMauMediaAvailable TEXTUAL-CONVENTION">
     <t>
      The syntax of ifMauMediaAvailable and rpMauMediaAvailable is changed
      to be a textual convention, such that the enumerated integer values
      are now defined in the textual convention IANAifMauMediaAvailable,
      which can be re-specified (with additional values, when defined by
      IEEE 802.3) in the IANA-maintained MIB module without issuing
      a new version of this document.
     </t>
    </section>

    <section title="IANAifMauAutoNegCapBits TEXTUAL-CONVENTION">
     <t>
      The syntax of ifMauAutoNegCapabilityBits, ifMauAutoNegCapAdvertisedBits,
      and ifMauAutoNegCapReceivedBits objects is changed to be a textual
      convention, such that the enumerated integer values are now defined in
      the textual convention IANAifMauAutoNegCapBits, which can be re-specified
      (with additional values, when defined by IEEE 802.3) in the
      IANA-maintained MIB module without issuing a new version of this
      document.
     </t>
    </section>

    <section title="JackType TEXTUAL-CONVENTION">
     <t>
      The JackType Textual Convention has been deprecated in favor of the
      IANAifJackType defined in the IANA-maintained MIB module, so the
      new Jack types can be added (when defined by IEEE 802.3) without
      issuing a new version of this document.
     </t>
    </section>
  </section>

</section>

<section title="MAU MIB Definitions">
<figure><artwork><![CDATA[
MAU-MIB DEFINITIONS ::= BEGIN

  IMPORTS
    Counter32, Integer32, Counter64,
    OBJECT-TYPE, MODULE-IDENTITY, NOTIFICATION-TYPE, mib-2
      FROM SNMPv2-SMI         -- RFC 2578
    TruthValue, AutonomousType, TEXTUAL-CONVENTION
      FROM SNMPv2-TC          -- RFC 2579
    OBJECT-GROUP, MODULE-COMPLIANCE, NOTIFICATION-GROUP
      FROM SNMPv2-CONF        -- RFC 2580
    InterfaceIndex
      FROM IF-MIB             -- RFC 2863
    IANAifMauTypeListBits, IANAifMauMediaAvailable,
    IANAifMauAutoNegCapBits, IANAifJackType
      FROM IANA-MAU-MIB
                       -- http://www.iana.org/assignments/ianamau-mib
    ;

  mauMod MODULE-IDENTITY
    LAST-UPDATED "200704210000Z"  -- April 21, 2007
    ORGANIZATION "IETF Ethernet Interfaces and Hub MIB Working Group"
    CONTACT-INFO
      "WG charter:
        http://www.ietf.org/html.charters/hubmib-charter.html

      Mailing Lists:
        General Discussion: hubmib@ietf.org
        To Subscribe: hubmib-request@ietf.org
        In Body: subscribe your_email_address

       Chair: Bert Wijnen
      Postal: Alcatel-Lucent
              Schagen 33
              3461 GL Linschoten
              Netherlands
       Phone: +31-348-407-775
       EMail: bwijnen@alcatel-lucent.com

      Editor: Edward Beili
      Postal: Actelis Networks Inc.
              25 Bazel St., P.O.B. 10173
              Petach-Tikva 10173
              Israel
         Tel: +972-3-924-3491
       EMail: edward.beili@actelis.com"

    DESCRIPTION
      "Management information for 802.3 MAUs.

      The following reference is used throughout this MIB module:

      [IEEE802.3] refers to:
         IEEE Std 802.3, 2005 Edition: 'IEEE Standard for Information
         technology - Telecommunications and information exchange
         between systems - Local and metropolitan area networks -
         Specific requirements - Part 3: Carrier sense multiple
         access with collision detection (CSMA/CD) access method and
         physical layer specifications'.

         Of particular interest is Clause 30, 'Management'.

      Copyright (C) The IETF Trust (2007).
      This version of this MIB module is part of RFC 4836;
      see the RFC itself for full legal notices."

    REVISION    "200704210000Z"  -- April 21, 2007
    DESCRIPTION "Updated to reference IANA maintaned textual
                conventions for MAU types, Media Availability state,
                Auto Negotiation capabilities, and jack types,
                instead of using internally defined values.

                This version is published as RFC 4836."

    REVISION    "200309190000Z"  -- September 19, 2003
    DESCRIPTION "Updated to include support for 10 Gb/s MAUs.
                This resulted in the following revisions:
                - Added OBJECT-IDENTITY definitions for
                  10 gigabit MAU types
                - Added fiberLC jack type to JackType TC
                - Extended ifMauTypeListBits with bits for
                  the 10 gigabit MAU types
                - Added enumerations to ifMauMediaAvailable,
                  and updated its DESCRIPTION to reflect
                  behaviour at 10 Gb/s
                - Added 64-bit version of ifMauFalseCarriers
                  and added mauIfGrpHCStats object group to
                  contain the new object
                - Deprecated mauModIfCompl2 and replaced it
                  with mauModIfCompl3, which includes the new
                  object group

                 This version published as RFC 3636."

    REVISION    "199908240400Z" -- August 24, 1999
    DESCRIPTION "This version published as RFC 2668. Updated
                to include support for 1000 Mb/sec
                MAUs and flow control negotiation."

    REVISION    "199710310000Z" -- October 31, 1997
    DESCRIPTION "Version published as RFC 2239."

    REVISION    "199309300000Z" -- September 30, 1993
    DESCRIPTION "Initial version, published as RFC 1515."

    ::= { snmpDot3MauMgt 6 }

   snmpDot3MauMgt OBJECT IDENTIFIER ::= { mib-2 26 }

   -- Textual Conventions

   JackType ::= TEXTUAL-CONVENTION
     STATUS      deprecated
     DESCRIPTION "********* THIS TC IS DEPRECATED **********

                 This TC has been deprecated in favour of
                 IANAifJackType.
                 
                 Common enumeration values for repeater
                 and interface MAU jack types."
     SYNTAX      INTEGER {
                           other(1),
                           rj45(2),
                           rj45S(3), -- rj45 shielded
                           db9(4),
                           bnc(5),
                           fAUI(6),  -- female aui
                           mAUI(7),  -- male aui
                           fiberSC(8),
                           fiberMIC(9),
                           fiberST(10),
                           telco(11),
                           mtrj(12),  -- fiber MT-RJ
                           hssdc(13), -- fiber channel style-2
                           fiberLC(14)
                       }

   dot3RpMauBasicGroup
       OBJECT IDENTIFIER ::= { snmpDot3MauMgt 1 }
   dot3IfMauBasicGroup
       OBJECT IDENTIFIER ::= { snmpDot3MauMgt 2 }
   dot3BroadMauBasicGroup
       OBJECT IDENTIFIER ::= { snmpDot3MauMgt 3 }

   -- OIDs under the following branch are reserved for
   -- the IANA-MAU-MIB to assign as MAU type values:
   --                        { snmpDot3MauMgt 4 }

   dot3IfMauAutoNegGroup
       OBJECT IDENTIFIER ::= { snmpDot3MauMgt 5 }

   -- the following OID is the MODULE-IDENTITY value
   -- for this MIB module:   { snmpDot3MauMgt 6 }

   --
   -- The Basic Repeater MAU Table
   --

   rpMauTable OBJECT-TYPE
     SYNTAX      SEQUENCE OF RpMauEntry
     MAX-ACCESS  not-accessible
     STATUS      current
     DESCRIPTION "Table of descriptive and status information
                 about the MAU(s) attached to the ports of a
                 repeater."
     ::= { dot3RpMauBasicGroup 1 }

   rpMauEntry OBJECT-TYPE
     SYNTAX      RpMauEntry
     MAX-ACCESS  not-accessible
     STATUS      current
     DESCRIPTION "An entry in the table, containing information
                 about a single MAU."
     INDEX       { rpMauGroupIndex,
                   rpMauPortIndex,
                   rpMauIndex
                 }
     ::= { rpMauTable 1 }

   RpMauEntry ::=
     SEQUENCE {
         rpMauGroupIndex                     Integer32,
         rpMauPortIndex                      Integer32,
         rpMauIndex                          Integer32,
         rpMauType                           AutonomousType,
         rpMauStatus                         INTEGER,
         rpMauMediaAvailable                 IANAifMauMediaAvailable,
         rpMauMediaAvailableStateExits       Counter32,
         rpMauJabberState                    INTEGER,
         rpMauJabberingStateEnters           Counter32,
         rpMauFalseCarriers                  Counter32
   }

   rpMauGroupIndex OBJECT-TYPE
     SYNTAX      Integer32 (1..2147483647)
     MAX-ACCESS  read-only  -- read-only since originally an
                            -- SMIv1 index
     STATUS      current
     DESCRIPTION "This variable uniquely identifies the group
                 containing the port to which the MAU described
                 by this entry is connected.

                 Note:  In practice, a group will generally be
                 a field-replaceable unit (i.e., module, card,
                 or board) that can fit in the physical system
                 enclosure, and the group number will correspond
                 to a number marked on the physical enclosure.

                 The group denoted by a particular value of this
                 object is the same as the group denoted by the
                 same value of rptrGroupIndex."
     REFERENCE   "RFC 2108, rptrGroupIndex."
     ::= { rpMauEntry 1 }

   rpMauPortIndex OBJECT-TYPE
     SYNTAX      Integer32 (1..2147483647)
     MAX-ACCESS  read-only  -- read-only since originally an
                            -- SMIv1 index
     STATUS      current
     DESCRIPTION "This variable uniquely identifies the repeater
                 port within group rpMauGroupIndex to which the
                 MAU described by this entry is connected."
     REFERENCE   "RFC 2108, rptrPortIndex."
     ::= { rpMauEntry 2 }

   rpMauIndex OBJECT-TYPE
     SYNTAX      Integer32 (1..2147483647)
     MAX-ACCESS  read-only  -- read-only since originally an
                            -- SMIv1 index
     STATUS      current
     DESCRIPTION "This variable uniquely identifies the MAU
                 described by this entry from among other
                 MAUs connected to the same port
                 (rpMauPortIndex)."
     REFERENCE   "[IEEE802.3], 30.5.1.1.1, aMAUID."
     ::= { rpMauEntry 3 }

   rpMauType OBJECT-TYPE
     SYNTAX      AutonomousType
     MAX-ACCESS  read-only
     STATUS      current
     DESCRIPTION "This object identifies the MAU type. Values for
                 standard IEEE 802.3 MAU types are defined in the
                 IANA maintained IANA-MAU-MIB module, as
                 OBJECT-IDENTITIES of dot3MauType.
                 If the MAU type is unknown, the object identifier
                 zeroDotZero is returned."
     REFERENCE   "[IEEE802.3], 30.5.1.1.2, aMAUType."
     ::= { rpMauEntry 4 }

   rpMauStatus OBJECT-TYPE
       SYNTAX      INTEGER {
                       other(1),
                       unknown(2),
                       operational(3),
                       standby(4),
                       shutdown(5),
                       reset(6)
                   }
       MAX-ACCESS  read-write
       STATUS      current
       DESCRIPTION "The current state of the MAU. This object MAY
                   be implemented as a read-only object by those
                   agents and MAUs that do not implement software
                   control of the MAU state. Some agents may not
                   support setting the value of this object to some
                   of the enumerated values.

                   The value other(1) is returned if the MAU is in
                   a state other than one of the states 2 through
                   6.

                   The value unknown(2) is returned when the MAU's
                   true state is unknown; for example, when it is
                   being initialized.

                   A MAU in the operational(3) state is fully
                   functional; it operates, and passes signals to its
                   attached DTE or repeater port in accordance to
                   its specification.

                   A MAU in standby(4) state forces DI and CI to
                   idle, and the media transmitter to idle or fault,
                   if supported. Standby(4) mode only applies to
                   link type MAUs. The state of
                   rpMauMediaAvailable is unaffected.

                   A MAU in shutdown(5) state assumes the same
                   condition on DI, CI, and the media transmitter,
                   as though it were powered down or not connected.
                   The MAU MAY return other(1) value for the
                   rpMauJabberState and rpMauMediaAvailable objects
                   when it is in this state. For an AUI, this
                   state will remove power from the AUI.

                   Setting this variable to the value reset(6)
                   resets the MAU in the same manner as a
                   power-off, power-on cycle of at least one-half
                   second would. The agent is not required to
                   return the value reset(6).

                   Setting this variable to the value
                   operational(3), standby(4), or shutdown(5)
                   causes the MAU to assume the respective state,
                   except that setting a mixing-type MAU or an AUI
                   to standby(4) will cause the MAU to enter the
                   shutdown state."
       REFERENCE   "[IEEE802.3], 30.5.1.1.7, aMAUAdminState,
                   30.5.1.2.2, acMAUAdminControl, and 30.5.1.2.1,
                   acResetMAU."
       ::= { rpMauEntry 5 }

   rpMauMediaAvailable OBJECT-TYPE
       SYNTAX      IANAifMauMediaAvailable
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "This object identifies Media Available state of
                   the MAU, complementary to the rpMauStatus. Values
                   for the standard IEEE 802.3 Media Available states
                   are defined in the IANA maintained IANA-MAU-MIB
                   module, as IANAifMauMediaAvailable TC."
       REFERENCE   "[IEEE802.3], 30.5.1.1.4, aMediaAvailable."
       ::= { rpMauEntry 6 }

   rpMauMediaAvailableStateExits OBJECT-TYPE
       SYNTAX      Counter32
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "A count of the number of times that
                   rpMauMediaAvailable for this MAU instance leaves
                   the state available(3).

                   Discontinuities in the value of this counter can
                   occur at re-initialization of the management
                   system and at other times, as indicated by the
                   value of rptrMonitorPortLastChange."
       REFERENCE   "[IEEE802.3], 30.5.1.1.5, aLoseMediaCounter.
                   RFC 2108, rptrMonitorPortLastChange"
       ::= { rpMauEntry 7 }

   rpMauJabberState OBJECT-TYPE
       SYNTAX      INTEGER {
                       other(1),
                       unknown(2),
                       noJabber(3),
                       jabbering(4)
                   }
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "The value other(1) is returned if the jabber
                   state is not 2, 3, or 4. The agent MUST always
                   return other(1) for MAU type dot3MauTypeAUI.

                   The value unknown(2) is returned when the MAU's
                   true state is unknown; for example, when it is
                   being initialized.

                   If the MAU is not jabbering the agent returns
                   noJabber(3). This is the 'normal' state.

                   If the MAU is in jabber state the agent returns
                   the jabbering(4) value."
       REFERENCE "[IEEE802.3], 30.5.1.1.6, aJabber.jabberFlag."
       ::= { rpMauEntry 8 }

   rpMauJabberingStateEnters OBJECT-TYPE
       SYNTAX      Counter32
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "A count of the number of times that
                   mauJabberState for this MAU instance enters the
                   state jabbering(4). For MAUs of type
                   dot3MauTypeAUI, dot3MauType100BaseT4,
                   dot3MauType100BaseTX, dot3MauType100BaseFX, and
                   all 1000Mbps types, this counter will always
                   indicate zero.

                   Discontinuities in the value of this counter can
                   occur at re-initialization of the management
                   system and at other times, as indicated by the
                   value of rptrMonitorPortLastChange."
       REFERENCE   "[IEEE802.3], 30.5.1.1.6, aJabber.jabberCounter.
                   RFC 2108, rptrMonitorPortLastChange"
       ::= { rpMauEntry 9 }

   rpMauFalseCarriers OBJECT-TYPE
       SYNTAX      Counter32
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "A count of the number of false carrier events
                   during IDLE in 100BASE-X links. This counter
                   does not increment at the symbol rate. It can
                   increment after a valid carrier completion at a
                   maximum rate of once per 100 ms until the next
                   carrier event.

                   This counter increments only for MAUs of type
                   dot3MauType100BaseT4, dot3MauType100BaseTX,
                   dot3MauType100BaseFX, and all 1000Mbps types.

                   For all other MAU types, this counter will
                   always indicate zero.

                   The approximate minimum time for rollover of
                   this counter is 7.4 hours.

                   Discontinuities in the value of this counter can
                   occur at re-initialization of the management
                   system and at other times, as indicated by the
                   value of rptrMonitorPortLastChange."
       REFERENCE   "[IEEE802.3], 30.5.1.1.10, aFalseCarriers.
                   RFC 2108, rptrMonitorPortLastChange"
       ::= { rpMauEntry 10 }

   -- The rpJackTable applies to MAUs attached to repeaters
   -- which have one or more external jacks (connectors).

   rpJackTable OBJECT-TYPE
       SYNTAX      SEQUENCE OF RpJackEntry
       MAX-ACCESS  not-accessible
       STATUS      current
       DESCRIPTION "Information about the external jacks attached
                   to MAUs attached to the ports of a repeater."
       ::= { dot3RpMauBasicGroup 2 }

   rpJackEntry OBJECT-TYPE
       SYNTAX      RpJackEntry
       MAX-ACCESS  not-accessible
       STATUS      current
       DESCRIPTION "An entry in the table, containing information
                   about a particular jack."
       INDEX       { rpMauGroupIndex,
                     rpMauPortIndex,
                     rpMauIndex,
                     rpJackIndex
                   }
       ::= { rpJackTable 1 }

   RpJackEntry ::=
       SEQUENCE {
           rpJackIndex                         Integer32,
           rpJackType                          IANAifJackType
       }

   rpJackIndex OBJECT-TYPE
       SYNTAX      Integer32 (1..2147483647)
       MAX-ACCESS  not-accessible
       STATUS      current
       DESCRIPTION "This variable uniquely identifies the jack
                   described by this entry from among other jacks
                   attached to the same MAU (rpMauIndex)."
       ::= { rpJackEntry 1 }

   rpJackType OBJECT-TYPE
       SYNTAX      IANAifJackType
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "The jack connector type, as it appears on the
                   outside of the system."
       ::= { rpJackEntry 2 }

   --
   -- The Basic Interface MAU Table
   --

   ifMauTable OBJECT-TYPE
       SYNTAX      SEQUENCE OF IfMauEntry
       MAX-ACCESS  not-accessible
       STATUS      current
       DESCRIPTION "Table of descriptive and status information
                   about MAU(s) attached to an interface."
       ::= { dot3IfMauBasicGroup 1 }

   ifMauEntry OBJECT-TYPE
       SYNTAX      IfMauEntry
       MAX-ACCESS  not-accessible
       STATUS      current
       DESCRIPTION "An entry in the table, containing information
                   about a single MAU."
       INDEX       { ifMauIfIndex,
                     ifMauIndex
                   }
       ::= { ifMauTable 1 }

   IfMauEntry ::=
       SEQUENCE {
           ifMauIfIndex                      InterfaceIndex,
           ifMauIndex                        Integer32,
           ifMauType                         AutonomousType,
           ifMauStatus                       INTEGER,
           ifMauMediaAvailable               IANAifMauMediaAvailable,
           ifMauMediaAvailableStateExits     Counter32,
           ifMauJabberState                  INTEGER,
           ifMauJabberingStateEnters         Counter32,
           ifMauFalseCarriers                Counter32,
           ifMauTypeList                     Integer32,
           ifMauDefaultType                  AutonomousType,
           ifMauAutoNegSupported             TruthValue,
           ifMauTypeListBits                 IANAifMauTypeListBits,
           ifMauHCFalseCarriers              Counter64
       }

   ifMauIfIndex OBJECT-TYPE
       SYNTAX      InterfaceIndex
       MAX-ACCESS  read-only  -- read-only since originally an
                              -- SMIv1 index
       STATUS      current
       DESCRIPTION "This variable uniquely identifies the interface
                   to which the MAU described by this entry is
                   connected."
       REFERENCE   "RFC 2863, ifIndex"
       ::= { ifMauEntry 1 }

   ifMauIndex OBJECT-TYPE
       SYNTAX      Integer32 (1..2147483647)
       MAX-ACCESS  read-only  -- read-only since originally an
                              -- SMIv1 index
       STATUS      current
       DESCRIPTION "This variable uniquely identifies the MAU
                   described by this entry from among other MAUs
                   connected to the same interface (ifMauIfIndex)."
       REFERENCE   "[IEEE802.3], 30.5.1.1.1, aMAUID."
       ::= { ifMauEntry 2 }

   ifMauType OBJECT-TYPE
     SYNTAX      AutonomousType
     MAX-ACCESS  read-only
     STATUS      current
     DESCRIPTION "This object identifies the MAU type. Values for
                 standard IEEE 802.3 MAU types are defined in the
                 IANA maintained IANA-MAU-MIB module, as
                 OBJECT-IDENTITIES of dot3MauType.
                 If the MAU type is unknown, the object identifier
                 zeroDotZero is returned.
     
                 This object represents the operational type of
                 the MAU, as determined by either 1) the result
                 of the auto-negotiation function or 2) if
                 auto-negotiation is not enabled or is not
                 implemented for this MAU, by the value of the
                 object ifMauDefaultType. In case 2), a set to
                 the object ifMauDefaultType will force the MAU
                 into the new operating mode."
     REFERENCE   "[IEEE802.3], 30.5.1.1.2, aMAUType."
     ::= { ifMauEntry 3 }

   ifMauStatus OBJECT-TYPE
       SYNTAX      INTEGER {
                       other(1),
                       unknown(2),
                       operational(3),
                       standby(4),
                       shutdown(5),
                       reset(6)
                   }
       MAX-ACCESS  read-write
       STATUS      current
       DESCRIPTION "The current state of the MAU. This object MAY
                   be implemented as a read-only object by those
                   agents and MAUs that do not implement software
                   control of the MAU state. Some agents may not
                   support setting the value of this object to some
                   of the enumerated values.

                   The value other(1) is returned if the MAU is in
                   a state other than one of the states 2 through
                   6.

                   The value unknown(2) is returned when the MAU's
                   true state is unknown; for example, when it is
                   being initialized.

                   A MAU in the operational(3) state is fully
                   functional; it operates, and passes signals to its
                   attached DTE or repeater port in accordance to
                   its specification.

                   A MAU in standby(4) state forces DI and CI to
                   idle and the media transmitter to idle or fault,
                   if supported. Standby(4) mode only applies to
                   link type MAUs. The state of
                   ifMauMediaAvailable is unaffected.

                   A MAU in shutdown(5) state assumes the same
                   condition on DI, CI, and the media transmitter,
                   as though it were powered down or not connected.
                   The MAU MAY return other(1) value for the
                   ifMauJabberState and ifMauMediaAvailable objects
                   when it is in this state. For an AUI, this
                   state will remove power from the AUI.

                   Setting this variable to the value reset(6)
                   resets the MAU in the same manner as a
                   power-off, power-on cycle of at least one-half
                   second would. The agent is not required to
                   return the value reset(6).

                   Setting this variable to the value
                   operational(3), standby(4), or shutdown(5)
                   causes the MAU to assume the respective state,
                   except that setting a mixing-type MAU or an AUI
                   to standby(4) will cause the MAU to enter the
                   shutdown state."
       REFERENCE   "[IEEE802.3], 30.5.1.1.7, aMAUAdminState,
                   30.5.1.2.2, acMAUAdminControl, and 30.5.1.2.1,
                   acResetMAU."
       ::= { ifMauEntry 4 }

   ifMauMediaAvailable OBJECT-TYPE
       SYNTAX      IANAifMauMediaAvailable
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "This object identifies Media Available state of
                   the MAU, complementary to the ifMauStatus. Values
                   for the standard IEEE 802.3 Media Available states
                   are defined in the IANA maintained IANA-MAU-MIB
                   module, as IANAifMauMediaAvailable TC."
       REFERENCE   "[IEEE802.3], 30.5.1.1.4, aMediaAvailable."
       ::= { ifMauEntry 5 }

   ifMauMediaAvailableStateExits OBJECT-TYPE
       SYNTAX      Counter32
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "A count of the number of times that
                   ifMauMediaAvailable for this MAU instance leaves
                   the state available(3).

                   Discontinuities in the value of this counter can
                   occur at re-initialization of the management
                   system and at other times, as indicated by the
                   value of ifCounterDiscontinuityTime."
       REFERENCE   "[IEEE802.3], 30.5.1.1.5, aLoseMediaCounter.
                   RFC 2863, ifCounterDiscontinuityTime."
       ::= { ifMauEntry 6 }

   ifMauJabberState OBJECT-TYPE
       SYNTAX      INTEGER {
                       other(1),
                       unknown(2),
                       noJabber(3),
                       jabbering(4)
                   }
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "The value other(1) is returned if the jabber
                   state is not 2, 3, or 4. The agent MUST always
                   return other(1) for MAU type dot3MauTypeAUI.

                   The value unknown(2) is returned when the MAU's
                   true state is unknown; for example, when it is
                   being initialized.

                   If the MAU is not jabbering the agent returns
                   noJabber(3). This is the 'normal' state.

                   If the MAU is in jabber state the agent returns
                   the jabbering(4) value."
       REFERENCE   "[IEEE802.3], 30.5.1.1.6, aJabber.jabberFlag."
       ::= { ifMauEntry 7 }

   ifMauJabberingStateEnters OBJECT-TYPE
       SYNTAX      Counter32
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "A count of the number of times that
                   mauJabberState for this MAU instance enters the
                   state jabbering(4). This counter will always
                   indicate zero for MAUs of type dot3MauTypeAUI
                   and those of speeds above 10Mbps.

                   Discontinuities in the value of this counter can
                   occur at re-initialization of the management
                   system and at other times, as indicated by the
                   value of ifCounterDiscontinuityTime."
       REFERENCE   "[IEEE802.3], 30.5.1.1.6, aJabber.jabberCounter.
                   RFC 2863, ifCounterDiscontinuityTime."
       ::= { ifMauEntry 8 }

   ifMauFalseCarriers OBJECT-TYPE
       SYNTAX      Counter32
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "A count of the number of false carrier events
                   during IDLE in 100BASE-X and 1000BASE-X links.

                   For all other MAU types, this counter will
                   always indicate zero. This counter does not
                   increment at the symbol rate.

                   It can increment after a valid carrier
                   completion at a maximum rate of once per 100 ms
                   for 100BASE-X and once per 10us for 1000BASE-X
                   until the next CarrierEvent.

                   This counter can roll over very quickly. A
                   management station is advised to poll the
                   ifMauHCFalseCarriers instead of this counter in
                   order to avoid loss of information.

                   Discontinuities in the value of this counter can
                   occur at re-initialization of the management
                   system and at other times, as indicated by the
                   value of ifCounterDiscontinuityTime."
       REFERENCE   "[IEEE802.3], 30.5.1.1.10, aFalseCarriers.
                   RFC 2863, ifCounterDiscontinuityTime."
       ::= { ifMauEntry 9 }

   ifMauTypeList OBJECT-TYPE
       SYNTAX      Integer32
       MAX-ACCESS  read-only
       STATUS      deprecated
       DESCRIPTION "********* THIS OBJECT IS DEPRECATED **********

                   This object has been deprecated in favour of
                   ifMauTypeListBits.

                   A value that uniquely identifies the set of
                   possible IEEE 802.3 types that the MAU could be.
                   The value is a sum that initially takes the
                   value zero. Then, for each type capability of
                   this MAU, 2 raised to the power noted below is
                   added to the sum. For example, a MAU that has
                   the capability to be only 10BASE-T would have a
                   value of 512 (2**9). In contrast, a MAU that
                   supports both 10Base-T (full duplex) and
                   100BASE-TX (full duplex) would have a value of
                   ((2**11) + (2**16)), or 67584.

                   The powers of 2 assigned to the capabilities are
                   these:

                   Power  Capability
                     0      other or unknown
                     1      AUI
                     2      10BASE-5
                     3      FOIRL
                     4      10BASE-2
                     5      10BASE-T duplex mode unknown
                     6      10BASE-FP
                     7      10BASE-FB
                     8      10BASE-FL duplex mode unknown
                     9      10BROAD36
                    10      10BASE-T  half duplex mode
                    11      10BASE-T  full duplex mode
                    12      10BASE-FL half duplex mode
                    13      10BASE-FL full duplex mode
                    14      100BASE-T4
                    15      100BASE-TX half duplex mode
                    16      100BASE-TX full duplex mode
                    17      100BASE-FX half duplex mode
                    18      100BASE-FX full duplex mode
                    19      100BASE-T2 half duplex mode
                    20      100BASE-T2 full duplex mode

                   If auto-negotiation is present on this MAU, this
                   object will map to ifMauAutoNegCapability."
       ::= { ifMauEntry 10 }

   ifMauDefaultType OBJECT-TYPE
       SYNTAX      AutonomousType
       MAX-ACCESS  read-write
       STATUS      current
       DESCRIPTION "This object identifies the default
                   administrative baseband MAU type to be used in
                   conjunction with the operational MAU type
                   denoted by ifMauType.

                   The set of possible values for this object is
                   the same as the set defined for the ifMauType
                   object.

                   This object represents the
                   administratively-configured type of the MAU. If
                   auto-negotiation is not enabled or is not
                   implemented for this MAU, the value of this
                   object determines the operational type of the
                   MAU. In this case, a set to this object will
                   force the MAU into the specified operating mode.

                   If auto-negotiation is implemented and enabled
                   for this MAU, the operational type of the MAU
                   is determined by auto-negotiation, and the value
                   of this object denotes the type to which the MAU
                   will automatically revert if/when
                   auto-negotiation is later disabled.

                   NOTE TO IMPLEMENTORS:  It may be necessary to
                   provide for underlying hardware implementations
                   which do not follow the exact behavior specified
                   above. In particular, when
                   ifMauAutoNegAdminStatus transitions from enabled
                   to disabled, the agent implementation MUST
                   ensure that the operational type of the MAU (as
                   reported by ifMauType) correctly transitions to
                   the value specified by this object, rather than
                   continuing to operate at the value earlier
                   determined by the auto-negotiation function."
       REFERENCE   "[IEEE802.3], 30.5.1.1.1, aMAUID, and 22.2.4.1.4."
       ::= { ifMauEntry 11 }

   ifMauAutoNegSupported OBJECT-TYPE
       SYNTAX      TruthValue
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "This object indicates whether or not
                   auto-negotiation is supported on this MAU."
       ::= { ifMauEntry 12 }

   ifMauTypeListBits OBJECT-TYPE
       SYNTAX      IANAifMauTypeListBits
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "A value that uniquely identifies the set of
                   possible IEEE 802.3 types that the MAU could be.
                   If auto-negotiation is present on this MAU, this
                   object will map to ifMauAutoNegCapabilityBits.

                   Note that this MAU may be capable of operating
                   as a MAU type that is beyond the scope of this
                   MIB. This is indicated by returning the
                   bit value bOther in addition to any bit values
                   for standard capabilities that are listed in the
                   IANAifMauTypeListBits TC."
       ::= { ifMauEntry 13 }

   ifMauHCFalseCarriers OBJECT-TYPE
       SYNTAX      Counter64
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "A count of the number of false carrier events
                   during IDLE in 100BASE-X and 1000BASE-X links.

                   For all other MAU types, this counter will
                   always indicate zero. This counter does not
                   increment at the symbol rate.

                   This counter is a 64-bit version of
                   ifMauFalseCarriers. Since the 32-bit version of
                   this counter can roll over very quickly,
                   management stations are advised to poll the
                   64-bit version instead, in order to avoid loss
                   of information.

                   Discontinuities in the value of this counter can
                   occur at re-initialization of the management
                   system and at other times, as indicated by the
                   value of ifCounterDiscontinuityTime."
       REFERENCE   "[IEEE802.3], 30.5.1.1.10, aFalseCarriers.
                   RFC 2863, ifCounterDiscontinuityTime."
       ::= { ifMauEntry 14 }

   -- The ifJackTable applies to MAUs attached to interfaces
   -- which have one or more external jacks (connectors).

   ifJackTable OBJECT-TYPE
       SYNTAX      SEQUENCE OF IfJackEntry
       MAX-ACCESS  not-accessible
       STATUS      current
       DESCRIPTION "Information about the external jacks attached
                   to MAUs attached to an interface."
       ::= { dot3IfMauBasicGroup 2 }

   ifJackEntry OBJECT-TYPE
       SYNTAX      IfJackEntry
       MAX-ACCESS  not-accessible
       STATUS      current
       DESCRIPTION "An entry in the table, containing information
                   about a particular jack."
       INDEX       { ifMauIfIndex,
                     ifMauIndex,
                     ifJackIndex
                   }
       ::= { ifJackTable 1 }

   IfJackEntry ::=
       SEQUENCE {
           ifJackIndex                         Integer32,
           ifJackType                          IANAifJackType
       }

   ifJackIndex OBJECT-TYPE
       SYNTAX      Integer32 (1..2147483647)
       MAX-ACCESS  not-accessible
       STATUS      current
       DESCRIPTION "This variable uniquely identifies the jack
                   described by this entry from among other jacks
                   attached to the same MAU."
       ::= { ifJackEntry 1 }

   ifJackType OBJECT-TYPE
       SYNTAX      IANAifJackType
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "The jack connector type, as it appears on the
                   outside of the system."
       ::= { ifJackEntry 2 }

   --
   -- The MAU Auto-Negotiation Table
   --

   ifMauAutoNegTable OBJECT-TYPE
       SYNTAX      SEQUENCE OF IfMauAutoNegEntry
       MAX-ACCESS  not-accessible
       STATUS      current
       DESCRIPTION "Configuration and status objects for the
                   auto-negotiation function of MAUs attached to
                   interfaces.

                   The ifMauAutoNegTable applies to systems in
                   which auto-negotiation is supported on one or
                   more MAUs attached to interfaces. Note that if
                   auto-negotiation is present and enabled, the
                   ifMauType object reflects the result of the
                   auto-negotiation function."
       ::= { dot3IfMauAutoNegGroup 1 }

   ifMauAutoNegEntry OBJECT-TYPE
       SYNTAX      IfMauAutoNegEntry
       MAX-ACCESS  not-accessible
       STATUS      current
       DESCRIPTION "An entry in the table, containing configuration
                   and status information for the auto-negotiation
                   function of a particular MAU."
       INDEX       { ifMauIfIndex,
                     ifMauIndex
                   }
       ::= { ifMauAutoNegTable 1 }

   IfMauAutoNegEntry ::=
       SEQUENCE {
           ifMauAutoNegAdminStatus           INTEGER,
           ifMauAutoNegRemoteSignaling       INTEGER,
           ifMauAutoNegConfig                INTEGER,
           ifMauAutoNegCapability            Integer32,
           ifMauAutoNegCapAdvertised         Integer32,
           ifMauAutoNegCapReceived           Integer32,
           ifMauAutoNegRestart               INTEGER,
           ifMauAutoNegCapabilityBits        IANAifMauAutoNegCapBits,
           ifMauAutoNegCapAdvertisedBits     IANAifMauAutoNegCapBits,
           ifMauAutoNegCapReceivedBits       IANAifMauAutoNegCapBits,
           ifMauAutoNegRemoteFaultAdvertised INTEGER,
           ifMauAutoNegRemoteFaultReceived   INTEGER
       }

   ifMauAutoNegAdminStatus OBJECT-TYPE
       SYNTAX      INTEGER {
                       enabled(1),
                       disabled(2)
                   }
       MAX-ACCESS  read-write
       STATUS      current
       DESCRIPTION "Setting this object to enabled(1) will cause
                   the interface that has the auto-negotiation
                   signaling ability to be enabled.

                   If the value of this object is disabled(2) then
                   the interface will act as it would if it had no
                   auto-negotiation signaling. Under these
                   conditions, an IEEE 802.3 MAU will immediately
                   be forced to the state indicated by the value of
                   the object ifMauDefaultType.

                   NOTE TO IMPLEMENTORS:  When
                   ifMauAutoNegAdminStatus transitions from enabled
                   to disabled, the agent implementation MUST
                   ensure that the operational type of the MAU (as
                   reported by ifMauType) correctly transitions to
                   the value specified by the ifMauDefaultType
                   object, rather than continuing to operate at the
                   value earlier determined by the auto-negotiation
                   function."
       REFERENCE   "[IEEE802.3], 30.6.1.1.2, aAutoNegAdminState,
                   and 30.6.1.2.2, acAutoNegAdminControl."
       ::= { ifMauAutoNegEntry 1 }

   ifMauAutoNegRemoteSignaling OBJECT-TYPE
       SYNTAX      INTEGER {
                       detected(1),
                       notdetected(2)
                   }
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "A value indicating whether the remote end of
                   the link is using auto-negotiation signaling. It
                   takes the value detected(1) if and only if,
                   during the previous link negotiation, FLP Bursts
                   were received."
       REFERENCE   "[IEEE802.3], 30.6.1.1.3,
                   aAutoNegRemoteSignaling."
       ::= { ifMauAutoNegEntry 2 }

   ifMauAutoNegConfig OBJECT-TYPE
       SYNTAX      INTEGER {
                       other(1),
                       configuring(2),
                       complete(3),
                       disabled(4),
                       parallelDetectFail(5)
                   }
       MAX-ACCESS  read-only
       STATUS      current
       DESCRIPTION "A value indicating the current status of the
                   auto-negotiation process. The enumeration
                   parallelDetectFail(5) maps to a failure in
                   parallel detection as defined in 28.2.3.1 of
                   [IEEE802.3]."
       REFERENCE   "[IEEE802.3], 30.6.1.1.4, aAutoNegAutoConfig."
       ::= { ifMauAutoNegEntry 4 }

   ifMauAutoNegCapability OBJECT-TYPE
       SYNTAX      Integer32
       MAX-ACCESS  read-only
       STATUS      deprecated
       DESCRIPTION "********* THIS OBJECT IS DEPRECATED **********

                   This object has been deprecated in favour of
                   ifMauAutoNegCapabilityBits.

                   A value that uniquely identifies the set of
                   capabilities of the local auto-negotiation
                   entity. The value is a sum that initially
                   takes the value zero. Then, for each capability
                   of this interface, 2 raised to the power noted
                   below is added to the sum. For example, an
                   interface that has the capability to support
                   only 100Base-TX half duplex would have a value
                   of 32768 (2**15). In contrast, an interface
                   that supports both 100Base-TX half duplex and
                   100Base-TX full duplex would have a value of
                   98304 ((2**15) + (2**16)).

                   The powers of 2 assigned to the capabilities are
                   these:

                   Power   Capability
                     0       other or unknown
                    (1-9)    (reserved)
                    10       10BASE-T  half duplex mode
                    11       10BASE-T  full duplex mode
                    12       (reserved)
                    13       (reserved)
                    14       100BASE-T4
                    15       100BASE-TX half duplex mode
                    16       100BASE-TX full duplex mode
                    17       (reserved)
                    18       (reserved)
                    19      100BASE-T2 half duplex mode
                    20      100BASE-T2 full duplex mode

                   Note that interfaces that support this MIB may
                   have capabilities that extend beyond the scope
                   of this MIB."
       REFERENCE   "[IEEE802.3], 30.6.1.1.5,
                   aAutoNegLocalTechnologyAbility."
       ::= { ifMauAutoNegEntry 5 }

   ifMauAutoNegCapAdvertised OBJECT-TYPE
       SYNTAX      Integer32
       MAX-ACCESS  read-write
       STATUS      deprecated
       DESCRIPTION "********* THIS OBJECT IS DEPRECATED **********

                   This object has been deprecated in favour of
                   ifMauAutoNegCapAdvertisedBits.

                   A value that uniquely identifies the set of
                   capabilities advertised by the local
                   auto-negotiation entity. Refer to
                   ifMauAutoNegCapability f