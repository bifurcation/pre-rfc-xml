<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
]>

<rfc category="std" ipr="trust200902" number="6584" submissionType="IETF" consensus="yes">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>

    <front>
        <title abbrev='Simple Authentication for ALC and NORM'>
           Simple Authentication Schemes for the Asynchronous Layered Coding
(ALC) and NACK-Oriented Reliable Multicast (NORM) Protocols
        </title>
        <author initials='V.R.' surname="Roca" fullname='Vincent Roca'>
            <organization>INRIA</organization>
            <address>
                <postal>
                        <street>655, av. de l'Europe</street>
                        <street>Inovallee; Montbonnot</street>
                        <city>ST ISMIER cedex</city>
                        <code>38334</code>
                        <country>France</country>
                </postal>
                <email>vincent.roca@inria.fr</email>
                <uri>http://planete.inrialpes.fr/people/roca/</uri>
            </address>
        </author>

        <date month="April" year="2012"/>

        <area>Transport</area>
        <workgroup>RMT</workgroup>

        <keyword>TESLA</keyword>
        <keyword>FLUTE</keyword>
        <keyword>ALC</keyword>
        <keyword>NORM</keyword>

        <abstract>
                <t>
                This document introduces four schemes that provide per-packet authentication,
                integrity, and anti-replay services in the context of the
Asynchronous Layered Coding (ALC) and NACK-Oriented Reliable Multicast (NORM) protocols.
                The first scheme is based on RSA Digital Signatures.
                The second scheme relies on the Elliptic Curve Digital Signature Algorithm (ECDSA).
                The third scheme relies on a Group-keyed Message Authentication Code (MAC).
                Finally, the fourth scheme merges the Digital Signature and group schemes.
                These schemes have different target use cases, and they do not all provide the same
                service.
                </t>
        </abstract>
    </front>

    <middle>

<section anchor="sec_intro" title="Introduction">
<!-- ==================================== -->

<t>
Many applications using multicast and broadcast communications
require that each receiver be able to authenticate the source of any
packet it receives, to check its integrity.
For instance, ALC <xref target="RFC5775"/> and NORM <xref target="RFC5740"/>
are two Content Delivery Protocols (CDPs) designed to reliably transfer
objects (e.g., files) between a session's sender and several receivers.
</t>

<t>
The NORM protocol is based on bidirectional transmissions.
With NORM, each receiver acknowledges data received or, in the case of packet
erasures, asks for retransmissions.
On the contrary, the ALC protocol defines unidirectional transmissions.
With ALC, reliability can be achieved by means of cyclic transmissions of the content
within a carousel, or by the use of proactive Forward Error Correction
(FEC) codes, or by the joint use of these mechanisms.
Being purely unidirectional, ALC is massively scalable, while NORM is
intrinsically limited in terms of the number of receivers that can
be handled in a session.
Both protocols have in common the fact that they operate at the application
level, on top of an erasure channel (e.g., the Internet) where packets
can be lost (erased) during the transmission.
</t>

<t>
With these CDPs, an attacker might impersonate the ALC or NORM
session sender and inject forged packets to the receivers, thereby
corrupting the objects reconstructed by the receivers.
An attacker might also impersonate a NORM session receiver and
inject forged feedback packets to the NORM sender.
</t>

<t>
In the case of group communications, several solutions exist to provide
the receiver some guaranties on the integrity of the packets it
receives and on the identity of the sender of these packets.
These solutions have different features that make them more or
less suited to a given use case:

<list style='symbols'> 
        <t>Digital Signatures <xref target="RFC4359"/>
                (see Sections <xref target="sec_dig_rsa_sig" format="counter"/>
and <xref target="sec_dig_ecc_sig" format="counter"/> of this document):
                This scheme is well suited to low data rate flows, when a
                packet sender authentication and packet integrity service
                is needed.
                However, Digital Signatures based on RSA asymmetric cryptography
                are limited by high computational costs and high transmission overheads.
                The use of ECC (Elliptic Curve Cryptography) <xref target="RFC6090"/>
                significantly relaxes these constraints.
                For instance, the following key lengths provide equivalent
                security: a 1024-bit RSA key versus a 160-bit ECC key, or a
                2048&nbhy;bit RSA key versus a 224-bit ECC key.
                However, RSA puts more load on the signer but much less load on
                the verifier, whereas ECC puts more similar load on both; hence,
                with many verifiers, more CPU is consumed overall.
        </t>
        <t>Group-keyed Message Authentication Codes (MACs)
                (see <xref target="sec_group_mac"/>):
                This scheme is well suited to high data rate flows, when
                transmission overheads must be minimized.
                However, this scheme cannot protect against attacks coming from
                inside the group, where a group member impersonates the sender
                and sends forged messages to other receivers.
        </t>
        <t>TESLA (Timed Efficient Stream Loss-tolerant Authentication)
                <xref target="RFC4082"/> <xref target="RFC5776"/>:
                This scheme is well suited to high data rate flows, when
                transmission overheads must be minimized, and when a
                packet sender authentication and packet integrity service
                is needed.
                The price is an increased complexity -- in particular, the
                need to loosely synchronize the receivers and the sender -- as
                well as the need to wait for the key to be disclosed before
                being able to authenticate a packet (i.e., the authentication
                check is delayed).
        </t>
</list>
</t>

<t>The following table summarizes the pros and cons of each
authentication/integrity scheme used at the application/transport
level (where "-" means con, "0" means neutral, and "+" means pro):</t>

<texttable>
  <ttcol align="left"></ttcol>

  <ttcol align="center">RSA Digital Signature</ttcol>

  <ttcol align="center">ECC Digital Signature</ttcol>

  <ttcol align="center">Group-Keyed MAC</ttcol>

  <ttcol align="center">TESLA</ttcol>

  <c>Sender auth and packet integrity</c>

  <c>Yes</c> 
  <c>Yes</c>
  <c>No (group security)</c>
  <c>Yes</c>

  <c>Non-delayed authentication</c>

  <c>Yes</c>
  <c>Yes</c>
  <c>Yes</c>
  <c>No</c>

  <c>Anti-replay protection</c>

  <c>Opt</c> 
  <c>Opt</c>
  <c>Opt</c>
  <c>No</c>

  <c>Processing load</c>

  <c>-</c>
  <c>sender: -, recv: 0</c>
  <c>+</c>
  <c>+</c>

  <c>Transmission overhead</c>

  <c>-</c>
  <c>0</c>
  <c>+</c>
  <c>+</c>

  <c>Complexity</c>

  <c>+</c>
  <c>+</c>
  <c>+</c>
  <c>-</c>
</texttable>

<t>
Several authentication schemes MAY be used in the same ALC or NORM session,
even on the same communication path.
This is made possible through a dedicated identifier, the "ASID" (Authentication Scheme IDentifier),
that is present in each HET=1 (EXT_AUTH) header extension and that tells a receiver how to interpret
this HET=1 header extension.
This is discussed in <xref target="sec_asid"/>.
</t>

<t>
All the applications built on top of ALC and NORM
directly benefit from the source authentication and packet
integrity services defined in this document.
For instance, this is the case of the File Delivery over Unidirectional
Transport (FLUTE) application <xref target="RMT-FLUTE"/>, which is
built on top of ALC.
</t>

<t>
The current specification assumes that several parameters
(like keying material) are communicated out-of-band, sometimes
securely, between the sender and the receivers.
This is detailed in Sections&nbsp;<xref target="signature_params" format="counter"/>,
<xref target="ecc_signature_params" format="counter"/>,
<xref target="group_mac_params" format="counter"/>,
and
<xref target="combined_params" format="counter"/>.
</t>


<section title="Scope of This Document">
<!-- ------------------------------------ -->

<t>
<xref target="RFC5776"/> explains how to
use TESLA in the context of the ALC and NORM protocols.
</t>

<t>
The current document specifies the use of 
the Digital Signature based on RSA asymmetric cryptography, the Elliptic
Curve Digital Signature Algorithm (ECDSA), and Group-keyed MAC schemes.
The current document also specifies the joint use of Digital Signature
and Group-keyed MAC schemes.
</t>

<t>
Unlike the TESLA scheme, this specification considers the authentication/integrity
of the packets generated by the session's sender as well as those generated
by the receivers (NORM).
</t>


</section>


<section title="Terminology, Notations, and Definitions">
<!-- ------------------------------------ -->

<t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
"SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
and "OPTIONAL" in this document are to be interpreted as
described in <xref target="RFC2119"/>.
</t>

<t>
The following notations and definitions are used throughout this document:
<list style='symbols'> 
        <t>MAC is the Message Authentication Code;</t>
        <t>HMAC is the Keyed-Hash Message Authentication Code;</t>
        <t>"sender" denotes the sender of a packet that needs the
                authentication/integrity check service.
                It can be an ALC or NORM session sender, or a NORM session
                receiver in the case of feedback traffic;</t>
        <t>"receiver" denotes the receiver of a packet that needs the
                authentication/integrity check service.
                It can be an ALC or NORM session receiver, or a NORM session
                sender in the case of feedback traffic;</t>
        <t>"ASID" is the Authentication Scheme IDentifier.</t>
</list>
</t>

<t>
Key definitions for Digital Signatures are as follows:
<list style='symbols'> 
        <t>The public key is used by a receiver to check a packet's signature.
                This key MUST be communicated to all receivers before starting the
                session;</t>
        <t>The private key is used by a sender to generate a packet's signature;</t>
        <t>The private key and public key length are expressed in bits.
        For security considerations <xref target="RFC5751"/>, when using RSA,
        RSASSA-PSS, and Digital Signature Algorithm (DSA) signatures,
        key sizes of length strictly inferior to 1024 bits SHOULD NOT be used.
        Key sizes of length between 1024 and 2048 bits inclusive SHOULD be used.
        Key sizes of length strictly superior to 2048 bits MAY be used.
</t></list>
</t>

<t>
Key definitions for Group-keyed MAC are as follows:
<list style='symbols'> 
        <t>The shared group key is used by the senders and the receivers.
                This key MUST be communicated to all group members, confidentially,
                before starting the session;</t>
        <t>The group key length is expressed in bits;</t>
        <t>n_m is the length of the truncated output of the MAC <xref target="RFC2104"/>.
                Only the n_m leftmost bits (most significant bits) of the MAC
                output are kept.</t>
</list>
</t>

</section>

</section><!-- =Introduction= -->


<!-- ===================================================================== -->

<section title="Authentication Scheme Identification with the ASID Field" anchor="sec_asid">
<!-- ==================================== -->

<t>
As mentioned in <xref target="sec_intro"/>, several authentication schemes MAY be used in the same
ALC or NORM session, even on the same communication path (i.e., from a sender to a receiver,
or vice versa).
All the schemes mentioned in <xref target="sec_intro"/> (some of which are specified in this
document) use the same HET=1 (EXT_AUTH) Authentication Header extension mechanism defined in
<xref target="RFC5651"/>.
Therefore, the same 4-bit ASID field has been reserved
in all the specifications
(see Sections&nbsp;<xref target="sec:signature_auth_he_format"
format="counter"/>, <xref target="sec:ecc_signature_auth_he_format" format="counter"/>,
<xref target="sec:group_mac_auth_he_format" format="counter"/>, and
<xref target="sec:combined_auth_he_format" format="counter"/>, as well as
Section 5.1 of <xref target="RFC5776"/>).
For a given ALC or NORM session, the ASID value contained in an incoming packet enables a receiver
to differentiate the actual use and format of the contents of the HET=1 (EXT_AUTH) header extension.
</t>

<t>
The association between the ASID value and the actual authentication scheme of a given ALC or NORM
session is defined at session startup and communicated to all the session members by an out-of-band mechanism.
This association is per ALC or NORM session, and different sessions MAY reuse the same ASID values
for different authentication schemes. 
</t>

<t>
With ALC, the ASID value is scoped by the {sender IP address; Transport Session
Identifier (TSI)} tuple <xref target="RFC5651"/>
that fully identifies an ALC session.
Since <xref target="RFC5651"/> requires that
    "the TSI MUST be unique among all sessions served by the sender
     during the period when the session is active, and for a large
     period of time preceding and following when the session is active",
there is no risk of confusion between different sessions.
This is in line with <xref target="sec_replay_with_alc"/>.
</t>

<t>
With NORM, there is no session identifier within NORM packets.
Therefore, depending on whether an Any Source Multicast (ASM) or Source Specific Multicast (SSM) group communication
is used, the ASID value is scoped either by the
{destination multicast address; destination port number} or
{source IP address; destination multicast address; destination port number} tuple
that fully identifies a NORM session <xref target="RFC5740"/>.
Care should be taken that the above tuples remain unique, within a given scope and for a sufficient
period of time preceding, during, and following when the session is active, to avoid confusion
between different sessions.
However, this is a recommendation for NORM sessions, rather than something specific to an authentication scheme.
Note also that the ASID value is not scoped by the {source_id; instance_id} tuple, which uniquely
identifies a host's participation in a NORM session, rather than the session itself (<xref target="sec_replay_with_norm"/>).
</t>

<t>
In any case, because this ASID field is 4 bits long, there is a maximum of 16 authentication schemes
per ALC or NORM session.
</t>

</section>

<!-- ===================================================================== -->

<section title="RSA Digital Signature Scheme" anchor="sec_dig_rsa_sig">
<!-- ==================================== -->

<section title="Authentication Header Extension Format" anchor="sec:signature_auth_he_format">
<!-- ------------------------------------ -->

<t>
The integration of Digital Signatures is similar in ALC and NORM and relies on the 
header extension mechanism defined in both protocols.
More precisely, this document details the HET=1 (EXT_AUTH) header extension defined
in <xref target="RFC5651"/>.
</t>

<t>
Several fields are added, in addition to the HET (Header Extension Type) and HEL
(Header Extension Length) fields (<xref target="fig:signature_lct_integration"/>).
</t>

<figure title="Format of the Digital Signature EXT_AUTH Header Extension"
        anchor="fig:signature_lct_integration"><artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   HET (=1)    |      HEL      |  ASID | rsvd|A|               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+R+               +
~                  anti-replay Sequence Number (SN)             ~
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~                                                               ~
|                           Signature                           |
+                                               +-+-+-+-+-+-+-+-+
|                                               |    Padding    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      </artwork></figure>

<t>
The fields of the Digital Signature EXT_AUTH header extension are as
follows:</t>

<t>ASID (4 bits):</t>
<t><list><t>
        The ASID identifies the source authentication scheme or protocol
        in use.
        The association between the ASID value and the actual authentication
        scheme is defined out-of-band, at session startup.
</t></list></t>

<t>rsvd (Reserved) (3 bits):</t>
<t><list><t>
        This is a reserved field that MUST be set to zero and ignored by receivers.
</t></list></t>

<t>AR (anti-replay) (1 bit):</t>
<t><list><t>
        The AR field, when set to 0, indicates that the anti-replay service
        is not used.
        When set to 1, it indicates that the anti-replay service is used.
</t></list></t>

<t>SN (Sequence Number) (8 or 40 bits):</t>
<t><list><t>
        The SN field contains an optional Sequence Number.
        When AR = 0, this is an 8-bit field that MUST be set to zero. No anti-replay
        mechanism is used in that case.
        When AR = 1, this is a 40-bit field (32 bits + 8 bits), and all of the 40 bits MUST be considered
        by the anti-replay mechanism.
</t></list></t>

<t>Signature (variable size, multiple of 32 bits):</t>
<t><list><t>
        The Signature field contains a Digital Signature of the message.
        If need be, this field is padded (with 0) up to a multiple of 32&nbsp;bits.
</t></list></t>


</section>


<section title="Parameters" anchor="signature_params">
<!-- ------------------------------------ -->

<t>
Several parameters MUST be initialized by an out-of-band mechanism.
The sender or group controller
<list style='symbols'>
<t>        MUST communicate its public key, for each receiver to
        be able to verify the signature of the packets received.
        For security reasons <xref target="RFC5751"/>, the use of key sizes
        between 1024 and 2048 bits inclusive is RECOMMENDED. Key sizes inferior to
        1024 bits SHOULD NOT be used. Key sizes above 2048 bits MAY be used.
        As a side effect, the receivers also know the key length
        and the signature length, the two parameters being equal;</t>
<t>        MAY communicate a certificate (which also means
        that a PKI has been set up), for each receiver to be able to
        check the sender's public key;</t>
<t>        MUST communicate the signature-encoding algorithm.
        For instance, <xref target="RFC3447"/> defines the
        RSASSA-PKCS1-v1_5 and RSASSA-PSS algorithms that are usually
        used for that purpose;</t>
<t>        MUST communicate the One-way Hash Function --
        for instance, SHA-1, SHA-224, SHA-256, SHA-384, or SHA-512.
        Because of security threats on SHA-1, the use of SHA-256 is
        RECOMMENDED <xref target="RFC6194"/>;</t>
<t>        MUST associate a value to the ASID field
        of the EXT_AUTH header extension
        (<xref target="sec:signature_auth_he_format"/>);</t>
<t>        MUST communicate whether or not the anti-replay service is used
        for this session.</t> 
</list>
These parameters MUST be communicated to all receivers before they can
authenticate the incoming packets. For instance, it can be communicated in
the session description, or initialized in a static way on the receivers,
or communicated by means of an appropriate protocol.
The details of this out-of-band mechanism are beyond the scope of this
document.
</t>


</section>


<section title="Processing" anchor="sec:signature_principles">
<!-- ------------------------------------ -->


<section title="Signature Processing" anchor="sec:signature_processing_principles">
<!-- ------------------------------------ -->

<t>
The computation of the Digital Signature, using the private key,
MUST include the ALC or NORM header (with the
various header extensions) and the payload when applicable.
The UDP/IP/MAC headers MUST NOT be included.
During this computation, the Signature field MUST be set to 0.
</t>

<t>
Several signature-encoding algorithms can be used, including
RSASSA&nbhy;PKCS1-v1_5 and RSASSA-PSS.
With these encodings, several one-way hash functions
can be used, like SHA-256.
</t>

<t>
First, let us consider a packet sender.
More specifically, as noted in <xref target="RFC4359"/>,
Digital Signature generation is performed as described in
Section 8.2.1 of <xref target="RFC3447"/> (RSASSA-PKCS1-v1_5) and in
Section&nbsp;8.1.1 of <xref target="RFC3447"/> (RSASSA-PSS).
The authenticated portion of the packet is used as the message M,
which is passed to the signature generation function.
The signer's RSA private key is passed as K. &nbsp;In summary (when SHA-256 is used), the signature generation process computes
a SHA-256 hash of the authenticated packet bytes, signs the SHA-256 hash using
the private key, and encodes the result with the specified RSA encoding type.
This process results in a value S, which is the Digital Signature to
be included in the packet.
</t>

<t>
With RSASSA-PKCS1-v1_5 and RSASSA-PSS signatures,
the size of the signature is equal to the "RSA modulus", unless the RSA modulus
is not a multiple of 8 bits. In that case, the Digital Signature (also called
the Integrity Check Value (ICV) in <xref target="RFC4359"/>) MUST be prepended with
between 1 and 7 bits set to zero such that the Digital Signature is a multiple of 8
bits <xref target="RFC4359"/>.
The key length, which in practice is also equal to the RSA modulus, has major security
implications.
<xref target="RFC4359"/> explains how to choose this value, depending on the maximum
expected lifetime of the session.
This choice is beyond the scope of this document.
</t>

<t>
Now, let us consider a receiver.
As noted in <xref target="RFC4359"/>,
Digital Signature verification is performed as described in
Section 8.2.2 of <xref target="RFC3447"/> (RSASSA-PKCS1-v1_5) and
Section 8.1.2 of <xref target="RFC3447"/> (RSASSA&nbhy;PSS).
Upon receipt, the Digital Signature is passed to the
verification function as S. &nbsp;The authenticated portion of the packet is used as the message M,
and the RSA public key is passed as (n, e).
In summary (when SHA-256 is used), the verification function computes a SHA-256
hash of the authenticated packet bytes, decrypts the SHA&nbhy;256 hash in
the packet using the sender's public key, and validates that the appropriate
encoding was applied.
The two SHA-256 hashes are compared, and if they are identical, the
validation is successful.
</t>

</section>

<section title="Anti-Replay Processing" anchor="sec:signature_anti_replay_processing_principles">
<!-- ------------------------------------ -->

<t>
Let us assume the anti-replay service is used.
The principles are similar to the Sequence Number mechanism described
in <xref target="RFC4303"/>, with the exception that the present document
uses a 40-bit field that contains all the bits of the Sequence Number counter.
</t>

<t>
At the sender, the mechanism works as follows (Section 2.2 of <xref target="RFC4303"/>).
The sender's Sequence Number counter is initialized to 0 at session startup.
The sender increments the Sequence Number counter for this session
and inserts the value into the SN field.
Thus, the first packet sent will contain an SN of 1.
The SN value of the Authentication Header extension MUST be initialized before
the signature generation process, in order to enable a receiver to check the SN
value during the integrity verification process.
</t>

<t>
The sender SHOULD ensure that the counter does not cycle before inserting the
new value in the SN field.
Failing to follow this rule would enable an attacker to replay a packet sent
during the previous cycle; i.e., it would limit the anti-replay service to a
single SN cycle.
Since the Sequence Number is contained in a 40-bit field, it is expected that
cycling will never happen in most situations.
For instance, on a 10-Gbps network, with small packets (i.e., 64 bytes long),
cycling will happen after slightly more than 15 hours.
</t>

<t>
At the receiver, the mechanism works as follows (Section 3.4.3 and Appendix A2
of <xref target="RFC4303"/>).
For each received packet, the receiver MUST verify that the packet contains
a Sequence Number that does not duplicate the Sequence Number of any other packets
received during the session.
If this preliminary check fails, the packet is discarded, thus avoiding the
need for any cryptographic operations by the receiver.
If the preliminary check is successful, the receiver cannot yet modify its
local counter, because the integrity of the Sequence Number has not been
verified at this point.
</t>

<t>
Duplicates are rejected through the use of a sliding receive window.
The "right" edge of the window represents the highest, validated
Sequence Number value received on this session.
Packets that contain Sequence Numbers lower than the "left" edge of
the window are rejected.
Packets falling within the window are checked against a list of received
packets within the window (how this list is managed is a local,
implementation-based decision).
This window limits how far out of order a packet can be, relative to
the packet with the highest Sequence Number that has been authenticated so far.
</t>

<t>
If the received packet falls within the window and is not a
duplicate, or if the packet is to the right of the window, 
then the receiver proceeds to integrity verification.
If the integrity check fails, the receiver MUST discard the received packet
as invalid; otherwise, the receive window is updated and packet processing
continues.
</t>

</section>


</section>


<section title="In Practice"
        anchor="sec:signature_auth_he_use">
<!-- ------------------------------------ -->

<t>
Each packet sent MUST contain exactly one Digital Signature EXT_AUTH header extension.
A receiver MUST drop all the packets that do not contain a Digital Signature EXT_AUTH
header extension.
</t>

<t>
All receivers MUST recognize EXT_AUTH but might not be able to parse its
content,
for instance, because they do not support Digital Signatures.
In that case, the Digital Signature EXT_AUTH header extension is ignored.
</t>

<t>
If the anti-replay mechanism is used, each packet sent MUST contain a valid Sequence Number.
All the packets that fail to contain a valid Sequence Number MUST be immediately dropped.
</t>

<t>
For instance, <xref target="fig:signature_auth_he_with_1024b_sig"/> shows the Digital Signature
EXT_AUTH header extension when using 128-byte (1024-bit) key Digital Signatures
(which also means that the Signature field is 128 bytes long).
The Digital Signature EXT_AUTH header extension is then 132 bytes long.
</t>

<figure anchor="fig:signature_auth_he_with_1024b_sig"
        title="Example: Format of the Digital Signature EXT_AUTH Header Extension
        Using 1024-Bit Signatures, without Any Anti-Replay Protection"><artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   HET (=1)    |   HEL (=33)   |  ASID |  0  |0|      0        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ---
|                                                               | ^ 1
+                                                               + | 2
|                                                               | | 8
.                                                               . |
.                      Signature (128 bytes)                    . | b
.                                                               . | y
|                                                               | | t
+                                                               + | e
|                                                               | v s
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ---
      </artwork></figure>

</section>


</section><!-- =Digital Signature Scheme= -->


<!-- ==================================================================== -->

<section title="Elliptic Curve Digital Signature Scheme" anchor="sec_dig_ecc_sig">
<!-- ==================================== -->

<t>
This document focuses on the Elliptic Curve Digital Signature Algorithm (ECDSA).
However, <xref target="RFC6090"/> describes alternative elliptic curve techniques, 
like KT-I signatures. 
The use of such alternatives is not considered in this document, but may be added
in the future.
</t>

<section title="Authentication Header Extension Format" anchor="sec:ecc_signature_auth_he_format">
<!-- ------------------------------------ -->

<t>
The integration of ECC Digital Signatures is similar to that of RSA Digital Signatures.
Several fields are added, in addition to the HET and HEL fields, as
illustrated in <xref target="fig:signature_lct_integration"/>.
</t>

<t>
The fields of the Digital Signature EXT_AUTH header extension are
as follows:</t>

<t>ASID (4 bits):</t>
<t><list><t>
        The ASID identifies the source authentication scheme or protocol
        in use.
        The association between the ASID value and the actual authentication
        scheme is defined out-of-band, at session startup.
</t></list></t>

<t>rsvd (3 bits):</t>
<t><list><t>
        This is a reserved field that MUST be set to zero and ignored by receivers.
</t></list></t>

<t>AR (1 bit):</t>
<t><list><t>
        The AR field, when set to 0, indicates that the anti-replay service
        is not used.
        When set to 1, it indicates that the anti-replay service is used.
</t></list></t>

<t>SN (8 or 40 bits):</t>
<t><list><t>
        The SN field contains an optional Sequence Number.
        When AR = 0, this is an 8-bit field that MUST be set to zero. No anti-replay
        mechanism is used in that case.
        When AR = 1, this is a 40-bit field (32 bits + 8 bits), and all of the 40 bits MUST be considered
        by the anti-replay mechanism.
</t></list></t>

<t>Signature (variable size, multiple of 32 bits):</t>
<t><list><t>
        The Signature field contains a Digital Signature of the message.
        If need be, this field is padded (with 0) up to a multiple of
        32&nbsp;bits.
</t></list></t>


</section>


<section title="Parameters" anchor="ecc_signature_params">
<!-- ------------------------------------ -->

<t>
Several parameters MUST be initialized by an out-of-band mechanism.
The sender or group controller
<list style='symbols'>
<t>        MUST communicate its public key, for each receiver to
        be able to verify the signature of the packets received.
        As a side effect, the receivers also know the key length
        and the signature length, the two parameters being equal;</t>
<t>        MAY communicate a certificate (which also means
        that a PKI has been set up), for each receiver to be able to
        check the sender's public key;</t>
<t>        MUST communicate the message digest algorithm;</t>
<t>        MUST communicate the elliptic curve;</t>
<t>        MUST associate a value to the ASID field
        of the EXT_AUTH header extension
        (<xref target="sec:signature_auth_he_format"/>);</t>
<t>        MUST communicate whether or not the anti-replay service is used
        for this session.</t> 
</list>
These parameters MUST be communicated to all receivers before they can
authenticate the incoming packets. For instance, it can be communicated in
the session description, or initialized in a static way on the receivers,
or communicated by means of an appropriate protocol.
The details of this out-of-band mechanism are beyond the scope of this
document.
</t>

</section>


<section title="Processing" anchor="sec:ecc_signature_principles">
<!-- ------------------------------------ -->

<section title="Signature Processing" anchor="sec:ecc_signature_processing_principles">
<!-- ------------------------------------ -->

<t>
The computation of the ECC Digital Signature, using the private key, MUST include the ALC or NORM header (with the
various header extensions) and the payload when applicable.
The UDP/IP/MAC headers MUST NOT be included.
During this computation, the Signature field MUST be set to 0.
</t>

<t>
Several elliptic curve groups can be used, as well as several hash algorithms.
In practice, both choices are related, and there is a minimum hash algorithm size for
any key length.
Using a larger hash algorithm and then truncating the output is also feasible;
however, it consumes more processing power than is necessary.
In order to promote interoperability, <xref target="RFC4754"/>
and <xref target="RFC5480"/>
list several possible choices (see table below).
</t>

<texttable>
  <ttcol align="center">Digital Signature Algorithm Name [RFC4754]</ttcol>
  <ttcol align="center">Key Size</ttcol>
  <ttcol align="center">Message Digest Algorithm</ttcol>
  <ttcol align="center">Elliptic Curve</ttcol>
        <c>
        ECDSA-256 (default)
        </c>
        <c>
        256
        </c>
        <c>
        SHA-256
        </c>
        <c>
        secp256r1
        </c>

        <c>
        ECDSA-384
        </c>
        <c>
        384
        </c>
        <c>
        SHA-384
        </c>
        <c>
        secp384r1
        </c>

        <c>
        ECDSA-521
        </c>
        <c>
        512
        </c>
        <c>
        SHA-512
        </c>
        <c>
        secp521r1
        </c>
</texttable>

<t>
ECDSA-256, ECDSA-384, and ECDSA-521 are designed to offer
security comparable with AES-128, AES-192, and AES-256,
respectively <xref target="RFC4754"/>.
Among them, the use of ECDSA-256/secp256r1 is RECOMMENDED.
</t>

</section>

<section title="Anti-Replay Processing" anchor="sec:ecc_signature_anti_replay_processing_principles">
<!-- ------------------------------------ -->

<t>
The anti-replay processing follows the principles described in <xref target="sec:signature_anti_replay_processing_principles"/>.
</t>

</section>


</section>


<section title="In Practice"
        anchor="sec:ecc_signature_auth_he_use">
<!-- ------------------------------------ -->

<t>
Each packet sent MUST contain exactly one ECC Digital Signature EXT_AUTH header extension.
A receiver MUST drop all the packets that do not contain an ECC Digital Signature EXT_AUTH
header extension.
</t>

<t>
All receivers MUST recognize EXT_AUTH but might not be able to parse its content,
for instance, because they do not support ECC Digital Signatures.
In that case, the Digital Signature EXT_AUTH header extension is ignored.
</t>

<t>
If the anti-replay mechanism is used, each packet sent MUST contain a valid Sequence Number.
All the packets that fail to contain a valid Sequence Number MUST be immediately dropped.
</t>

<t>
For instance, <xref target="fig:ecc_signature_auth_he_with_256b_sig"/> shows the Digital Signature
EXT_AUTH header extension when using ECDSA-256 (256-bit) ECC Digital Signatures.
The ECC Digital Signature EXT_AUTH header extension is then 36 bytes long.
</t>

<figure anchor="fig:ecc_signature_auth_he_with_256b_sig"
        title="Example: Format of the ECC Digital Signature EXT_AUTH Header Extension
        Using ECDSA-256 Signatures, without Any Anti-Replay Protection"><artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   HET (=1)    |   HEL (=9)    |  ASID |  0  |0|      0        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ---
|                                                               | ^ 3
+                                                               + | 2
.                                                               . |
.                      Signature (32 bytes)                     . | b
.                                                               . | y
|                                                               | | t
+                                                               + | e
|                                                               | v s
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ---
      </artwork></figure>

</section>


</section><!-- Elliptic Curve Digital Signature Scheme= -->


<!-- ==================================================================== -->

<section title="Group-Keyed Message Authentication Code (MAC) Scheme" anchor="sec_group_mac">
<!-- ==================================== -->

<section title="Authentication Header Extension Format" anchor="sec:group_mac_auth_he_format">
<!-- ------------------------------------ -->

<t>
The integration of Group-keyed MAC is similar in ALC and NORM and relies on the 
header extension mechanism defined in both protocols.
More precisely, this document details the HET=1 (EXT_AUTH) header extension defined
in <xref target="RFC5651"/>.
</t>

<t>
Several fields are added, in addition to the HET and HEL
fields (<xref target="fig:group_mac_lct_integration"/>).
</t>

<figure title="Format of the Group-Keyed MAC EXT_AUTH Header Extension"
        anchor="fig:group_mac_lct_integration"><artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   HET (=1)    |      HEL      |  ASID | rsvd|A|               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+R+               +
~                  anti-replay Sequence Number (SN)             ~
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~                                                               ~
|                        Group-keyed MAC                        |
+                                               +-+-+-+-+-+-+-+-+
|                                               |    Padding    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      </artwork></figure>

<t>
The fields of the Group-keyed MAC EXT_AUTH header extension are
as follows:</t>

<t>ASID (4 bits):</t>
<t><list><t>
        The ASID identifies the source authentication scheme or protocol
        in use.
        The association between the ASID value and the actual authentication
        scheme is defined out-of-band, at session startup.
</t></list></t>

<t>rsvd (3 bits):</t>
<t><list><t>
        This is a reserved field that MUST be set to zero and ignored by receivers.
</t></list></t>

<t>AR (1 bit):</t>
<t><list><t>
        The AR field, when set to 0, indicates that the anti-replay service
        is not used.
        When set to 1, it indicates that the anti-replay service is used.
</t></list></t>

<t>SN (8 or 40 bits):</t>
<t><list><t>
        The SN field contains an optional Sequence Number.
        When AR = 0, this is an 8-bit field that MUST be set to zero. No anti-replay
        mechanism is used in that case.
        When AR = 1, this is a 40-bit field (32 bits + 8 bits), and all of the 40 bits MUST be considered
        by the anti-replay mechanism.
</t></list></t>

<t>Group-keyed MAC (variable size, multiple of 32 bits):</t>
<t><list><t>
        The Group-keyed MAC field contains a truncated Group-keyed MAC of the message.
        If need be, this field is padded (with 0) up to a multiple of 32 bits.
</t></list></t>


</section>


<section title="Parameters" anchor="group_mac_params">
<!-- ------------------------------------ -->

<t>
Several parameters MUST be initialized by an out-of-band mechanism.
The sender or group controller
<list style='symbols'>
<t>        MUST communicate the Cryptographic MAC Function --
        for instance, HMAC-SHA-1, HMAC-SHA-224, HMAC-SHA-256, HMAC-SHA-384, or HMAC&nbhy;SHA&nbhy;512.
        As a side effect, with these functions, the receivers also know the key length and the
        non-truncated MAC output length.
        Because of security threats on SHA-1, the use of HMAC-SHA-256 is
        RECOMMENDED <xref target="RFC6194"/>;
        </t>
<t>        MUST communicate the length of the truncated output of the MAC, n_m, which
        depends on the Cryptographic MAC Function chosen.
        Only the n_m leftmost bits (most significant bits) of the MAC
        output are kept. Of course, n_m MUST be less than or equal to the
        key length;</t>
<t>        MUST communicate the group key to the receivers, confidentially, before
        starting the session.
        This key might have to be periodically refreshed for improved robustness;
        </t>
<t>        MUST associate a value to the ASID field
        of the EXT_AUTH header extension
        (<xref target="sec:group_mac_auth_he_format"/>);</t>
<t>        MUST communicate whether or not the anti-replay service is used
        for this session.</t>
</list>
These parameters MUST be communicated to all receivers before they can
authenticate the incoming packets. For instance, it can be communicated in
the session description, or initialized in a static way on the receivers,
or communicated by means of an appropriate protocol (this will often be
the case when periodic re-keying is required).
The details of this out-of-band mechanism are beyond the scope of this
document.
</t>


</section>


<section title="Processing" anchor="sec:group_mac_principles">
<!-- ------------------------------------ -->

<section title="Signature Processing" anchor="sec:group_mac_processing_principles">
<!-- ------------------------------------ -->

<t>
The computation of the Group-keyed MAC, using the group key, includes the ALC or NORM header (with the various header
extensions) and the payload when applicable.
The UDP/IP/MAC headers are not included.
During this computation, the weak Group-keyed MAC field MUST be set to 0.
Then, the sender truncates the MAC output to keep the n_m most significant bits
and stores the result in the Group-keyed MAC Authentication Header. 
</t>
<t>
Upon receiving this packet, the receiver computes the Group-keyed MAC, using the group key, and compares
it to the value carried in the packet.
During this computation, the Group-keyed MAC field MUST also be set to 0.
If the check fails, the packet MUST be immediately dropped.
</t>

<t>
<xref target="RFC2104"/> explains that it is current practice to truncate the MAC
output, on condition that the truncated output length, n_m, be not less than half
the length of the hash and not less than 80 bits.
However, this choice is beyond the scope of this document.
</t>


</section>


<section title="Anti-Replay Processing" anchor="sec:group_mac_anti_replay_processing_principles">
<!-- ------------------------------------ -->

<t>
The anti-replay processing follows the principles described in <xref target="sec:signature_anti_replay_processing_principles"/>.
</t>


</section>


</section>


<section title="In Practice"
        anchor="sec:group_mac_auth_he_use">
<!-- ------------------------------------ -->

<t>
Each packet sent MUST contain exactly one Group-keyed MAC EXT_AUTH header extension.
A receiver MUST drop packets that do not contain a Group-keyed MAC EXT_AUTH header extension.
</t>

<t>
All receivers MUST recognize EXT_AUTH but might not be able to parse its content,
for instance, because they do not support Group-keyed MAC.
In that case, the Group-keyed MAC EXT_AUTH extension is ignored.
</t>

<t>
If the anti-replay mechanism is used, each packet sent MUST contain a valid Sequence Number.
All the packets that fail to contain a valid Sequence Number MUST be immediately dropped.
</t>

<t>
For instance, <xref target="fig:group_mac_auth_he_with_hmac_256"/> shows the Group-keyed MAC
EXT_AUTH header extension when using HMAC-SHA-256.
The Group-keyed MAC EXT_AUTH header extension is then 16 bytes long.
</t>

<figure anchor="fig:group_mac_auth_he_with_hmac_256"
        title="Example: Format of the Group-Keyed MAC EXT_AUTH Header Extension
        Using HMAC-SHA-256, without Any Anti-Replay Protection"><artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   HET (=1)    |    HEL (=4)   |  ASID |  0  |0|      0        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
+                                                               +
|                   Group-keyed MAC (16 bytes)                  |
+                                                               +
|                                                               |
+                                                               +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      </artwork></figure>

</section>


</section><!-- =Group MAC Scheme= -->


<!-- ==================================================================== -->

<section title="Combined Use of the RSA/ECC Digital Signatures and Group-Keyed MAC Schemes">
<!-- ==================================== -->

<section title="Authentication Header Extension Format" anchor="sec:combined_auth_he_format">
<!-- ------------------------------------ -->

<t>
The integration of combined RSA/ECC Digital Signatures and Group-keyed MAC
schemes is similar in ALC and NORM
and relies on the header extension mechanism defined in both protocols.
More precisely, this document details the HET=1 (EXT_AUTH) header extension defined
in <xref target="RFC5651"/>.
</t>

<t>
Several fields are added, in addition to the HET and HEL
fields (<xref target="fig:combined_lct_integration"/>).
</t>

<figure title="Format of the Group-Keyed MAC EXT_AUTH Header Extension"
        anchor="fig:combined_lct_integration"><artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   HET (=1)    |      HEL      |  ASID | rsvd|A|               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+R+               +
|                  anti-replay Sequence Number (SN)             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
~                                                               ~
|                           Signature                           |
+                                               +-+-+-+-+-+-+-+-+
|                                               |    Padding    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        Group-keyed MAC                        |
~                                                               ~
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      </artwork></figure>

<t>
The fields of the Group-keyed MAC EXT_AUTH header extension are
as follows:</t>

<t>ASID (4 bits):</t>
<t><list><t>
        The ASID identifies the source authentication scheme or protocol
        in use.
        The association between the ASID value and the actual authentication
        scheme is defined out-of-band, at session startup.
</t></list></t>

<t>rsvd (3 bits):</t>
<t><list><t>
        This is a reserved field that MUST be set to zero and ignored by receivers.
</t></list></t>

<t>AR (1 bit):</t>
<t><list><t>
        The AR field MUST be set to 1, indicating that the anti-replay service is used
        (see <xref target="sec:combined_use_principles"/>).
</t></list></t>

<t>SN (8 or 40 bits):</t>
<t><list><t>
        The SN field contains a Sequence Number.
        Since AR = 1, this is a 40-bit field (32 bits + 8 bits), and all of the 40 bits MUST be considered
        by the anti-replay mechanism.
</t></list></t>

<t>Signature (variable size, multiple of 32 bits):</t>
<t><list><t>
        The Signature field contains a Digital Signature of the message.
        If need be, this field is padded (with 0) up to a multiple of
        32&nbsp;bits.
</t></list></t>

<t>Group-keyed MAC (variable size, multiple of 32 bits, by default
32&nbsp;bits):</t>
<t><list><t>
        The Group-keyed MAC field contains a truncated Group-keyed MAC of the message.
</t></list></t>


</section>


<section title="Parameters" anchor="combined_params">
<!-- ------------------------------------ -->

<t>
Several parameters MUST be initialized by an out-of-band mechanism, as
defined in Sections <xref target="signature_params" format="counter"/>,
<xref target="ecc_signature_params" format="counter"/>,
and <xref target="group_mac_params" format="counter"/>.
</t>


</section>


<section title="Processing" anchor="sec:combined_use_principles">
<!-- ------------------------------------ -->

<t>
In some situations, it can be interesting to use both authentication
schemes.
The goal of the Group-keyed MAC is to mitigate denial-of-service (DoS) attacks coming from attackers
that are not group members <xref target="RFC4082"/>, by adding a light authentication
scheme as a front-end.
</t>

<section title="Signature Processing" anchor="sec:combined_processing_principles">
<!-- ------------------------------------ -->

<t>
Before sending a message, the sender sets the Signature field and Group-keyed MAC field to zero.
Then, the sender computes the signature as detailed in <xref target="sec:signature_principles"/>
or in <xref target="sec:ecc_signature_principles"/> and stores the value in the Signature field.
Then, the sender computes the Group-keyed MAC as detailed in <xref target="sec:group_mac_principles"/>
and stores the value in the Group-keyed MAC field.
The (RSA or ECC) Digital Signature value is therefore protected by the Group-keyed MAC, which
avoids DoS attacks where the attacker corrupts the Digital Signature itself.
</t>

<t>
Upon receiving the packet, the receiver first checks the Group-keyed MAC, as
detailed in <xref target="sec:group_mac_principles"/>.
If the check fails, the packet MUST be immediately dropped.
Otherwise, the receiver checks the Digital Signature, as detailed
in <xref target="sec:signature_principles"/>.
If the check fails, the packet MUST be immediately dropped.
</t>

<t>
This scheme features a few limits:
<list style='symbols'>
<t>The Group-keyed MAC is of no help if a group member (who knows the group key) impersonates
        the sender and sends forged messages to other receivers. DoS attacks are
        still feasible;</t>
<t>It requires an additional MAC computing for each packet,
        both at the sender and receiver sides;</t>
<t>It increases the size of the Authentication Headers.
        In order to limit this problem, the length of the truncated output of the
        MAC, n_m, SHOULD be kept small (see Section 9.5 of <xref target="RFC3711"/>).
        In the current specification, n_m MUST be a multiple of 32 bits, and
        the default value is 32 bits.
        As a side effect, with n_m = 32 bits, the authentication service is
        significantly weakened, since the probability that any packet would
        be successfully forged is one in 2^32.
        Since the Group-keyed MAC check is only a pre-check that is followed
        by the standard signature authentication check, this is not
        considered to be an issue.</t>
</list>
For a given use case, the benefits brought by the Group-keyed MAC must be balanced
against these limitations.
</t>

</section>

<section title="Anti-Replay Processing" anchor="sec:combined_anti_replay_processing_principles">
<!-- ------------------------------------ -->

<t>
The anti-replay processing follows the principles described in <xref target="sec:signature_anti_replay_processing_principles"/>.
Here, an anti-replay service MUST be used.
Indeed, failing to enable anti-replay protection would facilitate DoS attacks,
since all replayed (but otherwise valid) packets would pass the light authentication
scheme and oblige a receiver to perform a complex signature verification.
</t>

</section>


</section>


<section title="In Practice"
        anchor="sec:combined_use_auth_he_use">
<!-- ------------------------------------ -->

<t>
Each packet sent MUST contain exactly one combined Digital Signature/Group-keyed MAC EXT_AUTH header extension.
A receiver MUST drop packets that do not contain a combined Digital Signature/Group-keyed MAC EXT_AUTH header extension.
</t>

<t>
All receivers MUST recognize EXT_AUTH but might not be able to parse its content,
for instance, because they do not support combined Digital Signature/Group-keyed MAC.
In that case, the combined Digital Signature/Group-keyed MAC EXT_AUTH extension is ignored.
</t>

<t>
Since the anti-replay mechanism MUST be used, each packet sent MUST contain a valid Sequence Number.
All the packets that fail to contain a valid Sequence Number MUST be immediately dropped.
</t>

<t>
It is RECOMMENDED that the n_m parameter of the group authentication
scheme be small, and by default equal to 32 bits
(<xref target="sec:combined_use_principles"/>).
</t>

<t>
For instance, <xref target="fig:combined_auth_he_with_1024b_sig"/> shows the combined
Digital Signature/Group-keyed MAC
EXT_AUTH header extension when using 128-byte (1024&nbhy;bit) key RSA
Digital Signatures
(which also means that the Signature field is 128 bytes long).
The EXT_AUTH header extension is then 140 bytes long.
</t>

<figure anchor="fig:combined_auth_he_with_1024b_sig"
        title="Example: Format of the Combined RSA Digital Signature/Group-Keyed MAC EXT_AUTH Header Extension
        Using 1024-Bit Signatures, with Anti-Replay Protection"><artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   HET (=1)    |   HEL (=35)   |  ASID |  0  |1|               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               +
|                  anti-replay Sequence Number (SN)             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ---
|                                                               | ^ 1
+                                                               + | 2
|                                                               | | 8
.                                                               . |
.                      Signature (128 bytes)                    . | b
.                                                               . | y
|                                                               | | t
+                                                               + | e
|                                                               | v s
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ---
|                    Group-keyed MAC (32 bits)                  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ---
      </artwork></figure>

</section>


</section>


<!-- =================================================================== -->


<section title="Security Considerations">
<!-- ==================================== -->

<section title="Dealing with DoS Attacks">
<!-- =================================== -->

<t>
Let us consider packets secured through the use of a Digital Signature scheme first.
Because faked packets are easy to create but checking them requires computation
of a costly
Digital Signature, this scheme introduces new opportunities for an attacker to mount DoS attacks.
More precisely, an attacker can easily saturate the processing capabilities of the receiver.
</t>

<t>
In order to mitigate these attacks, it is RECOMMENDED that the combined
Digital Signature/Group-keyed MAC scheme (<xref
target="sec:combined_use_principles"/>) be used.
However, no mitigation is possible if a group member acts as an attacker.
Additionally, even if checking a Group-keyed MAC is significantly faster than checking
a Digital Signature, there are practical limits on how many Group-keyed MACs
can be checked
per time unit. Therefore, it is RECOMMENDED that limiting the number of
authentication
checks per time unit be done when the number of incoming packets that fail the authentication check
exceeds a given threshold (i.e., in the case of a DoS attack).
</t>

<t>
The RECOMMENDED action of limiting the number of checks per time unit under (presumed) attack
situations can be extended to the other authentication schemes.
</t>

</section>

<section title="Dealing with Replay Attacks">
<!-- =================================== -->

<t>
Replay attacks involve an attacker storing a valid message and replaying
it later.
It is RECOMMENDED that the anti-replay service defined in this document
be used with
the signature and Group-keyed MAC solutions, and this anti-replay service MUST be
used in the case of a combined use of signatures and Group-keyed MAC
schemes (see <xref target="sec:combined_anti_replay_processing_principles"/>).
</t>

<t>
The following section details some of the potential consequences of not using
anti-replay protection.
</t>


<section title="Impacts of Replay Attacks on the Simple Authentication Schemes">
<!-- =================================== -->

<t>
Since all the above authentication schemes are stateless, replay attacks
have no impact on these schemes.
</t>

</section>


<section title="Impacts of Replay Attacks on NORM" anchor="sec_replay_with_norm">
<!-- =================================== -->

<t>
In this subsection, we review the potential impacts of a replay attack
on the NORM component.
Note that we do not consider here the protocols that could be used along with
NORM -- for instance, congestion control protocols.
</t>

<t>
First, let us consider replay attacks within a given NORM session. As
NORM is a stateful protocol, replaying a packet may have consequences.
</t>

<t>
NORM defines a "sequence" field that may be used to protect against
replay attacks <xref target="RFC5740"/> within a given NORM session.
This sequence field is a 16-bit value that is set by the message
originator (sender or receiver) as a monotonically increasing number
incremented with each NORM message transmitted.
Using this field for anti-replay protection would be possible
if there is no wrapping to zero, i.e., would only be possible if at
most 65535 packets are sent;
this may be true for some use cases but not for the general case.
Using this field for anti-replay protection would also be possible
if the keying material is updated before wrapping to zero happens;
this may be true for some use cases but not for the general case.
</t>

<t>
Now, let us consider replay attacks across several NORM sessions.
A host participating in a NORM session is uniquely identified by
the {source_id; instance_id} tuple.
Therefore, when a given host participates in several NORM sessions, it is
RECOMMENDED that instance_id be changed for each NORM instance.
It is also RECOMMENDED, when the Group-keyed MAC authentication/integrity check
scheme is used, that the shared group key be changed across sessions.
Therefore, NORM can be made robust when confronted with replay attacks
across different sessions.
</t>


</section>


<section title="Impacts of Replay Attacks on ALC" anchor="sec_replay_with_alc">
<!-- =================================== -->

<t>
In this subsection, we review the potential impacts of a replay attack
on the ALC component.
Note that we do not consider here the protocols that could be used along with
ALC -- for instance, layered or wave-based congestion control protocols.
</t>

<t>
First, let us consider replay attacks within a given ALC session:
<list style='symbols'> 
        <t>Replayed encoding symbol:
        A replayed encoding symbol (coming from a replayed data packet)
        is detected, thanks to the object/block/symbol identifiers, and is
        silently discarded.
        </t>
        <t>Replayed control information:
        <list style='symbols'> 
                <t>At the end of the session, a "close session" (A flag) packet is sent.
                Replaying a packet containing this flag has no impact, since the receivers have
                already left the session.</t>
                <t>Similarly, replaying a packet containing a "close object"
                (B&nbsp;flag)
                has no impact, since this object is probably already marked as closed
                by the receiver.</t>
                <t>
                Timing information sent as part of a Layered Coding Transport (LCT) EXT_TIME header extension
                <xref target="RFC5651"/> may be more sensitive to replay attacks.
                For instance, replaying a packet containing an ERT (Expected Residual Time)
                may mislead a receiver to believe an object transmission will continue for
                some time whereas the transmission of symbols for this object is about to
                stop.
                Replaying a packet containing a Sender Current Time (SCT) is easily
                identified if the receiver verifies that time progresses upon receiving such
                EXT_TIME header extensions.
                Replaying a packet containing a Session Last Changed (SLC) is easily
                identified if the receiver verifies the chronology upon receiving such
                EXT_TIME header extensions.
                </t>
        </list>
        </t>
</list>
This analysis shows that ALC might be, to a limited extent, sensitive to replay attacks within
the same session if timing information is used.
Otherwise, ALC is robust when confronted with replay attacks within the
same session.
</t>

<t>
Now, let us consider replay attacks across several ALC sessions.
An ALC session is uniquely identified by the {sender IP address; TSI} tuple.
Therefore, when a given sender creates several sessions, the TSI MUST be changed
for each ALC session, so that each TSI is unique among all active sessions of this
sender and for a long period of time preceding and following when the session is active
<xref target="RFC5651"/>.
Therefore, ALC can be made robust when confronted with replay attacks
across different sessions.
Of course, when the Group-keyed MAC authentication/integrity check scheme is used, the
shared group key SHOULD be changed across sessions if the set of receivers changes.
</t>

</section>

</section>

<section title="Dealing with Attacks on the Parameters Sent Out-of-Band">
<!-- =================================== -->

<t>
This specification requires that several parameters be communicated to
the receiver(s) via an out-of-band mechanism that is beyond the scope of this document.
This is in particular the case for the mapping between an ASID value and the associated
authentication scheme (<xref target="sec_intro"/>).
Since this mapping is critical, this information SHOULD be carried in a secure
way from the sender to the receiver(s).
</t>

</section>

</section>


<section title="Acknowledgments">
<!-- ==================================== -->

<t>
The author is grateful to the authors of <xref target="RFC4303"/>, <xref target="RFC4359"/>,
<xref target="RFC4754"/>, and <xref target="RFC5480"/>;
their documents inspired several sections of the present document.
The author is also grateful to all the IESG members, and in particular to David Harrington,
Stephen Farrell, and Sean Turner for their very detailed reviews.
</t>

</section>


    </middle>


    <back>


<references title="Normative References">
<!-- ==================================== -->

      <reference anchor="RFC2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement Levels</title>
          <author initials="S." surname="Bradner">
            <organization />
          </author>
          <date month="March" year="1997" />
        </front>
        <seriesInfo name="BCP" value="14" />
        <seriesInfo name="RFC" value="2119" />
      </reference>

      <?rfc include='reference.RFC.5775'?>

        <reference anchor="RFC5651">
        <front>
                <title>Layered Coding Transport (LCT) Building Block</title>
                <author initials='M.' surname='Luby'>
                        <organization />
                </author>
                <author initials="M." surname="Watson">
                        <organization/>
                </author>
                <author initials='L.' surname='Vicisano'>
                        <organization />
                </author>
                <date month="October" year="2009"/>
        </front>
        <seriesInfo name="RFC" value="5651" />
        </reference>

      <?rfc include='reference.RFC.5740'?>

      <reference anchor="RFC2104">
        <front>
          <title abbrev="HMAC">HMAC: Keyed-Hashing for Message Authentication</title>
          <author initials="H." surname="Krawczyk" fullname="Hugo Krawczyk">
            <organization>IBM, T.J. Watson Research Center</organization>
          </author>
          <author initials="M." surname="Bellare" fullname="Mihir Bellare">
            <organization>University of California at San Diego, Dept of Computer Science and Engineering</organization>
          </author>
          <author initials="R." surname="Canetti" fullname="Ran Canetti">
            <organization>IBM T.J. Watson Research Center</organization>
          </author>
          <date year="1997" month="February"/>
        </front>
        <seriesInfo name="RFC" value="2104"/>
        <format type="TXT" octets="22297" target="ftp://ftp.isi.edu/in-notes/rfc2104.txt"/>
      </reference>

</references>


<references title="Informative References">
<!-- ==================================== -->

      <?rfc include='reference.RFC.4303'?>

      <reference anchor="RFC4082">
        <front>
          <title>Timed Efficient Stream Loss-Tolerant Authentication (TESLA):
          Multicast Source Authentication Transform Introduction
          </title>
          <author initials="A." surname="Perrig" fullname="A. Perrig">
            <organization/></author>
          <author initials="D." surname="Song" fullname="D. Song">
            <organization/></author>
          <author initials="R." surname="Canetti" fullname="R. Canetti">
            <organization/></author>
          <author initials="J.D." surname="Tygar" fullname="J.D. Tygar">
            <organization/></author>
          <author initials="B." surname="Briscoe" fullname="B. Briscoe">
            <organization/></author>
          <date year="2005" month="June"/>
        </front>
        <seriesInfo name="RFC" value="4082"/>
        <format type="TXT" octets="54316" target="ftp://ftp.isi.edu/in-notes/rfc4082.txt"/>
      </reference>

      <?rfc include='reference.RFC.5776'?>

<!-- draft-ietf-rmt-flute-revised  (IESG Evaluation::AD Followup) -->
      <reference anchor="RMT-FLUTE">
        <front>
          <title>FLUTE - File Delivery over Unidirectional Transport</title>
          <author initials="T." surname="Paila" fullname="T. Paila">
            <organization/></author>
          <author initials="R." surname="Walsh" fullname="R. Walsh">
            <organization/></author>
          <author initials="M." surname="Luby" fullname="M. Luby">
            <organization/></author>
          <author initials="V." surname="Roca" fullname="V. Roca">
            <organization/></author>
          <author initials="R." surname="Lehtonen" fullname="R. Lehtonen">
            <organization/></author>
          <date year="2012" month="March"/>
        </front>
        <seriesInfo name="Work in" value="Progress"/>
      </reference>

      <?rfc include='reference.RFC.6090'?>

      <reference anchor="RFC3711">
        <front>
          <title>The Secure Real-time Transport Protocol (SRTP)</title>
          <author initials="M." surname="Baugher" fullname="M. Baugher"><organization/></author>
          <author initials="D." surname="McGrew" fullname="D. McGrew"><organization/></author>
          <author initials="M." surname="Naslund" fullname="M. Naslund"><organization/></author>
          <author initials="E." surname="Carrara" fullname="E. Carrara"><organization/></author>
          <author initials="K." surname="Norrman" fullname="K. Norrman"><organization/></author>
          <date year="2004" month="March"/>
      </front>
      <seriesInfo name="RFC" value="3711"/>
      <format type="TXT" octets="134270" target="ftp://ftp.isi.edu/in-notes/rfc3711.txt"/>
      </reference>

      <reference anchor="RFC4359">
        <front>
          <title>
          The Use of RSA/SHA-1 Signatures within Encapsulating Security Payload (ESP) and Authentication Header (AH)
          </title>
          <author initials="B." surname="Weis" fullname="B. Weis"><organization/></author>
          <date year="2006" month="January"/>
        </front>
        <seriesInfo name="RFC" value="4359"/>
        <format type="TXT" octets="26989" target="ftp://ftp.isi.edu/in-notes/rfc4359.txt"/>
      </reference>

        <reference anchor="RFC3447">
                <front>
                        <title>Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1</title>
                        <author initials="J." surname="Jonsson" fullname="J. Jonsson"> <organization/> </author>
                        <author initials="B." surname="Kaliski" fullname="B. Kaliski"> <organization/> </author>
                        <date year="2003" month="February"/>
                </front>
                <seriesInfo name="RFC" value="3447"/>
                <format type="TXT" octets="143173" target="ftp://ftp.isi.edu/in-notes/rfc3447.txt"/>
        </reference>

        <reference anchor='RFC4754'>
                <front>
                        <title>IKE and IKEv2 Authentication Using the Elliptic Curve Digital Signature Algorithm (ECDSA)</title>
                        <author initials='D.' surname='Fu' fullname='D. Fu'> <organization /></author>
                        <author initials='J.' surname='Solinas' fullname='J. Solinas'> <organization /></author>
                        <date year='2007' month='January' />
                </front>
                <seriesInfo name='RFC' value='4754' />
                <format type='TXT' octets='27948' target='ftp://ftp.isi.edu/in-notes/rfc4754.txt' />
        </reference>

        <reference anchor="RFC5480">
                <front>
                        <title>Elliptic Curve Cryptography Subject Public Key Information</title>
                        <author initials='S.' surname='Turner' fullname='S. Turner'> <organization /></author>
                        <author initials='D.' surname='Brown' fullname='D. Brown'> <organization /></author>
                        <author initials='K.' surname='Yiu' fullname='K. Yiu'> <organization /></author>
                        <author initials='R.' surname='Housley' fullname='R. Housley'> <organization /></author>
                        <author initials='T.' surname='Polk' fullname='T. Polk'> <organization /></author>
                        <date year='2009' month='March' />
                </front>
                <seriesInfo name='RFC' value='5480' />
        </reference>

        <?rfc include='reference.RFC.5751'?>

        <?rfc include='reference.RFC.6194'?>

    </references>

    </back>

</rfc>
