<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>


<?rfc toc="yes"?>
<?rfc tocdepth="3"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="no" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc rfcprocack="yes" ?>


<rfc category="bcp" ipr="trust200902" obsoletes="6434" number="8504"
     submissionType="IETF" consensus="yes" seriesNo="220">

  <front>
    <title>IPv6 Node Requirements</title>


    <author fullname="Tim Chown" initials="T." surname="Chown">
      <organization> Jisc </organization>
      <address>
        <postal>
          <street> Lumen House, Library Avenue </street>
          <city> Harwell Oxford, Didcot</city>
          <code> OX11 0SG </code>
          <country>United Kingdom</country>
        </postal>
        <email> tim.chown@jisc.ac.uk </email>
      </address>
    </author>

    <author fullname="John Loughney" initials="J" surname="Loughney">
      <organization>Intel</organization>
      <address>
        <postal>
          <street></street>
          <city> Santa Clara, CA</city>
          <code></code>
           <country>United States of America</country>
        </postal>
        <phone></phone>
        <email>john.loughney@gmail.com</email>
      </address>
    </author>

    <author fullname="Timothy Winters" initials="T." surname="Winters">
      <organization abbrev="UNH-IOL">University of New Hampshire, Interoperability Lab (UNH-IOL)</organization>
      <address>
        <postal>
          <street></street>
          <city> Durham</city>
          <region>NH</region>
          <code></code>
          <country>United States of America</country>
        </postal>
        <email>twinters@iol.unh.edu</email>
      </address>
    </author>


    <date month="January" year="2019" />
    <area> Internet </area>
    <workgroup>Internet Engineering Task Force</workgroup>


<keyword>IPv6</keyword>
<keyword>Internet Protocol Version 6</keyword>
<keyword>Internet Protocol</keyword>
<keyword>IP</keyword>

  <abstract>
    <t>This document defines requirements for IPv6 nodes.  It is
    expected that IPv6 will be deployed in a wide range of devices and
    situations.  Specifying the requirements for IPv6 nodes allows
    IPv6 to function well and interoperate in a large number of
    situations and deployments.</t>

    <t>This document obsoletes RFC 6434, and in turn RFC 4294.</t>

  </abstract>

</front>

<middle>

  <section title="Introduction">

    <t>This document defines common functionality required by both
    IPv6 hosts and routers.  Many IPv6 nodes will implement optional
    or additional features, but this document collects and summarizes
    requirements from other published Standards Track documents in one
    place.</t>

    <t>This document tries to avoid discussion of protocol details
    and references RFCs for this purpose.  This document is intended
    to be an applicability statement and to provide guidance as to which
    IPv6 specifications should be implemented in the general case and
    which specifications may be of interest to specific deployment
    scenarios. This document does not update any individual protocol
    document RFCs.</t>

    <t>Although this document points to different specifications, it
    should be noted that in many cases, the granularity of a
    particular requirement will be smaller than a single specification,
    as many specifications define multiple, independent pieces, some
    of which may not be mandatory. In addition, most specifications
    define both client and server behavior in the same specification,
    while many implementations will be focused on only one of those
    roles. </t>

    <t> This document defines a minimal level of requirement needed
    for a device to provide useful Internet service and considers a
    broad range of device types and deployment scenarios. Because of
    the wide range of deployment scenarios, the minimal requirements
    specified in this document may not be sufficient for all
    deployment scenarios. It is perfectly reasonable (and indeed
    expected) for other profiles to define additional or stricter
    requirements appropriate for specific usage and deployment
    environments. As an example, this document does not mandate that all
    clients support DHCP, but some deployment scenarios may deem
    it appropriate to make such a requirement. As another example,
    NIST has defined profiles for specialized requirements for IPv6 
    in target environments (see <xref target='USGv6' />).</t>


    <t>As it is not always possible for an implementer to know the
    exact usage of IPv6 in a node, an overriding requirement for IPv6
    nodes is that they should adhere to Jon Postel's Robustness
    Principle: "Be conservative in what you do, be liberal in what you accept
      from others" <xref target='RFC0793' />.</t>

   <section title="Scope of This Document">
     <t> IPv6 covers many specifications.  It is intended that IPv6
     will be deployed in many different situations and environments.
     Therefore, it is important to develop requirements for IPv6
     nodes to ensure interoperability. </t>

   </section>


  <section title="Description of IPv6 Nodes">

    <t>From "Internet Protocol, Version 6 (IPv6) Specification" <xref target='RFC8200' />, we have 
    the following definitions:</t>

<figure><artwork><![CDATA[
IPv6 node   - a device that implements IPv6.
IPv6 router - a node that forwards IPv6 packets not explicitly 
              addressed to itself.
IPv6 host   - any IPv6 node that is not a router.
]]></artwork></figure>

  </section>

  </section>

  <section title="Requirements Language">
    <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
    "MAY", and "OPTIONAL" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.</t>
  </section>


  <section title="Abbreviations Used in This Document">

<figure><artwork><![CDATA[
AH    Authentication Header
DAD   Duplicate Address Detection
ESP   Encapsulating Security Payload
ICMP  Internet Control Message Protocol
IKE   Internet Key Exchange
MIB   Management Information Base
MLD   Multicast Listener Discovery
MTU   Maximum Transmission Unit
NA    Neighbor Advertisement
NBMA  Non-Broadcast Multi-Access
ND    Neighbor Discovery
NS    Neighbor Solicitation
NUD   Neighbor Unreachability Detection
PPP   Point-to-Point Protocol
]]></artwork></figure>

  </section>

  <section title="Sub-IP Layer">

    <t>An IPv6 node MUST include support for one or more IPv6
    link-layer specifications.  Which link-layer specifications an
    implementation should include will depend upon what link layers
    are supported by the hardware available on the system.  It is
    possible for a conformant IPv6 node to support IPv6 on some of its
    interfaces and not on others. </t>

    <t>As IPv6 is run over new Layer 2 technologies, it is expected
    that new specifications will be issued.  We list here some of
the Layer 2 technologies for which an IPv6 specification has been developed. 
It is provided for informational purposes only and may
    not be complete.</t>

    <t>
	<list style="hanging">
	  
	  <t hangText="-"> Transmission of IPv6 Packets over Ethernet
	  Networks <xref target='RFC2464' /></t>
	  
	  <t hangText="-"> Transmission of IPv6 Packets over Frame
	  Relay Networks Specification <xref target='RFC2590' /></t>
	  
	  <t hangText="-"> Transmission of IPv6 Packets over IEEE 1394
	  Networks <xref target='RFC3146' /></t>
	  
	  <t hangText="-"> Transmission of IPv6, IPv4, and Address
	  Resolution Protocol (ARP) Packets over Fibre Channel
	  <xref target='RFC4338' /></t>
	  
	  <t hangText="-"> Transmission of IPv6 Packets over IEEE
	  802.15.4 Networks <xref target='RFC4944' /></t>
	  
	  <t hangText="-"> Transmission of IPv6 via the IPv6
	  Convergence Sublayer over IEEE 802.16 Networks
	  <xref target='RFC5121' /></t>

	  <t hangText="-"> IP version 6 over PPP
	  <xref target='RFC5072' /></t>

	</list>

    </t>

    <t> In addition to traditional physical link layers, it is also
    possible to tunnel IPv6 over other protocols. Examples
    include:</t>

    <t>
	<list style="hanging">
	  
	  <t hangText="-"> Teredo: Tunneling IPv6 over UDP through
	  Network Address Translations (NATs) <xref target='RFC4380'
	  /></t>

	  <t hangText="-"> Basic Transition Mechanisms for IPv6
Hosts and Routers (see Section 3 of <xref target='RFC4213' />)</t>

    
	</list>

    </t>

  </section>

  <section title="IP Layer">

    <section title="Internet Protocol Version 6 - RFC 8200">

      <t>The Internet Protocol version 6 is specified in <xref target='RFC8200' />.  This specification MUST be supported.</t>

      <t>The node MUST follow the packet transmission rules in RFC 8200.</t>

      <t>All conformant IPv6 implementations MUST be
      capable of sending and receiving IPv6 packets; forwarding
      functionality MAY be supported. 
	Nodes MUST always be able to send, receive, and process
      Fragment headers. </t>

	<t> IPv6 nodes MUST not create
         overlapping fragments.  Also, when reassembling an IPv6
         datagram, if one or more of its constituent fragments is
         determined to be an overlapping fragment, the entire datagram
         (and any constituent fragments) MUST be silently discarded.
         See <xref target="RFC5722"/> for more information.</t>

<t>
	As recommended in <xref target='RFC8021'/>, nodes MUST NOT
	generate atomic fragments, i.e., where the fragment is a whole datagram.
	As per <xref target='RFC6946'/>, if a receiving node reassembling 
	a datagram encounters an atomic fragment,
         it should be processed as a fully reassembled packet, and
         any other fragments that match this packet should be processed independently.
</t>

	<t>
	To mitigate a variety of potential attacks, 
	nodes SHOULD avoid using predictable Fragment Identification values
    	in Fragment headers, as discussed in <xref target='RFC7739'/>.
	</t>

<t>All nodes SHOULD support the setting and use of the IPv6 Flow
Label field as defined in the IPv6 Flow Label specification
<xref target='RFC6437' />.  Forwarding nodes such as routers and load distributors
MUST NOT depend only on Flow Label values being uniformly
distributed.  It is RECOMMENDED that source hosts support the flow
label by setting the Flow Label field for all packets of a given
flow to the same value chosen from an approximation to a discrete
uniform distribution.

</t>
 
    </section>
 
    <section title="Support for IPv6 Extension Headers">

      <t>RFC 8200 specifies extension headers and the processing for
      these headers.</t>

	<t>
	Extension headers (except for the Hop-by-Hop Options header) are not
   processed, inserted, or deleted by any node along a packet's delivery
   path, until the packet reaches the node (or each of the set of nodes,
   in the case of multicast) identified in the Destination Address field
   of the IPv6 header.
	</t>

      <t>Any unrecognized extension headers or options MUST be
      processed as described in RFC 8200. Note that where 
	Section 4 of RFC 8200
	refers to the action to be taken when a Next Header value 
	in the current header is not recognized by a node, that action
	applies whether the value is an unrecognized extension
	header or an unrecognized upper-layer protocol (ULP).  </t>

      <t> An IPv6 node MUST be able to process these extension headers.  An
	exception is Routing Header type 0 (RH0), which was deprecated
	by <xref target='RFC5095' /> due to security concerns and
	which MUST be treated as an unrecognized routing type.</t>

	<t>
	Further, <xref target='RFC7045'/> adds specific requirements for
	the processing of extension headers, in particular that any forwarding 
	node along an IPv6 packet's path, which forwards the packet for 
	any reason, SHOULD do so regardless of any extension headers 
	that are present. 
	</t>

	<t>
	As per RFC 8200, when a node fragments an IPv6 datagram, 
	it MUST include the entire IPv6 Header Chain in the first fragment.
	The Per-Fragment headers MUST 
	consist of the IPv6 header plus any extension headers that MUST be 
	processed by nodes en route to the destination,
	that is, all headers up to and including the Routing
      	header if present, else the Hop-by-Hop Options header if present,
      	else no extension headers.  On reassembly, 
	if the first fragment does not include all headers through an
        upper-layer header, then that fragment SHOULD be discarded and
         an ICMP Parameter Problem, Code 3, message SHOULD be sent to
         the source of the fragment, with the Pointer field set to zero.
	See <xref target='RFC7112'/> for a discussion of why oversized 
	IPv6 Extension Header Chains are avoided.
	</t>

	<t>
	Defining new IPv6 extension headers is not recommended, unless there
	are no existing IPv6 extension headers that can be used by specifying
	a new option for that IPv6 extension header.  A proposal to specify a
	new IPv6 extension header MUST include a detailed technical
	explanation of why an existing IPv6 extension header can not be used
	for the desired new function, and in such cases, it needs to follow the format
	described in Section 8 of RFC 8200.  For further background
	reading on this topic, see <xref target='RFC6564'/>.
	</t>

    </section>

    <section title="Protecting a Node from Excessive Extension Header Options">

<t>
As per RFC 8200, end hosts are expected to process all extension headers,
destination options, and hop-by-hop options in a packet. Given that
the only limit on the number and size of extension headers is the MTU,
the processing of received packets could be considerable. It is also
conceivable that a long chain of extension headers might be used as a
form of denial-of-service attack. Accordingly, a host may place limits
on the number and sizes of extension headers and options it is willing
to process.
</t>

<t>
A host MAY limit the number of consecutive PAD1 options in destination
options or hop-by-hop options to 7. 

In this case, if there are more than 7
consecutive PAD1 options present, the packet MAY be
silently discarded. The rationale is that if padding of 8 or more
bytes is required, then the PADN option SHOULD be used.
</t>

<t>
A host MAY limit the number of bytes in a PADN option to be less than
8. In such a case, if a PADN option is present that has a length
greater than 7, the packet SHOULD be silently discarded. The
rationale for this guideline is that the purpose of padding is for
alignment and 8 bytes is the maximum alignment used in IPv6.
</t>

<t>
A host MAY disallow unknown options in destination options or
hop-by-hop options. This SHOULD be configurable where the default is
to accept unknown options and process them per 
<xref target='RFC8200' />. If a packet
with unknown options is received and the host is configured to
disallow them, then the packet SHOULD be silently discarded.
</t>

<t>
A host MAY impose a limit on the maximum number of non-padding options
allowed in the destination options and hop-by-hop extension headers. If
this feature is supported, the maximum number SHOULD be configurable,
and the default value SHOULD be set to 8. The limits for
destination options and hop-by-hop options may be separately
configurable. If a packet is received and the number of destination or
hop-by-hop options exceeds the limit, then the packet SHOULD be
silently discarded.
</t>

<t>
A host MAY impose a limit on the maximum length of Destination Options
or Hop-by-Hop Options extension headers. This value SHOULD be
configurable, and the default is to accept options of any length. If a
packet is received and the length of the Destination or Hop-by-Hop Options
extension header exceeds the length limit, then the packet SHOULD be
silently discarded.
</t>

    </section>

    <section title="Neighbor Discovery for IPv6 - RFC 4861" anchor="ND">

      <t>Neighbor Discovery is defined in <xref target='RFC4861' />; the
definition was updated by <xref target='RFC5942' />. Neighbor Discovery
      MUST be supported with the noted exceptions below.  RFC 4861 states:</t>
<!--Begin DNE text--> <!--Note: capped 'Next-hop' to match the quoted text -->
      <t><list style='hanging'> <t>
   Unless specified otherwise (in a document that covers operating IP
   over a particular link type) this document applies to all link types.
   However, because ND uses link-layer multicast for some of its
   services, it is possible that on some link types (e.g., Non&nbhy;Broadcast
   Multi-Access (NBMA) links), alternative protocols or mechanisms to
   implement those services will be specified (in the appropriate
   document covering the operation of IP over a particular link type).
   The services described in this document that are not directly
   dependent on multicast, such as Redirects, Next-hop determination,
   Neighbor Unreachability Detection, etc., are expected to be provided
   as specified in this document.
The details of how one uses ND on
  NBMA links are addressed in <xref target='RFC2491' />.  
</t> </list></t>
<!--End DNE text-->
      <t>Some detailed analysis of Neighbor Discovery follows:</t>

      <t>Router Discovery is how hosts locate routers that reside on
      an attached link.  Hosts MUST support Router Discovery
      functionality.</t>

      <t>Prefix Discovery is how hosts discover the set of address
      prefixes that define which destinations are on-link for an
      attached link. Hosts MUST support Prefix Discovery.</t>

      <t>Hosts MUST also implement Neighbor Unreachability Detection
      (NUD) for all paths between hosts and neighboring nodes.  NUD is
      not required for paths between routers.  However, all nodes MUST
      respond to unicast Neighbor Solicitation (NS) messages.</t>

	<t>
	<xref target='RFC7048'/> discusses NUD, in particular cases
	where it behaves too impatiently. It states that if a node
	 transmits more than a certain number of packets, then it 
	SHOULD use the exponential backoff of the retransmit timer,
	up to a certain threshold point.
	</t>

      <t>Hosts MUST support the sending of Router Solicitations and
      the receiving of Router Advertisements (RAs).  The ability to
      understand individual RA options is dependent
      on supporting the functionality making use of the particular
      option.</t>

	<t>
	<xref target='RFC7559'/> discusses packet loss resiliency 
	for Router Solicitations and requires that nodes MUST use 
	a specific exponential backoff algorithm for retransmission of Router
	Solicitations.
	</t>

      <t>All nodes MUST support the sending and receiving of Neighbor
      Solicitation (NS) and Neighbor Advertisement (NA) messages.  NS
      and NA messages are required for Duplicate Address Detection
      (DAD).</t>

      <t>Hosts SHOULD support the processing of Redirect
      functionality.  Routers MUST support the sending of Redirects,
      though not necessarily for every individual packet (e.g., due to
      rate limiting). Redirects are only useful on networks supporting
      hosts. In core networks dominated by routers, Redirects are
      typically disabled.  The sending of Redirects SHOULD be disabled
      by default on routers intended to be deployed on core networks. They MAY 
      be enabled by default on routers intended to support hosts on edge networks. </t>

<t>
As specified in <xref target='RFC6980'/>, nodes MUST NOT employ IPv6 fragmentation for sending any of the following Neighbor Discovery and SEcure Neighbor Discovery messages: Neighbor Solicitation, Neighbor Advertisement, Router Solicitation, Router Advertisement, Redirect, or Certification Path Solicitation.  Nodes MUST silently ignore any of these messages on receipt if fragmented.  See RFC 6980 for details and motivation.
</t>

      <t> "IPv6 Host-to-Router Load Sharing" <xref target='RFC4311'/> includes additional recommendations on how to select from a
      set of available routers. <xref target='RFC4311'/> SHOULD be supported. </t>


    </section>

    <section title="SEcure Neighbor Discovery (SEND) - RFC 3971">

      <t>
	SEND <xref target='RFC3971' /> and Cryptographically Generated
	Addresses (CGAs) <xref target='RFC3972' /> provide a way to
	secure the message exchanges of Neighbor Discovery. SEND 
	has the potential to address certain classes of spoofing
	attacks, but it does not provide specific protection for threats
	from off-link attackers. 
	</t>
	<t>
	There have been relatively few implementations of SEND 
	in common operating systems and platforms since its publication in 2005;
	thus, deployment experience remains very limited to date.
	</t>

      <t>At this time, support for SEND is considered optional. Due to the
	complexity in deploying SEND and its heavyweight provisioning,
	its deployment is only
	likely to be considered where nodes are operating in a
	particularly strict security environment.</t>

    </section>
 
    <section title="IPv6 Router Advertisement Flags Option - RFC 5175">

      <t> Router Advertisements include an 8-bit field of single-bit
      Router Advertisement flags.  The Router Advertisement Flags
      Option extends the number of available flag bits by 48 bits. At
      the time of this writing, 6 of the original 8 single-bit flags have
      been assigned, while 2 remain available for future
      assignment. No flags have been defined that make use of the new
      option; thus, strictly speaking, there is no requirement to
      implement the option today. However, implementations that are
      able to pass unrecognized options to a higher-level entity that
      may be able to understand them (e.g., a user-level process using
      a "raw socket" facility) MAY take steps to handle the option in
      anticipation of a future usage.</t>
    
    </section>

    <section title="Path MTU Discovery and Packet Size">

      <section title="Path MTU Discovery - RFC 8201">

        <t> "Path MTU Discovery for IP version 6" <xref target='RFC8201' /> SHOULD be
	  supported.  From <xref target='RFC8200' />:</t>

        <t><list style='hanging'>
            <t> It is strongly recommended that IPv6 nodes implement
	    Path MTU Discovery <xref target='RFC8201' />, in order to
            discover and 
	    take advantage of path MTUs greater than 1280 octets.
	    However, a minimal IPv6 implementation (e.g., in a boot
	    ROM) may simply restrict itself to sending packets no
	    larger than 1280 octets, and omit implementation of Path
	    MTU Discovery.</t>

        </list></t>
	<t> The rules in <xref target='RFC8200' /> and
	  <xref target='RFC5722' /> MUST be followed for packet
	  fragmentation and reassembly.  </t>

<t>
	As described in RFC 8201,
   nodes implementing Path MTU Discovery and sending packets larger than
   the IPv6 minimum link MTU are susceptible to problematic connectivity
   if ICMPv6 messages are blocked or not transmitted.  For
   example, this will result in connections that complete the TCP 
   three-way handshake correctly but then hang when data is transferred.  This
   state is referred to as a black-hole connection 
	<xref target='RFC2923' />.  Path MTU
   Discovery relies on ICMPv6 Packet Too Big (PTB) to determine the MTU
   of the path (and thus these MUST NOT be filtered, as per the
	recommendation in <xref target='RFC4890' />).
	</t>
<t>
   An alternative to Path MTU Discovery defined in RFC 8201 can be
   found in <xref target='RFC4821' />, which defines a method for Packetization
   Layer Path MTU Discovery (PLPMTUD) designed for use over paths where
   delivery of ICMPv6 messages to a host is not assured.
    </t>

      </section>

      <section title="Minimum MTU Considerations">
	<t>
	While an IPv6 link MTU can be set to 1280 bytes, 
	it is recommended that for IPv6 UDP in particular, 
	which includes DNS operation, the sender use a 
	large MTU if they can, in order to avoid gratuitous 
	fragmentation-caused packet drops.
	</t>

      </section>

    </section>

    <section title="ICMP for the Internet Protocol Version 6 (IPv6) - RFC 4443">

      <t>ICMPv6 <xref target='RFC4443' /> MUST be supported. "Extended
      ICMP to Support Multi-Part Messages" <xref target='RFC4884' />
      MAY be supported.</t>

      </section>

    <section title="Default Router Preferences and More-Specific Routes - RFC 4191">

    <t>"Default Router Preferences and More-Specific Routes" <xref target='RFC4191' /> provides support for nodes attached to
    multiple (different) networks, each providing routers that
    advertise themselves as default routers via Router
    Advertisements. In some scenarios, one router may provide
    connectivity to destinations that the other router does not, and
    choosing the "wrong" default router can result in reachability
    failures. In order to resolve this scenario, IPv6 nodes MUST implement <xref target='RFC4191' /> 
    and SHOULD implement the Type C host role defined in RFC 4191.</t>

    </section>

    <section title="First-Hop Router Selection - RFC 8028">

	<t>
	In multihomed scenarios, where a host has more than one prefix, 
	each allocated by an upstream network that is assumed to implement 
	BCP 38 ingress filtering, the host may have multiple routers to 
	choose from.
	</t>

	<t>Hosts that may be deployed in such multihomed environments
	SHOULD follow the guidance given in <xref target='RFC8028' />.
	</t>
    </section>

    <section title="Multicast Listener Discovery (MLD) for IPv6 - RFC 3810" anchor="mld">

      <t> Nodes that need to join multicast groups MUST support MLDv2
      <xref target='RFC3810' />. MLD is needed by any node that is
      expected to receive and process multicast traffic; in particular,
	MLDv2 is required for support for source-specific multicast (SSM) as 
	per <xref target='RFC4607' />.
	</t>

      <t> Previous versions of this specification only required MLDv1 
	<xref target='RFC2710' /> to be implemented 
      on all nodes.  Since participation of any
      MLDv1-only nodes on a link require that all other nodes on the link then
      operate in version 1 compatibility mode, the requirement to support MLDv2
      on all nodes was upgraded to a MUST. Further, SSM is now the preferred
	multicast distribution method, rather than Any-Source Multicast (ASM).</t>

	<t>
	Note that
      Neighbor Discovery (as used on most link types -- see <xref
target="ND" />) depends on multicast and requires that nodes join Solicited
      Node multicast addresses.</t>

  </section>

	<section title="Explicit Congestion Notification (ECN) - RFC 3168">

	<t>
	An ECN-aware router sets a mark in the IP header in order to signal 
	impending congestion, rather than dropping a packet. The receiver of 
	the packet echoes the congestion indication to the sender, which can then
	reduce its transmission rate as if it detected a dropped packet.
	</t>

        <t>Nodes SHOULD support ECN <xref target='RFC3168' /> by implementing an interface 
        for the upper layer to access and by setting the ECN bits in the IP header.  
        The benefits of using ECN are documented in <xref target='RFC8087' />.</t> 
	</section>

</section>

    <section title="Addressing and Address Configuration">

    <section title="IP Version 6 Addressing Architecture - RFC 4291">
        <t>The IPv6 Addressing Architecture <xref target='RFC4291' />
        MUST be supported.</t> 

	<t>The current IPv6 Address Architecture is based on a 64-bit boundary for subnet prefixes.  
        The reasoning behind this decision is documented in <xref target='RFC7421'/>.
	</t>

        <t>Implementations MUST also support the multicast flag updates 
        documented in <xref target='RFC7371' />. </t>

    </section>

      <section title="Host Address Availability Recommendations">
	<t>
	Hosts may be configured with addresses through a variety of methods,
	including Stateless Address Autoconfiguration (SLAAC), DHCPv6, or manual configuration.
	</t>	
	<t>
	<xref target='RFC7934'/> recommends that networks provide general-purpose end
   	hosts with multiple global IPv6 addresses when they attach, and it
   	describes the benefits of and the options for doing so.  Routers SHOULD support 
        <xref target='RFC7934'/> for assigning multiple addresses to a host.  A host SHOULD support 
        assigning multiple addresses as described in <xref target='RFC7934'/>. 
	</t>
	<t>Nodes SHOULD support the capability to be assigned a prefix per host as
        documented in <xref target='RFC8273' />.
        Such an approach can offer improved host
        isolation and enhanced subscriber management on shared network segments.
        </t>
	</section>

      <section title="IPv6 Stateless Address Autoconfiguration - RFC 4862">
 
        <t>Hosts MUST support IPv6 Stateless Address Autoconfiguration.
	It is RECOMMENDED, as described in <xref target='RFC8064'/>, that unless there
	is a specific requirement for Media Access Control (MAC) addresses to be embedded in
	an Interface Identifier (IID), nodes follow the procedure in <xref target='RFC7217'/> to generate SLAAC-based
	addresses, rather than use <xref target='RFC4862' />. 
   Addresses generated using the method described in <xref target="RFC7217" /> will be the same whenever a given device (re)appears on the
   same subnet (with a specific IPv6 prefix), but the IID will vary on
   each subnet visited.
	</t>

        <t>Nodes that are routers MUST be able to generate link-local
        addresses as described in <xref target='RFC4862'/>.</t>

        <t>From RFC 4862:</t>

        <t><list style='hanging'> <t>
<!--Begin DNE text-->
	The autoconfiguration process specified in this document
	applies only to hosts and not routers.  Since host
	autoconfiguration uses information advertised by routers,
	routers will need to be configured by some other means.
	However, it is expected that routers will generate link-local
	addresses using the mechanism described in this document.  In
	addition, routers are expected to successfully pass the
	Duplicate Address Detection procedure described in this
	document on all addresses prior to assigning them to an
	interface.</t> </list></t>
<!--End DNE text-->
      <t>All nodes MUST implement Duplicate Address Detection. Quoting
      from Section 5.4 of RFC 4862:</t>
<!--Begin DNE text--> <!--note: edited the text below slightly to match the quote-->     
      <t><list style='hanging'> <t> Duplicate Address Detection MUST
         be performed on all unicast addresses prior to assigning them
         to an interface, regardless of whether they are obtained
         through stateless autoconfiguration, DHCPv6, or manual
         configuration, with the following exceptions [noted therein].
         </t> </list></t>
<!--End DNE text-->
      <t>"Optimistic Duplicate Address Detection (DAD) for
      IPv6" <xref target='RFC4429' /> specifies a mechanism to reduce
      delays associated with generating addresses via Stateless
      Address Autoconfiguration <xref target='RFC4862' />.  RFC 4429
      was developed in conjunction with Mobile IPv6 in order to reduce
      the time needed to acquire and configure addresses as devices
      quickly move from one network to another, and it is desirable to
      minimize transition delays.  For general purpose devices, RFC 4429 remains optional at this time.
      </t>

	<t>
	<xref target='RFC7527'/> discusses enhanced DAD and describes an
	algorithm to automate the detection of looped-back IPv6 ND messages 
	used by DAD. Nodes SHOULD implement this behavior where such
	detection is beneficial.
	</t>

      </section>      


<section title="Privacy Extensions for Address Configuration in IPv6 - RFC 4941">

	<t>
	     A node using Stateless Address
	     Autoconfiguration <xref target='RFC4862' /> to form a globally 
		unique IPv6 address that uses its MAC address to generate the IID
		will see that the IID remains the same on any visited 
		network, even though the network prefix part changes. 
	     Thus, it is possible for a third-party device to track the activities of the node they
             communicate with, as that node moves around the network.  Privacy Extensions for Stateless Address
	     Autoconfiguration <xref target='RFC4941' /> address this
	concern by allowing nodes to configure an additional temporary address
	where the IID is effectively randomly generated.  Privacy addresses
	are then used as source addresses for new communications initiated by the node.
	</t>

	<t> General issues regarding privacy issues for IPv6 addressing are discussed in <xref target='RFC7721' />.
	</t>
	
	<t>
	    RFC 4941 SHOULD be supported.  In some scenarios,
		such as dedicated servers in a data
	    center, it provides limited or no benefit, or it may complicate network management.
	Thus, devices implementing this specification MUST provide a way for the
   end user to explicitly enable or disable the use of such temporary
   addresses.
	</t>
	<t>Note that RFC 4941 can be used independently of traditional SLAAC or independently of SLAAC that is based on RFC 7217.</t>

	<t>Implementers of RFC 4941 should be aware that certain
	addresses are reserved and should not be chosen for use as
	temporary addresses. Consult "Reserved IPv6 Interface
	Identifiers" <xref target='RFC5453' /> for more details.
	</t>

      </section>

      <section title="Stateful Address Autoconfiguration (DHCPv6) - RFC 3315" anchor="stateful1">

         <t> DHCPv6 <xref target='RFC3315' /> can be used to obtain and
 	configure addresses. In general, a network may provide for the
 	configuration of addresses through SLAAC,
 	DHCPv6, or both.  There will be a wide range of IPv6 deployment
 	models and differences in address assignment requirements,
 	some of which may require DHCPv6 for stateful address assignment.
 	Consequently, all hosts SHOULD implement address configuration
 	via DHCPv6.</t>
  
        <t> In the absence of observed Router Advertisement messages, IPv6 nodes 
	MAY initiate DHCP to obtain IPv6 addresses
	and other configuration information, as described in Section
	5.5.2 of <xref target='RFC4862' />.</t>

	<t>Where devices are likely to be carried by users and attached
	to multiple visited networks, DHCPv6 client
	anonymity profiles SHOULD be supported as described in <xref target='RFC7844' /> 
	to minimize the disclosure of identifying information. 
	Section 5 of RFC 7844 describes operational considerations on the use of 
	such anonymity profiles.</t>
	
        </section> 

      <section title="Default Address Selection for IPv6 - RFC 6724">

        <t>IPv6 nodes will invariably have multiple addresses configured simultaneously
	and thus will need to choose which addresses to use for which communications.
        The rules specified in the Default Address Selection for
        IPv6 document <xref target='RFC6724' /> MUST be implemented.
        <xref target='RFC8028' /> updates Rule 5.5 from <xref target='RFC6724' />; implementations
        SHOULD implement this rule.</t>

	</section>

	</section>


    <section title="DNS">

      <t>DNS is described in <xref target='RFC1034' />, <xref
      target='RFC1035' />, <xref target='RFC3363' />, and <xref
      target='RFC3596' />.  Not all nodes will need to resolve names;
      those that will never need to resolve DNS names do not need to
      implement resolver functionality.  However, the ability to
      resolve names is a basic infrastructure capability on which
      applications rely, and most nodes will need to provide
      support.  All nodes SHOULD implement stub-resolver <xref target='RFC1034'
/> functionality, as in Section 5.3.1 of <xref target='RFC1034'/>, with support for:</t>

      <t><list style='hanging'>
        <t hangText="-">AAAA type Resource Records <xref target='RFC3596' />;</t>
        <t hangText="-">reverse addressing in ip6.arpa using PTR records <xref target='RFC3596' />; and</t>
        <t hangText="-">Extension Mechanisms for DNS (EDNS(0)) <xref target='RFC6891' /> to allow for DNS packet sizes larger than 512 octets.</t>
      </list></t>

      <t>Those nodes are RECOMMENDED to support DNS security extensions <xref target='RFC4033' /> <xref target='RFC4034' /> <xref target='RFC4035' />.</t>

      <t>A6 Resource Records <xref target='RFC2874' /> are classified as Historic per <xref target='RFC6563'/>.  These were defined with Experimental status in <xref target='RFC3363' />.</t>

    </section>

  <section title="Configuring Non-address Information" anchor="OtherConfig">


      <section title="DHCP for Other Configuration Information">

      <t>DHCP <xref target='RFC3315' /> specifies a mechanism for IPv6 nodes to obtain
         address configuration information (see <xref target="stateful1" />) and to
         obtain additional (non-address) configuration.  If a host
         implementation supports applications or other protocols that
         require configuration that is only available via DHCP, hosts
         SHOULD implement DHCP. For specialized devices on which no
         such configuration need is present, DHCP may not be
         necessary.</t>

        <t>An IPv6 node can use the subset of DHCP (described in
        <xref target='RFC3736' />) to obtain other configuration
        information.</t>
    
        <t>If an IPv6 node implements DHCP, it MUST implement the DNS options <xref target='RFC3646' />
        as most deployments will expect that these options are available.</t>

      </section>

      <section title="Router Advertisements and Default Gateway">

	<t>There is no defined DHCPv6 Gateway option.</t>

        <t>Nodes using the Dynamic Host Configuration Protocol for
        IPv6 (DHCPv6) are thus expected to determine their default router
        information and on-link prefix information from received
        Router Advertisements. 
	</t>

    </section>

    <section title="IPv6 Router Advertisement Options for DNS
        Configuration - RFC 8106">

        <t>Router Advertisement options have historically been limited to
        those that are critical to basic IPv6 functionality. Originally,
        DNS configuration was not included as an RA option, and DHCP
        was the recommended way to obtain DNS configuration
        information. Over time, the thinking surrounding such an
        option has evolved. It is now generally recognized that few
        nodes can function adequately without having access to a
        working DNS resolver; thus, a 
        Standards Track document has been published to provide this
	capability <xref target='RFC8106' />.</t>

	<t>Implementations MUST include support for the DNS RA option
	<xref target='RFC8106' />. </t>

      </section>

  <section title="DHCP Options versus Router Advertisement Options for Host Configuration">

      <t> In IPv6, there are two main protocol mechanisms for
      propagating configuration information to hosts: RAs and DHCP. RA options have been
      restricted to those deemed essential for basic network
      functioning and for which all nodes are configured with exactly
      the same information.  Examples include the Prefix Information
      Options, the MTU option, etc. On the other hand, DHCP has
      generally been preferred for configuration of more general
      parameters and for parameters that may be client specific. 
      Generally speaking, however, there has been a desire
      to define only one mechanism for configuring a given option,
      rather than defining multiple (different) ways of configuring
      the same information.</t>

      <t>One issue with having multiple ways to configure the same
      information is that interoperability suffers if a host chooses one
      mechanism but the
      network operator chooses a different mechanism. For "closed"
      environments, where the network operator
      has significant influence over what devices connect to the
      network and thus what configuration mechanisms they support, the
      operator may be able to ensure that a particular mechanism is
      supported by all connected hosts. In more open environments,
      however, where arbitrary devices may connect (e.g., a Wi-Fi
      hotspot), problems can arise. To maximize interoperability in
      such environments, hosts would need to implement multiple
      configuration mechanisms to ensure interoperability.</t>

   </section>
  </section>

  <section title="Service Discovery Protocols">

	<t>Multicast DNS (mDNS) and 
	DNS-based Service Discovery (DNS-SD) are described in <xref target='RFC6762' /> and <xref target='RFC6763' />, respectively.
	These protocols, often collectively referred to as the 
	'Bonjour' protocols after their naming by Apple, provide
	the means for devices to discover services within a local
	link and, in the absence of a unicast DNS service, to
	exchange naming information.
	</t>
	<t>
	Where devices are to be deployed in networks where 
	service discovery would be beneficial, e.g., for users
	seeking to discover printers or display devices, mDNS and 
	DNS-SD SHOULD be supported.
	</t>
	</section>

  <section title="IPv4 Support and Transition">

    <t>IPv6 nodes MAY support IPv4.</t>

    <section title="Transition Mechanisms">

      <section title="Basic Transition Mechanisms for IPv6 Hosts and Routers -
		      RFC&nbsp;4213">

        <t>If an IPv6 node implements dual stack and tunneling, then
        <xref target='RFC4213' /> MUST be supported.</t>

      </section>
    </section>
  </section>

  <section title="Application Support">

    <section title="Textual Representation of IPv6 Addresses - RFC 5952">
      
      <t>Software that allows users and operators to input IPv6
      addresses in text form SHOULD support "A Recommendation for
      IPv6 Address Text Representation" <xref target='RFC5952' />.</t>
      
    </section>

    <section title="Application Programming Interfaces (APIs)">
      <t>There are a number of IPv6-related APIs. This document does
      not mandate the use of any, because the choice of API does not
      directly relate to on-the-wire behavior of
      protocols. Implementers, however, would be advised to consider
      providing a common API or reviewing existing APIs for the type
      of functionality they provide to applications.  </t>

      <t> "Basic Socket Interface Extensions for IPv6"
      <xref target='RFC3493' /> provides IPv6 functionality used by
      typical applications. Implementers should note that RFC 3493 has
      been picked up and further standardized by the Portable Operating System
Interface (POSIX) <xref target='POSIX' />.</t>

      <t>"Advanced Sockets Application Program Interface (API) for
              IPv6" <xref target='RFC3542' /> provides access to
              advanced IPv6 features needed by diagnostic and other
              more specialized applications.</t>

      <t> "IPv6 Socket API for Source Address Selection"
      <xref target='RFC5014' /> provides facilities that allow an
      application to override the default Source Address Selection
      rules of  <xref target='RFC6724' />.</t>


      <t> "Socket Interface Extensions for Multicast Source Filters"
      <xref target='RFC3678' /> provides support for expressing source
      filters on multicast group memberships.</t>

      <t> "Extension to Sockets API for Mobile IPv6"
      <xref target='RFC4584' /> provides application support for
      accessing and enabling Mobile IPv6 <xref target='RFC6275' /> features.</t>
      
      </section>

  </section>

  
  <section title="Mobility" anchor="mobility">
    <t>Mobile IPv6 <xref target='RFC6275'/> and associated
    specifications <xref target='RFC3776' /> <xref target='RFC4877' />
    allow a node to change its point of attachment within the
    Internet, while maintaining (and using) a permanent address. All
    communication using the permanent address continues to proceed as
    expected even as the node moves around. The definition of Mobile
    IP includes requirements for the following types of nodes:</t>

    <t><list style='hanging'>
      <t>  -  mobile nodes</t>
      <t>  -  correspondent nodes with support for route optimization</t>
      <t>  -  home agents</t>
      <t>  -  all IPv6 routers</t>
    </list></t>

    <t> At the present time, Mobile IP has seen only limited
    implementation and no significant deployment, partly because it
    originally assumed an IPv6-only environment rather than a mixed
    IPv4/IPv6 Internet. Additional work has been done to
    support mobility in mixed-mode IPv4 and IPv6
    networks <xref target='RFC5555' />. </t>

    <t> More usage and deployment experience is needed with mobility
    before any specific approach can be recommended for broad
    implementation in all hosts and routers. 

Consequently, Mobility Support in IPv6 <xref
    target='RFC6275' />, Mobile IPv6 Support for Dual Stack Hosts and Routers <xref target='RFC5555' />, and associated
    standards (such as Mobile IPv6 with IKEv2 and IPsec <xref target='RFC4877' />) are considered a MAY
    at this time.</t>

    <t> IPv6 for 3GPP <xref target='RFC7066'/> lists a snapshot of required 
	IPv6 functionalities at the time the document was published that would 
       need to be implemented, going above
       and beyond the recommendations in this document. 
Additionally, a 3GPP IPv6 Host MAY implement
       <xref target='RFC7278' /> to deliver IPv6 prefixes on the LAN link.</t>

  </section>

  <section title="Security" anchor="sec">

    <t> This section describes the security specification for IPv6
   nodes.  </t>

   <t> Achieving security in practice is a complex undertaking.
   Operational procedures, protocols, key distribution mechanisms,
   certificate management approaches, etc., are all components that
   impact the level of security actually achieved in practice. More
   importantly, deficiencies or a poor fit in any one individual
   component can significantly reduce the overall effectiveness of a
   particular security approach.  </t>

   <t> IPsec can provide either end-to-end security between nodes
   or channel security (for example, via a site-to-site IPsec
   VPN), making it possible to provide secure communication for all (or a subset
   of) communication flows at the IP layer between pairs of Internet
   nodes.  IPsec has two standard operating modes: Tunnel-mode and Transport-mode.
   In Tunnel-mode, IPsec provides network-layer security and protects an entire IP packet
   by encapsulating the original IP packet and then prepending a new IP header.
   In Transport-mode, IPsec provides security for the transport layer (and above) by
   encapsulating only the transport-layer (and above) portion of the IP packet (i.e., without adding
   a second IP header).</t>
   
    <t> Although IPsec can be used with manual keying in some cases,
       such usage has limited applicability and is not recommended.
    </t>
   
    <t> A range of security technologies and approaches proliferate
   today (e.g., IPsec, Transport Layer Security (TLS), Secure SHell (SSH), TLS VPNS, etc.).
   No single approach has emerged as
   an ideal technology for all needs and environments. Moreover, IPsec
   is not viewed as the ideal security technology in all cases and is
   unlikely to displace the others.  </t>

   <t> Previously, IPv6 mandated implementation of IPsec and
      recommended the key-management approach of IKE. RFC 6434 updated that recommendation by making support of the IPsec
      architecture <xref target='RFC4301' /> a SHOULD for all IPv6 nodes, and this document retains that recommendation. 
Note that
      the IPsec Architecture requires the
      implementation of both manual and automatic key management (e.g., Section 4.5 of RFC 4301).
      Currently, the recommended automated key-management protocol to
      implement is IKEv2  <xref target='RFC7296' />.  </t>

      <t> This document recognizes that there exists a range of device
   types and environments where approaches to security other than
   IPsec can be justified. For example, special-purpose devices may
   support only a very limited number or type of applications, and an
   application-specific security approach may be sufficient for
   limited management or configuration capabilities. Alternatively,
   some devices may run on extremely constrained hardware (e.g.,
   sensors) where the full IPsec Architecture is not justified.
   </t>

	<t>
	Because most common platforms now support IPv6 and have it
	enabled by default, IPv6 security is an issue for networks
	that are ostensibly IPv4 only; see <xref target='RFC7123' />
	for guidance on this area.
	</t>

    <section title="Requirements">
    
      <t> "Security Architecture for the Internet Protocol"
   <xref target='RFC4301' /> SHOULD be supported by all IPv6
   nodes. Note that the IPsec Architecture requires the implementation of both manual and automatic key
   management  (e.g., Section 4.5 of <xref target='RFC4301' />).  Currently, the default automated key-management
   protocol to implement is IKEv2. As required in <xref target='RFC4301' />, IPv6
   nodes implementing the IPsec Architecture MUST implement ESP
   <xref target='RFC4303' /> and MAY implement AH
   <xref target='RFC4302' />.
    </t> </section>
    
    <section title="Transforms and Algorithms">
    <t> The current set of mandatory-to-implement algorithms for the
	IPsec Architecture are defined in Cryptographic
	Algorithm Implementation Requirements for ESP and AH
	<xref target='RFC8221' />.  IPv6 nodes implementing the IPsec
	Architecture MUST conform to the requirements in <xref target='RFC8221'/>.
	Preferred cryptographic algorithms often change more
	frequently than security protocols. Therefore, implementations
	MUST allow for migration to new algorithms, as RFC 8221 is
	replaced or updated in the future.</t>

     <t> The current set of mandatory-to-implement algorithms for
	IKEv2 are defined in Cryptographic Algorithm Implementation                    
        Requirements for ESP and AH <xref target='RFC8247' />.  IPv6 nodes
	implementing IKEv2 MUST conform to the requirements in <xref target='RFC8247'/> and/or any future
	updates or replacements to <xref target='RFC8247'/>.
    </t>

    </section>      
  </section>

  <section title="Router-Specific Functionality">

    <t>This section defines general host considerations for IPv6 nodes
    that act as routers.  Currently, this section does not discuss
    detailed routing-specific requirements. For the case of typical home routers,
	<xref target='RFC7084'/> defines basic requirements for customer edge routers.
	</t>

      <section title="IPv6 Router Alert Option - RFC 2711">

        <t>The IPv6 Router Alert option <xref target='RFC2711' /> is
        an optional IPv6 Hop-by-Hop Header that is used in conjunction
        with some protocols (e.g., RSVP <xref target='RFC2205' /> or
        Multicast Listener Discovery (MLDv2) <xref target='RFC3810' />).  The Router Alert option will
        need to be implemented whenever such protocols that mandate its
        use are implemented.  See <xref target="mld" />.</t>

      </section>

      <section title="Neighbor Discovery for IPv6 - RFC 4861">

        <t>Sending Router Advertisements and processing Router
        Solicitations MUST be supported.</t>

      <t> Section 7 of <xref target='RFC6275' /> includes some mobility-specific
	  extensions to Neighbor Discovery.
          Routers SHOULD implement
	  Sections 7.3 and 7.5, even if they do not implement home
	  agent functionality.</t>
	

      </section>

      <section title="Stateful Address Autoconfiguration (DHCPv6) - RFC 3315">

        <t> A single DHCP server (<xref target='RFC3315' /> or <xref
	target='RFC4862' />) can provide configuration information to
	devices directly attached to a shared link, as well as to
	devices located elsewhere within a site. Communication between
	a client and a DHCP server located on different links requires
	the use of DHCP relay agents on routers.</t>

	<t> In simple deployments, consisting of a single router and
	either a single LAN or multiple LANs attached to the single
	router, together with a WAN connection, a DHCP server
	embedded within the router is one common deployment scenario
	(e.g., <xref target='RFC7084' />). There is no need
	for relay agents in such scenarios.  </t>

	<t> In more complex deployment scenarios, such as within
	enterprise or service provider networks, the use of DHCP
	requires some level of configuration, in order to configure
	relay agents, DHCP servers, etc. In such environments, the
	DHCP server might even be run on a traditional server, rather
	than as part of a router. </t>

	<t> Because of the wide range of deployment scenarios, support
	for DHCP server functionality on routers is optional. However,
	routers targeted for deployment within more complex scenarios
	(as described above) SHOULD support relay agent functionality.
	Note that "Basic Requirements for IPv6 Customer Edge Routers"
	<xref target='RFC7084' /> requires implementation of a DHCPv6
	server function in IPv6 Customer Edge (CE) routers. </t>

      </section>

      <section title="IPv6 Prefix Length Recommendation for Forwarding - BCP 198">

	<t>
	Forwarding nodes MUST conform to BCP 198 <xref target='RFC7608' />;
	thus, IPv6 implementations of nodes that may forward packets 
	MUST conform to the rules specified in Section 5.1 of <xref target='RFC4632' />.
	</t>

      </section>

    </section>

  <section title="Constrained Devices">
	
	<t>
	The focus of this document is general IPv6 nodes. In this section, we briefly
	discuss considerations for constrained devices.
	</t>
	<t>
	In the case of constrained nodes, 
	with limited CPU, memory, bandwidth or power, support for certain IPv6 functionality may need	
	to be considered due to those limitations.  While the requirements of this document are
	RECOMMENDED for all nodes, including constrained nodes, compromises may need to be
	made in certain cases.  Where such compromises are made, the interoperability of devices
	should be strongly considered, particularly where this may impact other nodes on the same
	link, e.g., only supporting MLDv1 will affect other nodes.
	</t>

	<t>The IETF 6LowPAN (IPv6 over Low-Power Wireless Personal Area Network) WG produced six RFCs, including a general
	overview and problem statement <xref target='RFC4919' /> (the means by which IPv6 packets 
	are transmitted over IEEE 802.15.4 networks <xref target='RFC4944' />
	and ND optimizations for that medium <xref target='RFC6775' />).
	</t>

	<t> 
        IPv6 nodes that are battery powered SHOULD implement the recommendations in <xref target='RFC7772' />.
	</t>

  </section>

  <section title="IPv6 Node Management">

    <t>Network management MAY be supported by IPv6 nodes.  However,
    for IPv6 nodes that are embedded devices, network management may
    be the only possible way of controlling these nodes.</t>
 
    <t>Existing network management protocols include SNMP <xref
    target='RFC3411'/>, NETCONF 
    <xref target='RFC6241' />, and RESTCONF <xref target='RFC8040'/>.</t>

    <section title="Management Information Base (MIB) Modules">

      <t>
      The obsoleted status of 
      various IPv6-specific MIB modules is clarified in <xref target='RFC8096' />.
      </t>
      <t>The following two MIB modules SHOULD be supported by nodes that
support an SNMP agent.</t>

      <section title="IP Forwarding Table MIB">

        <t>The IP Forwarding Table MIB <xref target='RFC4292' /> SHOULD be supported by nodes that support an 
        SNMP agent.</t>

      </section>

      <section title="Management Information Base for the Internet Protocol (IP)">

        <t>The IP MIB <xref target='RFC4293' /> SHOULD be supported by nodes 
        that support an SNMP agent.</t>

      </section>
      <section title="Interface MIB">
        <t>The Interface MIB <xref target='RFC2863'/> SHOULD be supported by nodes that support 
        an SNMP agent.</t>
      </section>
    </section>

      <section title="YANG Data Models">
         <t>The following YANG data models SHOULD be supported by nodes that support a 
         NETCONF or RESTCONF agent.</t>
         <section title="IP Management YANG Model">
             <t> The IP Management YANG Model <xref target="RFC8344" /> SHOULD be supported 
             by nodes that support NETCONF or RESTCONF.</t>
         </section>
         <section title="Interface Management YANG Model">
             <t> The Interface Management YANG Model <xref target="RFC8343" /> SHOULD be supported 
             by nodes that support NETCONF or RESTCONF.</t>
         </section>
      </section>

  </section>

  <section title="Security Considerations">

    <t>This document does not directly affect the security of the
    Internet, beyond the security considerations associated with the
    individual protocols. </t>

    <t>Security is also discussed in <xref target="sec" /> above.</t>

  </section>

    <section title="IANA Considerations">
      <t>This document has no IANA actions.</t>
    </section>



</middle>

<back>

 <references title="Normative References">
  <?rfc include="reference.RFC.1034" ?>
  <?rfc include="reference.RFC.1035" ?>
  <?rfc include="reference.RFC.2119" ?>

  <?rfc include="reference.RFC.2710" ?>
  <?rfc include="reference.RFC.2711" ?>
  <?rfc include="reference.RFC.2863" ?>
  <?rfc include="reference.RFC.3168" ?>
  <?rfc include="reference.RFC.3315" ?>
  <?rfc include="reference.RFC.3411" ?>
  <?rfc include="reference.RFC.3596" ?>
  <?rfc include="reference.RFC.3736" ?>
  <?rfc include="reference.RFC.3810" ?>
  <?rfc include="reference.RFC.4033" ?>
  <?rfc include="reference.RFC.4034" ?>
  <?rfc include="reference.RFC.4035" ?>
  <?rfc include="reference.RFC.4213" ?>
  <?rfc include="reference.RFC.4291" ?>
  <?rfc include="reference.RFC.4292" ?>
  <?rfc include="reference.RFC.4293" ?>
  <?rfc include="reference.RFC.4301" ?>
  <?rfc include="reference.RFC.4303" ?>
  <?rfc include="reference.RFC.4311" ?>
  <?rfc include="reference.RFC.4443" ?>
  <?rfc include="reference.RFC.4607" ?>
  <?rfc include="reference.RFC.4632" ?>
  <?rfc include="reference.RFC.4861" ?>
  <?rfc include="reference.RFC.4862" ?>
  <?rfc include="reference.RFC.4941" ?>
  <?rfc include="reference.RFC.5095" ?>
  <?rfc include="reference.RFC.5453" ?>
  <?rfc include="reference.RFC.5722" ?>
  <?rfc include="reference.RFC.5790" ?>
  <?rfc include="reference.RFC.5942" ?>
  <?rfc include="reference.RFC.5952" ?>
  <?rfc include="reference.RFC.6241" ?>
  <?rfc include="reference.RFC.6437" ?>
  <?rfc include="reference.RFC.6564" ?>
  <?rfc include="reference.RFC.6724" ?>
  <?rfc include="reference.RFC.6762" ?>
  <?rfc include="reference.RFC.6763" ?>
  <?rfc include="reference.RFC.6775" ?>
  <?rfc include="reference.RFC.6891" ?>
  <?rfc include="reference.RFC.6946" ?>
  <?rfc include="reference.RFC.7045" ?>
  <?rfc include="reference.RFC.7048" ?>
  <?rfc include="reference.RFC.7112" ?>
  <?rfc include="reference.RFC.7217" ?>
  <?rfc include="reference.RFC.7296" ?>
  <?rfc include="reference.RFC.7527" ?>
  <?rfc include="reference.RFC.7559" ?>
  <?rfc include="reference.RFC.7608" ?>
  <?rfc include="reference.RFC.8021" ?>
  <?rfc include="reference.RFC.8028" ?>
  <?rfc include="reference.RFC.8040" ?>
  <?rfc include="reference.RFC.8064" ?>
  <?rfc include="reference.RFC.8106" ?>
  <?rfc include="reference.RFC.8174" ?>
  <?rfc include="reference.RFC.8200" ?>
  <?rfc include="reference.RFC.8201" ?>
  <?rfc include="reference.RFC.8221" ?>
  <?rfc include="reference.RFC.8247" ?>
  <?rfc include="reference.RFC.8343" ?>
  <?rfc include="reference.RFC.8344" ?>

 </references>

 <references title="Informative References">
  <?rfc include="reference.RFC.0793" ?>
  <?rfc include="reference.RFC.2205" ?>
  <?rfc include="reference.RFC.2464" ?>
  <?rfc include="reference.RFC.2491" ?>
  <?rfc include="reference.RFC.2590" ?>
  <?rfc include="reference.RFC.2874" ?>
  <?rfc include="reference.RFC.2923" ?>
  <?rfc include="reference.RFC.3146" ?>
  <?rfc include="reference.RFC.3363" ?>
  <?rfc include="reference.RFC.3493" ?>
  <?rfc include="reference.RFC.3542" ?>
  <?rfc include="reference.RFC.3646" ?>
  <?rfc include="reference.RFC.3678" ?>
  <?rfc include="reference.RFC.3776" ?>
  <?rfc include="reference.RFC.3971" ?>
  <?rfc include="reference.RFC.3972" ?>
  <?rfc include="reference.RFC.4191" ?>
  <?rfc include="reference.RFC.4294" ?>
  <?rfc include="reference.RFC.4302" ?>
  <?rfc include="reference.RFC.4338" ?>
  <?rfc include="reference.RFC.4380" ?>
  <?rfc include="reference.RFC.4429" ?>
  <?rfc include="reference.RFC.4584" ?>
  <?rfc include="reference.RFC.4821" ?>
  <?rfc include="reference.RFC.4877" ?>
  <?rfc include="reference.RFC.4884" ?>
  <?rfc include="reference.RFC.4890" ?>
  <?rfc include="reference.RFC.4919" ?>
  <?rfc include="reference.RFC.4944" ?>
  <?rfc include="reference.RFC.5014" ?>
  <?rfc include="reference.RFC.5072" ?>
  <?rfc include="reference.RFC.5121" ?>
  <?rfc include="reference.RFC.5555" ?>
  <?rfc include="reference.RFC.6275" ?>
  <?rfc include="reference.RFC.6563" ?>
  <?rfc include="reference.RFC.6980" ?>
  <?rfc include="reference.RFC.7066" ?>
  <?rfc include="reference.RFC.7084" ?>
  <?rfc include="reference.RFC.7123" ?>
  <?rfc include="reference.RFC.7278" ?>
  <?rfc include="reference.RFC.7371" ?>
  <?rfc include="reference.RFC.7421" ?>
  <?rfc include="reference.RFC.7721" ?>
  <?rfc include="reference.RFC.7739" ?>
  <?rfc include="reference.RFC.7772" ?>
  <?rfc include="reference.RFC.7844" ?>
  <?rfc include="reference.RFC.7934" ?>
  <?rfc include="reference.RFC.8087" ?>
  <?rfc include="reference.RFC.8096" ?>
  <?rfc include="reference.RFC.8273" ?>

<reference anchor="POSIX"
	   target="https://ieeexplore.ieee.org/document/8277153">
<front>
<title>Information Technology -- Portable Operating System Interface
                  (POSIX(R)) Base Specifications, Issue 7</title>
<author>
<organization>IEEE</organization>
</author>
<date month="January" year="2018" />
</front>
<seriesInfo name='IEEE Std' value='1003.1-2017' />
<seriesInfo name='DOI:' value='10.1109/IEEESTD.2018.8277153' />
</reference>
  

<reference anchor="USGv6"
  target="https://www.nist.gov/programs-projects/usgv6-program">
<front>
<title>A Profile for IPv6 in the U.S. Government - Version 1.0
</title>
<author>
<organization>National Institute of Standards and Technology</organization>
</author>
<date month="July" year="2008" />
</front>
<seriesInfo name='NIST' value='SP500-267' />
</reference>
 </references>

  <section title="Changes from RFC 6434">
    <t> 
    There have been many editorial clarifications as well as
    significant additions and updates. While this section highlights
    some of the changes, readers should not rely on this section for a
    comprehensive list of all changes. </t>

    <t>
    <list style='numbers'>
    <t>Restructured sections.</t>
    <t>Added 6LoWPAN to link layers as it has some deployment.</t>
    <t>Removed the Downstream-on-Demand (DoD) IPv6 Profile as it hasn't been updated.</t>
    <t>Updated MLDv2 support to a MUST since nodes are restricted if MLDv1 is used.</t>
    <t>Required DNS RA options so SLAAC-only devices can get DNS; RFC 8106 is a MUST.</t>
    <t>Required RFC 3646 DNS Options for DHCPv6 implementations.</t> 
    <t>Added RESTCONF and NETCONF as possible options to network management.</t>
    <t>Added a section on constrained devices.</t>
 	<t>Added text on RFC 7934 to address availability to hosts (SHOULD).</t>
	<t>Added text on RFC 7844 for anonymity profiles for DHCPv6 clients.</t>
	<t>Added mDNS and DNS-SD as updated service discovery.</t>
	<t>Added RFC 8028 as a SHOULD as a method for solving a multi-prefix network.</t>
	<t>Added ECN RFC 3168 as a SHOULD.</t>
	<t>Added reference to RFC 7123 for security over IPv4-only networks.</t>
	<t>Removed Jumbograms (RFC 2675) as they aren't deployed.</t>
    <t>Updated obsoleted RFCs to the new version of the RFC, including RFCs 2460, 1981, 7321, and 4307.</t>
	<t>Added RFC 7772 for power consumptions considerations.</t>
    <t>Added why /64 boundaries for more detail -- RFC 7421.</t>
    <t>Added a unique IPv6 prefix per host to support currently deployed IPv6 networks.</t>
    <t>Clarified RFC 7066 was a snapshot for 3GPP.</t>
    <t>Updated RFC 4191 as a MUST and the Type C Host as a SHOULD as they help solve multi-prefix problems.</t>
    <t>Removed IPv6 over ATM since there aren't many deployments.</t>
    <t>Added a note in Section 6.6 for Rule 5.5 from RFC 6724.</t>
	<t>Added MUST for BCP 198 for forwarding IPv6 packets.</t>
	<t>Added a reference to RFC 8064 for stable address creation.</t>
	<t>Added text on the protection from excessive extension header options.</t>
	<t>Added text on the dangers of 1280 MTU UDP, especially with regard to DNS traffic.</t>
	<t>Added text to clarify RFC 8200 behavior for unrecognized extension headers or unrecognized ULPs.</t>
	<t>Removed dated email addresses from design team acknowledgements for <xref target='RFC4294' />.</t>
    </list>
    </t>
  </section>


  <section title="Changes from RFC 4294 to RFC 6434">
      <t>
    There have been many editorial clarifications as well as
    significant additions and updates. While this section highlights
    some of the changes, readers should not rely on this section for a
    comprehensive list of all changes. </t>

    <t>
    <list style='numbers'>

    <t>Updated the Introduction to indicate that this document is an
    applicability statement and is aimed at
    general nodes. </t>
    <t>Significantly updated the section on mobility protocols;
    added references and downgraded previous SHOULDs to MAYs.</t>
    <t>Changed the Sub-IP Layer section to just list relevant RFCs, and
    added some more RFCs. </t>
    <t>Added a section on SEND (it is a MAY).</t>
    <t>Revised the section on Privacy Extensions <xref target='RFC4941' /> to add more
    nuance to the recommendation.</t>
    <t>Completely revised the IPsec/IKEv2 section, downgrading the overall
    recommendation to a SHOULD.</t>
    <t>Upgraded recommendation of DHCPv6 to a SHOULD.</t>
    <t>Added a background section on DHCP versus RA options, added
    a SHOULD recommendation for DNS configuration via RAs (RFC 6106), and cleaned up the DHCP recommendations. </t>
    <t> Added the recommendation that routers implement Sections 7.3 and
	7.5 of <xref target='RFC6275' />.</t>
    <t>Added a pointer to subnet clarification document <xref target='RFC5942' />.</t>
    <t>Added text that "IPv6 Host-to-Router Load Sharing"
	<xref target='RFC4311' /> SHOULD be implemented.</t>
    <t>Added reference to <xref target='RFC5722' /> (Overlapping Fragments),
and made it a MUST to implement.</t>
       <t>Made "A Recommendation for IPv6 Address Text Representation"
       <xref target='RFC5952' /> a SHOULD. </t>
    
    <t>Removed the mention of delegation name (DNAME) from the discussion about
    <xref target='RFC3363' />.</t>
    <t>Numerous updates to reflect newer versions of IPv6
    documents, including <xref target='RFC3596' />, <xref target='RFC4213' />, <xref target='RFC4291' />, and <xref target='RFC4443' />.</t>
    <t>Removed discussion of "Managed" and "Other" flags in
    RAs. There is no consensus at present on how to process these
    flags, and discussion of their semantics was removed in the most
    recent update of Stateless Address Autoconfiguration <xref
target='RFC4862' />. </t>
    <t>Added many more references to optional IPv6 documents. </t>
    <t> Made "A Recommendation for IPv6 Address Text Representation"
       <xref target='RFC5952' /> a SHOULD. </t>

    <t> Updated the MLD section to include reference to Lightweight MLD
	<xref target='RFC5790' />. </t>

    <t> Added a SHOULD recommendation for "Default Router Preferences
	    and More-Specific Routes" <xref target='RFC4191' />.</t>

<t>Made "IPv6 Flow Label Specification" <xref target='RFC6437' /> a SHOULD.</t>

     </list>
    </t>
  </section>

  <section title="Acknowledgments" numbered="no">
<t>o&nbsp;&nbsp;Acknowledgments (Current Document)
<list>
   <t>The authors would like to thank 
Brian Carpenter, Dave Thaler, 
Tom Herbert, Erik Kline, Mohamed Boucadair, and Michayla Newcombe
  for their contributions and many members of the 6man WG for the inputs they gave.  </t>
</list></t>

<t>o&nbsp;&nbsp;Authors and Acknowledgments from RFC 6434
<list>
<t>RFC 6434 was authored by Ed Jankiewicz, John Loughney, and Thomas Narten.
</t>
<t>
The authors of RFC 6434 thank Hitoshi Asaeda, Brian Carpenter, Tim Chown, Ralph
   Droms, Sheila Frankel, Sam Hartman, Bob Hinden, Paul Hoffman, Pekka
   Savola, Yaron Sheffer, and Dave Thaler for their comments.  In addition,
   the authors thank Mark Andrews for comments and corrections on DNS
   text and Alfred Hoenes for tracking the updates to various RFCs.
</t>
</list></t>


<t>o&nbsp;&nbsp;Authors and Acknowledgments from RFC 4294
<list>
    <t>RFC 4294 was written by
    the IPv6 Node Requirements design team, which had the following members:
   Jari Arkko,
   Marc Blanchet,
   Samita Chakrabarti,
   Alain Durand,
   Gerard Gastaud,
   Jun-ichiro Itojun Hagino,
   Atsushi Inoue,
   Masahiro Ishiyama,
   John Loughney,
   Rajiv Raghunarayan,
   Shoichi Sakane,
   Dave Thaler, and Juha Wiljakka.
</t>

<t>The authors of RFC 4294 thank Ran Atkinson, Jim Bound, Brian Carpenter, Ralph Droms, 
    Christian Huitema, Adam Machalek, Thomas Narten, Juha Ollila, and Pekka
Savola for their comments. </t>
</list>
</t>
  </section>

</back>
</rfc>
