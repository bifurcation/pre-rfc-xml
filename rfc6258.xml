<?xml version="1.0" encoding="US-ASCII"?>
<?rfc toc="yes"?>
<?rfc comments="yes"?>
<?rfc sortrefs="no"?>
<?rfc rfcedstyle="yes"?>
<?rfc subcompact="no"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<rfc submissionType="IRTF" category="exp" consensus="yes" ipr="trust200902" number="6258">
   <front>
      <title abbrev="DTN Metadata Extension Block">
Delay-Tolerant Networking Metadata Extension Block
</title>
      <author initials="S.F." surname="Symington" fullname="Susan Flynn Symington">
         <organization>The MITRE Corporation</organization>
         <address>
            <postal>
               <street>7515 Colshire Drive</street>
               <city>McLean</city>
               <region>VA</region>
               <code>22102</code>
               <country>US</country>
            </postal>
            <phone>+1 (703) 983-7209</phone>
            <email>susan@mitre.org</email>
            <uri>http://mitre.org/</uri>
         </address>
      </author>
      
      <date  month="May" year="2011"/>
      <area>Delay-Tolerant Networking</area>
      <workgroup>Delay-Tolerant Networking</workgroup>

      <keyword>DTN</keyword>
      <keyword>Delay-Tolerant Networking</keyword>
      <keyword>Disruption-Tolerant Networking</keyword>


	  <abstract> <t>This document defines an extension block that may be used with the Delay-Tolerant Networking (DTN) Bundle Protocol. This Metadata Extension Block is designed to carry additional information that DTN nodes can use to make processing decisions regarding bundles, such as deciding whether to store a bundle or determining to which nodes to forward a bundle. The metadata that is carried in a metadata block must be formatted according to the metadata type that is identified in the block's metadata type field. One specific metadata type, for carrying URIs as metadata, is defined in this document. Other metadata types may be defined in separate documents. This document is a product of the Delay Tolerant Networking Research Group and has been reviewed by that group.  No objections to its publication as an RFC were raised.</t> </abstract>
   </front>
   <middle>

<section title="Introduction" toc="default">

		 <t>This document defines an extension block that may be used with the Bundle Protocol <xref target="RFC5050" format="default" pageno="false"/> within the context of a Delay-Tolerant Networking architecture <xref target="RFC4838" format="default" pageno="false"/>. The DTN Bundle Protocol <xref target="RFC5050" format="default" pageno="false"/> defines the bundle as its protocol data unit. This document defines a bundle block called a "metadata block". This block is designed to carry additional information that DTN nodes can use to make processing decisions regarding bundles.</t>
		 <t>The metadata block has been deliberately defined to be flexible enough that it would be capable of supporting a variety of metadata types and formats. Indeed, the only restriction imposed on the metadata to be used is that its type and format be predefined and registered (if public) so that it can be parsed and processed by DTN nodes that support metadata of that type. Section 4 defines a specific metadata type and discusses the use of other metadata types that may be defined elsewhere. As mentioned, it is the intention that the metadata that is carried in this block be application-related information. For example, the metadata might be information that is associated with the payload of a bundle. Additional extension blocks could be (and have been) defined for carrying additional network-related information.</t>
		 <t>While the bundle payload may be processed opaquely by DTN nodes, metadata is intended to serve as a mechanism for providing DTN nodes with access to additional information that they can use to process the bundle. Examples of such additional information include keywords found in the payload; payload provenance information; GPS coordinates (if the payload is a map, for instance); message IDs; and artist, album, and track name (if the payload is a song). Even though the metadata is additional information related to the application, its purpose is to be used by DTN nodes to make decisions regarding how to process bundles within the network, such as whether or not a bundle should be stored or to which nodes a bundle should be forwarded. Metadata that is about bundle payload, for example, might serve as a content-based index of bundles that are stored in a DTN cache. So, in response to a request for bundles related to a certain subject or related to specific GPS coordinates, for example, the metadata of stored bundles could be searched, and all bundles with metadata matching the search criteria could be retrieved and returned to the requestor.</t>
		 
		 <t>This document defines the general format of and the processing required to support the metadata block. The actual metadata to be inserted into a metadata block MUST be formatted according to the metadata type that is identified in the block's metadata type field. One specific metadata type, for carrying Uniform Resource Identifiers (URIs) <xref target="RFC3986" format="default" pageno="false"/> as metadata, is defined in this document. Other metadata types may be defined in separate documents, along with the steps required to process records of that type, if necessary. If such other metadata types are defined, they should be registered to ensure global uniqueness (see the IANA Considerations section).</t>
		 
		 <t>The capabilities described in this document are OPTIONAL
for deployment with the Bundle Protocol. As defined in this document, Bundle Protocol implementations claiming to support the metadata block MUST be capable of:
<list>
<t>- generating a metadata block and inserting it into a bundle,</t>
<t>- receiving bundles containing a metadata block and making the information contained in this metadata block's metadata field available for use, e.g., in bundle storage or forwarding decisions, and</t>
<t>- deleting a metadata block from a received bundle before forwarding the bundle.</t>
</list>
</t>
<t>Bundle Protocol implementations claiming to support a specific metadata type must both support the metadata block as defined above and be capable of parsing and processing the metadata itself according to the definition of the metadata type in which the metadata is expressed. This metadata type may be the URI metadata type (see the URI metadata type section), or it may be another metadata type defined in a separate document.
</t>
<section title="Requirements Language" toc="default">
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
		"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
		document are to be interpreted as described in RFC 2119 <xref
				target="RFC2119" format="default" pageno="false"/>.</t>
</section>
</section>             

<section title="Metadata Block Format" toc="default" anchor="sec.prevHop">
<t>The metadata block uses the Canonical Bundle Block Format as defined in the Bundle Protocol <xref target="RFC5050" format="default" pageno="false"/>. That is, it is comprised of the following elements, which are defined as in all bundle protocol blocks except the primary bundle block. (Note that Self-Delimiting Numeric Value (SDNV) encoding is described in the Bundle Protocol.):
<list>

<t>- Block-type code (1 byte) - defined as in all bundle protocol blocks except the
primary bundle block (as described in the Bundle Protocol). The block-type code for the metadata block is 0x08.</t>

<t>- Block processing control flags (SDNV) - defined as in all bundle protocol blocks except the primary bundle block. SDNV encoding is described in the Bundle Protocol. There are no constraints on the use of the block processing control flags. If a bundle node receives a bundle with a metadata block and it is capable of supporting the metadata block but it is not able to parse and process the metadata itself, either because it does not support the metadata type being used or because the metadata is not well-formed according to the metadata type definition, the bundle node must process the bundle as if it cannot process the metadata block. That is, it must operate according to the settings of the block processing control flags, including the "Delete bundle if block can't be processed" flag and the "Discard block if it can't be processed" flag. </t>

<t>- Block EID-reference count and EID-references (optional) - composite field defined in the Bundle Protocol that is present if and only if the metadata block references EID elements in the primary block's dictionary. Presence of this field is indicated by the setting of the "Block contains an EID-reference field" bit of the block processing control flags. If EIDs are referenced in the metadata block, then their interpretation is defined by the particular metadata type that is being used in this metadata block, as indicated in the metadata type field.</t>

<t>- Block data length (SDNV) - defined as in all bundle protocol blocks except the
primary bundle block. SDNV encoding is described in the Bundle Protocol. </t>

<t>- Block-type-specific data fields as follows:

<list>
<t>- Metadata Type field (SDNV) - indicates which metadata type is to be used to interpret both the metadata in the metadata field and the EID-references in the optional Block EID-reference count and EID-references field (if present). One metadata type is defined in this document. Other metadata types may be defined in separate documents.</t>

<t>- Metadata field - contains the metadata itself, formatted according to the metadata type that has been specified for this block. One metadata type is defined in Section 4.1. Other metadata types may be defined elsewhere, as discussed in Section 4.</t>
</list>
</t>
</list>
</t>
<t>
The structure of a metadata block is as follows:
<figure anchor="Metadata-Block-Fig">
<artwork> 
Metadata Block Format:
+-----+------+--------------------+------+----------+----------|
|Type |Flags |EID-Reference count |Len   | Metadata | Metadata | 
|     |(SDNV)|  and list (opt)    |(SDNV)|   Type   |          |
+-----+------+--------------------+------+----------+----------+
</artwork>
</figure>
</t>
</section>

<section title="Metadata Block Processing" toc="default">
<t>The following are the processing steps that a bundle node may take relative to generation, reception, and processing of metadata blocks. </t>

<section title="Bundle Transmission" toc="default">
<t>When an outbound bundle is created per the parameters of the bundle transmission request, this bundle MAY (as influenced by local policy and the metadata type being used) include one or more metadata blocks (as defined in this specification).</t>
</section>

<section title="Bundle Forwarding" toc="default">
<t>A node MAY insert one or more metadata blocks into a bundle before forwarding it; and a node MAY delete one or more metadata blocks from a bundle before forwarding it, as dictated by local policy and the metadata type being used.</t>
</section>

<section title="Bundle Reception" toc="default">
<t>If the bundle includes one or more metadata blocks, the metadata information records in these blocks SHALL be made available for use at this node (e.g., in bundle storage or forwarding decisions, or, if the receiving node is the bundle-destination, the metadata information records may be provided to the receiving application). </t>
</section>

</section>

<section title="Predefined Metadata Types" toc="default">
<t>As mentioned in the previous section, any number of different metadata types may be defined to indicate the format of both the metadata field and the EID-references in the optional Block EID-reference count and EID-references field (if present) and, if necessary, how metadata of this type should be processed. One metadata type is defined in this document, URI metadata type (0x01). In addition, a range of metadata type values is reserved for private use.</t>

<section title="URI Metadata Type" toc="default">
<t>It is believed that use of URIs will, in many cases, be adequate for encoding metadata, although it is recognized that use of URIs may not be the most efficient method for such encoding. Because of the expected utility of using URI encoding for metadata, the metadata type value of 0x01 is defined to indicate a metadata type of URI. Metadata type values other than 0x01 will be used to indicate alternative metadata types.</t>

<t>The Metadata field for metadata of metadata type URI (0x01) consists of an array of bytes formed by concatenating one or more null-terminated URIs. Unless determined by local policy, the specific processing steps that must be performed on bundles with metadata blocks containing metadata of type URI are expected to be indicated as part of the URI encoding of the metadata. It is envisioned that users might define URI schemes for this purpose. Metadata blocks containing metadata of type URI MUST NOT include a Block EID-reference count and EID-references field. The absence of this field MUST be indicated by a value of 0 for the "Block contains an EID-reference field" flag in the block processing control flags. Support for the URI metadata type is OPTIONAL.
</t>
</section>
<section title="Private Metadata Types" toc="default">
<t>Metadata type values 192 through 255 are not defined in this specification
and are available for private and/or experimental use. Such private metadata
types are not required to be registered. All other values of the metadata type
are reserved for future use and, when defined, should be registered to ensure
global uniqueness (see the IANA Considerations section). Local policy will
define how private metadata types are handled.</t> 
</section>
</section>

<section title="Security Considerations">

		<t>The DTN Bundle Security Protocol <xref target="RFC6257"
format="default" pageno="false"/> defines security-related blocks to provide
hop-by-hop authentication, end-to-end authentication, end-to-end
confidentiality of bundles or parts of bundles, and an extension security block
to provide confidentiality and integrity for extension blocks, as well as a set
of standard ciphersuites that may be used to calculate security-results carried
in these security blocks. All ciphersuites that use the strict canonicalization
algorithm <xref target="RFC6257" format="default" pageno="false"/> to calculate
and verify security-results (e.g., many hop-by-hop authentication ciphersuites)
apply to all blocks in the bundle and so would apply to bundles that include an
optional metadata block and would include that block in the calculation of
their security-result. In particular, bundles including the optional metadata
block would be protected in their entirety for the duration of a single hop,
from a forwarding node to an adjacent receiving node (but not from source to
destination over multiple hops), using the standard BAB-HMAC (Bundle
Authentication Block - Hashed Message Authentication Code) ciphersuite defined
in the Bundle Security Protocol. </t> 
		<t>Ciphersuites that use the mutable canonicalization algorithm to calculate and verify security-results (e.g., the mandatory PSH-RSA-SHA256 ciphersuite and most end-to-end authentication ciphersuites) will omit the metadata block from their calculation. Therefore, the fact that metadata in the metadata block may be modified or that metadata blocks themselves may be added to or deleted from a bundle as it transits the network will not interfere with end-to-end security protection when using ciphersuites that use mutable canonicalization. </t>
		<t>The metadata block will not be encrypted by the mandatory CH-RSA-AES-PAYLOAD-PSH end-to-end confidentiality ciphersuite, which only allows for payload and PSH encryption.</t>

		<t>In order to provide the metadata block with end-to-end confidentiality and authentication independent of any confidentiality or authentication that is provided for the payload or other parts of the bundle, the extension security block may be used to encrypt and authenticate the metadata block. A bundle may contain multiple metadata extension blocks. In some cases, multiple metadata blocks may be carried in the bundle, possibly with each being encrypted separately from each other and from the payload. Such separate encryption of metadata from payload would enable bundle nodes to perform content-based searching and routing on bundle metadata that they are able to decrypt, even if they are not able to decrypt the bundle payload.</t>
		
		<t>Given that metadata can be modified by forwarding nodes, it may be desirable to eventually support the ability to audit changes to the metadata at the individual record level. No such capability has been provided in this specification as currently written.</t>
		
</section>

<section title="IANA Considerations">
<section title="Metadata Type Codes">
<t>The metadata block carried in the Metadata Extension Block has a Metadata
Type Code field (see Sections 2 and 3). An IANA registry has been set up as follows.
<artwork>
 
              Metadata Type Codes Registry

The registration policy for this registry is:
  0-191: Specification Required
  192-255: Private and/or Experimental Use.  No assignment by IANA.

The Value range is unsigned 8-bit integer.

+---------+---------------------------------+---------------+
|  Value  | Description                     | Reference     |
+---------+---------------------------------+---------------+
|       0 | Reserved                        | This document |
|       1 | URI                             | This document |
|   2-191 | Unassigned                      |               |
| 192-255 | Private and/or experimental use | This document |
+---------+---------------------------------+---------------+
</artwork>
</t>
</section>

<section title="Block Type Code for the Metadata Block">
<t>This specification allocates a codepoint from the Bundle Block Type
Codes registry defined in <xref target="RFC6255" format="default" pageno="false"/> (see
Section 2 of this document):
<artwork>

Additional Entry for the Bundle Block Type Codes Registry:
  +-------+----------------------------------------+----------------+
  | Value | Description                            + Reference      |
  +-------+----------------------------------------+----------------+
  |     8 | Metadata Extension Block               + This document  |
  +-------+----------------------------------------+----------------+

</artwork>
</t>
</section>
</section>


   </middle>
   <back>
      <references title="Normative References">


<reference anchor='RFC2119'>

<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year='1997' month='March' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='ftp://ftp.isi.edu/in-notes/rfc2119.txt' />
<format type='HTML' octets='17491' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5777' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>

         
           <reference anchor="RFC3986">

<front>
<title abbrev='URI Generic Syntax'>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
<organization abbrev='W3C/MIT'>World Wide Web Consortium</organization>
<address>
<postal>
<street>Massachusetts Institute of Technology</street>
<street>77 Massachusetts Avenue</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code>
<country>USA</country></postal>
<phone>+1-617-253-5702</phone>
<facsimile>+1-617-258-5999</facsimile>
<email>timbl@w3.org</email>
<uri>http://www.w3.org/People/Berners-Lee/</uri></address></author>
<author initials='R.' surname='Fielding' fullname='Roy T. Fielding'>
<organization abbrev='Day Software'>Day Software</organization>
<address>
<postal>
<street>5251 California Ave., Suite 110</street>
<city>Irvine</city>
<region>CA</region>
<code>92617</code>
<country>USA</country></postal>
<phone>+1-949-679-2960</phone>
<facsimile>+1-949-679-2972</facsimile>
<email>fielding@gbiv.com</email>
<uri>http://roy.gbiv.com/</uri></address></author>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization abbrev='Adobe Systems'>Adobe Systems Incorporated</organization>
<address>
<postal>
<street>345 Park Ave</street>
<city>San Jose</city>
<region>CA</region>
<code>95110</code>
<country>USA</country></postal>
<phone>+1-408-536-3024</phone>
<email>LMM@acm.org</email>
<uri>http://larry.masinter.net/</uri></address></author>
<date year='2005' month='January' />
<area>Applications</area>
<keyword>uniform resource identifier</keyword>
<keyword>URI</keyword>
<keyword>URL</keyword>
<keyword>URN</keyword>
<keyword>WWW</keyword>
<keyword>resource</keyword>
<abstract>
<t>
A Uniform Resource Identifier (URI) is a compact sequence of characters
that identifies an abstract or physical resource.  This specification
defines the generic URI syntax and a process for resolving URI references
that might be in relative form, along with guidelines and security
considerations for the use of URIs on the Internet.
The URI syntax defines a grammar that is a superset of all valid URIs,
allowing an implementation to parse the common components of a URI
reference without knowing the scheme-specific requirements of every
possible identifier.  This specification does not define a generative
grammar for URIs; that task is performed by the individual
specifications of each URI scheme.
</t></abstract></front>

<seriesInfo name='STD' value='66' />
<seriesInfo name='RFC' value='3986' />
<format type='TXT' octets='141811' target='ftp://ftp.isi.edu/in-notes/rfc3986.txt' />
<format type='HTML' octets='213584' target='http://xml.resource.org/public/rfc/html/rfc3986.html' />
<format type='XML' octets='163534' target='http://xml.resource.org/public/rfc/xml/rfc3986.xml' />
</reference>

         
         
          <reference anchor="RFC5050">

<front>
<title>Bundle Protocol Specification</title>
<author initials='K.' surname='Scott' fullname='K. Scott'>
<organization /></author>
<author initials='S.' surname='Burleigh' fullname='S. Burleigh'>
<organization /></author>
<date year='2007' month='November' />
<abstract>
<t>This document describes the end-to-end protocol, block formats, and abstract service description for the exchange of messages (bundles) in Delay Tolerant Networking (DTN).&lt;/t>&lt;t> This document was produced within the IRTF's Delay Tolerant Networking Research Group (DTNRG) and represents the consensus of all of the active contributors to this group. See http://www.dtnrg.org for more information. This memo defines an Experimental Protocol for the Internet community.</t></abstract></front>

<seriesInfo name='RFC' value='5050' />
<format type='TXT' octets='120435' target='ftp://ftp.rfc-editor.org/in-notes/rfc5050.txt' />
</reference>

<!--I-D.irtf-dtnrg-iana-bp-registries -->
         
         <reference anchor="RFC6255">
            <front>
               <title>Delay-Tolerant Networking (DTN) Bundle Protocol IANA Registries</title>
               <author initials="M." surname="Blanchet" fullname="Marc Blanchet">
                  <organization>Viagenie</organization>
                  <address>
                     <postal>
                        <street>2600 boul. Laurier, suite 625</street>
                        <city>Quebec</city>
                        <region>QC</region>
                        <code>G1V 4W1</code>
                        <country>Canada</country>
                     </postal>
                     <URI>http://www.viagenie.ca</URI>
                     <email>Marc.Blanchet@viagenie.ca</email>
                  </address>
               </author>
               <date month="May" year="2010"/>
            </front>
            <seriesInfo name="RFC" value="6255"/>
         </reference>         
         
         
      </references>        
 
      <references title="Informative References">
         <reference anchor="RFC4838">

<front>
<title>Delay-Tolerant Networking Architecture</title>
<author initials='V.' surname='Cerf' fullname='V. Cerf'>
<organization /></author>
<author initials='S.' surname='Burleigh' fullname='S. Burleigh'>
<organization /></author>
<author initials='A.' surname='Hooke' fullname='A. Hooke'>
<organization /></author>
<author initials='L.' surname='Torgerson' fullname='L. Torgerson'>
<organization /></author>
<author initials='R.' surname='Durst' fullname='R. Durst'>
<organization /></author>
<author initials='K.' surname='Scott' fullname='K. Scott'>
<organization /></author>
<author initials='K.' surname='Fall' fullname='K. Fall'>
<organization /></author>
<author initials='H.' surname='Weiss' fullname='H. Weiss'>
<organization /></author>
<date year='2007' month='April' />
<abstract>
<t>This document describes an architecture for delay-tolerant and disruption-tolerant networks, and is an evolution of the architecture originally designed for the Interplanetary Internet, a communication system envisioned to provide Internet-like services across interplanetary distances in support of deep space exploration.  This document describes an architecture that addresses a variety of problems with internetworks having operational and performance characteristics that make conventional (Internet-like) networking approaches either unworkable or impractical.  We define a message- oriented overlay that exists above the transport (or other) layers of the networks it interconnects.  The document presents a motivation for the architecture, an architectural overview, review of state management required for its operation, and a discussion of application design issues.  This document represents the consensus of the IRTF DTN research group and has been widely reviewed by that group.  This memo provides information for the Internet community.</t></abstract></front>

<seriesInfo name='RFC' value='4838' />
<format type='TXT' octets='89265' target='ftp://ftp.rfc-editor.org/in-notes/rfc4838.txt' />
</reference>
    
         
<!--draft-irtf-dtnrg-bundle-security-15.txt-->
         <reference anchor="RFC6257">
            <front>
               <title>Bundle Security Protocol Specification</title>
               <author initials="S." surname="Symington" fullname="Susan Symington">
                  <organization>The MITRE Corporation</organization>
                  <address>
                     <postal>
                        <street>7515 Colshire Drive</street>
                        <city>McLean</city>
                        <region>VA</region>
                        <code>22102</code>
                        <country>US</country>
                     </postal>
                     <phone>+1 703-983-7209</phone>
                     <email>susan@mitre.org</email>
                  </address>
               </author>
      		<author initials="S." surname="Farrell" fullname="Stephen Farrell">
         		<organization>Trinity College Dublin</organization>
         		<address>
            		<postal>
         			<street>Distributed Systems Group</street>
         			<street>Department of Computer Science</street>
               			<street>Trinity College </street>
			   	<city>Dublin</city>
			   	<code>2</code>
               			<country>Ireland</country>
            		</postal>
            		<phone>+353-1-608-1539</phone>
            		<email>stephen.farrell@cs.tcd.ie</email>
         		</address>
      		</author>

      <author initials="H." surname="Weiss" fullname="Howard Weiss">
         <organization>SPARTA, Inc.</organization>
         <address>
            <postal>
               <street>7075 Samuel Morse Drive</street>
               <city>Columbia</city>
               <region>MD</region>
               <code>21046</code>
               <country>US</country>
            </postal>
            <phone>+1-410-872-1515 x201</phone>
            <email>hsw@sparta.com</email>
         </address>
      </author>

<author initials="P." surname="Lovell" fullname="Peter Lovell">
<organization>SPARTA, Inc.</organization>
</author>
               <date month="May" year="2011"/>
            </front>
            <seriesInfo name="RFC" value="6257"/>
         </reference>        
         
      </references>
   </back>
</rfc>
